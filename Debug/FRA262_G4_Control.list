
FRA262_G4_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e140  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800e2e0  0800e2e0  0001e2e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7b4  0800e7b4  00020400  2**0
                  CONTENTS
  4 .ARM          00000008  0800e7b4  0800e7b4  0001e7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7bc  0800e7bc  00020400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7bc  0800e7bc  0001e7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7c0  0800e7c0  0001e7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000400  20000000  0800e7c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c6c  20000400  0800ebc4  00020400  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000106c  0800ebc4  0002106c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012590  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002498  00000000  00000000  000329c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00034e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  00035d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c84  00000000  00000000  00036bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b39  00000000  00000000  0004f874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dac7  00000000  00000000  000613ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fee74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f4  00000000  00000000  000feec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000400 	.word	0x20000400
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e2c8 	.word	0x0800e2c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000404 	.word	0x20000404
 80001dc:	0800e2c8 	.word	0x0800e2c8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <modbus_1t5_Timeout+0x1c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	751a      	strb	r2, [r3, #20]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	2000041c 	.word	0x2000041c

08001028 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <modbus_3t5_Timeout+0x1c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	755a      	strb	r2, [r3, #21]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	2000041c 	.word	0x2000041c

08001048 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <modbus_UART_Recived+0x60>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001062:	1c59      	adds	r1, r3, #1
 8001064:	b289      	uxth	r1, r1
 8001066:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 800106a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800106e:	d210      	bcs.n	8001092 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68d8      	ldr	r0, [r3, #12]
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <modbus_UART_Recived+0x60>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001082:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001086:	4413      	add	r3, r2
 8001088:	3302      	adds	r3, #2
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	f007 f994 	bl	80083ba <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000041c 	.word	0x2000041c

080010ac <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80010b6:	4a24      	ldr	r2, [pc, #144]	; (8001148 <Modbus_init+0x9c>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <Modbus_init+0x9c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <Modbus_init+0x9c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	4a20      	ldr	r2, [pc, #128]	; (800114c <Modbus_init+0xa0>)
 80010cc:	2114      	movs	r1, #20
 80010ce:	4618      	mov	r0, r3
 80010d0:	f006 fae0 	bl	8007694 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <Modbus_init+0x9c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <Modbus_init+0xa4>)
 80010dc:	210e      	movs	r1, #14
 80010de:	4618      	mov	r0, r3
 80010e0:	f006 fad8 	bl	8007694 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <Modbus_init+0x9c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <Modbus_init+0xa8>)
 80010ec:	2103      	movs	r1, #3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f007 f876 	bl	80081e0 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <Modbus_init+0x9c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d8      	ldr	r0, [r3, #12]
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <Modbus_init+0x9c>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <Modbus_init+0x9c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001106:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800110a:	4413      	add	r3, r2
 800110c:	3302      	adds	r3, #2
 800110e:	2201      	movs	r2, #1
 8001110:	4619      	mov	r1, r3
 8001112:	f007 f952 	bl	80083ba <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <Modbus_init+0x9c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10c      	bne.n	8001140 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <Modbus_init+0x9c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	4618      	mov	r0, r3
 800112e:	f005 fb65 	bl	80067fc <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <Modbus_init+0x9c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f005 fd9a 	bl	8006c74 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000041c 	.word	0x2000041c
 800114c:	08001009 	.word	0x08001009
 8001150:	08001029 	.word	0x08001029
 8001154:	08001049 	.word	0x08001049

08001158 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001164:	23ff      	movs	r3, #255	; 0xff
 8001166:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800116c:	e013      	b.n	8001196 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	4053      	eors	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <CRC16+0x64>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4413      	add	r3, r2
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	4053      	eors	r3, r2
 800118a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <CRC16+0x68>)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001196:	883b      	ldrh	r3, [r7, #0]
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	803a      	strh	r2, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e6      	bne.n	800116e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000100 	.word	0x20000100
 80011c0:	20000000 	.word	0x20000000

080011c4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80011ca:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	7e1b      	ldrb	r3, [r3, #24]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d80a      	bhi.n	80011ec <Modbus_Protocal_Worker+0x28>
 80011d6:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <Modbus_Protocal_Worker+0x18>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	080011f7 	.word	0x080011f7
 80011e0:	08001397 	.word	0x08001397
 80011e4:	08001283 	.word	0x08001283
 80011e8:	080012a9 	.word	0x080012a9
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80011ec:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	761a      	strb	r2, [r3, #24]
		break;
 80011f4:	e0e8      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001202:	f000 f9d7 	bl	80015b4 <Modbus_Emission>
 8001206:	e01c      	b.n	8001242 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001208:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	7d9b      	ldrb	r3, [r3, #22]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d017      	beq.n	8001242 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800121a:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001222:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2203      	movs	r2, #3
 8001240:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b20      	cmp	r3, #32
 8001250:	f040 80b3 	bne.w	80013ba <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800125e:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001270:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001274:	4413      	add	r3, r2
 8001276:	3302      	adds	r3, #2
 8001278:	2201      	movs	r2, #1
 800127a:	4619      	mov	r1, r3
 800127c:	f007 f89d 	bl	80083ba <HAL_UART_Receive_IT>
		}
		break;
 8001280:	e09b      	b.n	80013ba <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001282:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7d1b      	ldrb	r3, [r3, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8098 	beq.w	80013be <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001296:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	22fe      	movs	r2, #254	; 0xfe
 800129c:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2204      	movs	r2, #4
 80012a4:	761a      	strb	r2, [r3, #24]
		}
		break;
 80012a6:	e08a      	b.n	80013be <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	7d9b      	ldrb	r3, [r3, #22]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80012c6:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ce:	f113 0f02 	cmn.w	r3, #2
 80012d2:	d150      	bne.n	8001376 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80012d4:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f203 2272 	addw	r2, r3, #626	; 0x272
 80012e4:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80012ec:	3b02      	subs	r3, #2
 80012ee:	4619      	mov	r1, r3
 80012f0:	4610      	mov	r0, r2
 80012f2:	f7ff ff31 	bl	8001158 <CRC16>
 80012f6:	4603      	mov	r3, r0
 80012f8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012fa:	793a      	ldrb	r2, [r7, #4]
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001308:	3b02      	subs	r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001310:	429a      	cmp	r2, r3
 8001312:	d10c      	bne.n	800132e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001314:	797a      	ldrb	r2, [r7, #5]
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001322:	3b01      	subs	r3, #1
 8001324:	440b      	add	r3, r1
 8001326:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800132a:	429a      	cmp	r2, r3
 800132c:	d004      	beq.n	8001338 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	22ff      	movs	r2, #255	; 0xff
 8001334:	75da      	strb	r2, [r3, #23]
				break;
 8001336:	e047      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d113      	bne.n	8001372 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800135a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001364:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001366:	461a      	mov	r2, r3
 8001368:	f008 f9ea 	bl	8009740 <memcpy>

			//execute command
			Modbus_frame_response();
 800136c:	f000 f90a 	bl	8001584 <Modbus_frame_response>
 8001370:	e001      	b.n	8001376 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001372:	bf00      	nop
					}
		break;


	}
}
 8001374:	e028      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7d5b      	ldrb	r3, [r3, #21]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	4618      	mov	r0, r3
 8001390:	f007 f8c2 	bl	8008518 <HAL_UART_AbortReceive>
		break;
 8001394:	e015      	b.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d10f      	bne.n	80013c6 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	761a      	strb	r2, [r3, #24]
		break;
 80013b8:	e005      	b.n	80013c6 <Modbus_Protocal_Worker+0x202>
		break;
 80013ba:	bf00      	nop
 80013bc:	e004      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013be:	bf00      	nop
 80013c0:	e002      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c6:	bf00      	nop
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000041c 	.word	0x2000041c

080013d4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <modbusWrite1Register+0x80>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	7e9b      	ldrb	r3, [r3, #26]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <modbusWrite1Register+0x80>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	7edb      	ldrb	r3, [r3, #27]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <modbusWrite1Register+0x80>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d903      	bls.n	8001406 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013fe:	2002      	movs	r0, #2
 8001400:	f000 f8a4 	bl	800154c <ModbusErrorReply>
			 return;
 8001404:	e023      	b.n	800144e <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <modbusWrite1Register+0x80>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <modbusWrite1Register+0x80>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	7f12      	ldrb	r2, [r2, #28]
 8001418:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <modbusWrite1Register+0x80>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <modbusWrite1Register+0x80>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6859      	ldr	r1, [r3, #4]
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	440b      	add	r3, r1
 800142a:	7f52      	ldrb	r2, [r2, #29]
 800142c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <modbusWrite1Register+0x80>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <modbusWrite1Register+0x80>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 800143c:	2208      	movs	r2, #8
 800143e:	4619      	mov	r1, r3
 8001440:	f008 f97e 	bl	8009740 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <modbusWrite1Register+0x80>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2205      	movs	r2, #5
 800144a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000041c 	.word	0x2000041c

08001458 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <modbusRead1Register+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	7f1b      	ldrb	r3, [r3, #28]
 8001464:	b29b      	uxth	r3, r3
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <modbusRead1Register+0xf0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	7f5b      	ldrb	r3, [r3, #29]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4413      	add	r3, r2
 8001474:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <modbusRead1Register+0xf0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7e9b      	ldrb	r3, [r3, #26]
 800147c:	b29b      	uxth	r3, r3
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <modbusRead1Register+0xf0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	7edb      	ldrb	r3, [r3, #27]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <modbusRead1Register+0x42>
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	2b7d      	cmp	r3, #125	; 0x7d
 8001498:	d903      	bls.n	80014a2 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f856 	bl	800154c <ModbusErrorReply>
		 return;
 80014a0:	e04e      	b.n	8001540 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80014a2:	88ba      	ldrh	r2, [r7, #4]
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <modbusRead1Register+0xf0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d808      	bhi.n	80014c0 <modbusRead1Register+0x68>
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4413      	add	r3, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <modbusRead1Register+0xf0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d903      	bls.n	80014c8 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f000 f843 	bl	800154c <ModbusErrorReply>
		 return;
 80014c6:	e03b      	b.n	8001540 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <modbusRead1Register+0xf0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <modbusRead1Register+0xf0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	0052      	lsls	r2, r2, #1
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80014e2:	2400      	movs	r4, #0
 80014e4:	e020      	b.n	8001528 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <modbusRead1Register+0xf0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	88bb      	ldrh	r3, [r7, #4]
 80014ee:	4423      	add	r3, r4
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	18d1      	adds	r1, r2, r3
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <modbusRead1Register+0xf0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	1c63      	adds	r3, r4, #1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	7849      	ldrb	r1, [r1, #1]
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <modbusRead1Register+0xf0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	4423      	add	r3, r4
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <modbusRead1Register+0xf0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	0063      	lsls	r3, r4, #1
 800151a:	3303      	adds	r3, #3
 800151c:	7809      	ldrb	r1, [r1, #0]
 800151e:	4413      	add	r3, r2
 8001520:	460a      	mov	r2, r1
 8001522:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001526:	3401      	adds	r4, #1
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	429c      	cmp	r4, r3
 800152c:	dbdb      	blt.n	80014e6 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <modbusRead1Register+0xf0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	2000041c 	.word	0x2000041c

0800154c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register | 0x80;
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <ModbusErrorReply+0x34>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2283      	movs	r2, #131	; 0x83
 800155c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <ModbusErrorReply+0x34>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	79fa      	ldrb	r2, [r7, #7]
 8001566:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <ModbusErrorReply+0x34>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	2000041c 	.word	0x2000041c

08001584 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <Modbus_frame_response+0x2c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	7e5b      	ldrb	r3, [r3, #25]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d004      	beq.n	800159c <Modbus_frame_response+0x18>
 8001592:	2b06      	cmp	r3, #6
 8001594:	d105      	bne.n	80015a2 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001596:	f7ff ff1d 	bl	80013d4 <modbusWrite1Register>
		break;
 800159a:	e006      	b.n	80015aa <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800159c:	f7ff ff5c 	bl	8001458 <modbusRead1Register>
		break;
 80015a0:	e003      	b.n	80015aa <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff ffd2 	bl	800154c <ModbusErrorReply>
		break;
 80015a8:	bf00      	nop

	}
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000041c 	.word	0x2000041c

080015b4 <Modbus_Emission>:

void Modbus_Emission()
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <Modbus_Emission+0xfc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b20      	cmp	r3, #32
 80015c8:	d15e      	bne.n	8001688 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80015ca:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <Modbus_Emission+0xfc>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <Modbus_Emission+0xfc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <Modbus_Emission+0xfc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80015e0:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80015e2:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <Modbus_Emission+0xfc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <Modbus_Emission+0xfc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 80015f2:	461a      	mov	r2, r3
 80015f4:	f008 f8a4 	bl	8009740 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80015f8:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <Modbus_Emission+0xfc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <Modbus_Emission+0xfc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3203      	adds	r2, #3
 8001608:	b292      	uxth	r2, r2
 800160a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <Modbus_Emission+0xfc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <Modbus_Emission+0xfc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800161e:	3b02      	subs	r3, #2
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f7ff fd98 	bl	8001158 <CRC16>
 8001628:	4603      	mov	r3, r0
 800162a:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <Modbus_Emission+0xfc>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <Modbus_Emission+0xfc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001638:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800163a:	7939      	ldrb	r1, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	460a      	mov	r2, r1
 8001640:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <Modbus_Emission+0xfc>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <Modbus_Emission+0xfc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001650:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001652:	7979      	ldrb	r1, [r7, #5]
 8001654:	4413      	add	r3, r2
 8001656:	460a      	mov	r2, r1
 8001658:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <Modbus_Emission+0xfc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b20      	cmp	r3, #32
 800166a:	d10d      	bne.n	8001688 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <Modbus_Emission+0xfc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <Modbus_Emission+0xfc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <Modbus_Emission+0xfc>)
 800167c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800167e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001682:	461a      	mov	r2, r3
 8001684:	f006 feca 	bl	800841c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <Modbus_Emission+0xfc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <Modbus_Emission+0xfc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <Modbus_Emission+0xfc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <Modbus_Emission+0xfc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2202      	movs	r2, #2
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000041c 	.word	0x2000041c
 80016b4:	00000000 	.word	0x00000000

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016be:	f002 ffe1 	bl	8004684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c2:	f000 fa75 	bl	8001bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c6:	f000 fd39 	bl	800213c <MX_GPIO_Init>
  MX_DMA_Init();
 80016ca:	f000 fd01 	bl	80020d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016ce:	f000 fcd3 	bl	8002078 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80016d2:	f000 fbc5 	bl	8001e60 <MX_TIM3_Init>
  MX_TIM1_Init();
 80016d6:	f000 fb33 	bl	8001d40 <MX_TIM1_Init>
  MX_ADC1_Init();
 80016da:	f000 fad1 	bl	8001c80 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80016de:	f000 fca1 	bl	8002024 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 80016e2:	f000 fc4b 	bl	8001f7c <MX_TIM11_Init>
  MX_TIM9_Init();
 80016e6:	f000 fc0f 	bl	8001f08 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  hmodbus.huart = &huart2;
 80016ea:	4b97      	ldr	r3, [pc, #604]	; (8001948 <main+0x290>)
 80016ec:	4a97      	ldr	r2, [pc, #604]	; (800194c <main+0x294>)
 80016ee:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 80016f0:	4b95      	ldr	r3, [pc, #596]	; (8001948 <main+0x290>)
 80016f2:	4a97      	ldr	r2, [pc, #604]	; (8001950 <main+0x298>)
 80016f4:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80016f6:	4b94      	ldr	r3, [pc, #592]	; (8001948 <main+0x290>)
 80016f8:	2215      	movs	r2, #21
 80016fa:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 70;
 80016fc:	4b92      	ldr	r3, [pc, #584]	; (8001948 <main+0x290>)
 80016fe:	2246      	movs	r2, #70	; 0x46
 8001700:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001702:	4994      	ldr	r1, [pc, #592]	; (8001954 <main+0x29c>)
 8001704:	4890      	ldr	r0, [pc, #576]	; (8001948 <main+0x290>)
 8001706:	f7ff fcd1 	bl	80010ac <Modbus_init>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 800170a:	2104      	movs	r1, #4
 800170c:	4892      	ldr	r0, [pc, #584]	; (8001958 <main+0x2a0>)
 800170e:	f005 fbcb 	bl	8006ea8 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Start Timer1
 8001712:	4892      	ldr	r0, [pc, #584]	; (800195c <main+0x2a4>)
 8001714:	f005 f818 	bl	8006748 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001718:	2100      	movs	r1, #0
 800171a:	4890      	ldr	r0, [pc, #576]	; (800195c <main+0x2a4>)
 800171c:	f005 f992 	bl	8006a44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001720:	2104      	movs	r1, #4
 8001722:	488e      	ldr	r0, [pc, #568]	; (800195c <main+0x2a4>)
 8001724:	f005 f98e 	bl	8006a44 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001728:	488d      	ldr	r0, [pc, #564]	; (8001960 <main+0x2a8>)
 800172a:	f005 f867 	bl	80067fc <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, L_EN);
 800172e:	4b8d      	ldr	r3, [pc, #564]	; (8001964 <main+0x2ac>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800173a:	488b      	ldr	r0, [pc, #556]	; (8001968 <main+0x2b0>)
 800173c:	f004 faf6 	bl	8005d2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, R_EN);
 8001740:	4b8a      	ldr	r3, [pc, #552]	; (800196c <main+0x2b4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	2110      	movs	r1, #16
 800174a:	4887      	ldr	r0, [pc, #540]	; (8001968 <main+0x2b0>)
 800174c:	f004 faee 	bl	8005d2c <HAL_GPIO_WritePin>

  HAL_ADC_Start_DMA(&hadc1, XYSwitch, 2);
 8001750:	2202      	movs	r2, #2
 8001752:	4987      	ldr	r1, [pc, #540]	; (8001970 <main+0x2b8>)
 8001754:	4887      	ldr	r0, [pc, #540]	; (8001974 <main+0x2bc>)
 8001756:	f003 f86f 	bl	8004838 <HAL_ADC_Start_DMA>

  registerFrame[1].U16 = 0;
 800175a:	4b7e      	ldr	r3, [pc, #504]	; (8001954 <main+0x29c>)
 800175c:	2200      	movs	r2, #0
 800175e:	805a      	strh	r2, [r3, #2]
  EndEffectorState = 0;	//SoftReset
 8001760:	4b85      	ldr	r3, [pc, #532]	; (8001978 <main+0x2c0>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
  EndEffectorWriteFlag = 1;
 8001766:	4b85      	ldr	r3, [pc, #532]	; (800197c <main+0x2c4>)
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Protocal_Worker();
 800176c:	f7ff fd2a 	bl	80011c4 <Modbus_Protocal_Worker>
	  static uint32_t heartbeat = 0;
	  static uint32_t uart_time = 0;
	  if(heartbeat < HAL_GetTick())
 8001770:	f002 ffee 	bl	8004750 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	4b82      	ldr	r3, [pc, #520]	; (8001980 <main+0x2c8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d909      	bls.n	8001792 <main+0xda>
	  {
		  heartbeat = HAL_GetTick()+100;
 800177e:	f002 ffe7 	bl	8004750 <HAL_GetTick>
 8001782:	4603      	mov	r3, r0
 8001784:	3364      	adds	r3, #100	; 0x64
 8001786:	4a7e      	ldr	r2, [pc, #504]	; (8001980 <main+0x2c8>)
 8001788:	6013      	str	r3, [r2, #0]
		  registerFrame[0].U16 = 22881;
 800178a:	4b72      	ldr	r3, [pc, #456]	; (8001954 <main+0x29c>)
 800178c:	f645 1261 	movw	r2, #22881	; 0x5961
 8001790:	801a      	strh	r2, [r3, #0]
	  }

	  if (huart1.gState == HAL_UART_STATE_READY && (HAL_GetTick() >= uart_time))
 8001792:	4b7c      	ldr	r3, [pc, #496]	; (8001984 <main+0x2cc>)
 8001794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b20      	cmp	r3, #32
 800179c:	d127      	bne.n	80017ee <main+0x136>
 800179e:	f002 ffd7 	bl	8004750 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	4b78      	ldr	r3, [pc, #480]	; (8001988 <main+0x2d0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d320      	bcc.n	80017ee <main+0x136>
	  {
		  sprintf(TxBuffer,"%d %.2f\r\n",position, setposition);
 80017ac:	4b77      	ldr	r3, [pc, #476]	; (800198c <main+0x2d4>)
 80017ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b2:	461c      	mov	r4, r3
 80017b4:	4b76      	ldr	r3, [pc, #472]	; (8001990 <main+0x2d8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fecd 	bl	8000558 <__aeabi_f2d>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	e9cd 2300 	strd	r2, r3, [sp]
 80017c6:	4622      	mov	r2, r4
 80017c8:	4972      	ldr	r1, [pc, #456]	; (8001994 <main+0x2dc>)
 80017ca:	4873      	ldr	r0, [pc, #460]	; (8001998 <main+0x2e0>)
 80017cc:	f008 fe4e 	bl	800a46c <siprintf>
		  HAL_UART_Transmit_IT(&huart1, (uint8_t *)TxBuffer, strlen(TxBuffer));
 80017d0:	4871      	ldr	r0, [pc, #452]	; (8001998 <main+0x2e0>)
 80017d2:	f7fe fd05 	bl	80001e0 <strlen>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b29b      	uxth	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	496e      	ldr	r1, [pc, #440]	; (8001998 <main+0x2e0>)
 80017de:	4869      	ldr	r0, [pc, #420]	; (8001984 <main+0x2cc>)
 80017e0:	f006 fda6 	bl	8008330 <HAL_UART_Transmit_IT>
		  uart_time += 20;
 80017e4:	4b68      	ldr	r3, [pc, #416]	; (8001988 <main+0x2d0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3314      	adds	r3, #20
 80017ea:	4a67      	ldr	r2, [pc, #412]	; (8001988 <main+0x2d0>)
 80017ec:	6013      	str	r3, [r2, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  VelocityApprox();
 80017ee:	f000 fd4b 	bl	8002288 <VelocityApprox>
	  AccelerationApprox();
 80017f2:	f000 fd77 	bl	80022e4 <AccelerationApprox>
	  Routine(); //Sent Y Actual Position Velocity Acceleration to Base System
 80017f6:	f000 fd93 	bl	8002320 <Routine>

//	  EndEffectorWrite(); //I2C
	  JoystickPinUpdate(); //Check Pin Flag
 80017fa:	f000 fe59 	bl	80024b0 <JoystickPinUpdate>

	  switch(scheduler)
 80017fe:	4b67      	ldr	r3, [pc, #412]	; (800199c <main+0x2e4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b05      	cmp	r3, #5
 8001804:	d8b2      	bhi.n	800176c <main+0xb4>
 8001806:	a201      	add	r2, pc, #4	; (adr r2, 800180c <main+0x154>)
 8001808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180c:	08001825 	.word	0x08001825
 8001810:	0800183b 	.word	0x0800183b
 8001814:	080018bb 	.word	0x080018bb
 8001818:	080019b5 	.word	0x080019b5
 800181c:	08001ae1 	.word	0x08001ae1
 8001820:	08001b6f 	.word	0x08001b6f
	  {
	  //JoyStick
	  case 0:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001824:	4b4c      	ldr	r3, [pc, #304]	; (8001958 <main+0x2a0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	b21a      	sxth	r2, r3
 800182c:	4b57      	ldr	r3, [pc, #348]	; (800198c <main+0x2d4>)
 800182e:	801a      	strh	r2, [r3, #0]
		  JoystickControl(); //Read Pin form JoyStick
 8001830:	f000 feda 	bl	80025e8 <JoystickControl>
		  JoystickLocationState();
 8001834:	f000 ffac 	bl	8002790 <JoystickLocationState>
		  break;
 8001838:	e19f      	b.n	8001b7a <main+0x4c2>

	  //Go Pick
	  case 1 :
		  registerFrame[16].U16 = 8; //Y Moving Status: Go Pick
 800183a:	4b46      	ldr	r3, [pc, #280]	; (8001954 <main+0x29c>)
 800183c:	2208      	movs	r2, #8
 800183e:	841a      	strh	r2, [r3, #32]
		  qf = (PickTray.hole_y[HoleSequence])/0.045;
 8001840:	4b57      	ldr	r3, [pc, #348]	; (80019a0 <main+0x2e8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a57      	ldr	r2, [pc, #348]	; (80019a4 <main+0x2ec>)
 8001846:	330c      	adds	r3, #12
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	3304      	adds	r3, #4
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe81 	bl	8000558 <__aeabi_f2d>
 8001856:	a33a      	add	r3, pc, #232	; (adr r3, 8001940 <main+0x288>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe fffe 	bl	800085c <__aeabi_ddiv>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f9c6 	bl	8000bf8 <__aeabi_d2f>
 800186c:	4603      	mov	r3, r0
 800186e:	4a4e      	ldr	r2, [pc, #312]	; (80019a8 <main+0x2f0>)
 8001870:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PickTray.hole_x[HoleSequence]*10; //X-Axis Target Position Pick Tray
 8001872:	4b4b      	ldr	r3, [pc, #300]	; (80019a0 <main+0x2e8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a4b      	ldr	r2, [pc, #300]	; (80019a4 <main+0x2ec>)
 8001878:	3304      	adds	r3, #4
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	edd3 7a00 	vldr	s15, [r3]
 8001882:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800188a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800188e:	ee17 3a90 	vmov	r3, s15
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <main+0x29c>)
 8001896:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 800189a:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <main+0x29c>)
 800189c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80018a0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 3;
 80018a4:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <main+0x29c>)
 80018a6:	2203      	movs	r2, #3
 80018a8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  Trajectstate = 0;
 80018ac:	4b3f      	ldr	r3, [pc, #252]	; (80019ac <main+0x2f4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
		  scheduler = 3;
 80018b2:	4b3a      	ldr	r3, [pc, #232]	; (800199c <main+0x2e4>)
 80018b4:	2203      	movs	r2, #3
 80018b6:	601a      	str	r2, [r3, #0]
		  break;
 80018b8:	e15f      	b.n	8001b7a <main+0x4c2>

	  //Go Place
	  case 2 :
		  registerFrame[16].U16 = 16; //Y Moving Status: Go Place
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <main+0x29c>)
 80018bc:	2210      	movs	r2, #16
 80018be:	841a      	strh	r2, [r3, #32]
		  qf = (PlaceTray.hole_y[HoleSequence])/0.045;
 80018c0:	4b37      	ldr	r3, [pc, #220]	; (80019a0 <main+0x2e8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a3a      	ldr	r2, [pc, #232]	; (80019b0 <main+0x2f8>)
 80018c6:	330c      	adds	r3, #12
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	3304      	adds	r3, #4
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe41 	bl	8000558 <__aeabi_f2d>
 80018d6:	a31a      	add	r3, pc, #104	; (adr r3, 8001940 <main+0x288>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe ffbe 	bl	800085c <__aeabi_ddiv>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f7ff f986 	bl	8000bf8 <__aeabi_d2f>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4a2e      	ldr	r2, [pc, #184]	; (80019a8 <main+0x2f0>)
 80018f0:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PlaceTray.hole_x[HoleSequence]*10; //X-Axis Target Position Place Tray
 80018f2:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <main+0x2e8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a2e      	ldr	r2, [pc, #184]	; (80019b0 <main+0x2f8>)
 80018f8:	3304      	adds	r3, #4
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	edd3 7a00 	vldr	s15, [r3]
 8001902:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800190a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800190e:	ee17 3a90 	vmov	r3, s15
 8001912:	b29a      	uxth	r2, r3
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <main+0x29c>)
 8001916:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <main+0x29c>)
 800191c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001920:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 3;
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <main+0x29c>)
 8001926:	2203      	movs	r2, #3
 8001928:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  Trajectstate = 0;
 800192c:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <main+0x2f4>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
		  scheduler = 3;
 8001932:	4b1a      	ldr	r3, [pc, #104]	; (800199c <main+0x2e4>)
 8001934:	2203      	movs	r2, #3
 8001936:	601a      	str	r2, [r3, #0]
		  break;
 8001938:	e11f      	b.n	8001b7a <main+0x4c2>
 800193a:	bf00      	nop
 800193c:	f3af 8000 	nop.w
 8001940:	70a3d70a 	.word	0x70a3d70a
 8001944:	3fa70a3d 	.word	0x3fa70a3d
 8001948:	20000a88 	.word	0x20000a88
 800194c:	2000080c 	.word	0x2000080c
 8001950:	200006e4 	.word	0x200006e4
 8001954:	20000f60 	.word	0x20000f60
 8001958:	2000057c 	.word	0x2000057c
 800195c:	200004c8 	.word	0x200004c8
 8001960:	20000630 	.word	0x20000630
 8001964:	20000208 	.word	0x20000208
 8001968:	40020400 	.word	0x40020400
 800196c:	20000204 	.word	0x20000204
 8001970:	20000a70 	.word	0x20000a70
 8001974:	20000420 	.word	0x20000420
 8001978:	20000a80 	.word	0x20000a80
 800197c:	20000a7c 	.word	0x20000a7c
 8001980:	2000103c 	.word	0x2000103c
 8001984:	20000798 	.word	0x20000798
 8001988:	20001040 	.word	0x20001040
 800198c:	2000092c 	.word	0x2000092c
 8001990:	20000938 	.word	0x20000938
 8001994:	0800e2e0 	.word	0x0800e2e0
 8001998:	20000fec 	.word	0x20000fec
 800199c:	200008e0 	.word	0x200008e0
 80019a0:	200008e4 	.word	0x200008e4
 80019a4:	20000964 	.word	0x20000964
 80019a8:	200008f4 	.word	0x200008f4
 80019ac:	200008ec 	.word	0x200008ec
 80019b0:	200009c8 	.word	0x200009c8

	  //Trajectory
	  case 3:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 80019b4:	4b71      	ldr	r3, [pc, #452]	; (8001b7c <main+0x4c4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	4b70      	ldr	r3, [pc, #448]	; (8001b80 <main+0x4c8>)
 80019be:	801a      	strh	r2, [r3, #0]
		  static uint32_t timestamp0 = 0;
		  if(HAL_GetTick() > timestamp0)
 80019c0:	f002 fec6 	bl	8004750 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <main+0x4cc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d909      	bls.n	80019e2 <main+0x32a>
		  {
			  timestamp0 = HAL_GetTick() + 1;
 80019ce:	f002 febf 	bl	8004750 <HAL_GetTick>
 80019d2:	4603      	mov	r3, r0
 80019d4:	3301      	adds	r3, #1
 80019d6:	4a6b      	ldr	r2, [pc, #428]	; (8001b84 <main+0x4cc>)
 80019d8:	6013      	str	r3, [r2, #0]
			  VelocityApprox();
 80019da:	f000 fc55 	bl	8002288 <VelocityApprox>
			  AccelerationApprox();
 80019de:	f000 fc81 	bl	80022e4 <AccelerationApprox>
//			  TrajectoryGenerator();
//		  }

		  //PWM & Motor drive & PID
		  static uint32_t timestamp2 = 0;
		  if (HAL_GetTick()>= timestamp2)
 80019e2:	f002 feb5 	bl	8004750 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	4b67      	ldr	r3, [pc, #412]	; (8001b88 <main+0x4d0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d33b      	bcc.n	8001a68 <main+0x3b0>
		  {
			  timestamp2 = HAL_GetTick() + 1;
 80019f0:	f002 feae 	bl	8004750 <HAL_GetTick>
 80019f4:	4603      	mov	r3, r0
 80019f6:	3301      	adds	r3, #1
 80019f8:	4a63      	ldr	r2, [pc, #396]	; (8001b88 <main+0x4d0>)
 80019fa:	6013      	str	r3, [r2, #0]
			  duty = PIDcal();
 80019fc:	f000 fcf0 	bl	80023e0 <PIDcal>
 8001a00:	eef0 7a40 	vmov.f32	s15, s0
 8001a04:	4b61      	ldr	r3, [pc, #388]	; (8001b8c <main+0x4d4>)
 8001a06:	edc3 7a00 	vstr	s15, [r3]
			  if (duty >= 0)
 8001a0a:	4b60      	ldr	r3, [pc, #384]	; (8001b8c <main+0x4d4>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a18:	db0e      	blt.n	8001a38 <main+0x380>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001a1a:	4b5d      	ldr	r3, [pc, #372]	; (8001b90 <main+0x4d8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 8001a22:	4b5a      	ldr	r3, [pc, #360]	; (8001b8c <main+0x4d4>)
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	4b59      	ldr	r3, [pc, #356]	; (8001b90 <main+0x4d8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a30:	ee17 2a90 	vmov	r2, s15
 8001a34:	635a      	str	r2, [r3, #52]	; 0x34
 8001a36:	e017      	b.n	8001a68 <main+0x3b0>
			  }
			  else if (duty < 0)
 8001a38:	4b54      	ldr	r3, [pc, #336]	; (8001b8c <main+0x4d4>)
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a46:	d50f      	bpl.n	8001a68 <main+0x3b0>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001a48:	4b51      	ldr	r3, [pc, #324]	; (8001b90 <main+0x4d8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
 8001a50:	4b4e      	ldr	r3, [pc, #312]	; (8001b8c <main+0x4d4>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	eef1 7a67 	vneg.f32	s15, s15
 8001a5a:	4b4d      	ldr	r3, [pc, #308]	; (8001b90 <main+0x4d8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a62:	ee17 2a90 	vmov	r2, s15
 8001a66:	639a      	str	r2, [r3, #56]	; 0x38
			  }
		  }

		  // Check Final Position
		  if(position >= qf - 4 && position <= qf + 4){
 8001a68:	4b45      	ldr	r3, [pc, #276]	; (8001b80 <main+0x4c8>)
 8001a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a76:	4b47      	ldr	r3, [pc, #284]	; (8001b94 <main+0x4dc>)
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001a80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8c:	db1d      	blt.n	8001aca <main+0x412>
 8001a8e:	4b3c      	ldr	r3, [pc, #240]	; (8001b80 <main+0x4c8>)
 8001a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a94:	ee07 3a90 	vmov	s15, r3
 8001a98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a9c:	4b3d      	ldr	r3, [pc, #244]	; (8001b94 <main+0x4dc>)
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001aaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab2:	d80a      	bhi.n	8001aca <main+0x412>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001ab4:	4b36      	ldr	r3, [pc, #216]	; (8001b90 <main+0x4d8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001abc:	4b34      	ldr	r3, [pc, #208]	; (8001b90 <main+0x4d8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	639a      	str	r2, [r3, #56]	; 0x38
			  // End Effector
			  scheduler = 4;
 8001ac4:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <main+0x4e0>)
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	601a      	str	r2, [r3, #0]
		  }

		  // Reset Button
		  if (ResetButton.flag == 1)
 8001aca:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <main+0x4e4>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d150      	bne.n	8001b74 <main+0x4bc>
		  {
			  ResetButton.flag = 0;
 8001ad2:	4b32      	ldr	r3, [pc, #200]	; (8001b9c <main+0x4e4>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
			  scheduler = 0;
 8001ad8:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <main+0x4e0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8001ade:	e049      	b.n	8001b74 <main+0x4bc>

	  //Proximity
	  case 4 :
		  if (HoleSequence == 9)
 8001ae0:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <main+0x4e8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b09      	cmp	r3, #9
 8001ae6:	d103      	bne.n	8001af0 <main+0x438>
		  {
			  scheduler = 0;
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <main+0x4e0>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e033      	b.n	8001b58 <main+0x4a0>
		  }
		  else if (HoleSequence < 9)
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <main+0x4e8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	dc2f      	bgt.n	8001b58 <main+0x4a0>
		  {
			  if (TaskType == 1)
 8001af8:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <main+0x4ec>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d111      	bne.n	8001b24 <main+0x46c>
			  {
				  EndEffectorState = 4;			//Pick
 8001b00:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <main+0x4f0>)
 8001b02:	2204      	movs	r2, #4
 8001b04:	601a      	str	r2, [r3, #0]
				  EndEffectorWriteFlag = 1;
 8001b06:	4b29      	ldr	r3, [pc, #164]	; (8001bac <main+0x4f4>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
				  TaskType = -1; ////// TestYesterday
 8001b0c:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <main+0x4ec>)
 8001b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b12:	601a      	str	r2, [r3, #0]
				  HAL_Delay(2000); ////// TestYesterday
 8001b14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b18:	f002 fe26 	bl	8004768 <HAL_Delay>
				  scheduler = 2; ////// TestYesterday
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <main+0x4e0>)
 8001b1e:	2202      	movs	r2, #2
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e019      	b.n	8001b58 <main+0x4a0>
			  }
			  else if (TaskType == -1)
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <main+0x4ec>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2c:	d114      	bne.n	8001b58 <main+0x4a0>
			  {
				  EndEffectorState = 5;			//Place
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <main+0x4f0>)
 8001b30:	2205      	movs	r2, #5
 8001b32:	601a      	str	r2, [r3, #0]
				  EndEffectorWriteFlag = 1;
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <main+0x4f4>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
				  TaskType = 1; ////// TestYesterday
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <main+0x4ec>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
				  HoleSequence += 1; ////// TestYesterday
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <main+0x4e8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	3301      	adds	r3, #1
 8001b46:	4a16      	ldr	r2, [pc, #88]	; (8001ba0 <main+0x4e8>)
 8001b48:	6013      	str	r3, [r2, #0]
				  HAL_Delay(2000); ////// TestYesterday
 8001b4a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b4e:	f002 fe0b 	bl	8004768 <HAL_Delay>
				  scheduler = 1; ////// TestYesterday
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <main+0x4e0>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
			  }
		  }
		  if (ResetButton.flag == 1)
 8001b58:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <main+0x4e4>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d10b      	bne.n	8001b78 <main+0x4c0>
			  {
				  ResetButton.flag = 0;
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <main+0x4e4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
				  scheduler = 0;
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <main+0x4e0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
			  }

		  break;
 8001b6c:	e004      	b.n	8001b78 <main+0x4c0>

	  //Emergency
	  case 5:
		  Homing();
 8001b6e:	f000 fb61 	bl	8002234 <Homing>
		  break;
 8001b72:	e002      	b.n	8001b7a <main+0x4c2>
		  break;
 8001b74:	bf00      	nop
 8001b76:	e5f9      	b.n	800176c <main+0xb4>
		  break;
 8001b78:	bf00      	nop
  {
 8001b7a:	e5f7      	b.n	800176c <main+0xb4>
 8001b7c:	2000057c 	.word	0x2000057c
 8001b80:	2000092c 	.word	0x2000092c
 8001b84:	20001044 	.word	0x20001044
 8001b88:	20001048 	.word	0x20001048
 8001b8c:	200008e8 	.word	0x200008e8
 8001b90:	200004c8 	.word	0x200004c8
 8001b94:	200008f4 	.word	0x200008f4
 8001b98:	200008e0 	.word	0x200008e0
 8001b9c:	20000a40 	.word	0x20000a40
 8001ba0:	200008e4 	.word	0x200008e4
 8001ba4:	20000200 	.word	0x20000200
 8001ba8:	20000a80 	.word	0x20000a80
 8001bac:	20000a7c 	.word	0x20000a7c

08001bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b094      	sub	sp, #80	; 0x50
 8001bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb6:	f107 0320 	add.w	r3, r7, #32
 8001bba:	2230      	movs	r2, #48	; 0x30
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f007 fdcc 	bl	800975c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc4:	f107 030c 	add.w	r3, r7, #12
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <SystemClock_Config+0xc8>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	4a26      	ldr	r2, [pc, #152]	; (8001c78 <SystemClock_Config+0xc8>)
 8001bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be2:	6413      	str	r3, [r2, #64]	; 0x40
 8001be4:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <SystemClock_Config+0xc8>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <SystemClock_Config+0xcc>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a20      	ldr	r2, [pc, #128]	; (8001c7c <SystemClock_Config+0xcc>)
 8001bfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <SystemClock_Config+0xcc>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c10:	2301      	movs	r3, #1
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c14:	2310      	movs	r3, #16
 8001c16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c20:	2308      	movs	r3, #8
 8001c22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001c24:	2364      	movs	r3, #100	; 0x64
 8001c26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c30:	f107 0320 	add.w	r3, r7, #32
 8001c34:	4618      	mov	r0, r3
 8001c36:	f004 f893 	bl	8005d60 <HAL_RCC_OscConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c40:	f002 f934 	bl	8003eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c44:	230f      	movs	r3, #15
 8001c46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	2103      	movs	r1, #3
 8001c60:	4618      	mov	r0, r3
 8001c62:	f004 faf5 	bl	8006250 <HAL_RCC_ClockConfig>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c6c:	f002 f91e 	bl	8003eac <Error_Handler>
  }
}
 8001c70:	bf00      	nop
 8001c72:	3750      	adds	r7, #80	; 0x50
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40007000 	.word	0x40007000

08001c80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c86:	463b      	mov	r3, r7
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c92:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <MX_ADC1_Init+0xb4>)
 8001c94:	4a28      	ldr	r2, [pc, #160]	; (8001d38 <MX_ADC1_Init+0xb8>)
 8001c96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c98:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <MX_ADC1_Init+0xb4>)
 8001c9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ca0:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <MX_ADC1_Init+0xb4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ca6:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <MX_ADC1_Init+0xb4>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001cac:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <MX_ADC1_Init+0xb4>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <MX_ADC1_Init+0xb4>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cba:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <MX_ADC1_Init+0xb4>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <MX_ADC1_Init+0xb4>)
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <MX_ADC1_Init+0xbc>)
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <MX_ADC1_Init+0xb4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <MX_ADC1_Init+0xb4>)
 8001cce:	2202      	movs	r2, #2
 8001cd0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <MX_ADC1_Init+0xb4>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <MX_ADC1_Init+0xb4>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ce0:	4814      	ldr	r0, [pc, #80]	; (8001d34 <MX_ADC1_Init+0xb4>)
 8001ce2:	f002 fd65 	bl	80047b0 <HAL_ADC_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001cec:	f002 f8de 	bl	8003eac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480c      	ldr	r0, [pc, #48]	; (8001d34 <MX_ADC1_Init+0xb4>)
 8001d02:	f002 fea7 	bl	8004a54 <HAL_ADC_ConfigChannel>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d0c:	f002 f8ce 	bl	8003eac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d10:	2301      	movs	r3, #1
 8001d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d14:	2302      	movs	r3, #2
 8001d16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d18:	463b      	mov	r3, r7
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MX_ADC1_Init+0xb4>)
 8001d1e:	f002 fe99 	bl	8004a54 <HAL_ADC_ConfigChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001d28:	f002 f8c0 	bl	8003eac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000420 	.word	0x20000420
 8001d38:	40012000 	.word	0x40012000
 8001d3c:	0f000001 	.word	0x0f000001

08001d40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b092      	sub	sp, #72	; 0x48
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
 8001d60:	615a      	str	r2, [r3, #20]
 8001d62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	2220      	movs	r2, #32
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f007 fcf6 	bl	800975c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d70:	4b39      	ldr	r3, [pc, #228]	; (8001e58 <MX_TIM1_Init+0x118>)
 8001d72:	4a3a      	ldr	r2, [pc, #232]	; (8001e5c <MX_TIM1_Init+0x11c>)
 8001d74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d76:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <MX_TIM1_Init+0x118>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7c:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <MX_TIM1_Init+0x118>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8001d82:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <MX_TIM1_Init+0x118>)
 8001d84:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001d88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8a:	4b33      	ldr	r3, [pc, #204]	; (8001e58 <MX_TIM1_Init+0x118>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d90:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <MX_TIM1_Init+0x118>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d96:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <MX_TIM1_Init+0x118>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d9c:	482e      	ldr	r0, [pc, #184]	; (8001e58 <MX_TIM1_Init+0x118>)
 8001d9e:	f004 fdf5 	bl	800698c <HAL_TIM_PWM_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001da8:	f002 f880 	bl	8003eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001db4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001db8:	4619      	mov	r1, r3
 8001dba:	4827      	ldr	r0, [pc, #156]	; (8001e58 <MX_TIM1_Init+0x118>)
 8001dbc:	f006 f8d8 	bl	8007f70 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001dc6:	f002 f871 	bl	8003eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dca:	2360      	movs	r3, #96	; 0x60
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dea:	2200      	movs	r2, #0
 8001dec:	4619      	mov	r1, r3
 8001dee:	481a      	ldr	r0, [pc, #104]	; (8001e58 <MX_TIM1_Init+0x118>)
 8001df0:	f005 fa6c 	bl	80072cc <HAL_TIM_PWM_ConfigChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001dfa:	f002 f857 	bl	8003eac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e02:	2204      	movs	r2, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	4814      	ldr	r0, [pc, #80]	; (8001e58 <MX_TIM1_Init+0x118>)
 8001e08:	f005 fa60 	bl	80072cc <HAL_TIM_PWM_ConfigChannel>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001e12:	f002 f84b 	bl	8003eac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	4619      	mov	r1, r3
 8001e38:	4807      	ldr	r0, [pc, #28]	; (8001e58 <MX_TIM1_Init+0x118>)
 8001e3a:	f006 f907 	bl	800804c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001e44:	f002 f832 	bl	8003eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e48:	4803      	ldr	r0, [pc, #12]	; (8001e58 <MX_TIM1_Init+0x118>)
 8001e4a:	f002 f993 	bl	8004174 <HAL_TIM_MspPostInit>

}
 8001e4e:	bf00      	nop
 8001e50:	3748      	adds	r7, #72	; 0x48
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200004c8 	.word	0x200004c8
 8001e5c:	40010000 	.word	0x40010000

08001e60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08c      	sub	sp, #48	; 0x30
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e66:	f107 030c 	add.w	r3, r7, #12
 8001e6a:	2224      	movs	r2, #36	; 0x24
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f007 fc74 	bl	800975c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <MX_TIM3_Init+0xa0>)
 8001e7e:	4a21      	ldr	r2, [pc, #132]	; (8001f04 <MX_TIM3_Init+0xa4>)
 8001e80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e82:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <MX_TIM3_Init+0xa0>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <MX_TIM3_Init+0xa0>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD-1;
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <MX_TIM3_Init+0xa0>)
 8001e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <MX_TIM3_Init+0xa0>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <MX_TIM3_Init+0xa0>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	4619      	mov	r1, r3
 8001ecc:	480c      	ldr	r0, [pc, #48]	; (8001f00 <MX_TIM3_Init+0xa0>)
 8001ece:	f004 ff37 	bl	8006d40 <HAL_TIM_Encoder_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ed8:	f001 ffe8 	bl	8003eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_TIM3_Init+0xa0>)
 8001eea:	f006 f841 	bl	8007f70 <HAL_TIMEx_MasterConfigSynchronization>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ef4:	f001 ffda 	bl	8003eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	3730      	adds	r7, #48	; 0x30
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	2000057c 	.word	0x2000057c
 8001f04:	40000400 	.word	0x40000400

08001f08 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0e:	463b      	mov	r3, r7
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <MX_TIM9_Init+0x6c>)
 8001f1c:	4a16      	ldr	r2, [pc, #88]	; (8001f78 <MX_TIM9_Init+0x70>)
 8001f1e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99;
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <MX_TIM9_Init+0x6c>)
 8001f22:	2263      	movs	r2, #99	; 0x63
 8001f24:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <MX_TIM9_Init+0x6c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <MX_TIM9_Init+0x6c>)
 8001f2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f32:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <MX_TIM9_Init+0x6c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <MX_TIM9_Init+0x6c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001f40:	480c      	ldr	r0, [pc, #48]	; (8001f74 <MX_TIM9_Init+0x6c>)
 8001f42:	f004 fba5 	bl	8006690 <HAL_TIM_Base_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001f4c:	f001 ffae 	bl	8003eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f54:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001f56:	463b      	mov	r3, r7
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4806      	ldr	r0, [pc, #24]	; (8001f74 <MX_TIM9_Init+0x6c>)
 8001f5c:	f005 fa78 	bl	8007450 <HAL_TIM_ConfigClockSource>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001f66:	f001 ffa1 	bl	8003eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000630 	.word	0x20000630
 8001f78:	40014000 	.word	0x40014000

08001f7c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
 8001f90:	615a      	str	r2, [r3, #20]
 8001f92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001f94:	4b21      	ldr	r3, [pc, #132]	; (800201c <MX_TIM11_Init+0xa0>)
 8001f96:	4a22      	ldr	r2, [pc, #136]	; (8002020 <MX_TIM11_Init+0xa4>)
 8001f98:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <MX_TIM11_Init+0xa0>)
 8001f9c:	2263      	movs	r2, #99	; 0x63
 8001f9e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <MX_TIM11_Init+0xa0>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <MX_TIM11_Init+0xa0>)
 8001fa8:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8001fac:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fae:	4b1b      	ldr	r3, [pc, #108]	; (800201c <MX_TIM11_Init+0xa0>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb4:	4b19      	ldr	r3, [pc, #100]	; (800201c <MX_TIM11_Init+0xa0>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001fba:	4818      	ldr	r0, [pc, #96]	; (800201c <MX_TIM11_Init+0xa0>)
 8001fbc:	f004 fb68 	bl	8006690 <HAL_TIM_Base_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001fc6:	f001 ff71 	bl	8003eac <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8001fca:	4814      	ldr	r0, [pc, #80]	; (800201c <MX_TIM11_Init+0xa0>)
 8001fcc:	f004 fc78 	bl	80068c0 <HAL_TIM_OC_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001fd6:	f001 ff69 	bl	8003eac <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8001fda:	2108      	movs	r1, #8
 8001fdc:	480f      	ldr	r0, [pc, #60]	; (800201c <MX_TIM11_Init+0xa0>)
 8001fde:	f004 fde1 	bl	8006ba4 <HAL_TIM_OnePulse_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8001fe8:	f001 ff60 	bl	8003eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001fec:	2310      	movs	r3, #16
 8001fee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8001ff0:	f240 5399 	movw	r3, #1433	; 0x599
 8001ff4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2200      	movs	r2, #0
 8002002:	4619      	mov	r1, r3
 8002004:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_TIM11_Init+0xa0>)
 8002006:	f005 f905 	bl	8007214 <HAL_TIM_OC_ConfigChannel>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8002010:	f001 ff4c 	bl	8003eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002014:	bf00      	nop
 8002016:	3720      	adds	r7, #32
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200006e4 	.word	0x200006e4
 8002020:	40014800 	.word	0x40014800

08002024 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <MX_USART1_UART_Init+0x4c>)
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <MX_USART1_UART_Init+0x50>)
 800202c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <MX_USART1_UART_Init+0x4c>)
 8002030:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002034:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <MX_USART1_UART_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <MX_USART1_UART_Init+0x4c>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <MX_USART1_UART_Init+0x4c>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002048:	4b09      	ldr	r3, [pc, #36]	; (8002070 <MX_USART1_UART_Init+0x4c>)
 800204a:	220c      	movs	r2, #12
 800204c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <MX_USART1_UART_Init+0x4c>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <MX_USART1_UART_Init+0x4c>)
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <MX_USART1_UART_Init+0x4c>)
 800205c:	f006 f866 	bl	800812c <HAL_UART_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002066:	f001 ff21 	bl	8003eac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000798 	.word	0x20000798
 8002074:	40011000 	.word	0x40011000

08002078 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <MX_USART2_UART_Init+0x50>)
 800207e:	4a13      	ldr	r2, [pc, #76]	; (80020cc <MX_USART2_UART_Init+0x54>)
 8002080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <MX_USART2_UART_Init+0x50>)
 8002084:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800208a:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <MX_USART2_UART_Init+0x50>)
 800208c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002090:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <MX_USART2_UART_Init+0x50>)
 8002094:	2200      	movs	r2, #0
 8002096:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <MX_USART2_UART_Init+0x50>)
 800209a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800209e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <MX_USART2_UART_Init+0x50>)
 80020a2:	220c      	movs	r2, #12
 80020a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <MX_USART2_UART_Init+0x50>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <MX_USART2_UART_Init+0x50>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020b2:	4805      	ldr	r0, [pc, #20]	; (80020c8 <MX_USART2_UART_Init+0x50>)
 80020b4:	f006 f83a 	bl	800812c <HAL_UART_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80020be:	f001 fef5 	bl	8003eac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	2000080c 	.word	0x2000080c
 80020cc:	40004400 	.word	0x40004400

080020d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	4b17      	ldr	r3, [pc, #92]	; (8002138 <MX_DMA_Init+0x68>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a16      	ldr	r2, [pc, #88]	; (8002138 <MX_DMA_Init+0x68>)
 80020e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b14      	ldr	r3, [pc, #80]	; (8002138 <MX_DMA_Init+0x68>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	603b      	str	r3, [r7, #0]
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <MX_DMA_Init+0x68>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a0f      	ldr	r2, [pc, #60]	; (8002138 <MX_DMA_Init+0x68>)
 80020fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <MX_DMA_Init+0x68>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	2011      	movs	r0, #17
 8002114:	f003 f829 	bl	800516a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002118:	2011      	movs	r0, #17
 800211a:	f003 f842 	bl	80051a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	2038      	movs	r0, #56	; 0x38
 8002124:	f003 f821 	bl	800516a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002128:	2038      	movs	r0, #56	; 0x38
 800212a:	f003 f83a 	bl	80051a2 <HAL_NVIC_EnableIRQ>

}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800

0800213c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
 8002150:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	4b34      	ldr	r3, [pc, #208]	; (8002228 <MX_GPIO_Init+0xec>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a33      	ldr	r2, [pc, #204]	; (8002228 <MX_GPIO_Init+0xec>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b31      	ldr	r3, [pc, #196]	; (8002228 <MX_GPIO_Init+0xec>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <MX_GPIO_Init+0xec>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a2c      	ldr	r2, [pc, #176]	; (8002228 <MX_GPIO_Init+0xec>)
 8002178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <MX_GPIO_Init+0xec>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	4b26      	ldr	r3, [pc, #152]	; (8002228 <MX_GPIO_Init+0xec>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a25      	ldr	r2, [pc, #148]	; (8002228 <MX_GPIO_Init+0xec>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b23      	ldr	r3, [pc, #140]	; (8002228 <MX_GPIO_Init+0xec>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <MX_GPIO_Init+0xec>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a1e      	ldr	r2, [pc, #120]	; (8002228 <MX_GPIO_Init+0xec>)
 80021b0:	f043 0302 	orr.w	r3, r3, #2
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <MX_GPIO_Init+0xec>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80021c8:	4818      	ldr	r0, [pc, #96]	; (800222c <MX_GPIO_Init+0xf0>)
 80021ca:	f003 fdaf 	bl	8005d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80021ce:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80021d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4619      	mov	r1, r3
 80021e2:	4813      	ldr	r0, [pc, #76]	; (8002230 <MX_GPIO_Init+0xf4>)
 80021e4:	f003 fc06 	bl	80059f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 80021e8:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80021ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ee:	2301      	movs	r3, #1
 80021f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	480a      	ldr	r0, [pc, #40]	; (800222c <MX_GPIO_Init+0xf0>)
 8002202:	f003 fbf7 	bl	80059f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002206:	2360      	movs	r3, #96	; 0x60
 8002208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	4804      	ldr	r0, [pc, #16]	; (800222c <MX_GPIO_Init+0xf0>)
 800221a:	f003 fbeb 	bl	80059f4 <HAL_GPIO_Init>

}
 800221e:	bf00      	nop
 8002220:	3728      	adds	r7, #40	; 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	40020400 	.word	0x40020400
 8002230:	40020000 	.word	0x40020000

08002234 <Homing>:
		Proximity = 2;
	}
}

void Homing()
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	if (Proximity == 1)
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <Homing+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b01      	cmp	r3, #1
//		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
//		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
	}

	//Proximity Home
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 1)
 800223e:	2102      	movs	r1, #2
 8002240:	480d      	ldr	r0, [pc, #52]	; (8002278 <Homing+0x44>)
 8002242:	f003 fd5b 	bl	8005cfc <HAL_GPIO_ReadPin>
 8002246:	4603      	mov	r3, r0
 8002248:	2b01      	cmp	r3, #1
 800224a:	d110      	bne.n	800226e <Homing+0x3a>
	{
		Proximity = 0;
 800224c:	4b09      	ldr	r3, [pc, #36]	; (8002274 <Homing+0x40>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <Homing+0x48>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2200      	movs	r2, #0
 8002258:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <Homing+0x48>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2200      	movs	r2, #0
 8002260:	635a      	str	r2, [r3, #52]	; 0x34
		JoySpeed = 0;
 8002262:	4b07      	ldr	r3, [pc, #28]	; (8002280 <Homing+0x4c>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
		scheduler = 0;
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <Homing+0x50>)
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
	}
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000a84 	.word	0x20000a84
 8002278:	40020800 	.word	0x40020800
 800227c:	200004c8 	.word	0x200004c8
 8002280:	20000a78 	.word	0x20000a78
 8002284:	200008e0 	.word	0x200008e0

08002288 <VelocityApprox>:
//		break;
//	}
//}

void VelocityApprox()
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
	static int16_t lastposition = 0;
	velocity = (position - lastposition)/0.001; //pulse/s
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <VelocityApprox+0x50>)
 800228e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002292:	461a      	mov	r2, r3
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <VelocityApprox+0x54>)
 8002296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe f949 	bl	8000534 <__aeabi_i2d>
 80022a2:	a30b      	add	r3, pc, #44	; (adr r3, 80022d0 <VelocityApprox+0x48>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	f7fe fad8 	bl	800085c <__aeabi_ddiv>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	f7fe fca0 	bl	8000bf8 <__aeabi_d2f>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4a09      	ldr	r2, [pc, #36]	; (80022e0 <VelocityApprox+0x58>)
 80022bc:	6013      	str	r3, [r2, #0]
	lastposition = position;
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <VelocityApprox+0x50>)
 80022c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <VelocityApprox+0x54>)
 80022c6:	801a      	strh	r2, [r3, #0]
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	f3af 8000 	nop.w
 80022d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80022d4:	3f50624d 	.word	0x3f50624d
 80022d8:	2000092c 	.word	0x2000092c
 80022dc:	2000104c 	.word	0x2000104c
 80022e0:	20000950 	.word	0x20000950

080022e4 <AccelerationApprox>:

void AccelerationApprox()
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
	static float LastVelo = 0;
	Accel = (velocity - LastVelo);	//pulse/s^2
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <AccelerationApprox+0x2c>)
 80022ea:	ed93 7a00 	vldr	s14, [r3]
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <AccelerationApprox+0x30>)
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <AccelerationApprox+0x34>)
 80022fa:	edc3 7a00 	vstr	s15, [r3]
	LastVelo = velocity;
 80022fe:	4b04      	ldr	r3, [pc, #16]	; (8002310 <AccelerationApprox+0x2c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a04      	ldr	r2, [pc, #16]	; (8002314 <AccelerationApprox+0x30>)
 8002304:	6013      	str	r3, [r2, #0]

}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	20000950 	.word	0x20000950
 8002314:	20001050 	.word	0x20001050
 8002318:	20000954 	.word	0x20000954
 800231c:	00000000 	.word	0x00000000

08002320 <Routine>:

void Routine()
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	position_f = position;
 8002324:	4b28      	ldr	r3, [pc, #160]	; (80023c8 <Routine+0xa8>)
 8002326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002332:	4b26      	ldr	r3, [pc, #152]	; (80023cc <Routine+0xac>)
 8002334:	edc3 7a00 	vstr	s15, [r3]
	Yactualposition = position_f*0.45;			//mm*10
 8002338:	4b24      	ldr	r3, [pc, #144]	; (80023cc <Routine+0xac>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe f90b 	bl	8000558 <__aeabi_f2d>
 8002342:	a31f      	add	r3, pc, #124	; (adr r3, 80023c0 <Routine+0xa0>)
 8002344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002348:	f7fe f95e 	bl	8000608 <__aeabi_dmul>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4610      	mov	r0, r2
 8002352:	4619      	mov	r1, r3
 8002354:	f7fe fc08 	bl	8000b68 <__aeabi_d2iz>
 8002358:	4603      	mov	r3, r0
 800235a:	b21a      	sxth	r2, r3
 800235c:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <Routine+0xb0>)
 800235e:	801a      	strh	r2, [r3, #0]
	registerFrame[17].U16 = Yactualposition;	//mm*10			//Y Actual Position
 8002360:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <Routine+0xb0>)
 8002362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002366:	b29a      	uxth	r2, r3
 8002368:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <Routine+0xb4>)
 800236a:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[18].U16 = velocity*0.45;		//mm/s*10		//Y Actual Speed
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <Routine+0xb8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f8f1 	bl	8000558 <__aeabi_f2d>
 8002376:	a312      	add	r3, pc, #72	; (adr r3, 80023c0 <Routine+0xa0>)
 8002378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237c:	f7fe f944 	bl	8000608 <__aeabi_dmul>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4610      	mov	r0, r2
 8002386:	4619      	mov	r1, r3
 8002388:	f7fe fc16 	bl	8000bb8 <__aeabi_d2uiz>
 800238c:	4603      	mov	r3, r0
 800238e:	b29a      	uxth	r2, r3
 8002390:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <Routine+0xb4>)
 8002392:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[19].U16 = Accel*0.45; 		//mm/s^2*10		//Y Actual Acceleration
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <Routine+0xbc>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f8dd 	bl	8000558 <__aeabi_f2d>
 800239e:	a308      	add	r3, pc, #32	; (adr r3, 80023c0 <Routine+0xa0>)
 80023a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a4:	f7fe f930 	bl	8000608 <__aeabi_dmul>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	f7fe fc02 	bl	8000bb8 <__aeabi_d2uiz>
 80023b4:	4603      	mov	r3, r0
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <Routine+0xb4>)
 80023ba:	84da      	strh	r2, [r3, #38]	; 0x26
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	cccccccd 	.word	0xcccccccd
 80023c4:	3fdccccc 	.word	0x3fdccccc
 80023c8:	2000092c 	.word	0x2000092c
 80023cc:	20000930 	.word	0x20000930
 80023d0:	20000934 	.word	0x20000934
 80023d4:	20000f60 	.word	0x20000f60
 80023d8:	20000950 	.word	0x20000950
 80023dc:	20000954 	.word	0x20000954

080023e0 <PIDcal>:

float PIDcal()
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
	//position control
	errorposition = setposition - position;
 80023e4:	4b28      	ldr	r3, [pc, #160]	; (8002488 <PIDcal+0xa8>)
 80023e6:	ed93 7a00 	vldr	s14, [r3]
 80023ea:	4b28      	ldr	r3, [pc, #160]	; (800248c <PIDcal+0xac>)
 80023ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023fc:	4b24      	ldr	r3, [pc, #144]	; (8002490 <PIDcal+0xb0>)
 80023fe:	edc3 7a00 	vstr	s15, [r3]

	integral_p = integral_p + errorposition;
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <PIDcal+0xb4>)
 8002404:	ed93 7a00 	vldr	s14, [r3]
 8002408:	4b21      	ldr	r3, [pc, #132]	; (8002490 <PIDcal+0xb0>)
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <PIDcal+0xb4>)
 8002414:	edc3 7a00 	vstr	s15, [r3]
	derivative_p = errorposition - pre_errorposition;
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <PIDcal+0xb0>)
 800241a:	ed93 7a00 	vldr	s14, [r3]
 800241e:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <PIDcal+0xb8>)
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002428:	4b1c      	ldr	r3, [pc, #112]	; (800249c <PIDcal+0xbc>)
 800242a:	edc3 7a00 	vstr	s15, [r3]
	u_position = Kp_p*errorposition + Ki_p*integral_p + Kd_p*derivative_p;
 800242e:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <PIDcal+0xc0>)
 8002430:	ed93 7a00 	vldr	s14, [r3]
 8002434:	4b16      	ldr	r3, [pc, #88]	; (8002490 <PIDcal+0xb0>)
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800243e:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <PIDcal+0xc4>)
 8002440:	edd3 6a00 	vldr	s13, [r3]
 8002444:	4b13      	ldr	r3, [pc, #76]	; (8002494 <PIDcal+0xb4>)
 8002446:	edd3 7a00 	vldr	s15, [r3]
 800244a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800244e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002452:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <PIDcal+0xc8>)
 8002454:	edd3 6a00 	vldr	s13, [r3]
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <PIDcal+0xbc>)
 800245a:	edd3 7a00 	vldr	s15, [r3]
 800245e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002466:	4b11      	ldr	r3, [pc, #68]	; (80024ac <PIDcal+0xcc>)
 8002468:	edc3 7a00 	vstr	s15, [r3]

	pre_errorposition = errorposition;
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <PIDcal+0xb0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a09      	ldr	r2, [pc, #36]	; (8002498 <PIDcal+0xb8>)
 8002472:	6013      	str	r3, [r2, #0]
//	duty = Kp_v*errorvelocity + Ki_v*integral_v + Kd_v*derivative_v;
//
//	pre_errorvelocity = errorvelocity;

//	return duty;
	return u_position;
 8002474:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <PIDcal+0xcc>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	ee07 3a90 	vmov	s15, r3
}
 800247c:	eeb0 0a67 	vmov.f32	s0, s15
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	20000938 	.word	0x20000938
 800248c:	2000092c 	.word	0x2000092c
 8002490:	2000093c 	.word	0x2000093c
 8002494:	20000948 	.word	0x20000948
 8002498:	20000944 	.word	0x20000944
 800249c:	2000094c 	.word	0x2000094c
 80024a0:	20000214 	.word	0x20000214
 80024a4:	20000218 	.word	0x20000218
 80024a8:	20000960 	.word	0x20000960
 80024ac:	20000940 	.word	0x20000940

080024b0 <JoystickPinUpdate>:

void JoystickPinUpdate()
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	  GetPositionButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 80024b4:	2140      	movs	r1, #64	; 0x40
 80024b6:	4845      	ldr	r0, [pc, #276]	; (80025cc <JoystickPinUpdate+0x11c>)
 80024b8:	f003 fc20 	bl	8005cfc <HAL_GPIO_ReadPin>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <JoystickPinUpdate+0x120>)
 80024c2:	605a      	str	r2, [r3, #4]
	  if (GetPositionButton.last == 1 && GetPositionButton.current == 0)
 80024c4:	4b42      	ldr	r3, [pc, #264]	; (80025d0 <JoystickPinUpdate+0x120>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d107      	bne.n	80024dc <JoystickPinUpdate+0x2c>
 80024cc:	4b40      	ldr	r3, [pc, #256]	; (80025d0 <JoystickPinUpdate+0x120>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d103      	bne.n	80024dc <JoystickPinUpdate+0x2c>
	  {
		  GetPositionButton.flag = 1;
 80024d4:	4b3e      	ldr	r3, [pc, #248]	; (80025d0 <JoystickPinUpdate+0x120>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	e002      	b.n	80024e2 <JoystickPinUpdate+0x32>
	  }
	  else
	  {
		  GetPositionButton.flag = 0;
 80024dc:	4b3c      	ldr	r3, [pc, #240]	; (80025d0 <JoystickPinUpdate+0x120>)
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
	  }
	  GetPositionButton.last = GetPositionButton.current;
 80024e2:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <JoystickPinUpdate+0x120>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4a3a      	ldr	r2, [pc, #232]	; (80025d0 <JoystickPinUpdate+0x120>)
 80024e8:	6013      	str	r3, [r2, #0]

	  ResetButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80024ea:	2120      	movs	r1, #32
 80024ec:	4839      	ldr	r0, [pc, #228]	; (80025d4 <JoystickPinUpdate+0x124>)
 80024ee:	f003 fc05 	bl	8005cfc <HAL_GPIO_ReadPin>
 80024f2:	4603      	mov	r3, r0
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <JoystickPinUpdate+0x128>)
 80024f8:	605a      	str	r2, [r3, #4]
	  if (ResetButton.last == 1 && ResetButton.current == 0)
 80024fa:	4b37      	ldr	r3, [pc, #220]	; (80025d8 <JoystickPinUpdate+0x128>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d107      	bne.n	8002512 <JoystickPinUpdate+0x62>
 8002502:	4b35      	ldr	r3, [pc, #212]	; (80025d8 <JoystickPinUpdate+0x128>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <JoystickPinUpdate+0x62>
	  {
		ResetButton.flag = 1;
 800250a:	4b33      	ldr	r3, [pc, #204]	; (80025d8 <JoystickPinUpdate+0x128>)
 800250c:	2201      	movs	r2, #1
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	e002      	b.n	8002518 <JoystickPinUpdate+0x68>
	  }
	  else
	  {
		  ResetButton.flag = 0;
 8002512:	4b31      	ldr	r3, [pc, #196]	; (80025d8 <JoystickPinUpdate+0x128>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
	  }
	  ResetButton.last = ResetButton.current;
 8002518:	4b2f      	ldr	r3, [pc, #188]	; (80025d8 <JoystickPinUpdate+0x128>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	4a2e      	ldr	r2, [pc, #184]	; (80025d8 <JoystickPinUpdate+0x128>)
 800251e:	6013      	str	r3, [r2, #0]

	  FineButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8002520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002524:	482b      	ldr	r0, [pc, #172]	; (80025d4 <JoystickPinUpdate+0x124>)
 8002526:	f003 fbe9 	bl	8005cfc <HAL_GPIO_ReadPin>
 800252a:	4603      	mov	r3, r0
 800252c:	461a      	mov	r2, r3
 800252e:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <JoystickPinUpdate+0x12c>)
 8002530:	605a      	str	r2, [r3, #4]
	  if (FineButton.last == 1 && FineButton.current == 0)
 8002532:	4b2a      	ldr	r3, [pc, #168]	; (80025dc <JoystickPinUpdate+0x12c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d107      	bne.n	800254a <JoystickPinUpdate+0x9a>
 800253a:	4b28      	ldr	r3, [pc, #160]	; (80025dc <JoystickPinUpdate+0x12c>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d103      	bne.n	800254a <JoystickPinUpdate+0x9a>
	  {
		  FineButton.flag = 1;
 8002542:	4b26      	ldr	r3, [pc, #152]	; (80025dc <JoystickPinUpdate+0x12c>)
 8002544:	2201      	movs	r2, #1
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	e002      	b.n	8002550 <JoystickPinUpdate+0xa0>
	  }
	  else
	  {
		  FineButton.flag = 0;
 800254a:	4b24      	ldr	r3, [pc, #144]	; (80025dc <JoystickPinUpdate+0x12c>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
	  }
	  FineButton.last = FineButton.current;
 8002550:	4b22      	ldr	r3, [pc, #136]	; (80025dc <JoystickPinUpdate+0x12c>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4a21      	ldr	r2, [pc, #132]	; (80025dc <JoystickPinUpdate+0x12c>)
 8002556:	6013      	str	r3, [r2, #0]

	  RoughButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8002558:	2120      	movs	r1, #32
 800255a:	481c      	ldr	r0, [pc, #112]	; (80025cc <JoystickPinUpdate+0x11c>)
 800255c:	f003 fbce 	bl	8005cfc <HAL_GPIO_ReadPin>
 8002560:	4603      	mov	r3, r0
 8002562:	461a      	mov	r2, r3
 8002564:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <JoystickPinUpdate+0x130>)
 8002566:	605a      	str	r2, [r3, #4]
	  if (RoughButton.last == 1 && RoughButton.current == 0)
 8002568:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <JoystickPinUpdate+0x130>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d107      	bne.n	8002580 <JoystickPinUpdate+0xd0>
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <JoystickPinUpdate+0x130>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d103      	bne.n	8002580 <JoystickPinUpdate+0xd0>
	  {
		  RoughButton.flag = 1;
 8002578:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <JoystickPinUpdate+0x130>)
 800257a:	2201      	movs	r2, #1
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	e002      	b.n	8002586 <JoystickPinUpdate+0xd6>
	  }
	  else
	  {
		  RoughButton.flag = 0;
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <JoystickPinUpdate+0x130>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
	  }
	  RoughButton.last = RoughButton.current;
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <JoystickPinUpdate+0x130>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4a15      	ldr	r2, [pc, #84]	; (80025e0 <JoystickPinUpdate+0x130>)
 800258c:	6013      	str	r3, [r2, #0]

	  HomingButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 800258e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002592:	480e      	ldr	r0, [pc, #56]	; (80025cc <JoystickPinUpdate+0x11c>)
 8002594:	f003 fbb2 	bl	8005cfc <HAL_GPIO_ReadPin>
 8002598:	4603      	mov	r3, r0
 800259a:	461a      	mov	r2, r3
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <JoystickPinUpdate+0x134>)
 800259e:	605a      	str	r2, [r3, #4]
	  if (HomingButton.last == 1 && HomingButton.current == 0)
 80025a0:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <JoystickPinUpdate+0x134>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d107      	bne.n	80025b8 <JoystickPinUpdate+0x108>
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <JoystickPinUpdate+0x134>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d103      	bne.n	80025b8 <JoystickPinUpdate+0x108>
	  {
		  HomingButton.flag = 1;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <JoystickPinUpdate+0x134>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	609a      	str	r2, [r3, #8]
 80025b6:	e002      	b.n	80025be <JoystickPinUpdate+0x10e>
	  }
	  else
	  {
		  HomingButton.flag = 0;
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <JoystickPinUpdate+0x134>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
	  }
	  HomingButton.last = HomingButton.current;
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <JoystickPinUpdate+0x134>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4a08      	ldr	r2, [pc, #32]	; (80025e4 <JoystickPinUpdate+0x134>)
 80025c4:	6013      	str	r3, [r2, #0]
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40020400 	.word	0x40020400
 80025d0:	20000a34 	.word	0x20000a34
 80025d4:	40020000 	.word	0x40020000
 80025d8:	20000a40 	.word	0x20000a40
 80025dc:	20000a4c 	.word	0x20000a4c
 80025e0:	20000a58 	.word	0x20000a58
 80025e4:	20000a64 	.word	0x20000a64

080025e8 <JoystickControl>:

void JoystickControl()
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
	if(RoughButton.flag == 1)
 80025ec:	4b60      	ldr	r3, [pc, #384]	; (8002770 <JoystickControl+0x188>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d106      	bne.n	8002602 <JoystickControl+0x1a>
	{
		JoySpeed = 0;
 80025f4:	4b5f      	ldr	r3, [pc, #380]	; (8002774 <JoystickControl+0x18c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
		RoughButton.flag = 0;
 80025fa:	4b5d      	ldr	r3, [pc, #372]	; (8002770 <JoystickControl+0x188>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	e014      	b.n	800262c <JoystickControl+0x44>
	}
	else if(FineButton.flag == 1)
 8002602:	4b5d      	ldr	r3, [pc, #372]	; (8002778 <JoystickControl+0x190>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d106      	bne.n	8002618 <JoystickControl+0x30>
	{
		JoySpeed = 1;
 800260a:	4b5a      	ldr	r3, [pc, #360]	; (8002774 <JoystickControl+0x18c>)
 800260c:	2201      	movs	r2, #1
 800260e:	601a      	str	r2, [r3, #0]
		FineButton.flag = 0;
 8002610:	4b59      	ldr	r3, [pc, #356]	; (8002778 <JoystickControl+0x190>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
 8002616:	e009      	b.n	800262c <JoystickControl+0x44>
	}
	else if(HomingButton.flag == 1)
 8002618:	4b58      	ldr	r3, [pc, #352]	; (800277c <JoystickControl+0x194>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d105      	bne.n	800262c <JoystickControl+0x44>
	{
		JoySpeed = 2;
 8002620:	4b54      	ldr	r3, [pc, #336]	; (8002774 <JoystickControl+0x18c>)
 8002622:	2202      	movs	r2, #2
 8002624:	601a      	str	r2, [r3, #0]
		HomingButton.flag = 0;
 8002626:	4b55      	ldr	r3, [pc, #340]	; (800277c <JoystickControl+0x194>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
	}

	switch(JoySpeed)
 800262c:	4b51      	ldr	r3, [pc, #324]	; (8002774 <JoystickControl+0x18c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b02      	cmp	r3, #2
 8002632:	f000 808e 	beq.w	8002752 <JoystickControl+0x16a>
 8002636:	2b02      	cmp	r3, #2
 8002638:	f300 8097 	bgt.w	800276a <JoystickControl+0x182>
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <JoystickControl+0x5e>
 8002640:	2b01      	cmp	r3, #1
 8002642:	d043      	beq.n	80026cc <JoystickControl+0xe4>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
		Homing();
		break;
	}
}
 8002644:	e091      	b.n	800276a <JoystickControl+0x182>
		if(XYSwitch[1] > 2200)
 8002646:	4b4e      	ldr	r3, [pc, #312]	; (8002780 <JoystickControl+0x198>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f640 0298 	movw	r2, #2200	; 0x898
 800264e:	4293      	cmp	r3, r2
 8002650:	dd09      	ble.n	8002666 <JoystickControl+0x7e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002652:	4b4c      	ldr	r3, [pc, #304]	; (8002784 <JoystickControl+0x19c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2200      	movs	r2, #0
 8002658:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,15000);
 800265a:	4b4a      	ldr	r3, [pc, #296]	; (8002784 <JoystickControl+0x19c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002662:	635a      	str	r2, [r3, #52]	; 0x34
 8002664:	e017      	b.n	8002696 <JoystickControl+0xae>
		else if(XYSwitch[1] < 1950)
 8002666:	4b46      	ldr	r3, [pc, #280]	; (8002780 <JoystickControl+0x198>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f240 729d 	movw	r2, #1949	; 0x79d
 800266e:	4293      	cmp	r3, r2
 8002670:	dc09      	bgt.n	8002686 <JoystickControl+0x9e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,15000);
 8002672:	4b44      	ldr	r3, [pc, #272]	; (8002784 <JoystickControl+0x19c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f643 2298 	movw	r2, #15000	; 0x3a98
 800267a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800267c:	4b41      	ldr	r3, [pc, #260]	; (8002784 <JoystickControl+0x19c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2200      	movs	r2, #0
 8002682:	635a      	str	r2, [r3, #52]	; 0x34
 8002684:	e007      	b.n	8002696 <JoystickControl+0xae>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002686:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <JoystickControl+0x19c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2200      	movs	r2, #0
 800268c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800268e:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <JoystickControl+0x19c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2200      	movs	r2, #0
 8002694:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 2200)
 8002696:	4b3a      	ldr	r3, [pc, #232]	; (8002780 <JoystickControl+0x198>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f640 0298 	movw	r2, #2200	; 0x898
 800269e:	4293      	cmp	r3, r2
 80026a0:	dd04      	ble.n	80026ac <JoystickControl+0xc4>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 80026a2:	4b39      	ldr	r3, [pc, #228]	; (8002788 <JoystickControl+0x1a0>)
 80026a4:	2204      	movs	r2, #4
 80026a6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 80026aa:	e05e      	b.n	800276a <JoystickControl+0x182>
		else if(XYSwitch[0] < 1950)
 80026ac:	4b34      	ldr	r3, [pc, #208]	; (8002780 <JoystickControl+0x198>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f240 729d 	movw	r2, #1949	; 0x79d
 80026b4:	4293      	cmp	r3, r2
 80026b6:	dc04      	bgt.n	80026c2 <JoystickControl+0xda>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 80026b8:	4b33      	ldr	r3, [pc, #204]	; (8002788 <JoystickControl+0x1a0>)
 80026ba:	2208      	movs	r2, #8
 80026bc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 80026c0:	e053      	b.n	800276a <JoystickControl+0x182>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 80026c2:	4b31      	ldr	r3, [pc, #196]	; (8002788 <JoystickControl+0x1a0>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 80026ca:	e04e      	b.n	800276a <JoystickControl+0x182>
		if(XYSwitch[1] > 2200)
 80026cc:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <JoystickControl+0x198>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f640 0298 	movw	r2, #2200	; 0x898
 80026d4:	4293      	cmp	r3, r2
 80026d6:	dd09      	ble.n	80026ec <JoystickControl+0x104>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80026d8:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <JoystickControl+0x19c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2200      	movs	r2, #0
 80026de:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
 80026e0:	4b28      	ldr	r3, [pc, #160]	; (8002784 <JoystickControl+0x19c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80026e8:	635a      	str	r2, [r3, #52]	; 0x34
 80026ea:	e017      	b.n	800271c <JoystickControl+0x134>
		else if(XYSwitch[1] < 1950)
 80026ec:	4b24      	ldr	r3, [pc, #144]	; (8002780 <JoystickControl+0x198>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f240 729d 	movw	r2, #1949	; 0x79d
 80026f4:	4293      	cmp	r3, r2
 80026f6:	dc09      	bgt.n	800270c <JoystickControl+0x124>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,10000);
 80026f8:	4b22      	ldr	r3, [pc, #136]	; (8002784 <JoystickControl+0x19c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8002700:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002702:	4b20      	ldr	r3, [pc, #128]	; (8002784 <JoystickControl+0x19c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2200      	movs	r2, #0
 8002708:	635a      	str	r2, [r3, #52]	; 0x34
 800270a:	e007      	b.n	800271c <JoystickControl+0x134>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800270c:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <JoystickControl+0x19c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2200      	movs	r2, #0
 8002712:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002714:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <JoystickControl+0x19c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2200      	movs	r2, #0
 800271a:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 2200)
 800271c:	4b18      	ldr	r3, [pc, #96]	; (8002780 <JoystickControl+0x198>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f640 0298 	movw	r2, #2200	; 0x898
 8002724:	4293      	cmp	r3, r2
 8002726:	dd04      	ble.n	8002732 <JoystickControl+0x14a>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 8002728:	4b17      	ldr	r3, [pc, #92]	; (8002788 <JoystickControl+0x1a0>)
 800272a:	2204      	movs	r2, #4
 800272c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002730:	e01b      	b.n	800276a <JoystickControl+0x182>
		else if(XYSwitch[0] < 1950)
 8002732:	4b13      	ldr	r3, [pc, #76]	; (8002780 <JoystickControl+0x198>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f240 729d 	movw	r2, #1949	; 0x79d
 800273a:	4293      	cmp	r3, r2
 800273c:	dc04      	bgt.n	8002748 <JoystickControl+0x160>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <JoystickControl+0x1a0>)
 8002740:	2208      	movs	r2, #8
 8002742:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002746:	e010      	b.n	800276a <JoystickControl+0x182>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <JoystickControl+0x1a0>)
 800274a:	2200      	movs	r2, #0
 800274c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002750:	e00b      	b.n	800276a <JoystickControl+0x182>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002752:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <JoystickControl+0x19c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2200      	movs	r2, #0
 8002758:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
 800275a:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <JoystickControl+0x19c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002762:	635a      	str	r2, [r3, #52]	; 0x34
		Homing();
 8002764:	f7ff fd66 	bl	8002234 <Homing>
		break;
 8002768:	bf00      	nop
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000a58 	.word	0x20000a58
 8002774:	20000a78 	.word	0x20000a78
 8002778:	20000a4c 	.word	0x20000a4c
 800277c:	20000a64 	.word	0x20000a64
 8002780:	20000a70 	.word	0x20000a70
 8002784:	200004c8 	.word	0x200004c8
 8002788:	20000f60 	.word	0x20000f60
 800278c:	00000000 	.word	0x00000000

08002790 <JoystickLocationState>:

void JoystickLocationState()
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
	if(registerFrame[1].U16 == 1)	//Base System Status: Set Pick Tray
 8002794:	4b46      	ldr	r3, [pc, #280]	; (80028b0 <JoystickLocationState+0x120>)
 8002796:	885b      	ldrh	r3, [r3, #2]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d112      	bne.n	80027c2 <JoystickLocationState+0x32>
	{
		registerFrame[1].U16 = 0;
 800279c:	4b44      	ldr	r3, [pc, #272]	; (80028b0 <JoystickLocationState+0x120>)
 800279e:	2200      	movs	r2, #0
 80027a0:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 1;	//Y Moving Status: Jog Pick
 80027a2:	4b43      	ldr	r3, [pc, #268]	; (80028b0 <JoystickLocationState+0x120>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	841a      	strh	r2, [r3, #32]
		EndEffectorState = 1;		//TestModeOn
 80027a8:	4b42      	ldr	r3, [pc, #264]	; (80028b4 <JoystickLocationState+0x124>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 1;	//End Effector Status: Laser On
 80027ae:	4b40      	ldr	r3, [pc, #256]	; (80028b0 <JoystickLocationState+0x120>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 80027b4:	4b40      	ldr	r3, [pc, #256]	; (80028b8 <JoystickLocationState+0x128>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
		state = 1;					//Go Pick state
 80027ba:	4b40      	ldr	r3, [pc, #256]	; (80028bc <JoystickLocationState+0x12c>)
 80027bc:	2201      	movs	r2, #1
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e015      	b.n	80027ee <JoystickLocationState+0x5e>
	}
	else if(registerFrame[1].U16 == 2)	//Base System Status: Set Place Tray
 80027c2:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <JoystickLocationState+0x120>)
 80027c4:	885b      	ldrh	r3, [r3, #2]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d111      	bne.n	80027ee <JoystickLocationState+0x5e>
	{
		registerFrame[1].U16 = 0;
 80027ca:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <JoystickLocationState+0x120>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 2;	//Y Moving Status: Jog Place
 80027d0:	4b37      	ldr	r3, [pc, #220]	; (80028b0 <JoystickLocationState+0x120>)
 80027d2:	2202      	movs	r2, #2
 80027d4:	841a      	strh	r2, [r3, #32]
		EndEffectorState = 1;		//TestModeOn
 80027d6:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <JoystickLocationState+0x124>)
 80027d8:	2201      	movs	r2, #1
 80027da:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 1;	//Laser On
 80027dc:	4b34      	ldr	r3, [pc, #208]	; (80028b0 <JoystickLocationState+0x120>)
 80027de:	2201      	movs	r2, #1
 80027e0:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 80027e2:	4b35      	ldr	r3, [pc, #212]	; (80028b8 <JoystickLocationState+0x128>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
		state = 3;					//Go Place state
 80027e8:	4b34      	ldr	r3, [pc, #208]	; (80028bc <JoystickLocationState+0x12c>)
 80027ea:	2203      	movs	r2, #3
 80027ec:	601a      	str	r2, [r3, #0]
	}
	if(registerFrame[1].U16 == 8)	//Run Tray Mode
 80027ee:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <JoystickLocationState+0x120>)
 80027f0:	885b      	ldrh	r3, [r3, #2]
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d102      	bne.n	80027fc <JoystickLocationState+0x6c>
	{
		state = 5;
 80027f6:	4b31      	ldr	r3, [pc, #196]	; (80028bc <JoystickLocationState+0x12c>)
 80027f8:	2205      	movs	r2, #5
 80027fa:	601a      	str	r2, [r3, #0]
	}


	switch(state)
 80027fc:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <JoystickLocationState+0x12c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	3b01      	subs	r3, #1
 8002802:	2b04      	cmp	r3, #4
 8002804:	f200 8613 	bhi.w	800342e <JoystickLocationState+0xc9e>
 8002808:	a201      	add	r2, pc, #4	; (adr r2, 8002810 <JoystickLocationState+0x80>)
 800280a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280e:	bf00      	nop
 8002810:	08002825 	.word	0x08002825
 8002814:	080028d1 	.word	0x080028d1
 8002818:	08002de3 	.word	0x08002de3
 800281c:	08002ec1 	.word	0x08002ec1
 8002820:	080033d1 	.word	0x080033d1
	{
	//Get Pick Tray 1st Point
	case 1:
		PickTray.L1[0] = 0;
 8002824:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <JoystickLocationState+0x130>)
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
		PickTray.L2[0] = 0;
 800282c:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <JoystickLocationState+0x130>)
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
		PickTray.L1[1] = 0;
 8002834:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <JoystickLocationState+0x130>)
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	605a      	str	r2, [r3, #4]
		PickTray.L2[1] = 0;
 800283c:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <JoystickLocationState+0x130>)
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <JoystickLocationState+0x134>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b01      	cmp	r3, #1
 800284a:	f040 85e7 	bne.w	800341c <JoystickLocationState+0xc8c>
		{
			PickTray.L1[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 800284e:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <JoystickLocationState+0x120>)
 8002850:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002854:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <JoystickLocationState+0x138>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	08db      	lsrs	r3, r3, #3
 800285c:	b29b      	uxth	r3, r3
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <JoystickLocationState+0x130>)
 8002868:	edc3 7a00 	vstr	s15, [r3]
			PickTray.L1[1] = position*0.045; //Pick Tray Y Position 1 //mm
 800286c:	4b17      	ldr	r3, [pc, #92]	; (80028cc <JoystickLocationState+0x13c>)
 800286e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fe5e 	bl	8000534 <__aeabi_i2d>
 8002878:	a30b      	add	r3, pc, #44	; (adr r3, 80028a8 <JoystickLocationState+0x118>)
 800287a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287e:	f7fd fec3 	bl	8000608 <__aeabi_dmul>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	f7fe f9b5 	bl	8000bf8 <__aeabi_d2f>
 800288e:	4603      	mov	r3, r0
 8002890:	4a0b      	ldr	r2, [pc, #44]	; (80028c0 <JoystickLocationState+0x130>)
 8002892:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <JoystickLocationState+0x134>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
			state = 2;
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <JoystickLocationState+0x12c>)
 800289c:	2202      	movs	r2, #2
 800289e:	601a      	str	r2, [r3, #0]
		}
		break;
 80028a0:	f000 bdbc 	b.w	800341c <JoystickLocationState+0xc8c>
 80028a4:	f3af 8000 	nop.w
 80028a8:	70a3d70a 	.word	0x70a3d70a
 80028ac:	3fa70a3d 	.word	0x3fa70a3d
 80028b0:	20000f60 	.word	0x20000f60
 80028b4:	20000a80 	.word	0x20000a80
 80028b8:	20000a7c 	.word	0x20000a7c
 80028bc:	2000021c 	.word	0x2000021c
 80028c0:	20000964 	.word	0x20000964
 80028c4:	20000a34 	.word	0x20000a34
 80028c8:	cccccccd 	.word	0xcccccccd
 80028cc:	2000092c 	.word	0x2000092c

	//Get Pick Tray 2nd Point
	case 2:
		if (GetPositionButton.flag == 1)
 80028d0:	4bd5      	ldr	r3, [pc, #852]	; (8002c28 <JoystickLocationState+0x498>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	f040 8278 	bne.w	8002dca <JoystickLocationState+0x63a>
		{
			PickTray.L2[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 2 //mm
 80028da:	4bd4      	ldr	r3, [pc, #848]	; (8002c2c <JoystickLocationState+0x49c>)
 80028dc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80028e0:	4ad3      	ldr	r2, [pc, #844]	; (8002c30 <JoystickLocationState+0x4a0>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	08db      	lsrs	r3, r3, #3
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f2:	4bd0      	ldr	r3, [pc, #832]	; (8002c34 <JoystickLocationState+0x4a4>)
 80028f4:	edc3 7a02 	vstr	s15, [r3, #8]
			PickTray.L2[1] = position*0.045; //Pick Tray Y Position 2 //mm
 80028f8:	4bcf      	ldr	r3, [pc, #828]	; (8002c38 <JoystickLocationState+0x4a8>)
 80028fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fd fe18 	bl	8000534 <__aeabi_i2d>
 8002904:	a3c6      	add	r3, pc, #792	; (adr r3, 8002c20 <JoystickLocationState+0x490>)
 8002906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290a:	f7fd fe7d 	bl	8000608 <__aeabi_dmul>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	f7fe f96f 	bl	8000bf8 <__aeabi_d2f>
 800291a:	4603      	mov	r3, r0
 800291c:	4ac5      	ldr	r2, [pc, #788]	; (8002c34 <JoystickLocationState+0x4a4>)
 800291e:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 8002920:	4bc1      	ldr	r3, [pc, #772]	; (8002c28 <JoystickLocationState+0x498>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]

			cos_Theta = (PickTray.L2[0]-PickTray.L1[0])/60;
 8002926:	4bc3      	ldr	r3, [pc, #780]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002928:	ed93 7a02 	vldr	s14, [r3, #8]
 800292c:	4bc1      	ldr	r3, [pc, #772]	; (8002c34 <JoystickLocationState+0x4a4>)
 800292e:	edd3 7a00 	vldr	s15, [r3]
 8002932:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002936:	eddf 6ac1 	vldr	s13, [pc, #772]	; 8002c3c <JoystickLocationState+0x4ac>
 800293a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800293e:	4bc0      	ldr	r3, [pc, #768]	; (8002c40 <JoystickLocationState+0x4b0>)
 8002940:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PickTray.L2[1]-PickTray.L1[1])/60;
 8002944:	4bbb      	ldr	r3, [pc, #748]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002946:	ed93 7a03 	vldr	s14, [r3, #12]
 800294a:	4bba      	ldr	r3, [pc, #744]	; (8002c34 <JoystickLocationState+0x4a4>)
 800294c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002950:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002954:	eddf 6ab9 	vldr	s13, [pc, #740]	; 8002c3c <JoystickLocationState+0x4ac>
 8002958:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800295c:	4bb9      	ldr	r3, [pc, #740]	; (8002c44 <JoystickLocationState+0x4b4>)
 800295e:	edc3 7a00 	vstr	s15, [r3]

			PickTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PickTray.L1[0];
 8002962:	4bb7      	ldr	r3, [pc, #732]	; (8002c40 <JoystickLocationState+0x4b0>)
 8002964:	edd3 7a00 	vldr	s15, [r3]
 8002968:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800296c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002970:	4bb4      	ldr	r3, [pc, #720]	; (8002c44 <JoystickLocationState+0x4b4>)
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800297a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800297e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002982:	4bac      	ldr	r3, [pc, #688]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002984:	edd3 7a00 	vldr	s15, [r3]
 8002988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298c:	4ba9      	ldr	r3, [pc, #676]	; (8002c34 <JoystickLocationState+0x4a4>)
 800298e:	edc3 7a04 	vstr	s15, [r3, #16]
			PickTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PickTray.L1[1];
 8002992:	4bac      	ldr	r3, [pc, #688]	; (8002c44 <JoystickLocationState+0x4b4>)
 8002994:	edd3 7a00 	vldr	s15, [r3]
 8002998:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800299c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029a0:	4ba7      	ldr	r3, [pc, #668]	; (8002c40 <JoystickLocationState+0x4b0>)
 80029a2:	edd3 7a00 	vldr	s15, [r3]
 80029a6:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80029aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029b2:	4ba0      	ldr	r3, [pc, #640]	; (8002c34 <JoystickLocationState+0x4a4>)
 80029b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80029b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029bc:	4b9d      	ldr	r3, [pc, #628]	; (8002c34 <JoystickLocationState+0x4a4>)
 80029be:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PickTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PickTray.L1[0];
 80029c2:	4b9f      	ldr	r3, [pc, #636]	; (8002c40 <JoystickLocationState+0x4b0>)
 80029c4:	edd3 7a00 	vldr	s15, [r3]
 80029c8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80029cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029d0:	4b9c      	ldr	r3, [pc, #624]	; (8002c44 <JoystickLocationState+0x4b4>)
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80029da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029e2:	4b94      	ldr	r3, [pc, #592]	; (8002c34 <JoystickLocationState+0x4a4>)
 80029e4:	edd3 7a00 	vldr	s15, [r3]
 80029e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ec:	4b91      	ldr	r3, [pc, #580]	; (8002c34 <JoystickLocationState+0x4a4>)
 80029ee:	edc3 7a05 	vstr	s15, [r3, #20]
			PickTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PickTray.L1[1];
 80029f2:	4b94      	ldr	r3, [pc, #592]	; (8002c44 <JoystickLocationState+0x4b4>)
 80029f4:	edd3 7a00 	vldr	s15, [r3]
 80029f8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80029fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a00:	4b8f      	ldr	r3, [pc, #572]	; (8002c40 <JoystickLocationState+0x4b0>)
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002a0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a12:	4b88      	ldr	r3, [pc, #544]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002a14:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a1c:	4b85      	ldr	r3, [pc, #532]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002a1e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PickTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PickTray.L1[0];
 8002a22:	4b87      	ldr	r3, [pc, #540]	; (8002c40 <JoystickLocationState+0x4b0>)
 8002a24:	edd3 7a00 	vldr	s15, [r3]
 8002a28:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002c48 <JoystickLocationState+0x4b8>
 8002a2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a30:	4b84      	ldr	r3, [pc, #528]	; (8002c44 <JoystickLocationState+0x4b4>)
 8002a32:	edd3 7a00 	vldr	s15, [r3]
 8002a36:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002a3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a42:	4b7c      	ldr	r3, [pc, #496]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002a44:	edd3 7a00 	vldr	s15, [r3]
 8002a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4c:	4b79      	ldr	r3, [pc, #484]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002a4e:	edc3 7a06 	vstr	s15, [r3, #24]
			PickTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PickTray.L1[1];
 8002a52:	4b7c      	ldr	r3, [pc, #496]	; (8002c44 <JoystickLocationState+0x4b4>)
 8002a54:	edd3 7a00 	vldr	s15, [r3]
 8002a58:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8002c48 <JoystickLocationState+0x4b8>
 8002a5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a60:	4b77      	ldr	r3, [pc, #476]	; (8002c40 <JoystickLocationState+0x4b0>)
 8002a62:	edd3 7a00 	vldr	s15, [r3]
 8002a66:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002a6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a72:	4b70      	ldr	r3, [pc, #448]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002a74:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a7c:	4b6d      	ldr	r3, [pc, #436]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002a7e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PickTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PickTray.L1[0];
 8002a82:	4b6f      	ldr	r3, [pc, #444]	; (8002c40 <JoystickLocationState+0x4b0>)
 8002a84:	edd3 7a00 	vldr	s15, [r3]
 8002a88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a90:	4b6c      	ldr	r3, [pc, #432]	; (8002c44 <JoystickLocationState+0x4b4>)
 8002a92:	edd3 7a00 	vldr	s15, [r3]
 8002a96:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002a9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aa2:	4b64      	ldr	r3, [pc, #400]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002aa4:	edd3 7a00 	vldr	s15, [r3]
 8002aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aac:	4b61      	ldr	r3, [pc, #388]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002aae:	edc3 7a07 	vstr	s15, [r3, #28]
			PickTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PickTray.L1[1];
 8002ab2:	4b64      	ldr	r3, [pc, #400]	; (8002c44 <JoystickLocationState+0x4b4>)
 8002ab4:	edd3 7a00 	vldr	s15, [r3]
 8002ab8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002abc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ac0:	4b5f      	ldr	r3, [pc, #380]	; (8002c40 <JoystickLocationState+0x4b0>)
 8002ac2:	edd3 7a00 	vldr	s15, [r3]
 8002ac6:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002aca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ace:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ad2:	4b58      	ldr	r3, [pc, #352]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002ad4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002adc:	4b55      	ldr	r3, [pc, #340]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002ade:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PickTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PickTray.L1[0];
 8002ae2:	4b57      	ldr	r3, [pc, #348]	; (8002c40 <JoystickLocationState+0x4b0>)
 8002ae4:	edd3 7a00 	vldr	s15, [r3]
 8002ae8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002aec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002af0:	4b54      	ldr	r3, [pc, #336]	; (8002c44 <JoystickLocationState+0x4b4>)
 8002af2:	edd3 7a00 	vldr	s15, [r3]
 8002af6:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002afa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002afe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b02:	4b4c      	ldr	r3, [pc, #304]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b0c:	4b49      	ldr	r3, [pc, #292]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002b0e:	edc3 7a08 	vstr	s15, [r3, #32]
			PickTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PickTray.L1[1];
 8002b12:	4b4c      	ldr	r3, [pc, #304]	; (8002c44 <JoystickLocationState+0x4b4>)
 8002b14:	edd3 7a00 	vldr	s15, [r3]
 8002b18:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002b1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b20:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <JoystickLocationState+0x4b0>)
 8002b22:	edd3 7a00 	vldr	s15, [r3]
 8002b26:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002b2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b32:	4b40      	ldr	r3, [pc, #256]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002b34:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3c:	4b3d      	ldr	r3, [pc, #244]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002b3e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PickTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PickTray.L1[0];
 8002b42:	4b3f      	ldr	r3, [pc, #252]	; (8002c40 <JoystickLocationState+0x4b0>)
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002c48 <JoystickLocationState+0x4b8>
 8002b4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b50:	4b3c      	ldr	r3, [pc, #240]	; (8002c44 <JoystickLocationState+0x4b4>)
 8002b52:	edd3 7a00 	vldr	s15, [r3]
 8002b56:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002b5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b62:	4b34      	ldr	r3, [pc, #208]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6c:	4b31      	ldr	r3, [pc, #196]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002b6e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PickTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PickTray.L1[1];
 8002b72:	4b34      	ldr	r3, [pc, #208]	; (8002c44 <JoystickLocationState+0x4b4>)
 8002b74:	edd3 7a00 	vldr	s15, [r3]
 8002b78:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002c48 <JoystickLocationState+0x4b8>
 8002b7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b80:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <JoystickLocationState+0x4b0>)
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002b8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b92:	4b28      	ldr	r3, [pc, #160]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002b94:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002b9e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PickTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PickTray.L1[0];
 8002ba2:	4b27      	ldr	r3, [pc, #156]	; (8002c40 <JoystickLocationState+0x4b0>)
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002bac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bb0:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <JoystickLocationState+0x4b4>)
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002c4c <JoystickLocationState+0x4bc>
 8002bba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc2:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002bc4:	edd3 7a00 	vldr	s15, [r3]
 8002bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bcc:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002bce:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PickTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PickTray.L1[1];
 8002bd2:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <JoystickLocationState+0x4b4>)
 8002bd4:	edd3 7a00 	vldr	s15, [r3]
 8002bd8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002bdc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002be0:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <JoystickLocationState+0x4b0>)
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002c50 <JoystickLocationState+0x4c0>
 8002bea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002bf4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfc:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <JoystickLocationState+0x4a4>)
 8002bfe:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PickTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PickTray.L1[0];
 8002c02:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <JoystickLocationState+0x4b0>)
 8002c04:	edd3 7a00 	vldr	s15, [r3]
 8002c08:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002c0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <JoystickLocationState+0x4b4>)
 8002c12:	edd3 7a00 	vldr	s15, [r3]
 8002c16:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002c4c <JoystickLocationState+0x4bc>
 8002c1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c1e:	e019      	b.n	8002c54 <JoystickLocationState+0x4c4>
 8002c20:	70a3d70a 	.word	0x70a3d70a
 8002c24:	3fa70a3d 	.word	0x3fa70a3d
 8002c28:	20000a34 	.word	0x20000a34
 8002c2c:	20000f60 	.word	0x20000f60
 8002c30:	cccccccd 	.word	0xcccccccd
 8002c34:	20000964 	.word	0x20000964
 8002c38:	2000092c 	.word	0x2000092c
 8002c3c:	42700000 	.word	0x42700000
 8002c40:	20000a2c 	.word	0x20000a2c
 8002c44:	20000a30 	.word	0x20000a30
 8002c48:	42480000 	.word	0x42480000
 8002c4c:	42200000 	.word	0x42200000
 8002c50:	c2200000 	.word	0xc2200000
 8002c54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c58:	4b8b      	ldr	r3, [pc, #556]	; (8002e88 <JoystickLocationState+0x6f8>)
 8002c5a:	edd3 7a00 	vldr	s15, [r3]
 8002c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c62:	4b89      	ldr	r3, [pc, #548]	; (8002e88 <JoystickLocationState+0x6f8>)
 8002c64:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PickTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PickTray.L1[1];
 8002c68:	4b88      	ldr	r3, [pc, #544]	; (8002e8c <JoystickLocationState+0x6fc>)
 8002c6a:	edd3 7a00 	vldr	s15, [r3]
 8002c6e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002c72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c76:	4b86      	ldr	r3, [pc, #536]	; (8002e90 <JoystickLocationState+0x700>)
 8002c78:	edd3 7a00 	vldr	s15, [r3]
 8002c7c:	eddf 6a85 	vldr	s13, [pc, #532]	; 8002e94 <JoystickLocationState+0x704>
 8002c80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c88:	4b7f      	ldr	r3, [pc, #508]	; (8002e88 <JoystickLocationState+0x6f8>)
 8002c8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c92:	4b7d      	ldr	r3, [pc, #500]	; (8002e88 <JoystickLocationState+0x6f8>)
 8002c94:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PickTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PickTray.L1[0];
 8002c98:	4b7d      	ldr	r3, [pc, #500]	; (8002e90 <JoystickLocationState+0x700>)
 8002c9a:	edd3 7a00 	vldr	s15, [r3]
 8002c9e:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002e98 <JoystickLocationState+0x708>
 8002ca2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ca6:	4b79      	ldr	r3, [pc, #484]	; (8002e8c <JoystickLocationState+0x6fc>)
 8002ca8:	edd3 7a00 	vldr	s15, [r3]
 8002cac:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8002e9c <JoystickLocationState+0x70c>
 8002cb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cb8:	4b73      	ldr	r3, [pc, #460]	; (8002e88 <JoystickLocationState+0x6f8>)
 8002cba:	edd3 7a00 	vldr	s15, [r3]
 8002cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc2:	4b71      	ldr	r3, [pc, #452]	; (8002e88 <JoystickLocationState+0x6f8>)
 8002cc4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PickTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PickTray.L1[1];
 8002cc8:	4b70      	ldr	r3, [pc, #448]	; (8002e8c <JoystickLocationState+0x6fc>)
 8002cca:	edd3 7a00 	vldr	s15, [r3]
 8002cce:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002e98 <JoystickLocationState+0x708>
 8002cd2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cd6:	4b6e      	ldr	r3, [pc, #440]	; (8002e90 <JoystickLocationState+0x700>)
 8002cd8:	edd3 7a00 	vldr	s15, [r3]
 8002cdc:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8002e94 <JoystickLocationState+0x704>
 8002ce0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce8:	4b67      	ldr	r3, [pc, #412]	; (8002e88 <JoystickLocationState+0x6f8>)
 8002cea:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf2:	4b65      	ldr	r3, [pc, #404]	; (8002e88 <JoystickLocationState+0x6f8>)
 8002cf4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PickTray.origin_x = PickTray.L1[0]+(50*sin_Theta);
 8002cf8:	4b63      	ldr	r3, [pc, #396]	; (8002e88 <JoystickLocationState+0x6f8>)
 8002cfa:	ed93 7a00 	vldr	s14, [r3]
 8002cfe:	4b63      	ldr	r3, [pc, #396]	; (8002e8c <JoystickLocationState+0x6fc>)
 8002d00:	edd3 7a00 	vldr	s15, [r3]
 8002d04:	eddf 6a64 	vldr	s13, [pc, #400]	; 8002e98 <JoystickLocationState+0x708>
 8002d08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d10:	4b5d      	ldr	r3, [pc, #372]	; (8002e88 <JoystickLocationState+0x6f8>)
 8002d12:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			PickTray.origin_y = PickTray.L1[1]-(50*cos_Theta);
 8002d16:	4b5c      	ldr	r3, [pc, #368]	; (8002e88 <JoystickLocationState+0x6f8>)
 8002d18:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d1c:	4b5c      	ldr	r3, [pc, #368]	; (8002e90 <JoystickLocationState+0x700>)
 8002d1e:	edd3 7a00 	vldr	s15, [r3]
 8002d22:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8002e98 <JoystickLocationState+0x708>
 8002d26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d2e:	4b56      	ldr	r3, [pc, #344]	; (8002e88 <JoystickLocationState+0x6f8>)
 8002d30:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			PickTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 8002d34:	4b56      	ldr	r3, [pc, #344]	; (8002e90 <JoystickLocationState+0x700>)
 8002d36:	edd3 7a00 	vldr	s15, [r3]
 8002d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d3e:	f00b f977 	bl	800e030 <acosf>
 8002d42:	ee10 3a10 	vmov	r3, s0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fc06 	bl	8000558 <__aeabi_f2d>
 8002d4c:	a34a      	add	r3, pc, #296	; (adr r3, 8002e78 <JoystickLocationState+0x6e8>)
 8002d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d52:	f7fd fc59 	bl	8000608 <__aeabi_dmul>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f7fd ff4b 	bl	8000bf8 <__aeabi_d2f>
 8002d62:	4603      	mov	r3, r0
 8002d64:	4a48      	ldr	r2, [pc, #288]	; (8002e88 <JoystickLocationState+0x6f8>)
 8002d66:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[32].U16 = PickTray.origin_x * 10;
 8002d68:	4b47      	ldr	r3, [pc, #284]	; (8002e88 <JoystickLocationState+0x6f8>)
 8002d6a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002d6e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d7a:	ee17 3a90 	vmov	r3, s15
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <JoystickLocationState+0x710>)
 8002d82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			registerFrame[33].U16 = PickTray.origin_y * 10;
 8002d86:	4b40      	ldr	r3, [pc, #256]	; (8002e88 <JoystickLocationState+0x6f8>)
 8002d88:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002d8c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d98:	ee17 3a90 	vmov	r3, s15
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	4b40      	ldr	r3, [pc, #256]	; (8002ea0 <JoystickLocationState+0x710>)
 8002da0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			registerFrame[34].U16 = PickTray.orientation * 100;
 8002da4:	4b38      	ldr	r3, [pc, #224]	; (8002e88 <JoystickLocationState+0x6f8>)
 8002da6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002daa:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002ea4 <JoystickLocationState+0x714>
 8002dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002db6:	ee17 3a90 	vmov	r3, s15
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	4b38      	ldr	r3, [pc, #224]	; (8002ea0 <JoystickLocationState+0x710>)
 8002dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			registerFrame[16].U16 = 0;
 8002dc2:	4b37      	ldr	r3, [pc, #220]	; (8002ea0 <JoystickLocationState+0x710>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8002dc8:	e32a      	b.n	8003420 <JoystickLocationState+0xc90>
		else if (ResetButton.flag == 1)
 8002dca:	4b37      	ldr	r3, [pc, #220]	; (8002ea8 <JoystickLocationState+0x718>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	f040 8326 	bne.w	8003420 <JoystickLocationState+0xc90>
			ResetButton.flag = 0;
 8002dd4:	4b34      	ldr	r3, [pc, #208]	; (8002ea8 <JoystickLocationState+0x718>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
			state = 1;
 8002dda:	4b34      	ldr	r3, [pc, #208]	; (8002eac <JoystickLocationState+0x71c>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
		break;
 8002de0:	e31e      	b.n	8003420 <JoystickLocationState+0xc90>

	//Get Place Tray 1st Point
	case 3:
		PlaceTray.L1[0] = 0;
 8002de2:	4b33      	ldr	r3, [pc, #204]	; (8002eb0 <JoystickLocationState+0x720>)
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
		PlaceTray.L2[0] = 0;
 8002dea:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <JoystickLocationState+0x720>)
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
		PlaceTray.L1[1] = 0;
 8002df2:	4b2f      	ldr	r3, [pc, #188]	; (8002eb0 <JoystickLocationState+0x720>)
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	605a      	str	r2, [r3, #4]
		PlaceTray.L2[1] = 0;
 8002dfa:	4b2d      	ldr	r3, [pc, #180]	; (8002eb0 <JoystickLocationState+0x720>)
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8002e02:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <JoystickLocationState+0x724>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d129      	bne.n	8002e5e <JoystickLocationState+0x6ce>
		{
			PlaceTray.L1[0] = (registerFrame[68].U16)/10; //Place Tray X Position 1 //mm
 8002e0a:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <JoystickLocationState+0x710>)
 8002e0c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002e10:	4a29      	ldr	r2, [pc, #164]	; (8002eb8 <JoystickLocationState+0x728>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	08db      	lsrs	r3, r3, #3
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	ee07 3a90 	vmov	s15, r3
 8002e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e22:	4b23      	ldr	r3, [pc, #140]	; (8002eb0 <JoystickLocationState+0x720>)
 8002e24:	edc3 7a00 	vstr	s15, [r3]
			PlaceTray.L1[1] = position*0.045; //Place Tray Y Position 1 //mm
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <JoystickLocationState+0x72c>)
 8002e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fd fb80 	bl	8000534 <__aeabi_i2d>
 8002e34:	a312      	add	r3, pc, #72	; (adr r3, 8002e80 <JoystickLocationState+0x6f0>)
 8002e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3a:	f7fd fbe5 	bl	8000608 <__aeabi_dmul>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4610      	mov	r0, r2
 8002e44:	4619      	mov	r1, r3
 8002e46:	f7fd fed7 	bl	8000bf8 <__aeabi_d2f>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4a18      	ldr	r2, [pc, #96]	; (8002eb0 <JoystickLocationState+0x720>)
 8002e4e:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 8002e50:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <JoystickLocationState+0x724>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]
			state = 4;
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <JoystickLocationState+0x71c>)
 8002e58:	2204      	movs	r2, #4
 8002e5a:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8002e5c:	e2e2      	b.n	8003424 <JoystickLocationState+0xc94>
		else if (ResetButton.flag == 1)
 8002e5e:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <JoystickLocationState+0x718>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	f040 82de 	bne.w	8003424 <JoystickLocationState+0xc94>
			ResetButton.flag = 0;
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <JoystickLocationState+0x718>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
			state = 1;
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <JoystickLocationState+0x71c>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
		break;
 8002e74:	e2d6      	b.n	8003424 <JoystickLocationState+0xc94>
 8002e76:	bf00      	nop
 8002e78:	1a63c1f8 	.word	0x1a63c1f8
 8002e7c:	404ca5dc 	.word	0x404ca5dc
 8002e80:	70a3d70a 	.word	0x70a3d70a
 8002e84:	3fa70a3d 	.word	0x3fa70a3d
 8002e88:	20000964 	.word	0x20000964
 8002e8c:	20000a30 	.word	0x20000a30
 8002e90:	20000a2c 	.word	0x20000a2c
 8002e94:	c2200000 	.word	0xc2200000
 8002e98:	42480000 	.word	0x42480000
 8002e9c:	42200000 	.word	0x42200000
 8002ea0:	20000f60 	.word	0x20000f60
 8002ea4:	42c80000 	.word	0x42c80000
 8002ea8:	20000a40 	.word	0x20000a40
 8002eac:	2000021c 	.word	0x2000021c
 8002eb0:	200009c8 	.word	0x200009c8
 8002eb4:	20000a34 	.word	0x20000a34
 8002eb8:	cccccccd 	.word	0xcccccccd
 8002ebc:	2000092c 	.word	0x2000092c

	//Get Place Tray 2nd Point
	case 4:
		if (GetPositionButton.flag == 1)
 8002ec0:	4bd5      	ldr	r3, [pc, #852]	; (8003218 <JoystickLocationState+0xa88>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	f040 8278 	bne.w	80033ba <JoystickLocationState+0xc2a>
		{
			PlaceTray.L2[0] = (registerFrame[68].U16)/10; //Place Tray X Position 2 //mm
 8002eca:	4bd4      	ldr	r3, [pc, #848]	; (800321c <JoystickLocationState+0xa8c>)
 8002ecc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002ed0:	4ad3      	ldr	r2, [pc, #844]	; (8003220 <JoystickLocationState+0xa90>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	08db      	lsrs	r3, r3, #3
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ee2:	4bd0      	ldr	r3, [pc, #832]	; (8003224 <JoystickLocationState+0xa94>)
 8002ee4:	edc3 7a02 	vstr	s15, [r3, #8]
			PlaceTray.L2[1] = position*0.045; //Place Tray Y Position 2 //mm
 8002ee8:	4bcf      	ldr	r3, [pc, #828]	; (8003228 <JoystickLocationState+0xa98>)
 8002eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd fb20 	bl	8000534 <__aeabi_i2d>
 8002ef4:	a3c6      	add	r3, pc, #792	; (adr r3, 8003210 <JoystickLocationState+0xa80>)
 8002ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efa:	f7fd fb85 	bl	8000608 <__aeabi_dmul>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	f7fd fe77 	bl	8000bf8 <__aeabi_d2f>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4ac5      	ldr	r2, [pc, #788]	; (8003224 <JoystickLocationState+0xa94>)
 8002f0e:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 8002f10:	4bc1      	ldr	r3, [pc, #772]	; (8003218 <JoystickLocationState+0xa88>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]

			cos_Theta = (PlaceTray.L2[0]-PlaceTray.L1[0])/60;
 8002f16:	4bc3      	ldr	r3, [pc, #780]	; (8003224 <JoystickLocationState+0xa94>)
 8002f18:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f1c:	4bc1      	ldr	r3, [pc, #772]	; (8003224 <JoystickLocationState+0xa94>)
 8002f1e:	edd3 7a00 	vldr	s15, [r3]
 8002f22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f26:	eddf 6ac1 	vldr	s13, [pc, #772]	; 800322c <JoystickLocationState+0xa9c>
 8002f2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f2e:	4bc0      	ldr	r3, [pc, #768]	; (8003230 <JoystickLocationState+0xaa0>)
 8002f30:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PlaceTray.L2[1]-PlaceTray.L1[1])/60;
 8002f34:	4bbb      	ldr	r3, [pc, #748]	; (8003224 <JoystickLocationState+0xa94>)
 8002f36:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f3a:	4bba      	ldr	r3, [pc, #744]	; (8003224 <JoystickLocationState+0xa94>)
 8002f3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f44:	eddf 6ab9 	vldr	s13, [pc, #740]	; 800322c <JoystickLocationState+0xa9c>
 8002f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f4c:	4bb9      	ldr	r3, [pc, #740]	; (8003234 <JoystickLocationState+0xaa4>)
 8002f4e:	edc3 7a00 	vstr	s15, [r3]

			PlaceTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8002f52:	4bb7      	ldr	r3, [pc, #732]	; (8003230 <JoystickLocationState+0xaa0>)
 8002f54:	edd3 7a00 	vldr	s15, [r3]
 8002f58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f60:	4bb4      	ldr	r3, [pc, #720]	; (8003234 <JoystickLocationState+0xaa4>)
 8002f62:	edd3 7a00 	vldr	s15, [r3]
 8002f66:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002f6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f72:	4bac      	ldr	r3, [pc, #688]	; (8003224 <JoystickLocationState+0xa94>)
 8002f74:	edd3 7a00 	vldr	s15, [r3]
 8002f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f7c:	4ba9      	ldr	r3, [pc, #676]	; (8003224 <JoystickLocationState+0xa94>)
 8002f7e:	edc3 7a04 	vstr	s15, [r3, #16]
			PlaceTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PlaceTray.L1[1];
 8002f82:	4bac      	ldr	r3, [pc, #688]	; (8003234 <JoystickLocationState+0xaa4>)
 8002f84:	edd3 7a00 	vldr	s15, [r3]
 8002f88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f90:	4ba7      	ldr	r3, [pc, #668]	; (8003230 <JoystickLocationState+0xaa0>)
 8002f92:	edd3 7a00 	vldr	s15, [r3]
 8002f96:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002f9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fa2:	4ba0      	ldr	r3, [pc, #640]	; (8003224 <JoystickLocationState+0xa94>)
 8002fa4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fac:	4b9d      	ldr	r3, [pc, #628]	; (8003224 <JoystickLocationState+0xa94>)
 8002fae:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PlaceTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8002fb2:	4b9f      	ldr	r3, [pc, #636]	; (8003230 <JoystickLocationState+0xaa0>)
 8002fb4:	edd3 7a00 	vldr	s15, [r3]
 8002fb8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002fbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002fc0:	4b9c      	ldr	r3, [pc, #624]	; (8003234 <JoystickLocationState+0xaa4>)
 8002fc2:	edd3 7a00 	vldr	s15, [r3]
 8002fc6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002fca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fd2:	4b94      	ldr	r3, [pc, #592]	; (8003224 <JoystickLocationState+0xa94>)
 8002fd4:	edd3 7a00 	vldr	s15, [r3]
 8002fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fdc:	4b91      	ldr	r3, [pc, #580]	; (8003224 <JoystickLocationState+0xa94>)
 8002fde:	edc3 7a05 	vstr	s15, [r3, #20]
			PlaceTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PlaceTray.L1[1];
 8002fe2:	4b94      	ldr	r3, [pc, #592]	; (8003234 <JoystickLocationState+0xaa4>)
 8002fe4:	edd3 7a00 	vldr	s15, [r3]
 8002fe8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002fec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ff0:	4b8f      	ldr	r3, [pc, #572]	; (8003230 <JoystickLocationState+0xaa0>)
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002ffa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ffe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003002:	4b88      	ldr	r3, [pc, #544]	; (8003224 <JoystickLocationState+0xa94>)
 8003004:	edd3 7a01 	vldr	s15, [r3, #4]
 8003008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800300c:	4b85      	ldr	r3, [pc, #532]	; (8003224 <JoystickLocationState+0xa94>)
 800300e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PlaceTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8003012:	4b87      	ldr	r3, [pc, #540]	; (8003230 <JoystickLocationState+0xaa0>)
 8003014:	edd3 7a00 	vldr	s15, [r3]
 8003018:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8003238 <JoystickLocationState+0xaa8>
 800301c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003020:	4b84      	ldr	r3, [pc, #528]	; (8003234 <JoystickLocationState+0xaa4>)
 8003022:	edd3 7a00 	vldr	s15, [r3]
 8003026:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800302a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800302e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003032:	4b7c      	ldr	r3, [pc, #496]	; (8003224 <JoystickLocationState+0xa94>)
 8003034:	edd3 7a00 	vldr	s15, [r3]
 8003038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800303c:	4b79      	ldr	r3, [pc, #484]	; (8003224 <JoystickLocationState+0xa94>)
 800303e:	edc3 7a06 	vstr	s15, [r3, #24]
			PlaceTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PlaceTray.L1[1];
 8003042:	4b7c      	ldr	r3, [pc, #496]	; (8003234 <JoystickLocationState+0xaa4>)
 8003044:	edd3 7a00 	vldr	s15, [r3]
 8003048:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8003238 <JoystickLocationState+0xaa8>
 800304c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003050:	4b77      	ldr	r3, [pc, #476]	; (8003230 <JoystickLocationState+0xaa0>)
 8003052:	edd3 7a00 	vldr	s15, [r3]
 8003056:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 800305a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800305e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003062:	4b70      	ldr	r3, [pc, #448]	; (8003224 <JoystickLocationState+0xa94>)
 8003064:	edd3 7a01 	vldr	s15, [r3, #4]
 8003068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800306c:	4b6d      	ldr	r3, [pc, #436]	; (8003224 <JoystickLocationState+0xa94>)
 800306e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PlaceTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PlaceTray.L1[0];
 8003072:	4b6f      	ldr	r3, [pc, #444]	; (8003230 <JoystickLocationState+0xaa0>)
 8003074:	edd3 7a00 	vldr	s15, [r3]
 8003078:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800307c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003080:	4b6c      	ldr	r3, [pc, #432]	; (8003234 <JoystickLocationState+0xaa4>)
 8003082:	edd3 7a00 	vldr	s15, [r3]
 8003086:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800308a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800308e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003092:	4b64      	ldr	r3, [pc, #400]	; (8003224 <JoystickLocationState+0xa94>)
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309c:	4b61      	ldr	r3, [pc, #388]	; (8003224 <JoystickLocationState+0xa94>)
 800309e:	edc3 7a07 	vstr	s15, [r3, #28]
			PlaceTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PlaceTray.L1[1];
 80030a2:	4b64      	ldr	r3, [pc, #400]	; (8003234 <JoystickLocationState+0xaa4>)
 80030a4:	edd3 7a00 	vldr	s15, [r3]
 80030a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030b0:	4b5f      	ldr	r3, [pc, #380]	; (8003230 <JoystickLocationState+0xaa0>)
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 80030ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030c2:	4b58      	ldr	r3, [pc, #352]	; (8003224 <JoystickLocationState+0xa94>)
 80030c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80030c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030cc:	4b55      	ldr	r3, [pc, #340]	; (8003224 <JoystickLocationState+0xa94>)
 80030ce:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PlaceTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PlaceTray.L1[0];
 80030d2:	4b57      	ldr	r3, [pc, #348]	; (8003230 <JoystickLocationState+0xaa0>)
 80030d4:	edd3 7a00 	vldr	s15, [r3]
 80030d8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80030dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030e0:	4b54      	ldr	r3, [pc, #336]	; (8003234 <JoystickLocationState+0xaa4>)
 80030e2:	edd3 7a00 	vldr	s15, [r3]
 80030e6:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80030ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030f2:	4b4c      	ldr	r3, [pc, #304]	; (8003224 <JoystickLocationState+0xa94>)
 80030f4:	edd3 7a00 	vldr	s15, [r3]
 80030f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fc:	4b49      	ldr	r3, [pc, #292]	; (8003224 <JoystickLocationState+0xa94>)
 80030fe:	edc3 7a08 	vstr	s15, [r3, #32]
			PlaceTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PlaceTray.L1[1];
 8003102:	4b4c      	ldr	r3, [pc, #304]	; (8003234 <JoystickLocationState+0xaa4>)
 8003104:	edd3 7a00 	vldr	s15, [r3]
 8003108:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800310c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003110:	4b47      	ldr	r3, [pc, #284]	; (8003230 <JoystickLocationState+0xaa0>)
 8003112:	edd3 7a00 	vldr	s15, [r3]
 8003116:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 800311a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800311e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003122:	4b40      	ldr	r3, [pc, #256]	; (8003224 <JoystickLocationState+0xa94>)
 8003124:	edd3 7a01 	vldr	s15, [r3, #4]
 8003128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312c:	4b3d      	ldr	r3, [pc, #244]	; (8003224 <JoystickLocationState+0xa94>)
 800312e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PlaceTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PlaceTray.L1[0];
 8003132:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <JoystickLocationState+0xaa0>)
 8003134:	edd3 7a00 	vldr	s15, [r3]
 8003138:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003238 <JoystickLocationState+0xaa8>
 800313c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003140:	4b3c      	ldr	r3, [pc, #240]	; (8003234 <JoystickLocationState+0xaa4>)
 8003142:	edd3 7a00 	vldr	s15, [r3]
 8003146:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800314a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800314e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003152:	4b34      	ldr	r3, [pc, #208]	; (8003224 <JoystickLocationState+0xa94>)
 8003154:	edd3 7a00 	vldr	s15, [r3]
 8003158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315c:	4b31      	ldr	r3, [pc, #196]	; (8003224 <JoystickLocationState+0xa94>)
 800315e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PlaceTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PlaceTray.L1[1];
 8003162:	4b34      	ldr	r3, [pc, #208]	; (8003234 <JoystickLocationState+0xaa4>)
 8003164:	edd3 7a00 	vldr	s15, [r3]
 8003168:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003238 <JoystickLocationState+0xaa8>
 800316c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003170:	4b2f      	ldr	r3, [pc, #188]	; (8003230 <JoystickLocationState+0xaa0>)
 8003172:	edd3 7a00 	vldr	s15, [r3]
 8003176:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 800317a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800317e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003182:	4b28      	ldr	r3, [pc, #160]	; (8003224 <JoystickLocationState+0xa94>)
 8003184:	edd3 7a01 	vldr	s15, [r3, #4]
 8003188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800318c:	4b25      	ldr	r3, [pc, #148]	; (8003224 <JoystickLocationState+0xa94>)
 800318e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PlaceTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003192:	4b27      	ldr	r3, [pc, #156]	; (8003230 <JoystickLocationState+0xaa0>)
 8003194:	edd3 7a00 	vldr	s15, [r3]
 8003198:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800319c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031a0:	4b24      	ldr	r3, [pc, #144]	; (8003234 <JoystickLocationState+0xaa4>)
 80031a2:	edd3 7a00 	vldr	s15, [r3]
 80031a6:	eddf 6a25 	vldr	s13, [pc, #148]	; 800323c <JoystickLocationState+0xaac>
 80031aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031b2:	4b1c      	ldr	r3, [pc, #112]	; (8003224 <JoystickLocationState+0xa94>)
 80031b4:	edd3 7a00 	vldr	s15, [r3]
 80031b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031bc:	4b19      	ldr	r3, [pc, #100]	; (8003224 <JoystickLocationState+0xa94>)
 80031be:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PlaceTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PlaceTray.L1[1];
 80031c2:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <JoystickLocationState+0xaa4>)
 80031c4:	edd3 7a00 	vldr	s15, [r3]
 80031c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031d0:	4b17      	ldr	r3, [pc, #92]	; (8003230 <JoystickLocationState+0xaa0>)
 80031d2:	edd3 7a00 	vldr	s15, [r3]
 80031d6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003240 <JoystickLocationState+0xab0>
 80031da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031e2:	4b10      	ldr	r3, [pc, #64]	; (8003224 <JoystickLocationState+0xa94>)
 80031e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80031e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ec:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <JoystickLocationState+0xa94>)
 80031ee:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PlaceTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PlaceTray.L1[0];
 80031f2:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <JoystickLocationState+0xaa0>)
 80031f4:	edd3 7a00 	vldr	s15, [r3]
 80031f8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80031fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <JoystickLocationState+0xaa4>)
 8003202:	edd3 7a00 	vldr	s15, [r3]
 8003206:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800323c <JoystickLocationState+0xaac>
 800320a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800320e:	e019      	b.n	8003244 <JoystickLocationState+0xab4>
 8003210:	70a3d70a 	.word	0x70a3d70a
 8003214:	3fa70a3d 	.word	0x3fa70a3d
 8003218:	20000a34 	.word	0x20000a34
 800321c:	20000f60 	.word	0x20000f60
 8003220:	cccccccd 	.word	0xcccccccd
 8003224:	200009c8 	.word	0x200009c8
 8003228:	2000092c 	.word	0x2000092c
 800322c:	42700000 	.word	0x42700000
 8003230:	20000a2c 	.word	0x20000a2c
 8003234:	20000a30 	.word	0x20000a30
 8003238:	42480000 	.word	0x42480000
 800323c:	42200000 	.word	0x42200000
 8003240:	c2200000 	.word	0xc2200000
 8003244:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003248:	4b7d      	ldr	r3, [pc, #500]	; (8003440 <JoystickLocationState+0xcb0>)
 800324a:	edd3 7a00 	vldr	s15, [r3]
 800324e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003252:	4b7b      	ldr	r3, [pc, #492]	; (8003440 <JoystickLocationState+0xcb0>)
 8003254:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PlaceTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003258:	4b7a      	ldr	r3, [pc, #488]	; (8003444 <JoystickLocationState+0xcb4>)
 800325a:	edd3 7a00 	vldr	s15, [r3]
 800325e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003262:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003266:	4b78      	ldr	r3, [pc, #480]	; (8003448 <JoystickLocationState+0xcb8>)
 8003268:	edd3 7a00 	vldr	s15, [r3]
 800326c:	eddf 6a77 	vldr	s13, [pc, #476]	; 800344c <JoystickLocationState+0xcbc>
 8003270:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003274:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003278:	4b71      	ldr	r3, [pc, #452]	; (8003440 <JoystickLocationState+0xcb0>)
 800327a:	edd3 7a01 	vldr	s15, [r3, #4]
 800327e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003282:	4b6f      	ldr	r3, [pc, #444]	; (8003440 <JoystickLocationState+0xcb0>)
 8003284:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PlaceTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003288:	4b6f      	ldr	r3, [pc, #444]	; (8003448 <JoystickLocationState+0xcb8>)
 800328a:	edd3 7a00 	vldr	s15, [r3]
 800328e:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003450 <JoystickLocationState+0xcc0>
 8003292:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003296:	4b6b      	ldr	r3, [pc, #428]	; (8003444 <JoystickLocationState+0xcb4>)
 8003298:	edd3 7a00 	vldr	s15, [r3]
 800329c:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8003454 <JoystickLocationState+0xcc4>
 80032a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a8:	4b65      	ldr	r3, [pc, #404]	; (8003440 <JoystickLocationState+0xcb0>)
 80032aa:	edd3 7a00 	vldr	s15, [r3]
 80032ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b2:	4b63      	ldr	r3, [pc, #396]	; (8003440 <JoystickLocationState+0xcb0>)
 80032b4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PlaceTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PlaceTray.L1[1];
 80032b8:	4b62      	ldr	r3, [pc, #392]	; (8003444 <JoystickLocationState+0xcb4>)
 80032ba:	edd3 7a00 	vldr	s15, [r3]
 80032be:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003450 <JoystickLocationState+0xcc0>
 80032c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032c6:	4b60      	ldr	r3, [pc, #384]	; (8003448 <JoystickLocationState+0xcb8>)
 80032c8:	edd3 7a00 	vldr	s15, [r3]
 80032cc:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800344c <JoystickLocationState+0xcbc>
 80032d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032d8:	4b59      	ldr	r3, [pc, #356]	; (8003440 <JoystickLocationState+0xcb0>)
 80032da:	edd3 7a01 	vldr	s15, [r3, #4]
 80032de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e2:	4b57      	ldr	r3, [pc, #348]	; (8003440 <JoystickLocationState+0xcb0>)
 80032e4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PlaceTray.origin_x = PlaceTray.L1[0]+(50*sin_Theta);
 80032e8:	4b55      	ldr	r3, [pc, #340]	; (8003440 <JoystickLocationState+0xcb0>)
 80032ea:	ed93 7a00 	vldr	s14, [r3]
 80032ee:	4b55      	ldr	r3, [pc, #340]	; (8003444 <JoystickLocationState+0xcb4>)
 80032f0:	edd3 7a00 	vldr	s15, [r3]
 80032f4:	eddf 6a56 	vldr	s13, [pc, #344]	; 8003450 <JoystickLocationState+0xcc0>
 80032f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003300:	4b4f      	ldr	r3, [pc, #316]	; (8003440 <JoystickLocationState+0xcb0>)
 8003302:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			PlaceTray.origin_y = PlaceTray.L1[1]-(50*cos_Theta);
 8003306:	4b4e      	ldr	r3, [pc, #312]	; (8003440 <JoystickLocationState+0xcb0>)
 8003308:	ed93 7a01 	vldr	s14, [r3, #4]
 800330c:	4b4e      	ldr	r3, [pc, #312]	; (8003448 <JoystickLocationState+0xcb8>)
 800330e:	edd3 7a00 	vldr	s15, [r3]
 8003312:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003450 <JoystickLocationState+0xcc0>
 8003316:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800331a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800331e:	4b48      	ldr	r3, [pc, #288]	; (8003440 <JoystickLocationState+0xcb0>)
 8003320:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			PlaceTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 8003324:	4b48      	ldr	r3, [pc, #288]	; (8003448 <JoystickLocationState+0xcb8>)
 8003326:	edd3 7a00 	vldr	s15, [r3]
 800332a:	eeb0 0a67 	vmov.f32	s0, s15
 800332e:	f00a fe7f 	bl	800e030 <acosf>
 8003332:	ee10 3a10 	vmov	r3, s0
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd f90e 	bl	8000558 <__aeabi_f2d>
 800333c:	a33e      	add	r3, pc, #248	; (adr r3, 8003438 <JoystickLocationState+0xca8>)
 800333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003342:	f7fd f961 	bl	8000608 <__aeabi_dmul>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	f7fd fc53 	bl	8000bf8 <__aeabi_d2f>
 8003352:	4603      	mov	r3, r0
 8003354:	4a3a      	ldr	r2, [pc, #232]	; (8003440 <JoystickLocationState+0xcb0>)
 8003356:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[35].U16 = PlaceTray.origin_x * 10;
 8003358:	4b39      	ldr	r3, [pc, #228]	; (8003440 <JoystickLocationState+0xcb0>)
 800335a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800335e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003362:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800336a:	ee17 3a90 	vmov	r3, s15
 800336e:	b29a      	uxth	r2, r3
 8003370:	4b39      	ldr	r3, [pc, #228]	; (8003458 <JoystickLocationState+0xcc8>)
 8003372:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[36].U16 = PlaceTray.origin_y * 10;
 8003376:	4b32      	ldr	r3, [pc, #200]	; (8003440 <JoystickLocationState+0xcb0>)
 8003378:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800337c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003388:	ee17 3a90 	vmov	r3, s15
 800338c:	b29a      	uxth	r2, r3
 800338e:	4b32      	ldr	r3, [pc, #200]	; (8003458 <JoystickLocationState+0xcc8>)
 8003390:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[37].U16 = PlaceTray.orientation * 100;
 8003394:	4b2a      	ldr	r3, [pc, #168]	; (8003440 <JoystickLocationState+0xcb0>)
 8003396:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800339a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800345c <JoystickLocationState+0xccc>
 800339e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033a6:	ee17 3a90 	vmov	r3, s15
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	4b2a      	ldr	r3, [pc, #168]	; (8003458 <JoystickLocationState+0xcc8>)
 80033ae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			registerFrame[16].U16 = 0;
 80033b2:	4b29      	ldr	r3, [pc, #164]	; (8003458 <JoystickLocationState+0xcc8>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 80033b8:	e036      	b.n	8003428 <JoystickLocationState+0xc98>
		else if (ResetButton.flag == 1)
 80033ba:	4b29      	ldr	r3, [pc, #164]	; (8003460 <JoystickLocationState+0xcd0>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d132      	bne.n	8003428 <JoystickLocationState+0xc98>
			ResetButton.flag = 0;
 80033c2:	4b27      	ldr	r3, [pc, #156]	; (8003460 <JoystickLocationState+0xcd0>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
			state = 1;
 80033c8:	4b26      	ldr	r3, [pc, #152]	; (8003464 <JoystickLocationState+0xcd4>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
		break;
 80033ce:	e02b      	b.n	8003428 <JoystickLocationState+0xc98>
	case 5:
		EndEffectorState = 2;		//TestModeOff
 80033d0:	4b25      	ldr	r3, [pc, #148]	; (8003468 <JoystickLocationState+0xcd8>)
 80033d2:	2202      	movs	r2, #2
 80033d4:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 0;	//End Effector Status: Laser Off
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <JoystickLocationState+0xcc8>)
 80033d8:	2200      	movs	r2, #0
 80033da:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 80033dc:	4b23      	ldr	r3, [pc, #140]	; (800346c <JoystickLocationState+0xcdc>)
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]

		HAL_Delay(10);
 80033e2:	200a      	movs	r0, #10
 80033e4:	f001 f9c0 	bl	8004768 <HAL_Delay>

		EndEffectorState = 3;		//RunModeOn
 80033e8:	4b1f      	ldr	r3, [pc, #124]	; (8003468 <JoystickLocationState+0xcd8>)
 80033ea:	2203      	movs	r2, #3
 80033ec:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 2;	//End Effector Status: Gripper Power
 80033ee:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <JoystickLocationState+0xcc8>)
 80033f0:	2202      	movs	r2, #2
 80033f2:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 80033f4:	4b1d      	ldr	r3, [pc, #116]	; (800346c <JoystickLocationState+0xcdc>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	701a      	strb	r2, [r3, #0]

		state = 1;
 80033fa:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <JoystickLocationState+0xcd4>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
		scheduler = 1;				//Go Pick
 8003400:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <JoystickLocationState+0xce0>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]
		if (ResetButton.flag == 1)
 8003406:	4b16      	ldr	r3, [pc, #88]	; (8003460 <JoystickLocationState+0xcd0>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d10e      	bne.n	800342c <JoystickLocationState+0xc9c>
		{
			ResetButton.flag = 0;
 800340e:	4b14      	ldr	r3, [pc, #80]	; (8003460 <JoystickLocationState+0xcd0>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
			state = 1;
 8003414:	4b13      	ldr	r3, [pc, #76]	; (8003464 <JoystickLocationState+0xcd4>)
 8003416:	2201      	movs	r2, #1
 8003418:	601a      	str	r2, [r3, #0]
		}
		break;
 800341a:	e007      	b.n	800342c <JoystickLocationState+0xc9c>
		break;
 800341c:	bf00      	nop
 800341e:	e006      	b.n	800342e <JoystickLocationState+0xc9e>
		break;
 8003420:	bf00      	nop
 8003422:	e004      	b.n	800342e <JoystickLocationState+0xc9e>
		break;
 8003424:	bf00      	nop
 8003426:	e002      	b.n	800342e <JoystickLocationState+0xc9e>
		break;
 8003428:	bf00      	nop
 800342a:	e000      	b.n	800342e <JoystickLocationState+0xc9e>
		break;
 800342c:	bf00      	nop
	}
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	f3af 8000 	nop.w
 8003438:	1a63c1f8 	.word	0x1a63c1f8
 800343c:	404ca5dc 	.word	0x404ca5dc
 8003440:	200009c8 	.word	0x200009c8
 8003444:	20000a30 	.word	0x20000a30
 8003448:	20000a2c 	.word	0x20000a2c
 800344c:	c2200000 	.word	0xc2200000
 8003450:	42480000 	.word	0x42480000
 8003454:	42200000 	.word	0x42200000
 8003458:	20000f60 	.word	0x20000f60
 800345c:	42c80000 	.word	0x42c80000
 8003460:	20000a40 	.word	0x20000a40
 8003464:	2000021c 	.word	0x2000021c
 8003468:	20000a80 	.word	0x20000a80
 800346c:	20000a7c 	.word	0x20000a7c
 8003470:	200008e0 	.word	0x200008e0

08003474 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
	if(htim == &htim9) //check call back from timer9
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a06      	ldr	r2, [pc, #24]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d105      	bne.n	8003490 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		if(scheduler == 3)
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b03      	cmp	r3, #3
 800348a:	d101      	bne.n	8003490 <HAL_TIM_PeriodElapsedCallback+0x1c>
		{
			TrajectoryGenerator();
 800348c:	f000 f808 	bl	80034a0 <TrajectoryGenerator>
		}

	}
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	20000630 	.word	0x20000630
 800349c:	200008e0 	.word	0x200008e0

080034a0 <TrajectoryGenerator>:

void TrajectoryGenerator()
{
 80034a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034a4:	af00      	add	r7, sp, #0
	switch(Trajectstate)
 80034a6:	4b92      	ldr	r3, [pc, #584]	; (80036f0 <TrajectoryGenerator+0x250>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	f000 82cc 	beq.w	8003a48 <TrajectoryGenerator+0x5a8>
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	f300 84dd 	bgt.w	8003e70 <TrajectoryGenerator+0x9d0>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d004      	beq.n	80034c4 <TrajectoryGenerator+0x24>
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	f000 813c 	beq.w	8003738 <TrajectoryGenerator+0x298>
		 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
		 time += 0.001;
	 }
	 break;
	}
}
 80034c0:	f000 bcd6 	b.w	8003e70 <TrajectoryGenerator+0x9d0>
		qi = position;
 80034c4:	4b8b      	ldr	r3, [pc, #556]	; (80036f4 <TrajectoryGenerator+0x254>)
 80034c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034d2:	4b89      	ldr	r3, [pc, #548]	; (80036f8 <TrajectoryGenerator+0x258>)
 80034d4:	edc3 7a00 	vstr	s15, [r3]
		qdi = 0;
 80034d8:	4b88      	ldr	r3, [pc, #544]	; (80036fc <TrajectoryGenerator+0x25c>)
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
		qd_max = 13333.33; //pulse/s
 80034e0:	4b87      	ldr	r3, [pc, #540]	; (8003700 <TrajectoryGenerator+0x260>)
 80034e2:	4a88      	ldr	r2, [pc, #544]	; (8003704 <TrajectoryGenerator+0x264>)
 80034e4:	601a      	str	r2, [r3, #0]
		qdd_max = 11111.11; //pulse/s^2
 80034e6:	4b88      	ldr	r3, [pc, #544]	; (8003708 <TrajectoryGenerator+0x268>)
 80034e8:	4a88      	ldr	r2, [pc, #544]	; (800370c <TrajectoryGenerator+0x26c>)
 80034ea:	601a      	str	r2, [r3, #0]
	  if(qf > qi)
 80034ec:	4b88      	ldr	r3, [pc, #544]	; (8003710 <TrajectoryGenerator+0x270>)
 80034ee:	ed93 7a00 	vldr	s14, [r3]
 80034f2:	4b81      	ldr	r3, [pc, #516]	; (80036f8 <TrajectoryGenerator+0x258>)
 80034f4:	edd3 7a00 	vldr	s15, [r3]
 80034f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003500:	dd16      	ble.n	8003530 <TrajectoryGenerator+0x90>
		  t_half = sqrtf((qf-qi)/qdd_max);
 8003502:	4b83      	ldr	r3, [pc, #524]	; (8003710 <TrajectoryGenerator+0x270>)
 8003504:	ed93 7a00 	vldr	s14, [r3]
 8003508:	4b7b      	ldr	r3, [pc, #492]	; (80036f8 <TrajectoryGenerator+0x258>)
 800350a:	edd3 7a00 	vldr	s15, [r3]
 800350e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003512:	4b7d      	ldr	r3, [pc, #500]	; (8003708 <TrajectoryGenerator+0x268>)
 8003514:	edd3 7a00 	vldr	s15, [r3]
 8003518:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800351c:	eeb0 0a66 	vmov.f32	s0, s13
 8003520:	f00a fdb2 	bl	800e088 <sqrtf>
 8003524:	eef0 7a40 	vmov.f32	s15, s0
 8003528:	4b7a      	ldr	r3, [pc, #488]	; (8003714 <TrajectoryGenerator+0x274>)
 800352a:	edc3 7a00 	vstr	s15, [r3]
 800352e:	e022      	b.n	8003576 <TrajectoryGenerator+0xd6>
	  else if(qf < qi)
 8003530:	4b77      	ldr	r3, [pc, #476]	; (8003710 <TrajectoryGenerator+0x270>)
 8003532:	ed93 7a00 	vldr	s14, [r3]
 8003536:	4b70      	ldr	r3, [pc, #448]	; (80036f8 <TrajectoryGenerator+0x258>)
 8003538:	edd3 7a00 	vldr	s15, [r3]
 800353c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003544:	d517      	bpl.n	8003576 <TrajectoryGenerator+0xd6>
		  t_half = sqrtf(-1*(qf-qi)/qdd_max);
 8003546:	4b72      	ldr	r3, [pc, #456]	; (8003710 <TrajectoryGenerator+0x270>)
 8003548:	ed93 7a00 	vldr	s14, [r3]
 800354c:	4b6a      	ldr	r3, [pc, #424]	; (80036f8 <TrajectoryGenerator+0x258>)
 800354e:	edd3 7a00 	vldr	s15, [r3]
 8003552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003556:	eeb1 7a67 	vneg.f32	s14, s15
 800355a:	4b6b      	ldr	r3, [pc, #428]	; (8003708 <TrajectoryGenerator+0x268>)
 800355c:	edd3 7a00 	vldr	s15, [r3]
 8003560:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003564:	eeb0 0a66 	vmov.f32	s0, s13
 8003568:	f00a fd8e 	bl	800e088 <sqrtf>
 800356c:	eef0 7a40 	vmov.f32	s15, s0
 8003570:	4b68      	ldr	r3, [pc, #416]	; (8003714 <TrajectoryGenerator+0x274>)
 8003572:	edc3 7a00 	vstr	s15, [r3]
	  if(qf-qi < 0)
 8003576:	4b66      	ldr	r3, [pc, #408]	; (8003710 <TrajectoryGenerator+0x270>)
 8003578:	ed93 7a00 	vldr	s14, [r3]
 800357c:	4b5e      	ldr	r3, [pc, #376]	; (80036f8 <TrajectoryGenerator+0x258>)
 800357e:	edd3 7a00 	vldr	s15, [r3]
 8003582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003586:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800358a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358e:	d50f      	bpl.n	80035b0 <TrajectoryGenerator+0x110>
		  qd_max = -1*qd_max;
 8003590:	4b5b      	ldr	r3, [pc, #364]	; (8003700 <TrajectoryGenerator+0x260>)
 8003592:	edd3 7a00 	vldr	s15, [r3]
 8003596:	eef1 7a67 	vneg.f32	s15, s15
 800359a:	4b59      	ldr	r3, [pc, #356]	; (8003700 <TrajectoryGenerator+0x260>)
 800359c:	edc3 7a00 	vstr	s15, [r3]
		  qdd_max = -1*qdd_max;
 80035a0:	4b59      	ldr	r3, [pc, #356]	; (8003708 <TrajectoryGenerator+0x268>)
 80035a2:	edd3 7a00 	vldr	s15, [r3]
 80035a6:	eef1 7a67 	vneg.f32	s15, s15
 80035aa:	4b57      	ldr	r3, [pc, #348]	; (8003708 <TrajectoryGenerator+0x268>)
 80035ac:	edc3 7a00 	vstr	s15, [r3]
	  tacc = (qd_max-qdi)/qdd_max;
 80035b0:	4b53      	ldr	r3, [pc, #332]	; (8003700 <TrajectoryGenerator+0x260>)
 80035b2:	ed93 7a00 	vldr	s14, [r3]
 80035b6:	4b51      	ldr	r3, [pc, #324]	; (80036fc <TrajectoryGenerator+0x25c>)
 80035b8:	edd3 7a00 	vldr	s15, [r3]
 80035bc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80035c0:	4b51      	ldr	r3, [pc, #324]	; (8003708 <TrajectoryGenerator+0x268>)
 80035c2:	ed93 7a00 	vldr	s14, [r3]
 80035c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035ca:	4b53      	ldr	r3, [pc, #332]	; (8003718 <TrajectoryGenerator+0x278>)
 80035cc:	edc3 7a00 	vstr	s15, [r3]
	  qacc = qdi*tacc + 0.5*qdd_max*tacc*tacc;
 80035d0:	4b4a      	ldr	r3, [pc, #296]	; (80036fc <TrajectoryGenerator+0x25c>)
 80035d2:	ed93 7a00 	vldr	s14, [r3]
 80035d6:	4b50      	ldr	r3, [pc, #320]	; (8003718 <TrajectoryGenerator+0x278>)
 80035d8:	edd3 7a00 	vldr	s15, [r3]
 80035dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e0:	ee17 0a90 	vmov	r0, s15
 80035e4:	f7fc ffb8 	bl	8000558 <__aeabi_f2d>
 80035e8:	4604      	mov	r4, r0
 80035ea:	460d      	mov	r5, r1
 80035ec:	4b46      	ldr	r3, [pc, #280]	; (8003708 <TrajectoryGenerator+0x268>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fc ffb1 	bl	8000558 <__aeabi_f2d>
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	4b48      	ldr	r3, [pc, #288]	; (800371c <TrajectoryGenerator+0x27c>)
 80035fc:	f7fd f804 	bl	8000608 <__aeabi_dmul>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4690      	mov	r8, r2
 8003606:	4699      	mov	r9, r3
 8003608:	4b43      	ldr	r3, [pc, #268]	; (8003718 <TrajectoryGenerator+0x278>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7fc ffa3 	bl	8000558 <__aeabi_f2d>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4640      	mov	r0, r8
 8003618:	4649      	mov	r1, r9
 800361a:	f7fc fff5 	bl	8000608 <__aeabi_dmul>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4690      	mov	r8, r2
 8003624:	4699      	mov	r9, r3
 8003626:	4b3c      	ldr	r3, [pc, #240]	; (8003718 <TrajectoryGenerator+0x278>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fc ff94 	bl	8000558 <__aeabi_f2d>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4640      	mov	r0, r8
 8003636:	4649      	mov	r1, r9
 8003638:	f7fc ffe6 	bl	8000608 <__aeabi_dmul>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4620      	mov	r0, r4
 8003642:	4629      	mov	r1, r5
 8003644:	f7fc fe2a 	bl	800029c <__adddf3>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4610      	mov	r0, r2
 800364e:	4619      	mov	r1, r3
 8003650:	f7fd fad2 	bl	8000bf8 <__aeabi_d2f>
 8003654:	4603      	mov	r3, r0
 8003656:	4a32      	ldr	r2, [pc, #200]	; (8003720 <TrajectoryGenerator+0x280>)
 8003658:	6013      	str	r3, [r2, #0]
	  qdec = qacc;
 800365a:	4b31      	ldr	r3, [pc, #196]	; (8003720 <TrajectoryGenerator+0x280>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a31      	ldr	r2, [pc, #196]	; (8003724 <TrajectoryGenerator+0x284>)
 8003660:	6013      	str	r3, [r2, #0]
	  tconst = ((qf-qi)-qacc-qdec)/qd_max;
 8003662:	4b2b      	ldr	r3, [pc, #172]	; (8003710 <TrajectoryGenerator+0x270>)
 8003664:	ed93 7a00 	vldr	s14, [r3]
 8003668:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <TrajectoryGenerator+0x258>)
 800366a:	edd3 7a00 	vldr	s15, [r3]
 800366e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003672:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <TrajectoryGenerator+0x280>)
 8003674:	edd3 7a00 	vldr	s15, [r3]
 8003678:	ee37 7a67 	vsub.f32	s14, s14, s15
 800367c:	4b29      	ldr	r3, [pc, #164]	; (8003724 <TrajectoryGenerator+0x284>)
 800367e:	edd3 7a00 	vldr	s15, [r3]
 8003682:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003686:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <TrajectoryGenerator+0x260>)
 8003688:	ed93 7a00 	vldr	s14, [r3]
 800368c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003690:	4b25      	ldr	r3, [pc, #148]	; (8003728 <TrajectoryGenerator+0x288>)
 8003692:	edc3 7a00 	vstr	s15, [r3]
	  tdec = tacc;
 8003696:	4b20      	ldr	r3, [pc, #128]	; (8003718 <TrajectoryGenerator+0x278>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a24      	ldr	r2, [pc, #144]	; (800372c <TrajectoryGenerator+0x28c>)
 800369c:	6013      	str	r3, [r2, #0]
	  if(fabs(qdi+qdd_max*t_half) >= fabs(qd_max))
 800369e:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <TrajectoryGenerator+0x268>)
 80036a0:	ed93 7a00 	vldr	s14, [r3]
 80036a4:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <TrajectoryGenerator+0x274>)
 80036a6:	edd3 7a00 	vldr	s15, [r3]
 80036aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036ae:	4b13      	ldr	r3, [pc, #76]	; (80036fc <TrajectoryGenerator+0x25c>)
 80036b0:	edd3 7a00 	vldr	s15, [r3]
 80036b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b8:	eeb0 7ae7 	vabs.f32	s14, s15
 80036bc:	4b10      	ldr	r3, [pc, #64]	; (8003700 <TrajectoryGenerator+0x260>)
 80036be:	edd3 7a00 	vldr	s15, [r3]
 80036c2:	eef0 7ae7 	vabs.f32	s15, s15
 80036c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ce:	db07      	blt.n	80036e0 <TrajectoryGenerator+0x240>
		  initime = time;
 80036d0:	4b17      	ldr	r3, [pc, #92]	; (8003730 <TrajectoryGenerator+0x290>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a17      	ldr	r2, [pc, #92]	; (8003734 <TrajectoryGenerator+0x294>)
 80036d6:	6013      	str	r3, [r2, #0]
		  Trajectstate = 2;
 80036d8:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <TrajectoryGenerator+0x250>)
 80036da:	2202      	movs	r2, #2
 80036dc:	601a      	str	r2, [r3, #0]
	  break;
 80036de:	e3c7      	b.n	8003e70 <TrajectoryGenerator+0x9d0>
		  initime = time;
 80036e0:	4b13      	ldr	r3, [pc, #76]	; (8003730 <TrajectoryGenerator+0x290>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a13      	ldr	r2, [pc, #76]	; (8003734 <TrajectoryGenerator+0x294>)
 80036e6:	6013      	str	r3, [r2, #0]
		  Trajectstate = 1;
 80036e8:	4b01      	ldr	r3, [pc, #4]	; (80036f0 <TrajectoryGenerator+0x250>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
	  break;
 80036ee:	e3bf      	b.n	8003e70 <TrajectoryGenerator+0x9d0>
 80036f0:	200008ec 	.word	0x200008ec
 80036f4:	2000092c 	.word	0x2000092c
 80036f8:	200008f8 	.word	0x200008f8
 80036fc:	200008fc 	.word	0x200008fc
 8003700:	2000020c 	.word	0x2000020c
 8003704:	46505552 	.word	0x46505552
 8003708:	20000210 	.word	0x20000210
 800370c:	462d9c71 	.word	0x462d9c71
 8003710:	200008f4 	.word	0x200008f4
 8003714:	20000904 	.word	0x20000904
 8003718:	20000918 	.word	0x20000918
 800371c:	3fe00000 	.word	0x3fe00000
 8003720:	2000091c 	.word	0x2000091c
 8003724:	20000920 	.word	0x20000920
 8003728:	20000924 	.word	0x20000924
 800372c:	20000928 	.word	0x20000928
 8003730:	200008f0 	.word	0x200008f0
 8003734:	20000900 	.word	0x20000900
	  if(time <= t_half + initime)
 8003738:	4bb7      	ldr	r3, [pc, #732]	; (8003a18 <TrajectoryGenerator+0x578>)
 800373a:	ed93 7a00 	vldr	s14, [r3]
 800373e:	4bb7      	ldr	r3, [pc, #732]	; (8003a1c <TrajectoryGenerator+0x57c>)
 8003740:	edd3 7a00 	vldr	s15, [r3]
 8003744:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003748:	4bb5      	ldr	r3, [pc, #724]	; (8003a20 <TrajectoryGenerator+0x580>)
 800374a:	edd3 7a00 	vldr	s15, [r3]
 800374e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003756:	f2c0 8092 	blt.w	800387e <TrajectoryGenerator+0x3de>
		  setacc = qdd_max;
 800375a:	4bb2      	ldr	r3, [pc, #712]	; (8003a24 <TrajectoryGenerator+0x584>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4ab2      	ldr	r2, [pc, #712]	; (8003a28 <TrajectoryGenerator+0x588>)
 8003760:	6013      	str	r3, [r2, #0]
		  setvelocity = qdi + setacc*(time-initime);
 8003762:	4baf      	ldr	r3, [pc, #700]	; (8003a20 <TrajectoryGenerator+0x580>)
 8003764:	ed93 7a00 	vldr	s14, [r3]
 8003768:	4bac      	ldr	r3, [pc, #688]	; (8003a1c <TrajectoryGenerator+0x57c>)
 800376a:	edd3 7a00 	vldr	s15, [r3]
 800376e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003772:	4bad      	ldr	r3, [pc, #692]	; (8003a28 <TrajectoryGenerator+0x588>)
 8003774:	edd3 7a00 	vldr	s15, [r3]
 8003778:	ee27 7a27 	vmul.f32	s14, s14, s15
 800377c:	4bab      	ldr	r3, [pc, #684]	; (8003a2c <TrajectoryGenerator+0x58c>)
 800377e:	edd3 7a00 	vldr	s15, [r3]
 8003782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003786:	4baa      	ldr	r3, [pc, #680]	; (8003a30 <TrajectoryGenerator+0x590>)
 8003788:	edc3 7a00 	vstr	s15, [r3]
		  setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 800378c:	4ba4      	ldr	r3, [pc, #656]	; (8003a20 <TrajectoryGenerator+0x580>)
 800378e:	ed93 7a00 	vldr	s14, [r3]
 8003792:	4ba2      	ldr	r3, [pc, #648]	; (8003a1c <TrajectoryGenerator+0x57c>)
 8003794:	edd3 7a00 	vldr	s15, [r3]
 8003798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800379c:	4ba3      	ldr	r3, [pc, #652]	; (8003a2c <TrajectoryGenerator+0x58c>)
 800379e:	edd3 7a00 	vldr	s15, [r3]
 80037a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037a6:	4ba3      	ldr	r3, [pc, #652]	; (8003a34 <TrajectoryGenerator+0x594>)
 80037a8:	edd3 7a00 	vldr	s15, [r3]
 80037ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b0:	ee17 0a90 	vmov	r0, s15
 80037b4:	f7fc fed0 	bl	8000558 <__aeabi_f2d>
 80037b8:	4604      	mov	r4, r0
 80037ba:	460d      	mov	r5, r1
 80037bc:	4b9a      	ldr	r3, [pc, #616]	; (8003a28 <TrajectoryGenerator+0x588>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fc fec9 	bl	8000558 <__aeabi_f2d>
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	4b9b      	ldr	r3, [pc, #620]	; (8003a38 <TrajectoryGenerator+0x598>)
 80037cc:	f7fc ff1c 	bl	8000608 <__aeabi_dmul>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4690      	mov	r8, r2
 80037d6:	4699      	mov	r9, r3
 80037d8:	4b91      	ldr	r3, [pc, #580]	; (8003a20 <TrajectoryGenerator+0x580>)
 80037da:	ed93 7a00 	vldr	s14, [r3]
 80037de:	4b8f      	ldr	r3, [pc, #572]	; (8003a1c <TrajectoryGenerator+0x57c>)
 80037e0:	edd3 7a00 	vldr	s15, [r3]
 80037e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037e8:	ee17 0a90 	vmov	r0, s15
 80037ec:	f7fc feb4 	bl	8000558 <__aeabi_f2d>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4640      	mov	r0, r8
 80037f6:	4649      	mov	r1, r9
 80037f8:	f7fc ff06 	bl	8000608 <__aeabi_dmul>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4690      	mov	r8, r2
 8003802:	4699      	mov	r9, r3
 8003804:	4b86      	ldr	r3, [pc, #536]	; (8003a20 <TrajectoryGenerator+0x580>)
 8003806:	ed93 7a00 	vldr	s14, [r3]
 800380a:	4b84      	ldr	r3, [pc, #528]	; (8003a1c <TrajectoryGenerator+0x57c>)
 800380c:	edd3 7a00 	vldr	s15, [r3]
 8003810:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003814:	ee17 0a90 	vmov	r0, s15
 8003818:	f7fc fe9e 	bl	8000558 <__aeabi_f2d>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4640      	mov	r0, r8
 8003822:	4649      	mov	r1, r9
 8003824:	f7fc fef0 	bl	8000608 <__aeabi_dmul>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4620      	mov	r0, r4
 800382e:	4629      	mov	r1, r5
 8003830:	f7fc fd34 	bl	800029c <__adddf3>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4610      	mov	r0, r2
 800383a:	4619      	mov	r1, r3
 800383c:	f7fd f9dc 	bl	8000bf8 <__aeabi_d2f>
 8003840:	4603      	mov	r3, r0
 8003842:	4a7e      	ldr	r2, [pc, #504]	; (8003a3c <TrajectoryGenerator+0x59c>)
 8003844:	6013      	str	r3, [r2, #0]
		  qi_1 = setposition;
 8003846:	4b7d      	ldr	r3, [pc, #500]	; (8003a3c <TrajectoryGenerator+0x59c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a7d      	ldr	r2, [pc, #500]	; (8003a40 <TrajectoryGenerator+0x5a0>)
 800384c:	6013      	str	r3, [r2, #0]
		  qdi_1 = setvelocity;
 800384e:	4b78      	ldr	r3, [pc, #480]	; (8003a30 <TrajectoryGenerator+0x590>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a7c      	ldr	r2, [pc, #496]	; (8003a44 <TrajectoryGenerator+0x5a4>)
 8003854:	6013      	str	r3, [r2, #0]
		  time += 0.001;
 8003856:	4b72      	ldr	r3, [pc, #456]	; (8003a20 <TrajectoryGenerator+0x580>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7fc fe7c 	bl	8000558 <__aeabi_f2d>
 8003860:	a36b      	add	r3, pc, #428	; (adr r3, 8003a10 <TrajectoryGenerator+0x570>)
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	f7fc fd19 	bl	800029c <__adddf3>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4610      	mov	r0, r2
 8003870:	4619      	mov	r1, r3
 8003872:	f7fd f9c1 	bl	8000bf8 <__aeabi_d2f>
 8003876:	4603      	mov	r3, r0
 8003878:	4a69      	ldr	r2, [pc, #420]	; (8003a20 <TrajectoryGenerator+0x580>)
 800387a:	6013      	str	r3, [r2, #0]
	break;
 800387c:	e2f8      	b.n	8003e70 <TrajectoryGenerator+0x9d0>
	  else if(t_half + initime < time && time <= (2*t_half) + initime)
 800387e:	4b66      	ldr	r3, [pc, #408]	; (8003a18 <TrajectoryGenerator+0x578>)
 8003880:	ed93 7a00 	vldr	s14, [r3]
 8003884:	4b65      	ldr	r3, [pc, #404]	; (8003a1c <TrajectoryGenerator+0x57c>)
 8003886:	edd3 7a00 	vldr	s15, [r3]
 800388a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800388e:	4b64      	ldr	r3, [pc, #400]	; (8003a20 <TrajectoryGenerator+0x580>)
 8003890:	edd3 7a00 	vldr	s15, [r3]
 8003894:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800389c:	d400      	bmi.n	80038a0 <TrajectoryGenerator+0x400>
	break;
 800389e:	e2e7      	b.n	8003e70 <TrajectoryGenerator+0x9d0>
	  else if(t_half + initime < time && time <= (2*t_half) + initime)
 80038a0:	4b5d      	ldr	r3, [pc, #372]	; (8003a18 <TrajectoryGenerator+0x578>)
 80038a2:	edd3 7a00 	vldr	s15, [r3]
 80038a6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80038aa:	4b5c      	ldr	r3, [pc, #368]	; (8003a1c <TrajectoryGenerator+0x57c>)
 80038ac:	edd3 7a00 	vldr	s15, [r3]
 80038b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038b4:	4b5a      	ldr	r3, [pc, #360]	; (8003a20 <TrajectoryGenerator+0x580>)
 80038b6:	edd3 7a00 	vldr	s15, [r3]
 80038ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c2:	da00      	bge.n	80038c6 <TrajectoryGenerator+0x426>
	break;
 80038c4:	e2d4      	b.n	8003e70 <TrajectoryGenerator+0x9d0>
		  setacc = -qdd_max;
 80038c6:	4b57      	ldr	r3, [pc, #348]	; (8003a24 <TrajectoryGenerator+0x584>)
 80038c8:	edd3 7a00 	vldr	s15, [r3]
 80038cc:	eef1 7a67 	vneg.f32	s15, s15
 80038d0:	4b55      	ldr	r3, [pc, #340]	; (8003a28 <TrajectoryGenerator+0x588>)
 80038d2:	edc3 7a00 	vstr	s15, [r3]
		  setvelocity = qdi_1 + setacc*(time-initime-t_half);
 80038d6:	4b52      	ldr	r3, [pc, #328]	; (8003a20 <TrajectoryGenerator+0x580>)
 80038d8:	ed93 7a00 	vldr	s14, [r3]
 80038dc:	4b4f      	ldr	r3, [pc, #316]	; (8003a1c <TrajectoryGenerator+0x57c>)
 80038de:	edd3 7a00 	vldr	s15, [r3]
 80038e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038e6:	4b4c      	ldr	r3, [pc, #304]	; (8003a18 <TrajectoryGenerator+0x578>)
 80038e8:	edd3 7a00 	vldr	s15, [r3]
 80038ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038f0:	4b4d      	ldr	r3, [pc, #308]	; (8003a28 <TrajectoryGenerator+0x588>)
 80038f2:	edd3 7a00 	vldr	s15, [r3]
 80038f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038fa:	4b52      	ldr	r3, [pc, #328]	; (8003a44 <TrajectoryGenerator+0x5a4>)
 80038fc:	edd3 7a00 	vldr	s15, [r3]
 8003900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003904:	4b4a      	ldr	r3, [pc, #296]	; (8003a30 <TrajectoryGenerator+0x590>)
 8003906:	edc3 7a00 	vstr	s15, [r3]
		  setposition = qi_1 + qdi_1*(time-initime-t_half)+0.5*setacc*(time-initime-t_half)*(time-initime-t_half);
 800390a:	4b45      	ldr	r3, [pc, #276]	; (8003a20 <TrajectoryGenerator+0x580>)
 800390c:	ed93 7a00 	vldr	s14, [r3]
 8003910:	4b42      	ldr	r3, [pc, #264]	; (8003a1c <TrajectoryGenerator+0x57c>)
 8003912:	edd3 7a00 	vldr	s15, [r3]
 8003916:	ee37 7a67 	vsub.f32	s14, s14, s15
 800391a:	4b3f      	ldr	r3, [pc, #252]	; (8003a18 <TrajectoryGenerator+0x578>)
 800391c:	edd3 7a00 	vldr	s15, [r3]
 8003920:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003924:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <TrajectoryGenerator+0x5a4>)
 8003926:	edd3 7a00 	vldr	s15, [r3]
 800392a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800392e:	4b44      	ldr	r3, [pc, #272]	; (8003a40 <TrajectoryGenerator+0x5a0>)
 8003930:	edd3 7a00 	vldr	s15, [r3]
 8003934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003938:	ee17 0a90 	vmov	r0, s15
 800393c:	f7fc fe0c 	bl	8000558 <__aeabi_f2d>
 8003940:	4604      	mov	r4, r0
 8003942:	460d      	mov	r5, r1
 8003944:	4b38      	ldr	r3, [pc, #224]	; (8003a28 <TrajectoryGenerator+0x588>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f7fc fe05 	bl	8000558 <__aeabi_f2d>
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	4b39      	ldr	r3, [pc, #228]	; (8003a38 <TrajectoryGenerator+0x598>)
 8003954:	f7fc fe58 	bl	8000608 <__aeabi_dmul>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4690      	mov	r8, r2
 800395e:	4699      	mov	r9, r3
 8003960:	4b2f      	ldr	r3, [pc, #188]	; (8003a20 <TrajectoryGenerator+0x580>)
 8003962:	ed93 7a00 	vldr	s14, [r3]
 8003966:	4b2d      	ldr	r3, [pc, #180]	; (8003a1c <TrajectoryGenerator+0x57c>)
 8003968:	edd3 7a00 	vldr	s15, [r3]
 800396c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003970:	4b29      	ldr	r3, [pc, #164]	; (8003a18 <TrajectoryGenerator+0x578>)
 8003972:	edd3 7a00 	vldr	s15, [r3]
 8003976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800397a:	ee17 0a90 	vmov	r0, s15
 800397e:	f7fc fdeb 	bl	8000558 <__aeabi_f2d>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4640      	mov	r0, r8
 8003988:	4649      	mov	r1, r9
 800398a:	f7fc fe3d 	bl	8000608 <__aeabi_dmul>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4690      	mov	r8, r2
 8003994:	4699      	mov	r9, r3
 8003996:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <TrajectoryGenerator+0x580>)
 8003998:	ed93 7a00 	vldr	s14, [r3]
 800399c:	4b1f      	ldr	r3, [pc, #124]	; (8003a1c <TrajectoryGenerator+0x57c>)
 800399e:	edd3 7a00 	vldr	s15, [r3]
 80039a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039a6:	4b1c      	ldr	r3, [pc, #112]	; (8003a18 <TrajectoryGenerator+0x578>)
 80039a8:	edd3 7a00 	vldr	s15, [r3]
 80039ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039b0:	ee17 0a90 	vmov	r0, s15
 80039b4:	f7fc fdd0 	bl	8000558 <__aeabi_f2d>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4640      	mov	r0, r8
 80039be:	4649      	mov	r1, r9
 80039c0:	f7fc fe22 	bl	8000608 <__aeabi_dmul>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4620      	mov	r0, r4
 80039ca:	4629      	mov	r1, r5
 80039cc:	f7fc fc66 	bl	800029c <__adddf3>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4610      	mov	r0, r2
 80039d6:	4619      	mov	r1, r3
 80039d8:	f7fd f90e 	bl	8000bf8 <__aeabi_d2f>
 80039dc:	4603      	mov	r3, r0
 80039de:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <TrajectoryGenerator+0x59c>)
 80039e0:	6013      	str	r3, [r2, #0]
		  time += 0.001;
 80039e2:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <TrajectoryGenerator+0x580>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fc fdb6 	bl	8000558 <__aeabi_f2d>
 80039ec:	a308      	add	r3, pc, #32	; (adr r3, 8003a10 <TrajectoryGenerator+0x570>)
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	f7fc fc53 	bl	800029c <__adddf3>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4610      	mov	r0, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	f7fd f8fb 	bl	8000bf8 <__aeabi_d2f>
 8003a02:	4603      	mov	r3, r0
 8003a04:	4a06      	ldr	r2, [pc, #24]	; (8003a20 <TrajectoryGenerator+0x580>)
 8003a06:	6013      	str	r3, [r2, #0]
	break;
 8003a08:	e232      	b.n	8003e70 <TrajectoryGenerator+0x9d0>
 8003a0a:	bf00      	nop
 8003a0c:	f3af 8000 	nop.w
 8003a10:	d2f1a9fc 	.word	0xd2f1a9fc
 8003a14:	3f50624d 	.word	0x3f50624d
 8003a18:	20000904 	.word	0x20000904
 8003a1c:	20000900 	.word	0x20000900
 8003a20:	200008f0 	.word	0x200008f0
 8003a24:	20000210 	.word	0x20000210
 8003a28:	2000095c 	.word	0x2000095c
 8003a2c:	200008fc 	.word	0x200008fc
 8003a30:	20000958 	.word	0x20000958
 8003a34:	200008f8 	.word	0x200008f8
 8003a38:	3fe00000 	.word	0x3fe00000
 8003a3c:	20000938 	.word	0x20000938
 8003a40:	20000910 	.word	0x20000910
 8003a44:	20000908 	.word	0x20000908
	 if(time <= tacc + initime)
 8003a48:	4b9d      	ldr	r3, [pc, #628]	; (8003cc0 <TrajectoryGenerator+0x820>)
 8003a4a:	ed93 7a00 	vldr	s14, [r3]
 8003a4e:	4b9d      	ldr	r3, [pc, #628]	; (8003cc4 <TrajectoryGenerator+0x824>)
 8003a50:	edd3 7a00 	vldr	s15, [r3]
 8003a54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a58:	4b9b      	ldr	r3, [pc, #620]	; (8003cc8 <TrajectoryGenerator+0x828>)
 8003a5a:	edd3 7a00 	vldr	s15, [r3]
 8003a5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a66:	f2c0 8092 	blt.w	8003b8e <TrajectoryGenerator+0x6ee>
		 setacc = qdd_max;
 8003a6a:	4b98      	ldr	r3, [pc, #608]	; (8003ccc <TrajectoryGenerator+0x82c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a98      	ldr	r2, [pc, #608]	; (8003cd0 <TrajectoryGenerator+0x830>)
 8003a70:	6013      	str	r3, [r2, #0]
		 setvelocity = qdi + setacc*(time-initime);
 8003a72:	4b95      	ldr	r3, [pc, #596]	; (8003cc8 <TrajectoryGenerator+0x828>)
 8003a74:	ed93 7a00 	vldr	s14, [r3]
 8003a78:	4b92      	ldr	r3, [pc, #584]	; (8003cc4 <TrajectoryGenerator+0x824>)
 8003a7a:	edd3 7a00 	vldr	s15, [r3]
 8003a7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a82:	4b93      	ldr	r3, [pc, #588]	; (8003cd0 <TrajectoryGenerator+0x830>)
 8003a84:	edd3 7a00 	vldr	s15, [r3]
 8003a88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a8c:	4b91      	ldr	r3, [pc, #580]	; (8003cd4 <TrajectoryGenerator+0x834>)
 8003a8e:	edd3 7a00 	vldr	s15, [r3]
 8003a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a96:	4b90      	ldr	r3, [pc, #576]	; (8003cd8 <TrajectoryGenerator+0x838>)
 8003a98:	edc3 7a00 	vstr	s15, [r3]
		 setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 8003a9c:	4b8a      	ldr	r3, [pc, #552]	; (8003cc8 <TrajectoryGenerator+0x828>)
 8003a9e:	ed93 7a00 	vldr	s14, [r3]
 8003aa2:	4b88      	ldr	r3, [pc, #544]	; (8003cc4 <TrajectoryGenerator+0x824>)
 8003aa4:	edd3 7a00 	vldr	s15, [r3]
 8003aa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003aac:	4b89      	ldr	r3, [pc, #548]	; (8003cd4 <TrajectoryGenerator+0x834>)
 8003aae:	edd3 7a00 	vldr	s15, [r3]
 8003ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ab6:	4b89      	ldr	r3, [pc, #548]	; (8003cdc <TrajectoryGenerator+0x83c>)
 8003ab8:	edd3 7a00 	vldr	s15, [r3]
 8003abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac0:	ee17 0a90 	vmov	r0, s15
 8003ac4:	f7fc fd48 	bl	8000558 <__aeabi_f2d>
 8003ac8:	4604      	mov	r4, r0
 8003aca:	460d      	mov	r5, r1
 8003acc:	4b80      	ldr	r3, [pc, #512]	; (8003cd0 <TrajectoryGenerator+0x830>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fc fd41 	bl	8000558 <__aeabi_f2d>
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	4b81      	ldr	r3, [pc, #516]	; (8003ce0 <TrajectoryGenerator+0x840>)
 8003adc:	f7fc fd94 	bl	8000608 <__aeabi_dmul>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4690      	mov	r8, r2
 8003ae6:	4699      	mov	r9, r3
 8003ae8:	4b77      	ldr	r3, [pc, #476]	; (8003cc8 <TrajectoryGenerator+0x828>)
 8003aea:	ed93 7a00 	vldr	s14, [r3]
 8003aee:	4b75      	ldr	r3, [pc, #468]	; (8003cc4 <TrajectoryGenerator+0x824>)
 8003af0:	edd3 7a00 	vldr	s15, [r3]
 8003af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003af8:	ee17 0a90 	vmov	r0, s15
 8003afc:	f7fc fd2c 	bl	8000558 <__aeabi_f2d>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4640      	mov	r0, r8
 8003b06:	4649      	mov	r1, r9
 8003b08:	f7fc fd7e 	bl	8000608 <__aeabi_dmul>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4690      	mov	r8, r2
 8003b12:	4699      	mov	r9, r3
 8003b14:	4b6c      	ldr	r3, [pc, #432]	; (8003cc8 <TrajectoryGenerator+0x828>)
 8003b16:	ed93 7a00 	vldr	s14, [r3]
 8003b1a:	4b6a      	ldr	r3, [pc, #424]	; (8003cc4 <TrajectoryGenerator+0x824>)
 8003b1c:	edd3 7a00 	vldr	s15, [r3]
 8003b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b24:	ee17 0a90 	vmov	r0, s15
 8003b28:	f7fc fd16 	bl	8000558 <__aeabi_f2d>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4640      	mov	r0, r8
 8003b32:	4649      	mov	r1, r9
 8003b34:	f7fc fd68 	bl	8000608 <__aeabi_dmul>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	4629      	mov	r1, r5
 8003b40:	f7fc fbac 	bl	800029c <__adddf3>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	f7fd f854 	bl	8000bf8 <__aeabi_d2f>
 8003b50:	4603      	mov	r3, r0
 8003b52:	4a64      	ldr	r2, [pc, #400]	; (8003ce4 <TrajectoryGenerator+0x844>)
 8003b54:	6013      	str	r3, [r2, #0]
		 qi_1 = setposition;
 8003b56:	4b63      	ldr	r3, [pc, #396]	; (8003ce4 <TrajectoryGenerator+0x844>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a63      	ldr	r2, [pc, #396]	; (8003ce8 <TrajectoryGenerator+0x848>)
 8003b5c:	6013      	str	r3, [r2, #0]
		 qdi_1 = setvelocity;
 8003b5e:	4b5e      	ldr	r3, [pc, #376]	; (8003cd8 <TrajectoryGenerator+0x838>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a62      	ldr	r2, [pc, #392]	; (8003cec <TrajectoryGenerator+0x84c>)
 8003b64:	6013      	str	r3, [r2, #0]
		 time += 0.001;
 8003b66:	4b58      	ldr	r3, [pc, #352]	; (8003cc8 <TrajectoryGenerator+0x828>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fc fcf4 	bl	8000558 <__aeabi_f2d>
 8003b70:	a351      	add	r3, pc, #324	; (adr r3, 8003cb8 <TrajectoryGenerator+0x818>)
 8003b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b76:	f7fc fb91 	bl	800029c <__adddf3>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4610      	mov	r0, r2
 8003b80:	4619      	mov	r1, r3
 8003b82:	f7fd f839 	bl	8000bf8 <__aeabi_d2f>
 8003b86:	4603      	mov	r3, r0
 8003b88:	4a4f      	ldr	r2, [pc, #316]	; (8003cc8 <TrajectoryGenerator+0x828>)
 8003b8a:	6013      	str	r3, [r2, #0]
	 break;
 8003b8c:	e16f      	b.n	8003e6e <TrajectoryGenerator+0x9ce>
	 else if(tacc+initime < time && time <= initime+tacc+tconst)
 8003b8e:	4b4c      	ldr	r3, [pc, #304]	; (8003cc0 <TrajectoryGenerator+0x820>)
 8003b90:	ed93 7a00 	vldr	s14, [r3]
 8003b94:	4b4b      	ldr	r3, [pc, #300]	; (8003cc4 <TrajectoryGenerator+0x824>)
 8003b96:	edd3 7a00 	vldr	s15, [r3]
 8003b9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b9e:	4b4a      	ldr	r3, [pc, #296]	; (8003cc8 <TrajectoryGenerator+0x828>)
 8003ba0:	edd3 7a00 	vldr	s15, [r3]
 8003ba4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bac:	d552      	bpl.n	8003c54 <TrajectoryGenerator+0x7b4>
 8003bae:	4b45      	ldr	r3, [pc, #276]	; (8003cc4 <TrajectoryGenerator+0x824>)
 8003bb0:	ed93 7a00 	vldr	s14, [r3]
 8003bb4:	4b42      	ldr	r3, [pc, #264]	; (8003cc0 <TrajectoryGenerator+0x820>)
 8003bb6:	edd3 7a00 	vldr	s15, [r3]
 8003bba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bbe:	4b4c      	ldr	r3, [pc, #304]	; (8003cf0 <TrajectoryGenerator+0x850>)
 8003bc0:	edd3 7a00 	vldr	s15, [r3]
 8003bc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bc8:	4b3f      	ldr	r3, [pc, #252]	; (8003cc8 <TrajectoryGenerator+0x828>)
 8003bca:	edd3 7a00 	vldr	s15, [r3]
 8003bce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd6:	db3d      	blt.n	8003c54 <TrajectoryGenerator+0x7b4>
		 setacc = 0;
 8003bd8:	4b3d      	ldr	r3, [pc, #244]	; (8003cd0 <TrajectoryGenerator+0x830>)
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
		 setvelocity = qd_max;
 8003be0:	4b44      	ldr	r3, [pc, #272]	; (8003cf4 <TrajectoryGenerator+0x854>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a3c      	ldr	r2, [pc, #240]	; (8003cd8 <TrajectoryGenerator+0x838>)
 8003be6:	6013      	str	r3, [r2, #0]
		 setposition = qi_1 + qd_max*(time-initime-tacc);
 8003be8:	4b37      	ldr	r3, [pc, #220]	; (8003cc8 <TrajectoryGenerator+0x828>)
 8003bea:	ed93 7a00 	vldr	s14, [r3]
 8003bee:	4b35      	ldr	r3, [pc, #212]	; (8003cc4 <TrajectoryGenerator+0x824>)
 8003bf0:	edd3 7a00 	vldr	s15, [r3]
 8003bf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003bf8:	4b31      	ldr	r3, [pc, #196]	; (8003cc0 <TrajectoryGenerator+0x820>)
 8003bfa:	edd3 7a00 	vldr	s15, [r3]
 8003bfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c02:	4b3c      	ldr	r3, [pc, #240]	; (8003cf4 <TrajectoryGenerator+0x854>)
 8003c04:	edd3 7a00 	vldr	s15, [r3]
 8003c08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c0c:	4b36      	ldr	r3, [pc, #216]	; (8003ce8 <TrajectoryGenerator+0x848>)
 8003c0e:	edd3 7a00 	vldr	s15, [r3]
 8003c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c16:	4b33      	ldr	r3, [pc, #204]	; (8003ce4 <TrajectoryGenerator+0x844>)
 8003c18:	edc3 7a00 	vstr	s15, [r3]
		 qi_2 = setposition;
 8003c1c:	4b31      	ldr	r3, [pc, #196]	; (8003ce4 <TrajectoryGenerator+0x844>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a35      	ldr	r2, [pc, #212]	; (8003cf8 <TrajectoryGenerator+0x858>)
 8003c22:	6013      	str	r3, [r2, #0]
		 qdi_2 = setvelocity;
 8003c24:	4b2c      	ldr	r3, [pc, #176]	; (8003cd8 <TrajectoryGenerator+0x838>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a34      	ldr	r2, [pc, #208]	; (8003cfc <TrajectoryGenerator+0x85c>)
 8003c2a:	6013      	str	r3, [r2, #0]
		 time += 0.001;
 8003c2c:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <TrajectoryGenerator+0x828>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fc fc91 	bl	8000558 <__aeabi_f2d>
 8003c36:	a320      	add	r3, pc, #128	; (adr r3, 8003cb8 <TrajectoryGenerator+0x818>)
 8003c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3c:	f7fc fb2e 	bl	800029c <__adddf3>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	f7fc ffd6 	bl	8000bf8 <__aeabi_d2f>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4a1e      	ldr	r2, [pc, #120]	; (8003cc8 <TrajectoryGenerator+0x828>)
 8003c50:	6013      	str	r3, [r2, #0]
	 break;
 8003c52:	e10c      	b.n	8003e6e <TrajectoryGenerator+0x9ce>
	 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8003c54:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <TrajectoryGenerator+0x820>)
 8003c56:	ed93 7a00 	vldr	s14, [r3]
 8003c5a:	4b25      	ldr	r3, [pc, #148]	; (8003cf0 <TrajectoryGenerator+0x850>)
 8003c5c:	edd3 7a00 	vldr	s15, [r3]
 8003c60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c64:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <TrajectoryGenerator+0x824>)
 8003c66:	edd3 7a00 	vldr	s15, [r3]
 8003c6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c6e:	4b16      	ldr	r3, [pc, #88]	; (8003cc8 <TrajectoryGenerator+0x828>)
 8003c70:	edd3 7a00 	vldr	s15, [r3]
 8003c74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7c:	d400      	bmi.n	8003c80 <TrajectoryGenerator+0x7e0>
	 break;
 8003c7e:	e0f6      	b.n	8003e6e <TrajectoryGenerator+0x9ce>
	 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8003c80:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <TrajectoryGenerator+0x820>)
 8003c82:	ed93 7a00 	vldr	s14, [r3]
 8003c86:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <TrajectoryGenerator+0x850>)
 8003c88:	edd3 7a00 	vldr	s15, [r3]
 8003c8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c90:	4b1b      	ldr	r3, [pc, #108]	; (8003d00 <TrajectoryGenerator+0x860>)
 8003c92:	edd3 7a00 	vldr	s15, [r3]
 8003c96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <TrajectoryGenerator+0x824>)
 8003c9c:	edd3 7a00 	vldr	s15, [r3]
 8003ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ca4:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <TrajectoryGenerator+0x828>)
 8003ca6:	edd3 7a00 	vldr	s15, [r3]
 8003caa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb2:	da27      	bge.n	8003d04 <TrajectoryGenerator+0x864>
	 break;
 8003cb4:	e0db      	b.n	8003e6e <TrajectoryGenerator+0x9ce>
 8003cb6:	bf00      	nop
 8003cb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8003cbc:	3f50624d 	.word	0x3f50624d
 8003cc0:	20000918 	.word	0x20000918
 8003cc4:	20000900 	.word	0x20000900
 8003cc8:	200008f0 	.word	0x200008f0
 8003ccc:	20000210 	.word	0x20000210
 8003cd0:	2000095c 	.word	0x2000095c
 8003cd4:	200008fc 	.word	0x200008fc
 8003cd8:	20000958 	.word	0x20000958
 8003cdc:	200008f8 	.word	0x200008f8
 8003ce0:	3fe00000 	.word	0x3fe00000
 8003ce4:	20000938 	.word	0x20000938
 8003ce8:	20000910 	.word	0x20000910
 8003cec:	20000908 	.word	0x20000908
 8003cf0:	20000924 	.word	0x20000924
 8003cf4:	2000020c 	.word	0x2000020c
 8003cf8:	20000914 	.word	0x20000914
 8003cfc:	2000090c 	.word	0x2000090c
 8003d00:	20000928 	.word	0x20000928
		 setacc = -qdd_max;
 8003d04:	4b5e      	ldr	r3, [pc, #376]	; (8003e80 <TrajectoryGenerator+0x9e0>)
 8003d06:	edd3 7a00 	vldr	s15, [r3]
 8003d0a:	eef1 7a67 	vneg.f32	s15, s15
 8003d0e:	4b5d      	ldr	r3, [pc, #372]	; (8003e84 <TrajectoryGenerator+0x9e4>)
 8003d10:	edc3 7a00 	vstr	s15, [r3]
		 setvelocity = qdi_2 + setacc*(time-initime-tacc-tconst);
 8003d14:	4b5c      	ldr	r3, [pc, #368]	; (8003e88 <TrajectoryGenerator+0x9e8>)
 8003d16:	ed93 7a00 	vldr	s14, [r3]
 8003d1a:	4b5c      	ldr	r3, [pc, #368]	; (8003e8c <TrajectoryGenerator+0x9ec>)
 8003d1c:	edd3 7a00 	vldr	s15, [r3]
 8003d20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d24:	4b5a      	ldr	r3, [pc, #360]	; (8003e90 <TrajectoryGenerator+0x9f0>)
 8003d26:	edd3 7a00 	vldr	s15, [r3]
 8003d2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d2e:	4b59      	ldr	r3, [pc, #356]	; (8003e94 <TrajectoryGenerator+0x9f4>)
 8003d30:	edd3 7a00 	vldr	s15, [r3]
 8003d34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d38:	4b52      	ldr	r3, [pc, #328]	; (8003e84 <TrajectoryGenerator+0x9e4>)
 8003d3a:	edd3 7a00 	vldr	s15, [r3]
 8003d3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d42:	4b55      	ldr	r3, [pc, #340]	; (8003e98 <TrajectoryGenerator+0x9f8>)
 8003d44:	edd3 7a00 	vldr	s15, [r3]
 8003d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d4c:	4b53      	ldr	r3, [pc, #332]	; (8003e9c <TrajectoryGenerator+0x9fc>)
 8003d4e:	edc3 7a00 	vstr	s15, [r3]
		 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
 8003d52:	4b4d      	ldr	r3, [pc, #308]	; (8003e88 <TrajectoryGenerator+0x9e8>)
 8003d54:	ed93 7a00 	vldr	s14, [r3]
 8003d58:	4b4c      	ldr	r3, [pc, #304]	; (8003e8c <TrajectoryGenerator+0x9ec>)
 8003d5a:	edd3 7a00 	vldr	s15, [r3]
 8003d5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d62:	4b4b      	ldr	r3, [pc, #300]	; (8003e90 <TrajectoryGenerator+0x9f0>)
 8003d64:	edd3 7a00 	vldr	s15, [r3]
 8003d68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d6c:	4b49      	ldr	r3, [pc, #292]	; (8003e94 <TrajectoryGenerator+0x9f4>)
 8003d6e:	edd3 7a00 	vldr	s15, [r3]
 8003d72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d76:	4b48      	ldr	r3, [pc, #288]	; (8003e98 <TrajectoryGenerator+0x9f8>)
 8003d78:	edd3 7a00 	vldr	s15, [r3]
 8003d7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d80:	4b47      	ldr	r3, [pc, #284]	; (8003ea0 <TrajectoryGenerator+0xa00>)
 8003d82:	edd3 7a00 	vldr	s15, [r3]
 8003d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d8a:	ee17 0a90 	vmov	r0, s15
 8003d8e:	f7fc fbe3 	bl	8000558 <__aeabi_f2d>
 8003d92:	4604      	mov	r4, r0
 8003d94:	460d      	mov	r5, r1
 8003d96:	4b3b      	ldr	r3, [pc, #236]	; (8003e84 <TrajectoryGenerator+0x9e4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fc fbdc 	bl	8000558 <__aeabi_f2d>
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	4b3f      	ldr	r3, [pc, #252]	; (8003ea4 <TrajectoryGenerator+0xa04>)
 8003da6:	f7fc fc2f 	bl	8000608 <__aeabi_dmul>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4690      	mov	r8, r2
 8003db0:	4699      	mov	r9, r3
 8003db2:	4b35      	ldr	r3, [pc, #212]	; (8003e88 <TrajectoryGenerator+0x9e8>)
 8003db4:	ed93 7a00 	vldr	s14, [r3]
 8003db8:	4b34      	ldr	r3, [pc, #208]	; (8003e8c <TrajectoryGenerator+0x9ec>)
 8003dba:	edd3 7a00 	vldr	s15, [r3]
 8003dbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dc2:	4b33      	ldr	r3, [pc, #204]	; (8003e90 <TrajectoryGenerator+0x9f0>)
 8003dc4:	edd3 7a00 	vldr	s15, [r3]
 8003dc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dcc:	4b31      	ldr	r3, [pc, #196]	; (8003e94 <TrajectoryGenerator+0x9f4>)
 8003dce:	edd3 7a00 	vldr	s15, [r3]
 8003dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dd6:	ee17 0a90 	vmov	r0, s15
 8003dda:	f7fc fbbd 	bl	8000558 <__aeabi_f2d>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4640      	mov	r0, r8
 8003de4:	4649      	mov	r1, r9
 8003de6:	f7fc fc0f 	bl	8000608 <__aeabi_dmul>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4690      	mov	r8, r2
 8003df0:	4699      	mov	r9, r3
 8003df2:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <TrajectoryGenerator+0x9e8>)
 8003df4:	ed93 7a00 	vldr	s14, [r3]
 8003df8:	4b24      	ldr	r3, [pc, #144]	; (8003e8c <TrajectoryGenerator+0x9ec>)
 8003dfa:	edd3 7a00 	vldr	s15, [r3]
 8003dfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e02:	4b23      	ldr	r3, [pc, #140]	; (8003e90 <TrajectoryGenerator+0x9f0>)
 8003e04:	edd3 7a00 	vldr	s15, [r3]
 8003e08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e0c:	4b21      	ldr	r3, [pc, #132]	; (8003e94 <TrajectoryGenerator+0x9f4>)
 8003e0e:	edd3 7a00 	vldr	s15, [r3]
 8003e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e16:	ee17 0a90 	vmov	r0, s15
 8003e1a:	f7fc fb9d 	bl	8000558 <__aeabi_f2d>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4640      	mov	r0, r8
 8003e24:	4649      	mov	r1, r9
 8003e26:	f7fc fbef 	bl	8000608 <__aeabi_dmul>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4620      	mov	r0, r4
 8003e30:	4629      	mov	r1, r5
 8003e32:	f7fc fa33 	bl	800029c <__adddf3>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	f7fc fedb 	bl	8000bf8 <__aeabi_d2f>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4a18      	ldr	r2, [pc, #96]	; (8003ea8 <TrajectoryGenerator+0xa08>)
 8003e46:	6013      	str	r3, [r2, #0]
		 time += 0.001;
 8003e48:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <TrajectoryGenerator+0x9e8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fc fb83 	bl	8000558 <__aeabi_f2d>
 8003e52:	a309      	add	r3, pc, #36	; (adr r3, 8003e78 <TrajectoryGenerator+0x9d8>)
 8003e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e58:	f7fc fa20 	bl	800029c <__adddf3>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4610      	mov	r0, r2
 8003e62:	4619      	mov	r1, r3
 8003e64:	f7fc fec8 	bl	8000bf8 <__aeabi_d2f>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	4a07      	ldr	r2, [pc, #28]	; (8003e88 <TrajectoryGenerator+0x9e8>)
 8003e6c:	6013      	str	r3, [r2, #0]
	 break;
 8003e6e:	bf00      	nop
}
 8003e70:	bf00      	nop
 8003e72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e76:	bf00      	nop
 8003e78:	d2f1a9fc 	.word	0xd2f1a9fc
 8003e7c:	3f50624d 	.word	0x3f50624d
 8003e80:	20000210 	.word	0x20000210
 8003e84:	2000095c 	.word	0x2000095c
 8003e88:	200008f0 	.word	0x200008f0
 8003e8c:	20000900 	.word	0x20000900
 8003e90:	20000918 	.word	0x20000918
 8003e94:	20000924 	.word	0x20000924
 8003e98:	2000090c 	.word	0x2000090c
 8003e9c:	20000958 	.word	0x20000958
 8003ea0:	20000914 	.word	0x20000914
 8003ea4:	3fe00000 	.word	0x3fe00000
 8003ea8:	20000938 	.word	0x20000938

08003eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003eb0:	b672      	cpsid	i
}
 8003eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003eb4:	e7fe      	b.n	8003eb4 <Error_Handler+0x8>
	...

08003eb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	607b      	str	r3, [r7, #4]
 8003ec2:	4b10      	ldr	r3, [pc, #64]	; (8003f04 <HAL_MspInit+0x4c>)
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	4a0f      	ldr	r2, [pc, #60]	; (8003f04 <HAL_MspInit+0x4c>)
 8003ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8003ece:	4b0d      	ldr	r3, [pc, #52]	; (8003f04 <HAL_MspInit+0x4c>)
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed6:	607b      	str	r3, [r7, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eda:	2300      	movs	r3, #0
 8003edc:	603b      	str	r3, [r7, #0]
 8003ede:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <HAL_MspInit+0x4c>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	4a08      	ldr	r2, [pc, #32]	; (8003f04 <HAL_MspInit+0x4c>)
 8003ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eea:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <HAL_MspInit+0x4c>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003ef6:	2007      	movs	r0, #7
 8003ef8:	f001 f92c 	bl	8005154 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003efc:	bf00      	nop
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40023800 	.word	0x40023800

08003f08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08a      	sub	sp, #40	; 0x28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f10:	f107 0314 	add.w	r3, r7, #20
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a2f      	ldr	r2, [pc, #188]	; (8003fe4 <HAL_ADC_MspInit+0xdc>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d157      	bne.n	8003fda <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	4b2e      	ldr	r3, [pc, #184]	; (8003fe8 <HAL_ADC_MspInit+0xe0>)
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	4a2d      	ldr	r2, [pc, #180]	; (8003fe8 <HAL_ADC_MspInit+0xe0>)
 8003f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f38:	6453      	str	r3, [r2, #68]	; 0x44
 8003f3a:	4b2b      	ldr	r3, [pc, #172]	; (8003fe8 <HAL_ADC_MspInit+0xe0>)
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <HAL_ADC_MspInit+0xe0>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	4a26      	ldr	r2, [pc, #152]	; (8003fe8 <HAL_ADC_MspInit+0xe0>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	6313      	str	r3, [r2, #48]	; 0x30
 8003f56:	4b24      	ldr	r3, [pc, #144]	; (8003fe8 <HAL_ADC_MspInit+0xe0>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f62:	2303      	movs	r3, #3
 8003f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f66:	2303      	movs	r3, #3
 8003f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f6e:	f107 0314 	add.w	r3, r7, #20
 8003f72:	4619      	mov	r1, r3
 8003f74:	481d      	ldr	r0, [pc, #116]	; (8003fec <HAL_ADC_MspInit+0xe4>)
 8003f76:	f001 fd3d 	bl	80059f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003f7a:	4b1d      	ldr	r3, [pc, #116]	; (8003ff0 <HAL_ADC_MspInit+0xe8>)
 8003f7c:	4a1d      	ldr	r2, [pc, #116]	; (8003ff4 <HAL_ADC_MspInit+0xec>)
 8003f7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003f80:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <HAL_ADC_MspInit+0xe8>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f86:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <HAL_ADC_MspInit+0xe8>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f8c:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <HAL_ADC_MspInit+0xe8>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003f92:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <HAL_ADC_MspInit+0xe8>)
 8003f94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f9a:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <HAL_ADC_MspInit+0xe8>)
 8003f9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fa0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003fa2:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <HAL_ADC_MspInit+0xe8>)
 8003fa4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fa8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003faa:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <HAL_ADC_MspInit+0xe8>)
 8003fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fb0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <HAL_ADC_MspInit+0xe8>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fb8:	4b0d      	ldr	r3, [pc, #52]	; (8003ff0 <HAL_ADC_MspInit+0xe8>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003fbe:	480c      	ldr	r0, [pc, #48]	; (8003ff0 <HAL_ADC_MspInit+0xe8>)
 8003fc0:	f001 f90a 	bl	80051d8 <HAL_DMA_Init>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003fca:	f7ff ff6f 	bl	8003eac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a07      	ldr	r2, [pc, #28]	; (8003ff0 <HAL_ADC_MspInit+0xe8>)
 8003fd2:	639a      	str	r2, [r3, #56]	; 0x38
 8003fd4:	4a06      	ldr	r2, [pc, #24]	; (8003ff0 <HAL_ADC_MspInit+0xe8>)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003fda:	bf00      	nop
 8003fdc:	3728      	adds	r7, #40	; 0x28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40012000 	.word	0x40012000
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40020000 	.word	0x40020000
 8003ff0:	20000468 	.word	0x20000468
 8003ff4:	40026410 	.word	0x40026410

08003ff8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a12      	ldr	r2, [pc, #72]	; (8004050 <HAL_TIM_PWM_MspInit+0x58>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d11d      	bne.n	8004046 <HAL_TIM_PWM_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	4b11      	ldr	r3, [pc, #68]	; (8004054 <HAL_TIM_PWM_MspInit+0x5c>)
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	4a10      	ldr	r2, [pc, #64]	; (8004054 <HAL_TIM_PWM_MspInit+0x5c>)
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	6453      	str	r3, [r2, #68]	; 0x44
 800401a:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <HAL_TIM_PWM_MspInit+0x5c>)
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004026:	2200      	movs	r2, #0
 8004028:	2100      	movs	r1, #0
 800402a:	2018      	movs	r0, #24
 800402c:	f001 f89d 	bl	800516a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004030:	2018      	movs	r0, #24
 8004032:	f001 f8b6 	bl	80051a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004036:	2200      	movs	r2, #0
 8004038:	2100      	movs	r1, #0
 800403a:	201a      	movs	r0, #26
 800403c:	f001 f895 	bl	800516a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004040:	201a      	movs	r0, #26
 8004042:	f001 f8ae 	bl	80051a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40010000 	.word	0x40010000
 8004054:	40023800 	.word	0x40023800

08004058 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08a      	sub	sp, #40	; 0x28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004060:	f107 0314 	add.w	r3, r7, #20
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a19      	ldr	r2, [pc, #100]	; (80040dc <HAL_TIM_Encoder_MspInit+0x84>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d12b      	bne.n	80040d2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <HAL_TIM_Encoder_MspInit+0x88>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	4a17      	ldr	r2, [pc, #92]	; (80040e0 <HAL_TIM_Encoder_MspInit+0x88>)
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	6413      	str	r3, [r2, #64]	; 0x40
 800408a:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <HAL_TIM_Encoder_MspInit+0x88>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <HAL_TIM_Encoder_MspInit+0x88>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	4a10      	ldr	r2, [pc, #64]	; (80040e0 <HAL_TIM_Encoder_MspInit+0x88>)
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	6313      	str	r3, [r2, #48]	; 0x30
 80040a6:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <HAL_TIM_Encoder_MspInit+0x88>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040b2:	23c0      	movs	r3, #192	; 0xc0
 80040b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b6:	2302      	movs	r3, #2
 80040b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040be:	2300      	movs	r3, #0
 80040c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040c2:	2302      	movs	r3, #2
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c6:	f107 0314 	add.w	r3, r7, #20
 80040ca:	4619      	mov	r1, r3
 80040cc:	4805      	ldr	r0, [pc, #20]	; (80040e4 <HAL_TIM_Encoder_MspInit+0x8c>)
 80040ce:	f001 fc91 	bl	80059f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80040d2:	bf00      	nop
 80040d4:	3728      	adds	r7, #40	; 0x28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40020000 	.word	0x40020000

080040e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1c      	ldr	r2, [pc, #112]	; (8004168 <HAL_TIM_Base_MspInit+0x80>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d116      	bne.n	8004128 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	4b1b      	ldr	r3, [pc, #108]	; (800416c <HAL_TIM_Base_MspInit+0x84>)
 8004100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004102:	4a1a      	ldr	r2, [pc, #104]	; (800416c <HAL_TIM_Base_MspInit+0x84>)
 8004104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004108:	6453      	str	r3, [r2, #68]	; 0x44
 800410a:	4b18      	ldr	r3, [pc, #96]	; (800416c <HAL_TIM_Base_MspInit+0x84>)
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004116:	2200      	movs	r2, #0
 8004118:	2100      	movs	r1, #0
 800411a:	2018      	movs	r0, #24
 800411c:	f001 f825 	bl	800516a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004120:	2018      	movs	r0, #24
 8004122:	f001 f83e 	bl	80051a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004126:	e01a      	b.n	800415e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a10      	ldr	r2, [pc, #64]	; (8004170 <HAL_TIM_Base_MspInit+0x88>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d115      	bne.n	800415e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	4b0d      	ldr	r3, [pc, #52]	; (800416c <HAL_TIM_Base_MspInit+0x84>)
 8004138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413a:	4a0c      	ldr	r2, [pc, #48]	; (800416c <HAL_TIM_Base_MspInit+0x84>)
 800413c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004140:	6453      	str	r3, [r2, #68]	; 0x44
 8004142:	4b0a      	ldr	r3, [pc, #40]	; (800416c <HAL_TIM_Base_MspInit+0x84>)
 8004144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800414e:	2200      	movs	r2, #0
 8004150:	2100      	movs	r1, #0
 8004152:	201a      	movs	r0, #26
 8004154:	f001 f809 	bl	800516a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004158:	201a      	movs	r0, #26
 800415a:	f001 f822 	bl	80051a2 <HAL_NVIC_EnableIRQ>
}
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40014000 	.word	0x40014000
 800416c:	40023800 	.word	0x40023800
 8004170:	40014800 	.word	0x40014800

08004174 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800417c:	f107 030c 	add.w	r3, r7, #12
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	605a      	str	r2, [r3, #4]
 8004186:	609a      	str	r2, [r3, #8]
 8004188:	60da      	str	r2, [r3, #12]
 800418a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a12      	ldr	r2, [pc, #72]	; (80041dc <HAL_TIM_MspPostInit+0x68>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d11e      	bne.n	80041d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004196:	2300      	movs	r3, #0
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <HAL_TIM_MspPostInit+0x6c>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	4a10      	ldr	r2, [pc, #64]	; (80041e0 <HAL_TIM_MspPostInit+0x6c>)
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	6313      	str	r3, [r2, #48]	; 0x30
 80041a6:	4b0e      	ldr	r3, [pc, #56]	; (80041e0 <HAL_TIM_MspPostInit+0x6c>)
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	60bb      	str	r3, [r7, #8]
 80041b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80041b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b8:	2302      	movs	r3, #2
 80041ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80041c4:	2301      	movs	r3, #1
 80041c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c8:	f107 030c 	add.w	r3, r7, #12
 80041cc:	4619      	mov	r1, r3
 80041ce:	4805      	ldr	r0, [pc, #20]	; (80041e4 <HAL_TIM_MspPostInit+0x70>)
 80041d0:	f001 fc10 	bl	80059f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80041d4:	bf00      	nop
 80041d6:	3720      	adds	r7, #32
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40010000 	.word	0x40010000
 80041e0:	40023800 	.word	0x40023800
 80041e4:	40020000 	.word	0x40020000

080041e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08c      	sub	sp, #48	; 0x30
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f0:	f107 031c 	add.w	r3, r7, #28
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	609a      	str	r2, [r3, #8]
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a60      	ldr	r2, [pc, #384]	; (8004388 <HAL_UART_MspInit+0x1a0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d153      	bne.n	80042b2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800420a:	2300      	movs	r3, #0
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	4b5f      	ldr	r3, [pc, #380]	; (800438c <HAL_UART_MspInit+0x1a4>)
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	4a5e      	ldr	r2, [pc, #376]	; (800438c <HAL_UART_MspInit+0x1a4>)
 8004214:	f043 0310 	orr.w	r3, r3, #16
 8004218:	6453      	str	r3, [r2, #68]	; 0x44
 800421a:	4b5c      	ldr	r3, [pc, #368]	; (800438c <HAL_UART_MspInit+0x1a4>)
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	4b58      	ldr	r3, [pc, #352]	; (800438c <HAL_UART_MspInit+0x1a4>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	4a57      	ldr	r2, [pc, #348]	; (800438c <HAL_UART_MspInit+0x1a4>)
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	6313      	str	r3, [r2, #48]	; 0x30
 8004236:	4b55      	ldr	r3, [pc, #340]	; (800438c <HAL_UART_MspInit+0x1a4>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	4b51      	ldr	r3, [pc, #324]	; (800438c <HAL_UART_MspInit+0x1a4>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	4a50      	ldr	r2, [pc, #320]	; (800438c <HAL_UART_MspInit+0x1a4>)
 800424c:	f043 0302 	orr.w	r3, r3, #2
 8004250:	6313      	str	r3, [r2, #48]	; 0x30
 8004252:	4b4e      	ldr	r3, [pc, #312]	; (800438c <HAL_UART_MspInit+0x1a4>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800425e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004264:	2302      	movs	r3, #2
 8004266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004268:	2300      	movs	r3, #0
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800426c:	2303      	movs	r3, #3
 800426e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004270:	2307      	movs	r3, #7
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004274:	f107 031c 	add.w	r3, r7, #28
 8004278:	4619      	mov	r1, r3
 800427a:	4845      	ldr	r0, [pc, #276]	; (8004390 <HAL_UART_MspInit+0x1a8>)
 800427c:	f001 fbba 	bl	80059f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004280:	2380      	movs	r3, #128	; 0x80
 8004282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004284:	2302      	movs	r3, #2
 8004286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004288:	2300      	movs	r3, #0
 800428a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800428c:	2303      	movs	r3, #3
 800428e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004290:	2307      	movs	r3, #7
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004294:	f107 031c 	add.w	r3, r7, #28
 8004298:	4619      	mov	r1, r3
 800429a:	483e      	ldr	r0, [pc, #248]	; (8004394 <HAL_UART_MspInit+0x1ac>)
 800429c:	f001 fbaa 	bl	80059f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80042a0:	2200      	movs	r2, #0
 80042a2:	2100      	movs	r1, #0
 80042a4:	2025      	movs	r0, #37	; 0x25
 80042a6:	f000 ff60 	bl	800516a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80042aa:	2025      	movs	r0, #37	; 0x25
 80042ac:	f000 ff79 	bl	80051a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80042b0:	e066      	b.n	8004380 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART2)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a38      	ldr	r2, [pc, #224]	; (8004398 <HAL_UART_MspInit+0x1b0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d161      	bne.n	8004380 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	4b32      	ldr	r3, [pc, #200]	; (800438c <HAL_UART_MspInit+0x1a4>)
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	4a31      	ldr	r2, [pc, #196]	; (800438c <HAL_UART_MspInit+0x1a4>)
 80042c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ca:	6413      	str	r3, [r2, #64]	; 0x40
 80042cc:	4b2f      	ldr	r3, [pc, #188]	; (800438c <HAL_UART_MspInit+0x1a4>)
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d8:	2300      	movs	r3, #0
 80042da:	60bb      	str	r3, [r7, #8]
 80042dc:	4b2b      	ldr	r3, [pc, #172]	; (800438c <HAL_UART_MspInit+0x1a4>)
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	4a2a      	ldr	r2, [pc, #168]	; (800438c <HAL_UART_MspInit+0x1a4>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6313      	str	r3, [r2, #48]	; 0x30
 80042e8:	4b28      	ldr	r3, [pc, #160]	; (800438c <HAL_UART_MspInit+0x1a4>)
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80042f4:	230c      	movs	r3, #12
 80042f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f8:	2302      	movs	r3, #2
 80042fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004300:	2303      	movs	r3, #3
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004304:	2307      	movs	r3, #7
 8004306:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004308:	f107 031c 	add.w	r3, r7, #28
 800430c:	4619      	mov	r1, r3
 800430e:	4820      	ldr	r0, [pc, #128]	; (8004390 <HAL_UART_MspInit+0x1a8>)
 8004310:	f001 fb70 	bl	80059f4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004314:	4b21      	ldr	r3, [pc, #132]	; (800439c <HAL_UART_MspInit+0x1b4>)
 8004316:	4a22      	ldr	r2, [pc, #136]	; (80043a0 <HAL_UART_MspInit+0x1b8>)
 8004318:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800431a:	4b20      	ldr	r3, [pc, #128]	; (800439c <HAL_UART_MspInit+0x1b4>)
 800431c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004320:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004322:	4b1e      	ldr	r3, [pc, #120]	; (800439c <HAL_UART_MspInit+0x1b4>)
 8004324:	2240      	movs	r2, #64	; 0x40
 8004326:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004328:	4b1c      	ldr	r3, [pc, #112]	; (800439c <HAL_UART_MspInit+0x1b4>)
 800432a:	2200      	movs	r2, #0
 800432c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800432e:	4b1b      	ldr	r3, [pc, #108]	; (800439c <HAL_UART_MspInit+0x1b4>)
 8004330:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004334:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004336:	4b19      	ldr	r3, [pc, #100]	; (800439c <HAL_UART_MspInit+0x1b4>)
 8004338:	2200      	movs	r2, #0
 800433a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800433c:	4b17      	ldr	r3, [pc, #92]	; (800439c <HAL_UART_MspInit+0x1b4>)
 800433e:	2200      	movs	r2, #0
 8004340:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004342:	4b16      	ldr	r3, [pc, #88]	; (800439c <HAL_UART_MspInit+0x1b4>)
 8004344:	2200      	movs	r2, #0
 8004346:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004348:	4b14      	ldr	r3, [pc, #80]	; (800439c <HAL_UART_MspInit+0x1b4>)
 800434a:	2200      	movs	r2, #0
 800434c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800434e:	4b13      	ldr	r3, [pc, #76]	; (800439c <HAL_UART_MspInit+0x1b4>)
 8004350:	2200      	movs	r2, #0
 8004352:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004354:	4811      	ldr	r0, [pc, #68]	; (800439c <HAL_UART_MspInit+0x1b4>)
 8004356:	f000 ff3f 	bl	80051d8 <HAL_DMA_Init>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8004360:	f7ff fda4 	bl	8003eac <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a0d      	ldr	r2, [pc, #52]	; (800439c <HAL_UART_MspInit+0x1b4>)
 8004368:	635a      	str	r2, [r3, #52]	; 0x34
 800436a:	4a0c      	ldr	r2, [pc, #48]	; (800439c <HAL_UART_MspInit+0x1b4>)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004370:	2200      	movs	r2, #0
 8004372:	2100      	movs	r1, #0
 8004374:	2026      	movs	r0, #38	; 0x26
 8004376:	f000 fef8 	bl	800516a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800437a:	2026      	movs	r0, #38	; 0x26
 800437c:	f000 ff11 	bl	80051a2 <HAL_NVIC_EnableIRQ>
}
 8004380:	bf00      	nop
 8004382:	3730      	adds	r7, #48	; 0x30
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40011000 	.word	0x40011000
 800438c:	40023800 	.word	0x40023800
 8004390:	40020000 	.word	0x40020000
 8004394:	40020400 	.word	0x40020400
 8004398:	40004400 	.word	0x40004400
 800439c:	20000880 	.word	0x20000880
 80043a0:	400260a0 	.word	0x400260a0

080043a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043a8:	e7fe      	b.n	80043a8 <NMI_Handler+0x4>

080043aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043aa:	b480      	push	{r7}
 80043ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043ae:	e7fe      	b.n	80043ae <HardFault_Handler+0x4>

080043b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043b4:	e7fe      	b.n	80043b4 <MemManage_Handler+0x4>

080043b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043b6:	b480      	push	{r7}
 80043b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043ba:	e7fe      	b.n	80043ba <BusFault_Handler+0x4>

080043bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043c0:	e7fe      	b.n	80043c0 <UsageFault_Handler+0x4>

080043c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043c2:	b480      	push	{r7}
 80043c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043c6:	bf00      	nop
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043d4:	bf00      	nop
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043de:	b480      	push	{r7}
 80043e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043e2:	bf00      	nop
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043f0:	f000 f99a 	bl	8004728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043f4:	bf00      	nop
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80043fc:	4802      	ldr	r0, [pc, #8]	; (8004408 <DMA1_Stream6_IRQHandler+0x10>)
 80043fe:	f001 f883 	bl	8005508 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004402:	bf00      	nop
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000880 	.word	0x20000880

0800440c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004410:	4803      	ldr	r0, [pc, #12]	; (8004420 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8004412:	f002 fdd7 	bl	8006fc4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8004416:	4803      	ldr	r0, [pc, #12]	; (8004424 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8004418:	f002 fdd4 	bl	8006fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800441c:	bf00      	nop
 800441e:	bd80      	pop	{r7, pc}
 8004420:	200004c8 	.word	0x200004c8
 8004424:	20000630 	.word	0x20000630

08004428 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800442c:	4803      	ldr	r0, [pc, #12]	; (800443c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800442e:	f002 fdc9 	bl	8006fc4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004432:	4803      	ldr	r0, [pc, #12]	; (8004440 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004434:	f002 fdc6 	bl	8006fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004438:	bf00      	nop
 800443a:	bd80      	pop	{r7, pc}
 800443c:	200004c8 	.word	0x200004c8
 8004440:	200006e4 	.word	0x200006e4

08004444 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004448:	4802      	ldr	r0, [pc, #8]	; (8004454 <USART1_IRQHandler+0x10>)
 800444a:	f004 f909 	bl	8008660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800444e:	bf00      	nop
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000798 	.word	0x20000798

08004458 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800445c:	4802      	ldr	r0, [pc, #8]	; (8004468 <USART2_IRQHandler+0x10>)
 800445e:	f004 f8ff 	bl	8008660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004462:	bf00      	nop
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	2000080c 	.word	0x2000080c

0800446c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004470:	4802      	ldr	r0, [pc, #8]	; (800447c <DMA2_Stream0_IRQHandler+0x10>)
 8004472:	f001 f849 	bl	8005508 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004476:	bf00      	nop
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000468 	.word	0x20000468

08004480 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return 1;
 8004484:	2301      	movs	r3, #1
}
 8004486:	4618      	mov	r0, r3
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <_kill>:

int _kill(int pid, int sig)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800449a:	f005 f927 	bl	80096ec <__errno>
 800449e:	4603      	mov	r3, r0
 80044a0:	2216      	movs	r2, #22
 80044a2:	601a      	str	r2, [r3, #0]
  return -1;
 80044a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <_exit>:

void _exit (int status)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80044b8:	f04f 31ff 	mov.w	r1, #4294967295
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff ffe7 	bl	8004490 <_kill>
  while (1) {}    /* Make sure we hang here */
 80044c2:	e7fe      	b.n	80044c2 <_exit+0x12>

080044c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	e00a      	b.n	80044ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80044d6:	f3af 8000 	nop.w
 80044da:	4601      	mov	r1, r0
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	60ba      	str	r2, [r7, #8]
 80044e2:	b2ca      	uxtb	r2, r1
 80044e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	3301      	adds	r3, #1
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	dbf0      	blt.n	80044d6 <_read+0x12>
  }

  return len;
 80044f4:	687b      	ldr	r3, [r7, #4]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b086      	sub	sp, #24
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	e009      	b.n	8004524 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	60ba      	str	r2, [r7, #8]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	3301      	adds	r3, #1
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	429a      	cmp	r2, r3
 800452a:	dbf1      	blt.n	8004510 <_write+0x12>
  }
  return len;
 800452c:	687b      	ldr	r3, [r7, #4]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <_close>:

int _close(int file)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800453e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004542:	4618      	mov	r0, r3
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800455e:	605a      	str	r2, [r3, #4]
  return 0;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <_isatty>:

int _isatty(int file)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004576:	2301      	movs	r3, #1
}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045a8:	4a14      	ldr	r2, [pc, #80]	; (80045fc <_sbrk+0x5c>)
 80045aa:	4b15      	ldr	r3, [pc, #84]	; (8004600 <_sbrk+0x60>)
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045b4:	4b13      	ldr	r3, [pc, #76]	; (8004604 <_sbrk+0x64>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045bc:	4b11      	ldr	r3, [pc, #68]	; (8004604 <_sbrk+0x64>)
 80045be:	4a12      	ldr	r2, [pc, #72]	; (8004608 <_sbrk+0x68>)
 80045c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045c2:	4b10      	ldr	r3, [pc, #64]	; (8004604 <_sbrk+0x64>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4413      	add	r3, r2
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d207      	bcs.n	80045e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045d0:	f005 f88c 	bl	80096ec <__errno>
 80045d4:	4603      	mov	r3, r0
 80045d6:	220c      	movs	r2, #12
 80045d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045da:	f04f 33ff 	mov.w	r3, #4294967295
 80045de:	e009      	b.n	80045f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045e0:	4b08      	ldr	r3, [pc, #32]	; (8004604 <_sbrk+0x64>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045e6:	4b07      	ldr	r3, [pc, #28]	; (8004604 <_sbrk+0x64>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4413      	add	r3, r2
 80045ee:	4a05      	ldr	r2, [pc, #20]	; (8004604 <_sbrk+0x64>)
 80045f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045f2:	68fb      	ldr	r3, [r7, #12]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	20020000 	.word	0x20020000
 8004600:	00000400 	.word	0x00000400
 8004604:	20001054 	.word	0x20001054
 8004608:	20001070 	.word	0x20001070

0800460c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <SystemInit+0x20>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	4a05      	ldr	r2, [pc, #20]	; (800462c <SystemInit+0x20>)
 8004618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800461c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	e000ed00 	.word	0xe000ed00

08004630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8004630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004668 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004634:	480d      	ldr	r0, [pc, #52]	; (800466c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004636:	490e      	ldr	r1, [pc, #56]	; (8004670 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004638:	4a0e      	ldr	r2, [pc, #56]	; (8004674 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800463a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800463c:	e002      	b.n	8004644 <LoopCopyDataInit>

0800463e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800463e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004642:	3304      	adds	r3, #4

08004644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004648:	d3f9      	bcc.n	800463e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800464a:	4a0b      	ldr	r2, [pc, #44]	; (8004678 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800464c:	4c0b      	ldr	r4, [pc, #44]	; (800467c <LoopFillZerobss+0x26>)
  movs r3, #0
 800464e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004650:	e001      	b.n	8004656 <LoopFillZerobss>

08004652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004654:	3204      	adds	r2, #4

08004656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004658:	d3fb      	bcc.n	8004652 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800465a:	f7ff ffd7 	bl	800460c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800465e:	f005 f84b 	bl	80096f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004662:	f7fd f829 	bl	80016b8 <main>
  bx  lr    
 8004666:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 8004668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800466c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004670:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 8004674:	0800e7c4 	.word	0x0800e7c4
  ldr r2, =_sbss
 8004678:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 800467c:	2000106c 	.word	0x2000106c

08004680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004680:	e7fe      	b.n	8004680 <ADC_IRQHandler>
	...

08004684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004688:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <HAL_Init+0x40>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a0d      	ldr	r2, [pc, #52]	; (80046c4 <HAL_Init+0x40>)
 800468e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004694:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <HAL_Init+0x40>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a0a      	ldr	r2, [pc, #40]	; (80046c4 <HAL_Init+0x40>)
 800469a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800469e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046a0:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <HAL_Init+0x40>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a07      	ldr	r2, [pc, #28]	; (80046c4 <HAL_Init+0x40>)
 80046a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046ac:	2003      	movs	r0, #3
 80046ae:	f000 fd51 	bl	8005154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046b2:	2000      	movs	r0, #0
 80046b4:	f000 f808 	bl	80046c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046b8:	f7ff fbfe 	bl	8003eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023c00 	.word	0x40023c00

080046c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046d0:	4b12      	ldr	r3, [pc, #72]	; (800471c <HAL_InitTick+0x54>)
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4b12      	ldr	r3, [pc, #72]	; (8004720 <HAL_InitTick+0x58>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	4619      	mov	r1, r3
 80046da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046de:	fbb3 f3f1 	udiv	r3, r3, r1
 80046e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fd69 	bl	80051be <HAL_SYSTICK_Config>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e00e      	b.n	8004714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b0f      	cmp	r3, #15
 80046fa:	d80a      	bhi.n	8004712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046fc:	2200      	movs	r2, #0
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	f04f 30ff 	mov.w	r0, #4294967295
 8004704:	f000 fd31 	bl	800516a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004708:	4a06      	ldr	r2, [pc, #24]	; (8004724 <HAL_InitTick+0x5c>)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	e000      	b.n	8004714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000220 	.word	0x20000220
 8004720:	20000228 	.word	0x20000228
 8004724:	20000224 	.word	0x20000224

08004728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800472c:	4b06      	ldr	r3, [pc, #24]	; (8004748 <HAL_IncTick+0x20>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	4b06      	ldr	r3, [pc, #24]	; (800474c <HAL_IncTick+0x24>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4413      	add	r3, r2
 8004738:	4a04      	ldr	r2, [pc, #16]	; (800474c <HAL_IncTick+0x24>)
 800473a:	6013      	str	r3, [r2, #0]
}
 800473c:	bf00      	nop
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000228 	.word	0x20000228
 800474c:	20001058 	.word	0x20001058

08004750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  return uwTick;
 8004754:	4b03      	ldr	r3, [pc, #12]	; (8004764 <HAL_GetTick+0x14>)
 8004756:	681b      	ldr	r3, [r3, #0]
}
 8004758:	4618      	mov	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20001058 	.word	0x20001058

08004768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004770:	f7ff ffee 	bl	8004750 <HAL_GetTick>
 8004774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004780:	d005      	beq.n	800478e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004782:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <HAL_Delay+0x44>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800478e:	bf00      	nop
 8004790:	f7ff ffde 	bl	8004750 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	429a      	cmp	r2, r3
 800479e:	d8f7      	bhi.n	8004790 <HAL_Delay+0x28>
  {
  }
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20000228 	.word	0x20000228

080047b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e033      	b.n	800482e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d109      	bne.n	80047e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff fb9a 	bl	8003f08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	f003 0310 	and.w	r3, r3, #16
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d118      	bne.n	8004820 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80047f6:	f023 0302 	bic.w	r3, r3, #2
 80047fa:	f043 0202 	orr.w	r2, r3, #2
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fa58 	bl	8004cb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f023 0303 	bic.w	r3, r3, #3
 8004816:	f043 0201 	orr.w	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
 800481e:	e001      	b.n	8004824 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800482c:	7bfb      	ldrb	r3, [r7, #15]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <HAL_ADC_Start_DMA+0x1e>
 8004852:	2302      	movs	r3, #2
 8004854:	e0ce      	b.n	80049f4 <HAL_ADC_Start_DMA+0x1bc>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b01      	cmp	r3, #1
 800486a:	d018      	beq.n	800489e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800487c:	4b5f      	ldr	r3, [pc, #380]	; (80049fc <HAL_ADC_Start_DMA+0x1c4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a5f      	ldr	r2, [pc, #380]	; (8004a00 <HAL_ADC_Start_DMA+0x1c8>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	0c9a      	lsrs	r2, r3, #18
 8004888:	4613      	mov	r3, r2
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	4413      	add	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004890:	e002      	b.n	8004898 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	3b01      	subs	r3, #1
 8004896:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f9      	bne.n	8004892 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ac:	d107      	bne.n	80048be <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	f040 8086 	bne.w	80049da <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80048d6:	f023 0301 	bic.w	r3, r3, #1
 80048da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d007      	beq.n	8004900 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80048f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490c:	d106      	bne.n	800491c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004912:	f023 0206 	bic.w	r2, r3, #6
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	645a      	str	r2, [r3, #68]	; 0x44
 800491a:	e002      	b.n	8004922 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800492a:	4b36      	ldr	r3, [pc, #216]	; (8004a04 <HAL_ADC_Start_DMA+0x1cc>)
 800492c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	4a35      	ldr	r2, [pc, #212]	; (8004a08 <HAL_ADC_Start_DMA+0x1d0>)
 8004934:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	4a34      	ldr	r2, [pc, #208]	; (8004a0c <HAL_ADC_Start_DMA+0x1d4>)
 800493c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004942:	4a33      	ldr	r2, [pc, #204]	; (8004a10 <HAL_ADC_Start_DMA+0x1d8>)
 8004944:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800494e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800495e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800496e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	334c      	adds	r3, #76	; 0x4c
 800497a:	4619      	mov	r1, r3
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f000 fcd8 	bl	8005334 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10f      	bne.n	80049b0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d129      	bne.n	80049f2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80049ac:	609a      	str	r2, [r3, #8]
 80049ae:	e020      	b.n	80049f2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a17      	ldr	r2, [pc, #92]	; (8004a14 <HAL_ADC_Start_DMA+0x1dc>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d11b      	bne.n	80049f2 <HAL_ADC_Start_DMA+0x1ba>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d114      	bne.n	80049f2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80049d6:	609a      	str	r2, [r3, #8]
 80049d8:	e00b      	b.n	80049f2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f043 0210 	orr.w	r2, r3, #16
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	f043 0201 	orr.w	r2, r3, #1
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20000220 	.word	0x20000220
 8004a00:	431bde83 	.word	0x431bde83
 8004a04:	40012300 	.word	0x40012300
 8004a08:	08004eb1 	.word	0x08004eb1
 8004a0c:	08004f6b 	.word	0x08004f6b
 8004a10:	08004f87 	.word	0x08004f87
 8004a14:	40012000 	.word	0x40012000

08004a18 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x1c>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e113      	b.n	8004c98 <HAL_ADC_ConfigChannel+0x244>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b09      	cmp	r3, #9
 8004a7e:	d925      	bls.n	8004acc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68d9      	ldr	r1, [r3, #12]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	4613      	mov	r3, r2
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	4413      	add	r3, r2
 8004a94:	3b1e      	subs	r3, #30
 8004a96:	2207      	movs	r2, #7
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	43da      	mvns	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	400a      	ands	r2, r1
 8004aa4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68d9      	ldr	r1, [r3, #12]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	4603      	mov	r3, r0
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	4403      	add	r3, r0
 8004abe:	3b1e      	subs	r3, #30
 8004ac0:	409a      	lsls	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	60da      	str	r2, [r3, #12]
 8004aca:	e022      	b.n	8004b12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6919      	ldr	r1, [r3, #16]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4613      	mov	r3, r2
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	4413      	add	r3, r2
 8004ae0:	2207      	movs	r2, #7
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43da      	mvns	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	400a      	ands	r2, r1
 8004aee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6919      	ldr	r1, [r3, #16]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	4618      	mov	r0, r3
 8004b02:	4603      	mov	r3, r0
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	4403      	add	r3, r0
 8004b08:	409a      	lsls	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b06      	cmp	r3, #6
 8004b18:	d824      	bhi.n	8004b64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	3b05      	subs	r3, #5
 8004b2c:	221f      	movs	r2, #31
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	43da      	mvns	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	400a      	ands	r2, r1
 8004b3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	4618      	mov	r0, r3
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	3b05      	subs	r3, #5
 8004b56:	fa00 f203 	lsl.w	r2, r0, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	635a      	str	r2, [r3, #52]	; 0x34
 8004b62:	e04c      	b.n	8004bfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b0c      	cmp	r3, #12
 8004b6a:	d824      	bhi.n	8004bb6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	3b23      	subs	r3, #35	; 0x23
 8004b7e:	221f      	movs	r2, #31
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	43da      	mvns	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	400a      	ands	r2, r1
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	3b23      	subs	r3, #35	; 0x23
 8004ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8004bb4:	e023      	b.n	8004bfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3b41      	subs	r3, #65	; 0x41
 8004bc8:	221f      	movs	r2, #31
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	43da      	mvns	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	400a      	ands	r2, r1
 8004bd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	4618      	mov	r0, r3
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	3b41      	subs	r3, #65	; 0x41
 8004bf2:	fa00 f203 	lsl.w	r2, r0, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bfe:	4b29      	ldr	r3, [pc, #164]	; (8004ca4 <HAL_ADC_ConfigChannel+0x250>)
 8004c00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a28      	ldr	r2, [pc, #160]	; (8004ca8 <HAL_ADC_ConfigChannel+0x254>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d10f      	bne.n	8004c2c <HAL_ADC_ConfigChannel+0x1d8>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b12      	cmp	r3, #18
 8004c12:	d10b      	bne.n	8004c2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a1d      	ldr	r2, [pc, #116]	; (8004ca8 <HAL_ADC_ConfigChannel+0x254>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d12b      	bne.n	8004c8e <HAL_ADC_ConfigChannel+0x23a>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a1c      	ldr	r2, [pc, #112]	; (8004cac <HAL_ADC_ConfigChannel+0x258>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <HAL_ADC_ConfigChannel+0x1f4>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b11      	cmp	r3, #17
 8004c46:	d122      	bne.n	8004c8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a11      	ldr	r2, [pc, #68]	; (8004cac <HAL_ADC_ConfigChannel+0x258>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d111      	bne.n	8004c8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c6a:	4b11      	ldr	r3, [pc, #68]	; (8004cb0 <HAL_ADC_ConfigChannel+0x25c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a11      	ldr	r2, [pc, #68]	; (8004cb4 <HAL_ADC_ConfigChannel+0x260>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	0c9a      	lsrs	r2, r3, #18
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004c80:	e002      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f9      	bne.n	8004c82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	40012300 	.word	0x40012300
 8004ca8:	40012000 	.word	0x40012000
 8004cac:	10000012 	.word	0x10000012
 8004cb0:	20000220 	.word	0x20000220
 8004cb4:	431bde83 	.word	0x431bde83

08004cb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cc0:	4b79      	ldr	r3, [pc, #484]	; (8004ea8 <ADC_Init+0x1f0>)
 8004cc2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6859      	ldr	r1, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	021a      	lsls	r2, r3, #8
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004d10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6859      	ldr	r1, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6899      	ldr	r1, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4a:	4a58      	ldr	r2, [pc, #352]	; (8004eac <ADC_Init+0x1f4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d022      	beq.n	8004d96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6899      	ldr	r1, [r3, #8]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6899      	ldr	r1, [r3, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	609a      	str	r2, [r3, #8]
 8004d94:	e00f      	b.n	8004db6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004da4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004db4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0202 	bic.w	r2, r2, #2
 8004dc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6899      	ldr	r1, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	7e1b      	ldrb	r3, [r3, #24]
 8004dd0:	005a      	lsls	r2, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01b      	beq.n	8004e1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004df2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004e02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6859      	ldr	r1, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	035a      	lsls	r2, r3, #13
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	e007      	b.n	8004e2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	051a      	lsls	r2, r3, #20
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6899      	ldr	r1, [r3, #8]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e6e:	025a      	lsls	r2, r3, #9
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6899      	ldr	r1, [r3, #8]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	029a      	lsls	r2, r3, #10
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	609a      	str	r2, [r3, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	40012300 	.word	0x40012300
 8004eac:	0f000001 	.word	0x0f000001

08004eb0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d13c      	bne.n	8004f44 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d12b      	bne.n	8004f3c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d127      	bne.n	8004f3c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d006      	beq.n	8004f08 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d119      	bne.n	8004f3c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0220 	bic.w	r2, r2, #32
 8004f16:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d105      	bne.n	8004f3c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	f043 0201 	orr.w	r2, r3, #1
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f7ff fd6b 	bl	8004a18 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f42:	e00e      	b.n	8004f62 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f7ff fd75 	bl	8004a40 <HAL_ADC_ErrorCallback>
}
 8004f56:	e004      	b.n	8004f62 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	4798      	blx	r3
}
 8004f62:	bf00      	nop
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f7ff fd57 	bl	8004a2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f7e:	bf00      	nop
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2240      	movs	r2, #64	; 0x40
 8004f98:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9e:	f043 0204 	orr.w	r2, r3, #4
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f7ff fd4a 	bl	8004a40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fac:	bf00      	nop
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fc4:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fe6:	4a04      	ldr	r2, [pc, #16]	; (8004ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	60d3      	str	r3, [r2, #12]
}
 8004fec:	bf00      	nop
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	e000ed00 	.word	0xe000ed00

08004ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005000:	4b04      	ldr	r3, [pc, #16]	; (8005014 <__NVIC_GetPriorityGrouping+0x18>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	0a1b      	lsrs	r3, r3, #8
 8005006:	f003 0307 	and.w	r3, r3, #7
}
 800500a:	4618      	mov	r0, r3
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	e000ed00 	.word	0xe000ed00

08005018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	4603      	mov	r3, r0
 8005020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005026:	2b00      	cmp	r3, #0
 8005028:	db0b      	blt.n	8005042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800502a:	79fb      	ldrb	r3, [r7, #7]
 800502c:	f003 021f 	and.w	r2, r3, #31
 8005030:	4907      	ldr	r1, [pc, #28]	; (8005050 <__NVIC_EnableIRQ+0x38>)
 8005032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	2001      	movs	r0, #1
 800503a:	fa00 f202 	lsl.w	r2, r0, r2
 800503e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	e000e100 	.word	0xe000e100

08005054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	6039      	str	r1, [r7, #0]
 800505e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005064:	2b00      	cmp	r3, #0
 8005066:	db0a      	blt.n	800507e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	b2da      	uxtb	r2, r3
 800506c:	490c      	ldr	r1, [pc, #48]	; (80050a0 <__NVIC_SetPriority+0x4c>)
 800506e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005072:	0112      	lsls	r2, r2, #4
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	440b      	add	r3, r1
 8005078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800507c:	e00a      	b.n	8005094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	b2da      	uxtb	r2, r3
 8005082:	4908      	ldr	r1, [pc, #32]	; (80050a4 <__NVIC_SetPriority+0x50>)
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	3b04      	subs	r3, #4
 800508c:	0112      	lsls	r2, r2, #4
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	440b      	add	r3, r1
 8005092:	761a      	strb	r2, [r3, #24]
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	e000e100 	.word	0xe000e100
 80050a4:	e000ed00 	.word	0xe000ed00

080050a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b089      	sub	sp, #36	; 0x24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f1c3 0307 	rsb	r3, r3, #7
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	bf28      	it	cs
 80050c6:	2304      	movcs	r3, #4
 80050c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	3304      	adds	r3, #4
 80050ce:	2b06      	cmp	r3, #6
 80050d0:	d902      	bls.n	80050d8 <NVIC_EncodePriority+0x30>
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	3b03      	subs	r3, #3
 80050d6:	e000      	b.n	80050da <NVIC_EncodePriority+0x32>
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050dc:	f04f 32ff 	mov.w	r2, #4294967295
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	43da      	mvns	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	401a      	ands	r2, r3
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050f0:	f04f 31ff 	mov.w	r1, #4294967295
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	fa01 f303 	lsl.w	r3, r1, r3
 80050fa:	43d9      	mvns	r1, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005100:	4313      	orrs	r3, r2
         );
}
 8005102:	4618      	mov	r0, r3
 8005104:	3724      	adds	r7, #36	; 0x24
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3b01      	subs	r3, #1
 800511c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005120:	d301      	bcc.n	8005126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005122:	2301      	movs	r3, #1
 8005124:	e00f      	b.n	8005146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005126:	4a0a      	ldr	r2, [pc, #40]	; (8005150 <SysTick_Config+0x40>)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3b01      	subs	r3, #1
 800512c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800512e:	210f      	movs	r1, #15
 8005130:	f04f 30ff 	mov.w	r0, #4294967295
 8005134:	f7ff ff8e 	bl	8005054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <SysTick_Config+0x40>)
 800513a:	2200      	movs	r2, #0
 800513c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800513e:	4b04      	ldr	r3, [pc, #16]	; (8005150 <SysTick_Config+0x40>)
 8005140:	2207      	movs	r2, #7
 8005142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	e000e010 	.word	0xe000e010

08005154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff ff29 	bl	8004fb4 <__NVIC_SetPriorityGrouping>
}
 8005162:	bf00      	nop
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800516a:	b580      	push	{r7, lr}
 800516c:	b086      	sub	sp, #24
 800516e:	af00      	add	r7, sp, #0
 8005170:	4603      	mov	r3, r0
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
 8005176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005178:	2300      	movs	r3, #0
 800517a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800517c:	f7ff ff3e 	bl	8004ffc <__NVIC_GetPriorityGrouping>
 8005180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	68b9      	ldr	r1, [r7, #8]
 8005186:	6978      	ldr	r0, [r7, #20]
 8005188:	f7ff ff8e 	bl	80050a8 <NVIC_EncodePriority>
 800518c:	4602      	mov	r2, r0
 800518e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005192:	4611      	mov	r1, r2
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff ff5d 	bl	8005054 <__NVIC_SetPriority>
}
 800519a:	bf00      	nop
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	4603      	mov	r3, r0
 80051aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7ff ff31 	bl	8005018 <__NVIC_EnableIRQ>
}
 80051b6:	bf00      	nop
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff ffa2 	bl	8005110 <SysTick_Config>
 80051cc:	4603      	mov	r3, r0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
	...

080051d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80051e4:	f7ff fab4 	bl	8004750 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e099      	b.n	8005328 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0201 	bic.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005214:	e00f      	b.n	8005236 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005216:	f7ff fa9b 	bl	8004750 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b05      	cmp	r3, #5
 8005222:	d908      	bls.n	8005236 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2203      	movs	r2, #3
 800522e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e078      	b.n	8005328 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e8      	bne.n	8005216 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4b38      	ldr	r3, [pc, #224]	; (8005330 <HAL_DMA_Init+0x158>)
 8005250:	4013      	ands	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005262:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800526e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800527a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	2b04      	cmp	r3, #4
 800528e:	d107      	bne.n	80052a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	4313      	orrs	r3, r2
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f023 0307 	bic.w	r3, r3, #7
 80052b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d117      	bne.n	80052fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00e      	beq.n	80052fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fb0d 	bl	80058fc <DMA_CheckFifoParam>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2240      	movs	r2, #64	; 0x40
 80052ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80052f6:	2301      	movs	r3, #1
 80052f8:	e016      	b.n	8005328 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fac4 	bl	8005890 <DMA_CalcBaseAndBitshift>
 8005308:	4603      	mov	r3, r0
 800530a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005310:	223f      	movs	r2, #63	; 0x3f
 8005312:	409a      	lsls	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	f010803f 	.word	0xf010803f

08005334 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <HAL_DMA_Start_IT+0x26>
 8005356:	2302      	movs	r3, #2
 8005358:	e040      	b.n	80053dc <HAL_DMA_Start_IT+0xa8>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b01      	cmp	r3, #1
 800536c:	d12f      	bne.n	80053ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2202      	movs	r2, #2
 8005372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 fa56 	bl	8005834 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800538c:	223f      	movs	r2, #63	; 0x3f
 800538e:	409a      	lsls	r2, r3
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0216 	orr.w	r2, r2, #22
 80053a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0208 	orr.w	r2, r2, #8
 80053ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	e005      	b.n	80053da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80053d6:	2302      	movs	r3, #2
 80053d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80053da:	7dfb      	ldrb	r3, [r7, #23]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80053f2:	f7ff f9ad 	bl	8004750 <HAL_GetTick>
 80053f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d008      	beq.n	8005416 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2280      	movs	r2, #128	; 0x80
 8005408:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e052      	b.n	80054bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0216 	bic.w	r2, r2, #22
 8005424:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695a      	ldr	r2, [r3, #20]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005434:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d103      	bne.n	8005446 <HAL_DMA_Abort+0x62>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0208 	bic.w	r2, r2, #8
 8005454:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0201 	bic.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005466:	e013      	b.n	8005490 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005468:	f7ff f972 	bl	8004750 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b05      	cmp	r3, #5
 8005474:	d90c      	bls.n	8005490 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2203      	movs	r2, #3
 8005480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e015      	b.n	80054bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e4      	bne.n	8005468 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a2:	223f      	movs	r2, #63	; 0x3f
 80054a4:	409a      	lsls	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d004      	beq.n	80054e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2280      	movs	r2, #128	; 0x80
 80054dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e00c      	b.n	80054fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2205      	movs	r2, #5
 80054e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0201 	bic.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005514:	4b8e      	ldr	r3, [pc, #568]	; (8005750 <HAL_DMA_IRQHandler+0x248>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a8e      	ldr	r2, [pc, #568]	; (8005754 <HAL_DMA_IRQHandler+0x24c>)
 800551a:	fba2 2303 	umull	r2, r3, r2, r3
 800551e:	0a9b      	lsrs	r3, r3, #10
 8005520:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005526:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005532:	2208      	movs	r2, #8
 8005534:	409a      	lsls	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4013      	ands	r3, r2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d01a      	beq.n	8005574 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d013      	beq.n	8005574 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0204 	bic.w	r2, r2, #4
 800555a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005560:	2208      	movs	r2, #8
 8005562:	409a      	lsls	r2, r3
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556c:	f043 0201 	orr.w	r2, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005578:	2201      	movs	r2, #1
 800557a:	409a      	lsls	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4013      	ands	r3, r2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d012      	beq.n	80055aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00b      	beq.n	80055aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005596:	2201      	movs	r2, #1
 8005598:	409a      	lsls	r2, r3
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a2:	f043 0202 	orr.w	r2, r3, #2
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ae:	2204      	movs	r2, #4
 80055b0:	409a      	lsls	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4013      	ands	r3, r2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d012      	beq.n	80055e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00b      	beq.n	80055e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055cc:	2204      	movs	r2, #4
 80055ce:	409a      	lsls	r2, r3
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d8:	f043 0204 	orr.w	r2, r3, #4
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e4:	2210      	movs	r2, #16
 80055e6:	409a      	lsls	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d043      	beq.n	8005678 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d03c      	beq.n	8005678 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005602:	2210      	movs	r2, #16
 8005604:	409a      	lsls	r2, r3
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d018      	beq.n	800564a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d108      	bne.n	8005638 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	2b00      	cmp	r3, #0
 800562c:	d024      	beq.n	8005678 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	4798      	blx	r3
 8005636:	e01f      	b.n	8005678 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01b      	beq.n	8005678 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	4798      	blx	r3
 8005648:	e016      	b.n	8005678 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005654:	2b00      	cmp	r3, #0
 8005656:	d107      	bne.n	8005668 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0208 	bic.w	r2, r2, #8
 8005666:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800567c:	2220      	movs	r2, #32
 800567e:	409a      	lsls	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4013      	ands	r3, r2
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 808f 	beq.w	80057a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 8087 	beq.w	80057a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569e:	2220      	movs	r2, #32
 80056a0:	409a      	lsls	r2, r3
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b05      	cmp	r3, #5
 80056b0:	d136      	bne.n	8005720 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0216 	bic.w	r2, r2, #22
 80056c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695a      	ldr	r2, [r3, #20]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d103      	bne.n	80056e2 <HAL_DMA_IRQHandler+0x1da>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d007      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0208 	bic.w	r2, r2, #8
 80056f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f6:	223f      	movs	r2, #63	; 0x3f
 80056f8:	409a      	lsls	r2, r3
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005712:	2b00      	cmp	r3, #0
 8005714:	d07e      	beq.n	8005814 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	4798      	blx	r3
        }
        return;
 800571e:	e079      	b.n	8005814 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01d      	beq.n	800576a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10d      	bne.n	8005758 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005740:	2b00      	cmp	r3, #0
 8005742:	d031      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	4798      	blx	r3
 800574c:	e02c      	b.n	80057a8 <HAL_DMA_IRQHandler+0x2a0>
 800574e:	bf00      	nop
 8005750:	20000220 	.word	0x20000220
 8005754:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575c:	2b00      	cmp	r3, #0
 800575e:	d023      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	4798      	blx	r3
 8005768:	e01e      	b.n	80057a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10f      	bne.n	8005798 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0210 	bic.w	r2, r2, #16
 8005786:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d032      	beq.n	8005816 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d022      	beq.n	8005802 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2205      	movs	r2, #5
 80057c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 0201 	bic.w	r2, r2, #1
 80057d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	3301      	adds	r3, #1
 80057d8:	60bb      	str	r3, [r7, #8]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d307      	bcc.n	80057f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f2      	bne.n	80057d4 <HAL_DMA_IRQHandler+0x2cc>
 80057ee:	e000      	b.n	80057f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80057f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005806:	2b00      	cmp	r3, #0
 8005808:	d005      	beq.n	8005816 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	4798      	blx	r3
 8005812:	e000      	b.n	8005816 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005814:	bf00      	nop
    }
  }
}
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005828:	4618      	mov	r0, r3
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005850:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b40      	cmp	r3, #64	; 0x40
 8005860:	d108      	bne.n	8005874 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005872:	e007      	b.n	8005884 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	60da      	str	r2, [r3, #12]
}
 8005884:	bf00      	nop
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	3b10      	subs	r3, #16
 80058a0:	4a14      	ldr	r2, [pc, #80]	; (80058f4 <DMA_CalcBaseAndBitshift+0x64>)
 80058a2:	fba2 2303 	umull	r2, r3, r2, r3
 80058a6:	091b      	lsrs	r3, r3, #4
 80058a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80058aa:	4a13      	ldr	r2, [pc, #76]	; (80058f8 <DMA_CalcBaseAndBitshift+0x68>)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d909      	bls.n	80058d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80058c6:	f023 0303 	bic.w	r3, r3, #3
 80058ca:	1d1a      	adds	r2, r3, #4
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	659a      	str	r2, [r3, #88]	; 0x58
 80058d0:	e007      	b.n	80058e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80058da:	f023 0303 	bic.w	r3, r3, #3
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	aaaaaaab 	.word	0xaaaaaaab
 80058f8:	0800e304 	.word	0x0800e304

080058fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d11f      	bne.n	8005956 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2b03      	cmp	r3, #3
 800591a:	d856      	bhi.n	80059ca <DMA_CheckFifoParam+0xce>
 800591c:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <DMA_CheckFifoParam+0x28>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	08005935 	.word	0x08005935
 8005928:	08005947 	.word	0x08005947
 800592c:	08005935 	.word	0x08005935
 8005930:	080059cb 	.word	0x080059cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d046      	beq.n	80059ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005944:	e043      	b.n	80059ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800594e:	d140      	bne.n	80059d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005954:	e03d      	b.n	80059d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800595e:	d121      	bne.n	80059a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b03      	cmp	r3, #3
 8005964:	d837      	bhi.n	80059d6 <DMA_CheckFifoParam+0xda>
 8005966:	a201      	add	r2, pc, #4	; (adr r2, 800596c <DMA_CheckFifoParam+0x70>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	0800597d 	.word	0x0800597d
 8005970:	08005983 	.word	0x08005983
 8005974:	0800597d 	.word	0x0800597d
 8005978:	08005995 	.word	0x08005995
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	73fb      	strb	r3, [r7, #15]
      break;
 8005980:	e030      	b.n	80059e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d025      	beq.n	80059da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005992:	e022      	b.n	80059da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800599c:	d11f      	bne.n	80059de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80059a2:	e01c      	b.n	80059de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d903      	bls.n	80059b2 <DMA_CheckFifoParam+0xb6>
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d003      	beq.n	80059b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80059b0:	e018      	b.n	80059e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	73fb      	strb	r3, [r7, #15]
      break;
 80059b6:	e015      	b.n	80059e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00e      	beq.n	80059e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	73fb      	strb	r3, [r7, #15]
      break;
 80059c8:	e00b      	b.n	80059e2 <DMA_CheckFifoParam+0xe6>
      break;
 80059ca:	bf00      	nop
 80059cc:	e00a      	b.n	80059e4 <DMA_CheckFifoParam+0xe8>
      break;
 80059ce:	bf00      	nop
 80059d0:	e008      	b.n	80059e4 <DMA_CheckFifoParam+0xe8>
      break;
 80059d2:	bf00      	nop
 80059d4:	e006      	b.n	80059e4 <DMA_CheckFifoParam+0xe8>
      break;
 80059d6:	bf00      	nop
 80059d8:	e004      	b.n	80059e4 <DMA_CheckFifoParam+0xe8>
      break;
 80059da:	bf00      	nop
 80059dc:	e002      	b.n	80059e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80059de:	bf00      	nop
 80059e0:	e000      	b.n	80059e4 <DMA_CheckFifoParam+0xe8>
      break;
 80059e2:	bf00      	nop
    }
  } 
  
  return status; 
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop

080059f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b089      	sub	sp, #36	; 0x24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61fb      	str	r3, [r7, #28]
 8005a0e:	e159      	b.n	8005cc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a10:	2201      	movs	r2, #1
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4013      	ands	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	f040 8148 	bne.w	8005cbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d005      	beq.n	8005a46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d130      	bne.n	8005aa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	2203      	movs	r2, #3
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	43db      	mvns	r3, r3
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	43db      	mvns	r3, r3
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	4013      	ands	r3, r2
 8005a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	091b      	lsrs	r3, r3, #4
 8005a92:	f003 0201 	and.w	r2, r3, #1
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f003 0303 	and.w	r3, r3, #3
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d017      	beq.n	8005ae4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	2203      	movs	r2, #3
 8005ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f003 0303 	and.w	r3, r3, #3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d123      	bne.n	8005b38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	08da      	lsrs	r2, r3, #3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3208      	adds	r2, #8
 8005af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	220f      	movs	r2, #15
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	4013      	ands	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	691a      	ldr	r2, [r3, #16]
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	08da      	lsrs	r2, r3, #3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3208      	adds	r2, #8
 8005b32:	69b9      	ldr	r1, [r7, #24]
 8005b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	2203      	movs	r2, #3
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f003 0203 	and.w	r2, r3, #3
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 80a2 	beq.w	8005cbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	4b57      	ldr	r3, [pc, #348]	; (8005cdc <HAL_GPIO_Init+0x2e8>)
 8005b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b82:	4a56      	ldr	r2, [pc, #344]	; (8005cdc <HAL_GPIO_Init+0x2e8>)
 8005b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b88:	6453      	str	r3, [r2, #68]	; 0x44
 8005b8a:	4b54      	ldr	r3, [pc, #336]	; (8005cdc <HAL_GPIO_Init+0x2e8>)
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b96:	4a52      	ldr	r2, [pc, #328]	; (8005ce0 <HAL_GPIO_Init+0x2ec>)
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	089b      	lsrs	r3, r3, #2
 8005b9c:	3302      	adds	r3, #2
 8005b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	220f      	movs	r2, #15
 8005bae:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a49      	ldr	r2, [pc, #292]	; (8005ce4 <HAL_GPIO_Init+0x2f0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d019      	beq.n	8005bf6 <HAL_GPIO_Init+0x202>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a48      	ldr	r2, [pc, #288]	; (8005ce8 <HAL_GPIO_Init+0x2f4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d013      	beq.n	8005bf2 <HAL_GPIO_Init+0x1fe>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a47      	ldr	r2, [pc, #284]	; (8005cec <HAL_GPIO_Init+0x2f8>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d00d      	beq.n	8005bee <HAL_GPIO_Init+0x1fa>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a46      	ldr	r2, [pc, #280]	; (8005cf0 <HAL_GPIO_Init+0x2fc>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d007      	beq.n	8005bea <HAL_GPIO_Init+0x1f6>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a45      	ldr	r2, [pc, #276]	; (8005cf4 <HAL_GPIO_Init+0x300>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d101      	bne.n	8005be6 <HAL_GPIO_Init+0x1f2>
 8005be2:	2304      	movs	r3, #4
 8005be4:	e008      	b.n	8005bf8 <HAL_GPIO_Init+0x204>
 8005be6:	2307      	movs	r3, #7
 8005be8:	e006      	b.n	8005bf8 <HAL_GPIO_Init+0x204>
 8005bea:	2303      	movs	r3, #3
 8005bec:	e004      	b.n	8005bf8 <HAL_GPIO_Init+0x204>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e002      	b.n	8005bf8 <HAL_GPIO_Init+0x204>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <HAL_GPIO_Init+0x204>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	69fa      	ldr	r2, [r7, #28]
 8005bfa:	f002 0203 	and.w	r2, r2, #3
 8005bfe:	0092      	lsls	r2, r2, #2
 8005c00:	4093      	lsls	r3, r2
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c08:	4935      	ldr	r1, [pc, #212]	; (8005ce0 <HAL_GPIO_Init+0x2ec>)
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	089b      	lsrs	r3, r3, #2
 8005c0e:	3302      	adds	r3, #2
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c16:	4b38      	ldr	r3, [pc, #224]	; (8005cf8 <HAL_GPIO_Init+0x304>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	4013      	ands	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c3a:	4a2f      	ldr	r2, [pc, #188]	; (8005cf8 <HAL_GPIO_Init+0x304>)
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c40:	4b2d      	ldr	r3, [pc, #180]	; (8005cf8 <HAL_GPIO_Init+0x304>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c64:	4a24      	ldr	r2, [pc, #144]	; (8005cf8 <HAL_GPIO_Init+0x304>)
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c6a:	4b23      	ldr	r3, [pc, #140]	; (8005cf8 <HAL_GPIO_Init+0x304>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	43db      	mvns	r3, r3
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	4013      	ands	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c8e:	4a1a      	ldr	r2, [pc, #104]	; (8005cf8 <HAL_GPIO_Init+0x304>)
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c94:	4b18      	ldr	r3, [pc, #96]	; (8005cf8 <HAL_GPIO_Init+0x304>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005cb8:	4a0f      	ldr	r2, [pc, #60]	; (8005cf8 <HAL_GPIO_Init+0x304>)
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	61fb      	str	r3, [r7, #28]
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	2b0f      	cmp	r3, #15
 8005cc8:	f67f aea2 	bls.w	8005a10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ccc:	bf00      	nop
 8005cce:	bf00      	nop
 8005cd0:	3724      	adds	r7, #36	; 0x24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	40013800 	.word	0x40013800
 8005ce4:	40020000 	.word	0x40020000
 8005ce8:	40020400 	.word	0x40020400
 8005cec:	40020800 	.word	0x40020800
 8005cf0:	40020c00 	.word	0x40020c00
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	40013c00 	.word	0x40013c00

08005cfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	887b      	ldrh	r3, [r7, #2]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d14:	2301      	movs	r3, #1
 8005d16:	73fb      	strb	r3, [r7, #15]
 8005d18:	e001      	b.n	8005d1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	807b      	strh	r3, [r7, #2]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d3c:	787b      	ldrb	r3, [r7, #1]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d42:	887a      	ldrh	r2, [r7, #2]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d48:	e003      	b.n	8005d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d4a:	887b      	ldrh	r3, [r7, #2]
 8005d4c:	041a      	lsls	r2, r3, #16
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	619a      	str	r2, [r3, #24]
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e267      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d075      	beq.n	8005e6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d7e:	4b88      	ldr	r3, [pc, #544]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 030c 	and.w	r3, r3, #12
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d00c      	beq.n	8005da4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d8a:	4b85      	ldr	r3, [pc, #532]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	d112      	bne.n	8005dbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d96:	4b82      	ldr	r3, [pc, #520]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005da2:	d10b      	bne.n	8005dbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005da4:	4b7e      	ldr	r3, [pc, #504]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d05b      	beq.n	8005e68 <HAL_RCC_OscConfig+0x108>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d157      	bne.n	8005e68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e242      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc4:	d106      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x74>
 8005dc6:	4b76      	ldr	r3, [pc, #472]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a75      	ldr	r2, [pc, #468]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd0:	6013      	str	r3, [r2, #0]
 8005dd2:	e01d      	b.n	8005e10 <HAL_RCC_OscConfig+0xb0>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ddc:	d10c      	bne.n	8005df8 <HAL_RCC_OscConfig+0x98>
 8005dde:	4b70      	ldr	r3, [pc, #448]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a6f      	ldr	r2, [pc, #444]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	4b6d      	ldr	r3, [pc, #436]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a6c      	ldr	r2, [pc, #432]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	e00b      	b.n	8005e10 <HAL_RCC_OscConfig+0xb0>
 8005df8:	4b69      	ldr	r3, [pc, #420]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a68      	ldr	r2, [pc, #416]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	4b66      	ldr	r3, [pc, #408]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a65      	ldr	r2, [pc, #404]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d013      	beq.n	8005e40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e18:	f7fe fc9a 	bl	8004750 <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e20:	f7fe fc96 	bl	8004750 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b64      	cmp	r3, #100	; 0x64
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e207      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e32:	4b5b      	ldr	r3, [pc, #364]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0f0      	beq.n	8005e20 <HAL_RCC_OscConfig+0xc0>
 8005e3e:	e014      	b.n	8005e6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e40:	f7fe fc86 	bl	8004750 <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e48:	f7fe fc82 	bl	8004750 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b64      	cmp	r3, #100	; 0x64
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e1f3      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e5a:	4b51      	ldr	r3, [pc, #324]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1f0      	bne.n	8005e48 <HAL_RCC_OscConfig+0xe8>
 8005e66:	e000      	b.n	8005e6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d063      	beq.n	8005f3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e76:	4b4a      	ldr	r3, [pc, #296]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 030c 	and.w	r3, r3, #12
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00b      	beq.n	8005e9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e82:	4b47      	ldr	r3, [pc, #284]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e8a:	2b08      	cmp	r3, #8
 8005e8c:	d11c      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e8e:	4b44      	ldr	r3, [pc, #272]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d116      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e9a:	4b41      	ldr	r3, [pc, #260]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d005      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x152>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d001      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e1c7      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb2:	4b3b      	ldr	r3, [pc, #236]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	4937      	ldr	r1, [pc, #220]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ec6:	e03a      	b.n	8005f3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d020      	beq.n	8005f12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ed0:	4b34      	ldr	r3, [pc, #208]	; (8005fa4 <HAL_RCC_OscConfig+0x244>)
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed6:	f7fe fc3b 	bl	8004750 <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005edc:	e008      	b.n	8005ef0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ede:	f7fe fc37 	bl	8004750 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e1a8      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef0:	4b2b      	ldr	r3, [pc, #172]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0f0      	beq.n	8005ede <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005efc:	4b28      	ldr	r3, [pc, #160]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	4925      	ldr	r1, [pc, #148]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	600b      	str	r3, [r1, #0]
 8005f10:	e015      	b.n	8005f3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f12:	4b24      	ldr	r3, [pc, #144]	; (8005fa4 <HAL_RCC_OscConfig+0x244>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f18:	f7fe fc1a 	bl	8004750 <HAL_GetTick>
 8005f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f1e:	e008      	b.n	8005f32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f20:	f7fe fc16 	bl	8004750 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e187      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f32:	4b1b      	ldr	r3, [pc, #108]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1f0      	bne.n	8005f20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d036      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d016      	beq.n	8005f80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f52:	4b15      	ldr	r3, [pc, #84]	; (8005fa8 <HAL_RCC_OscConfig+0x248>)
 8005f54:	2201      	movs	r2, #1
 8005f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f58:	f7fe fbfa 	bl	8004750 <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f60:	f7fe fbf6 	bl	8004750 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e167      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f72:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <HAL_RCC_OscConfig+0x240>)
 8005f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0f0      	beq.n	8005f60 <HAL_RCC_OscConfig+0x200>
 8005f7e:	e01b      	b.n	8005fb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f80:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <HAL_RCC_OscConfig+0x248>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f86:	f7fe fbe3 	bl	8004750 <HAL_GetTick>
 8005f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f8c:	e00e      	b.n	8005fac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f8e:	f7fe fbdf 	bl	8004750 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d907      	bls.n	8005fac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e150      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
 8005fa0:	40023800 	.word	0x40023800
 8005fa4:	42470000 	.word	0x42470000
 8005fa8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fac:	4b88      	ldr	r3, [pc, #544]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8005fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1ea      	bne.n	8005f8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 8097 	beq.w	80060f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fca:	4b81      	ldr	r3, [pc, #516]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10f      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60bb      	str	r3, [r7, #8]
 8005fda:	4b7d      	ldr	r3, [pc, #500]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	4a7c      	ldr	r2, [pc, #496]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8005fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fe6:	4b7a      	ldr	r3, [pc, #488]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fee:	60bb      	str	r3, [r7, #8]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff6:	4b77      	ldr	r3, [pc, #476]	; (80061d4 <HAL_RCC_OscConfig+0x474>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d118      	bne.n	8006034 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006002:	4b74      	ldr	r3, [pc, #464]	; (80061d4 <HAL_RCC_OscConfig+0x474>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a73      	ldr	r2, [pc, #460]	; (80061d4 <HAL_RCC_OscConfig+0x474>)
 8006008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800600c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800600e:	f7fe fb9f 	bl	8004750 <HAL_GetTick>
 8006012:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006014:	e008      	b.n	8006028 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006016:	f7fe fb9b 	bl	8004750 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e10c      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006028:	4b6a      	ldr	r3, [pc, #424]	; (80061d4 <HAL_RCC_OscConfig+0x474>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0f0      	beq.n	8006016 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d106      	bne.n	800604a <HAL_RCC_OscConfig+0x2ea>
 800603c:	4b64      	ldr	r3, [pc, #400]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 800603e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006040:	4a63      	ldr	r2, [pc, #396]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8006042:	f043 0301 	orr.w	r3, r3, #1
 8006046:	6713      	str	r3, [r2, #112]	; 0x70
 8006048:	e01c      	b.n	8006084 <HAL_RCC_OscConfig+0x324>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	2b05      	cmp	r3, #5
 8006050:	d10c      	bne.n	800606c <HAL_RCC_OscConfig+0x30c>
 8006052:	4b5f      	ldr	r3, [pc, #380]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8006054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006056:	4a5e      	ldr	r2, [pc, #376]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8006058:	f043 0304 	orr.w	r3, r3, #4
 800605c:	6713      	str	r3, [r2, #112]	; 0x70
 800605e:	4b5c      	ldr	r3, [pc, #368]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8006060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006062:	4a5b      	ldr	r2, [pc, #364]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8006064:	f043 0301 	orr.w	r3, r3, #1
 8006068:	6713      	str	r3, [r2, #112]	; 0x70
 800606a:	e00b      	b.n	8006084 <HAL_RCC_OscConfig+0x324>
 800606c:	4b58      	ldr	r3, [pc, #352]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 800606e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006070:	4a57      	ldr	r2, [pc, #348]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	6713      	str	r3, [r2, #112]	; 0x70
 8006078:	4b55      	ldr	r3, [pc, #340]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 800607a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607c:	4a54      	ldr	r2, [pc, #336]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 800607e:	f023 0304 	bic.w	r3, r3, #4
 8006082:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d015      	beq.n	80060b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608c:	f7fe fb60 	bl	8004750 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006092:	e00a      	b.n	80060aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006094:	f7fe fb5c 	bl	8004750 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e0cb      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060aa:	4b49      	ldr	r3, [pc, #292]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 80060ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0ee      	beq.n	8006094 <HAL_RCC_OscConfig+0x334>
 80060b6:	e014      	b.n	80060e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060b8:	f7fe fb4a 	bl	8004750 <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060be:	e00a      	b.n	80060d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060c0:	f7fe fb46 	bl	8004750 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e0b5      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060d6:	4b3e      	ldr	r3, [pc, #248]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 80060d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1ee      	bne.n	80060c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060e2:	7dfb      	ldrb	r3, [r7, #23]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d105      	bne.n	80060f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060e8:	4b39      	ldr	r3, [pc, #228]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	4a38      	ldr	r2, [pc, #224]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 80060ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 80a1 	beq.w	8006240 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060fe:	4b34      	ldr	r3, [pc, #208]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 030c 	and.w	r3, r3, #12
 8006106:	2b08      	cmp	r3, #8
 8006108:	d05c      	beq.n	80061c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	2b02      	cmp	r3, #2
 8006110:	d141      	bne.n	8006196 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006112:	4b31      	ldr	r3, [pc, #196]	; (80061d8 <HAL_RCC_OscConfig+0x478>)
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006118:	f7fe fb1a 	bl	8004750 <HAL_GetTick>
 800611c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800611e:	e008      	b.n	8006132 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006120:	f7fe fb16 	bl	8004750 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e087      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006132:	4b27      	ldr	r3, [pc, #156]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1f0      	bne.n	8006120 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69da      	ldr	r2, [r3, #28]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	019b      	lsls	r3, r3, #6
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006154:	085b      	lsrs	r3, r3, #1
 8006156:	3b01      	subs	r3, #1
 8006158:	041b      	lsls	r3, r3, #16
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	061b      	lsls	r3, r3, #24
 8006162:	491b      	ldr	r1, [pc, #108]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 8006164:	4313      	orrs	r3, r2
 8006166:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006168:	4b1b      	ldr	r3, [pc, #108]	; (80061d8 <HAL_RCC_OscConfig+0x478>)
 800616a:	2201      	movs	r2, #1
 800616c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800616e:	f7fe faef 	bl	8004750 <HAL_GetTick>
 8006172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006176:	f7fe faeb 	bl	8004750 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e05c      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006188:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0f0      	beq.n	8006176 <HAL_RCC_OscConfig+0x416>
 8006194:	e054      	b.n	8006240 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006196:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <HAL_RCC_OscConfig+0x478>)
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800619c:	f7fe fad8 	bl	8004750 <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061a4:	f7fe fad4 	bl	8004750 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e045      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b6:	4b06      	ldr	r3, [pc, #24]	; (80061d0 <HAL_RCC_OscConfig+0x470>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1f0      	bne.n	80061a4 <HAL_RCC_OscConfig+0x444>
 80061c2:	e03d      	b.n	8006240 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d107      	bne.n	80061dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e038      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
 80061d0:	40023800 	.word	0x40023800
 80061d4:	40007000 	.word	0x40007000
 80061d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061dc:	4b1b      	ldr	r3, [pc, #108]	; (800624c <HAL_RCC_OscConfig+0x4ec>)
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d028      	beq.n	800623c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d121      	bne.n	800623c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006202:	429a      	cmp	r2, r3
 8006204:	d11a      	bne.n	800623c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800620c:	4013      	ands	r3, r2
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006212:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006214:	4293      	cmp	r3, r2
 8006216:	d111      	bne.n	800623c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006222:	085b      	lsrs	r3, r3, #1
 8006224:	3b01      	subs	r3, #1
 8006226:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006228:	429a      	cmp	r2, r3
 800622a:	d107      	bne.n	800623c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006236:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006238:	429a      	cmp	r2, r3
 800623a:	d001      	beq.n	8006240 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e000      	b.n	8006242 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	40023800 	.word	0x40023800

08006250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e0cc      	b.n	80063fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006264:	4b68      	ldr	r3, [pc, #416]	; (8006408 <HAL_RCC_ClockConfig+0x1b8>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	429a      	cmp	r2, r3
 8006270:	d90c      	bls.n	800628c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006272:	4b65      	ldr	r3, [pc, #404]	; (8006408 <HAL_RCC_ClockConfig+0x1b8>)
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800627a:	4b63      	ldr	r3, [pc, #396]	; (8006408 <HAL_RCC_ClockConfig+0x1b8>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d001      	beq.n	800628c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e0b8      	b.n	80063fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d020      	beq.n	80062da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d005      	beq.n	80062b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062a4:	4b59      	ldr	r3, [pc, #356]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	4a58      	ldr	r2, [pc, #352]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80062aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0308 	and.w	r3, r3, #8
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d005      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062bc:	4b53      	ldr	r3, [pc, #332]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	4a52      	ldr	r2, [pc, #328]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80062c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062c8:	4b50      	ldr	r3, [pc, #320]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	494d      	ldr	r1, [pc, #308]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d044      	beq.n	8006370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d107      	bne.n	80062fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ee:	4b47      	ldr	r3, [pc, #284]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d119      	bne.n	800632e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e07f      	b.n	80063fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b02      	cmp	r3, #2
 8006304:	d003      	beq.n	800630e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800630a:	2b03      	cmp	r3, #3
 800630c:	d107      	bne.n	800631e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800630e:	4b3f      	ldr	r3, [pc, #252]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d109      	bne.n	800632e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e06f      	b.n	80063fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800631e:	4b3b      	ldr	r3, [pc, #236]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e067      	b.n	80063fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800632e:	4b37      	ldr	r3, [pc, #220]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f023 0203 	bic.w	r2, r3, #3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	4934      	ldr	r1, [pc, #208]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 800633c:	4313      	orrs	r3, r2
 800633e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006340:	f7fe fa06 	bl	8004750 <HAL_GetTick>
 8006344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006346:	e00a      	b.n	800635e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006348:	f7fe fa02 	bl	8004750 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	f241 3288 	movw	r2, #5000	; 0x1388
 8006356:	4293      	cmp	r3, r2
 8006358:	d901      	bls.n	800635e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e04f      	b.n	80063fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800635e:	4b2b      	ldr	r3, [pc, #172]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 020c 	and.w	r2, r3, #12
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	429a      	cmp	r2, r3
 800636e:	d1eb      	bne.n	8006348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006370:	4b25      	ldr	r3, [pc, #148]	; (8006408 <HAL_RCC_ClockConfig+0x1b8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d20c      	bcs.n	8006398 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800637e:	4b22      	ldr	r3, [pc, #136]	; (8006408 <HAL_RCC_ClockConfig+0x1b8>)
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006386:	4b20      	ldr	r3, [pc, #128]	; (8006408 <HAL_RCC_ClockConfig+0x1b8>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0307 	and.w	r3, r3, #7
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d001      	beq.n	8006398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e032      	b.n	80063fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d008      	beq.n	80063b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063a4:	4b19      	ldr	r3, [pc, #100]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	4916      	ldr	r1, [pc, #88]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d009      	beq.n	80063d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063c2:	4b12      	ldr	r3, [pc, #72]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	490e      	ldr	r1, [pc, #56]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063d6:	f000 f821 	bl	800641c <HAL_RCC_GetSysClockFreq>
 80063da:	4602      	mov	r2, r0
 80063dc:	4b0b      	ldr	r3, [pc, #44]	; (800640c <HAL_RCC_ClockConfig+0x1bc>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	091b      	lsrs	r3, r3, #4
 80063e2:	f003 030f 	and.w	r3, r3, #15
 80063e6:	490a      	ldr	r1, [pc, #40]	; (8006410 <HAL_RCC_ClockConfig+0x1c0>)
 80063e8:	5ccb      	ldrb	r3, [r1, r3]
 80063ea:	fa22 f303 	lsr.w	r3, r2, r3
 80063ee:	4a09      	ldr	r2, [pc, #36]	; (8006414 <HAL_RCC_ClockConfig+0x1c4>)
 80063f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063f2:	4b09      	ldr	r3, [pc, #36]	; (8006418 <HAL_RCC_ClockConfig+0x1c8>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe f966 	bl	80046c8 <HAL_InitTick>

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	40023c00 	.word	0x40023c00
 800640c:	40023800 	.word	0x40023800
 8006410:	0800e2ec 	.word	0x0800e2ec
 8006414:	20000220 	.word	0x20000220
 8006418:	20000224 	.word	0x20000224

0800641c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800641c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006420:	b094      	sub	sp, #80	; 0x50
 8006422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	647b      	str	r3, [r7, #68]	; 0x44
 8006428:	2300      	movs	r3, #0
 800642a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800642c:	2300      	movs	r3, #0
 800642e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006434:	4b79      	ldr	r3, [pc, #484]	; (800661c <HAL_RCC_GetSysClockFreq+0x200>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f003 030c 	and.w	r3, r3, #12
 800643c:	2b08      	cmp	r3, #8
 800643e:	d00d      	beq.n	800645c <HAL_RCC_GetSysClockFreq+0x40>
 8006440:	2b08      	cmp	r3, #8
 8006442:	f200 80e1 	bhi.w	8006608 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <HAL_RCC_GetSysClockFreq+0x34>
 800644a:	2b04      	cmp	r3, #4
 800644c:	d003      	beq.n	8006456 <HAL_RCC_GetSysClockFreq+0x3a>
 800644e:	e0db      	b.n	8006608 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006450:	4b73      	ldr	r3, [pc, #460]	; (8006620 <HAL_RCC_GetSysClockFreq+0x204>)
 8006452:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006454:	e0db      	b.n	800660e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006456:	4b73      	ldr	r3, [pc, #460]	; (8006624 <HAL_RCC_GetSysClockFreq+0x208>)
 8006458:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800645a:	e0d8      	b.n	800660e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800645c:	4b6f      	ldr	r3, [pc, #444]	; (800661c <HAL_RCC_GetSysClockFreq+0x200>)
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006464:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006466:	4b6d      	ldr	r3, [pc, #436]	; (800661c <HAL_RCC_GetSysClockFreq+0x200>)
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d063      	beq.n	800653a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006472:	4b6a      	ldr	r3, [pc, #424]	; (800661c <HAL_RCC_GetSysClockFreq+0x200>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	099b      	lsrs	r3, r3, #6
 8006478:	2200      	movs	r2, #0
 800647a:	63bb      	str	r3, [r7, #56]	; 0x38
 800647c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006484:	633b      	str	r3, [r7, #48]	; 0x30
 8006486:	2300      	movs	r3, #0
 8006488:	637b      	str	r3, [r7, #52]	; 0x34
 800648a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800648e:	4622      	mov	r2, r4
 8006490:	462b      	mov	r3, r5
 8006492:	f04f 0000 	mov.w	r0, #0
 8006496:	f04f 0100 	mov.w	r1, #0
 800649a:	0159      	lsls	r1, r3, #5
 800649c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064a0:	0150      	lsls	r0, r2, #5
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4621      	mov	r1, r4
 80064a8:	1a51      	subs	r1, r2, r1
 80064aa:	6139      	str	r1, [r7, #16]
 80064ac:	4629      	mov	r1, r5
 80064ae:	eb63 0301 	sbc.w	r3, r3, r1
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	f04f 0200 	mov.w	r2, #0
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064c0:	4659      	mov	r1, fp
 80064c2:	018b      	lsls	r3, r1, #6
 80064c4:	4651      	mov	r1, sl
 80064c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064ca:	4651      	mov	r1, sl
 80064cc:	018a      	lsls	r2, r1, #6
 80064ce:	4651      	mov	r1, sl
 80064d0:	ebb2 0801 	subs.w	r8, r2, r1
 80064d4:	4659      	mov	r1, fp
 80064d6:	eb63 0901 	sbc.w	r9, r3, r1
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	f04f 0300 	mov.w	r3, #0
 80064e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064ee:	4690      	mov	r8, r2
 80064f0:	4699      	mov	r9, r3
 80064f2:	4623      	mov	r3, r4
 80064f4:	eb18 0303 	adds.w	r3, r8, r3
 80064f8:	60bb      	str	r3, [r7, #8]
 80064fa:	462b      	mov	r3, r5
 80064fc:	eb49 0303 	adc.w	r3, r9, r3
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	f04f 0300 	mov.w	r3, #0
 800650a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800650e:	4629      	mov	r1, r5
 8006510:	024b      	lsls	r3, r1, #9
 8006512:	4621      	mov	r1, r4
 8006514:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006518:	4621      	mov	r1, r4
 800651a:	024a      	lsls	r2, r1, #9
 800651c:	4610      	mov	r0, r2
 800651e:	4619      	mov	r1, r3
 8006520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006522:	2200      	movs	r2, #0
 8006524:	62bb      	str	r3, [r7, #40]	; 0x28
 8006526:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006528:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800652c:	f7fa fbb4 	bl	8000c98 <__aeabi_uldivmod>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4613      	mov	r3, r2
 8006536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006538:	e058      	b.n	80065ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800653a:	4b38      	ldr	r3, [pc, #224]	; (800661c <HAL_RCC_GetSysClockFreq+0x200>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	099b      	lsrs	r3, r3, #6
 8006540:	2200      	movs	r2, #0
 8006542:	4618      	mov	r0, r3
 8006544:	4611      	mov	r1, r2
 8006546:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800654a:	623b      	str	r3, [r7, #32]
 800654c:	2300      	movs	r3, #0
 800654e:	627b      	str	r3, [r7, #36]	; 0x24
 8006550:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006554:	4642      	mov	r2, r8
 8006556:	464b      	mov	r3, r9
 8006558:	f04f 0000 	mov.w	r0, #0
 800655c:	f04f 0100 	mov.w	r1, #0
 8006560:	0159      	lsls	r1, r3, #5
 8006562:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006566:	0150      	lsls	r0, r2, #5
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	4641      	mov	r1, r8
 800656e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006572:	4649      	mov	r1, r9
 8006574:	eb63 0b01 	sbc.w	fp, r3, r1
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006584:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006588:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800658c:	ebb2 040a 	subs.w	r4, r2, sl
 8006590:	eb63 050b 	sbc.w	r5, r3, fp
 8006594:	f04f 0200 	mov.w	r2, #0
 8006598:	f04f 0300 	mov.w	r3, #0
 800659c:	00eb      	lsls	r3, r5, #3
 800659e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065a2:	00e2      	lsls	r2, r4, #3
 80065a4:	4614      	mov	r4, r2
 80065a6:	461d      	mov	r5, r3
 80065a8:	4643      	mov	r3, r8
 80065aa:	18e3      	adds	r3, r4, r3
 80065ac:	603b      	str	r3, [r7, #0]
 80065ae:	464b      	mov	r3, r9
 80065b0:	eb45 0303 	adc.w	r3, r5, r3
 80065b4:	607b      	str	r3, [r7, #4]
 80065b6:	f04f 0200 	mov.w	r2, #0
 80065ba:	f04f 0300 	mov.w	r3, #0
 80065be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065c2:	4629      	mov	r1, r5
 80065c4:	028b      	lsls	r3, r1, #10
 80065c6:	4621      	mov	r1, r4
 80065c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065cc:	4621      	mov	r1, r4
 80065ce:	028a      	lsls	r2, r1, #10
 80065d0:	4610      	mov	r0, r2
 80065d2:	4619      	mov	r1, r3
 80065d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065d6:	2200      	movs	r2, #0
 80065d8:	61bb      	str	r3, [r7, #24]
 80065da:	61fa      	str	r2, [r7, #28]
 80065dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065e0:	f7fa fb5a 	bl	8000c98 <__aeabi_uldivmod>
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4613      	mov	r3, r2
 80065ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065ec:	4b0b      	ldr	r3, [pc, #44]	; (800661c <HAL_RCC_GetSysClockFreq+0x200>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	0c1b      	lsrs	r3, r3, #16
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	3301      	adds	r3, #1
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80065fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006600:	fbb2 f3f3 	udiv	r3, r2, r3
 8006604:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006606:	e002      	b.n	800660e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006608:	4b05      	ldr	r3, [pc, #20]	; (8006620 <HAL_RCC_GetSysClockFreq+0x204>)
 800660a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800660c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800660e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006610:	4618      	mov	r0, r3
 8006612:	3750      	adds	r7, #80	; 0x50
 8006614:	46bd      	mov	sp, r7
 8006616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800661a:	bf00      	nop
 800661c:	40023800 	.word	0x40023800
 8006620:	00f42400 	.word	0x00f42400
 8006624:	007a1200 	.word	0x007a1200

08006628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800662c:	4b03      	ldr	r3, [pc, #12]	; (800663c <HAL_RCC_GetHCLKFreq+0x14>)
 800662e:	681b      	ldr	r3, [r3, #0]
}
 8006630:	4618      	mov	r0, r3
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20000220 	.word	0x20000220

08006640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006644:	f7ff fff0 	bl	8006628 <HAL_RCC_GetHCLKFreq>
 8006648:	4602      	mov	r2, r0
 800664a:	4b05      	ldr	r3, [pc, #20]	; (8006660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	0a9b      	lsrs	r3, r3, #10
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	4903      	ldr	r1, [pc, #12]	; (8006664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006656:	5ccb      	ldrb	r3, [r1, r3]
 8006658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800665c:	4618      	mov	r0, r3
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40023800 	.word	0x40023800
 8006664:	0800e2fc 	.word	0x0800e2fc

08006668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800666c:	f7ff ffdc 	bl	8006628 <HAL_RCC_GetHCLKFreq>
 8006670:	4602      	mov	r2, r0
 8006672:	4b05      	ldr	r3, [pc, #20]	; (8006688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	0b5b      	lsrs	r3, r3, #13
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	4903      	ldr	r1, [pc, #12]	; (800668c <HAL_RCC_GetPCLK2Freq+0x24>)
 800667e:	5ccb      	ldrb	r3, [r1, r3]
 8006680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006684:	4618      	mov	r0, r3
 8006686:	bd80      	pop	{r7, pc}
 8006688:	40023800 	.word	0x40023800
 800668c:	0800e2fc 	.word	0x0800e2fc

08006690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e04c      	b.n	800673c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d111      	bne.n	80066d2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f001 fc02 	bl	8007ec0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d102      	bne.n	80066ca <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a1f      	ldr	r2, [pc, #124]	; (8006744 <HAL_TIM_Base_Init+0xb4>)
 80066c8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2202      	movs	r2, #2
 80066d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	3304      	adds	r3, #4
 80066e2:	4619      	mov	r1, r3
 80066e4:	4610      	mov	r0, r2
 80066e6:	f001 f91f 	bl	8007928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	080040e9 	.word	0x080040e9

08006748 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b01      	cmp	r3, #1
 800675a:	d001      	beq.n	8006760 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e03c      	b.n	80067da <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a1e      	ldr	r2, [pc, #120]	; (80067e8 <HAL_TIM_Base_Start+0xa0>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d018      	beq.n	80067a4 <HAL_TIM_Base_Start+0x5c>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800677a:	d013      	beq.n	80067a4 <HAL_TIM_Base_Start+0x5c>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a1a      	ldr	r2, [pc, #104]	; (80067ec <HAL_TIM_Base_Start+0xa4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00e      	beq.n	80067a4 <HAL_TIM_Base_Start+0x5c>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a19      	ldr	r2, [pc, #100]	; (80067f0 <HAL_TIM_Base_Start+0xa8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d009      	beq.n	80067a4 <HAL_TIM_Base_Start+0x5c>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a17      	ldr	r2, [pc, #92]	; (80067f4 <HAL_TIM_Base_Start+0xac>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d004      	beq.n	80067a4 <HAL_TIM_Base_Start+0x5c>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a16      	ldr	r2, [pc, #88]	; (80067f8 <HAL_TIM_Base_Start+0xb0>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d111      	bne.n	80067c8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 0307 	and.w	r3, r3, #7
 80067ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b06      	cmp	r3, #6
 80067b4:	d010      	beq.n	80067d8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f042 0201 	orr.w	r2, r2, #1
 80067c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c6:	e007      	b.n	80067d8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0201 	orr.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40010000 	.word	0x40010000
 80067ec:	40000400 	.word	0x40000400
 80067f0:	40000800 	.word	0x40000800
 80067f4:	40000c00 	.word	0x40000c00
 80067f8:	40014000 	.word	0x40014000

080067fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b01      	cmp	r3, #1
 800680e:	d001      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e044      	b.n	800689e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68da      	ldr	r2, [r3, #12]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0201 	orr.w	r2, r2, #1
 800682a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a1e      	ldr	r2, [pc, #120]	; (80068ac <HAL_TIM_Base_Start_IT+0xb0>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d018      	beq.n	8006868 <HAL_TIM_Base_Start_IT+0x6c>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800683e:	d013      	beq.n	8006868 <HAL_TIM_Base_Start_IT+0x6c>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a1a      	ldr	r2, [pc, #104]	; (80068b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00e      	beq.n	8006868 <HAL_TIM_Base_Start_IT+0x6c>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a19      	ldr	r2, [pc, #100]	; (80068b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d009      	beq.n	8006868 <HAL_TIM_Base_Start_IT+0x6c>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a17      	ldr	r2, [pc, #92]	; (80068b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d004      	beq.n	8006868 <HAL_TIM_Base_Start_IT+0x6c>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a16      	ldr	r2, [pc, #88]	; (80068bc <HAL_TIM_Base_Start_IT+0xc0>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d111      	bne.n	800688c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b06      	cmp	r3, #6
 8006878:	d010      	beq.n	800689c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f042 0201 	orr.w	r2, r2, #1
 8006888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688a:	e007      	b.n	800689c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0201 	orr.w	r2, r2, #1
 800689a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40010000 	.word	0x40010000
 80068b0:	40000400 	.word	0x40000400
 80068b4:	40000800 	.word	0x40000800
 80068b8:	40000c00 	.word	0x40000c00
 80068bc:	40014000 	.word	0x40014000

080068c0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e04c      	b.n	800696c <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d111      	bne.n	8006902 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f001 faea 	bl	8007ec0 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d102      	bne.n	80068fa <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a1f      	ldr	r2, [pc, #124]	; (8006974 <HAL_TIM_OC_Init+0xb4>)
 80068f8:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2202      	movs	r2, #2
 8006906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	3304      	adds	r3, #4
 8006912:	4619      	mov	r1, r3
 8006914:	4610      	mov	r0, r2
 8006916:	f001 f807 	bl	8007928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	08006979 	.word	0x08006979

08006978 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e04c      	b.n	8006a38 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d111      	bne.n	80069ce <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f001 fa84 	bl	8007ec0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d102      	bne.n	80069c6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a1f      	ldr	r2, [pc, #124]	; (8006a40 <HAL_TIM_PWM_Init+0xb4>)
 80069c4:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2202      	movs	r2, #2
 80069d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	3304      	adds	r3, #4
 80069de:	4619      	mov	r1, r3
 80069e0:	4610      	mov	r0, r2
 80069e2:	f000 ffa1 	bl	8007928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	08003ff9 	.word	0x08003ff9

08006a44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d109      	bne.n	8006a68 <HAL_TIM_PWM_Start+0x24>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	bf14      	ite	ne
 8006a60:	2301      	movne	r3, #1
 8006a62:	2300      	moveq	r3, #0
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	e022      	b.n	8006aae <HAL_TIM_PWM_Start+0x6a>
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2b04      	cmp	r3, #4
 8006a6c:	d109      	bne.n	8006a82 <HAL_TIM_PWM_Start+0x3e>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	bf14      	ite	ne
 8006a7a:	2301      	movne	r3, #1
 8006a7c:	2300      	moveq	r3, #0
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	e015      	b.n	8006aae <HAL_TIM_PWM_Start+0x6a>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	d109      	bne.n	8006a9c <HAL_TIM_PWM_Start+0x58>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	bf14      	ite	ne
 8006a94:	2301      	movne	r3, #1
 8006a96:	2300      	moveq	r3, #0
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	e008      	b.n	8006aae <HAL_TIM_PWM_Start+0x6a>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	bf14      	ite	ne
 8006aa8:	2301      	movne	r3, #1
 8006aaa:	2300      	moveq	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e068      	b.n	8006b88 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d104      	bne.n	8006ac6 <HAL_TIM_PWM_Start+0x82>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ac4:	e013      	b.n	8006aee <HAL_TIM_PWM_Start+0xaa>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	d104      	bne.n	8006ad6 <HAL_TIM_PWM_Start+0x92>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ad4:	e00b      	b.n	8006aee <HAL_TIM_PWM_Start+0xaa>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d104      	bne.n	8006ae6 <HAL_TIM_PWM_Start+0xa2>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ae4:	e003      	b.n	8006aee <HAL_TIM_PWM_Start+0xaa>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2201      	movs	r2, #1
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f001 f9bc 	bl	8007e74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a23      	ldr	r2, [pc, #140]	; (8006b90 <HAL_TIM_PWM_Start+0x14c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d107      	bne.n	8006b16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a1d      	ldr	r2, [pc, #116]	; (8006b90 <HAL_TIM_PWM_Start+0x14c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d018      	beq.n	8006b52 <HAL_TIM_PWM_Start+0x10e>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b28:	d013      	beq.n	8006b52 <HAL_TIM_PWM_Start+0x10e>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a19      	ldr	r2, [pc, #100]	; (8006b94 <HAL_TIM_PWM_Start+0x150>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00e      	beq.n	8006b52 <HAL_TIM_PWM_Start+0x10e>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a17      	ldr	r2, [pc, #92]	; (8006b98 <HAL_TIM_PWM_Start+0x154>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d009      	beq.n	8006b52 <HAL_TIM_PWM_Start+0x10e>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a16      	ldr	r2, [pc, #88]	; (8006b9c <HAL_TIM_PWM_Start+0x158>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d004      	beq.n	8006b52 <HAL_TIM_PWM_Start+0x10e>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a14      	ldr	r2, [pc, #80]	; (8006ba0 <HAL_TIM_PWM_Start+0x15c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d111      	bne.n	8006b76 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b06      	cmp	r3, #6
 8006b62:	d010      	beq.n	8006b86 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 0201 	orr.w	r2, r2, #1
 8006b72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b74:	e007      	b.n	8006b86 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f042 0201 	orr.w	r2, r2, #1
 8006b84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	40010000 	.word	0x40010000
 8006b94:	40000400 	.word	0x40000400
 8006b98:	40000800 	.word	0x40000800
 8006b9c:	40000c00 	.word	0x40000c00
 8006ba0:	40014000 	.word	0x40014000

08006ba4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e04c      	b.n	8006c52 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d111      	bne.n	8006be8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 f977 	bl	8007ec0 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d102      	bne.n	8006be0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a1f      	ldr	r2, [pc, #124]	; (8006c5c <HAL_TIM_OnePulse_Init+0xb8>)
 8006bde:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4610      	mov	r0, r2
 8006bfc:	f000 fe94 	bl	8007928 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0208 	bic.w	r2, r2, #8
 8006c0e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6819      	ldr	r1, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	08006c61 	.word	0x08006c61

08006c60 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c84:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c8c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c94:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c9c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d108      	bne.n	8006cb6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ca4:	7bbb      	ldrb	r3, [r7, #14]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d105      	bne.n	8006cb6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006caa:	7b7b      	ldrb	r3, [r7, #13]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d102      	bne.n	8006cb6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cb0:	7b3b      	ldrb	r3, [r7, #12]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d001      	beq.n	8006cba <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e03b      	b.n	8006d32 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2202      	movs	r2, #2
 8006cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f042 0202 	orr.w	r2, r2, #2
 8006ce8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0204 	orr.w	r2, r2, #4
 8006cf8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	2100      	movs	r1, #0
 8006d02:	4618      	mov	r0, r3
 8006d04:	f001 f8b6 	bl	8007e74 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	2104      	movs	r1, #4
 8006d10:	4618      	mov	r0, r3
 8006d12:	f001 f8af 	bl	8007e74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a08      	ldr	r2, [pc, #32]	; (8006d3c <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d107      	bne.n	8006d30 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	40010000 	.word	0x40010000

08006d40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e0a2      	b.n	8006e9a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d111      	bne.n	8006d84 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 f8a9 	bl	8007ec0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d102      	bne.n	8006d7c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a4a      	ldr	r2, [pc, #296]	; (8006ea4 <HAL_TIM_Encoder_Init+0x164>)
 8006d7a:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6812      	ldr	r2, [r2, #0]
 8006d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d9a:	f023 0307 	bic.w	r3, r3, #7
 8006d9e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	3304      	adds	r3, #4
 8006da8:	4619      	mov	r1, r3
 8006daa:	4610      	mov	r0, r2
 8006dac:	f000 fdbc 	bl	8007928 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dd8:	f023 0303 	bic.w	r3, r3, #3
 8006ddc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	021b      	lsls	r3, r3, #8
 8006de8:	4313      	orrs	r3, r2
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006df6:	f023 030c 	bic.w	r3, r3, #12
 8006dfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	021b      	lsls	r3, r3, #8
 8006e12:	4313      	orrs	r3, r2
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	011a      	lsls	r2, r3, #4
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	031b      	lsls	r3, r3, #12
 8006e26:	4313      	orrs	r3, r2
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006e34:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006e3c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	08004059 	.word	0x08004059

08006ea8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eb8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ec0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ec8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006ed0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d110      	bne.n	8006efa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d102      	bne.n	8006ee4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ede:	7b7b      	ldrb	r3, [r7, #13]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d001      	beq.n	8006ee8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e069      	b.n	8006fbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ef8:	e031      	b.n	8006f5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b04      	cmp	r3, #4
 8006efe:	d110      	bne.n	8006f22 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d102      	bne.n	8006f0c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f06:	7b3b      	ldrb	r3, [r7, #12]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d001      	beq.n	8006f10 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e055      	b.n	8006fbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f20:	e01d      	b.n	8006f5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d108      	bne.n	8006f3a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f28:	7bbb      	ldrb	r3, [r7, #14]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d105      	bne.n	8006f3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f2e:	7b7b      	ldrb	r3, [r7, #13]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d102      	bne.n	8006f3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f34:	7b3b      	ldrb	r3, [r7, #12]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d001      	beq.n	8006f3e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e03e      	b.n	8006fbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2202      	movs	r2, #2
 8006f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2202      	movs	r2, #2
 8006f4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2202      	movs	r2, #2
 8006f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2202      	movs	r2, #2
 8006f5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <HAL_TIM_Encoder_Start+0xc4>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d008      	beq.n	8006f7c <HAL_TIM_Encoder_Start+0xd4>
 8006f6a:	e00f      	b.n	8006f8c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2201      	movs	r2, #1
 8006f72:	2100      	movs	r1, #0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 ff7d 	bl	8007e74 <TIM_CCxChannelCmd>
      break;
 8006f7a:	e016      	b.n	8006faa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2201      	movs	r2, #1
 8006f82:	2104      	movs	r1, #4
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 ff75 	bl	8007e74 <TIM_CCxChannelCmd>
      break;
 8006f8a:	e00e      	b.n	8006faa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2201      	movs	r2, #1
 8006f92:	2100      	movs	r1, #0
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 ff6d 	bl	8007e74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	2104      	movs	r1, #4
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 ff66 	bl	8007e74 <TIM_CCxChannelCmd>
      break;
 8006fa8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f042 0201 	orr.w	r2, r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d128      	bne.n	800702c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d121      	bne.n	800702c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f06f 0202 	mvn.w	r2, #2
 8006ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	f003 0303 	and.w	r3, r3, #3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d005      	beq.n	8007012 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	4798      	blx	r3
 8007010:	e009      	b.n	8007026 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	f003 0304 	and.w	r3, r3, #4
 8007036:	2b04      	cmp	r3, #4
 8007038:	d128      	bne.n	800708c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b04      	cmp	r3, #4
 8007046:	d121      	bne.n	800708c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f06f 0204 	mvn.w	r2, #4
 8007050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2202      	movs	r2, #2
 8007056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007062:	2b00      	cmp	r3, #0
 8007064:	d005      	beq.n	8007072 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	4798      	blx	r3
 8007070:	e009      	b.n	8007086 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	f003 0308 	and.w	r3, r3, #8
 8007096:	2b08      	cmp	r3, #8
 8007098:	d128      	bne.n	80070ec <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	f003 0308 	and.w	r3, r3, #8
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d121      	bne.n	80070ec <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f06f 0208 	mvn.w	r2, #8
 80070b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2204      	movs	r2, #4
 80070b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	f003 0303 	and.w	r3, r3, #3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d005      	beq.n	80070d2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	4798      	blx	r3
 80070d0:	e009      	b.n	80070e6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	f003 0310 	and.w	r3, r3, #16
 80070f6:	2b10      	cmp	r3, #16
 80070f8:	d128      	bne.n	800714c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f003 0310 	and.w	r3, r3, #16
 8007104:	2b10      	cmp	r3, #16
 8007106:	d121      	bne.n	800714c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f06f 0210 	mvn.w	r2, #16
 8007110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2208      	movs	r2, #8
 8007116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007122:	2b00      	cmp	r3, #0
 8007124:	d005      	beq.n	8007132 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	4798      	blx	r3
 8007130:	e009      	b.n	8007146 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b01      	cmp	r3, #1
 8007158:	d110      	bne.n	800717c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b01      	cmp	r3, #1
 8007166:	d109      	bne.n	800717c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f06f 0201 	mvn.w	r2, #1
 8007170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007186:	2b80      	cmp	r3, #128	; 0x80
 8007188:	d110      	bne.n	80071ac <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007194:	2b80      	cmp	r3, #128	; 0x80
 8007196:	d109      	bne.n	80071ac <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b6:	2b40      	cmp	r3, #64	; 0x40
 80071b8:	d110      	bne.n	80071dc <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c4:	2b40      	cmp	r3, #64	; 0x40
 80071c6:	d109      	bne.n	80071dc <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	f003 0320 	and.w	r3, r3, #32
 80071e6:	2b20      	cmp	r3, #32
 80071e8:	d110      	bne.n	800720c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f003 0320 	and.w	r3, r3, #32
 80071f4:	2b20      	cmp	r3, #32
 80071f6:	d109      	bne.n	800720c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f06f 0220 	mvn.w	r2, #32
 8007200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800720c:	bf00      	nop
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <HAL_TIM_OC_ConfigChannel+0x1e>
 800722e:	2302      	movs	r3, #2
 8007230:	e048      	b.n	80072c4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b0c      	cmp	r3, #12
 800723e:	d839      	bhi.n	80072b4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007240:	a201      	add	r2, pc, #4	; (adr r2, 8007248 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007246:	bf00      	nop
 8007248:	0800727d 	.word	0x0800727d
 800724c:	080072b5 	.word	0x080072b5
 8007250:	080072b5 	.word	0x080072b5
 8007254:	080072b5 	.word	0x080072b5
 8007258:	0800728b 	.word	0x0800728b
 800725c:	080072b5 	.word	0x080072b5
 8007260:	080072b5 	.word	0x080072b5
 8007264:	080072b5 	.word	0x080072b5
 8007268:	08007299 	.word	0x08007299
 800726c:	080072b5 	.word	0x080072b5
 8007270:	080072b5 	.word	0x080072b5
 8007274:	080072b5 	.word	0x080072b5
 8007278:	080072a7 	.word	0x080072a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68b9      	ldr	r1, [r7, #8]
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fbd0 	bl	8007a28 <TIM_OC1_SetConfig>
      break;
 8007288:	e017      	b.n	80072ba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68b9      	ldr	r1, [r7, #8]
 8007290:	4618      	mov	r0, r3
 8007292:	f000 fc2f 	bl	8007af4 <TIM_OC2_SetConfig>
      break;
 8007296:	e010      	b.n	80072ba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68b9      	ldr	r1, [r7, #8]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 fc94 	bl	8007bcc <TIM_OC3_SetConfig>
      break;
 80072a4:	e009      	b.n	80072ba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 fcf7 	bl	8007ca0 <TIM_OC4_SetConfig>
      break;
 80072b2:	e002      	b.n	80072ba <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	75fb      	strb	r3, [r7, #23]
      break;
 80072b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3718      	adds	r7, #24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d101      	bne.n	80072ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072e6:	2302      	movs	r3, #2
 80072e8:	e0ae      	b.n	8007448 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b0c      	cmp	r3, #12
 80072f6:	f200 809f 	bhi.w	8007438 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80072fa:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007300:	08007335 	.word	0x08007335
 8007304:	08007439 	.word	0x08007439
 8007308:	08007439 	.word	0x08007439
 800730c:	08007439 	.word	0x08007439
 8007310:	08007375 	.word	0x08007375
 8007314:	08007439 	.word	0x08007439
 8007318:	08007439 	.word	0x08007439
 800731c:	08007439 	.word	0x08007439
 8007320:	080073b7 	.word	0x080073b7
 8007324:	08007439 	.word	0x08007439
 8007328:	08007439 	.word	0x08007439
 800732c:	08007439 	.word	0x08007439
 8007330:	080073f7 	.word	0x080073f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68b9      	ldr	r1, [r7, #8]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fb74 	bl	8007a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699a      	ldr	r2, [r3, #24]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0208 	orr.w	r2, r2, #8
 800734e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699a      	ldr	r2, [r3, #24]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0204 	bic.w	r2, r2, #4
 800735e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6999      	ldr	r1, [r3, #24]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	691a      	ldr	r2, [r3, #16]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	619a      	str	r2, [r3, #24]
      break;
 8007372:	e064      	b.n	800743e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68b9      	ldr	r1, [r7, #8]
 800737a:	4618      	mov	r0, r3
 800737c:	f000 fbba 	bl	8007af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	699a      	ldr	r2, [r3, #24]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800738e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	699a      	ldr	r2, [r3, #24]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800739e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6999      	ldr	r1, [r3, #24]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	021a      	lsls	r2, r3, #8
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	619a      	str	r2, [r3, #24]
      break;
 80073b4:	e043      	b.n	800743e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68b9      	ldr	r1, [r7, #8]
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 fc05 	bl	8007bcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69da      	ldr	r2, [r3, #28]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f042 0208 	orr.w	r2, r2, #8
 80073d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69da      	ldr	r2, [r3, #28]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0204 	bic.w	r2, r2, #4
 80073e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69d9      	ldr	r1, [r3, #28]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	691a      	ldr	r2, [r3, #16]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	61da      	str	r2, [r3, #28]
      break;
 80073f4:	e023      	b.n	800743e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68b9      	ldr	r1, [r7, #8]
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 fc4f 	bl	8007ca0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69da      	ldr	r2, [r3, #28]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	69da      	ldr	r2, [r3, #28]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69d9      	ldr	r1, [r3, #28]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	021a      	lsls	r2, r3, #8
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	61da      	str	r2, [r3, #28]
      break;
 8007436:	e002      	b.n	800743e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	75fb      	strb	r3, [r7, #23]
      break;
 800743c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007446:	7dfb      	ldrb	r3, [r7, #23]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_TIM_ConfigClockSource+0x1c>
 8007468:	2302      	movs	r3, #2
 800746a:	e0b4      	b.n	80075d6 <HAL_TIM_ConfigClockSource+0x186>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800748a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007492:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a4:	d03e      	beq.n	8007524 <HAL_TIM_ConfigClockSource+0xd4>
 80074a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074aa:	f200 8087 	bhi.w	80075bc <HAL_TIM_ConfigClockSource+0x16c>
 80074ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b2:	f000 8086 	beq.w	80075c2 <HAL_TIM_ConfigClockSource+0x172>
 80074b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ba:	d87f      	bhi.n	80075bc <HAL_TIM_ConfigClockSource+0x16c>
 80074bc:	2b70      	cmp	r3, #112	; 0x70
 80074be:	d01a      	beq.n	80074f6 <HAL_TIM_ConfigClockSource+0xa6>
 80074c0:	2b70      	cmp	r3, #112	; 0x70
 80074c2:	d87b      	bhi.n	80075bc <HAL_TIM_ConfigClockSource+0x16c>
 80074c4:	2b60      	cmp	r3, #96	; 0x60
 80074c6:	d050      	beq.n	800756a <HAL_TIM_ConfigClockSource+0x11a>
 80074c8:	2b60      	cmp	r3, #96	; 0x60
 80074ca:	d877      	bhi.n	80075bc <HAL_TIM_ConfigClockSource+0x16c>
 80074cc:	2b50      	cmp	r3, #80	; 0x50
 80074ce:	d03c      	beq.n	800754a <HAL_TIM_ConfigClockSource+0xfa>
 80074d0:	2b50      	cmp	r3, #80	; 0x50
 80074d2:	d873      	bhi.n	80075bc <HAL_TIM_ConfigClockSource+0x16c>
 80074d4:	2b40      	cmp	r3, #64	; 0x40
 80074d6:	d058      	beq.n	800758a <HAL_TIM_ConfigClockSource+0x13a>
 80074d8:	2b40      	cmp	r3, #64	; 0x40
 80074da:	d86f      	bhi.n	80075bc <HAL_TIM_ConfigClockSource+0x16c>
 80074dc:	2b30      	cmp	r3, #48	; 0x30
 80074de:	d064      	beq.n	80075aa <HAL_TIM_ConfigClockSource+0x15a>
 80074e0:	2b30      	cmp	r3, #48	; 0x30
 80074e2:	d86b      	bhi.n	80075bc <HAL_TIM_ConfigClockSource+0x16c>
 80074e4:	2b20      	cmp	r3, #32
 80074e6:	d060      	beq.n	80075aa <HAL_TIM_ConfigClockSource+0x15a>
 80074e8:	2b20      	cmp	r3, #32
 80074ea:	d867      	bhi.n	80075bc <HAL_TIM_ConfigClockSource+0x16c>
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d05c      	beq.n	80075aa <HAL_TIM_ConfigClockSource+0x15a>
 80074f0:	2b10      	cmp	r3, #16
 80074f2:	d05a      	beq.n	80075aa <HAL_TIM_ConfigClockSource+0x15a>
 80074f4:	e062      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	6899      	ldr	r1, [r3, #8]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	f000 fc95 	bl	8007e34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007518:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	609a      	str	r2, [r3, #8]
      break;
 8007522:	e04f      	b.n	80075c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6818      	ldr	r0, [r3, #0]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	6899      	ldr	r1, [r3, #8]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f000 fc7e 	bl	8007e34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007546:	609a      	str	r2, [r3, #8]
      break;
 8007548:	e03c      	b.n	80075c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6818      	ldr	r0, [r3, #0]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	6859      	ldr	r1, [r3, #4]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	461a      	mov	r2, r3
 8007558:	f000 fbf2 	bl	8007d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2150      	movs	r1, #80	; 0x50
 8007562:	4618      	mov	r0, r3
 8007564:	f000 fc4b 	bl	8007dfe <TIM_ITRx_SetConfig>
      break;
 8007568:	e02c      	b.n	80075c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	6859      	ldr	r1, [r3, #4]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	461a      	mov	r2, r3
 8007578:	f000 fc11 	bl	8007d9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2160      	movs	r1, #96	; 0x60
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fc3b 	bl	8007dfe <TIM_ITRx_SetConfig>
      break;
 8007588:	e01c      	b.n	80075c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6818      	ldr	r0, [r3, #0]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	6859      	ldr	r1, [r3, #4]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	461a      	mov	r2, r3
 8007598:	f000 fbd2 	bl	8007d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2140      	movs	r1, #64	; 0x40
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fc2b 	bl	8007dfe <TIM_ITRx_SetConfig>
      break;
 80075a8:	e00c      	b.n	80075c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4619      	mov	r1, r3
 80075b4:	4610      	mov	r0, r2
 80075b6:	f000 fc22 	bl	8007dfe <TIM_ITRx_SetConfig>
      break;
 80075ba:	e003      	b.n	80075c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	73fb      	strb	r3, [r7, #15]
      break;
 80075c0:	e000      	b.n	80075c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80075de:	b480      	push	{r7}
 80075e0:	b083      	sub	sp, #12
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80075e6:	bf00      	nop
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075fa:	bf00      	nop
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007606:	b480      	push	{r7}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800760e:	bf00      	nop
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800761a:	b480      	push	{r7}
 800761c:	b083      	sub	sp, #12
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007622:	bf00      	nop
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007686:	bf00      	nop
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
	...

08007694 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	460b      	mov	r3, r1
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e135      	b.n	800791c <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d101      	bne.n	80076be <HAL_TIM_RegisterCallback+0x2a>
 80076ba:	2302      	movs	r3, #2
 80076bc:	e12e      	b.n	800791c <HAL_TIM_RegisterCallback+0x288>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	f040 80ba 	bne.w	8007848 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 80076d4:	7afb      	ldrb	r3, [r7, #11]
 80076d6:	2b1a      	cmp	r3, #26
 80076d8:	f200 80b3 	bhi.w	8007842 <HAL_TIM_RegisterCallback+0x1ae>
 80076dc:	a201      	add	r2, pc, #4	; (adr r2, 80076e4 <HAL_TIM_RegisterCallback+0x50>)
 80076de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e2:	bf00      	nop
 80076e4:	08007751 	.word	0x08007751
 80076e8:	08007759 	.word	0x08007759
 80076ec:	08007761 	.word	0x08007761
 80076f0:	08007769 	.word	0x08007769
 80076f4:	08007771 	.word	0x08007771
 80076f8:	08007779 	.word	0x08007779
 80076fc:	08007781 	.word	0x08007781
 8007700:	08007789 	.word	0x08007789
 8007704:	08007791 	.word	0x08007791
 8007708:	08007799 	.word	0x08007799
 800770c:	080077a1 	.word	0x080077a1
 8007710:	080077a9 	.word	0x080077a9
 8007714:	080077b1 	.word	0x080077b1
 8007718:	080077b9 	.word	0x080077b9
 800771c:	080077c1 	.word	0x080077c1
 8007720:	080077cb 	.word	0x080077cb
 8007724:	080077d5 	.word	0x080077d5
 8007728:	080077df 	.word	0x080077df
 800772c:	080077e9 	.word	0x080077e9
 8007730:	080077f3 	.word	0x080077f3
 8007734:	080077fd 	.word	0x080077fd
 8007738:	08007807 	.word	0x08007807
 800773c:	08007811 	.word	0x08007811
 8007740:	0800781b 	.word	0x0800781b
 8007744:	08007825 	.word	0x08007825
 8007748:	0800782f 	.word	0x0800782f
 800774c:	08007839 	.word	0x08007839
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8007756:	e0dc      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800775e:	e0d8      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8007766:	e0d4      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800776e:	e0d0      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8007776:	e0cc      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800777e:	e0c8      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8007786:	e0c4      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800778e:	e0c0      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8007796:	e0bc      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800779e:	e0b8      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80077a6:	e0b4      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80077ae:	e0b0      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80077b6:	e0ac      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80077be:	e0a8      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 80077c8:	e0a3      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80077d2:	e09e      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80077dc:	e099      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80077e6:	e094      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 80077f0:	e08f      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 80077fa:	e08a      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8007804:	e085      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800780e:	e080      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8007818:	e07b      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8007822:	e076      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800782c:	e071      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8007836:	e06c      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8007840:	e067      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	75fb      	strb	r3, [r7, #23]
        break;
 8007846:	e064      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d15c      	bne.n	800790e <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8007854:	7afb      	ldrb	r3, [r7, #11]
 8007856:	2b0d      	cmp	r3, #13
 8007858:	d856      	bhi.n	8007908 <HAL_TIM_RegisterCallback+0x274>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <HAL_TIM_RegisterCallback+0x1cc>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007899 	.word	0x08007899
 8007864:	080078a1 	.word	0x080078a1
 8007868:	080078a9 	.word	0x080078a9
 800786c:	080078b1 	.word	0x080078b1
 8007870:	080078b9 	.word	0x080078b9
 8007874:	080078c1 	.word	0x080078c1
 8007878:	080078c9 	.word	0x080078c9
 800787c:	080078d1 	.word	0x080078d1
 8007880:	080078d9 	.word	0x080078d9
 8007884:	080078e1 	.word	0x080078e1
 8007888:	080078e9 	.word	0x080078e9
 800788c:	080078f1 	.word	0x080078f1
 8007890:	080078f9 	.word	0x080078f9
 8007894:	08007901 	.word	0x08007901
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800789e:	e038      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80078a6:	e034      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80078ae:	e030      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80078b6:	e02c      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80078be:	e028      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80078c6:	e024      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80078ce:	e020      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80078d6:	e01c      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80078de:	e018      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80078e6:	e014      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80078ee:	e010      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80078f6:	e00c      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80078fe:	e008      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8007906:	e004      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	75fb      	strb	r3, [r7, #23]
        break;
 800790c:	e001      	b.n	8007912 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800791a:	7dfb      	ldrb	r3, [r7, #23]
}
 800791c:	4618      	mov	r0, r3
 800791e:	371c      	adds	r7, #28
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a34      	ldr	r2, [pc, #208]	; (8007a0c <TIM_Base_SetConfig+0xe4>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d00f      	beq.n	8007960 <TIM_Base_SetConfig+0x38>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007946:	d00b      	beq.n	8007960 <TIM_Base_SetConfig+0x38>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a31      	ldr	r2, [pc, #196]	; (8007a10 <TIM_Base_SetConfig+0xe8>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d007      	beq.n	8007960 <TIM_Base_SetConfig+0x38>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a30      	ldr	r2, [pc, #192]	; (8007a14 <TIM_Base_SetConfig+0xec>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d003      	beq.n	8007960 <TIM_Base_SetConfig+0x38>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a2f      	ldr	r2, [pc, #188]	; (8007a18 <TIM_Base_SetConfig+0xf0>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d108      	bne.n	8007972 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a25      	ldr	r2, [pc, #148]	; (8007a0c <TIM_Base_SetConfig+0xe4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d01b      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007980:	d017      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a22      	ldr	r2, [pc, #136]	; (8007a10 <TIM_Base_SetConfig+0xe8>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d013      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a21      	ldr	r2, [pc, #132]	; (8007a14 <TIM_Base_SetConfig+0xec>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00f      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a20      	ldr	r2, [pc, #128]	; (8007a18 <TIM_Base_SetConfig+0xf0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00b      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a1f      	ldr	r2, [pc, #124]	; (8007a1c <TIM_Base_SetConfig+0xf4>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d007      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a1e      	ldr	r2, [pc, #120]	; (8007a20 <TIM_Base_SetConfig+0xf8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d003      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a1d      	ldr	r2, [pc, #116]	; (8007a24 <TIM_Base_SetConfig+0xfc>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d108      	bne.n	80079c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a08      	ldr	r2, [pc, #32]	; (8007a0c <TIM_Base_SetConfig+0xe4>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d103      	bne.n	80079f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	691a      	ldr	r2, [r3, #16]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	615a      	str	r2, [r3, #20]
}
 80079fe:	bf00      	nop
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	40010000 	.word	0x40010000
 8007a10:	40000400 	.word	0x40000400
 8007a14:	40000800 	.word	0x40000800
 8007a18:	40000c00 	.word	0x40000c00
 8007a1c:	40014000 	.word	0x40014000
 8007a20:	40014400 	.word	0x40014400
 8007a24:	40014800 	.word	0x40014800

08007a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	f023 0201 	bic.w	r2, r3, #1
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0303 	bic.w	r3, r3, #3
 8007a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f023 0302 	bic.w	r3, r3, #2
 8007a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a1c      	ldr	r2, [pc, #112]	; (8007af0 <TIM_OC1_SetConfig+0xc8>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d10c      	bne.n	8007a9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f023 0308 	bic.w	r3, r3, #8
 8007a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f023 0304 	bic.w	r3, r3, #4
 8007a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a13      	ldr	r2, [pc, #76]	; (8007af0 <TIM_OC1_SetConfig+0xc8>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d111      	bne.n	8007aca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	621a      	str	r2, [r3, #32]
}
 8007ae4:	bf00      	nop
 8007ae6:	371c      	adds	r7, #28
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	40010000 	.word	0x40010000

08007af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	f023 0210 	bic.w	r2, r3, #16
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	021b      	lsls	r3, r3, #8
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f023 0320 	bic.w	r3, r3, #32
 8007b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	011b      	lsls	r3, r3, #4
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a1e      	ldr	r2, [pc, #120]	; (8007bc8 <TIM_OC2_SetConfig+0xd4>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d10d      	bne.n	8007b70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	011b      	lsls	r3, r3, #4
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a15      	ldr	r2, [pc, #84]	; (8007bc8 <TIM_OC2_SetConfig+0xd4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d113      	bne.n	8007ba0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	695b      	ldr	r3, [r3, #20]
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	621a      	str	r2, [r3, #32]
}
 8007bba:	bf00      	nop
 8007bbc:	371c      	adds	r7, #28
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	40010000 	.word	0x40010000

08007bcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b087      	sub	sp, #28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f023 0303 	bic.w	r3, r3, #3
 8007c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a1d      	ldr	r2, [pc, #116]	; (8007c9c <TIM_OC3_SetConfig+0xd0>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d10d      	bne.n	8007c46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	021b      	lsls	r3, r3, #8
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a14      	ldr	r2, [pc, #80]	; (8007c9c <TIM_OC3_SetConfig+0xd0>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d113      	bne.n	8007c76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	011b      	lsls	r3, r3, #4
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	011b      	lsls	r3, r3, #4
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	621a      	str	r2, [r3, #32]
}
 8007c90:	bf00      	nop
 8007c92:	371c      	adds	r7, #28
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	40010000 	.word	0x40010000

08007ca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	021b      	lsls	r3, r3, #8
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	031b      	lsls	r3, r3, #12
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a10      	ldr	r2, [pc, #64]	; (8007d3c <TIM_OC4_SetConfig+0x9c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d109      	bne.n	8007d14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	019b      	lsls	r3, r3, #6
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	621a      	str	r2, [r3, #32]
}
 8007d2e:	bf00      	nop
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	40010000 	.word	0x40010000

08007d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	f023 0201 	bic.w	r2, r3, #1
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	011b      	lsls	r3, r3, #4
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f023 030a 	bic.w	r3, r3, #10
 8007d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	621a      	str	r2, [r3, #32]
}
 8007d92:	bf00      	nop
 8007d94:	371c      	adds	r7, #28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b087      	sub	sp, #28
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	60f8      	str	r0, [r7, #12]
 8007da6:	60b9      	str	r1, [r7, #8]
 8007da8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	f023 0210 	bic.w	r2, r3, #16
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	031b      	lsls	r3, r3, #12
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	011b      	lsls	r3, r3, #4
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	697a      	ldr	r2, [r7, #20]
 8007dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	621a      	str	r2, [r3, #32]
}
 8007df2:	bf00      	nop
 8007df4:	371c      	adds	r7, #28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b085      	sub	sp, #20
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	f043 0307 	orr.w	r3, r3, #7
 8007e20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	609a      	str	r2, [r3, #8]
}
 8007e28:	bf00      	nop
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	021a      	lsls	r2, r3, #8
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	431a      	orrs	r2, r3
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	609a      	str	r2, [r3, #8]
}
 8007e68:	bf00      	nop
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	f003 031f 	and.w	r3, r3, #31
 8007e86:	2201      	movs	r2, #1
 8007e88:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6a1a      	ldr	r2, [r3, #32]
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	43db      	mvns	r3, r3
 8007e96:	401a      	ands	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6a1a      	ldr	r2, [r3, #32]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f003 031f 	and.w	r3, r3, #31
 8007ea6:	6879      	ldr	r1, [r7, #4]
 8007ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8007eac:	431a      	orrs	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	621a      	str	r2, [r3, #32]
}
 8007eb2:	bf00      	nop
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
	...

08007ec0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a1c      	ldr	r2, [pc, #112]	; (8007f3c <TIM_ResetCallback+0x7c>)
 8007ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a1b      	ldr	r2, [pc, #108]	; (8007f40 <TIM_ResetCallback+0x80>)
 8007ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a1a      	ldr	r2, [pc, #104]	; (8007f44 <TIM_ResetCallback+0x84>)
 8007edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a19      	ldr	r2, [pc, #100]	; (8007f48 <TIM_ResetCallback+0x88>)
 8007ee4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a18      	ldr	r2, [pc, #96]	; (8007f4c <TIM_ResetCallback+0x8c>)
 8007eec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a17      	ldr	r2, [pc, #92]	; (8007f50 <TIM_ResetCallback+0x90>)
 8007ef4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a16      	ldr	r2, [pc, #88]	; (8007f54 <TIM_ResetCallback+0x94>)
 8007efc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a15      	ldr	r2, [pc, #84]	; (8007f58 <TIM_ResetCallback+0x98>)
 8007f04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a14      	ldr	r2, [pc, #80]	; (8007f5c <TIM_ResetCallback+0x9c>)
 8007f0c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a13      	ldr	r2, [pc, #76]	; (8007f60 <TIM_ResetCallback+0xa0>)
 8007f14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a12      	ldr	r2, [pc, #72]	; (8007f64 <TIM_ResetCallback+0xa4>)
 8007f1c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a11      	ldr	r2, [pc, #68]	; (8007f68 <TIM_ResetCallback+0xa8>)
 8007f24:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a10      	ldr	r2, [pc, #64]	; (8007f6c <TIM_ResetCallback+0xac>)
 8007f2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	08003475 	.word	0x08003475
 8007f40:	080075df 	.word	0x080075df
 8007f44:	08007657 	.word	0x08007657
 8007f48:	0800766b 	.word	0x0800766b
 8007f4c:	08007607 	.word	0x08007607
 8007f50:	0800761b 	.word	0x0800761b
 8007f54:	080075f3 	.word	0x080075f3
 8007f58:	0800762f 	.word	0x0800762f
 8007f5c:	08007643 	.word	0x08007643
 8007f60:	0800767f 	.word	0x0800767f
 8007f64:	080080f1 	.word	0x080080f1
 8007f68:	08008105 	.word	0x08008105
 8007f6c:	08008119 	.word	0x08008119

08007f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d101      	bne.n	8007f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f84:	2302      	movs	r3, #2
 8007f86:	e050      	b.n	800802a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a1c      	ldr	r2, [pc, #112]	; (8008038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d018      	beq.n	8007ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fd4:	d013      	beq.n	8007ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a18      	ldr	r2, [pc, #96]	; (800803c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d00e      	beq.n	8007ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a16      	ldr	r2, [pc, #88]	; (8008040 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d009      	beq.n	8007ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a15      	ldr	r2, [pc, #84]	; (8008044 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d004      	beq.n	8007ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a13      	ldr	r2, [pc, #76]	; (8008048 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d10c      	bne.n	8008018 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	4313      	orrs	r3, r2
 800800e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	40010000 	.word	0x40010000
 800803c:	40000400 	.word	0x40000400
 8008040:	40000800 	.word	0x40000800
 8008044:	40000c00 	.word	0x40000c00
 8008048:	40014000 	.word	0x40014000

0800804c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008056:	2300      	movs	r3, #0
 8008058:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008060:	2b01      	cmp	r3, #1
 8008062:	d101      	bne.n	8008068 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008064:	2302      	movs	r3, #2
 8008066:	e03d      	b.n	80080e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	4313      	orrs	r3, r2
 800807c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	4313      	orrs	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	4313      	orrs	r3, r2
 8008098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	69db      	ldr	r3, [r3, #28]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e04a      	b.n	80081d4 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d111      	bne.n	800816e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fd72 	bl	8008c3c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800815c:	2b00      	cmp	r3, #0
 800815e:	d102      	bne.n	8008166 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a1e      	ldr	r2, [pc, #120]	; (80081dc <HAL_UART_Init+0xb0>)
 8008164:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2224      	movs	r2, #36	; 0x24
 8008172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68da      	ldr	r2, [r3, #12]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008184:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f001 f83c 	bl	8009204 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	691a      	ldr	r2, [r3, #16]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800819a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	695a      	ldr	r2, [r3, #20]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2220      	movs	r2, #32
 80081ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	080041e9 	.word	0x080041e9

080081e0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b087      	sub	sp, #28
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	460b      	mov	r3, r1
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d107      	bne.n	8008208 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fc:	f043 0220 	orr.w	r2, r3, #32
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e08c      	b.n	8008322 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800820e:	2b01      	cmp	r3, #1
 8008210:	d101      	bne.n	8008216 <HAL_UART_RegisterCallback+0x36>
 8008212:	2302      	movs	r3, #2
 8008214:	e085      	b.n	8008322 <HAL_UART_RegisterCallback+0x142>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2b20      	cmp	r3, #32
 8008228:	d151      	bne.n	80082ce <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800822a:	7afb      	ldrb	r3, [r7, #11]
 800822c:	2b0c      	cmp	r3, #12
 800822e:	d845      	bhi.n	80082bc <HAL_UART_RegisterCallback+0xdc>
 8008230:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <HAL_UART_RegisterCallback+0x58>)
 8008232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008236:	bf00      	nop
 8008238:	0800826d 	.word	0x0800826d
 800823c:	08008275 	.word	0x08008275
 8008240:	0800827d 	.word	0x0800827d
 8008244:	08008285 	.word	0x08008285
 8008248:	0800828d 	.word	0x0800828d
 800824c:	08008295 	.word	0x08008295
 8008250:	0800829d 	.word	0x0800829d
 8008254:	080082a5 	.word	0x080082a5
 8008258:	080082bd 	.word	0x080082bd
 800825c:	080082bd 	.word	0x080082bd
 8008260:	080082bd 	.word	0x080082bd
 8008264:	080082ad 	.word	0x080082ad
 8008268:	080082b5 	.word	0x080082b5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8008272:	e051      	b.n	8008318 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800827a:	e04d      	b.n	8008318 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008282:	e049      	b.n	8008318 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800828a:	e045      	b.n	8008318 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008292:	e041      	b.n	8008318 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800829a:	e03d      	b.n	8008318 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80082a2:	e039      	b.n	8008318 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80082aa:	e035      	b.n	8008318 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80082b2:	e031      	b.n	8008318 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80082ba:	e02d      	b.n	8008318 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c0:	f043 0220 	orr.w	r2, r3, #32
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	75fb      	strb	r3, [r7, #23]
        break;
 80082cc:	e024      	b.n	8008318 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d116      	bne.n	8008308 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 80082da:	7afb      	ldrb	r3, [r7, #11]
 80082dc:	2b0b      	cmp	r3, #11
 80082de:	d002      	beq.n	80082e6 <HAL_UART_RegisterCallback+0x106>
 80082e0:	2b0c      	cmp	r3, #12
 80082e2:	d004      	beq.n	80082ee <HAL_UART_RegisterCallback+0x10e>
 80082e4:	e007      	b.n	80082f6 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80082ec:	e014      	b.n	8008318 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80082f4:	e010      	b.n	8008318 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fa:	f043 0220 	orr.w	r2, r3, #32
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	75fb      	strb	r3, [r7, #23]
        break;
 8008306:	e007      	b.n	8008318 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830c:	f043 0220 	orr.w	r2, r3, #32
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008320:	7dfb      	ldrb	r3, [r7, #23]
}
 8008322:	4618      	mov	r0, r3
 8008324:	371c      	adds	r7, #28
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop

08008330 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	4613      	mov	r3, r2
 800833c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b20      	cmp	r3, #32
 8008348:	d130      	bne.n	80083ac <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d002      	beq.n	8008356 <HAL_UART_Transmit_IT+0x26>
 8008350:	88fb      	ldrh	r3, [r7, #6]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e029      	b.n	80083ae <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008360:	2b01      	cmp	r3, #1
 8008362:	d101      	bne.n	8008368 <HAL_UART_Transmit_IT+0x38>
 8008364:	2302      	movs	r3, #2
 8008366:	e022      	b.n	80083ae <HAL_UART_Transmit_IT+0x7e>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	88fa      	ldrh	r2, [r7, #6]
 800837a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	88fa      	ldrh	r2, [r7, #6]
 8008380:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2221      	movs	r2, #33	; 0x21
 800838c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68da      	ldr	r2, [r3, #12]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083a6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	e000      	b.n	80083ae <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80083ac:	2302      	movs	r3, #2
  }
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	60f8      	str	r0, [r7, #12]
 80083c2:	60b9      	str	r1, [r7, #8]
 80083c4:	4613      	mov	r3, r2
 80083c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b20      	cmp	r3, #32
 80083d2:	d11d      	bne.n	8008410 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <HAL_UART_Receive_IT+0x26>
 80083da:	88fb      	ldrh	r3, [r7, #6]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e016      	b.n	8008412 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d101      	bne.n	80083f2 <HAL_UART_Receive_IT+0x38>
 80083ee:	2302      	movs	r3, #2
 80083f0:	e00f      	b.n	8008412 <HAL_UART_Receive_IT+0x58>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008400:	88fb      	ldrh	r3, [r7, #6]
 8008402:	461a      	mov	r2, r3
 8008404:	68b9      	ldr	r1, [r7, #8]
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f000 fcf8 	bl	8008dfc <UART_Start_Receive_IT>
 800840c:	4603      	mov	r3, r0
 800840e:	e000      	b.n	8008412 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008410:	2302      	movs	r3, #2
  }
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
	...

0800841c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08c      	sub	sp, #48	; 0x30
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	4613      	mov	r3, r2
 8008428:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b20      	cmp	r3, #32
 8008434:	d165      	bne.n	8008502 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <HAL_UART_Transmit_DMA+0x26>
 800843c:	88fb      	ldrh	r3, [r7, #6]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e05e      	b.n	8008504 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800844c:	2b01      	cmp	r3, #1
 800844e:	d101      	bne.n	8008454 <HAL_UART_Transmit_DMA+0x38>
 8008450:	2302      	movs	r3, #2
 8008452:	e057      	b.n	8008504 <HAL_UART_Transmit_DMA+0xe8>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	88fa      	ldrh	r2, [r7, #6]
 8008466:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	88fa      	ldrh	r2, [r7, #6]
 800846c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2221      	movs	r2, #33	; 0x21
 8008478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008480:	4a22      	ldr	r2, [pc, #136]	; (800850c <HAL_UART_Transmit_DMA+0xf0>)
 8008482:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008488:	4a21      	ldr	r2, [pc, #132]	; (8008510 <HAL_UART_Transmit_DMA+0xf4>)
 800848a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008490:	4a20      	ldr	r2, [pc, #128]	; (8008514 <HAL_UART_Transmit_DMA+0xf8>)
 8008492:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008498:	2200      	movs	r2, #0
 800849a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800849c:	f107 0308 	add.w	r3, r7, #8
 80084a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80084a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a8:	6819      	ldr	r1, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3304      	adds	r3, #4
 80084b0:	461a      	mov	r2, r3
 80084b2:	88fb      	ldrh	r3, [r7, #6]
 80084b4:	f7fc ff3e 	bl	8005334 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084c0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3314      	adds	r3, #20
 80084d0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	617b      	str	r3, [r7, #20]
   return(result);
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3314      	adds	r3, #20
 80084e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084ea:	627a      	str	r2, [r7, #36]	; 0x24
 80084ec:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	6a39      	ldr	r1, [r7, #32]
 80084f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f2:	e841 2300 	strex	r3, r2, [r1]
 80084f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e5      	bne.n	80084ca <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	e000      	b.n	8008504 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008502:	2302      	movs	r3, #2
  }
}
 8008504:	4618      	mov	r0, r3
 8008506:	3730      	adds	r7, #48	; 0x30
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	08008cad 	.word	0x08008cad
 8008510:	08008d49 	.word	0x08008d49
 8008514:	08008d67 	.word	0x08008d67

08008518 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b09a      	sub	sp, #104	; 0x68
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	330c      	adds	r3, #12
 8008526:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800852a:	e853 3f00 	ldrex	r3, [r3]
 800852e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008532:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008536:	667b      	str	r3, [r7, #100]	; 0x64
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	330c      	adds	r3, #12
 800853e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008540:	657a      	str	r2, [r7, #84]	; 0x54
 8008542:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008546:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008548:	e841 2300 	strex	r3, r2, [r1]
 800854c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800854e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e5      	bne.n	8008520 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3314      	adds	r3, #20
 800855a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855e:	e853 3f00 	ldrex	r3, [r3]
 8008562:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008566:	f023 0301 	bic.w	r3, r3, #1
 800856a:	663b      	str	r3, [r7, #96]	; 0x60
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3314      	adds	r3, #20
 8008572:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008574:	643a      	str	r2, [r7, #64]	; 0x40
 8008576:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800857a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e5      	bne.n	8008554 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858c:	2b01      	cmp	r3, #1
 800858e:	d119      	bne.n	80085c4 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	330c      	adds	r3, #12
 8008596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	e853 3f00 	ldrex	r3, [r3]
 800859e:	61fb      	str	r3, [r7, #28]
   return(result);
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	f023 0310 	bic.w	r3, r3, #16
 80085a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	330c      	adds	r3, #12
 80085ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085b8:	e841 2300 	strex	r3, r2, [r1]
 80085bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1e5      	bne.n	8008590 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ce:	2b40      	cmp	r3, #64	; 0x40
 80085d0:	d136      	bne.n	8008640 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3314      	adds	r3, #20
 80085d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3314      	adds	r3, #20
 80085f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085f2:	61ba      	str	r2, [r7, #24]
 80085f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f6:	6979      	ldr	r1, [r7, #20]
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e5      	bne.n	80085d2 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860a:	2b00      	cmp	r3, #0
 800860c:	d018      	beq.n	8008640 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008612:	2200      	movs	r2, #0
 8008614:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861a:	4618      	mov	r0, r3
 800861c:	f7fc fee2 	bl	80053e4 <HAL_DMA_Abort>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00c      	beq.n	8008640 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862a:	4618      	mov	r0, r3
 800862c:	f7fd f8f6 	bl	800581c <HAL_DMA_GetError>
 8008630:	4603      	mov	r3, r0
 8008632:	2b20      	cmp	r3, #32
 8008634:	d104      	bne.n	8008640 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2210      	movs	r2, #16
 800863a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e00a      	b.n	8008656 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2220      	movs	r2, #32
 800864a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3768      	adds	r7, #104	; 0x68
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
	...

08008660 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b0ba      	sub	sp, #232	; 0xe8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008686:	2300      	movs	r3, #0
 8008688:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800868c:	2300      	movs	r3, #0
 800868e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008696:	f003 030f 	and.w	r3, r3, #15
 800869a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800869e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10f      	bne.n	80086c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086aa:	f003 0320 	and.w	r3, r3, #32
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d009      	beq.n	80086c6 <HAL_UART_IRQHandler+0x66>
 80086b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fce3 	bl	800908a <UART_Receive_IT>
      return;
 80086c4:	e25b      	b.n	8008b7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80086c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f000 80e1 	beq.w	8008892 <HAL_UART_IRQHandler+0x232>
 80086d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d106      	bne.n	80086ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 80d4 	beq.w	8008892 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00b      	beq.n	800870e <HAL_UART_IRQHandler+0xae>
 80086f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d005      	beq.n	800870e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008706:	f043 0201 	orr.w	r2, r3, #1
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800870e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008712:	f003 0304 	and.w	r3, r3, #4
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00b      	beq.n	8008732 <HAL_UART_IRQHandler+0xd2>
 800871a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	2b00      	cmp	r3, #0
 8008724:	d005      	beq.n	8008732 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872a:	f043 0202 	orr.w	r2, r3, #2
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00b      	beq.n	8008756 <HAL_UART_IRQHandler+0xf6>
 800873e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	2b00      	cmp	r3, #0
 8008748:	d005      	beq.n	8008756 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874e:	f043 0204 	orr.w	r2, r3, #4
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800875a:	f003 0308 	and.w	r3, r3, #8
 800875e:	2b00      	cmp	r3, #0
 8008760:	d011      	beq.n	8008786 <HAL_UART_IRQHandler+0x126>
 8008762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008766:	f003 0320 	and.w	r3, r3, #32
 800876a:	2b00      	cmp	r3, #0
 800876c:	d105      	bne.n	800877a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800876e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	2b00      	cmp	r3, #0
 8008778:	d005      	beq.n	8008786 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877e:	f043 0208 	orr.w	r2, r3, #8
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878a:	2b00      	cmp	r3, #0
 800878c:	f000 81f2 	beq.w	8008b74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008794:	f003 0320 	and.w	r3, r3, #32
 8008798:	2b00      	cmp	r3, #0
 800879a:	d008      	beq.n	80087ae <HAL_UART_IRQHandler+0x14e>
 800879c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087a0:	f003 0320 	and.w	r3, r3, #32
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d002      	beq.n	80087ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fc6e 	bl	800908a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	695b      	ldr	r3, [r3, #20]
 80087b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b8:	2b40      	cmp	r3, #64	; 0x40
 80087ba:	bf0c      	ite	eq
 80087bc:	2301      	moveq	r3, #1
 80087be:	2300      	movne	r3, #0
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	f003 0308 	and.w	r3, r3, #8
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d103      	bne.n	80087da <HAL_UART_IRQHandler+0x17a>
 80087d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d051      	beq.n	800887e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fb74 	bl	8008ec8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ea:	2b40      	cmp	r3, #64	; 0x40
 80087ec:	d142      	bne.n	8008874 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3314      	adds	r3, #20
 80087f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087fc:	e853 3f00 	ldrex	r3, [r3]
 8008800:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008804:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800880c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	3314      	adds	r3, #20
 8008816:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800881a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800881e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008826:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800882a:	e841 2300 	strex	r3, r2, [r1]
 800882e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1d9      	bne.n	80087ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883e:	2b00      	cmp	r3, #0
 8008840:	d013      	beq.n	800886a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008846:	4a7f      	ldr	r2, [pc, #508]	; (8008a44 <HAL_UART_IRQHandler+0x3e4>)
 8008848:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884e:	4618      	mov	r0, r3
 8008850:	f7fc fe38 	bl	80054c4 <HAL_DMA_Abort_IT>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d019      	beq.n	800888e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008864:	4610      	mov	r0, r2
 8008866:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008868:	e011      	b.n	800888e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008872:	e00c      	b.n	800888e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800887c:	e007      	b.n	800888e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800888c:	e172      	b.n	8008b74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800888e:	bf00      	nop
    return;
 8008890:	e170      	b.n	8008b74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008896:	2b01      	cmp	r3, #1
 8008898:	f040 814c 	bne.w	8008b34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800889c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a0:	f003 0310 	and.w	r3, r3, #16
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 8145 	beq.w	8008b34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80088aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088ae:	f003 0310 	and.w	r3, r3, #16
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f000 813e 	beq.w	8008b34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088b8:	2300      	movs	r3, #0
 80088ba:	60bb      	str	r3, [r7, #8]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	60bb      	str	r3, [r7, #8]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	60bb      	str	r3, [r7, #8]
 80088cc:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	695b      	ldr	r3, [r3, #20]
 80088d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d8:	2b40      	cmp	r3, #64	; 0x40
 80088da:	f040 80b5 	bne.w	8008a48 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f000 8142 	beq.w	8008b78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088fc:	429a      	cmp	r2, r3
 80088fe:	f080 813b 	bcs.w	8008b78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008908:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008914:	f000 8088 	beq.w	8008a28 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	330c      	adds	r3, #12
 800891e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008922:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008926:	e853 3f00 	ldrex	r3, [r3]
 800892a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800892e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008936:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	330c      	adds	r3, #12
 8008940:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008944:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008948:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008950:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008954:	e841 2300 	strex	r3, r2, [r1]
 8008958:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800895c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1d9      	bne.n	8008918 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	3314      	adds	r3, #20
 800896a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800896e:	e853 3f00 	ldrex	r3, [r3]
 8008972:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008974:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008976:	f023 0301 	bic.w	r3, r3, #1
 800897a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	3314      	adds	r3, #20
 8008984:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008988:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800898c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008990:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008994:	e841 2300 	strex	r3, r2, [r1]
 8008998:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800899a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1e1      	bne.n	8008964 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3314      	adds	r3, #20
 80089a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089aa:	e853 3f00 	ldrex	r3, [r3]
 80089ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80089b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3314      	adds	r3, #20
 80089c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80089c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80089c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80089ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80089cc:	e841 2300 	strex	r3, r2, [r1]
 80089d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80089d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1e3      	bne.n	80089a0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2220      	movs	r2, #32
 80089dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	330c      	adds	r3, #12
 80089ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089f0:	e853 3f00 	ldrex	r3, [r3]
 80089f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089f8:	f023 0310 	bic.w	r3, r3, #16
 80089fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	330c      	adds	r3, #12
 8008a06:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008a0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8008a0c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a12:	e841 2300 	strex	r3, r2, [r1]
 8008a16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1e3      	bne.n	80089e6 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fc fcde 	bl	80053e4 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8008a34:	b292      	uxth	r2, r2
 8008a36:	1a8a      	subs	r2, r1, r2
 8008a38:	b292      	uxth	r2, r2
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a40:	e09a      	b.n	8008b78 <HAL_UART_IRQHandler+0x518>
 8008a42:	bf00      	nop
 8008a44:	08008f8f 	.word	0x08008f8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 808c 	beq.w	8008b7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008a64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 8087 	beq.w	8008b7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	330c      	adds	r3, #12
 8008a74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	330c      	adds	r3, #12
 8008a8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a92:	647a      	str	r2, [r7, #68]	; 0x44
 8008a94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e3      	bne.n	8008a6e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3314      	adds	r3, #20
 8008aac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	e853 3f00 	ldrex	r3, [r3]
 8008ab4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	f023 0301 	bic.w	r3, r3, #1
 8008abc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3314      	adds	r3, #20
 8008ac6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008aca:	633a      	str	r2, [r7, #48]	; 0x30
 8008acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ad2:	e841 2300 	strex	r3, r2, [r1]
 8008ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1e3      	bne.n	8008aa6 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	330c      	adds	r3, #12
 8008af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	e853 3f00 	ldrex	r3, [r3]
 8008afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f023 0310 	bic.w	r3, r3, #16
 8008b02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	330c      	adds	r3, #12
 8008b0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008b10:	61fa      	str	r2, [r7, #28]
 8008b12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b14:	69b9      	ldr	r1, [r7, #24]
 8008b16:	69fa      	ldr	r2, [r7, #28]
 8008b18:	e841 2300 	strex	r3, r2, [r1]
 8008b1c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1e3      	bne.n	8008aec <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b28:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b32:	e023      	b.n	8008b7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d009      	beq.n	8008b54 <HAL_UART_IRQHandler+0x4f4>
 8008b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d003      	beq.n	8008b54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fa33 	bl	8008fb8 <UART_Transmit_IT>
    return;
 8008b52:	e014      	b.n	8008b7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00e      	beq.n	8008b7e <HAL_UART_IRQHandler+0x51e>
 8008b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d008      	beq.n	8008b7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fa73 	bl	8009058 <UART_EndTransmit_IT>
    return;
 8008b72:	e004      	b.n	8008b7e <HAL_UART_IRQHandler+0x51e>
    return;
 8008b74:	bf00      	nop
 8008b76:	e002      	b.n	8008b7e <HAL_UART_IRQHandler+0x51e>
      return;
 8008b78:	bf00      	nop
 8008b7a:	e000      	b.n	8008b7e <HAL_UART_IRQHandler+0x51e>
      return;
 8008b7c:	bf00      	nop
  }
}
 8008b7e:	37e8      	adds	r7, #232	; 0xe8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a10      	ldr	r2, [pc, #64]	; (8008c88 <UART_InitCallbacksToDefault+0x4c>)
 8008c48:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a0f      	ldr	r2, [pc, #60]	; (8008c8c <UART_InitCallbacksToDefault+0x50>)
 8008c4e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a0f      	ldr	r2, [pc, #60]	; (8008c90 <UART_InitCallbacksToDefault+0x54>)
 8008c54:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a0e      	ldr	r2, [pc, #56]	; (8008c94 <UART_InitCallbacksToDefault+0x58>)
 8008c5a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a0e      	ldr	r2, [pc, #56]	; (8008c98 <UART_InitCallbacksToDefault+0x5c>)
 8008c60:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a0d      	ldr	r2, [pc, #52]	; (8008c9c <UART_InitCallbacksToDefault+0x60>)
 8008c66:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a0d      	ldr	r2, [pc, #52]	; (8008ca0 <UART_InitCallbacksToDefault+0x64>)
 8008c6c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a0c      	ldr	r2, [pc, #48]	; (8008ca4 <UART_InitCallbacksToDefault+0x68>)
 8008c72:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a0c      	ldr	r2, [pc, #48]	; (8008ca8 <UART_InitCallbacksToDefault+0x6c>)
 8008c78:	669a      	str	r2, [r3, #104]	; 0x68

}
 8008c7a:	bf00      	nop
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	08008b99 	.word	0x08008b99
 8008c8c:	08008b85 	.word	0x08008b85
 8008c90:	08008bc1 	.word	0x08008bc1
 8008c94:	08008bad 	.word	0x08008bad
 8008c98:	08008bd5 	.word	0x08008bd5
 8008c9c:	08008be9 	.word	0x08008be9
 8008ca0:	08008bfd 	.word	0x08008bfd
 8008ca4:	08008c11 	.word	0x08008c11
 8008ca8:	08008c25 	.word	0x08008c25

08008cac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b090      	sub	sp, #64	; 0x40
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d137      	bne.n	8008d38 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cca:	2200      	movs	r2, #0
 8008ccc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3314      	adds	r3, #20
 8008cd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd8:	e853 3f00 	ldrex	r3, [r3]
 8008cdc:	623b      	str	r3, [r7, #32]
   return(result);
 8008cde:	6a3b      	ldr	r3, [r7, #32]
 8008ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ce4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	3314      	adds	r3, #20
 8008cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cee:	633a      	str	r2, [r7, #48]	; 0x30
 8008cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cf6:	e841 2300 	strex	r3, r2, [r1]
 8008cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1e5      	bne.n	8008cce <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	330c      	adds	r3, #12
 8008d08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	e853 3f00 	ldrex	r3, [r3]
 8008d10:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d18:	637b      	str	r3, [r7, #52]	; 0x34
 8008d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	330c      	adds	r3, #12
 8008d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d22:	61fa      	str	r2, [r7, #28]
 8008d24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d26:	69b9      	ldr	r1, [r7, #24]
 8008d28:	69fa      	ldr	r2, [r7, #28]
 8008d2a:	e841 2300 	strex	r3, r2, [r1]
 8008d2e:	617b      	str	r3, [r7, #20]
   return(result);
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1e5      	bne.n	8008d02 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d36:	e003      	b.n	8008d40 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8008d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008d3e:	4798      	blx	r3
}
 8008d40:	bf00      	nop
 8008d42:	3740      	adds	r7, #64	; 0x40
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d54:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d5e:	bf00      	nop
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d76:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d82:	2b80      	cmp	r3, #128	; 0x80
 8008d84:	bf0c      	ite	eq
 8008d86:	2301      	moveq	r3, #1
 8008d88:	2300      	movne	r3, #0
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b21      	cmp	r3, #33	; 0x21
 8008d98:	d108      	bne.n	8008dac <UART_DMAError+0x46>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d005      	beq.n	8008dac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	2200      	movs	r2, #0
 8008da4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008da6:	68b8      	ldr	r0, [r7, #8]
 8008da8:	f000 f866 	bl	8008e78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db6:	2b40      	cmp	r3, #64	; 0x40
 8008db8:	bf0c      	ite	eq
 8008dba:	2301      	moveq	r3, #1
 8008dbc:	2300      	movne	r3, #0
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b22      	cmp	r3, #34	; 0x22
 8008dcc:	d108      	bne.n	8008de0 <UART_DMAError+0x7a>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008dda:	68b8      	ldr	r0, [r7, #8]
 8008ddc:	f000 f874 	bl	8008ec8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de4:	f043 0210 	orr.w	r2, r3, #16
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df0:	68b8      	ldr	r0, [r7, #8]
 8008df2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008df4:	bf00      	nop
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	4613      	mov	r3, r2
 8008e08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	88fa      	ldrh	r2, [r7, #6]
 8008e14:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	88fa      	ldrh	r2, [r7, #6]
 8008e1a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2222      	movs	r2, #34	; 0x22
 8008e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d007      	beq.n	8008e4a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68da      	ldr	r2, [r3, #12]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e48:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	695a      	ldr	r2, [r3, #20]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f042 0201 	orr.w	r2, r2, #1
 8008e58:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f042 0220 	orr.w	r2, r2, #32
 8008e68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b089      	sub	sp, #36	; 0x24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	330c      	adds	r3, #12
 8008e86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	e853 3f00 	ldrex	r3, [r3]
 8008e8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e96:	61fb      	str	r3, [r7, #28]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	330c      	adds	r3, #12
 8008e9e:	69fa      	ldr	r2, [r7, #28]
 8008ea0:	61ba      	str	r2, [r7, #24]
 8008ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea4:	6979      	ldr	r1, [r7, #20]
 8008ea6:	69ba      	ldr	r2, [r7, #24]
 8008ea8:	e841 2300 	strex	r3, r2, [r1]
 8008eac:	613b      	str	r3, [r7, #16]
   return(result);
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1e5      	bne.n	8008e80 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008ebc:	bf00      	nop
 8008ebe:	3724      	adds	r7, #36	; 0x24
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b095      	sub	sp, #84	; 0x54
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	330c      	adds	r3, #12
 8008ed6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eda:	e853 3f00 	ldrex	r3, [r3]
 8008ede:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	330c      	adds	r3, #12
 8008eee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ef0:	643a      	str	r2, [r7, #64]	; 0x40
 8008ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ef6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ef8:	e841 2300 	strex	r3, r2, [r1]
 8008efc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1e5      	bne.n	8008ed0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3314      	adds	r3, #20
 8008f0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	e853 3f00 	ldrex	r3, [r3]
 8008f12:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	f023 0301 	bic.w	r3, r3, #1
 8008f1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3314      	adds	r3, #20
 8008f22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f2c:	e841 2300 	strex	r3, r2, [r1]
 8008f30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1e5      	bne.n	8008f04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d119      	bne.n	8008f74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	330c      	adds	r3, #12
 8008f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	e853 3f00 	ldrex	r3, [r3]
 8008f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	f023 0310 	bic.w	r3, r3, #16
 8008f56:	647b      	str	r3, [r7, #68]	; 0x44
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	330c      	adds	r3, #12
 8008f5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f60:	61ba      	str	r2, [r7, #24]
 8008f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f64:	6979      	ldr	r1, [r7, #20]
 8008f66:	69ba      	ldr	r2, [r7, #24]
 8008f68:	e841 2300 	strex	r3, r2, [r1]
 8008f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e5      	bne.n	8008f40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2220      	movs	r2, #32
 8008f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008f82:	bf00      	nop
 8008f84:	3754      	adds	r7, #84	; 0x54
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b084      	sub	sp, #16
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fb0:	bf00      	nop
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	2b21      	cmp	r3, #33	; 0x21
 8008fca:	d13e      	bne.n	800904a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fd4:	d114      	bne.n	8009000 <UART_Transmit_IT+0x48>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d110      	bne.n	8009000 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ff2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a1b      	ldr	r3, [r3, #32]
 8008ff8:	1c9a      	adds	r2, r3, #2
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	621a      	str	r2, [r3, #32]
 8008ffe:	e008      	b.n	8009012 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a1b      	ldr	r3, [r3, #32]
 8009004:	1c59      	adds	r1, r3, #1
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	6211      	str	r1, [r2, #32]
 800900a:	781a      	ldrb	r2, [r3, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009016:	b29b      	uxth	r3, r3
 8009018:	3b01      	subs	r3, #1
 800901a:	b29b      	uxth	r3, r3
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	4619      	mov	r1, r3
 8009020:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10f      	bne.n	8009046 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68da      	ldr	r2, [r3, #12]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009034:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68da      	ldr	r2, [r3, #12]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009044:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009046:	2300      	movs	r3, #0
 8009048:	e000      	b.n	800904c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800904a:	2302      	movs	r3, #2
  }
}
 800904c:	4618      	mov	r0, r3
 800904e:	3714      	adds	r7, #20
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68da      	ldr	r2, [r3, #12]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800906e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2220      	movs	r2, #32
 8009074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b08c      	sub	sp, #48	; 0x30
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b22      	cmp	r3, #34	; 0x22
 800909c:	f040 80ad 	bne.w	80091fa <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090a8:	d117      	bne.n	80090da <UART_Receive_IT+0x50>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d113      	bne.n	80090da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80090b2:	2300      	movs	r3, #0
 80090b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d2:	1c9a      	adds	r2, r3, #2
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	629a      	str	r2, [r3, #40]	; 0x28
 80090d8:	e026      	b.n	8009128 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80090e0:	2300      	movs	r3, #0
 80090e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ec:	d007      	beq.n	80090fe <UART_Receive_IT+0x74>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d10a      	bne.n	800910c <UART_Receive_IT+0x82>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d106      	bne.n	800910c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	b2da      	uxtb	r2, r3
 8009106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009108:	701a      	strb	r2, [r3, #0]
 800910a:	e008      	b.n	800911e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	b2db      	uxtb	r3, r3
 8009114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009118:	b2da      	uxtb	r2, r3
 800911a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009122:	1c5a      	adds	r2, r3, #1
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800912c:	b29b      	uxth	r3, r3
 800912e:	3b01      	subs	r3, #1
 8009130:	b29b      	uxth	r3, r3
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	4619      	mov	r1, r3
 8009136:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009138:	2b00      	cmp	r3, #0
 800913a:	d15c      	bne.n	80091f6 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68da      	ldr	r2, [r3, #12]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f022 0220 	bic.w	r2, r2, #32
 800914a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68da      	ldr	r2, [r3, #12]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800915a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	695a      	ldr	r2, [r3, #20]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f022 0201 	bic.w	r2, r2, #1
 800916a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2220      	movs	r2, #32
 8009170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009178:	2b01      	cmp	r3, #1
 800917a:	d136      	bne.n	80091ea <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	330c      	adds	r3, #12
 8009188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	613b      	str	r3, [r7, #16]
   return(result);
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f023 0310 	bic.w	r3, r3, #16
 8009198:	627b      	str	r3, [r7, #36]	; 0x24
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	330c      	adds	r3, #12
 80091a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091a2:	623a      	str	r2, [r7, #32]
 80091a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a6:	69f9      	ldr	r1, [r7, #28]
 80091a8:	6a3a      	ldr	r2, [r7, #32]
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e5      	bne.n	8009182 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 0310 	and.w	r3, r3, #16
 80091c0:	2b10      	cmp	r3, #16
 80091c2:	d10a      	bne.n	80091da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80091c4:	2300      	movs	r3, #0
 80091c6:	60fb      	str	r3, [r7, #12]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	60fb      	str	r3, [r7, #12]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80091e2:	4611      	mov	r1, r2
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	4798      	blx	r3
 80091e8:	e003      	b.n	80091f2 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	e002      	b.n	80091fc <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	e000      	b.n	80091fc <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 80091fa:	2302      	movs	r3, #2
  }
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3730      	adds	r7, #48	; 0x30
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009208:	b0c0      	sub	sp, #256	; 0x100
 800920a:	af00      	add	r7, sp, #0
 800920c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800921c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009220:	68d9      	ldr	r1, [r3, #12]
 8009222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	ea40 0301 	orr.w	r3, r0, r1
 800922c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800922e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009232:	689a      	ldr	r2, [r3, #8]
 8009234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	431a      	orrs	r2, r3
 800923c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	431a      	orrs	r2, r3
 8009244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009248:	69db      	ldr	r3, [r3, #28]
 800924a:	4313      	orrs	r3, r2
 800924c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800925c:	f021 010c 	bic.w	r1, r1, #12
 8009260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800926a:	430b      	orrs	r3, r1
 800926c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800926e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800927a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800927e:	6999      	ldr	r1, [r3, #24]
 8009280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	ea40 0301 	orr.w	r3, r0, r1
 800928a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800928c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	4b8f      	ldr	r3, [pc, #572]	; (80094d0 <UART_SetConfig+0x2cc>)
 8009294:	429a      	cmp	r2, r3
 8009296:	d005      	beq.n	80092a4 <UART_SetConfig+0xa0>
 8009298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	4b8d      	ldr	r3, [pc, #564]	; (80094d4 <UART_SetConfig+0x2d0>)
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d104      	bne.n	80092ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80092a4:	f7fd f9e0 	bl	8006668 <HAL_RCC_GetPCLK2Freq>
 80092a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80092ac:	e003      	b.n	80092b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80092ae:	f7fd f9c7 	bl	8006640 <HAL_RCC_GetPCLK1Freq>
 80092b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092c0:	f040 810c 	bne.w	80094dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092c8:	2200      	movs	r2, #0
 80092ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80092ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80092d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80092d6:	4622      	mov	r2, r4
 80092d8:	462b      	mov	r3, r5
 80092da:	1891      	adds	r1, r2, r2
 80092dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80092de:	415b      	adcs	r3, r3
 80092e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80092e6:	4621      	mov	r1, r4
 80092e8:	eb12 0801 	adds.w	r8, r2, r1
 80092ec:	4629      	mov	r1, r5
 80092ee:	eb43 0901 	adc.w	r9, r3, r1
 80092f2:	f04f 0200 	mov.w	r2, #0
 80092f6:	f04f 0300 	mov.w	r3, #0
 80092fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80092fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009306:	4690      	mov	r8, r2
 8009308:	4699      	mov	r9, r3
 800930a:	4623      	mov	r3, r4
 800930c:	eb18 0303 	adds.w	r3, r8, r3
 8009310:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009314:	462b      	mov	r3, r5
 8009316:	eb49 0303 	adc.w	r3, r9, r3
 800931a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800931e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800932a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800932e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009332:	460b      	mov	r3, r1
 8009334:	18db      	adds	r3, r3, r3
 8009336:	653b      	str	r3, [r7, #80]	; 0x50
 8009338:	4613      	mov	r3, r2
 800933a:	eb42 0303 	adc.w	r3, r2, r3
 800933e:	657b      	str	r3, [r7, #84]	; 0x54
 8009340:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009344:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009348:	f7f7 fca6 	bl	8000c98 <__aeabi_uldivmod>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	4b61      	ldr	r3, [pc, #388]	; (80094d8 <UART_SetConfig+0x2d4>)
 8009352:	fba3 2302 	umull	r2, r3, r3, r2
 8009356:	095b      	lsrs	r3, r3, #5
 8009358:	011c      	lsls	r4, r3, #4
 800935a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800935e:	2200      	movs	r2, #0
 8009360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009364:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009368:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800936c:	4642      	mov	r2, r8
 800936e:	464b      	mov	r3, r9
 8009370:	1891      	adds	r1, r2, r2
 8009372:	64b9      	str	r1, [r7, #72]	; 0x48
 8009374:	415b      	adcs	r3, r3
 8009376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009378:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800937c:	4641      	mov	r1, r8
 800937e:	eb12 0a01 	adds.w	sl, r2, r1
 8009382:	4649      	mov	r1, r9
 8009384:	eb43 0b01 	adc.w	fp, r3, r1
 8009388:	f04f 0200 	mov.w	r2, #0
 800938c:	f04f 0300 	mov.w	r3, #0
 8009390:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009394:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009398:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800939c:	4692      	mov	sl, r2
 800939e:	469b      	mov	fp, r3
 80093a0:	4643      	mov	r3, r8
 80093a2:	eb1a 0303 	adds.w	r3, sl, r3
 80093a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80093aa:	464b      	mov	r3, r9
 80093ac:	eb4b 0303 	adc.w	r3, fp, r3
 80093b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80093b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80093c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80093c8:	460b      	mov	r3, r1
 80093ca:	18db      	adds	r3, r3, r3
 80093cc:	643b      	str	r3, [r7, #64]	; 0x40
 80093ce:	4613      	mov	r3, r2
 80093d0:	eb42 0303 	adc.w	r3, r2, r3
 80093d4:	647b      	str	r3, [r7, #68]	; 0x44
 80093d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80093da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80093de:	f7f7 fc5b 	bl	8000c98 <__aeabi_uldivmod>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4611      	mov	r1, r2
 80093e8:	4b3b      	ldr	r3, [pc, #236]	; (80094d8 <UART_SetConfig+0x2d4>)
 80093ea:	fba3 2301 	umull	r2, r3, r3, r1
 80093ee:	095b      	lsrs	r3, r3, #5
 80093f0:	2264      	movs	r2, #100	; 0x64
 80093f2:	fb02 f303 	mul.w	r3, r2, r3
 80093f6:	1acb      	subs	r3, r1, r3
 80093f8:	00db      	lsls	r3, r3, #3
 80093fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80093fe:	4b36      	ldr	r3, [pc, #216]	; (80094d8 <UART_SetConfig+0x2d4>)
 8009400:	fba3 2302 	umull	r2, r3, r3, r2
 8009404:	095b      	lsrs	r3, r3, #5
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800940c:	441c      	add	r4, r3
 800940e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009412:	2200      	movs	r2, #0
 8009414:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009418:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800941c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009420:	4642      	mov	r2, r8
 8009422:	464b      	mov	r3, r9
 8009424:	1891      	adds	r1, r2, r2
 8009426:	63b9      	str	r1, [r7, #56]	; 0x38
 8009428:	415b      	adcs	r3, r3
 800942a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800942c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009430:	4641      	mov	r1, r8
 8009432:	1851      	adds	r1, r2, r1
 8009434:	6339      	str	r1, [r7, #48]	; 0x30
 8009436:	4649      	mov	r1, r9
 8009438:	414b      	adcs	r3, r1
 800943a:	637b      	str	r3, [r7, #52]	; 0x34
 800943c:	f04f 0200 	mov.w	r2, #0
 8009440:	f04f 0300 	mov.w	r3, #0
 8009444:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009448:	4659      	mov	r1, fp
 800944a:	00cb      	lsls	r3, r1, #3
 800944c:	4651      	mov	r1, sl
 800944e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009452:	4651      	mov	r1, sl
 8009454:	00ca      	lsls	r2, r1, #3
 8009456:	4610      	mov	r0, r2
 8009458:	4619      	mov	r1, r3
 800945a:	4603      	mov	r3, r0
 800945c:	4642      	mov	r2, r8
 800945e:	189b      	adds	r3, r3, r2
 8009460:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009464:	464b      	mov	r3, r9
 8009466:	460a      	mov	r2, r1
 8009468:	eb42 0303 	adc.w	r3, r2, r3
 800946c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800947c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009480:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009484:	460b      	mov	r3, r1
 8009486:	18db      	adds	r3, r3, r3
 8009488:	62bb      	str	r3, [r7, #40]	; 0x28
 800948a:	4613      	mov	r3, r2
 800948c:	eb42 0303 	adc.w	r3, r2, r3
 8009490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009496:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800949a:	f7f7 fbfd 	bl	8000c98 <__aeabi_uldivmod>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <UART_SetConfig+0x2d4>)
 80094a4:	fba3 1302 	umull	r1, r3, r3, r2
 80094a8:	095b      	lsrs	r3, r3, #5
 80094aa:	2164      	movs	r1, #100	; 0x64
 80094ac:	fb01 f303 	mul.w	r3, r1, r3
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	00db      	lsls	r3, r3, #3
 80094b4:	3332      	adds	r3, #50	; 0x32
 80094b6:	4a08      	ldr	r2, [pc, #32]	; (80094d8 <UART_SetConfig+0x2d4>)
 80094b8:	fba2 2303 	umull	r2, r3, r2, r3
 80094bc:	095b      	lsrs	r3, r3, #5
 80094be:	f003 0207 	and.w	r2, r3, #7
 80094c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4422      	add	r2, r4
 80094ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80094cc:	e105      	b.n	80096da <UART_SetConfig+0x4d6>
 80094ce:	bf00      	nop
 80094d0:	40011000 	.word	0x40011000
 80094d4:	40011400 	.word	0x40011400
 80094d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094e0:	2200      	movs	r2, #0
 80094e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80094e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80094ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80094ee:	4642      	mov	r2, r8
 80094f0:	464b      	mov	r3, r9
 80094f2:	1891      	adds	r1, r2, r2
 80094f4:	6239      	str	r1, [r7, #32]
 80094f6:	415b      	adcs	r3, r3
 80094f8:	627b      	str	r3, [r7, #36]	; 0x24
 80094fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80094fe:	4641      	mov	r1, r8
 8009500:	1854      	adds	r4, r2, r1
 8009502:	4649      	mov	r1, r9
 8009504:	eb43 0501 	adc.w	r5, r3, r1
 8009508:	f04f 0200 	mov.w	r2, #0
 800950c:	f04f 0300 	mov.w	r3, #0
 8009510:	00eb      	lsls	r3, r5, #3
 8009512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009516:	00e2      	lsls	r2, r4, #3
 8009518:	4614      	mov	r4, r2
 800951a:	461d      	mov	r5, r3
 800951c:	4643      	mov	r3, r8
 800951e:	18e3      	adds	r3, r4, r3
 8009520:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009524:	464b      	mov	r3, r9
 8009526:	eb45 0303 	adc.w	r3, r5, r3
 800952a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800952e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800953a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800953e:	f04f 0200 	mov.w	r2, #0
 8009542:	f04f 0300 	mov.w	r3, #0
 8009546:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800954a:	4629      	mov	r1, r5
 800954c:	008b      	lsls	r3, r1, #2
 800954e:	4621      	mov	r1, r4
 8009550:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009554:	4621      	mov	r1, r4
 8009556:	008a      	lsls	r2, r1, #2
 8009558:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800955c:	f7f7 fb9c 	bl	8000c98 <__aeabi_uldivmod>
 8009560:	4602      	mov	r2, r0
 8009562:	460b      	mov	r3, r1
 8009564:	4b60      	ldr	r3, [pc, #384]	; (80096e8 <UART_SetConfig+0x4e4>)
 8009566:	fba3 2302 	umull	r2, r3, r3, r2
 800956a:	095b      	lsrs	r3, r3, #5
 800956c:	011c      	lsls	r4, r3, #4
 800956e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009572:	2200      	movs	r2, #0
 8009574:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009578:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800957c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009580:	4642      	mov	r2, r8
 8009582:	464b      	mov	r3, r9
 8009584:	1891      	adds	r1, r2, r2
 8009586:	61b9      	str	r1, [r7, #24]
 8009588:	415b      	adcs	r3, r3
 800958a:	61fb      	str	r3, [r7, #28]
 800958c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009590:	4641      	mov	r1, r8
 8009592:	1851      	adds	r1, r2, r1
 8009594:	6139      	str	r1, [r7, #16]
 8009596:	4649      	mov	r1, r9
 8009598:	414b      	adcs	r3, r1
 800959a:	617b      	str	r3, [r7, #20]
 800959c:	f04f 0200 	mov.w	r2, #0
 80095a0:	f04f 0300 	mov.w	r3, #0
 80095a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80095a8:	4659      	mov	r1, fp
 80095aa:	00cb      	lsls	r3, r1, #3
 80095ac:	4651      	mov	r1, sl
 80095ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095b2:	4651      	mov	r1, sl
 80095b4:	00ca      	lsls	r2, r1, #3
 80095b6:	4610      	mov	r0, r2
 80095b8:	4619      	mov	r1, r3
 80095ba:	4603      	mov	r3, r0
 80095bc:	4642      	mov	r2, r8
 80095be:	189b      	adds	r3, r3, r2
 80095c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095c4:	464b      	mov	r3, r9
 80095c6:	460a      	mov	r2, r1
 80095c8:	eb42 0303 	adc.w	r3, r2, r3
 80095cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80095da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80095dc:	f04f 0200 	mov.w	r2, #0
 80095e0:	f04f 0300 	mov.w	r3, #0
 80095e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80095e8:	4649      	mov	r1, r9
 80095ea:	008b      	lsls	r3, r1, #2
 80095ec:	4641      	mov	r1, r8
 80095ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095f2:	4641      	mov	r1, r8
 80095f4:	008a      	lsls	r2, r1, #2
 80095f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80095fa:	f7f7 fb4d 	bl	8000c98 <__aeabi_uldivmod>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	4b39      	ldr	r3, [pc, #228]	; (80096e8 <UART_SetConfig+0x4e4>)
 8009604:	fba3 1302 	umull	r1, r3, r3, r2
 8009608:	095b      	lsrs	r3, r3, #5
 800960a:	2164      	movs	r1, #100	; 0x64
 800960c:	fb01 f303 	mul.w	r3, r1, r3
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	011b      	lsls	r3, r3, #4
 8009614:	3332      	adds	r3, #50	; 0x32
 8009616:	4a34      	ldr	r2, [pc, #208]	; (80096e8 <UART_SetConfig+0x4e4>)
 8009618:	fba2 2303 	umull	r2, r3, r2, r3
 800961c:	095b      	lsrs	r3, r3, #5
 800961e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009622:	441c      	add	r4, r3
 8009624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009628:	2200      	movs	r2, #0
 800962a:	673b      	str	r3, [r7, #112]	; 0x70
 800962c:	677a      	str	r2, [r7, #116]	; 0x74
 800962e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009632:	4642      	mov	r2, r8
 8009634:	464b      	mov	r3, r9
 8009636:	1891      	adds	r1, r2, r2
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	415b      	adcs	r3, r3
 800963c:	60fb      	str	r3, [r7, #12]
 800963e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009642:	4641      	mov	r1, r8
 8009644:	1851      	adds	r1, r2, r1
 8009646:	6039      	str	r1, [r7, #0]
 8009648:	4649      	mov	r1, r9
 800964a:	414b      	adcs	r3, r1
 800964c:	607b      	str	r3, [r7, #4]
 800964e:	f04f 0200 	mov.w	r2, #0
 8009652:	f04f 0300 	mov.w	r3, #0
 8009656:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800965a:	4659      	mov	r1, fp
 800965c:	00cb      	lsls	r3, r1, #3
 800965e:	4651      	mov	r1, sl
 8009660:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009664:	4651      	mov	r1, sl
 8009666:	00ca      	lsls	r2, r1, #3
 8009668:	4610      	mov	r0, r2
 800966a:	4619      	mov	r1, r3
 800966c:	4603      	mov	r3, r0
 800966e:	4642      	mov	r2, r8
 8009670:	189b      	adds	r3, r3, r2
 8009672:	66bb      	str	r3, [r7, #104]	; 0x68
 8009674:	464b      	mov	r3, r9
 8009676:	460a      	mov	r2, r1
 8009678:	eb42 0303 	adc.w	r3, r2, r3
 800967c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800967e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	663b      	str	r3, [r7, #96]	; 0x60
 8009688:	667a      	str	r2, [r7, #100]	; 0x64
 800968a:	f04f 0200 	mov.w	r2, #0
 800968e:	f04f 0300 	mov.w	r3, #0
 8009692:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009696:	4649      	mov	r1, r9
 8009698:	008b      	lsls	r3, r1, #2
 800969a:	4641      	mov	r1, r8
 800969c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096a0:	4641      	mov	r1, r8
 80096a2:	008a      	lsls	r2, r1, #2
 80096a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80096a8:	f7f7 faf6 	bl	8000c98 <__aeabi_uldivmod>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4b0d      	ldr	r3, [pc, #52]	; (80096e8 <UART_SetConfig+0x4e4>)
 80096b2:	fba3 1302 	umull	r1, r3, r3, r2
 80096b6:	095b      	lsrs	r3, r3, #5
 80096b8:	2164      	movs	r1, #100	; 0x64
 80096ba:	fb01 f303 	mul.w	r3, r1, r3
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	011b      	lsls	r3, r3, #4
 80096c2:	3332      	adds	r3, #50	; 0x32
 80096c4:	4a08      	ldr	r2, [pc, #32]	; (80096e8 <UART_SetConfig+0x4e4>)
 80096c6:	fba2 2303 	umull	r2, r3, r2, r3
 80096ca:	095b      	lsrs	r3, r3, #5
 80096cc:	f003 020f 	and.w	r2, r3, #15
 80096d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4422      	add	r2, r4
 80096d8:	609a      	str	r2, [r3, #8]
}
 80096da:	bf00      	nop
 80096dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80096e0:	46bd      	mov	sp, r7
 80096e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096e6:	bf00      	nop
 80096e8:	51eb851f 	.word	0x51eb851f

080096ec <__errno>:
 80096ec:	4b01      	ldr	r3, [pc, #4]	; (80096f4 <__errno+0x8>)
 80096ee:	6818      	ldr	r0, [r3, #0]
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	2000022c 	.word	0x2000022c

080096f8 <__libc_init_array>:
 80096f8:	b570      	push	{r4, r5, r6, lr}
 80096fa:	4d0d      	ldr	r5, [pc, #52]	; (8009730 <__libc_init_array+0x38>)
 80096fc:	4c0d      	ldr	r4, [pc, #52]	; (8009734 <__libc_init_array+0x3c>)
 80096fe:	1b64      	subs	r4, r4, r5
 8009700:	10a4      	asrs	r4, r4, #2
 8009702:	2600      	movs	r6, #0
 8009704:	42a6      	cmp	r6, r4
 8009706:	d109      	bne.n	800971c <__libc_init_array+0x24>
 8009708:	4d0b      	ldr	r5, [pc, #44]	; (8009738 <__libc_init_array+0x40>)
 800970a:	4c0c      	ldr	r4, [pc, #48]	; (800973c <__libc_init_array+0x44>)
 800970c:	f004 fddc 	bl	800e2c8 <_init>
 8009710:	1b64      	subs	r4, r4, r5
 8009712:	10a4      	asrs	r4, r4, #2
 8009714:	2600      	movs	r6, #0
 8009716:	42a6      	cmp	r6, r4
 8009718:	d105      	bne.n	8009726 <__libc_init_array+0x2e>
 800971a:	bd70      	pop	{r4, r5, r6, pc}
 800971c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009720:	4798      	blx	r3
 8009722:	3601      	adds	r6, #1
 8009724:	e7ee      	b.n	8009704 <__libc_init_array+0xc>
 8009726:	f855 3b04 	ldr.w	r3, [r5], #4
 800972a:	4798      	blx	r3
 800972c:	3601      	adds	r6, #1
 800972e:	e7f2      	b.n	8009716 <__libc_init_array+0x1e>
 8009730:	0800e7bc 	.word	0x0800e7bc
 8009734:	0800e7bc 	.word	0x0800e7bc
 8009738:	0800e7bc 	.word	0x0800e7bc
 800973c:	0800e7c0 	.word	0x0800e7c0

08009740 <memcpy>:
 8009740:	440a      	add	r2, r1
 8009742:	4291      	cmp	r1, r2
 8009744:	f100 33ff 	add.w	r3, r0, #4294967295
 8009748:	d100      	bne.n	800974c <memcpy+0xc>
 800974a:	4770      	bx	lr
 800974c:	b510      	push	{r4, lr}
 800974e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009752:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009756:	4291      	cmp	r1, r2
 8009758:	d1f9      	bne.n	800974e <memcpy+0xe>
 800975a:	bd10      	pop	{r4, pc}

0800975c <memset>:
 800975c:	4402      	add	r2, r0
 800975e:	4603      	mov	r3, r0
 8009760:	4293      	cmp	r3, r2
 8009762:	d100      	bne.n	8009766 <memset+0xa>
 8009764:	4770      	bx	lr
 8009766:	f803 1b01 	strb.w	r1, [r3], #1
 800976a:	e7f9      	b.n	8009760 <memset+0x4>

0800976c <__cvt>:
 800976c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009770:	ec55 4b10 	vmov	r4, r5, d0
 8009774:	2d00      	cmp	r5, #0
 8009776:	460e      	mov	r6, r1
 8009778:	4619      	mov	r1, r3
 800977a:	462b      	mov	r3, r5
 800977c:	bfbb      	ittet	lt
 800977e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009782:	461d      	movlt	r5, r3
 8009784:	2300      	movge	r3, #0
 8009786:	232d      	movlt	r3, #45	; 0x2d
 8009788:	700b      	strb	r3, [r1, #0]
 800978a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800978c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009790:	4691      	mov	r9, r2
 8009792:	f023 0820 	bic.w	r8, r3, #32
 8009796:	bfbc      	itt	lt
 8009798:	4622      	movlt	r2, r4
 800979a:	4614      	movlt	r4, r2
 800979c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097a0:	d005      	beq.n	80097ae <__cvt+0x42>
 80097a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80097a6:	d100      	bne.n	80097aa <__cvt+0x3e>
 80097a8:	3601      	adds	r6, #1
 80097aa:	2102      	movs	r1, #2
 80097ac:	e000      	b.n	80097b0 <__cvt+0x44>
 80097ae:	2103      	movs	r1, #3
 80097b0:	ab03      	add	r3, sp, #12
 80097b2:	9301      	str	r3, [sp, #4]
 80097b4:	ab02      	add	r3, sp, #8
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	ec45 4b10 	vmov	d0, r4, r5
 80097bc:	4653      	mov	r3, sl
 80097be:	4632      	mov	r2, r6
 80097c0:	f001 fdae 	bl	800b320 <_dtoa_r>
 80097c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80097c8:	4607      	mov	r7, r0
 80097ca:	d102      	bne.n	80097d2 <__cvt+0x66>
 80097cc:	f019 0f01 	tst.w	r9, #1
 80097d0:	d022      	beq.n	8009818 <__cvt+0xac>
 80097d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097d6:	eb07 0906 	add.w	r9, r7, r6
 80097da:	d110      	bne.n	80097fe <__cvt+0x92>
 80097dc:	783b      	ldrb	r3, [r7, #0]
 80097de:	2b30      	cmp	r3, #48	; 0x30
 80097e0:	d10a      	bne.n	80097f8 <__cvt+0x8c>
 80097e2:	2200      	movs	r2, #0
 80097e4:	2300      	movs	r3, #0
 80097e6:	4620      	mov	r0, r4
 80097e8:	4629      	mov	r1, r5
 80097ea:	f7f7 f975 	bl	8000ad8 <__aeabi_dcmpeq>
 80097ee:	b918      	cbnz	r0, 80097f8 <__cvt+0x8c>
 80097f0:	f1c6 0601 	rsb	r6, r6, #1
 80097f4:	f8ca 6000 	str.w	r6, [sl]
 80097f8:	f8da 3000 	ldr.w	r3, [sl]
 80097fc:	4499      	add	r9, r3
 80097fe:	2200      	movs	r2, #0
 8009800:	2300      	movs	r3, #0
 8009802:	4620      	mov	r0, r4
 8009804:	4629      	mov	r1, r5
 8009806:	f7f7 f967 	bl	8000ad8 <__aeabi_dcmpeq>
 800980a:	b108      	cbz	r0, 8009810 <__cvt+0xa4>
 800980c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009810:	2230      	movs	r2, #48	; 0x30
 8009812:	9b03      	ldr	r3, [sp, #12]
 8009814:	454b      	cmp	r3, r9
 8009816:	d307      	bcc.n	8009828 <__cvt+0xbc>
 8009818:	9b03      	ldr	r3, [sp, #12]
 800981a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800981c:	1bdb      	subs	r3, r3, r7
 800981e:	4638      	mov	r0, r7
 8009820:	6013      	str	r3, [r2, #0]
 8009822:	b004      	add	sp, #16
 8009824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009828:	1c59      	adds	r1, r3, #1
 800982a:	9103      	str	r1, [sp, #12]
 800982c:	701a      	strb	r2, [r3, #0]
 800982e:	e7f0      	b.n	8009812 <__cvt+0xa6>

08009830 <__exponent>:
 8009830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009832:	4603      	mov	r3, r0
 8009834:	2900      	cmp	r1, #0
 8009836:	bfb8      	it	lt
 8009838:	4249      	neglt	r1, r1
 800983a:	f803 2b02 	strb.w	r2, [r3], #2
 800983e:	bfb4      	ite	lt
 8009840:	222d      	movlt	r2, #45	; 0x2d
 8009842:	222b      	movge	r2, #43	; 0x2b
 8009844:	2909      	cmp	r1, #9
 8009846:	7042      	strb	r2, [r0, #1]
 8009848:	dd2a      	ble.n	80098a0 <__exponent+0x70>
 800984a:	f10d 0407 	add.w	r4, sp, #7
 800984e:	46a4      	mov	ip, r4
 8009850:	270a      	movs	r7, #10
 8009852:	46a6      	mov	lr, r4
 8009854:	460a      	mov	r2, r1
 8009856:	fb91 f6f7 	sdiv	r6, r1, r7
 800985a:	fb07 1516 	mls	r5, r7, r6, r1
 800985e:	3530      	adds	r5, #48	; 0x30
 8009860:	2a63      	cmp	r2, #99	; 0x63
 8009862:	f104 34ff 	add.w	r4, r4, #4294967295
 8009866:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800986a:	4631      	mov	r1, r6
 800986c:	dcf1      	bgt.n	8009852 <__exponent+0x22>
 800986e:	3130      	adds	r1, #48	; 0x30
 8009870:	f1ae 0502 	sub.w	r5, lr, #2
 8009874:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009878:	1c44      	adds	r4, r0, #1
 800987a:	4629      	mov	r1, r5
 800987c:	4561      	cmp	r1, ip
 800987e:	d30a      	bcc.n	8009896 <__exponent+0x66>
 8009880:	f10d 0209 	add.w	r2, sp, #9
 8009884:	eba2 020e 	sub.w	r2, r2, lr
 8009888:	4565      	cmp	r5, ip
 800988a:	bf88      	it	hi
 800988c:	2200      	movhi	r2, #0
 800988e:	4413      	add	r3, r2
 8009890:	1a18      	subs	r0, r3, r0
 8009892:	b003      	add	sp, #12
 8009894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800989a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800989e:	e7ed      	b.n	800987c <__exponent+0x4c>
 80098a0:	2330      	movs	r3, #48	; 0x30
 80098a2:	3130      	adds	r1, #48	; 0x30
 80098a4:	7083      	strb	r3, [r0, #2]
 80098a6:	70c1      	strb	r1, [r0, #3]
 80098a8:	1d03      	adds	r3, r0, #4
 80098aa:	e7f1      	b.n	8009890 <__exponent+0x60>

080098ac <_printf_float>:
 80098ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b0:	ed2d 8b02 	vpush	{d8}
 80098b4:	b08d      	sub	sp, #52	; 0x34
 80098b6:	460c      	mov	r4, r1
 80098b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80098bc:	4616      	mov	r6, r2
 80098be:	461f      	mov	r7, r3
 80098c0:	4605      	mov	r5, r0
 80098c2:	f002 fe8b 	bl	800c5dc <_localeconv_r>
 80098c6:	f8d0 a000 	ldr.w	sl, [r0]
 80098ca:	4650      	mov	r0, sl
 80098cc:	f7f6 fc88 	bl	80001e0 <strlen>
 80098d0:	2300      	movs	r3, #0
 80098d2:	930a      	str	r3, [sp, #40]	; 0x28
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	9305      	str	r3, [sp, #20]
 80098d8:	f8d8 3000 	ldr.w	r3, [r8]
 80098dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80098e0:	3307      	adds	r3, #7
 80098e2:	f023 0307 	bic.w	r3, r3, #7
 80098e6:	f103 0208 	add.w	r2, r3, #8
 80098ea:	f8c8 2000 	str.w	r2, [r8]
 80098ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80098f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80098fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80098fe:	9307      	str	r3, [sp, #28]
 8009900:	f8cd 8018 	str.w	r8, [sp, #24]
 8009904:	ee08 0a10 	vmov	s16, r0
 8009908:	4b9f      	ldr	r3, [pc, #636]	; (8009b88 <_printf_float+0x2dc>)
 800990a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800990e:	f04f 32ff 	mov.w	r2, #4294967295
 8009912:	f7f7 f913 	bl	8000b3c <__aeabi_dcmpun>
 8009916:	bb88      	cbnz	r0, 800997c <_printf_float+0xd0>
 8009918:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800991c:	4b9a      	ldr	r3, [pc, #616]	; (8009b88 <_printf_float+0x2dc>)
 800991e:	f04f 32ff 	mov.w	r2, #4294967295
 8009922:	f7f7 f8ed 	bl	8000b00 <__aeabi_dcmple>
 8009926:	bb48      	cbnz	r0, 800997c <_printf_float+0xd0>
 8009928:	2200      	movs	r2, #0
 800992a:	2300      	movs	r3, #0
 800992c:	4640      	mov	r0, r8
 800992e:	4649      	mov	r1, r9
 8009930:	f7f7 f8dc 	bl	8000aec <__aeabi_dcmplt>
 8009934:	b110      	cbz	r0, 800993c <_printf_float+0x90>
 8009936:	232d      	movs	r3, #45	; 0x2d
 8009938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800993c:	4b93      	ldr	r3, [pc, #588]	; (8009b8c <_printf_float+0x2e0>)
 800993e:	4894      	ldr	r0, [pc, #592]	; (8009b90 <_printf_float+0x2e4>)
 8009940:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009944:	bf94      	ite	ls
 8009946:	4698      	movls	r8, r3
 8009948:	4680      	movhi	r8, r0
 800994a:	2303      	movs	r3, #3
 800994c:	6123      	str	r3, [r4, #16]
 800994e:	9b05      	ldr	r3, [sp, #20]
 8009950:	f023 0204 	bic.w	r2, r3, #4
 8009954:	6022      	str	r2, [r4, #0]
 8009956:	f04f 0900 	mov.w	r9, #0
 800995a:	9700      	str	r7, [sp, #0]
 800995c:	4633      	mov	r3, r6
 800995e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009960:	4621      	mov	r1, r4
 8009962:	4628      	mov	r0, r5
 8009964:	f000 f9d8 	bl	8009d18 <_printf_common>
 8009968:	3001      	adds	r0, #1
 800996a:	f040 8090 	bne.w	8009a8e <_printf_float+0x1e2>
 800996e:	f04f 30ff 	mov.w	r0, #4294967295
 8009972:	b00d      	add	sp, #52	; 0x34
 8009974:	ecbd 8b02 	vpop	{d8}
 8009978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997c:	4642      	mov	r2, r8
 800997e:	464b      	mov	r3, r9
 8009980:	4640      	mov	r0, r8
 8009982:	4649      	mov	r1, r9
 8009984:	f7f7 f8da 	bl	8000b3c <__aeabi_dcmpun>
 8009988:	b140      	cbz	r0, 800999c <_printf_float+0xf0>
 800998a:	464b      	mov	r3, r9
 800998c:	2b00      	cmp	r3, #0
 800998e:	bfbc      	itt	lt
 8009990:	232d      	movlt	r3, #45	; 0x2d
 8009992:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009996:	487f      	ldr	r0, [pc, #508]	; (8009b94 <_printf_float+0x2e8>)
 8009998:	4b7f      	ldr	r3, [pc, #508]	; (8009b98 <_printf_float+0x2ec>)
 800999a:	e7d1      	b.n	8009940 <_printf_float+0x94>
 800999c:	6863      	ldr	r3, [r4, #4]
 800999e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80099a2:	9206      	str	r2, [sp, #24]
 80099a4:	1c5a      	adds	r2, r3, #1
 80099a6:	d13f      	bne.n	8009a28 <_printf_float+0x17c>
 80099a8:	2306      	movs	r3, #6
 80099aa:	6063      	str	r3, [r4, #4]
 80099ac:	9b05      	ldr	r3, [sp, #20]
 80099ae:	6861      	ldr	r1, [r4, #4]
 80099b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80099b4:	2300      	movs	r3, #0
 80099b6:	9303      	str	r3, [sp, #12]
 80099b8:	ab0a      	add	r3, sp, #40	; 0x28
 80099ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80099be:	ab09      	add	r3, sp, #36	; 0x24
 80099c0:	ec49 8b10 	vmov	d0, r8, r9
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	6022      	str	r2, [r4, #0]
 80099c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80099cc:	4628      	mov	r0, r5
 80099ce:	f7ff fecd 	bl	800976c <__cvt>
 80099d2:	9b06      	ldr	r3, [sp, #24]
 80099d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099d6:	2b47      	cmp	r3, #71	; 0x47
 80099d8:	4680      	mov	r8, r0
 80099da:	d108      	bne.n	80099ee <_printf_float+0x142>
 80099dc:	1cc8      	adds	r0, r1, #3
 80099de:	db02      	blt.n	80099e6 <_printf_float+0x13a>
 80099e0:	6863      	ldr	r3, [r4, #4]
 80099e2:	4299      	cmp	r1, r3
 80099e4:	dd41      	ble.n	8009a6a <_printf_float+0x1be>
 80099e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80099ea:	fa5f fb8b 	uxtb.w	fp, fp
 80099ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099f2:	d820      	bhi.n	8009a36 <_printf_float+0x18a>
 80099f4:	3901      	subs	r1, #1
 80099f6:	465a      	mov	r2, fp
 80099f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80099fc:	9109      	str	r1, [sp, #36]	; 0x24
 80099fe:	f7ff ff17 	bl	8009830 <__exponent>
 8009a02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a04:	1813      	adds	r3, r2, r0
 8009a06:	2a01      	cmp	r2, #1
 8009a08:	4681      	mov	r9, r0
 8009a0a:	6123      	str	r3, [r4, #16]
 8009a0c:	dc02      	bgt.n	8009a14 <_printf_float+0x168>
 8009a0e:	6822      	ldr	r2, [r4, #0]
 8009a10:	07d2      	lsls	r2, r2, #31
 8009a12:	d501      	bpl.n	8009a18 <_printf_float+0x16c>
 8009a14:	3301      	adds	r3, #1
 8009a16:	6123      	str	r3, [r4, #16]
 8009a18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d09c      	beq.n	800995a <_printf_float+0xae>
 8009a20:	232d      	movs	r3, #45	; 0x2d
 8009a22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a26:	e798      	b.n	800995a <_printf_float+0xae>
 8009a28:	9a06      	ldr	r2, [sp, #24]
 8009a2a:	2a47      	cmp	r2, #71	; 0x47
 8009a2c:	d1be      	bne.n	80099ac <_printf_float+0x100>
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1bc      	bne.n	80099ac <_printf_float+0x100>
 8009a32:	2301      	movs	r3, #1
 8009a34:	e7b9      	b.n	80099aa <_printf_float+0xfe>
 8009a36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a3a:	d118      	bne.n	8009a6e <_printf_float+0x1c2>
 8009a3c:	2900      	cmp	r1, #0
 8009a3e:	6863      	ldr	r3, [r4, #4]
 8009a40:	dd0b      	ble.n	8009a5a <_printf_float+0x1ae>
 8009a42:	6121      	str	r1, [r4, #16]
 8009a44:	b913      	cbnz	r3, 8009a4c <_printf_float+0x1a0>
 8009a46:	6822      	ldr	r2, [r4, #0]
 8009a48:	07d0      	lsls	r0, r2, #31
 8009a4a:	d502      	bpl.n	8009a52 <_printf_float+0x1a6>
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	440b      	add	r3, r1
 8009a50:	6123      	str	r3, [r4, #16]
 8009a52:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a54:	f04f 0900 	mov.w	r9, #0
 8009a58:	e7de      	b.n	8009a18 <_printf_float+0x16c>
 8009a5a:	b913      	cbnz	r3, 8009a62 <_printf_float+0x1b6>
 8009a5c:	6822      	ldr	r2, [r4, #0]
 8009a5e:	07d2      	lsls	r2, r2, #31
 8009a60:	d501      	bpl.n	8009a66 <_printf_float+0x1ba>
 8009a62:	3302      	adds	r3, #2
 8009a64:	e7f4      	b.n	8009a50 <_printf_float+0x1a4>
 8009a66:	2301      	movs	r3, #1
 8009a68:	e7f2      	b.n	8009a50 <_printf_float+0x1a4>
 8009a6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a70:	4299      	cmp	r1, r3
 8009a72:	db05      	blt.n	8009a80 <_printf_float+0x1d4>
 8009a74:	6823      	ldr	r3, [r4, #0]
 8009a76:	6121      	str	r1, [r4, #16]
 8009a78:	07d8      	lsls	r0, r3, #31
 8009a7a:	d5ea      	bpl.n	8009a52 <_printf_float+0x1a6>
 8009a7c:	1c4b      	adds	r3, r1, #1
 8009a7e:	e7e7      	b.n	8009a50 <_printf_float+0x1a4>
 8009a80:	2900      	cmp	r1, #0
 8009a82:	bfd4      	ite	le
 8009a84:	f1c1 0202 	rsble	r2, r1, #2
 8009a88:	2201      	movgt	r2, #1
 8009a8a:	4413      	add	r3, r2
 8009a8c:	e7e0      	b.n	8009a50 <_printf_float+0x1a4>
 8009a8e:	6823      	ldr	r3, [r4, #0]
 8009a90:	055a      	lsls	r2, r3, #21
 8009a92:	d407      	bmi.n	8009aa4 <_printf_float+0x1f8>
 8009a94:	6923      	ldr	r3, [r4, #16]
 8009a96:	4642      	mov	r2, r8
 8009a98:	4631      	mov	r1, r6
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	47b8      	blx	r7
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	d12c      	bne.n	8009afc <_printf_float+0x250>
 8009aa2:	e764      	b.n	800996e <_printf_float+0xc2>
 8009aa4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009aa8:	f240 80e0 	bls.w	8009c6c <_printf_float+0x3c0>
 8009aac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f7f7 f810 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	d034      	beq.n	8009b26 <_printf_float+0x27a>
 8009abc:	4a37      	ldr	r2, [pc, #220]	; (8009b9c <_printf_float+0x2f0>)
 8009abe:	2301      	movs	r3, #1
 8009ac0:	4631      	mov	r1, r6
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	47b8      	blx	r7
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	f43f af51 	beq.w	800996e <_printf_float+0xc2>
 8009acc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	db02      	blt.n	8009ada <_printf_float+0x22e>
 8009ad4:	6823      	ldr	r3, [r4, #0]
 8009ad6:	07d8      	lsls	r0, r3, #31
 8009ad8:	d510      	bpl.n	8009afc <_printf_float+0x250>
 8009ada:	ee18 3a10 	vmov	r3, s16
 8009ade:	4652      	mov	r2, sl
 8009ae0:	4631      	mov	r1, r6
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	47b8      	blx	r7
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	f43f af41 	beq.w	800996e <_printf_float+0xc2>
 8009aec:	f04f 0800 	mov.w	r8, #0
 8009af0:	f104 091a 	add.w	r9, r4, #26
 8009af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af6:	3b01      	subs	r3, #1
 8009af8:	4543      	cmp	r3, r8
 8009afa:	dc09      	bgt.n	8009b10 <_printf_float+0x264>
 8009afc:	6823      	ldr	r3, [r4, #0]
 8009afe:	079b      	lsls	r3, r3, #30
 8009b00:	f100 8105 	bmi.w	8009d0e <_printf_float+0x462>
 8009b04:	68e0      	ldr	r0, [r4, #12]
 8009b06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b08:	4298      	cmp	r0, r3
 8009b0a:	bfb8      	it	lt
 8009b0c:	4618      	movlt	r0, r3
 8009b0e:	e730      	b.n	8009972 <_printf_float+0xc6>
 8009b10:	2301      	movs	r3, #1
 8009b12:	464a      	mov	r2, r9
 8009b14:	4631      	mov	r1, r6
 8009b16:	4628      	mov	r0, r5
 8009b18:	47b8      	blx	r7
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	f43f af27 	beq.w	800996e <_printf_float+0xc2>
 8009b20:	f108 0801 	add.w	r8, r8, #1
 8009b24:	e7e6      	b.n	8009af4 <_printf_float+0x248>
 8009b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	dc39      	bgt.n	8009ba0 <_printf_float+0x2f4>
 8009b2c:	4a1b      	ldr	r2, [pc, #108]	; (8009b9c <_printf_float+0x2f0>)
 8009b2e:	2301      	movs	r3, #1
 8009b30:	4631      	mov	r1, r6
 8009b32:	4628      	mov	r0, r5
 8009b34:	47b8      	blx	r7
 8009b36:	3001      	adds	r0, #1
 8009b38:	f43f af19 	beq.w	800996e <_printf_float+0xc2>
 8009b3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b40:	4313      	orrs	r3, r2
 8009b42:	d102      	bne.n	8009b4a <_printf_float+0x29e>
 8009b44:	6823      	ldr	r3, [r4, #0]
 8009b46:	07d9      	lsls	r1, r3, #31
 8009b48:	d5d8      	bpl.n	8009afc <_printf_float+0x250>
 8009b4a:	ee18 3a10 	vmov	r3, s16
 8009b4e:	4652      	mov	r2, sl
 8009b50:	4631      	mov	r1, r6
 8009b52:	4628      	mov	r0, r5
 8009b54:	47b8      	blx	r7
 8009b56:	3001      	adds	r0, #1
 8009b58:	f43f af09 	beq.w	800996e <_printf_float+0xc2>
 8009b5c:	f04f 0900 	mov.w	r9, #0
 8009b60:	f104 0a1a 	add.w	sl, r4, #26
 8009b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b66:	425b      	negs	r3, r3
 8009b68:	454b      	cmp	r3, r9
 8009b6a:	dc01      	bgt.n	8009b70 <_printf_float+0x2c4>
 8009b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b6e:	e792      	b.n	8009a96 <_printf_float+0x1ea>
 8009b70:	2301      	movs	r3, #1
 8009b72:	4652      	mov	r2, sl
 8009b74:	4631      	mov	r1, r6
 8009b76:	4628      	mov	r0, r5
 8009b78:	47b8      	blx	r7
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	f43f aef7 	beq.w	800996e <_printf_float+0xc2>
 8009b80:	f109 0901 	add.w	r9, r9, #1
 8009b84:	e7ee      	b.n	8009b64 <_printf_float+0x2b8>
 8009b86:	bf00      	nop
 8009b88:	7fefffff 	.word	0x7fefffff
 8009b8c:	0800e310 	.word	0x0800e310
 8009b90:	0800e314 	.word	0x0800e314
 8009b94:	0800e31c 	.word	0x0800e31c
 8009b98:	0800e318 	.word	0x0800e318
 8009b9c:	0800e320 	.word	0x0800e320
 8009ba0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ba2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	bfa8      	it	ge
 8009ba8:	461a      	movge	r2, r3
 8009baa:	2a00      	cmp	r2, #0
 8009bac:	4691      	mov	r9, r2
 8009bae:	dc37      	bgt.n	8009c20 <_printf_float+0x374>
 8009bb0:	f04f 0b00 	mov.w	fp, #0
 8009bb4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bb8:	f104 021a 	add.w	r2, r4, #26
 8009bbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bbe:	9305      	str	r3, [sp, #20]
 8009bc0:	eba3 0309 	sub.w	r3, r3, r9
 8009bc4:	455b      	cmp	r3, fp
 8009bc6:	dc33      	bgt.n	8009c30 <_printf_float+0x384>
 8009bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	db3b      	blt.n	8009c48 <_printf_float+0x39c>
 8009bd0:	6823      	ldr	r3, [r4, #0]
 8009bd2:	07da      	lsls	r2, r3, #31
 8009bd4:	d438      	bmi.n	8009c48 <_printf_float+0x39c>
 8009bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd8:	9a05      	ldr	r2, [sp, #20]
 8009bda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bdc:	1a9a      	subs	r2, r3, r2
 8009bde:	eba3 0901 	sub.w	r9, r3, r1
 8009be2:	4591      	cmp	r9, r2
 8009be4:	bfa8      	it	ge
 8009be6:	4691      	movge	r9, r2
 8009be8:	f1b9 0f00 	cmp.w	r9, #0
 8009bec:	dc35      	bgt.n	8009c5a <_printf_float+0x3ae>
 8009bee:	f04f 0800 	mov.w	r8, #0
 8009bf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bf6:	f104 0a1a 	add.w	sl, r4, #26
 8009bfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bfe:	1a9b      	subs	r3, r3, r2
 8009c00:	eba3 0309 	sub.w	r3, r3, r9
 8009c04:	4543      	cmp	r3, r8
 8009c06:	f77f af79 	ble.w	8009afc <_printf_float+0x250>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	4652      	mov	r2, sl
 8009c0e:	4631      	mov	r1, r6
 8009c10:	4628      	mov	r0, r5
 8009c12:	47b8      	blx	r7
 8009c14:	3001      	adds	r0, #1
 8009c16:	f43f aeaa 	beq.w	800996e <_printf_float+0xc2>
 8009c1a:	f108 0801 	add.w	r8, r8, #1
 8009c1e:	e7ec      	b.n	8009bfa <_printf_float+0x34e>
 8009c20:	4613      	mov	r3, r2
 8009c22:	4631      	mov	r1, r6
 8009c24:	4642      	mov	r2, r8
 8009c26:	4628      	mov	r0, r5
 8009c28:	47b8      	blx	r7
 8009c2a:	3001      	adds	r0, #1
 8009c2c:	d1c0      	bne.n	8009bb0 <_printf_float+0x304>
 8009c2e:	e69e      	b.n	800996e <_printf_float+0xc2>
 8009c30:	2301      	movs	r3, #1
 8009c32:	4631      	mov	r1, r6
 8009c34:	4628      	mov	r0, r5
 8009c36:	9205      	str	r2, [sp, #20]
 8009c38:	47b8      	blx	r7
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	f43f ae97 	beq.w	800996e <_printf_float+0xc2>
 8009c40:	9a05      	ldr	r2, [sp, #20]
 8009c42:	f10b 0b01 	add.w	fp, fp, #1
 8009c46:	e7b9      	b.n	8009bbc <_printf_float+0x310>
 8009c48:	ee18 3a10 	vmov	r3, s16
 8009c4c:	4652      	mov	r2, sl
 8009c4e:	4631      	mov	r1, r6
 8009c50:	4628      	mov	r0, r5
 8009c52:	47b8      	blx	r7
 8009c54:	3001      	adds	r0, #1
 8009c56:	d1be      	bne.n	8009bd6 <_printf_float+0x32a>
 8009c58:	e689      	b.n	800996e <_printf_float+0xc2>
 8009c5a:	9a05      	ldr	r2, [sp, #20]
 8009c5c:	464b      	mov	r3, r9
 8009c5e:	4442      	add	r2, r8
 8009c60:	4631      	mov	r1, r6
 8009c62:	4628      	mov	r0, r5
 8009c64:	47b8      	blx	r7
 8009c66:	3001      	adds	r0, #1
 8009c68:	d1c1      	bne.n	8009bee <_printf_float+0x342>
 8009c6a:	e680      	b.n	800996e <_printf_float+0xc2>
 8009c6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c6e:	2a01      	cmp	r2, #1
 8009c70:	dc01      	bgt.n	8009c76 <_printf_float+0x3ca>
 8009c72:	07db      	lsls	r3, r3, #31
 8009c74:	d538      	bpl.n	8009ce8 <_printf_float+0x43c>
 8009c76:	2301      	movs	r3, #1
 8009c78:	4642      	mov	r2, r8
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	47b8      	blx	r7
 8009c80:	3001      	adds	r0, #1
 8009c82:	f43f ae74 	beq.w	800996e <_printf_float+0xc2>
 8009c86:	ee18 3a10 	vmov	r3, s16
 8009c8a:	4652      	mov	r2, sl
 8009c8c:	4631      	mov	r1, r6
 8009c8e:	4628      	mov	r0, r5
 8009c90:	47b8      	blx	r7
 8009c92:	3001      	adds	r0, #1
 8009c94:	f43f ae6b 	beq.w	800996e <_printf_float+0xc2>
 8009c98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	f7f6 ff1a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ca4:	b9d8      	cbnz	r0, 8009cde <_printf_float+0x432>
 8009ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ca8:	f108 0201 	add.w	r2, r8, #1
 8009cac:	3b01      	subs	r3, #1
 8009cae:	4631      	mov	r1, r6
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	47b8      	blx	r7
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d10e      	bne.n	8009cd6 <_printf_float+0x42a>
 8009cb8:	e659      	b.n	800996e <_printf_float+0xc2>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	4652      	mov	r2, sl
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	47b8      	blx	r7
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	f43f ae52 	beq.w	800996e <_printf_float+0xc2>
 8009cca:	f108 0801 	add.w	r8, r8, #1
 8009cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	4543      	cmp	r3, r8
 8009cd4:	dcf1      	bgt.n	8009cba <_printf_float+0x40e>
 8009cd6:	464b      	mov	r3, r9
 8009cd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009cdc:	e6dc      	b.n	8009a98 <_printf_float+0x1ec>
 8009cde:	f04f 0800 	mov.w	r8, #0
 8009ce2:	f104 0a1a 	add.w	sl, r4, #26
 8009ce6:	e7f2      	b.n	8009cce <_printf_float+0x422>
 8009ce8:	2301      	movs	r3, #1
 8009cea:	4642      	mov	r2, r8
 8009cec:	e7df      	b.n	8009cae <_printf_float+0x402>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	464a      	mov	r2, r9
 8009cf2:	4631      	mov	r1, r6
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	47b8      	blx	r7
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	f43f ae38 	beq.w	800996e <_printf_float+0xc2>
 8009cfe:	f108 0801 	add.w	r8, r8, #1
 8009d02:	68e3      	ldr	r3, [r4, #12]
 8009d04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d06:	1a5b      	subs	r3, r3, r1
 8009d08:	4543      	cmp	r3, r8
 8009d0a:	dcf0      	bgt.n	8009cee <_printf_float+0x442>
 8009d0c:	e6fa      	b.n	8009b04 <_printf_float+0x258>
 8009d0e:	f04f 0800 	mov.w	r8, #0
 8009d12:	f104 0919 	add.w	r9, r4, #25
 8009d16:	e7f4      	b.n	8009d02 <_printf_float+0x456>

08009d18 <_printf_common>:
 8009d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d1c:	4616      	mov	r6, r2
 8009d1e:	4699      	mov	r9, r3
 8009d20:	688a      	ldr	r2, [r1, #8]
 8009d22:	690b      	ldr	r3, [r1, #16]
 8009d24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	bfb8      	it	lt
 8009d2c:	4613      	movlt	r3, r2
 8009d2e:	6033      	str	r3, [r6, #0]
 8009d30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d34:	4607      	mov	r7, r0
 8009d36:	460c      	mov	r4, r1
 8009d38:	b10a      	cbz	r2, 8009d3e <_printf_common+0x26>
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	6033      	str	r3, [r6, #0]
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	0699      	lsls	r1, r3, #26
 8009d42:	bf42      	ittt	mi
 8009d44:	6833      	ldrmi	r3, [r6, #0]
 8009d46:	3302      	addmi	r3, #2
 8009d48:	6033      	strmi	r3, [r6, #0]
 8009d4a:	6825      	ldr	r5, [r4, #0]
 8009d4c:	f015 0506 	ands.w	r5, r5, #6
 8009d50:	d106      	bne.n	8009d60 <_printf_common+0x48>
 8009d52:	f104 0a19 	add.w	sl, r4, #25
 8009d56:	68e3      	ldr	r3, [r4, #12]
 8009d58:	6832      	ldr	r2, [r6, #0]
 8009d5a:	1a9b      	subs	r3, r3, r2
 8009d5c:	42ab      	cmp	r3, r5
 8009d5e:	dc26      	bgt.n	8009dae <_printf_common+0x96>
 8009d60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d64:	1e13      	subs	r3, r2, #0
 8009d66:	6822      	ldr	r2, [r4, #0]
 8009d68:	bf18      	it	ne
 8009d6a:	2301      	movne	r3, #1
 8009d6c:	0692      	lsls	r2, r2, #26
 8009d6e:	d42b      	bmi.n	8009dc8 <_printf_common+0xb0>
 8009d70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d74:	4649      	mov	r1, r9
 8009d76:	4638      	mov	r0, r7
 8009d78:	47c0      	blx	r8
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	d01e      	beq.n	8009dbc <_printf_common+0xa4>
 8009d7e:	6823      	ldr	r3, [r4, #0]
 8009d80:	68e5      	ldr	r5, [r4, #12]
 8009d82:	6832      	ldr	r2, [r6, #0]
 8009d84:	f003 0306 	and.w	r3, r3, #6
 8009d88:	2b04      	cmp	r3, #4
 8009d8a:	bf08      	it	eq
 8009d8c:	1aad      	subeq	r5, r5, r2
 8009d8e:	68a3      	ldr	r3, [r4, #8]
 8009d90:	6922      	ldr	r2, [r4, #16]
 8009d92:	bf0c      	ite	eq
 8009d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d98:	2500      	movne	r5, #0
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	bfc4      	itt	gt
 8009d9e:	1a9b      	subgt	r3, r3, r2
 8009da0:	18ed      	addgt	r5, r5, r3
 8009da2:	2600      	movs	r6, #0
 8009da4:	341a      	adds	r4, #26
 8009da6:	42b5      	cmp	r5, r6
 8009da8:	d11a      	bne.n	8009de0 <_printf_common+0xc8>
 8009daa:	2000      	movs	r0, #0
 8009dac:	e008      	b.n	8009dc0 <_printf_common+0xa8>
 8009dae:	2301      	movs	r3, #1
 8009db0:	4652      	mov	r2, sl
 8009db2:	4649      	mov	r1, r9
 8009db4:	4638      	mov	r0, r7
 8009db6:	47c0      	blx	r8
 8009db8:	3001      	adds	r0, #1
 8009dba:	d103      	bne.n	8009dc4 <_printf_common+0xac>
 8009dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc4:	3501      	adds	r5, #1
 8009dc6:	e7c6      	b.n	8009d56 <_printf_common+0x3e>
 8009dc8:	18e1      	adds	r1, r4, r3
 8009dca:	1c5a      	adds	r2, r3, #1
 8009dcc:	2030      	movs	r0, #48	; 0x30
 8009dce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009dd2:	4422      	add	r2, r4
 8009dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009dd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ddc:	3302      	adds	r3, #2
 8009dde:	e7c7      	b.n	8009d70 <_printf_common+0x58>
 8009de0:	2301      	movs	r3, #1
 8009de2:	4622      	mov	r2, r4
 8009de4:	4649      	mov	r1, r9
 8009de6:	4638      	mov	r0, r7
 8009de8:	47c0      	blx	r8
 8009dea:	3001      	adds	r0, #1
 8009dec:	d0e6      	beq.n	8009dbc <_printf_common+0xa4>
 8009dee:	3601      	adds	r6, #1
 8009df0:	e7d9      	b.n	8009da6 <_printf_common+0x8e>
	...

08009df4 <_printf_i>:
 8009df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009df8:	7e0f      	ldrb	r7, [r1, #24]
 8009dfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009dfc:	2f78      	cmp	r7, #120	; 0x78
 8009dfe:	4691      	mov	r9, r2
 8009e00:	4680      	mov	r8, r0
 8009e02:	460c      	mov	r4, r1
 8009e04:	469a      	mov	sl, r3
 8009e06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e0a:	d807      	bhi.n	8009e1c <_printf_i+0x28>
 8009e0c:	2f62      	cmp	r7, #98	; 0x62
 8009e0e:	d80a      	bhi.n	8009e26 <_printf_i+0x32>
 8009e10:	2f00      	cmp	r7, #0
 8009e12:	f000 80d8 	beq.w	8009fc6 <_printf_i+0x1d2>
 8009e16:	2f58      	cmp	r7, #88	; 0x58
 8009e18:	f000 80a3 	beq.w	8009f62 <_printf_i+0x16e>
 8009e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e24:	e03a      	b.n	8009e9c <_printf_i+0xa8>
 8009e26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e2a:	2b15      	cmp	r3, #21
 8009e2c:	d8f6      	bhi.n	8009e1c <_printf_i+0x28>
 8009e2e:	a101      	add	r1, pc, #4	; (adr r1, 8009e34 <_printf_i+0x40>)
 8009e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e34:	08009e8d 	.word	0x08009e8d
 8009e38:	08009ea1 	.word	0x08009ea1
 8009e3c:	08009e1d 	.word	0x08009e1d
 8009e40:	08009e1d 	.word	0x08009e1d
 8009e44:	08009e1d 	.word	0x08009e1d
 8009e48:	08009e1d 	.word	0x08009e1d
 8009e4c:	08009ea1 	.word	0x08009ea1
 8009e50:	08009e1d 	.word	0x08009e1d
 8009e54:	08009e1d 	.word	0x08009e1d
 8009e58:	08009e1d 	.word	0x08009e1d
 8009e5c:	08009e1d 	.word	0x08009e1d
 8009e60:	08009fad 	.word	0x08009fad
 8009e64:	08009ed1 	.word	0x08009ed1
 8009e68:	08009f8f 	.word	0x08009f8f
 8009e6c:	08009e1d 	.word	0x08009e1d
 8009e70:	08009e1d 	.word	0x08009e1d
 8009e74:	08009fcf 	.word	0x08009fcf
 8009e78:	08009e1d 	.word	0x08009e1d
 8009e7c:	08009ed1 	.word	0x08009ed1
 8009e80:	08009e1d 	.word	0x08009e1d
 8009e84:	08009e1d 	.word	0x08009e1d
 8009e88:	08009f97 	.word	0x08009f97
 8009e8c:	682b      	ldr	r3, [r5, #0]
 8009e8e:	1d1a      	adds	r2, r3, #4
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	602a      	str	r2, [r5, #0]
 8009e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e0a3      	b.n	8009fe8 <_printf_i+0x1f4>
 8009ea0:	6820      	ldr	r0, [r4, #0]
 8009ea2:	6829      	ldr	r1, [r5, #0]
 8009ea4:	0606      	lsls	r6, r0, #24
 8009ea6:	f101 0304 	add.w	r3, r1, #4
 8009eaa:	d50a      	bpl.n	8009ec2 <_printf_i+0xce>
 8009eac:	680e      	ldr	r6, [r1, #0]
 8009eae:	602b      	str	r3, [r5, #0]
 8009eb0:	2e00      	cmp	r6, #0
 8009eb2:	da03      	bge.n	8009ebc <_printf_i+0xc8>
 8009eb4:	232d      	movs	r3, #45	; 0x2d
 8009eb6:	4276      	negs	r6, r6
 8009eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ebc:	485e      	ldr	r0, [pc, #376]	; (800a038 <_printf_i+0x244>)
 8009ebe:	230a      	movs	r3, #10
 8009ec0:	e019      	b.n	8009ef6 <_printf_i+0x102>
 8009ec2:	680e      	ldr	r6, [r1, #0]
 8009ec4:	602b      	str	r3, [r5, #0]
 8009ec6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009eca:	bf18      	it	ne
 8009ecc:	b236      	sxthne	r6, r6
 8009ece:	e7ef      	b.n	8009eb0 <_printf_i+0xbc>
 8009ed0:	682b      	ldr	r3, [r5, #0]
 8009ed2:	6820      	ldr	r0, [r4, #0]
 8009ed4:	1d19      	adds	r1, r3, #4
 8009ed6:	6029      	str	r1, [r5, #0]
 8009ed8:	0601      	lsls	r1, r0, #24
 8009eda:	d501      	bpl.n	8009ee0 <_printf_i+0xec>
 8009edc:	681e      	ldr	r6, [r3, #0]
 8009ede:	e002      	b.n	8009ee6 <_printf_i+0xf2>
 8009ee0:	0646      	lsls	r6, r0, #25
 8009ee2:	d5fb      	bpl.n	8009edc <_printf_i+0xe8>
 8009ee4:	881e      	ldrh	r6, [r3, #0]
 8009ee6:	4854      	ldr	r0, [pc, #336]	; (800a038 <_printf_i+0x244>)
 8009ee8:	2f6f      	cmp	r7, #111	; 0x6f
 8009eea:	bf0c      	ite	eq
 8009eec:	2308      	moveq	r3, #8
 8009eee:	230a      	movne	r3, #10
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ef6:	6865      	ldr	r5, [r4, #4]
 8009ef8:	60a5      	str	r5, [r4, #8]
 8009efa:	2d00      	cmp	r5, #0
 8009efc:	bfa2      	ittt	ge
 8009efe:	6821      	ldrge	r1, [r4, #0]
 8009f00:	f021 0104 	bicge.w	r1, r1, #4
 8009f04:	6021      	strge	r1, [r4, #0]
 8009f06:	b90e      	cbnz	r6, 8009f0c <_printf_i+0x118>
 8009f08:	2d00      	cmp	r5, #0
 8009f0a:	d04d      	beq.n	8009fa8 <_printf_i+0x1b4>
 8009f0c:	4615      	mov	r5, r2
 8009f0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f12:	fb03 6711 	mls	r7, r3, r1, r6
 8009f16:	5dc7      	ldrb	r7, [r0, r7]
 8009f18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f1c:	4637      	mov	r7, r6
 8009f1e:	42bb      	cmp	r3, r7
 8009f20:	460e      	mov	r6, r1
 8009f22:	d9f4      	bls.n	8009f0e <_printf_i+0x11a>
 8009f24:	2b08      	cmp	r3, #8
 8009f26:	d10b      	bne.n	8009f40 <_printf_i+0x14c>
 8009f28:	6823      	ldr	r3, [r4, #0]
 8009f2a:	07de      	lsls	r6, r3, #31
 8009f2c:	d508      	bpl.n	8009f40 <_printf_i+0x14c>
 8009f2e:	6923      	ldr	r3, [r4, #16]
 8009f30:	6861      	ldr	r1, [r4, #4]
 8009f32:	4299      	cmp	r1, r3
 8009f34:	bfde      	ittt	le
 8009f36:	2330      	movle	r3, #48	; 0x30
 8009f38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f40:	1b52      	subs	r2, r2, r5
 8009f42:	6122      	str	r2, [r4, #16]
 8009f44:	f8cd a000 	str.w	sl, [sp]
 8009f48:	464b      	mov	r3, r9
 8009f4a:	aa03      	add	r2, sp, #12
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	4640      	mov	r0, r8
 8009f50:	f7ff fee2 	bl	8009d18 <_printf_common>
 8009f54:	3001      	adds	r0, #1
 8009f56:	d14c      	bne.n	8009ff2 <_printf_i+0x1fe>
 8009f58:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5c:	b004      	add	sp, #16
 8009f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f62:	4835      	ldr	r0, [pc, #212]	; (800a038 <_printf_i+0x244>)
 8009f64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009f68:	6829      	ldr	r1, [r5, #0]
 8009f6a:	6823      	ldr	r3, [r4, #0]
 8009f6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f70:	6029      	str	r1, [r5, #0]
 8009f72:	061d      	lsls	r5, r3, #24
 8009f74:	d514      	bpl.n	8009fa0 <_printf_i+0x1ac>
 8009f76:	07df      	lsls	r7, r3, #31
 8009f78:	bf44      	itt	mi
 8009f7a:	f043 0320 	orrmi.w	r3, r3, #32
 8009f7e:	6023      	strmi	r3, [r4, #0]
 8009f80:	b91e      	cbnz	r6, 8009f8a <_printf_i+0x196>
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	f023 0320 	bic.w	r3, r3, #32
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	2310      	movs	r3, #16
 8009f8c:	e7b0      	b.n	8009ef0 <_printf_i+0xfc>
 8009f8e:	6823      	ldr	r3, [r4, #0]
 8009f90:	f043 0320 	orr.w	r3, r3, #32
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	2378      	movs	r3, #120	; 0x78
 8009f98:	4828      	ldr	r0, [pc, #160]	; (800a03c <_printf_i+0x248>)
 8009f9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f9e:	e7e3      	b.n	8009f68 <_printf_i+0x174>
 8009fa0:	0659      	lsls	r1, r3, #25
 8009fa2:	bf48      	it	mi
 8009fa4:	b2b6      	uxthmi	r6, r6
 8009fa6:	e7e6      	b.n	8009f76 <_printf_i+0x182>
 8009fa8:	4615      	mov	r5, r2
 8009faa:	e7bb      	b.n	8009f24 <_printf_i+0x130>
 8009fac:	682b      	ldr	r3, [r5, #0]
 8009fae:	6826      	ldr	r6, [r4, #0]
 8009fb0:	6961      	ldr	r1, [r4, #20]
 8009fb2:	1d18      	adds	r0, r3, #4
 8009fb4:	6028      	str	r0, [r5, #0]
 8009fb6:	0635      	lsls	r5, r6, #24
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	d501      	bpl.n	8009fc0 <_printf_i+0x1cc>
 8009fbc:	6019      	str	r1, [r3, #0]
 8009fbe:	e002      	b.n	8009fc6 <_printf_i+0x1d2>
 8009fc0:	0670      	lsls	r0, r6, #25
 8009fc2:	d5fb      	bpl.n	8009fbc <_printf_i+0x1c8>
 8009fc4:	8019      	strh	r1, [r3, #0]
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	6123      	str	r3, [r4, #16]
 8009fca:	4615      	mov	r5, r2
 8009fcc:	e7ba      	b.n	8009f44 <_printf_i+0x150>
 8009fce:	682b      	ldr	r3, [r5, #0]
 8009fd0:	1d1a      	adds	r2, r3, #4
 8009fd2:	602a      	str	r2, [r5, #0]
 8009fd4:	681d      	ldr	r5, [r3, #0]
 8009fd6:	6862      	ldr	r2, [r4, #4]
 8009fd8:	2100      	movs	r1, #0
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f7f6 f908 	bl	80001f0 <memchr>
 8009fe0:	b108      	cbz	r0, 8009fe6 <_printf_i+0x1f2>
 8009fe2:	1b40      	subs	r0, r0, r5
 8009fe4:	6060      	str	r0, [r4, #4]
 8009fe6:	6863      	ldr	r3, [r4, #4]
 8009fe8:	6123      	str	r3, [r4, #16]
 8009fea:	2300      	movs	r3, #0
 8009fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ff0:	e7a8      	b.n	8009f44 <_printf_i+0x150>
 8009ff2:	6923      	ldr	r3, [r4, #16]
 8009ff4:	462a      	mov	r2, r5
 8009ff6:	4649      	mov	r1, r9
 8009ff8:	4640      	mov	r0, r8
 8009ffa:	47d0      	blx	sl
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	d0ab      	beq.n	8009f58 <_printf_i+0x164>
 800a000:	6823      	ldr	r3, [r4, #0]
 800a002:	079b      	lsls	r3, r3, #30
 800a004:	d413      	bmi.n	800a02e <_printf_i+0x23a>
 800a006:	68e0      	ldr	r0, [r4, #12]
 800a008:	9b03      	ldr	r3, [sp, #12]
 800a00a:	4298      	cmp	r0, r3
 800a00c:	bfb8      	it	lt
 800a00e:	4618      	movlt	r0, r3
 800a010:	e7a4      	b.n	8009f5c <_printf_i+0x168>
 800a012:	2301      	movs	r3, #1
 800a014:	4632      	mov	r2, r6
 800a016:	4649      	mov	r1, r9
 800a018:	4640      	mov	r0, r8
 800a01a:	47d0      	blx	sl
 800a01c:	3001      	adds	r0, #1
 800a01e:	d09b      	beq.n	8009f58 <_printf_i+0x164>
 800a020:	3501      	adds	r5, #1
 800a022:	68e3      	ldr	r3, [r4, #12]
 800a024:	9903      	ldr	r1, [sp, #12]
 800a026:	1a5b      	subs	r3, r3, r1
 800a028:	42ab      	cmp	r3, r5
 800a02a:	dcf2      	bgt.n	800a012 <_printf_i+0x21e>
 800a02c:	e7eb      	b.n	800a006 <_printf_i+0x212>
 800a02e:	2500      	movs	r5, #0
 800a030:	f104 0619 	add.w	r6, r4, #25
 800a034:	e7f5      	b.n	800a022 <_printf_i+0x22e>
 800a036:	bf00      	nop
 800a038:	0800e322 	.word	0x0800e322
 800a03c:	0800e333 	.word	0x0800e333

0800a040 <_scanf_float>:
 800a040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a044:	b087      	sub	sp, #28
 800a046:	4617      	mov	r7, r2
 800a048:	9303      	str	r3, [sp, #12]
 800a04a:	688b      	ldr	r3, [r1, #8]
 800a04c:	1e5a      	subs	r2, r3, #1
 800a04e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a052:	bf83      	ittte	hi
 800a054:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a058:	195b      	addhi	r3, r3, r5
 800a05a:	9302      	strhi	r3, [sp, #8]
 800a05c:	2300      	movls	r3, #0
 800a05e:	bf86      	itte	hi
 800a060:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a064:	608b      	strhi	r3, [r1, #8]
 800a066:	9302      	strls	r3, [sp, #8]
 800a068:	680b      	ldr	r3, [r1, #0]
 800a06a:	468b      	mov	fp, r1
 800a06c:	2500      	movs	r5, #0
 800a06e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a072:	f84b 3b1c 	str.w	r3, [fp], #28
 800a076:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a07a:	4680      	mov	r8, r0
 800a07c:	460c      	mov	r4, r1
 800a07e:	465e      	mov	r6, fp
 800a080:	46aa      	mov	sl, r5
 800a082:	46a9      	mov	r9, r5
 800a084:	9501      	str	r5, [sp, #4]
 800a086:	68a2      	ldr	r2, [r4, #8]
 800a088:	b152      	cbz	r2, 800a0a0 <_scanf_float+0x60>
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	2b4e      	cmp	r3, #78	; 0x4e
 800a090:	d864      	bhi.n	800a15c <_scanf_float+0x11c>
 800a092:	2b40      	cmp	r3, #64	; 0x40
 800a094:	d83c      	bhi.n	800a110 <_scanf_float+0xd0>
 800a096:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a09a:	b2c8      	uxtb	r0, r1
 800a09c:	280e      	cmp	r0, #14
 800a09e:	d93a      	bls.n	800a116 <_scanf_float+0xd6>
 800a0a0:	f1b9 0f00 	cmp.w	r9, #0
 800a0a4:	d003      	beq.n	800a0ae <_scanf_float+0x6e>
 800a0a6:	6823      	ldr	r3, [r4, #0]
 800a0a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0ac:	6023      	str	r3, [r4, #0]
 800a0ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0b2:	f1ba 0f01 	cmp.w	sl, #1
 800a0b6:	f200 8113 	bhi.w	800a2e0 <_scanf_float+0x2a0>
 800a0ba:	455e      	cmp	r6, fp
 800a0bc:	f200 8105 	bhi.w	800a2ca <_scanf_float+0x28a>
 800a0c0:	2501      	movs	r5, #1
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	b007      	add	sp, #28
 800a0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a0ce:	2a0d      	cmp	r2, #13
 800a0d0:	d8e6      	bhi.n	800a0a0 <_scanf_float+0x60>
 800a0d2:	a101      	add	r1, pc, #4	; (adr r1, 800a0d8 <_scanf_float+0x98>)
 800a0d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a0d8:	0800a217 	.word	0x0800a217
 800a0dc:	0800a0a1 	.word	0x0800a0a1
 800a0e0:	0800a0a1 	.word	0x0800a0a1
 800a0e4:	0800a0a1 	.word	0x0800a0a1
 800a0e8:	0800a277 	.word	0x0800a277
 800a0ec:	0800a24f 	.word	0x0800a24f
 800a0f0:	0800a0a1 	.word	0x0800a0a1
 800a0f4:	0800a0a1 	.word	0x0800a0a1
 800a0f8:	0800a225 	.word	0x0800a225
 800a0fc:	0800a0a1 	.word	0x0800a0a1
 800a100:	0800a0a1 	.word	0x0800a0a1
 800a104:	0800a0a1 	.word	0x0800a0a1
 800a108:	0800a0a1 	.word	0x0800a0a1
 800a10c:	0800a1dd 	.word	0x0800a1dd
 800a110:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a114:	e7db      	b.n	800a0ce <_scanf_float+0x8e>
 800a116:	290e      	cmp	r1, #14
 800a118:	d8c2      	bhi.n	800a0a0 <_scanf_float+0x60>
 800a11a:	a001      	add	r0, pc, #4	; (adr r0, 800a120 <_scanf_float+0xe0>)
 800a11c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a120:	0800a1cf 	.word	0x0800a1cf
 800a124:	0800a0a1 	.word	0x0800a0a1
 800a128:	0800a1cf 	.word	0x0800a1cf
 800a12c:	0800a263 	.word	0x0800a263
 800a130:	0800a0a1 	.word	0x0800a0a1
 800a134:	0800a17d 	.word	0x0800a17d
 800a138:	0800a1b9 	.word	0x0800a1b9
 800a13c:	0800a1b9 	.word	0x0800a1b9
 800a140:	0800a1b9 	.word	0x0800a1b9
 800a144:	0800a1b9 	.word	0x0800a1b9
 800a148:	0800a1b9 	.word	0x0800a1b9
 800a14c:	0800a1b9 	.word	0x0800a1b9
 800a150:	0800a1b9 	.word	0x0800a1b9
 800a154:	0800a1b9 	.word	0x0800a1b9
 800a158:	0800a1b9 	.word	0x0800a1b9
 800a15c:	2b6e      	cmp	r3, #110	; 0x6e
 800a15e:	d809      	bhi.n	800a174 <_scanf_float+0x134>
 800a160:	2b60      	cmp	r3, #96	; 0x60
 800a162:	d8b2      	bhi.n	800a0ca <_scanf_float+0x8a>
 800a164:	2b54      	cmp	r3, #84	; 0x54
 800a166:	d077      	beq.n	800a258 <_scanf_float+0x218>
 800a168:	2b59      	cmp	r3, #89	; 0x59
 800a16a:	d199      	bne.n	800a0a0 <_scanf_float+0x60>
 800a16c:	2d07      	cmp	r5, #7
 800a16e:	d197      	bne.n	800a0a0 <_scanf_float+0x60>
 800a170:	2508      	movs	r5, #8
 800a172:	e029      	b.n	800a1c8 <_scanf_float+0x188>
 800a174:	2b74      	cmp	r3, #116	; 0x74
 800a176:	d06f      	beq.n	800a258 <_scanf_float+0x218>
 800a178:	2b79      	cmp	r3, #121	; 0x79
 800a17a:	e7f6      	b.n	800a16a <_scanf_float+0x12a>
 800a17c:	6821      	ldr	r1, [r4, #0]
 800a17e:	05c8      	lsls	r0, r1, #23
 800a180:	d51a      	bpl.n	800a1b8 <_scanf_float+0x178>
 800a182:	9b02      	ldr	r3, [sp, #8]
 800a184:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a188:	6021      	str	r1, [r4, #0]
 800a18a:	f109 0901 	add.w	r9, r9, #1
 800a18e:	b11b      	cbz	r3, 800a198 <_scanf_float+0x158>
 800a190:	3b01      	subs	r3, #1
 800a192:	3201      	adds	r2, #1
 800a194:	9302      	str	r3, [sp, #8]
 800a196:	60a2      	str	r2, [r4, #8]
 800a198:	68a3      	ldr	r3, [r4, #8]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	60a3      	str	r3, [r4, #8]
 800a19e:	6923      	ldr	r3, [r4, #16]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	6123      	str	r3, [r4, #16]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	607b      	str	r3, [r7, #4]
 800a1ac:	f340 8084 	ble.w	800a2b8 <_scanf_float+0x278>
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	603b      	str	r3, [r7, #0]
 800a1b6:	e766      	b.n	800a086 <_scanf_float+0x46>
 800a1b8:	eb1a 0f05 	cmn.w	sl, r5
 800a1bc:	f47f af70 	bne.w	800a0a0 <_scanf_float+0x60>
 800a1c0:	6822      	ldr	r2, [r4, #0]
 800a1c2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a1c6:	6022      	str	r2, [r4, #0]
 800a1c8:	f806 3b01 	strb.w	r3, [r6], #1
 800a1cc:	e7e4      	b.n	800a198 <_scanf_float+0x158>
 800a1ce:	6822      	ldr	r2, [r4, #0]
 800a1d0:	0610      	lsls	r0, r2, #24
 800a1d2:	f57f af65 	bpl.w	800a0a0 <_scanf_float+0x60>
 800a1d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1da:	e7f4      	b.n	800a1c6 <_scanf_float+0x186>
 800a1dc:	f1ba 0f00 	cmp.w	sl, #0
 800a1e0:	d10e      	bne.n	800a200 <_scanf_float+0x1c0>
 800a1e2:	f1b9 0f00 	cmp.w	r9, #0
 800a1e6:	d10e      	bne.n	800a206 <_scanf_float+0x1c6>
 800a1e8:	6822      	ldr	r2, [r4, #0]
 800a1ea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a1ee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a1f2:	d108      	bne.n	800a206 <_scanf_float+0x1c6>
 800a1f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a1f8:	6022      	str	r2, [r4, #0]
 800a1fa:	f04f 0a01 	mov.w	sl, #1
 800a1fe:	e7e3      	b.n	800a1c8 <_scanf_float+0x188>
 800a200:	f1ba 0f02 	cmp.w	sl, #2
 800a204:	d055      	beq.n	800a2b2 <_scanf_float+0x272>
 800a206:	2d01      	cmp	r5, #1
 800a208:	d002      	beq.n	800a210 <_scanf_float+0x1d0>
 800a20a:	2d04      	cmp	r5, #4
 800a20c:	f47f af48 	bne.w	800a0a0 <_scanf_float+0x60>
 800a210:	3501      	adds	r5, #1
 800a212:	b2ed      	uxtb	r5, r5
 800a214:	e7d8      	b.n	800a1c8 <_scanf_float+0x188>
 800a216:	f1ba 0f01 	cmp.w	sl, #1
 800a21a:	f47f af41 	bne.w	800a0a0 <_scanf_float+0x60>
 800a21e:	f04f 0a02 	mov.w	sl, #2
 800a222:	e7d1      	b.n	800a1c8 <_scanf_float+0x188>
 800a224:	b97d      	cbnz	r5, 800a246 <_scanf_float+0x206>
 800a226:	f1b9 0f00 	cmp.w	r9, #0
 800a22a:	f47f af3c 	bne.w	800a0a6 <_scanf_float+0x66>
 800a22e:	6822      	ldr	r2, [r4, #0]
 800a230:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a234:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a238:	f47f af39 	bne.w	800a0ae <_scanf_float+0x6e>
 800a23c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a240:	6022      	str	r2, [r4, #0]
 800a242:	2501      	movs	r5, #1
 800a244:	e7c0      	b.n	800a1c8 <_scanf_float+0x188>
 800a246:	2d03      	cmp	r5, #3
 800a248:	d0e2      	beq.n	800a210 <_scanf_float+0x1d0>
 800a24a:	2d05      	cmp	r5, #5
 800a24c:	e7de      	b.n	800a20c <_scanf_float+0x1cc>
 800a24e:	2d02      	cmp	r5, #2
 800a250:	f47f af26 	bne.w	800a0a0 <_scanf_float+0x60>
 800a254:	2503      	movs	r5, #3
 800a256:	e7b7      	b.n	800a1c8 <_scanf_float+0x188>
 800a258:	2d06      	cmp	r5, #6
 800a25a:	f47f af21 	bne.w	800a0a0 <_scanf_float+0x60>
 800a25e:	2507      	movs	r5, #7
 800a260:	e7b2      	b.n	800a1c8 <_scanf_float+0x188>
 800a262:	6822      	ldr	r2, [r4, #0]
 800a264:	0591      	lsls	r1, r2, #22
 800a266:	f57f af1b 	bpl.w	800a0a0 <_scanf_float+0x60>
 800a26a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a26e:	6022      	str	r2, [r4, #0]
 800a270:	f8cd 9004 	str.w	r9, [sp, #4]
 800a274:	e7a8      	b.n	800a1c8 <_scanf_float+0x188>
 800a276:	6822      	ldr	r2, [r4, #0]
 800a278:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a27c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a280:	d006      	beq.n	800a290 <_scanf_float+0x250>
 800a282:	0550      	lsls	r0, r2, #21
 800a284:	f57f af0c 	bpl.w	800a0a0 <_scanf_float+0x60>
 800a288:	f1b9 0f00 	cmp.w	r9, #0
 800a28c:	f43f af0f 	beq.w	800a0ae <_scanf_float+0x6e>
 800a290:	0591      	lsls	r1, r2, #22
 800a292:	bf58      	it	pl
 800a294:	9901      	ldrpl	r1, [sp, #4]
 800a296:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a29a:	bf58      	it	pl
 800a29c:	eba9 0101 	subpl.w	r1, r9, r1
 800a2a0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a2a4:	bf58      	it	pl
 800a2a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a2aa:	6022      	str	r2, [r4, #0]
 800a2ac:	f04f 0900 	mov.w	r9, #0
 800a2b0:	e78a      	b.n	800a1c8 <_scanf_float+0x188>
 800a2b2:	f04f 0a03 	mov.w	sl, #3
 800a2b6:	e787      	b.n	800a1c8 <_scanf_float+0x188>
 800a2b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a2bc:	4639      	mov	r1, r7
 800a2be:	4640      	mov	r0, r8
 800a2c0:	4798      	blx	r3
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	f43f aedf 	beq.w	800a086 <_scanf_float+0x46>
 800a2c8:	e6ea      	b.n	800a0a0 <_scanf_float+0x60>
 800a2ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2d2:	463a      	mov	r2, r7
 800a2d4:	4640      	mov	r0, r8
 800a2d6:	4798      	blx	r3
 800a2d8:	6923      	ldr	r3, [r4, #16]
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	6123      	str	r3, [r4, #16]
 800a2de:	e6ec      	b.n	800a0ba <_scanf_float+0x7a>
 800a2e0:	1e6b      	subs	r3, r5, #1
 800a2e2:	2b06      	cmp	r3, #6
 800a2e4:	d825      	bhi.n	800a332 <_scanf_float+0x2f2>
 800a2e6:	2d02      	cmp	r5, #2
 800a2e8:	d836      	bhi.n	800a358 <_scanf_float+0x318>
 800a2ea:	455e      	cmp	r6, fp
 800a2ec:	f67f aee8 	bls.w	800a0c0 <_scanf_float+0x80>
 800a2f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2f8:	463a      	mov	r2, r7
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	4798      	blx	r3
 800a2fe:	6923      	ldr	r3, [r4, #16]
 800a300:	3b01      	subs	r3, #1
 800a302:	6123      	str	r3, [r4, #16]
 800a304:	e7f1      	b.n	800a2ea <_scanf_float+0x2aa>
 800a306:	9802      	ldr	r0, [sp, #8]
 800a308:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a30c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a310:	9002      	str	r0, [sp, #8]
 800a312:	463a      	mov	r2, r7
 800a314:	4640      	mov	r0, r8
 800a316:	4798      	blx	r3
 800a318:	6923      	ldr	r3, [r4, #16]
 800a31a:	3b01      	subs	r3, #1
 800a31c:	6123      	str	r3, [r4, #16]
 800a31e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a322:	fa5f fa8a 	uxtb.w	sl, sl
 800a326:	f1ba 0f02 	cmp.w	sl, #2
 800a32a:	d1ec      	bne.n	800a306 <_scanf_float+0x2c6>
 800a32c:	3d03      	subs	r5, #3
 800a32e:	b2ed      	uxtb	r5, r5
 800a330:	1b76      	subs	r6, r6, r5
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	05da      	lsls	r2, r3, #23
 800a336:	d52f      	bpl.n	800a398 <_scanf_float+0x358>
 800a338:	055b      	lsls	r3, r3, #21
 800a33a:	d510      	bpl.n	800a35e <_scanf_float+0x31e>
 800a33c:	455e      	cmp	r6, fp
 800a33e:	f67f aebf 	bls.w	800a0c0 <_scanf_float+0x80>
 800a342:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a346:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a34a:	463a      	mov	r2, r7
 800a34c:	4640      	mov	r0, r8
 800a34e:	4798      	blx	r3
 800a350:	6923      	ldr	r3, [r4, #16]
 800a352:	3b01      	subs	r3, #1
 800a354:	6123      	str	r3, [r4, #16]
 800a356:	e7f1      	b.n	800a33c <_scanf_float+0x2fc>
 800a358:	46aa      	mov	sl, r5
 800a35a:	9602      	str	r6, [sp, #8]
 800a35c:	e7df      	b.n	800a31e <_scanf_float+0x2de>
 800a35e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a362:	6923      	ldr	r3, [r4, #16]
 800a364:	2965      	cmp	r1, #101	; 0x65
 800a366:	f103 33ff 	add.w	r3, r3, #4294967295
 800a36a:	f106 35ff 	add.w	r5, r6, #4294967295
 800a36e:	6123      	str	r3, [r4, #16]
 800a370:	d00c      	beq.n	800a38c <_scanf_float+0x34c>
 800a372:	2945      	cmp	r1, #69	; 0x45
 800a374:	d00a      	beq.n	800a38c <_scanf_float+0x34c>
 800a376:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a37a:	463a      	mov	r2, r7
 800a37c:	4640      	mov	r0, r8
 800a37e:	4798      	blx	r3
 800a380:	6923      	ldr	r3, [r4, #16]
 800a382:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a386:	3b01      	subs	r3, #1
 800a388:	1eb5      	subs	r5, r6, #2
 800a38a:	6123      	str	r3, [r4, #16]
 800a38c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a390:	463a      	mov	r2, r7
 800a392:	4640      	mov	r0, r8
 800a394:	4798      	blx	r3
 800a396:	462e      	mov	r6, r5
 800a398:	6825      	ldr	r5, [r4, #0]
 800a39a:	f015 0510 	ands.w	r5, r5, #16
 800a39e:	d159      	bne.n	800a454 <_scanf_float+0x414>
 800a3a0:	7035      	strb	r5, [r6, #0]
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a3a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3ac:	d11b      	bne.n	800a3e6 <_scanf_float+0x3a6>
 800a3ae:	9b01      	ldr	r3, [sp, #4]
 800a3b0:	454b      	cmp	r3, r9
 800a3b2:	eba3 0209 	sub.w	r2, r3, r9
 800a3b6:	d123      	bne.n	800a400 <_scanf_float+0x3c0>
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	4659      	mov	r1, fp
 800a3bc:	4640      	mov	r0, r8
 800a3be:	f000 fe99 	bl	800b0f4 <_strtod_r>
 800a3c2:	6822      	ldr	r2, [r4, #0]
 800a3c4:	9b03      	ldr	r3, [sp, #12]
 800a3c6:	f012 0f02 	tst.w	r2, #2
 800a3ca:	ec57 6b10 	vmov	r6, r7, d0
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	d021      	beq.n	800a416 <_scanf_float+0x3d6>
 800a3d2:	9903      	ldr	r1, [sp, #12]
 800a3d4:	1d1a      	adds	r2, r3, #4
 800a3d6:	600a      	str	r2, [r1, #0]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	e9c3 6700 	strd	r6, r7, [r3]
 800a3de:	68e3      	ldr	r3, [r4, #12]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	60e3      	str	r3, [r4, #12]
 800a3e4:	e66d      	b.n	800a0c2 <_scanf_float+0x82>
 800a3e6:	9b04      	ldr	r3, [sp, #16]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d0e5      	beq.n	800a3b8 <_scanf_float+0x378>
 800a3ec:	9905      	ldr	r1, [sp, #20]
 800a3ee:	230a      	movs	r3, #10
 800a3f0:	462a      	mov	r2, r5
 800a3f2:	3101      	adds	r1, #1
 800a3f4:	4640      	mov	r0, r8
 800a3f6:	f000 ff05 	bl	800b204 <_strtol_r>
 800a3fa:	9b04      	ldr	r3, [sp, #16]
 800a3fc:	9e05      	ldr	r6, [sp, #20]
 800a3fe:	1ac2      	subs	r2, r0, r3
 800a400:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a404:	429e      	cmp	r6, r3
 800a406:	bf28      	it	cs
 800a408:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a40c:	4912      	ldr	r1, [pc, #72]	; (800a458 <_scanf_float+0x418>)
 800a40e:	4630      	mov	r0, r6
 800a410:	f000 f82c 	bl	800a46c <siprintf>
 800a414:	e7d0      	b.n	800a3b8 <_scanf_float+0x378>
 800a416:	9903      	ldr	r1, [sp, #12]
 800a418:	f012 0f04 	tst.w	r2, #4
 800a41c:	f103 0204 	add.w	r2, r3, #4
 800a420:	600a      	str	r2, [r1, #0]
 800a422:	d1d9      	bne.n	800a3d8 <_scanf_float+0x398>
 800a424:	f8d3 8000 	ldr.w	r8, [r3]
 800a428:	ee10 2a10 	vmov	r2, s0
 800a42c:	ee10 0a10 	vmov	r0, s0
 800a430:	463b      	mov	r3, r7
 800a432:	4639      	mov	r1, r7
 800a434:	f7f6 fb82 	bl	8000b3c <__aeabi_dcmpun>
 800a438:	b128      	cbz	r0, 800a446 <_scanf_float+0x406>
 800a43a:	4808      	ldr	r0, [pc, #32]	; (800a45c <_scanf_float+0x41c>)
 800a43c:	f000 f810 	bl	800a460 <nanf>
 800a440:	ed88 0a00 	vstr	s0, [r8]
 800a444:	e7cb      	b.n	800a3de <_scanf_float+0x39e>
 800a446:	4630      	mov	r0, r6
 800a448:	4639      	mov	r1, r7
 800a44a:	f7f6 fbd5 	bl	8000bf8 <__aeabi_d2f>
 800a44e:	f8c8 0000 	str.w	r0, [r8]
 800a452:	e7c4      	b.n	800a3de <_scanf_float+0x39e>
 800a454:	2500      	movs	r5, #0
 800a456:	e634      	b.n	800a0c2 <_scanf_float+0x82>
 800a458:	0800e344 	.word	0x0800e344
 800a45c:	0800e750 	.word	0x0800e750

0800a460 <nanf>:
 800a460:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a468 <nanf+0x8>
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	7fc00000 	.word	0x7fc00000

0800a46c <siprintf>:
 800a46c:	b40e      	push	{r1, r2, r3}
 800a46e:	b500      	push	{lr}
 800a470:	b09c      	sub	sp, #112	; 0x70
 800a472:	ab1d      	add	r3, sp, #116	; 0x74
 800a474:	9002      	str	r0, [sp, #8]
 800a476:	9006      	str	r0, [sp, #24]
 800a478:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a47c:	4809      	ldr	r0, [pc, #36]	; (800a4a4 <siprintf+0x38>)
 800a47e:	9107      	str	r1, [sp, #28]
 800a480:	9104      	str	r1, [sp, #16]
 800a482:	4909      	ldr	r1, [pc, #36]	; (800a4a8 <siprintf+0x3c>)
 800a484:	f853 2b04 	ldr.w	r2, [r3], #4
 800a488:	9105      	str	r1, [sp, #20]
 800a48a:	6800      	ldr	r0, [r0, #0]
 800a48c:	9301      	str	r3, [sp, #4]
 800a48e:	a902      	add	r1, sp, #8
 800a490:	f002 fed6 	bl	800d240 <_svfiprintf_r>
 800a494:	9b02      	ldr	r3, [sp, #8]
 800a496:	2200      	movs	r2, #0
 800a498:	701a      	strb	r2, [r3, #0]
 800a49a:	b01c      	add	sp, #112	; 0x70
 800a49c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4a0:	b003      	add	sp, #12
 800a4a2:	4770      	bx	lr
 800a4a4:	2000022c 	.word	0x2000022c
 800a4a8:	ffff0208 	.word	0xffff0208

0800a4ac <sulp>:
 800a4ac:	b570      	push	{r4, r5, r6, lr}
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	460d      	mov	r5, r1
 800a4b2:	ec45 4b10 	vmov	d0, r4, r5
 800a4b6:	4616      	mov	r6, r2
 800a4b8:	f002 fc20 	bl	800ccfc <__ulp>
 800a4bc:	ec51 0b10 	vmov	r0, r1, d0
 800a4c0:	b17e      	cbz	r6, 800a4e2 <sulp+0x36>
 800a4c2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a4c6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	dd09      	ble.n	800a4e2 <sulp+0x36>
 800a4ce:	051b      	lsls	r3, r3, #20
 800a4d0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a4d4:	2400      	movs	r4, #0
 800a4d6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a4da:	4622      	mov	r2, r4
 800a4dc:	462b      	mov	r3, r5
 800a4de:	f7f6 f893 	bl	8000608 <__aeabi_dmul>
 800a4e2:	bd70      	pop	{r4, r5, r6, pc}
 800a4e4:	0000      	movs	r0, r0
	...

0800a4e8 <_strtod_l>:
 800a4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ec:	ed2d 8b02 	vpush	{d8}
 800a4f0:	b09d      	sub	sp, #116	; 0x74
 800a4f2:	461f      	mov	r7, r3
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	9318      	str	r3, [sp, #96]	; 0x60
 800a4f8:	4ba2      	ldr	r3, [pc, #648]	; (800a784 <_strtod_l+0x29c>)
 800a4fa:	9213      	str	r2, [sp, #76]	; 0x4c
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	9305      	str	r3, [sp, #20]
 800a500:	4604      	mov	r4, r0
 800a502:	4618      	mov	r0, r3
 800a504:	4688      	mov	r8, r1
 800a506:	f7f5 fe6b 	bl	80001e0 <strlen>
 800a50a:	f04f 0a00 	mov.w	sl, #0
 800a50e:	4605      	mov	r5, r0
 800a510:	f04f 0b00 	mov.w	fp, #0
 800a514:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a518:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a51a:	781a      	ldrb	r2, [r3, #0]
 800a51c:	2a2b      	cmp	r2, #43	; 0x2b
 800a51e:	d04e      	beq.n	800a5be <_strtod_l+0xd6>
 800a520:	d83b      	bhi.n	800a59a <_strtod_l+0xb2>
 800a522:	2a0d      	cmp	r2, #13
 800a524:	d834      	bhi.n	800a590 <_strtod_l+0xa8>
 800a526:	2a08      	cmp	r2, #8
 800a528:	d834      	bhi.n	800a594 <_strtod_l+0xac>
 800a52a:	2a00      	cmp	r2, #0
 800a52c:	d03e      	beq.n	800a5ac <_strtod_l+0xc4>
 800a52e:	2300      	movs	r3, #0
 800a530:	930a      	str	r3, [sp, #40]	; 0x28
 800a532:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a534:	7833      	ldrb	r3, [r6, #0]
 800a536:	2b30      	cmp	r3, #48	; 0x30
 800a538:	f040 80b0 	bne.w	800a69c <_strtod_l+0x1b4>
 800a53c:	7873      	ldrb	r3, [r6, #1]
 800a53e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a542:	2b58      	cmp	r3, #88	; 0x58
 800a544:	d168      	bne.n	800a618 <_strtod_l+0x130>
 800a546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a548:	9301      	str	r3, [sp, #4]
 800a54a:	ab18      	add	r3, sp, #96	; 0x60
 800a54c:	9702      	str	r7, [sp, #8]
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	4a8d      	ldr	r2, [pc, #564]	; (800a788 <_strtod_l+0x2a0>)
 800a552:	ab19      	add	r3, sp, #100	; 0x64
 800a554:	a917      	add	r1, sp, #92	; 0x5c
 800a556:	4620      	mov	r0, r4
 800a558:	f001 fd38 	bl	800bfcc <__gethex>
 800a55c:	f010 0707 	ands.w	r7, r0, #7
 800a560:	4605      	mov	r5, r0
 800a562:	d005      	beq.n	800a570 <_strtod_l+0x88>
 800a564:	2f06      	cmp	r7, #6
 800a566:	d12c      	bne.n	800a5c2 <_strtod_l+0xda>
 800a568:	3601      	adds	r6, #1
 800a56a:	2300      	movs	r3, #0
 800a56c:	9617      	str	r6, [sp, #92]	; 0x5c
 800a56e:	930a      	str	r3, [sp, #40]	; 0x28
 800a570:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a572:	2b00      	cmp	r3, #0
 800a574:	f040 8590 	bne.w	800b098 <_strtod_l+0xbb0>
 800a578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a57a:	b1eb      	cbz	r3, 800a5b8 <_strtod_l+0xd0>
 800a57c:	4652      	mov	r2, sl
 800a57e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a582:	ec43 2b10 	vmov	d0, r2, r3
 800a586:	b01d      	add	sp, #116	; 0x74
 800a588:	ecbd 8b02 	vpop	{d8}
 800a58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a590:	2a20      	cmp	r2, #32
 800a592:	d1cc      	bne.n	800a52e <_strtod_l+0x46>
 800a594:	3301      	adds	r3, #1
 800a596:	9317      	str	r3, [sp, #92]	; 0x5c
 800a598:	e7be      	b.n	800a518 <_strtod_l+0x30>
 800a59a:	2a2d      	cmp	r2, #45	; 0x2d
 800a59c:	d1c7      	bne.n	800a52e <_strtod_l+0x46>
 800a59e:	2201      	movs	r2, #1
 800a5a0:	920a      	str	r2, [sp, #40]	; 0x28
 800a5a2:	1c5a      	adds	r2, r3, #1
 800a5a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a5a6:	785b      	ldrb	r3, [r3, #1]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1c2      	bne.n	800a532 <_strtod_l+0x4a>
 800a5ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f040 856e 	bne.w	800b094 <_strtod_l+0xbac>
 800a5b8:	4652      	mov	r2, sl
 800a5ba:	465b      	mov	r3, fp
 800a5bc:	e7e1      	b.n	800a582 <_strtod_l+0x9a>
 800a5be:	2200      	movs	r2, #0
 800a5c0:	e7ee      	b.n	800a5a0 <_strtod_l+0xb8>
 800a5c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a5c4:	b13a      	cbz	r2, 800a5d6 <_strtod_l+0xee>
 800a5c6:	2135      	movs	r1, #53	; 0x35
 800a5c8:	a81a      	add	r0, sp, #104	; 0x68
 800a5ca:	f002 fca2 	bl	800cf12 <__copybits>
 800a5ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f002 f861 	bl	800c698 <_Bfree>
 800a5d6:	3f01      	subs	r7, #1
 800a5d8:	2f04      	cmp	r7, #4
 800a5da:	d806      	bhi.n	800a5ea <_strtod_l+0x102>
 800a5dc:	e8df f007 	tbb	[pc, r7]
 800a5e0:	1714030a 	.word	0x1714030a
 800a5e4:	0a          	.byte	0x0a
 800a5e5:	00          	.byte	0x00
 800a5e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a5ea:	0728      	lsls	r0, r5, #28
 800a5ec:	d5c0      	bpl.n	800a570 <_strtod_l+0x88>
 800a5ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a5f2:	e7bd      	b.n	800a570 <_strtod_l+0x88>
 800a5f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a5f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a5fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a5fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a602:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a606:	e7f0      	b.n	800a5ea <_strtod_l+0x102>
 800a608:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a78c <_strtod_l+0x2a4>
 800a60c:	e7ed      	b.n	800a5ea <_strtod_l+0x102>
 800a60e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a612:	f04f 3aff 	mov.w	sl, #4294967295
 800a616:	e7e8      	b.n	800a5ea <_strtod_l+0x102>
 800a618:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a61a:	1c5a      	adds	r2, r3, #1
 800a61c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a61e:	785b      	ldrb	r3, [r3, #1]
 800a620:	2b30      	cmp	r3, #48	; 0x30
 800a622:	d0f9      	beq.n	800a618 <_strtod_l+0x130>
 800a624:	2b00      	cmp	r3, #0
 800a626:	d0a3      	beq.n	800a570 <_strtod_l+0x88>
 800a628:	2301      	movs	r3, #1
 800a62a:	f04f 0900 	mov.w	r9, #0
 800a62e:	9304      	str	r3, [sp, #16]
 800a630:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a632:	9308      	str	r3, [sp, #32]
 800a634:	f8cd 901c 	str.w	r9, [sp, #28]
 800a638:	464f      	mov	r7, r9
 800a63a:	220a      	movs	r2, #10
 800a63c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a63e:	7806      	ldrb	r6, [r0, #0]
 800a640:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a644:	b2d9      	uxtb	r1, r3
 800a646:	2909      	cmp	r1, #9
 800a648:	d92a      	bls.n	800a6a0 <_strtod_l+0x1b8>
 800a64a:	9905      	ldr	r1, [sp, #20]
 800a64c:	462a      	mov	r2, r5
 800a64e:	f002 ff0f 	bl	800d470 <strncmp>
 800a652:	b398      	cbz	r0, 800a6bc <_strtod_l+0x1d4>
 800a654:	2000      	movs	r0, #0
 800a656:	4632      	mov	r2, r6
 800a658:	463d      	mov	r5, r7
 800a65a:	9005      	str	r0, [sp, #20]
 800a65c:	4603      	mov	r3, r0
 800a65e:	2a65      	cmp	r2, #101	; 0x65
 800a660:	d001      	beq.n	800a666 <_strtod_l+0x17e>
 800a662:	2a45      	cmp	r2, #69	; 0x45
 800a664:	d118      	bne.n	800a698 <_strtod_l+0x1b0>
 800a666:	b91d      	cbnz	r5, 800a670 <_strtod_l+0x188>
 800a668:	9a04      	ldr	r2, [sp, #16]
 800a66a:	4302      	orrs	r2, r0
 800a66c:	d09e      	beq.n	800a5ac <_strtod_l+0xc4>
 800a66e:	2500      	movs	r5, #0
 800a670:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a674:	f108 0201 	add.w	r2, r8, #1
 800a678:	9217      	str	r2, [sp, #92]	; 0x5c
 800a67a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a67e:	2a2b      	cmp	r2, #43	; 0x2b
 800a680:	d075      	beq.n	800a76e <_strtod_l+0x286>
 800a682:	2a2d      	cmp	r2, #45	; 0x2d
 800a684:	d07b      	beq.n	800a77e <_strtod_l+0x296>
 800a686:	f04f 0c00 	mov.w	ip, #0
 800a68a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a68e:	2909      	cmp	r1, #9
 800a690:	f240 8082 	bls.w	800a798 <_strtod_l+0x2b0>
 800a694:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a698:	2600      	movs	r6, #0
 800a69a:	e09d      	b.n	800a7d8 <_strtod_l+0x2f0>
 800a69c:	2300      	movs	r3, #0
 800a69e:	e7c4      	b.n	800a62a <_strtod_l+0x142>
 800a6a0:	2f08      	cmp	r7, #8
 800a6a2:	bfd8      	it	le
 800a6a4:	9907      	ldrle	r1, [sp, #28]
 800a6a6:	f100 0001 	add.w	r0, r0, #1
 800a6aa:	bfda      	itte	le
 800a6ac:	fb02 3301 	mlale	r3, r2, r1, r3
 800a6b0:	9307      	strle	r3, [sp, #28]
 800a6b2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a6b6:	3701      	adds	r7, #1
 800a6b8:	9017      	str	r0, [sp, #92]	; 0x5c
 800a6ba:	e7bf      	b.n	800a63c <_strtod_l+0x154>
 800a6bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6be:	195a      	adds	r2, r3, r5
 800a6c0:	9217      	str	r2, [sp, #92]	; 0x5c
 800a6c2:	5d5a      	ldrb	r2, [r3, r5]
 800a6c4:	2f00      	cmp	r7, #0
 800a6c6:	d037      	beq.n	800a738 <_strtod_l+0x250>
 800a6c8:	9005      	str	r0, [sp, #20]
 800a6ca:	463d      	mov	r5, r7
 800a6cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a6d0:	2b09      	cmp	r3, #9
 800a6d2:	d912      	bls.n	800a6fa <_strtod_l+0x212>
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	e7c2      	b.n	800a65e <_strtod_l+0x176>
 800a6d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6da:	1c5a      	adds	r2, r3, #1
 800a6dc:	9217      	str	r2, [sp, #92]	; 0x5c
 800a6de:	785a      	ldrb	r2, [r3, #1]
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	2a30      	cmp	r2, #48	; 0x30
 800a6e4:	d0f8      	beq.n	800a6d8 <_strtod_l+0x1f0>
 800a6e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a6ea:	2b08      	cmp	r3, #8
 800a6ec:	f200 84d9 	bhi.w	800b0a2 <_strtod_l+0xbba>
 800a6f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6f2:	9005      	str	r0, [sp, #20]
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	9308      	str	r3, [sp, #32]
 800a6f8:	4605      	mov	r5, r0
 800a6fa:	3a30      	subs	r2, #48	; 0x30
 800a6fc:	f100 0301 	add.w	r3, r0, #1
 800a700:	d014      	beq.n	800a72c <_strtod_l+0x244>
 800a702:	9905      	ldr	r1, [sp, #20]
 800a704:	4419      	add	r1, r3
 800a706:	9105      	str	r1, [sp, #20]
 800a708:	462b      	mov	r3, r5
 800a70a:	eb00 0e05 	add.w	lr, r0, r5
 800a70e:	210a      	movs	r1, #10
 800a710:	4573      	cmp	r3, lr
 800a712:	d113      	bne.n	800a73c <_strtod_l+0x254>
 800a714:	182b      	adds	r3, r5, r0
 800a716:	2b08      	cmp	r3, #8
 800a718:	f105 0501 	add.w	r5, r5, #1
 800a71c:	4405      	add	r5, r0
 800a71e:	dc1c      	bgt.n	800a75a <_strtod_l+0x272>
 800a720:	9907      	ldr	r1, [sp, #28]
 800a722:	230a      	movs	r3, #10
 800a724:	fb03 2301 	mla	r3, r3, r1, r2
 800a728:	9307      	str	r3, [sp, #28]
 800a72a:	2300      	movs	r3, #0
 800a72c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a72e:	1c51      	adds	r1, r2, #1
 800a730:	9117      	str	r1, [sp, #92]	; 0x5c
 800a732:	7852      	ldrb	r2, [r2, #1]
 800a734:	4618      	mov	r0, r3
 800a736:	e7c9      	b.n	800a6cc <_strtod_l+0x1e4>
 800a738:	4638      	mov	r0, r7
 800a73a:	e7d2      	b.n	800a6e2 <_strtod_l+0x1fa>
 800a73c:	2b08      	cmp	r3, #8
 800a73e:	dc04      	bgt.n	800a74a <_strtod_l+0x262>
 800a740:	9e07      	ldr	r6, [sp, #28]
 800a742:	434e      	muls	r6, r1
 800a744:	9607      	str	r6, [sp, #28]
 800a746:	3301      	adds	r3, #1
 800a748:	e7e2      	b.n	800a710 <_strtod_l+0x228>
 800a74a:	f103 0c01 	add.w	ip, r3, #1
 800a74e:	f1bc 0f10 	cmp.w	ip, #16
 800a752:	bfd8      	it	le
 800a754:	fb01 f909 	mulle.w	r9, r1, r9
 800a758:	e7f5      	b.n	800a746 <_strtod_l+0x25e>
 800a75a:	2d10      	cmp	r5, #16
 800a75c:	bfdc      	itt	le
 800a75e:	230a      	movle	r3, #10
 800a760:	fb03 2909 	mlale	r9, r3, r9, r2
 800a764:	e7e1      	b.n	800a72a <_strtod_l+0x242>
 800a766:	2300      	movs	r3, #0
 800a768:	9305      	str	r3, [sp, #20]
 800a76a:	2301      	movs	r3, #1
 800a76c:	e77c      	b.n	800a668 <_strtod_l+0x180>
 800a76e:	f04f 0c00 	mov.w	ip, #0
 800a772:	f108 0202 	add.w	r2, r8, #2
 800a776:	9217      	str	r2, [sp, #92]	; 0x5c
 800a778:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a77c:	e785      	b.n	800a68a <_strtod_l+0x1a2>
 800a77e:	f04f 0c01 	mov.w	ip, #1
 800a782:	e7f6      	b.n	800a772 <_strtod_l+0x28a>
 800a784:	0800e598 	.word	0x0800e598
 800a788:	0800e34c 	.word	0x0800e34c
 800a78c:	7ff00000 	.word	0x7ff00000
 800a790:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a792:	1c51      	adds	r1, r2, #1
 800a794:	9117      	str	r1, [sp, #92]	; 0x5c
 800a796:	7852      	ldrb	r2, [r2, #1]
 800a798:	2a30      	cmp	r2, #48	; 0x30
 800a79a:	d0f9      	beq.n	800a790 <_strtod_l+0x2a8>
 800a79c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a7a0:	2908      	cmp	r1, #8
 800a7a2:	f63f af79 	bhi.w	800a698 <_strtod_l+0x1b0>
 800a7a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a7aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a7ac:	9206      	str	r2, [sp, #24]
 800a7ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a7b0:	1c51      	adds	r1, r2, #1
 800a7b2:	9117      	str	r1, [sp, #92]	; 0x5c
 800a7b4:	7852      	ldrb	r2, [r2, #1]
 800a7b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a7ba:	2e09      	cmp	r6, #9
 800a7bc:	d937      	bls.n	800a82e <_strtod_l+0x346>
 800a7be:	9e06      	ldr	r6, [sp, #24]
 800a7c0:	1b89      	subs	r1, r1, r6
 800a7c2:	2908      	cmp	r1, #8
 800a7c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a7c8:	dc02      	bgt.n	800a7d0 <_strtod_l+0x2e8>
 800a7ca:	4576      	cmp	r6, lr
 800a7cc:	bfa8      	it	ge
 800a7ce:	4676      	movge	r6, lr
 800a7d0:	f1bc 0f00 	cmp.w	ip, #0
 800a7d4:	d000      	beq.n	800a7d8 <_strtod_l+0x2f0>
 800a7d6:	4276      	negs	r6, r6
 800a7d8:	2d00      	cmp	r5, #0
 800a7da:	d14d      	bne.n	800a878 <_strtod_l+0x390>
 800a7dc:	9904      	ldr	r1, [sp, #16]
 800a7de:	4301      	orrs	r1, r0
 800a7e0:	f47f aec6 	bne.w	800a570 <_strtod_l+0x88>
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f47f aee1 	bne.w	800a5ac <_strtod_l+0xc4>
 800a7ea:	2a69      	cmp	r2, #105	; 0x69
 800a7ec:	d027      	beq.n	800a83e <_strtod_l+0x356>
 800a7ee:	dc24      	bgt.n	800a83a <_strtod_l+0x352>
 800a7f0:	2a49      	cmp	r2, #73	; 0x49
 800a7f2:	d024      	beq.n	800a83e <_strtod_l+0x356>
 800a7f4:	2a4e      	cmp	r2, #78	; 0x4e
 800a7f6:	f47f aed9 	bne.w	800a5ac <_strtod_l+0xc4>
 800a7fa:	499f      	ldr	r1, [pc, #636]	; (800aa78 <_strtod_l+0x590>)
 800a7fc:	a817      	add	r0, sp, #92	; 0x5c
 800a7fe:	f001 fe3d 	bl	800c47c <__match>
 800a802:	2800      	cmp	r0, #0
 800a804:	f43f aed2 	beq.w	800a5ac <_strtod_l+0xc4>
 800a808:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	2b28      	cmp	r3, #40	; 0x28
 800a80e:	d12d      	bne.n	800a86c <_strtod_l+0x384>
 800a810:	499a      	ldr	r1, [pc, #616]	; (800aa7c <_strtod_l+0x594>)
 800a812:	aa1a      	add	r2, sp, #104	; 0x68
 800a814:	a817      	add	r0, sp, #92	; 0x5c
 800a816:	f001 fe45 	bl	800c4a4 <__hexnan>
 800a81a:	2805      	cmp	r0, #5
 800a81c:	d126      	bne.n	800a86c <_strtod_l+0x384>
 800a81e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a820:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a824:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a828:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a82c:	e6a0      	b.n	800a570 <_strtod_l+0x88>
 800a82e:	210a      	movs	r1, #10
 800a830:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a834:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a838:	e7b9      	b.n	800a7ae <_strtod_l+0x2c6>
 800a83a:	2a6e      	cmp	r2, #110	; 0x6e
 800a83c:	e7db      	b.n	800a7f6 <_strtod_l+0x30e>
 800a83e:	4990      	ldr	r1, [pc, #576]	; (800aa80 <_strtod_l+0x598>)
 800a840:	a817      	add	r0, sp, #92	; 0x5c
 800a842:	f001 fe1b 	bl	800c47c <__match>
 800a846:	2800      	cmp	r0, #0
 800a848:	f43f aeb0 	beq.w	800a5ac <_strtod_l+0xc4>
 800a84c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a84e:	498d      	ldr	r1, [pc, #564]	; (800aa84 <_strtod_l+0x59c>)
 800a850:	3b01      	subs	r3, #1
 800a852:	a817      	add	r0, sp, #92	; 0x5c
 800a854:	9317      	str	r3, [sp, #92]	; 0x5c
 800a856:	f001 fe11 	bl	800c47c <__match>
 800a85a:	b910      	cbnz	r0, 800a862 <_strtod_l+0x37a>
 800a85c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a85e:	3301      	adds	r3, #1
 800a860:	9317      	str	r3, [sp, #92]	; 0x5c
 800a862:	f8df b230 	ldr.w	fp, [pc, #560]	; 800aa94 <_strtod_l+0x5ac>
 800a866:	f04f 0a00 	mov.w	sl, #0
 800a86a:	e681      	b.n	800a570 <_strtod_l+0x88>
 800a86c:	4886      	ldr	r0, [pc, #536]	; (800aa88 <_strtod_l+0x5a0>)
 800a86e:	f002 fde7 	bl	800d440 <nan>
 800a872:	ec5b ab10 	vmov	sl, fp, d0
 800a876:	e67b      	b.n	800a570 <_strtod_l+0x88>
 800a878:	9b05      	ldr	r3, [sp, #20]
 800a87a:	9807      	ldr	r0, [sp, #28]
 800a87c:	1af3      	subs	r3, r6, r3
 800a87e:	2f00      	cmp	r7, #0
 800a880:	bf08      	it	eq
 800a882:	462f      	moveq	r7, r5
 800a884:	2d10      	cmp	r5, #16
 800a886:	9306      	str	r3, [sp, #24]
 800a888:	46a8      	mov	r8, r5
 800a88a:	bfa8      	it	ge
 800a88c:	f04f 0810 	movge.w	r8, #16
 800a890:	f7f5 fe40 	bl	8000514 <__aeabi_ui2d>
 800a894:	2d09      	cmp	r5, #9
 800a896:	4682      	mov	sl, r0
 800a898:	468b      	mov	fp, r1
 800a89a:	dd13      	ble.n	800a8c4 <_strtod_l+0x3dc>
 800a89c:	4b7b      	ldr	r3, [pc, #492]	; (800aa8c <_strtod_l+0x5a4>)
 800a89e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a8a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a8a6:	f7f5 feaf 	bl	8000608 <__aeabi_dmul>
 800a8aa:	4682      	mov	sl, r0
 800a8ac:	4648      	mov	r0, r9
 800a8ae:	468b      	mov	fp, r1
 800a8b0:	f7f5 fe30 	bl	8000514 <__aeabi_ui2d>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	4650      	mov	r0, sl
 800a8ba:	4659      	mov	r1, fp
 800a8bc:	f7f5 fcee 	bl	800029c <__adddf3>
 800a8c0:	4682      	mov	sl, r0
 800a8c2:	468b      	mov	fp, r1
 800a8c4:	2d0f      	cmp	r5, #15
 800a8c6:	dc38      	bgt.n	800a93a <_strtod_l+0x452>
 800a8c8:	9b06      	ldr	r3, [sp, #24]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f43f ae50 	beq.w	800a570 <_strtod_l+0x88>
 800a8d0:	dd24      	ble.n	800a91c <_strtod_l+0x434>
 800a8d2:	2b16      	cmp	r3, #22
 800a8d4:	dc0b      	bgt.n	800a8ee <_strtod_l+0x406>
 800a8d6:	496d      	ldr	r1, [pc, #436]	; (800aa8c <_strtod_l+0x5a4>)
 800a8d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a8dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8e0:	4652      	mov	r2, sl
 800a8e2:	465b      	mov	r3, fp
 800a8e4:	f7f5 fe90 	bl	8000608 <__aeabi_dmul>
 800a8e8:	4682      	mov	sl, r0
 800a8ea:	468b      	mov	fp, r1
 800a8ec:	e640      	b.n	800a570 <_strtod_l+0x88>
 800a8ee:	9a06      	ldr	r2, [sp, #24]
 800a8f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	db20      	blt.n	800a93a <_strtod_l+0x452>
 800a8f8:	4c64      	ldr	r4, [pc, #400]	; (800aa8c <_strtod_l+0x5a4>)
 800a8fa:	f1c5 050f 	rsb	r5, r5, #15
 800a8fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a902:	4652      	mov	r2, sl
 800a904:	465b      	mov	r3, fp
 800a906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a90a:	f7f5 fe7d 	bl	8000608 <__aeabi_dmul>
 800a90e:	9b06      	ldr	r3, [sp, #24]
 800a910:	1b5d      	subs	r5, r3, r5
 800a912:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a916:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a91a:	e7e3      	b.n	800a8e4 <_strtod_l+0x3fc>
 800a91c:	9b06      	ldr	r3, [sp, #24]
 800a91e:	3316      	adds	r3, #22
 800a920:	db0b      	blt.n	800a93a <_strtod_l+0x452>
 800a922:	9b05      	ldr	r3, [sp, #20]
 800a924:	1b9e      	subs	r6, r3, r6
 800a926:	4b59      	ldr	r3, [pc, #356]	; (800aa8c <_strtod_l+0x5a4>)
 800a928:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a92c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a930:	4650      	mov	r0, sl
 800a932:	4659      	mov	r1, fp
 800a934:	f7f5 ff92 	bl	800085c <__aeabi_ddiv>
 800a938:	e7d6      	b.n	800a8e8 <_strtod_l+0x400>
 800a93a:	9b06      	ldr	r3, [sp, #24]
 800a93c:	eba5 0808 	sub.w	r8, r5, r8
 800a940:	4498      	add	r8, r3
 800a942:	f1b8 0f00 	cmp.w	r8, #0
 800a946:	dd74      	ble.n	800aa32 <_strtod_l+0x54a>
 800a948:	f018 030f 	ands.w	r3, r8, #15
 800a94c:	d00a      	beq.n	800a964 <_strtod_l+0x47c>
 800a94e:	494f      	ldr	r1, [pc, #316]	; (800aa8c <_strtod_l+0x5a4>)
 800a950:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a954:	4652      	mov	r2, sl
 800a956:	465b      	mov	r3, fp
 800a958:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a95c:	f7f5 fe54 	bl	8000608 <__aeabi_dmul>
 800a960:	4682      	mov	sl, r0
 800a962:	468b      	mov	fp, r1
 800a964:	f038 080f 	bics.w	r8, r8, #15
 800a968:	d04f      	beq.n	800aa0a <_strtod_l+0x522>
 800a96a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a96e:	dd22      	ble.n	800a9b6 <_strtod_l+0x4ce>
 800a970:	2500      	movs	r5, #0
 800a972:	462e      	mov	r6, r5
 800a974:	9507      	str	r5, [sp, #28]
 800a976:	9505      	str	r5, [sp, #20]
 800a978:	2322      	movs	r3, #34	; 0x22
 800a97a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800aa94 <_strtod_l+0x5ac>
 800a97e:	6023      	str	r3, [r4, #0]
 800a980:	f04f 0a00 	mov.w	sl, #0
 800a984:	9b07      	ldr	r3, [sp, #28]
 800a986:	2b00      	cmp	r3, #0
 800a988:	f43f adf2 	beq.w	800a570 <_strtod_l+0x88>
 800a98c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a98e:	4620      	mov	r0, r4
 800a990:	f001 fe82 	bl	800c698 <_Bfree>
 800a994:	9905      	ldr	r1, [sp, #20]
 800a996:	4620      	mov	r0, r4
 800a998:	f001 fe7e 	bl	800c698 <_Bfree>
 800a99c:	4631      	mov	r1, r6
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f001 fe7a 	bl	800c698 <_Bfree>
 800a9a4:	9907      	ldr	r1, [sp, #28]
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f001 fe76 	bl	800c698 <_Bfree>
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f001 fe72 	bl	800c698 <_Bfree>
 800a9b4:	e5dc      	b.n	800a570 <_strtod_l+0x88>
 800a9b6:	4b36      	ldr	r3, [pc, #216]	; (800aa90 <_strtod_l+0x5a8>)
 800a9b8:	9304      	str	r3, [sp, #16]
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a9c0:	4650      	mov	r0, sl
 800a9c2:	4659      	mov	r1, fp
 800a9c4:	4699      	mov	r9, r3
 800a9c6:	f1b8 0f01 	cmp.w	r8, #1
 800a9ca:	dc21      	bgt.n	800aa10 <_strtod_l+0x528>
 800a9cc:	b10b      	cbz	r3, 800a9d2 <_strtod_l+0x4ea>
 800a9ce:	4682      	mov	sl, r0
 800a9d0:	468b      	mov	fp, r1
 800a9d2:	4b2f      	ldr	r3, [pc, #188]	; (800aa90 <_strtod_l+0x5a8>)
 800a9d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a9d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a9dc:	4652      	mov	r2, sl
 800a9de:	465b      	mov	r3, fp
 800a9e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a9e4:	f7f5 fe10 	bl	8000608 <__aeabi_dmul>
 800a9e8:	4b2a      	ldr	r3, [pc, #168]	; (800aa94 <_strtod_l+0x5ac>)
 800a9ea:	460a      	mov	r2, r1
 800a9ec:	400b      	ands	r3, r1
 800a9ee:	492a      	ldr	r1, [pc, #168]	; (800aa98 <_strtod_l+0x5b0>)
 800a9f0:	428b      	cmp	r3, r1
 800a9f2:	4682      	mov	sl, r0
 800a9f4:	d8bc      	bhi.n	800a970 <_strtod_l+0x488>
 800a9f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a9fa:	428b      	cmp	r3, r1
 800a9fc:	bf86      	itte	hi
 800a9fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800aa9c <_strtod_l+0x5b4>
 800aa02:	f04f 3aff 	movhi.w	sl, #4294967295
 800aa06:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	9304      	str	r3, [sp, #16]
 800aa0e:	e084      	b.n	800ab1a <_strtod_l+0x632>
 800aa10:	f018 0f01 	tst.w	r8, #1
 800aa14:	d005      	beq.n	800aa22 <_strtod_l+0x53a>
 800aa16:	9b04      	ldr	r3, [sp, #16]
 800aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1c:	f7f5 fdf4 	bl	8000608 <__aeabi_dmul>
 800aa20:	2301      	movs	r3, #1
 800aa22:	9a04      	ldr	r2, [sp, #16]
 800aa24:	3208      	adds	r2, #8
 800aa26:	f109 0901 	add.w	r9, r9, #1
 800aa2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aa2e:	9204      	str	r2, [sp, #16]
 800aa30:	e7c9      	b.n	800a9c6 <_strtod_l+0x4de>
 800aa32:	d0ea      	beq.n	800aa0a <_strtod_l+0x522>
 800aa34:	f1c8 0800 	rsb	r8, r8, #0
 800aa38:	f018 020f 	ands.w	r2, r8, #15
 800aa3c:	d00a      	beq.n	800aa54 <_strtod_l+0x56c>
 800aa3e:	4b13      	ldr	r3, [pc, #76]	; (800aa8c <_strtod_l+0x5a4>)
 800aa40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa44:	4650      	mov	r0, sl
 800aa46:	4659      	mov	r1, fp
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f7f5 ff06 	bl	800085c <__aeabi_ddiv>
 800aa50:	4682      	mov	sl, r0
 800aa52:	468b      	mov	fp, r1
 800aa54:	ea5f 1828 	movs.w	r8, r8, asr #4
 800aa58:	d0d7      	beq.n	800aa0a <_strtod_l+0x522>
 800aa5a:	f1b8 0f1f 	cmp.w	r8, #31
 800aa5e:	dd1f      	ble.n	800aaa0 <_strtod_l+0x5b8>
 800aa60:	2500      	movs	r5, #0
 800aa62:	462e      	mov	r6, r5
 800aa64:	9507      	str	r5, [sp, #28]
 800aa66:	9505      	str	r5, [sp, #20]
 800aa68:	2322      	movs	r3, #34	; 0x22
 800aa6a:	f04f 0a00 	mov.w	sl, #0
 800aa6e:	f04f 0b00 	mov.w	fp, #0
 800aa72:	6023      	str	r3, [r4, #0]
 800aa74:	e786      	b.n	800a984 <_strtod_l+0x49c>
 800aa76:	bf00      	nop
 800aa78:	0800e31d 	.word	0x0800e31d
 800aa7c:	0800e360 	.word	0x0800e360
 800aa80:	0800e315 	.word	0x0800e315
 800aa84:	0800e4a4 	.word	0x0800e4a4
 800aa88:	0800e750 	.word	0x0800e750
 800aa8c:	0800e630 	.word	0x0800e630
 800aa90:	0800e608 	.word	0x0800e608
 800aa94:	7ff00000 	.word	0x7ff00000
 800aa98:	7ca00000 	.word	0x7ca00000
 800aa9c:	7fefffff 	.word	0x7fefffff
 800aaa0:	f018 0310 	ands.w	r3, r8, #16
 800aaa4:	bf18      	it	ne
 800aaa6:	236a      	movne	r3, #106	; 0x6a
 800aaa8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ae58 <_strtod_l+0x970>
 800aaac:	9304      	str	r3, [sp, #16]
 800aaae:	4650      	mov	r0, sl
 800aab0:	4659      	mov	r1, fp
 800aab2:	2300      	movs	r3, #0
 800aab4:	f018 0f01 	tst.w	r8, #1
 800aab8:	d004      	beq.n	800aac4 <_strtod_l+0x5dc>
 800aaba:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aabe:	f7f5 fda3 	bl	8000608 <__aeabi_dmul>
 800aac2:	2301      	movs	r3, #1
 800aac4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800aac8:	f109 0908 	add.w	r9, r9, #8
 800aacc:	d1f2      	bne.n	800aab4 <_strtod_l+0x5cc>
 800aace:	b10b      	cbz	r3, 800aad4 <_strtod_l+0x5ec>
 800aad0:	4682      	mov	sl, r0
 800aad2:	468b      	mov	fp, r1
 800aad4:	9b04      	ldr	r3, [sp, #16]
 800aad6:	b1c3      	cbz	r3, 800ab0a <_strtod_l+0x622>
 800aad8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aadc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	4659      	mov	r1, fp
 800aae4:	dd11      	ble.n	800ab0a <_strtod_l+0x622>
 800aae6:	2b1f      	cmp	r3, #31
 800aae8:	f340 8124 	ble.w	800ad34 <_strtod_l+0x84c>
 800aaec:	2b34      	cmp	r3, #52	; 0x34
 800aaee:	bfde      	ittt	le
 800aaf0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800aaf4:	f04f 33ff 	movle.w	r3, #4294967295
 800aaf8:	fa03 f202 	lslle.w	r2, r3, r2
 800aafc:	f04f 0a00 	mov.w	sl, #0
 800ab00:	bfcc      	ite	gt
 800ab02:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ab06:	ea02 0b01 	andle.w	fp, r2, r1
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	4650      	mov	r0, sl
 800ab10:	4659      	mov	r1, fp
 800ab12:	f7f5 ffe1 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d1a2      	bne.n	800aa60 <_strtod_l+0x578>
 800ab1a:	9b07      	ldr	r3, [sp, #28]
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	9908      	ldr	r1, [sp, #32]
 800ab20:	462b      	mov	r3, r5
 800ab22:	463a      	mov	r2, r7
 800ab24:	4620      	mov	r0, r4
 800ab26:	f001 fe1f 	bl	800c768 <__s2b>
 800ab2a:	9007      	str	r0, [sp, #28]
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	f43f af1f 	beq.w	800a970 <_strtod_l+0x488>
 800ab32:	9b05      	ldr	r3, [sp, #20]
 800ab34:	1b9e      	subs	r6, r3, r6
 800ab36:	9b06      	ldr	r3, [sp, #24]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	bfb4      	ite	lt
 800ab3c:	4633      	movlt	r3, r6
 800ab3e:	2300      	movge	r3, #0
 800ab40:	930c      	str	r3, [sp, #48]	; 0x30
 800ab42:	9b06      	ldr	r3, [sp, #24]
 800ab44:	2500      	movs	r5, #0
 800ab46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ab4a:	9312      	str	r3, [sp, #72]	; 0x48
 800ab4c:	462e      	mov	r6, r5
 800ab4e:	9b07      	ldr	r3, [sp, #28]
 800ab50:	4620      	mov	r0, r4
 800ab52:	6859      	ldr	r1, [r3, #4]
 800ab54:	f001 fd60 	bl	800c618 <_Balloc>
 800ab58:	9005      	str	r0, [sp, #20]
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	f43f af0c 	beq.w	800a978 <_strtod_l+0x490>
 800ab60:	9b07      	ldr	r3, [sp, #28]
 800ab62:	691a      	ldr	r2, [r3, #16]
 800ab64:	3202      	adds	r2, #2
 800ab66:	f103 010c 	add.w	r1, r3, #12
 800ab6a:	0092      	lsls	r2, r2, #2
 800ab6c:	300c      	adds	r0, #12
 800ab6e:	f7fe fde7 	bl	8009740 <memcpy>
 800ab72:	ec4b ab10 	vmov	d0, sl, fp
 800ab76:	aa1a      	add	r2, sp, #104	; 0x68
 800ab78:	a919      	add	r1, sp, #100	; 0x64
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f002 f93a 	bl	800cdf4 <__d2b>
 800ab80:	ec4b ab18 	vmov	d8, sl, fp
 800ab84:	9018      	str	r0, [sp, #96]	; 0x60
 800ab86:	2800      	cmp	r0, #0
 800ab88:	f43f aef6 	beq.w	800a978 <_strtod_l+0x490>
 800ab8c:	2101      	movs	r1, #1
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f001 fe84 	bl	800c89c <__i2b>
 800ab94:	4606      	mov	r6, r0
 800ab96:	2800      	cmp	r0, #0
 800ab98:	f43f aeee 	beq.w	800a978 <_strtod_l+0x490>
 800ab9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab9e:	9904      	ldr	r1, [sp, #16]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	bfab      	itete	ge
 800aba4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800aba6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800aba8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800abaa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800abae:	bfac      	ite	ge
 800abb0:	eb03 0902 	addge.w	r9, r3, r2
 800abb4:	1ad7      	sublt	r7, r2, r3
 800abb6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800abb8:	eba3 0801 	sub.w	r8, r3, r1
 800abbc:	4490      	add	r8, r2
 800abbe:	4ba1      	ldr	r3, [pc, #644]	; (800ae44 <_strtod_l+0x95c>)
 800abc0:	f108 38ff 	add.w	r8, r8, #4294967295
 800abc4:	4598      	cmp	r8, r3
 800abc6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800abca:	f280 80c7 	bge.w	800ad5c <_strtod_l+0x874>
 800abce:	eba3 0308 	sub.w	r3, r3, r8
 800abd2:	2b1f      	cmp	r3, #31
 800abd4:	eba2 0203 	sub.w	r2, r2, r3
 800abd8:	f04f 0101 	mov.w	r1, #1
 800abdc:	f300 80b1 	bgt.w	800ad42 <_strtod_l+0x85a>
 800abe0:	fa01 f303 	lsl.w	r3, r1, r3
 800abe4:	930d      	str	r3, [sp, #52]	; 0x34
 800abe6:	2300      	movs	r3, #0
 800abe8:	9308      	str	r3, [sp, #32]
 800abea:	eb09 0802 	add.w	r8, r9, r2
 800abee:	9b04      	ldr	r3, [sp, #16]
 800abf0:	45c1      	cmp	r9, r8
 800abf2:	4417      	add	r7, r2
 800abf4:	441f      	add	r7, r3
 800abf6:	464b      	mov	r3, r9
 800abf8:	bfa8      	it	ge
 800abfa:	4643      	movge	r3, r8
 800abfc:	42bb      	cmp	r3, r7
 800abfe:	bfa8      	it	ge
 800ac00:	463b      	movge	r3, r7
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	bfc2      	ittt	gt
 800ac06:	eba8 0803 	subgt.w	r8, r8, r3
 800ac0a:	1aff      	subgt	r7, r7, r3
 800ac0c:	eba9 0903 	subgt.w	r9, r9, r3
 800ac10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	dd17      	ble.n	800ac46 <_strtod_l+0x75e>
 800ac16:	4631      	mov	r1, r6
 800ac18:	461a      	mov	r2, r3
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f001 fefe 	bl	800ca1c <__pow5mult>
 800ac20:	4606      	mov	r6, r0
 800ac22:	2800      	cmp	r0, #0
 800ac24:	f43f aea8 	beq.w	800a978 <_strtod_l+0x490>
 800ac28:	4601      	mov	r1, r0
 800ac2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f001 fe4b 	bl	800c8c8 <__multiply>
 800ac32:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac34:	2800      	cmp	r0, #0
 800ac36:	f43f ae9f 	beq.w	800a978 <_strtod_l+0x490>
 800ac3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f001 fd2b 	bl	800c698 <_Bfree>
 800ac42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac44:	9318      	str	r3, [sp, #96]	; 0x60
 800ac46:	f1b8 0f00 	cmp.w	r8, #0
 800ac4a:	f300 808c 	bgt.w	800ad66 <_strtod_l+0x87e>
 800ac4e:	9b06      	ldr	r3, [sp, #24]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	dd08      	ble.n	800ac66 <_strtod_l+0x77e>
 800ac54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac56:	9905      	ldr	r1, [sp, #20]
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f001 fedf 	bl	800ca1c <__pow5mult>
 800ac5e:	9005      	str	r0, [sp, #20]
 800ac60:	2800      	cmp	r0, #0
 800ac62:	f43f ae89 	beq.w	800a978 <_strtod_l+0x490>
 800ac66:	2f00      	cmp	r7, #0
 800ac68:	dd08      	ble.n	800ac7c <_strtod_l+0x794>
 800ac6a:	9905      	ldr	r1, [sp, #20]
 800ac6c:	463a      	mov	r2, r7
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f001 ff2e 	bl	800cad0 <__lshift>
 800ac74:	9005      	str	r0, [sp, #20]
 800ac76:	2800      	cmp	r0, #0
 800ac78:	f43f ae7e 	beq.w	800a978 <_strtod_l+0x490>
 800ac7c:	f1b9 0f00 	cmp.w	r9, #0
 800ac80:	dd08      	ble.n	800ac94 <_strtod_l+0x7ac>
 800ac82:	4631      	mov	r1, r6
 800ac84:	464a      	mov	r2, r9
 800ac86:	4620      	mov	r0, r4
 800ac88:	f001 ff22 	bl	800cad0 <__lshift>
 800ac8c:	4606      	mov	r6, r0
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	f43f ae72 	beq.w	800a978 <_strtod_l+0x490>
 800ac94:	9a05      	ldr	r2, [sp, #20]
 800ac96:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f001 ffa5 	bl	800cbe8 <__mdiff>
 800ac9e:	4605      	mov	r5, r0
 800aca0:	2800      	cmp	r0, #0
 800aca2:	f43f ae69 	beq.w	800a978 <_strtod_l+0x490>
 800aca6:	68c3      	ldr	r3, [r0, #12]
 800aca8:	930b      	str	r3, [sp, #44]	; 0x2c
 800acaa:	2300      	movs	r3, #0
 800acac:	60c3      	str	r3, [r0, #12]
 800acae:	4631      	mov	r1, r6
 800acb0:	f001 ff7e 	bl	800cbb0 <__mcmp>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	da60      	bge.n	800ad7a <_strtod_l+0x892>
 800acb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acba:	ea53 030a 	orrs.w	r3, r3, sl
 800acbe:	f040 8082 	bne.w	800adc6 <_strtod_l+0x8de>
 800acc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d17d      	bne.n	800adc6 <_strtod_l+0x8de>
 800acca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800acce:	0d1b      	lsrs	r3, r3, #20
 800acd0:	051b      	lsls	r3, r3, #20
 800acd2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800acd6:	d976      	bls.n	800adc6 <_strtod_l+0x8de>
 800acd8:	696b      	ldr	r3, [r5, #20]
 800acda:	b913      	cbnz	r3, 800ace2 <_strtod_l+0x7fa>
 800acdc:	692b      	ldr	r3, [r5, #16]
 800acde:	2b01      	cmp	r3, #1
 800ace0:	dd71      	ble.n	800adc6 <_strtod_l+0x8de>
 800ace2:	4629      	mov	r1, r5
 800ace4:	2201      	movs	r2, #1
 800ace6:	4620      	mov	r0, r4
 800ace8:	f001 fef2 	bl	800cad0 <__lshift>
 800acec:	4631      	mov	r1, r6
 800acee:	4605      	mov	r5, r0
 800acf0:	f001 ff5e 	bl	800cbb0 <__mcmp>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	dd66      	ble.n	800adc6 <_strtod_l+0x8de>
 800acf8:	9904      	ldr	r1, [sp, #16]
 800acfa:	4a53      	ldr	r2, [pc, #332]	; (800ae48 <_strtod_l+0x960>)
 800acfc:	465b      	mov	r3, fp
 800acfe:	2900      	cmp	r1, #0
 800ad00:	f000 8081 	beq.w	800ae06 <_strtod_l+0x91e>
 800ad04:	ea02 010b 	and.w	r1, r2, fp
 800ad08:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ad0c:	dc7b      	bgt.n	800ae06 <_strtod_l+0x91e>
 800ad0e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ad12:	f77f aea9 	ble.w	800aa68 <_strtod_l+0x580>
 800ad16:	4b4d      	ldr	r3, [pc, #308]	; (800ae4c <_strtod_l+0x964>)
 800ad18:	4650      	mov	r0, sl
 800ad1a:	4659      	mov	r1, fp
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f7f5 fc73 	bl	8000608 <__aeabi_dmul>
 800ad22:	460b      	mov	r3, r1
 800ad24:	4303      	orrs	r3, r0
 800ad26:	bf08      	it	eq
 800ad28:	2322      	moveq	r3, #34	; 0x22
 800ad2a:	4682      	mov	sl, r0
 800ad2c:	468b      	mov	fp, r1
 800ad2e:	bf08      	it	eq
 800ad30:	6023      	streq	r3, [r4, #0]
 800ad32:	e62b      	b.n	800a98c <_strtod_l+0x4a4>
 800ad34:	f04f 32ff 	mov.w	r2, #4294967295
 800ad38:	fa02 f303 	lsl.w	r3, r2, r3
 800ad3c:	ea03 0a0a 	and.w	sl, r3, sl
 800ad40:	e6e3      	b.n	800ab0a <_strtod_l+0x622>
 800ad42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ad46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ad4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ad4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ad52:	fa01 f308 	lsl.w	r3, r1, r8
 800ad56:	9308      	str	r3, [sp, #32]
 800ad58:	910d      	str	r1, [sp, #52]	; 0x34
 800ad5a:	e746      	b.n	800abea <_strtod_l+0x702>
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	9308      	str	r3, [sp, #32]
 800ad60:	2301      	movs	r3, #1
 800ad62:	930d      	str	r3, [sp, #52]	; 0x34
 800ad64:	e741      	b.n	800abea <_strtod_l+0x702>
 800ad66:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad68:	4642      	mov	r2, r8
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f001 feb0 	bl	800cad0 <__lshift>
 800ad70:	9018      	str	r0, [sp, #96]	; 0x60
 800ad72:	2800      	cmp	r0, #0
 800ad74:	f47f af6b 	bne.w	800ac4e <_strtod_l+0x766>
 800ad78:	e5fe      	b.n	800a978 <_strtod_l+0x490>
 800ad7a:	465f      	mov	r7, fp
 800ad7c:	d16e      	bne.n	800ae5c <_strtod_l+0x974>
 800ad7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad84:	b342      	cbz	r2, 800add8 <_strtod_l+0x8f0>
 800ad86:	4a32      	ldr	r2, [pc, #200]	; (800ae50 <_strtod_l+0x968>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d128      	bne.n	800adde <_strtod_l+0x8f6>
 800ad8c:	9b04      	ldr	r3, [sp, #16]
 800ad8e:	4651      	mov	r1, sl
 800ad90:	b1eb      	cbz	r3, 800adce <_strtod_l+0x8e6>
 800ad92:	4b2d      	ldr	r3, [pc, #180]	; (800ae48 <_strtod_l+0x960>)
 800ad94:	403b      	ands	r3, r7
 800ad96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ad9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad9e:	d819      	bhi.n	800add4 <_strtod_l+0x8ec>
 800ada0:	0d1b      	lsrs	r3, r3, #20
 800ada2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ada6:	fa02 f303 	lsl.w	r3, r2, r3
 800adaa:	4299      	cmp	r1, r3
 800adac:	d117      	bne.n	800adde <_strtod_l+0x8f6>
 800adae:	4b29      	ldr	r3, [pc, #164]	; (800ae54 <_strtod_l+0x96c>)
 800adb0:	429f      	cmp	r7, r3
 800adb2:	d102      	bne.n	800adba <_strtod_l+0x8d2>
 800adb4:	3101      	adds	r1, #1
 800adb6:	f43f addf 	beq.w	800a978 <_strtod_l+0x490>
 800adba:	4b23      	ldr	r3, [pc, #140]	; (800ae48 <_strtod_l+0x960>)
 800adbc:	403b      	ands	r3, r7
 800adbe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800adc2:	f04f 0a00 	mov.w	sl, #0
 800adc6:	9b04      	ldr	r3, [sp, #16]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1a4      	bne.n	800ad16 <_strtod_l+0x82e>
 800adcc:	e5de      	b.n	800a98c <_strtod_l+0x4a4>
 800adce:	f04f 33ff 	mov.w	r3, #4294967295
 800add2:	e7ea      	b.n	800adaa <_strtod_l+0x8c2>
 800add4:	4613      	mov	r3, r2
 800add6:	e7e8      	b.n	800adaa <_strtod_l+0x8c2>
 800add8:	ea53 030a 	orrs.w	r3, r3, sl
 800addc:	d08c      	beq.n	800acf8 <_strtod_l+0x810>
 800adde:	9b08      	ldr	r3, [sp, #32]
 800ade0:	b1db      	cbz	r3, 800ae1a <_strtod_l+0x932>
 800ade2:	423b      	tst	r3, r7
 800ade4:	d0ef      	beq.n	800adc6 <_strtod_l+0x8de>
 800ade6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ade8:	9a04      	ldr	r2, [sp, #16]
 800adea:	4650      	mov	r0, sl
 800adec:	4659      	mov	r1, fp
 800adee:	b1c3      	cbz	r3, 800ae22 <_strtod_l+0x93a>
 800adf0:	f7ff fb5c 	bl	800a4ac <sulp>
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	ec51 0b18 	vmov	r0, r1, d8
 800adfc:	f7f5 fa4e 	bl	800029c <__adddf3>
 800ae00:	4682      	mov	sl, r0
 800ae02:	468b      	mov	fp, r1
 800ae04:	e7df      	b.n	800adc6 <_strtod_l+0x8de>
 800ae06:	4013      	ands	r3, r2
 800ae08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ae0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ae10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ae14:	f04f 3aff 	mov.w	sl, #4294967295
 800ae18:	e7d5      	b.n	800adc6 <_strtod_l+0x8de>
 800ae1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae1c:	ea13 0f0a 	tst.w	r3, sl
 800ae20:	e7e0      	b.n	800ade4 <_strtod_l+0x8fc>
 800ae22:	f7ff fb43 	bl	800a4ac <sulp>
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	ec51 0b18 	vmov	r0, r1, d8
 800ae2e:	f7f5 fa33 	bl	8000298 <__aeabi_dsub>
 800ae32:	2200      	movs	r2, #0
 800ae34:	2300      	movs	r3, #0
 800ae36:	4682      	mov	sl, r0
 800ae38:	468b      	mov	fp, r1
 800ae3a:	f7f5 fe4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	d0c1      	beq.n	800adc6 <_strtod_l+0x8de>
 800ae42:	e611      	b.n	800aa68 <_strtod_l+0x580>
 800ae44:	fffffc02 	.word	0xfffffc02
 800ae48:	7ff00000 	.word	0x7ff00000
 800ae4c:	39500000 	.word	0x39500000
 800ae50:	000fffff 	.word	0x000fffff
 800ae54:	7fefffff 	.word	0x7fefffff
 800ae58:	0800e378 	.word	0x0800e378
 800ae5c:	4631      	mov	r1, r6
 800ae5e:	4628      	mov	r0, r5
 800ae60:	f002 f824 	bl	800ceac <__ratio>
 800ae64:	ec59 8b10 	vmov	r8, r9, d0
 800ae68:	ee10 0a10 	vmov	r0, s0
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae72:	4649      	mov	r1, r9
 800ae74:	f7f5 fe44 	bl	8000b00 <__aeabi_dcmple>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d07a      	beq.n	800af72 <_strtod_l+0xa8a>
 800ae7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d04a      	beq.n	800af18 <_strtod_l+0xa30>
 800ae82:	4b95      	ldr	r3, [pc, #596]	; (800b0d8 <_strtod_l+0xbf0>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ae8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b0d8 <_strtod_l+0xbf0>
 800ae8e:	f04f 0800 	mov.w	r8, #0
 800ae92:	4b92      	ldr	r3, [pc, #584]	; (800b0dc <_strtod_l+0xbf4>)
 800ae94:	403b      	ands	r3, r7
 800ae96:	930d      	str	r3, [sp, #52]	; 0x34
 800ae98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae9a:	4b91      	ldr	r3, [pc, #580]	; (800b0e0 <_strtod_l+0xbf8>)
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	f040 80b0 	bne.w	800b002 <_strtod_l+0xb1a>
 800aea2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aea6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800aeaa:	ec4b ab10 	vmov	d0, sl, fp
 800aeae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aeb2:	f001 ff23 	bl	800ccfc <__ulp>
 800aeb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aeba:	ec53 2b10 	vmov	r2, r3, d0
 800aebe:	f7f5 fba3 	bl	8000608 <__aeabi_dmul>
 800aec2:	4652      	mov	r2, sl
 800aec4:	465b      	mov	r3, fp
 800aec6:	f7f5 f9e9 	bl	800029c <__adddf3>
 800aeca:	460b      	mov	r3, r1
 800aecc:	4983      	ldr	r1, [pc, #524]	; (800b0dc <_strtod_l+0xbf4>)
 800aece:	4a85      	ldr	r2, [pc, #532]	; (800b0e4 <_strtod_l+0xbfc>)
 800aed0:	4019      	ands	r1, r3
 800aed2:	4291      	cmp	r1, r2
 800aed4:	4682      	mov	sl, r0
 800aed6:	d960      	bls.n	800af9a <_strtod_l+0xab2>
 800aed8:	ee18 3a90 	vmov	r3, s17
 800aedc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d104      	bne.n	800aeee <_strtod_l+0xa06>
 800aee4:	ee18 3a10 	vmov	r3, s16
 800aee8:	3301      	adds	r3, #1
 800aeea:	f43f ad45 	beq.w	800a978 <_strtod_l+0x490>
 800aeee:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b0f0 <_strtod_l+0xc08>
 800aef2:	f04f 3aff 	mov.w	sl, #4294967295
 800aef6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aef8:	4620      	mov	r0, r4
 800aefa:	f001 fbcd 	bl	800c698 <_Bfree>
 800aefe:	9905      	ldr	r1, [sp, #20]
 800af00:	4620      	mov	r0, r4
 800af02:	f001 fbc9 	bl	800c698 <_Bfree>
 800af06:	4631      	mov	r1, r6
 800af08:	4620      	mov	r0, r4
 800af0a:	f001 fbc5 	bl	800c698 <_Bfree>
 800af0e:	4629      	mov	r1, r5
 800af10:	4620      	mov	r0, r4
 800af12:	f001 fbc1 	bl	800c698 <_Bfree>
 800af16:	e61a      	b.n	800ab4e <_strtod_l+0x666>
 800af18:	f1ba 0f00 	cmp.w	sl, #0
 800af1c:	d11b      	bne.n	800af56 <_strtod_l+0xa6e>
 800af1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af22:	b9f3      	cbnz	r3, 800af62 <_strtod_l+0xa7a>
 800af24:	4b6c      	ldr	r3, [pc, #432]	; (800b0d8 <_strtod_l+0xbf0>)
 800af26:	2200      	movs	r2, #0
 800af28:	4640      	mov	r0, r8
 800af2a:	4649      	mov	r1, r9
 800af2c:	f7f5 fdde 	bl	8000aec <__aeabi_dcmplt>
 800af30:	b9d0      	cbnz	r0, 800af68 <_strtod_l+0xa80>
 800af32:	4640      	mov	r0, r8
 800af34:	4649      	mov	r1, r9
 800af36:	4b6c      	ldr	r3, [pc, #432]	; (800b0e8 <_strtod_l+0xc00>)
 800af38:	2200      	movs	r2, #0
 800af3a:	f7f5 fb65 	bl	8000608 <__aeabi_dmul>
 800af3e:	4680      	mov	r8, r0
 800af40:	4689      	mov	r9, r1
 800af42:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800af46:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800af4a:	9315      	str	r3, [sp, #84]	; 0x54
 800af4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800af50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800af54:	e79d      	b.n	800ae92 <_strtod_l+0x9aa>
 800af56:	f1ba 0f01 	cmp.w	sl, #1
 800af5a:	d102      	bne.n	800af62 <_strtod_l+0xa7a>
 800af5c:	2f00      	cmp	r7, #0
 800af5e:	f43f ad83 	beq.w	800aa68 <_strtod_l+0x580>
 800af62:	4b62      	ldr	r3, [pc, #392]	; (800b0ec <_strtod_l+0xc04>)
 800af64:	2200      	movs	r2, #0
 800af66:	e78e      	b.n	800ae86 <_strtod_l+0x99e>
 800af68:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b0e8 <_strtod_l+0xc00>
 800af6c:	f04f 0800 	mov.w	r8, #0
 800af70:	e7e7      	b.n	800af42 <_strtod_l+0xa5a>
 800af72:	4b5d      	ldr	r3, [pc, #372]	; (800b0e8 <_strtod_l+0xc00>)
 800af74:	4640      	mov	r0, r8
 800af76:	4649      	mov	r1, r9
 800af78:	2200      	movs	r2, #0
 800af7a:	f7f5 fb45 	bl	8000608 <__aeabi_dmul>
 800af7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af80:	4680      	mov	r8, r0
 800af82:	4689      	mov	r9, r1
 800af84:	b933      	cbnz	r3, 800af94 <_strtod_l+0xaac>
 800af86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af8a:	900e      	str	r0, [sp, #56]	; 0x38
 800af8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800af8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800af92:	e7dd      	b.n	800af50 <_strtod_l+0xa68>
 800af94:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800af98:	e7f9      	b.n	800af8e <_strtod_l+0xaa6>
 800af9a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800af9e:	9b04      	ldr	r3, [sp, #16]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1a8      	bne.n	800aef6 <_strtod_l+0xa0e>
 800afa4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800afa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afaa:	0d1b      	lsrs	r3, r3, #20
 800afac:	051b      	lsls	r3, r3, #20
 800afae:	429a      	cmp	r2, r3
 800afb0:	d1a1      	bne.n	800aef6 <_strtod_l+0xa0e>
 800afb2:	4640      	mov	r0, r8
 800afb4:	4649      	mov	r1, r9
 800afb6:	f7f5 fe87 	bl	8000cc8 <__aeabi_d2lz>
 800afba:	f7f5 faf7 	bl	80005ac <__aeabi_l2d>
 800afbe:	4602      	mov	r2, r0
 800afc0:	460b      	mov	r3, r1
 800afc2:	4640      	mov	r0, r8
 800afc4:	4649      	mov	r1, r9
 800afc6:	f7f5 f967 	bl	8000298 <__aeabi_dsub>
 800afca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800afcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afd0:	ea43 030a 	orr.w	r3, r3, sl
 800afd4:	4313      	orrs	r3, r2
 800afd6:	4680      	mov	r8, r0
 800afd8:	4689      	mov	r9, r1
 800afda:	d055      	beq.n	800b088 <_strtod_l+0xba0>
 800afdc:	a336      	add	r3, pc, #216	; (adr r3, 800b0b8 <_strtod_l+0xbd0>)
 800afde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe2:	f7f5 fd83 	bl	8000aec <__aeabi_dcmplt>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	f47f acd0 	bne.w	800a98c <_strtod_l+0x4a4>
 800afec:	a334      	add	r3, pc, #208	; (adr r3, 800b0c0 <_strtod_l+0xbd8>)
 800afee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff2:	4640      	mov	r0, r8
 800aff4:	4649      	mov	r1, r9
 800aff6:	f7f5 fd97 	bl	8000b28 <__aeabi_dcmpgt>
 800affa:	2800      	cmp	r0, #0
 800affc:	f43f af7b 	beq.w	800aef6 <_strtod_l+0xa0e>
 800b000:	e4c4      	b.n	800a98c <_strtod_l+0x4a4>
 800b002:	9b04      	ldr	r3, [sp, #16]
 800b004:	b333      	cbz	r3, 800b054 <_strtod_l+0xb6c>
 800b006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b008:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b00c:	d822      	bhi.n	800b054 <_strtod_l+0xb6c>
 800b00e:	a32e      	add	r3, pc, #184	; (adr r3, 800b0c8 <_strtod_l+0xbe0>)
 800b010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b014:	4640      	mov	r0, r8
 800b016:	4649      	mov	r1, r9
 800b018:	f7f5 fd72 	bl	8000b00 <__aeabi_dcmple>
 800b01c:	b1a0      	cbz	r0, 800b048 <_strtod_l+0xb60>
 800b01e:	4649      	mov	r1, r9
 800b020:	4640      	mov	r0, r8
 800b022:	f7f5 fdc9 	bl	8000bb8 <__aeabi_d2uiz>
 800b026:	2801      	cmp	r0, #1
 800b028:	bf38      	it	cc
 800b02a:	2001      	movcc	r0, #1
 800b02c:	f7f5 fa72 	bl	8000514 <__aeabi_ui2d>
 800b030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b032:	4680      	mov	r8, r0
 800b034:	4689      	mov	r9, r1
 800b036:	bb23      	cbnz	r3, 800b082 <_strtod_l+0xb9a>
 800b038:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b03c:	9010      	str	r0, [sp, #64]	; 0x40
 800b03e:	9311      	str	r3, [sp, #68]	; 0x44
 800b040:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b044:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b04a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b04c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b050:	1a9b      	subs	r3, r3, r2
 800b052:	9309      	str	r3, [sp, #36]	; 0x24
 800b054:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b058:	eeb0 0a48 	vmov.f32	s0, s16
 800b05c:	eef0 0a68 	vmov.f32	s1, s17
 800b060:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b064:	f001 fe4a 	bl	800ccfc <__ulp>
 800b068:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b06c:	ec53 2b10 	vmov	r2, r3, d0
 800b070:	f7f5 faca 	bl	8000608 <__aeabi_dmul>
 800b074:	ec53 2b18 	vmov	r2, r3, d8
 800b078:	f7f5 f910 	bl	800029c <__adddf3>
 800b07c:	4682      	mov	sl, r0
 800b07e:	468b      	mov	fp, r1
 800b080:	e78d      	b.n	800af9e <_strtod_l+0xab6>
 800b082:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b086:	e7db      	b.n	800b040 <_strtod_l+0xb58>
 800b088:	a311      	add	r3, pc, #68	; (adr r3, 800b0d0 <_strtod_l+0xbe8>)
 800b08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08e:	f7f5 fd2d 	bl	8000aec <__aeabi_dcmplt>
 800b092:	e7b2      	b.n	800affa <_strtod_l+0xb12>
 800b094:	2300      	movs	r3, #0
 800b096:	930a      	str	r3, [sp, #40]	; 0x28
 800b098:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b09a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b09c:	6013      	str	r3, [r2, #0]
 800b09e:	f7ff ba6b 	b.w	800a578 <_strtod_l+0x90>
 800b0a2:	2a65      	cmp	r2, #101	; 0x65
 800b0a4:	f43f ab5f 	beq.w	800a766 <_strtod_l+0x27e>
 800b0a8:	2a45      	cmp	r2, #69	; 0x45
 800b0aa:	f43f ab5c 	beq.w	800a766 <_strtod_l+0x27e>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	f7ff bb94 	b.w	800a7dc <_strtod_l+0x2f4>
 800b0b4:	f3af 8000 	nop.w
 800b0b8:	94a03595 	.word	0x94a03595
 800b0bc:	3fdfffff 	.word	0x3fdfffff
 800b0c0:	35afe535 	.word	0x35afe535
 800b0c4:	3fe00000 	.word	0x3fe00000
 800b0c8:	ffc00000 	.word	0xffc00000
 800b0cc:	41dfffff 	.word	0x41dfffff
 800b0d0:	94a03595 	.word	0x94a03595
 800b0d4:	3fcfffff 	.word	0x3fcfffff
 800b0d8:	3ff00000 	.word	0x3ff00000
 800b0dc:	7ff00000 	.word	0x7ff00000
 800b0e0:	7fe00000 	.word	0x7fe00000
 800b0e4:	7c9fffff 	.word	0x7c9fffff
 800b0e8:	3fe00000 	.word	0x3fe00000
 800b0ec:	bff00000 	.word	0xbff00000
 800b0f0:	7fefffff 	.word	0x7fefffff

0800b0f4 <_strtod_r>:
 800b0f4:	4b01      	ldr	r3, [pc, #4]	; (800b0fc <_strtod_r+0x8>)
 800b0f6:	f7ff b9f7 	b.w	800a4e8 <_strtod_l>
 800b0fa:	bf00      	nop
 800b0fc:	20000294 	.word	0x20000294

0800b100 <_strtol_l.constprop.0>:
 800b100:	2b01      	cmp	r3, #1
 800b102:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b106:	d001      	beq.n	800b10c <_strtol_l.constprop.0+0xc>
 800b108:	2b24      	cmp	r3, #36	; 0x24
 800b10a:	d906      	bls.n	800b11a <_strtol_l.constprop.0+0x1a>
 800b10c:	f7fe faee 	bl	80096ec <__errno>
 800b110:	2316      	movs	r3, #22
 800b112:	6003      	str	r3, [r0, #0]
 800b114:	2000      	movs	r0, #0
 800b116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b11a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b200 <_strtol_l.constprop.0+0x100>
 800b11e:	460d      	mov	r5, r1
 800b120:	462e      	mov	r6, r5
 800b122:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b126:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b12a:	f017 0708 	ands.w	r7, r7, #8
 800b12e:	d1f7      	bne.n	800b120 <_strtol_l.constprop.0+0x20>
 800b130:	2c2d      	cmp	r4, #45	; 0x2d
 800b132:	d132      	bne.n	800b19a <_strtol_l.constprop.0+0x9a>
 800b134:	782c      	ldrb	r4, [r5, #0]
 800b136:	2701      	movs	r7, #1
 800b138:	1cb5      	adds	r5, r6, #2
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d05b      	beq.n	800b1f6 <_strtol_l.constprop.0+0xf6>
 800b13e:	2b10      	cmp	r3, #16
 800b140:	d109      	bne.n	800b156 <_strtol_l.constprop.0+0x56>
 800b142:	2c30      	cmp	r4, #48	; 0x30
 800b144:	d107      	bne.n	800b156 <_strtol_l.constprop.0+0x56>
 800b146:	782c      	ldrb	r4, [r5, #0]
 800b148:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b14c:	2c58      	cmp	r4, #88	; 0x58
 800b14e:	d14d      	bne.n	800b1ec <_strtol_l.constprop.0+0xec>
 800b150:	786c      	ldrb	r4, [r5, #1]
 800b152:	2310      	movs	r3, #16
 800b154:	3502      	adds	r5, #2
 800b156:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b15a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b15e:	f04f 0c00 	mov.w	ip, #0
 800b162:	fbb8 f9f3 	udiv	r9, r8, r3
 800b166:	4666      	mov	r6, ip
 800b168:	fb03 8a19 	mls	sl, r3, r9, r8
 800b16c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b170:	f1be 0f09 	cmp.w	lr, #9
 800b174:	d816      	bhi.n	800b1a4 <_strtol_l.constprop.0+0xa4>
 800b176:	4674      	mov	r4, lr
 800b178:	42a3      	cmp	r3, r4
 800b17a:	dd24      	ble.n	800b1c6 <_strtol_l.constprop.0+0xc6>
 800b17c:	f1bc 0f00 	cmp.w	ip, #0
 800b180:	db1e      	blt.n	800b1c0 <_strtol_l.constprop.0+0xc0>
 800b182:	45b1      	cmp	r9, r6
 800b184:	d31c      	bcc.n	800b1c0 <_strtol_l.constprop.0+0xc0>
 800b186:	d101      	bne.n	800b18c <_strtol_l.constprop.0+0x8c>
 800b188:	45a2      	cmp	sl, r4
 800b18a:	db19      	blt.n	800b1c0 <_strtol_l.constprop.0+0xc0>
 800b18c:	fb06 4603 	mla	r6, r6, r3, r4
 800b190:	f04f 0c01 	mov.w	ip, #1
 800b194:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b198:	e7e8      	b.n	800b16c <_strtol_l.constprop.0+0x6c>
 800b19a:	2c2b      	cmp	r4, #43	; 0x2b
 800b19c:	bf04      	itt	eq
 800b19e:	782c      	ldrbeq	r4, [r5, #0]
 800b1a0:	1cb5      	addeq	r5, r6, #2
 800b1a2:	e7ca      	b.n	800b13a <_strtol_l.constprop.0+0x3a>
 800b1a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b1a8:	f1be 0f19 	cmp.w	lr, #25
 800b1ac:	d801      	bhi.n	800b1b2 <_strtol_l.constprop.0+0xb2>
 800b1ae:	3c37      	subs	r4, #55	; 0x37
 800b1b0:	e7e2      	b.n	800b178 <_strtol_l.constprop.0+0x78>
 800b1b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b1b6:	f1be 0f19 	cmp.w	lr, #25
 800b1ba:	d804      	bhi.n	800b1c6 <_strtol_l.constprop.0+0xc6>
 800b1bc:	3c57      	subs	r4, #87	; 0x57
 800b1be:	e7db      	b.n	800b178 <_strtol_l.constprop.0+0x78>
 800b1c0:	f04f 3cff 	mov.w	ip, #4294967295
 800b1c4:	e7e6      	b.n	800b194 <_strtol_l.constprop.0+0x94>
 800b1c6:	f1bc 0f00 	cmp.w	ip, #0
 800b1ca:	da05      	bge.n	800b1d8 <_strtol_l.constprop.0+0xd8>
 800b1cc:	2322      	movs	r3, #34	; 0x22
 800b1ce:	6003      	str	r3, [r0, #0]
 800b1d0:	4646      	mov	r6, r8
 800b1d2:	b942      	cbnz	r2, 800b1e6 <_strtol_l.constprop.0+0xe6>
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	e79e      	b.n	800b116 <_strtol_l.constprop.0+0x16>
 800b1d8:	b107      	cbz	r7, 800b1dc <_strtol_l.constprop.0+0xdc>
 800b1da:	4276      	negs	r6, r6
 800b1dc:	2a00      	cmp	r2, #0
 800b1de:	d0f9      	beq.n	800b1d4 <_strtol_l.constprop.0+0xd4>
 800b1e0:	f1bc 0f00 	cmp.w	ip, #0
 800b1e4:	d000      	beq.n	800b1e8 <_strtol_l.constprop.0+0xe8>
 800b1e6:	1e69      	subs	r1, r5, #1
 800b1e8:	6011      	str	r1, [r2, #0]
 800b1ea:	e7f3      	b.n	800b1d4 <_strtol_l.constprop.0+0xd4>
 800b1ec:	2430      	movs	r4, #48	; 0x30
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1b1      	bne.n	800b156 <_strtol_l.constprop.0+0x56>
 800b1f2:	2308      	movs	r3, #8
 800b1f4:	e7af      	b.n	800b156 <_strtol_l.constprop.0+0x56>
 800b1f6:	2c30      	cmp	r4, #48	; 0x30
 800b1f8:	d0a5      	beq.n	800b146 <_strtol_l.constprop.0+0x46>
 800b1fa:	230a      	movs	r3, #10
 800b1fc:	e7ab      	b.n	800b156 <_strtol_l.constprop.0+0x56>
 800b1fe:	bf00      	nop
 800b200:	0800e3a1 	.word	0x0800e3a1

0800b204 <_strtol_r>:
 800b204:	f7ff bf7c 	b.w	800b100 <_strtol_l.constprop.0>

0800b208 <quorem>:
 800b208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20c:	6903      	ldr	r3, [r0, #16]
 800b20e:	690c      	ldr	r4, [r1, #16]
 800b210:	42a3      	cmp	r3, r4
 800b212:	4607      	mov	r7, r0
 800b214:	f2c0 8081 	blt.w	800b31a <quorem+0x112>
 800b218:	3c01      	subs	r4, #1
 800b21a:	f101 0814 	add.w	r8, r1, #20
 800b21e:	f100 0514 	add.w	r5, r0, #20
 800b222:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b226:	9301      	str	r3, [sp, #4]
 800b228:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b22c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b230:	3301      	adds	r3, #1
 800b232:	429a      	cmp	r2, r3
 800b234:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b238:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b23c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b240:	d331      	bcc.n	800b2a6 <quorem+0x9e>
 800b242:	f04f 0e00 	mov.w	lr, #0
 800b246:	4640      	mov	r0, r8
 800b248:	46ac      	mov	ip, r5
 800b24a:	46f2      	mov	sl, lr
 800b24c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b250:	b293      	uxth	r3, r2
 800b252:	fb06 e303 	mla	r3, r6, r3, lr
 800b256:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	ebaa 0303 	sub.w	r3, sl, r3
 800b260:	f8dc a000 	ldr.w	sl, [ip]
 800b264:	0c12      	lsrs	r2, r2, #16
 800b266:	fa13 f38a 	uxtah	r3, r3, sl
 800b26a:	fb06 e202 	mla	r2, r6, r2, lr
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	9b00      	ldr	r3, [sp, #0]
 800b272:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b276:	b292      	uxth	r2, r2
 800b278:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b27c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b280:	f8bd 3000 	ldrh.w	r3, [sp]
 800b284:	4581      	cmp	r9, r0
 800b286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b28a:	f84c 3b04 	str.w	r3, [ip], #4
 800b28e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b292:	d2db      	bcs.n	800b24c <quorem+0x44>
 800b294:	f855 300b 	ldr.w	r3, [r5, fp]
 800b298:	b92b      	cbnz	r3, 800b2a6 <quorem+0x9e>
 800b29a:	9b01      	ldr	r3, [sp, #4]
 800b29c:	3b04      	subs	r3, #4
 800b29e:	429d      	cmp	r5, r3
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	d32e      	bcc.n	800b302 <quorem+0xfa>
 800b2a4:	613c      	str	r4, [r7, #16]
 800b2a6:	4638      	mov	r0, r7
 800b2a8:	f001 fc82 	bl	800cbb0 <__mcmp>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	db24      	blt.n	800b2fa <quorem+0xf2>
 800b2b0:	3601      	adds	r6, #1
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	f04f 0c00 	mov.w	ip, #0
 800b2b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b2bc:	f8d0 e000 	ldr.w	lr, [r0]
 800b2c0:	b293      	uxth	r3, r2
 800b2c2:	ebac 0303 	sub.w	r3, ip, r3
 800b2c6:	0c12      	lsrs	r2, r2, #16
 800b2c8:	fa13 f38e 	uxtah	r3, r3, lr
 800b2cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b2d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2da:	45c1      	cmp	r9, r8
 800b2dc:	f840 3b04 	str.w	r3, [r0], #4
 800b2e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b2e4:	d2e8      	bcs.n	800b2b8 <quorem+0xb0>
 800b2e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2ee:	b922      	cbnz	r2, 800b2fa <quorem+0xf2>
 800b2f0:	3b04      	subs	r3, #4
 800b2f2:	429d      	cmp	r5, r3
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	d30a      	bcc.n	800b30e <quorem+0x106>
 800b2f8:	613c      	str	r4, [r7, #16]
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	b003      	add	sp, #12
 800b2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b302:	6812      	ldr	r2, [r2, #0]
 800b304:	3b04      	subs	r3, #4
 800b306:	2a00      	cmp	r2, #0
 800b308:	d1cc      	bne.n	800b2a4 <quorem+0x9c>
 800b30a:	3c01      	subs	r4, #1
 800b30c:	e7c7      	b.n	800b29e <quorem+0x96>
 800b30e:	6812      	ldr	r2, [r2, #0]
 800b310:	3b04      	subs	r3, #4
 800b312:	2a00      	cmp	r2, #0
 800b314:	d1f0      	bne.n	800b2f8 <quorem+0xf0>
 800b316:	3c01      	subs	r4, #1
 800b318:	e7eb      	b.n	800b2f2 <quorem+0xea>
 800b31a:	2000      	movs	r0, #0
 800b31c:	e7ee      	b.n	800b2fc <quorem+0xf4>
	...

0800b320 <_dtoa_r>:
 800b320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b324:	ed2d 8b04 	vpush	{d8-d9}
 800b328:	ec57 6b10 	vmov	r6, r7, d0
 800b32c:	b093      	sub	sp, #76	; 0x4c
 800b32e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b330:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b334:	9106      	str	r1, [sp, #24]
 800b336:	ee10 aa10 	vmov	sl, s0
 800b33a:	4604      	mov	r4, r0
 800b33c:	9209      	str	r2, [sp, #36]	; 0x24
 800b33e:	930c      	str	r3, [sp, #48]	; 0x30
 800b340:	46bb      	mov	fp, r7
 800b342:	b975      	cbnz	r5, 800b362 <_dtoa_r+0x42>
 800b344:	2010      	movs	r0, #16
 800b346:	f001 f94d 	bl	800c5e4 <malloc>
 800b34a:	4602      	mov	r2, r0
 800b34c:	6260      	str	r0, [r4, #36]	; 0x24
 800b34e:	b920      	cbnz	r0, 800b35a <_dtoa_r+0x3a>
 800b350:	4ba7      	ldr	r3, [pc, #668]	; (800b5f0 <_dtoa_r+0x2d0>)
 800b352:	21ea      	movs	r1, #234	; 0xea
 800b354:	48a7      	ldr	r0, [pc, #668]	; (800b5f4 <_dtoa_r+0x2d4>)
 800b356:	f002 f8ad 	bl	800d4b4 <__assert_func>
 800b35a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b35e:	6005      	str	r5, [r0, #0]
 800b360:	60c5      	str	r5, [r0, #12]
 800b362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b364:	6819      	ldr	r1, [r3, #0]
 800b366:	b151      	cbz	r1, 800b37e <_dtoa_r+0x5e>
 800b368:	685a      	ldr	r2, [r3, #4]
 800b36a:	604a      	str	r2, [r1, #4]
 800b36c:	2301      	movs	r3, #1
 800b36e:	4093      	lsls	r3, r2
 800b370:	608b      	str	r3, [r1, #8]
 800b372:	4620      	mov	r0, r4
 800b374:	f001 f990 	bl	800c698 <_Bfree>
 800b378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b37a:	2200      	movs	r2, #0
 800b37c:	601a      	str	r2, [r3, #0]
 800b37e:	1e3b      	subs	r3, r7, #0
 800b380:	bfaa      	itet	ge
 800b382:	2300      	movge	r3, #0
 800b384:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b388:	f8c8 3000 	strge.w	r3, [r8]
 800b38c:	4b9a      	ldr	r3, [pc, #616]	; (800b5f8 <_dtoa_r+0x2d8>)
 800b38e:	bfbc      	itt	lt
 800b390:	2201      	movlt	r2, #1
 800b392:	f8c8 2000 	strlt.w	r2, [r8]
 800b396:	ea33 030b 	bics.w	r3, r3, fp
 800b39a:	d11b      	bne.n	800b3d4 <_dtoa_r+0xb4>
 800b39c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b39e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b3a2:	6013      	str	r3, [r2, #0]
 800b3a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3a8:	4333      	orrs	r3, r6
 800b3aa:	f000 8592 	beq.w	800bed2 <_dtoa_r+0xbb2>
 800b3ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3b0:	b963      	cbnz	r3, 800b3cc <_dtoa_r+0xac>
 800b3b2:	4b92      	ldr	r3, [pc, #584]	; (800b5fc <_dtoa_r+0x2dc>)
 800b3b4:	e022      	b.n	800b3fc <_dtoa_r+0xdc>
 800b3b6:	4b92      	ldr	r3, [pc, #584]	; (800b600 <_dtoa_r+0x2e0>)
 800b3b8:	9301      	str	r3, [sp, #4]
 800b3ba:	3308      	adds	r3, #8
 800b3bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b3be:	6013      	str	r3, [r2, #0]
 800b3c0:	9801      	ldr	r0, [sp, #4]
 800b3c2:	b013      	add	sp, #76	; 0x4c
 800b3c4:	ecbd 8b04 	vpop	{d8-d9}
 800b3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3cc:	4b8b      	ldr	r3, [pc, #556]	; (800b5fc <_dtoa_r+0x2dc>)
 800b3ce:	9301      	str	r3, [sp, #4]
 800b3d0:	3303      	adds	r3, #3
 800b3d2:	e7f3      	b.n	800b3bc <_dtoa_r+0x9c>
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	4650      	mov	r0, sl
 800b3da:	4659      	mov	r1, fp
 800b3dc:	f7f5 fb7c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3e0:	ec4b ab19 	vmov	d9, sl, fp
 800b3e4:	4680      	mov	r8, r0
 800b3e6:	b158      	cbz	r0, 800b400 <_dtoa_r+0xe0>
 800b3e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	6013      	str	r3, [r2, #0]
 800b3ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f000 856b 	beq.w	800becc <_dtoa_r+0xbac>
 800b3f6:	4883      	ldr	r0, [pc, #524]	; (800b604 <_dtoa_r+0x2e4>)
 800b3f8:	6018      	str	r0, [r3, #0]
 800b3fa:	1e43      	subs	r3, r0, #1
 800b3fc:	9301      	str	r3, [sp, #4]
 800b3fe:	e7df      	b.n	800b3c0 <_dtoa_r+0xa0>
 800b400:	ec4b ab10 	vmov	d0, sl, fp
 800b404:	aa10      	add	r2, sp, #64	; 0x40
 800b406:	a911      	add	r1, sp, #68	; 0x44
 800b408:	4620      	mov	r0, r4
 800b40a:	f001 fcf3 	bl	800cdf4 <__d2b>
 800b40e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b412:	ee08 0a10 	vmov	s16, r0
 800b416:	2d00      	cmp	r5, #0
 800b418:	f000 8084 	beq.w	800b524 <_dtoa_r+0x204>
 800b41c:	ee19 3a90 	vmov	r3, s19
 800b420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b424:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b428:	4656      	mov	r6, sl
 800b42a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b42e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b432:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b436:	4b74      	ldr	r3, [pc, #464]	; (800b608 <_dtoa_r+0x2e8>)
 800b438:	2200      	movs	r2, #0
 800b43a:	4630      	mov	r0, r6
 800b43c:	4639      	mov	r1, r7
 800b43e:	f7f4 ff2b 	bl	8000298 <__aeabi_dsub>
 800b442:	a365      	add	r3, pc, #404	; (adr r3, 800b5d8 <_dtoa_r+0x2b8>)
 800b444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b448:	f7f5 f8de 	bl	8000608 <__aeabi_dmul>
 800b44c:	a364      	add	r3, pc, #400	; (adr r3, 800b5e0 <_dtoa_r+0x2c0>)
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	f7f4 ff23 	bl	800029c <__adddf3>
 800b456:	4606      	mov	r6, r0
 800b458:	4628      	mov	r0, r5
 800b45a:	460f      	mov	r7, r1
 800b45c:	f7f5 f86a 	bl	8000534 <__aeabi_i2d>
 800b460:	a361      	add	r3, pc, #388	; (adr r3, 800b5e8 <_dtoa_r+0x2c8>)
 800b462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b466:	f7f5 f8cf 	bl	8000608 <__aeabi_dmul>
 800b46a:	4602      	mov	r2, r0
 800b46c:	460b      	mov	r3, r1
 800b46e:	4630      	mov	r0, r6
 800b470:	4639      	mov	r1, r7
 800b472:	f7f4 ff13 	bl	800029c <__adddf3>
 800b476:	4606      	mov	r6, r0
 800b478:	460f      	mov	r7, r1
 800b47a:	f7f5 fb75 	bl	8000b68 <__aeabi_d2iz>
 800b47e:	2200      	movs	r2, #0
 800b480:	9000      	str	r0, [sp, #0]
 800b482:	2300      	movs	r3, #0
 800b484:	4630      	mov	r0, r6
 800b486:	4639      	mov	r1, r7
 800b488:	f7f5 fb30 	bl	8000aec <__aeabi_dcmplt>
 800b48c:	b150      	cbz	r0, 800b4a4 <_dtoa_r+0x184>
 800b48e:	9800      	ldr	r0, [sp, #0]
 800b490:	f7f5 f850 	bl	8000534 <__aeabi_i2d>
 800b494:	4632      	mov	r2, r6
 800b496:	463b      	mov	r3, r7
 800b498:	f7f5 fb1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800b49c:	b910      	cbnz	r0, 800b4a4 <_dtoa_r+0x184>
 800b49e:	9b00      	ldr	r3, [sp, #0]
 800b4a0:	3b01      	subs	r3, #1
 800b4a2:	9300      	str	r3, [sp, #0]
 800b4a4:	9b00      	ldr	r3, [sp, #0]
 800b4a6:	2b16      	cmp	r3, #22
 800b4a8:	d85a      	bhi.n	800b560 <_dtoa_r+0x240>
 800b4aa:	9a00      	ldr	r2, [sp, #0]
 800b4ac:	4b57      	ldr	r3, [pc, #348]	; (800b60c <_dtoa_r+0x2ec>)
 800b4ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b6:	ec51 0b19 	vmov	r0, r1, d9
 800b4ba:	f7f5 fb17 	bl	8000aec <__aeabi_dcmplt>
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	d050      	beq.n	800b564 <_dtoa_r+0x244>
 800b4c2:	9b00      	ldr	r3, [sp, #0]
 800b4c4:	3b01      	subs	r3, #1
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4ce:	1b5d      	subs	r5, r3, r5
 800b4d0:	1e6b      	subs	r3, r5, #1
 800b4d2:	9305      	str	r3, [sp, #20]
 800b4d4:	bf45      	ittet	mi
 800b4d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b4da:	9304      	strmi	r3, [sp, #16]
 800b4dc:	2300      	movpl	r3, #0
 800b4de:	2300      	movmi	r3, #0
 800b4e0:	bf4c      	ite	mi
 800b4e2:	9305      	strmi	r3, [sp, #20]
 800b4e4:	9304      	strpl	r3, [sp, #16]
 800b4e6:	9b00      	ldr	r3, [sp, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	db3d      	blt.n	800b568 <_dtoa_r+0x248>
 800b4ec:	9b05      	ldr	r3, [sp, #20]
 800b4ee:	9a00      	ldr	r2, [sp, #0]
 800b4f0:	920a      	str	r2, [sp, #40]	; 0x28
 800b4f2:	4413      	add	r3, r2
 800b4f4:	9305      	str	r3, [sp, #20]
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	9307      	str	r3, [sp, #28]
 800b4fa:	9b06      	ldr	r3, [sp, #24]
 800b4fc:	2b09      	cmp	r3, #9
 800b4fe:	f200 8089 	bhi.w	800b614 <_dtoa_r+0x2f4>
 800b502:	2b05      	cmp	r3, #5
 800b504:	bfc4      	itt	gt
 800b506:	3b04      	subgt	r3, #4
 800b508:	9306      	strgt	r3, [sp, #24]
 800b50a:	9b06      	ldr	r3, [sp, #24]
 800b50c:	f1a3 0302 	sub.w	r3, r3, #2
 800b510:	bfcc      	ite	gt
 800b512:	2500      	movgt	r5, #0
 800b514:	2501      	movle	r5, #1
 800b516:	2b03      	cmp	r3, #3
 800b518:	f200 8087 	bhi.w	800b62a <_dtoa_r+0x30a>
 800b51c:	e8df f003 	tbb	[pc, r3]
 800b520:	59383a2d 	.word	0x59383a2d
 800b524:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b528:	441d      	add	r5, r3
 800b52a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b52e:	2b20      	cmp	r3, #32
 800b530:	bfc1      	itttt	gt
 800b532:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b536:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b53a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b53e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b542:	bfda      	itte	le
 800b544:	f1c3 0320 	rsble	r3, r3, #32
 800b548:	fa06 f003 	lslle.w	r0, r6, r3
 800b54c:	4318      	orrgt	r0, r3
 800b54e:	f7f4 ffe1 	bl	8000514 <__aeabi_ui2d>
 800b552:	2301      	movs	r3, #1
 800b554:	4606      	mov	r6, r0
 800b556:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b55a:	3d01      	subs	r5, #1
 800b55c:	930e      	str	r3, [sp, #56]	; 0x38
 800b55e:	e76a      	b.n	800b436 <_dtoa_r+0x116>
 800b560:	2301      	movs	r3, #1
 800b562:	e7b2      	b.n	800b4ca <_dtoa_r+0x1aa>
 800b564:	900b      	str	r0, [sp, #44]	; 0x2c
 800b566:	e7b1      	b.n	800b4cc <_dtoa_r+0x1ac>
 800b568:	9b04      	ldr	r3, [sp, #16]
 800b56a:	9a00      	ldr	r2, [sp, #0]
 800b56c:	1a9b      	subs	r3, r3, r2
 800b56e:	9304      	str	r3, [sp, #16]
 800b570:	4253      	negs	r3, r2
 800b572:	9307      	str	r3, [sp, #28]
 800b574:	2300      	movs	r3, #0
 800b576:	930a      	str	r3, [sp, #40]	; 0x28
 800b578:	e7bf      	b.n	800b4fa <_dtoa_r+0x1da>
 800b57a:	2300      	movs	r3, #0
 800b57c:	9308      	str	r3, [sp, #32]
 800b57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b580:	2b00      	cmp	r3, #0
 800b582:	dc55      	bgt.n	800b630 <_dtoa_r+0x310>
 800b584:	2301      	movs	r3, #1
 800b586:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b58a:	461a      	mov	r2, r3
 800b58c:	9209      	str	r2, [sp, #36]	; 0x24
 800b58e:	e00c      	b.n	800b5aa <_dtoa_r+0x28a>
 800b590:	2301      	movs	r3, #1
 800b592:	e7f3      	b.n	800b57c <_dtoa_r+0x25c>
 800b594:	2300      	movs	r3, #0
 800b596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b598:	9308      	str	r3, [sp, #32]
 800b59a:	9b00      	ldr	r3, [sp, #0]
 800b59c:	4413      	add	r3, r2
 800b59e:	9302      	str	r3, [sp, #8]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	9303      	str	r3, [sp, #12]
 800b5a6:	bfb8      	it	lt
 800b5a8:	2301      	movlt	r3, #1
 800b5aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	6042      	str	r2, [r0, #4]
 800b5b0:	2204      	movs	r2, #4
 800b5b2:	f102 0614 	add.w	r6, r2, #20
 800b5b6:	429e      	cmp	r6, r3
 800b5b8:	6841      	ldr	r1, [r0, #4]
 800b5ba:	d93d      	bls.n	800b638 <_dtoa_r+0x318>
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f001 f82b 	bl	800c618 <_Balloc>
 800b5c2:	9001      	str	r0, [sp, #4]
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	d13b      	bne.n	800b640 <_dtoa_r+0x320>
 800b5c8:	4b11      	ldr	r3, [pc, #68]	; (800b610 <_dtoa_r+0x2f0>)
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b5d0:	e6c0      	b.n	800b354 <_dtoa_r+0x34>
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e7df      	b.n	800b596 <_dtoa_r+0x276>
 800b5d6:	bf00      	nop
 800b5d8:	636f4361 	.word	0x636f4361
 800b5dc:	3fd287a7 	.word	0x3fd287a7
 800b5e0:	8b60c8b3 	.word	0x8b60c8b3
 800b5e4:	3fc68a28 	.word	0x3fc68a28
 800b5e8:	509f79fb 	.word	0x509f79fb
 800b5ec:	3fd34413 	.word	0x3fd34413
 800b5f0:	0800e4ae 	.word	0x0800e4ae
 800b5f4:	0800e4c5 	.word	0x0800e4c5
 800b5f8:	7ff00000 	.word	0x7ff00000
 800b5fc:	0800e4aa 	.word	0x0800e4aa
 800b600:	0800e4a1 	.word	0x0800e4a1
 800b604:	0800e321 	.word	0x0800e321
 800b608:	3ff80000 	.word	0x3ff80000
 800b60c:	0800e630 	.word	0x0800e630
 800b610:	0800e520 	.word	0x0800e520
 800b614:	2501      	movs	r5, #1
 800b616:	2300      	movs	r3, #0
 800b618:	9306      	str	r3, [sp, #24]
 800b61a:	9508      	str	r5, [sp, #32]
 800b61c:	f04f 33ff 	mov.w	r3, #4294967295
 800b620:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b624:	2200      	movs	r2, #0
 800b626:	2312      	movs	r3, #18
 800b628:	e7b0      	b.n	800b58c <_dtoa_r+0x26c>
 800b62a:	2301      	movs	r3, #1
 800b62c:	9308      	str	r3, [sp, #32]
 800b62e:	e7f5      	b.n	800b61c <_dtoa_r+0x2fc>
 800b630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b632:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b636:	e7b8      	b.n	800b5aa <_dtoa_r+0x28a>
 800b638:	3101      	adds	r1, #1
 800b63a:	6041      	str	r1, [r0, #4]
 800b63c:	0052      	lsls	r2, r2, #1
 800b63e:	e7b8      	b.n	800b5b2 <_dtoa_r+0x292>
 800b640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b642:	9a01      	ldr	r2, [sp, #4]
 800b644:	601a      	str	r2, [r3, #0]
 800b646:	9b03      	ldr	r3, [sp, #12]
 800b648:	2b0e      	cmp	r3, #14
 800b64a:	f200 809d 	bhi.w	800b788 <_dtoa_r+0x468>
 800b64e:	2d00      	cmp	r5, #0
 800b650:	f000 809a 	beq.w	800b788 <_dtoa_r+0x468>
 800b654:	9b00      	ldr	r3, [sp, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	dd32      	ble.n	800b6c0 <_dtoa_r+0x3a0>
 800b65a:	4ab7      	ldr	r2, [pc, #732]	; (800b938 <_dtoa_r+0x618>)
 800b65c:	f003 030f 	and.w	r3, r3, #15
 800b660:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b664:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b668:	9b00      	ldr	r3, [sp, #0]
 800b66a:	05d8      	lsls	r0, r3, #23
 800b66c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b670:	d516      	bpl.n	800b6a0 <_dtoa_r+0x380>
 800b672:	4bb2      	ldr	r3, [pc, #712]	; (800b93c <_dtoa_r+0x61c>)
 800b674:	ec51 0b19 	vmov	r0, r1, d9
 800b678:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b67c:	f7f5 f8ee 	bl	800085c <__aeabi_ddiv>
 800b680:	f007 070f 	and.w	r7, r7, #15
 800b684:	4682      	mov	sl, r0
 800b686:	468b      	mov	fp, r1
 800b688:	2503      	movs	r5, #3
 800b68a:	4eac      	ldr	r6, [pc, #688]	; (800b93c <_dtoa_r+0x61c>)
 800b68c:	b957      	cbnz	r7, 800b6a4 <_dtoa_r+0x384>
 800b68e:	4642      	mov	r2, r8
 800b690:	464b      	mov	r3, r9
 800b692:	4650      	mov	r0, sl
 800b694:	4659      	mov	r1, fp
 800b696:	f7f5 f8e1 	bl	800085c <__aeabi_ddiv>
 800b69a:	4682      	mov	sl, r0
 800b69c:	468b      	mov	fp, r1
 800b69e:	e028      	b.n	800b6f2 <_dtoa_r+0x3d2>
 800b6a0:	2502      	movs	r5, #2
 800b6a2:	e7f2      	b.n	800b68a <_dtoa_r+0x36a>
 800b6a4:	07f9      	lsls	r1, r7, #31
 800b6a6:	d508      	bpl.n	800b6ba <_dtoa_r+0x39a>
 800b6a8:	4640      	mov	r0, r8
 800b6aa:	4649      	mov	r1, r9
 800b6ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b6b0:	f7f4 ffaa 	bl	8000608 <__aeabi_dmul>
 800b6b4:	3501      	adds	r5, #1
 800b6b6:	4680      	mov	r8, r0
 800b6b8:	4689      	mov	r9, r1
 800b6ba:	107f      	asrs	r7, r7, #1
 800b6bc:	3608      	adds	r6, #8
 800b6be:	e7e5      	b.n	800b68c <_dtoa_r+0x36c>
 800b6c0:	f000 809b 	beq.w	800b7fa <_dtoa_r+0x4da>
 800b6c4:	9b00      	ldr	r3, [sp, #0]
 800b6c6:	4f9d      	ldr	r7, [pc, #628]	; (800b93c <_dtoa_r+0x61c>)
 800b6c8:	425e      	negs	r6, r3
 800b6ca:	4b9b      	ldr	r3, [pc, #620]	; (800b938 <_dtoa_r+0x618>)
 800b6cc:	f006 020f 	and.w	r2, r6, #15
 800b6d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	ec51 0b19 	vmov	r0, r1, d9
 800b6dc:	f7f4 ff94 	bl	8000608 <__aeabi_dmul>
 800b6e0:	1136      	asrs	r6, r6, #4
 800b6e2:	4682      	mov	sl, r0
 800b6e4:	468b      	mov	fp, r1
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	2502      	movs	r5, #2
 800b6ea:	2e00      	cmp	r6, #0
 800b6ec:	d17a      	bne.n	800b7e4 <_dtoa_r+0x4c4>
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1d3      	bne.n	800b69a <_dtoa_r+0x37a>
 800b6f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f000 8082 	beq.w	800b7fe <_dtoa_r+0x4de>
 800b6fa:	4b91      	ldr	r3, [pc, #580]	; (800b940 <_dtoa_r+0x620>)
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	4650      	mov	r0, sl
 800b700:	4659      	mov	r1, fp
 800b702:	f7f5 f9f3 	bl	8000aec <__aeabi_dcmplt>
 800b706:	2800      	cmp	r0, #0
 800b708:	d079      	beq.n	800b7fe <_dtoa_r+0x4de>
 800b70a:	9b03      	ldr	r3, [sp, #12]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d076      	beq.n	800b7fe <_dtoa_r+0x4de>
 800b710:	9b02      	ldr	r3, [sp, #8]
 800b712:	2b00      	cmp	r3, #0
 800b714:	dd36      	ble.n	800b784 <_dtoa_r+0x464>
 800b716:	9b00      	ldr	r3, [sp, #0]
 800b718:	4650      	mov	r0, sl
 800b71a:	4659      	mov	r1, fp
 800b71c:	1e5f      	subs	r7, r3, #1
 800b71e:	2200      	movs	r2, #0
 800b720:	4b88      	ldr	r3, [pc, #544]	; (800b944 <_dtoa_r+0x624>)
 800b722:	f7f4 ff71 	bl	8000608 <__aeabi_dmul>
 800b726:	9e02      	ldr	r6, [sp, #8]
 800b728:	4682      	mov	sl, r0
 800b72a:	468b      	mov	fp, r1
 800b72c:	3501      	adds	r5, #1
 800b72e:	4628      	mov	r0, r5
 800b730:	f7f4 ff00 	bl	8000534 <__aeabi_i2d>
 800b734:	4652      	mov	r2, sl
 800b736:	465b      	mov	r3, fp
 800b738:	f7f4 ff66 	bl	8000608 <__aeabi_dmul>
 800b73c:	4b82      	ldr	r3, [pc, #520]	; (800b948 <_dtoa_r+0x628>)
 800b73e:	2200      	movs	r2, #0
 800b740:	f7f4 fdac 	bl	800029c <__adddf3>
 800b744:	46d0      	mov	r8, sl
 800b746:	46d9      	mov	r9, fp
 800b748:	4682      	mov	sl, r0
 800b74a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b74e:	2e00      	cmp	r6, #0
 800b750:	d158      	bne.n	800b804 <_dtoa_r+0x4e4>
 800b752:	4b7e      	ldr	r3, [pc, #504]	; (800b94c <_dtoa_r+0x62c>)
 800b754:	2200      	movs	r2, #0
 800b756:	4640      	mov	r0, r8
 800b758:	4649      	mov	r1, r9
 800b75a:	f7f4 fd9d 	bl	8000298 <__aeabi_dsub>
 800b75e:	4652      	mov	r2, sl
 800b760:	465b      	mov	r3, fp
 800b762:	4680      	mov	r8, r0
 800b764:	4689      	mov	r9, r1
 800b766:	f7f5 f9df 	bl	8000b28 <__aeabi_dcmpgt>
 800b76a:	2800      	cmp	r0, #0
 800b76c:	f040 8295 	bne.w	800bc9a <_dtoa_r+0x97a>
 800b770:	4652      	mov	r2, sl
 800b772:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b776:	4640      	mov	r0, r8
 800b778:	4649      	mov	r1, r9
 800b77a:	f7f5 f9b7 	bl	8000aec <__aeabi_dcmplt>
 800b77e:	2800      	cmp	r0, #0
 800b780:	f040 8289 	bne.w	800bc96 <_dtoa_r+0x976>
 800b784:	ec5b ab19 	vmov	sl, fp, d9
 800b788:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f2c0 8148 	blt.w	800ba20 <_dtoa_r+0x700>
 800b790:	9a00      	ldr	r2, [sp, #0]
 800b792:	2a0e      	cmp	r2, #14
 800b794:	f300 8144 	bgt.w	800ba20 <_dtoa_r+0x700>
 800b798:	4b67      	ldr	r3, [pc, #412]	; (800b938 <_dtoa_r+0x618>)
 800b79a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b79e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b7a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f280 80d5 	bge.w	800b954 <_dtoa_r+0x634>
 800b7aa:	9b03      	ldr	r3, [sp, #12]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f300 80d1 	bgt.w	800b954 <_dtoa_r+0x634>
 800b7b2:	f040 826f 	bne.w	800bc94 <_dtoa_r+0x974>
 800b7b6:	4b65      	ldr	r3, [pc, #404]	; (800b94c <_dtoa_r+0x62c>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	4640      	mov	r0, r8
 800b7bc:	4649      	mov	r1, r9
 800b7be:	f7f4 ff23 	bl	8000608 <__aeabi_dmul>
 800b7c2:	4652      	mov	r2, sl
 800b7c4:	465b      	mov	r3, fp
 800b7c6:	f7f5 f9a5 	bl	8000b14 <__aeabi_dcmpge>
 800b7ca:	9e03      	ldr	r6, [sp, #12]
 800b7cc:	4637      	mov	r7, r6
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	f040 8245 	bne.w	800bc5e <_dtoa_r+0x93e>
 800b7d4:	9d01      	ldr	r5, [sp, #4]
 800b7d6:	2331      	movs	r3, #49	; 0x31
 800b7d8:	f805 3b01 	strb.w	r3, [r5], #1
 800b7dc:	9b00      	ldr	r3, [sp, #0]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	9300      	str	r3, [sp, #0]
 800b7e2:	e240      	b.n	800bc66 <_dtoa_r+0x946>
 800b7e4:	07f2      	lsls	r2, r6, #31
 800b7e6:	d505      	bpl.n	800b7f4 <_dtoa_r+0x4d4>
 800b7e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7ec:	f7f4 ff0c 	bl	8000608 <__aeabi_dmul>
 800b7f0:	3501      	adds	r5, #1
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	1076      	asrs	r6, r6, #1
 800b7f6:	3708      	adds	r7, #8
 800b7f8:	e777      	b.n	800b6ea <_dtoa_r+0x3ca>
 800b7fa:	2502      	movs	r5, #2
 800b7fc:	e779      	b.n	800b6f2 <_dtoa_r+0x3d2>
 800b7fe:	9f00      	ldr	r7, [sp, #0]
 800b800:	9e03      	ldr	r6, [sp, #12]
 800b802:	e794      	b.n	800b72e <_dtoa_r+0x40e>
 800b804:	9901      	ldr	r1, [sp, #4]
 800b806:	4b4c      	ldr	r3, [pc, #304]	; (800b938 <_dtoa_r+0x618>)
 800b808:	4431      	add	r1, r6
 800b80a:	910d      	str	r1, [sp, #52]	; 0x34
 800b80c:	9908      	ldr	r1, [sp, #32]
 800b80e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b812:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b816:	2900      	cmp	r1, #0
 800b818:	d043      	beq.n	800b8a2 <_dtoa_r+0x582>
 800b81a:	494d      	ldr	r1, [pc, #308]	; (800b950 <_dtoa_r+0x630>)
 800b81c:	2000      	movs	r0, #0
 800b81e:	f7f5 f81d 	bl	800085c <__aeabi_ddiv>
 800b822:	4652      	mov	r2, sl
 800b824:	465b      	mov	r3, fp
 800b826:	f7f4 fd37 	bl	8000298 <__aeabi_dsub>
 800b82a:	9d01      	ldr	r5, [sp, #4]
 800b82c:	4682      	mov	sl, r0
 800b82e:	468b      	mov	fp, r1
 800b830:	4649      	mov	r1, r9
 800b832:	4640      	mov	r0, r8
 800b834:	f7f5 f998 	bl	8000b68 <__aeabi_d2iz>
 800b838:	4606      	mov	r6, r0
 800b83a:	f7f4 fe7b 	bl	8000534 <__aeabi_i2d>
 800b83e:	4602      	mov	r2, r0
 800b840:	460b      	mov	r3, r1
 800b842:	4640      	mov	r0, r8
 800b844:	4649      	mov	r1, r9
 800b846:	f7f4 fd27 	bl	8000298 <__aeabi_dsub>
 800b84a:	3630      	adds	r6, #48	; 0x30
 800b84c:	f805 6b01 	strb.w	r6, [r5], #1
 800b850:	4652      	mov	r2, sl
 800b852:	465b      	mov	r3, fp
 800b854:	4680      	mov	r8, r0
 800b856:	4689      	mov	r9, r1
 800b858:	f7f5 f948 	bl	8000aec <__aeabi_dcmplt>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	d163      	bne.n	800b928 <_dtoa_r+0x608>
 800b860:	4642      	mov	r2, r8
 800b862:	464b      	mov	r3, r9
 800b864:	4936      	ldr	r1, [pc, #216]	; (800b940 <_dtoa_r+0x620>)
 800b866:	2000      	movs	r0, #0
 800b868:	f7f4 fd16 	bl	8000298 <__aeabi_dsub>
 800b86c:	4652      	mov	r2, sl
 800b86e:	465b      	mov	r3, fp
 800b870:	f7f5 f93c 	bl	8000aec <__aeabi_dcmplt>
 800b874:	2800      	cmp	r0, #0
 800b876:	f040 80b5 	bne.w	800b9e4 <_dtoa_r+0x6c4>
 800b87a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b87c:	429d      	cmp	r5, r3
 800b87e:	d081      	beq.n	800b784 <_dtoa_r+0x464>
 800b880:	4b30      	ldr	r3, [pc, #192]	; (800b944 <_dtoa_r+0x624>)
 800b882:	2200      	movs	r2, #0
 800b884:	4650      	mov	r0, sl
 800b886:	4659      	mov	r1, fp
 800b888:	f7f4 febe 	bl	8000608 <__aeabi_dmul>
 800b88c:	4b2d      	ldr	r3, [pc, #180]	; (800b944 <_dtoa_r+0x624>)
 800b88e:	4682      	mov	sl, r0
 800b890:	468b      	mov	fp, r1
 800b892:	4640      	mov	r0, r8
 800b894:	4649      	mov	r1, r9
 800b896:	2200      	movs	r2, #0
 800b898:	f7f4 feb6 	bl	8000608 <__aeabi_dmul>
 800b89c:	4680      	mov	r8, r0
 800b89e:	4689      	mov	r9, r1
 800b8a0:	e7c6      	b.n	800b830 <_dtoa_r+0x510>
 800b8a2:	4650      	mov	r0, sl
 800b8a4:	4659      	mov	r1, fp
 800b8a6:	f7f4 feaf 	bl	8000608 <__aeabi_dmul>
 800b8aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8ac:	9d01      	ldr	r5, [sp, #4]
 800b8ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8b0:	4682      	mov	sl, r0
 800b8b2:	468b      	mov	fp, r1
 800b8b4:	4649      	mov	r1, r9
 800b8b6:	4640      	mov	r0, r8
 800b8b8:	f7f5 f956 	bl	8000b68 <__aeabi_d2iz>
 800b8bc:	4606      	mov	r6, r0
 800b8be:	f7f4 fe39 	bl	8000534 <__aeabi_i2d>
 800b8c2:	3630      	adds	r6, #48	; 0x30
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	4640      	mov	r0, r8
 800b8ca:	4649      	mov	r1, r9
 800b8cc:	f7f4 fce4 	bl	8000298 <__aeabi_dsub>
 800b8d0:	f805 6b01 	strb.w	r6, [r5], #1
 800b8d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8d6:	429d      	cmp	r5, r3
 800b8d8:	4680      	mov	r8, r0
 800b8da:	4689      	mov	r9, r1
 800b8dc:	f04f 0200 	mov.w	r2, #0
 800b8e0:	d124      	bne.n	800b92c <_dtoa_r+0x60c>
 800b8e2:	4b1b      	ldr	r3, [pc, #108]	; (800b950 <_dtoa_r+0x630>)
 800b8e4:	4650      	mov	r0, sl
 800b8e6:	4659      	mov	r1, fp
 800b8e8:	f7f4 fcd8 	bl	800029c <__adddf3>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	4640      	mov	r0, r8
 800b8f2:	4649      	mov	r1, r9
 800b8f4:	f7f5 f918 	bl	8000b28 <__aeabi_dcmpgt>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	d173      	bne.n	800b9e4 <_dtoa_r+0x6c4>
 800b8fc:	4652      	mov	r2, sl
 800b8fe:	465b      	mov	r3, fp
 800b900:	4913      	ldr	r1, [pc, #76]	; (800b950 <_dtoa_r+0x630>)
 800b902:	2000      	movs	r0, #0
 800b904:	f7f4 fcc8 	bl	8000298 <__aeabi_dsub>
 800b908:	4602      	mov	r2, r0
 800b90a:	460b      	mov	r3, r1
 800b90c:	4640      	mov	r0, r8
 800b90e:	4649      	mov	r1, r9
 800b910:	f7f5 f8ec 	bl	8000aec <__aeabi_dcmplt>
 800b914:	2800      	cmp	r0, #0
 800b916:	f43f af35 	beq.w	800b784 <_dtoa_r+0x464>
 800b91a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b91c:	1e6b      	subs	r3, r5, #1
 800b91e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b920:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b924:	2b30      	cmp	r3, #48	; 0x30
 800b926:	d0f8      	beq.n	800b91a <_dtoa_r+0x5fa>
 800b928:	9700      	str	r7, [sp, #0]
 800b92a:	e049      	b.n	800b9c0 <_dtoa_r+0x6a0>
 800b92c:	4b05      	ldr	r3, [pc, #20]	; (800b944 <_dtoa_r+0x624>)
 800b92e:	f7f4 fe6b 	bl	8000608 <__aeabi_dmul>
 800b932:	4680      	mov	r8, r0
 800b934:	4689      	mov	r9, r1
 800b936:	e7bd      	b.n	800b8b4 <_dtoa_r+0x594>
 800b938:	0800e630 	.word	0x0800e630
 800b93c:	0800e608 	.word	0x0800e608
 800b940:	3ff00000 	.word	0x3ff00000
 800b944:	40240000 	.word	0x40240000
 800b948:	401c0000 	.word	0x401c0000
 800b94c:	40140000 	.word	0x40140000
 800b950:	3fe00000 	.word	0x3fe00000
 800b954:	9d01      	ldr	r5, [sp, #4]
 800b956:	4656      	mov	r6, sl
 800b958:	465f      	mov	r7, fp
 800b95a:	4642      	mov	r2, r8
 800b95c:	464b      	mov	r3, r9
 800b95e:	4630      	mov	r0, r6
 800b960:	4639      	mov	r1, r7
 800b962:	f7f4 ff7b 	bl	800085c <__aeabi_ddiv>
 800b966:	f7f5 f8ff 	bl	8000b68 <__aeabi_d2iz>
 800b96a:	4682      	mov	sl, r0
 800b96c:	f7f4 fde2 	bl	8000534 <__aeabi_i2d>
 800b970:	4642      	mov	r2, r8
 800b972:	464b      	mov	r3, r9
 800b974:	f7f4 fe48 	bl	8000608 <__aeabi_dmul>
 800b978:	4602      	mov	r2, r0
 800b97a:	460b      	mov	r3, r1
 800b97c:	4630      	mov	r0, r6
 800b97e:	4639      	mov	r1, r7
 800b980:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b984:	f7f4 fc88 	bl	8000298 <__aeabi_dsub>
 800b988:	f805 6b01 	strb.w	r6, [r5], #1
 800b98c:	9e01      	ldr	r6, [sp, #4]
 800b98e:	9f03      	ldr	r7, [sp, #12]
 800b990:	1bae      	subs	r6, r5, r6
 800b992:	42b7      	cmp	r7, r6
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	d135      	bne.n	800ba06 <_dtoa_r+0x6e6>
 800b99a:	f7f4 fc7f 	bl	800029c <__adddf3>
 800b99e:	4642      	mov	r2, r8
 800b9a0:	464b      	mov	r3, r9
 800b9a2:	4606      	mov	r6, r0
 800b9a4:	460f      	mov	r7, r1
 800b9a6:	f7f5 f8bf 	bl	8000b28 <__aeabi_dcmpgt>
 800b9aa:	b9d0      	cbnz	r0, 800b9e2 <_dtoa_r+0x6c2>
 800b9ac:	4642      	mov	r2, r8
 800b9ae:	464b      	mov	r3, r9
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	4639      	mov	r1, r7
 800b9b4:	f7f5 f890 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9b8:	b110      	cbz	r0, 800b9c0 <_dtoa_r+0x6a0>
 800b9ba:	f01a 0f01 	tst.w	sl, #1
 800b9be:	d110      	bne.n	800b9e2 <_dtoa_r+0x6c2>
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	ee18 1a10 	vmov	r1, s16
 800b9c6:	f000 fe67 	bl	800c698 <_Bfree>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	9800      	ldr	r0, [sp, #0]
 800b9ce:	702b      	strb	r3, [r5, #0]
 800b9d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9d2:	3001      	adds	r0, #1
 800b9d4:	6018      	str	r0, [r3, #0]
 800b9d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	f43f acf1 	beq.w	800b3c0 <_dtoa_r+0xa0>
 800b9de:	601d      	str	r5, [r3, #0]
 800b9e0:	e4ee      	b.n	800b3c0 <_dtoa_r+0xa0>
 800b9e2:	9f00      	ldr	r7, [sp, #0]
 800b9e4:	462b      	mov	r3, r5
 800b9e6:	461d      	mov	r5, r3
 800b9e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9ec:	2a39      	cmp	r2, #57	; 0x39
 800b9ee:	d106      	bne.n	800b9fe <_dtoa_r+0x6de>
 800b9f0:	9a01      	ldr	r2, [sp, #4]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d1f7      	bne.n	800b9e6 <_dtoa_r+0x6c6>
 800b9f6:	9901      	ldr	r1, [sp, #4]
 800b9f8:	2230      	movs	r2, #48	; 0x30
 800b9fa:	3701      	adds	r7, #1
 800b9fc:	700a      	strb	r2, [r1, #0]
 800b9fe:	781a      	ldrb	r2, [r3, #0]
 800ba00:	3201      	adds	r2, #1
 800ba02:	701a      	strb	r2, [r3, #0]
 800ba04:	e790      	b.n	800b928 <_dtoa_r+0x608>
 800ba06:	4ba6      	ldr	r3, [pc, #664]	; (800bca0 <_dtoa_r+0x980>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f7f4 fdfd 	bl	8000608 <__aeabi_dmul>
 800ba0e:	2200      	movs	r2, #0
 800ba10:	2300      	movs	r3, #0
 800ba12:	4606      	mov	r6, r0
 800ba14:	460f      	mov	r7, r1
 800ba16:	f7f5 f85f 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d09d      	beq.n	800b95a <_dtoa_r+0x63a>
 800ba1e:	e7cf      	b.n	800b9c0 <_dtoa_r+0x6a0>
 800ba20:	9a08      	ldr	r2, [sp, #32]
 800ba22:	2a00      	cmp	r2, #0
 800ba24:	f000 80d7 	beq.w	800bbd6 <_dtoa_r+0x8b6>
 800ba28:	9a06      	ldr	r2, [sp, #24]
 800ba2a:	2a01      	cmp	r2, #1
 800ba2c:	f300 80ba 	bgt.w	800bba4 <_dtoa_r+0x884>
 800ba30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba32:	2a00      	cmp	r2, #0
 800ba34:	f000 80b2 	beq.w	800bb9c <_dtoa_r+0x87c>
 800ba38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ba3c:	9e07      	ldr	r6, [sp, #28]
 800ba3e:	9d04      	ldr	r5, [sp, #16]
 800ba40:	9a04      	ldr	r2, [sp, #16]
 800ba42:	441a      	add	r2, r3
 800ba44:	9204      	str	r2, [sp, #16]
 800ba46:	9a05      	ldr	r2, [sp, #20]
 800ba48:	2101      	movs	r1, #1
 800ba4a:	441a      	add	r2, r3
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	9205      	str	r2, [sp, #20]
 800ba50:	f000 ff24 	bl	800c89c <__i2b>
 800ba54:	4607      	mov	r7, r0
 800ba56:	2d00      	cmp	r5, #0
 800ba58:	dd0c      	ble.n	800ba74 <_dtoa_r+0x754>
 800ba5a:	9b05      	ldr	r3, [sp, #20]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	dd09      	ble.n	800ba74 <_dtoa_r+0x754>
 800ba60:	42ab      	cmp	r3, r5
 800ba62:	9a04      	ldr	r2, [sp, #16]
 800ba64:	bfa8      	it	ge
 800ba66:	462b      	movge	r3, r5
 800ba68:	1ad2      	subs	r2, r2, r3
 800ba6a:	9204      	str	r2, [sp, #16]
 800ba6c:	9a05      	ldr	r2, [sp, #20]
 800ba6e:	1aed      	subs	r5, r5, r3
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	9305      	str	r3, [sp, #20]
 800ba74:	9b07      	ldr	r3, [sp, #28]
 800ba76:	b31b      	cbz	r3, 800bac0 <_dtoa_r+0x7a0>
 800ba78:	9b08      	ldr	r3, [sp, #32]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	f000 80af 	beq.w	800bbde <_dtoa_r+0x8be>
 800ba80:	2e00      	cmp	r6, #0
 800ba82:	dd13      	ble.n	800baac <_dtoa_r+0x78c>
 800ba84:	4639      	mov	r1, r7
 800ba86:	4632      	mov	r2, r6
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f000 ffc7 	bl	800ca1c <__pow5mult>
 800ba8e:	ee18 2a10 	vmov	r2, s16
 800ba92:	4601      	mov	r1, r0
 800ba94:	4607      	mov	r7, r0
 800ba96:	4620      	mov	r0, r4
 800ba98:	f000 ff16 	bl	800c8c8 <__multiply>
 800ba9c:	ee18 1a10 	vmov	r1, s16
 800baa0:	4680      	mov	r8, r0
 800baa2:	4620      	mov	r0, r4
 800baa4:	f000 fdf8 	bl	800c698 <_Bfree>
 800baa8:	ee08 8a10 	vmov	s16, r8
 800baac:	9b07      	ldr	r3, [sp, #28]
 800baae:	1b9a      	subs	r2, r3, r6
 800bab0:	d006      	beq.n	800bac0 <_dtoa_r+0x7a0>
 800bab2:	ee18 1a10 	vmov	r1, s16
 800bab6:	4620      	mov	r0, r4
 800bab8:	f000 ffb0 	bl	800ca1c <__pow5mult>
 800babc:	ee08 0a10 	vmov	s16, r0
 800bac0:	2101      	movs	r1, #1
 800bac2:	4620      	mov	r0, r4
 800bac4:	f000 feea 	bl	800c89c <__i2b>
 800bac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baca:	2b00      	cmp	r3, #0
 800bacc:	4606      	mov	r6, r0
 800bace:	f340 8088 	ble.w	800bbe2 <_dtoa_r+0x8c2>
 800bad2:	461a      	mov	r2, r3
 800bad4:	4601      	mov	r1, r0
 800bad6:	4620      	mov	r0, r4
 800bad8:	f000 ffa0 	bl	800ca1c <__pow5mult>
 800badc:	9b06      	ldr	r3, [sp, #24]
 800bade:	2b01      	cmp	r3, #1
 800bae0:	4606      	mov	r6, r0
 800bae2:	f340 8081 	ble.w	800bbe8 <_dtoa_r+0x8c8>
 800bae6:	f04f 0800 	mov.w	r8, #0
 800baea:	6933      	ldr	r3, [r6, #16]
 800baec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800baf0:	6918      	ldr	r0, [r3, #16]
 800baf2:	f000 fe83 	bl	800c7fc <__hi0bits>
 800baf6:	f1c0 0020 	rsb	r0, r0, #32
 800bafa:	9b05      	ldr	r3, [sp, #20]
 800bafc:	4418      	add	r0, r3
 800bafe:	f010 001f 	ands.w	r0, r0, #31
 800bb02:	f000 8092 	beq.w	800bc2a <_dtoa_r+0x90a>
 800bb06:	f1c0 0320 	rsb	r3, r0, #32
 800bb0a:	2b04      	cmp	r3, #4
 800bb0c:	f340 808a 	ble.w	800bc24 <_dtoa_r+0x904>
 800bb10:	f1c0 001c 	rsb	r0, r0, #28
 800bb14:	9b04      	ldr	r3, [sp, #16]
 800bb16:	4403      	add	r3, r0
 800bb18:	9304      	str	r3, [sp, #16]
 800bb1a:	9b05      	ldr	r3, [sp, #20]
 800bb1c:	4403      	add	r3, r0
 800bb1e:	4405      	add	r5, r0
 800bb20:	9305      	str	r3, [sp, #20]
 800bb22:	9b04      	ldr	r3, [sp, #16]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	dd07      	ble.n	800bb38 <_dtoa_r+0x818>
 800bb28:	ee18 1a10 	vmov	r1, s16
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	4620      	mov	r0, r4
 800bb30:	f000 ffce 	bl	800cad0 <__lshift>
 800bb34:	ee08 0a10 	vmov	s16, r0
 800bb38:	9b05      	ldr	r3, [sp, #20]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	dd05      	ble.n	800bb4a <_dtoa_r+0x82a>
 800bb3e:	4631      	mov	r1, r6
 800bb40:	461a      	mov	r2, r3
 800bb42:	4620      	mov	r0, r4
 800bb44:	f000 ffc4 	bl	800cad0 <__lshift>
 800bb48:	4606      	mov	r6, r0
 800bb4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d06e      	beq.n	800bc2e <_dtoa_r+0x90e>
 800bb50:	ee18 0a10 	vmov	r0, s16
 800bb54:	4631      	mov	r1, r6
 800bb56:	f001 f82b 	bl	800cbb0 <__mcmp>
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	da67      	bge.n	800bc2e <_dtoa_r+0x90e>
 800bb5e:	9b00      	ldr	r3, [sp, #0]
 800bb60:	3b01      	subs	r3, #1
 800bb62:	ee18 1a10 	vmov	r1, s16
 800bb66:	9300      	str	r3, [sp, #0]
 800bb68:	220a      	movs	r2, #10
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	f000 fdb5 	bl	800c6dc <__multadd>
 800bb72:	9b08      	ldr	r3, [sp, #32]
 800bb74:	ee08 0a10 	vmov	s16, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f000 81b1 	beq.w	800bee0 <_dtoa_r+0xbc0>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	4639      	mov	r1, r7
 800bb82:	220a      	movs	r2, #10
 800bb84:	4620      	mov	r0, r4
 800bb86:	f000 fda9 	bl	800c6dc <__multadd>
 800bb8a:	9b02      	ldr	r3, [sp, #8]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	4607      	mov	r7, r0
 800bb90:	f300 808e 	bgt.w	800bcb0 <_dtoa_r+0x990>
 800bb94:	9b06      	ldr	r3, [sp, #24]
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	dc51      	bgt.n	800bc3e <_dtoa_r+0x91e>
 800bb9a:	e089      	b.n	800bcb0 <_dtoa_r+0x990>
 800bb9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bba2:	e74b      	b.n	800ba3c <_dtoa_r+0x71c>
 800bba4:	9b03      	ldr	r3, [sp, #12]
 800bba6:	1e5e      	subs	r6, r3, #1
 800bba8:	9b07      	ldr	r3, [sp, #28]
 800bbaa:	42b3      	cmp	r3, r6
 800bbac:	bfbf      	itttt	lt
 800bbae:	9b07      	ldrlt	r3, [sp, #28]
 800bbb0:	9607      	strlt	r6, [sp, #28]
 800bbb2:	1af2      	sublt	r2, r6, r3
 800bbb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bbb6:	bfb6      	itet	lt
 800bbb8:	189b      	addlt	r3, r3, r2
 800bbba:	1b9e      	subge	r6, r3, r6
 800bbbc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bbbe:	9b03      	ldr	r3, [sp, #12]
 800bbc0:	bfb8      	it	lt
 800bbc2:	2600      	movlt	r6, #0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	bfb7      	itett	lt
 800bbc8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bbcc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bbd0:	1a9d      	sublt	r5, r3, r2
 800bbd2:	2300      	movlt	r3, #0
 800bbd4:	e734      	b.n	800ba40 <_dtoa_r+0x720>
 800bbd6:	9e07      	ldr	r6, [sp, #28]
 800bbd8:	9d04      	ldr	r5, [sp, #16]
 800bbda:	9f08      	ldr	r7, [sp, #32]
 800bbdc:	e73b      	b.n	800ba56 <_dtoa_r+0x736>
 800bbde:	9a07      	ldr	r2, [sp, #28]
 800bbe0:	e767      	b.n	800bab2 <_dtoa_r+0x792>
 800bbe2:	9b06      	ldr	r3, [sp, #24]
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	dc18      	bgt.n	800bc1a <_dtoa_r+0x8fa>
 800bbe8:	f1ba 0f00 	cmp.w	sl, #0
 800bbec:	d115      	bne.n	800bc1a <_dtoa_r+0x8fa>
 800bbee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbf2:	b993      	cbnz	r3, 800bc1a <_dtoa_r+0x8fa>
 800bbf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bbf8:	0d1b      	lsrs	r3, r3, #20
 800bbfa:	051b      	lsls	r3, r3, #20
 800bbfc:	b183      	cbz	r3, 800bc20 <_dtoa_r+0x900>
 800bbfe:	9b04      	ldr	r3, [sp, #16]
 800bc00:	3301      	adds	r3, #1
 800bc02:	9304      	str	r3, [sp, #16]
 800bc04:	9b05      	ldr	r3, [sp, #20]
 800bc06:	3301      	adds	r3, #1
 800bc08:	9305      	str	r3, [sp, #20]
 800bc0a:	f04f 0801 	mov.w	r8, #1
 800bc0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f47f af6a 	bne.w	800baea <_dtoa_r+0x7ca>
 800bc16:	2001      	movs	r0, #1
 800bc18:	e76f      	b.n	800bafa <_dtoa_r+0x7da>
 800bc1a:	f04f 0800 	mov.w	r8, #0
 800bc1e:	e7f6      	b.n	800bc0e <_dtoa_r+0x8ee>
 800bc20:	4698      	mov	r8, r3
 800bc22:	e7f4      	b.n	800bc0e <_dtoa_r+0x8ee>
 800bc24:	f43f af7d 	beq.w	800bb22 <_dtoa_r+0x802>
 800bc28:	4618      	mov	r0, r3
 800bc2a:	301c      	adds	r0, #28
 800bc2c:	e772      	b.n	800bb14 <_dtoa_r+0x7f4>
 800bc2e:	9b03      	ldr	r3, [sp, #12]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	dc37      	bgt.n	800bca4 <_dtoa_r+0x984>
 800bc34:	9b06      	ldr	r3, [sp, #24]
 800bc36:	2b02      	cmp	r3, #2
 800bc38:	dd34      	ble.n	800bca4 <_dtoa_r+0x984>
 800bc3a:	9b03      	ldr	r3, [sp, #12]
 800bc3c:	9302      	str	r3, [sp, #8]
 800bc3e:	9b02      	ldr	r3, [sp, #8]
 800bc40:	b96b      	cbnz	r3, 800bc5e <_dtoa_r+0x93e>
 800bc42:	4631      	mov	r1, r6
 800bc44:	2205      	movs	r2, #5
 800bc46:	4620      	mov	r0, r4
 800bc48:	f000 fd48 	bl	800c6dc <__multadd>
 800bc4c:	4601      	mov	r1, r0
 800bc4e:	4606      	mov	r6, r0
 800bc50:	ee18 0a10 	vmov	r0, s16
 800bc54:	f000 ffac 	bl	800cbb0 <__mcmp>
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	f73f adbb 	bgt.w	800b7d4 <_dtoa_r+0x4b4>
 800bc5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc60:	9d01      	ldr	r5, [sp, #4]
 800bc62:	43db      	mvns	r3, r3
 800bc64:	9300      	str	r3, [sp, #0]
 800bc66:	f04f 0800 	mov.w	r8, #0
 800bc6a:	4631      	mov	r1, r6
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	f000 fd13 	bl	800c698 <_Bfree>
 800bc72:	2f00      	cmp	r7, #0
 800bc74:	f43f aea4 	beq.w	800b9c0 <_dtoa_r+0x6a0>
 800bc78:	f1b8 0f00 	cmp.w	r8, #0
 800bc7c:	d005      	beq.n	800bc8a <_dtoa_r+0x96a>
 800bc7e:	45b8      	cmp	r8, r7
 800bc80:	d003      	beq.n	800bc8a <_dtoa_r+0x96a>
 800bc82:	4641      	mov	r1, r8
 800bc84:	4620      	mov	r0, r4
 800bc86:	f000 fd07 	bl	800c698 <_Bfree>
 800bc8a:	4639      	mov	r1, r7
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	f000 fd03 	bl	800c698 <_Bfree>
 800bc92:	e695      	b.n	800b9c0 <_dtoa_r+0x6a0>
 800bc94:	2600      	movs	r6, #0
 800bc96:	4637      	mov	r7, r6
 800bc98:	e7e1      	b.n	800bc5e <_dtoa_r+0x93e>
 800bc9a:	9700      	str	r7, [sp, #0]
 800bc9c:	4637      	mov	r7, r6
 800bc9e:	e599      	b.n	800b7d4 <_dtoa_r+0x4b4>
 800bca0:	40240000 	.word	0x40240000
 800bca4:	9b08      	ldr	r3, [sp, #32]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f000 80ca 	beq.w	800be40 <_dtoa_r+0xb20>
 800bcac:	9b03      	ldr	r3, [sp, #12]
 800bcae:	9302      	str	r3, [sp, #8]
 800bcb0:	2d00      	cmp	r5, #0
 800bcb2:	dd05      	ble.n	800bcc0 <_dtoa_r+0x9a0>
 800bcb4:	4639      	mov	r1, r7
 800bcb6:	462a      	mov	r2, r5
 800bcb8:	4620      	mov	r0, r4
 800bcba:	f000 ff09 	bl	800cad0 <__lshift>
 800bcbe:	4607      	mov	r7, r0
 800bcc0:	f1b8 0f00 	cmp.w	r8, #0
 800bcc4:	d05b      	beq.n	800bd7e <_dtoa_r+0xa5e>
 800bcc6:	6879      	ldr	r1, [r7, #4]
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f000 fca5 	bl	800c618 <_Balloc>
 800bcce:	4605      	mov	r5, r0
 800bcd0:	b928      	cbnz	r0, 800bcde <_dtoa_r+0x9be>
 800bcd2:	4b87      	ldr	r3, [pc, #540]	; (800bef0 <_dtoa_r+0xbd0>)
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bcda:	f7ff bb3b 	b.w	800b354 <_dtoa_r+0x34>
 800bcde:	693a      	ldr	r2, [r7, #16]
 800bce0:	3202      	adds	r2, #2
 800bce2:	0092      	lsls	r2, r2, #2
 800bce4:	f107 010c 	add.w	r1, r7, #12
 800bce8:	300c      	adds	r0, #12
 800bcea:	f7fd fd29 	bl	8009740 <memcpy>
 800bcee:	2201      	movs	r2, #1
 800bcf0:	4629      	mov	r1, r5
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f000 feec 	bl	800cad0 <__lshift>
 800bcf8:	9b01      	ldr	r3, [sp, #4]
 800bcfa:	f103 0901 	add.w	r9, r3, #1
 800bcfe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bd02:	4413      	add	r3, r2
 800bd04:	9305      	str	r3, [sp, #20]
 800bd06:	f00a 0301 	and.w	r3, sl, #1
 800bd0a:	46b8      	mov	r8, r7
 800bd0c:	9304      	str	r3, [sp, #16]
 800bd0e:	4607      	mov	r7, r0
 800bd10:	4631      	mov	r1, r6
 800bd12:	ee18 0a10 	vmov	r0, s16
 800bd16:	f7ff fa77 	bl	800b208 <quorem>
 800bd1a:	4641      	mov	r1, r8
 800bd1c:	9002      	str	r0, [sp, #8]
 800bd1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bd22:	ee18 0a10 	vmov	r0, s16
 800bd26:	f000 ff43 	bl	800cbb0 <__mcmp>
 800bd2a:	463a      	mov	r2, r7
 800bd2c:	9003      	str	r0, [sp, #12]
 800bd2e:	4631      	mov	r1, r6
 800bd30:	4620      	mov	r0, r4
 800bd32:	f000 ff59 	bl	800cbe8 <__mdiff>
 800bd36:	68c2      	ldr	r2, [r0, #12]
 800bd38:	f109 3bff 	add.w	fp, r9, #4294967295
 800bd3c:	4605      	mov	r5, r0
 800bd3e:	bb02      	cbnz	r2, 800bd82 <_dtoa_r+0xa62>
 800bd40:	4601      	mov	r1, r0
 800bd42:	ee18 0a10 	vmov	r0, s16
 800bd46:	f000 ff33 	bl	800cbb0 <__mcmp>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	4629      	mov	r1, r5
 800bd4e:	4620      	mov	r0, r4
 800bd50:	9207      	str	r2, [sp, #28]
 800bd52:	f000 fca1 	bl	800c698 <_Bfree>
 800bd56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bd5a:	ea43 0102 	orr.w	r1, r3, r2
 800bd5e:	9b04      	ldr	r3, [sp, #16]
 800bd60:	430b      	orrs	r3, r1
 800bd62:	464d      	mov	r5, r9
 800bd64:	d10f      	bne.n	800bd86 <_dtoa_r+0xa66>
 800bd66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd6a:	d02a      	beq.n	800bdc2 <_dtoa_r+0xaa2>
 800bd6c:	9b03      	ldr	r3, [sp, #12]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	dd02      	ble.n	800bd78 <_dtoa_r+0xa58>
 800bd72:	9b02      	ldr	r3, [sp, #8]
 800bd74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bd78:	f88b a000 	strb.w	sl, [fp]
 800bd7c:	e775      	b.n	800bc6a <_dtoa_r+0x94a>
 800bd7e:	4638      	mov	r0, r7
 800bd80:	e7ba      	b.n	800bcf8 <_dtoa_r+0x9d8>
 800bd82:	2201      	movs	r2, #1
 800bd84:	e7e2      	b.n	800bd4c <_dtoa_r+0xa2c>
 800bd86:	9b03      	ldr	r3, [sp, #12]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	db04      	blt.n	800bd96 <_dtoa_r+0xa76>
 800bd8c:	9906      	ldr	r1, [sp, #24]
 800bd8e:	430b      	orrs	r3, r1
 800bd90:	9904      	ldr	r1, [sp, #16]
 800bd92:	430b      	orrs	r3, r1
 800bd94:	d122      	bne.n	800bddc <_dtoa_r+0xabc>
 800bd96:	2a00      	cmp	r2, #0
 800bd98:	ddee      	ble.n	800bd78 <_dtoa_r+0xa58>
 800bd9a:	ee18 1a10 	vmov	r1, s16
 800bd9e:	2201      	movs	r2, #1
 800bda0:	4620      	mov	r0, r4
 800bda2:	f000 fe95 	bl	800cad0 <__lshift>
 800bda6:	4631      	mov	r1, r6
 800bda8:	ee08 0a10 	vmov	s16, r0
 800bdac:	f000 ff00 	bl	800cbb0 <__mcmp>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	dc03      	bgt.n	800bdbc <_dtoa_r+0xa9c>
 800bdb4:	d1e0      	bne.n	800bd78 <_dtoa_r+0xa58>
 800bdb6:	f01a 0f01 	tst.w	sl, #1
 800bdba:	d0dd      	beq.n	800bd78 <_dtoa_r+0xa58>
 800bdbc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bdc0:	d1d7      	bne.n	800bd72 <_dtoa_r+0xa52>
 800bdc2:	2339      	movs	r3, #57	; 0x39
 800bdc4:	f88b 3000 	strb.w	r3, [fp]
 800bdc8:	462b      	mov	r3, r5
 800bdca:	461d      	mov	r5, r3
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bdd2:	2a39      	cmp	r2, #57	; 0x39
 800bdd4:	d071      	beq.n	800beba <_dtoa_r+0xb9a>
 800bdd6:	3201      	adds	r2, #1
 800bdd8:	701a      	strb	r2, [r3, #0]
 800bdda:	e746      	b.n	800bc6a <_dtoa_r+0x94a>
 800bddc:	2a00      	cmp	r2, #0
 800bdde:	dd07      	ble.n	800bdf0 <_dtoa_r+0xad0>
 800bde0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bde4:	d0ed      	beq.n	800bdc2 <_dtoa_r+0xaa2>
 800bde6:	f10a 0301 	add.w	r3, sl, #1
 800bdea:	f88b 3000 	strb.w	r3, [fp]
 800bdee:	e73c      	b.n	800bc6a <_dtoa_r+0x94a>
 800bdf0:	9b05      	ldr	r3, [sp, #20]
 800bdf2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bdf6:	4599      	cmp	r9, r3
 800bdf8:	d047      	beq.n	800be8a <_dtoa_r+0xb6a>
 800bdfa:	ee18 1a10 	vmov	r1, s16
 800bdfe:	2300      	movs	r3, #0
 800be00:	220a      	movs	r2, #10
 800be02:	4620      	mov	r0, r4
 800be04:	f000 fc6a 	bl	800c6dc <__multadd>
 800be08:	45b8      	cmp	r8, r7
 800be0a:	ee08 0a10 	vmov	s16, r0
 800be0e:	f04f 0300 	mov.w	r3, #0
 800be12:	f04f 020a 	mov.w	r2, #10
 800be16:	4641      	mov	r1, r8
 800be18:	4620      	mov	r0, r4
 800be1a:	d106      	bne.n	800be2a <_dtoa_r+0xb0a>
 800be1c:	f000 fc5e 	bl	800c6dc <__multadd>
 800be20:	4680      	mov	r8, r0
 800be22:	4607      	mov	r7, r0
 800be24:	f109 0901 	add.w	r9, r9, #1
 800be28:	e772      	b.n	800bd10 <_dtoa_r+0x9f0>
 800be2a:	f000 fc57 	bl	800c6dc <__multadd>
 800be2e:	4639      	mov	r1, r7
 800be30:	4680      	mov	r8, r0
 800be32:	2300      	movs	r3, #0
 800be34:	220a      	movs	r2, #10
 800be36:	4620      	mov	r0, r4
 800be38:	f000 fc50 	bl	800c6dc <__multadd>
 800be3c:	4607      	mov	r7, r0
 800be3e:	e7f1      	b.n	800be24 <_dtoa_r+0xb04>
 800be40:	9b03      	ldr	r3, [sp, #12]
 800be42:	9302      	str	r3, [sp, #8]
 800be44:	9d01      	ldr	r5, [sp, #4]
 800be46:	ee18 0a10 	vmov	r0, s16
 800be4a:	4631      	mov	r1, r6
 800be4c:	f7ff f9dc 	bl	800b208 <quorem>
 800be50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800be54:	9b01      	ldr	r3, [sp, #4]
 800be56:	f805 ab01 	strb.w	sl, [r5], #1
 800be5a:	1aea      	subs	r2, r5, r3
 800be5c:	9b02      	ldr	r3, [sp, #8]
 800be5e:	4293      	cmp	r3, r2
 800be60:	dd09      	ble.n	800be76 <_dtoa_r+0xb56>
 800be62:	ee18 1a10 	vmov	r1, s16
 800be66:	2300      	movs	r3, #0
 800be68:	220a      	movs	r2, #10
 800be6a:	4620      	mov	r0, r4
 800be6c:	f000 fc36 	bl	800c6dc <__multadd>
 800be70:	ee08 0a10 	vmov	s16, r0
 800be74:	e7e7      	b.n	800be46 <_dtoa_r+0xb26>
 800be76:	9b02      	ldr	r3, [sp, #8]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	bfc8      	it	gt
 800be7c:	461d      	movgt	r5, r3
 800be7e:	9b01      	ldr	r3, [sp, #4]
 800be80:	bfd8      	it	le
 800be82:	2501      	movle	r5, #1
 800be84:	441d      	add	r5, r3
 800be86:	f04f 0800 	mov.w	r8, #0
 800be8a:	ee18 1a10 	vmov	r1, s16
 800be8e:	2201      	movs	r2, #1
 800be90:	4620      	mov	r0, r4
 800be92:	f000 fe1d 	bl	800cad0 <__lshift>
 800be96:	4631      	mov	r1, r6
 800be98:	ee08 0a10 	vmov	s16, r0
 800be9c:	f000 fe88 	bl	800cbb0 <__mcmp>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	dc91      	bgt.n	800bdc8 <_dtoa_r+0xaa8>
 800bea4:	d102      	bne.n	800beac <_dtoa_r+0xb8c>
 800bea6:	f01a 0f01 	tst.w	sl, #1
 800beaa:	d18d      	bne.n	800bdc8 <_dtoa_r+0xaa8>
 800beac:	462b      	mov	r3, r5
 800beae:	461d      	mov	r5, r3
 800beb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800beb4:	2a30      	cmp	r2, #48	; 0x30
 800beb6:	d0fa      	beq.n	800beae <_dtoa_r+0xb8e>
 800beb8:	e6d7      	b.n	800bc6a <_dtoa_r+0x94a>
 800beba:	9a01      	ldr	r2, [sp, #4]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d184      	bne.n	800bdca <_dtoa_r+0xaaa>
 800bec0:	9b00      	ldr	r3, [sp, #0]
 800bec2:	3301      	adds	r3, #1
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	2331      	movs	r3, #49	; 0x31
 800bec8:	7013      	strb	r3, [r2, #0]
 800beca:	e6ce      	b.n	800bc6a <_dtoa_r+0x94a>
 800becc:	4b09      	ldr	r3, [pc, #36]	; (800bef4 <_dtoa_r+0xbd4>)
 800bece:	f7ff ba95 	b.w	800b3fc <_dtoa_r+0xdc>
 800bed2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f47f aa6e 	bne.w	800b3b6 <_dtoa_r+0x96>
 800beda:	4b07      	ldr	r3, [pc, #28]	; (800bef8 <_dtoa_r+0xbd8>)
 800bedc:	f7ff ba8e 	b.w	800b3fc <_dtoa_r+0xdc>
 800bee0:	9b02      	ldr	r3, [sp, #8]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	dcae      	bgt.n	800be44 <_dtoa_r+0xb24>
 800bee6:	9b06      	ldr	r3, [sp, #24]
 800bee8:	2b02      	cmp	r3, #2
 800beea:	f73f aea8 	bgt.w	800bc3e <_dtoa_r+0x91e>
 800beee:	e7a9      	b.n	800be44 <_dtoa_r+0xb24>
 800bef0:	0800e520 	.word	0x0800e520
 800bef4:	0800e320 	.word	0x0800e320
 800bef8:	0800e4a1 	.word	0x0800e4a1

0800befc <rshift>:
 800befc:	6903      	ldr	r3, [r0, #16]
 800befe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bf02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf06:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bf0a:	f100 0414 	add.w	r4, r0, #20
 800bf0e:	dd45      	ble.n	800bf9c <rshift+0xa0>
 800bf10:	f011 011f 	ands.w	r1, r1, #31
 800bf14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bf18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bf1c:	d10c      	bne.n	800bf38 <rshift+0x3c>
 800bf1e:	f100 0710 	add.w	r7, r0, #16
 800bf22:	4629      	mov	r1, r5
 800bf24:	42b1      	cmp	r1, r6
 800bf26:	d334      	bcc.n	800bf92 <rshift+0x96>
 800bf28:	1a9b      	subs	r3, r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	1eea      	subs	r2, r5, #3
 800bf2e:	4296      	cmp	r6, r2
 800bf30:	bf38      	it	cc
 800bf32:	2300      	movcc	r3, #0
 800bf34:	4423      	add	r3, r4
 800bf36:	e015      	b.n	800bf64 <rshift+0x68>
 800bf38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bf3c:	f1c1 0820 	rsb	r8, r1, #32
 800bf40:	40cf      	lsrs	r7, r1
 800bf42:	f105 0e04 	add.w	lr, r5, #4
 800bf46:	46a1      	mov	r9, r4
 800bf48:	4576      	cmp	r6, lr
 800bf4a:	46f4      	mov	ip, lr
 800bf4c:	d815      	bhi.n	800bf7a <rshift+0x7e>
 800bf4e:	1a9a      	subs	r2, r3, r2
 800bf50:	0092      	lsls	r2, r2, #2
 800bf52:	3a04      	subs	r2, #4
 800bf54:	3501      	adds	r5, #1
 800bf56:	42ae      	cmp	r6, r5
 800bf58:	bf38      	it	cc
 800bf5a:	2200      	movcc	r2, #0
 800bf5c:	18a3      	adds	r3, r4, r2
 800bf5e:	50a7      	str	r7, [r4, r2]
 800bf60:	b107      	cbz	r7, 800bf64 <rshift+0x68>
 800bf62:	3304      	adds	r3, #4
 800bf64:	1b1a      	subs	r2, r3, r4
 800bf66:	42a3      	cmp	r3, r4
 800bf68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bf6c:	bf08      	it	eq
 800bf6e:	2300      	moveq	r3, #0
 800bf70:	6102      	str	r2, [r0, #16]
 800bf72:	bf08      	it	eq
 800bf74:	6143      	streq	r3, [r0, #20]
 800bf76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf7a:	f8dc c000 	ldr.w	ip, [ip]
 800bf7e:	fa0c fc08 	lsl.w	ip, ip, r8
 800bf82:	ea4c 0707 	orr.w	r7, ip, r7
 800bf86:	f849 7b04 	str.w	r7, [r9], #4
 800bf8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf8e:	40cf      	lsrs	r7, r1
 800bf90:	e7da      	b.n	800bf48 <rshift+0x4c>
 800bf92:	f851 cb04 	ldr.w	ip, [r1], #4
 800bf96:	f847 cf04 	str.w	ip, [r7, #4]!
 800bf9a:	e7c3      	b.n	800bf24 <rshift+0x28>
 800bf9c:	4623      	mov	r3, r4
 800bf9e:	e7e1      	b.n	800bf64 <rshift+0x68>

0800bfa0 <__hexdig_fun>:
 800bfa0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bfa4:	2b09      	cmp	r3, #9
 800bfa6:	d802      	bhi.n	800bfae <__hexdig_fun+0xe>
 800bfa8:	3820      	subs	r0, #32
 800bfaa:	b2c0      	uxtb	r0, r0
 800bfac:	4770      	bx	lr
 800bfae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bfb2:	2b05      	cmp	r3, #5
 800bfb4:	d801      	bhi.n	800bfba <__hexdig_fun+0x1a>
 800bfb6:	3847      	subs	r0, #71	; 0x47
 800bfb8:	e7f7      	b.n	800bfaa <__hexdig_fun+0xa>
 800bfba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bfbe:	2b05      	cmp	r3, #5
 800bfc0:	d801      	bhi.n	800bfc6 <__hexdig_fun+0x26>
 800bfc2:	3827      	subs	r0, #39	; 0x27
 800bfc4:	e7f1      	b.n	800bfaa <__hexdig_fun+0xa>
 800bfc6:	2000      	movs	r0, #0
 800bfc8:	4770      	bx	lr
	...

0800bfcc <__gethex>:
 800bfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd0:	ed2d 8b02 	vpush	{d8}
 800bfd4:	b089      	sub	sp, #36	; 0x24
 800bfd6:	ee08 0a10 	vmov	s16, r0
 800bfda:	9304      	str	r3, [sp, #16]
 800bfdc:	4bb4      	ldr	r3, [pc, #720]	; (800c2b0 <__gethex+0x2e4>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	9301      	str	r3, [sp, #4]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	468b      	mov	fp, r1
 800bfe6:	4690      	mov	r8, r2
 800bfe8:	f7f4 f8fa 	bl	80001e0 <strlen>
 800bfec:	9b01      	ldr	r3, [sp, #4]
 800bfee:	f8db 2000 	ldr.w	r2, [fp]
 800bff2:	4403      	add	r3, r0
 800bff4:	4682      	mov	sl, r0
 800bff6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bffa:	9305      	str	r3, [sp, #20]
 800bffc:	1c93      	adds	r3, r2, #2
 800bffe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c002:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c006:	32fe      	adds	r2, #254	; 0xfe
 800c008:	18d1      	adds	r1, r2, r3
 800c00a:	461f      	mov	r7, r3
 800c00c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c010:	9100      	str	r1, [sp, #0]
 800c012:	2830      	cmp	r0, #48	; 0x30
 800c014:	d0f8      	beq.n	800c008 <__gethex+0x3c>
 800c016:	f7ff ffc3 	bl	800bfa0 <__hexdig_fun>
 800c01a:	4604      	mov	r4, r0
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d13a      	bne.n	800c096 <__gethex+0xca>
 800c020:	9901      	ldr	r1, [sp, #4]
 800c022:	4652      	mov	r2, sl
 800c024:	4638      	mov	r0, r7
 800c026:	f001 fa23 	bl	800d470 <strncmp>
 800c02a:	4605      	mov	r5, r0
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d168      	bne.n	800c102 <__gethex+0x136>
 800c030:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c034:	eb07 060a 	add.w	r6, r7, sl
 800c038:	f7ff ffb2 	bl	800bfa0 <__hexdig_fun>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d062      	beq.n	800c106 <__gethex+0x13a>
 800c040:	4633      	mov	r3, r6
 800c042:	7818      	ldrb	r0, [r3, #0]
 800c044:	2830      	cmp	r0, #48	; 0x30
 800c046:	461f      	mov	r7, r3
 800c048:	f103 0301 	add.w	r3, r3, #1
 800c04c:	d0f9      	beq.n	800c042 <__gethex+0x76>
 800c04e:	f7ff ffa7 	bl	800bfa0 <__hexdig_fun>
 800c052:	2301      	movs	r3, #1
 800c054:	fab0 f480 	clz	r4, r0
 800c058:	0964      	lsrs	r4, r4, #5
 800c05a:	4635      	mov	r5, r6
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	463a      	mov	r2, r7
 800c060:	4616      	mov	r6, r2
 800c062:	3201      	adds	r2, #1
 800c064:	7830      	ldrb	r0, [r6, #0]
 800c066:	f7ff ff9b 	bl	800bfa0 <__hexdig_fun>
 800c06a:	2800      	cmp	r0, #0
 800c06c:	d1f8      	bne.n	800c060 <__gethex+0x94>
 800c06e:	9901      	ldr	r1, [sp, #4]
 800c070:	4652      	mov	r2, sl
 800c072:	4630      	mov	r0, r6
 800c074:	f001 f9fc 	bl	800d470 <strncmp>
 800c078:	b980      	cbnz	r0, 800c09c <__gethex+0xd0>
 800c07a:	b94d      	cbnz	r5, 800c090 <__gethex+0xc4>
 800c07c:	eb06 050a 	add.w	r5, r6, sl
 800c080:	462a      	mov	r2, r5
 800c082:	4616      	mov	r6, r2
 800c084:	3201      	adds	r2, #1
 800c086:	7830      	ldrb	r0, [r6, #0]
 800c088:	f7ff ff8a 	bl	800bfa0 <__hexdig_fun>
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d1f8      	bne.n	800c082 <__gethex+0xb6>
 800c090:	1bad      	subs	r5, r5, r6
 800c092:	00ad      	lsls	r5, r5, #2
 800c094:	e004      	b.n	800c0a0 <__gethex+0xd4>
 800c096:	2400      	movs	r4, #0
 800c098:	4625      	mov	r5, r4
 800c09a:	e7e0      	b.n	800c05e <__gethex+0x92>
 800c09c:	2d00      	cmp	r5, #0
 800c09e:	d1f7      	bne.n	800c090 <__gethex+0xc4>
 800c0a0:	7833      	ldrb	r3, [r6, #0]
 800c0a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c0a6:	2b50      	cmp	r3, #80	; 0x50
 800c0a8:	d13b      	bne.n	800c122 <__gethex+0x156>
 800c0aa:	7873      	ldrb	r3, [r6, #1]
 800c0ac:	2b2b      	cmp	r3, #43	; 0x2b
 800c0ae:	d02c      	beq.n	800c10a <__gethex+0x13e>
 800c0b0:	2b2d      	cmp	r3, #45	; 0x2d
 800c0b2:	d02e      	beq.n	800c112 <__gethex+0x146>
 800c0b4:	1c71      	adds	r1, r6, #1
 800c0b6:	f04f 0900 	mov.w	r9, #0
 800c0ba:	7808      	ldrb	r0, [r1, #0]
 800c0bc:	f7ff ff70 	bl	800bfa0 <__hexdig_fun>
 800c0c0:	1e43      	subs	r3, r0, #1
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	2b18      	cmp	r3, #24
 800c0c6:	d82c      	bhi.n	800c122 <__gethex+0x156>
 800c0c8:	f1a0 0210 	sub.w	r2, r0, #16
 800c0cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c0d0:	f7ff ff66 	bl	800bfa0 <__hexdig_fun>
 800c0d4:	1e43      	subs	r3, r0, #1
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	2b18      	cmp	r3, #24
 800c0da:	d91d      	bls.n	800c118 <__gethex+0x14c>
 800c0dc:	f1b9 0f00 	cmp.w	r9, #0
 800c0e0:	d000      	beq.n	800c0e4 <__gethex+0x118>
 800c0e2:	4252      	negs	r2, r2
 800c0e4:	4415      	add	r5, r2
 800c0e6:	f8cb 1000 	str.w	r1, [fp]
 800c0ea:	b1e4      	cbz	r4, 800c126 <__gethex+0x15a>
 800c0ec:	9b00      	ldr	r3, [sp, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	bf14      	ite	ne
 800c0f2:	2700      	movne	r7, #0
 800c0f4:	2706      	moveq	r7, #6
 800c0f6:	4638      	mov	r0, r7
 800c0f8:	b009      	add	sp, #36	; 0x24
 800c0fa:	ecbd 8b02 	vpop	{d8}
 800c0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c102:	463e      	mov	r6, r7
 800c104:	4625      	mov	r5, r4
 800c106:	2401      	movs	r4, #1
 800c108:	e7ca      	b.n	800c0a0 <__gethex+0xd4>
 800c10a:	f04f 0900 	mov.w	r9, #0
 800c10e:	1cb1      	adds	r1, r6, #2
 800c110:	e7d3      	b.n	800c0ba <__gethex+0xee>
 800c112:	f04f 0901 	mov.w	r9, #1
 800c116:	e7fa      	b.n	800c10e <__gethex+0x142>
 800c118:	230a      	movs	r3, #10
 800c11a:	fb03 0202 	mla	r2, r3, r2, r0
 800c11e:	3a10      	subs	r2, #16
 800c120:	e7d4      	b.n	800c0cc <__gethex+0x100>
 800c122:	4631      	mov	r1, r6
 800c124:	e7df      	b.n	800c0e6 <__gethex+0x11a>
 800c126:	1bf3      	subs	r3, r6, r7
 800c128:	3b01      	subs	r3, #1
 800c12a:	4621      	mov	r1, r4
 800c12c:	2b07      	cmp	r3, #7
 800c12e:	dc0b      	bgt.n	800c148 <__gethex+0x17c>
 800c130:	ee18 0a10 	vmov	r0, s16
 800c134:	f000 fa70 	bl	800c618 <_Balloc>
 800c138:	4604      	mov	r4, r0
 800c13a:	b940      	cbnz	r0, 800c14e <__gethex+0x182>
 800c13c:	4b5d      	ldr	r3, [pc, #372]	; (800c2b4 <__gethex+0x2e8>)
 800c13e:	4602      	mov	r2, r0
 800c140:	21de      	movs	r1, #222	; 0xde
 800c142:	485d      	ldr	r0, [pc, #372]	; (800c2b8 <__gethex+0x2ec>)
 800c144:	f001 f9b6 	bl	800d4b4 <__assert_func>
 800c148:	3101      	adds	r1, #1
 800c14a:	105b      	asrs	r3, r3, #1
 800c14c:	e7ee      	b.n	800c12c <__gethex+0x160>
 800c14e:	f100 0914 	add.w	r9, r0, #20
 800c152:	f04f 0b00 	mov.w	fp, #0
 800c156:	f1ca 0301 	rsb	r3, sl, #1
 800c15a:	f8cd 9008 	str.w	r9, [sp, #8]
 800c15e:	f8cd b000 	str.w	fp, [sp]
 800c162:	9306      	str	r3, [sp, #24]
 800c164:	42b7      	cmp	r7, r6
 800c166:	d340      	bcc.n	800c1ea <__gethex+0x21e>
 800c168:	9802      	ldr	r0, [sp, #8]
 800c16a:	9b00      	ldr	r3, [sp, #0]
 800c16c:	f840 3b04 	str.w	r3, [r0], #4
 800c170:	eba0 0009 	sub.w	r0, r0, r9
 800c174:	1080      	asrs	r0, r0, #2
 800c176:	0146      	lsls	r6, r0, #5
 800c178:	6120      	str	r0, [r4, #16]
 800c17a:	4618      	mov	r0, r3
 800c17c:	f000 fb3e 	bl	800c7fc <__hi0bits>
 800c180:	1a30      	subs	r0, r6, r0
 800c182:	f8d8 6000 	ldr.w	r6, [r8]
 800c186:	42b0      	cmp	r0, r6
 800c188:	dd63      	ble.n	800c252 <__gethex+0x286>
 800c18a:	1b87      	subs	r7, r0, r6
 800c18c:	4639      	mov	r1, r7
 800c18e:	4620      	mov	r0, r4
 800c190:	f000 fee2 	bl	800cf58 <__any_on>
 800c194:	4682      	mov	sl, r0
 800c196:	b1a8      	cbz	r0, 800c1c4 <__gethex+0x1f8>
 800c198:	1e7b      	subs	r3, r7, #1
 800c19a:	1159      	asrs	r1, r3, #5
 800c19c:	f003 021f 	and.w	r2, r3, #31
 800c1a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c1a4:	f04f 0a01 	mov.w	sl, #1
 800c1a8:	fa0a f202 	lsl.w	r2, sl, r2
 800c1ac:	420a      	tst	r2, r1
 800c1ae:	d009      	beq.n	800c1c4 <__gethex+0x1f8>
 800c1b0:	4553      	cmp	r3, sl
 800c1b2:	dd05      	ble.n	800c1c0 <__gethex+0x1f4>
 800c1b4:	1eb9      	subs	r1, r7, #2
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	f000 fece 	bl	800cf58 <__any_on>
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	d145      	bne.n	800c24c <__gethex+0x280>
 800c1c0:	f04f 0a02 	mov.w	sl, #2
 800c1c4:	4639      	mov	r1, r7
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f7ff fe98 	bl	800befc <rshift>
 800c1cc:	443d      	add	r5, r7
 800c1ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1d2:	42ab      	cmp	r3, r5
 800c1d4:	da4c      	bge.n	800c270 <__gethex+0x2a4>
 800c1d6:	ee18 0a10 	vmov	r0, s16
 800c1da:	4621      	mov	r1, r4
 800c1dc:	f000 fa5c 	bl	800c698 <_Bfree>
 800c1e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	6013      	str	r3, [r2, #0]
 800c1e6:	27a3      	movs	r7, #163	; 0xa3
 800c1e8:	e785      	b.n	800c0f6 <__gethex+0x12a>
 800c1ea:	1e73      	subs	r3, r6, #1
 800c1ec:	9a05      	ldr	r2, [sp, #20]
 800c1ee:	9303      	str	r3, [sp, #12]
 800c1f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d019      	beq.n	800c22c <__gethex+0x260>
 800c1f8:	f1bb 0f20 	cmp.w	fp, #32
 800c1fc:	d107      	bne.n	800c20e <__gethex+0x242>
 800c1fe:	9b02      	ldr	r3, [sp, #8]
 800c200:	9a00      	ldr	r2, [sp, #0]
 800c202:	f843 2b04 	str.w	r2, [r3], #4
 800c206:	9302      	str	r3, [sp, #8]
 800c208:	2300      	movs	r3, #0
 800c20a:	9300      	str	r3, [sp, #0]
 800c20c:	469b      	mov	fp, r3
 800c20e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c212:	f7ff fec5 	bl	800bfa0 <__hexdig_fun>
 800c216:	9b00      	ldr	r3, [sp, #0]
 800c218:	f000 000f 	and.w	r0, r0, #15
 800c21c:	fa00 f00b 	lsl.w	r0, r0, fp
 800c220:	4303      	orrs	r3, r0
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	f10b 0b04 	add.w	fp, fp, #4
 800c228:	9b03      	ldr	r3, [sp, #12]
 800c22a:	e00d      	b.n	800c248 <__gethex+0x27c>
 800c22c:	9b03      	ldr	r3, [sp, #12]
 800c22e:	9a06      	ldr	r2, [sp, #24]
 800c230:	4413      	add	r3, r2
 800c232:	42bb      	cmp	r3, r7
 800c234:	d3e0      	bcc.n	800c1f8 <__gethex+0x22c>
 800c236:	4618      	mov	r0, r3
 800c238:	9901      	ldr	r1, [sp, #4]
 800c23a:	9307      	str	r3, [sp, #28]
 800c23c:	4652      	mov	r2, sl
 800c23e:	f001 f917 	bl	800d470 <strncmp>
 800c242:	9b07      	ldr	r3, [sp, #28]
 800c244:	2800      	cmp	r0, #0
 800c246:	d1d7      	bne.n	800c1f8 <__gethex+0x22c>
 800c248:	461e      	mov	r6, r3
 800c24a:	e78b      	b.n	800c164 <__gethex+0x198>
 800c24c:	f04f 0a03 	mov.w	sl, #3
 800c250:	e7b8      	b.n	800c1c4 <__gethex+0x1f8>
 800c252:	da0a      	bge.n	800c26a <__gethex+0x29e>
 800c254:	1a37      	subs	r7, r6, r0
 800c256:	4621      	mov	r1, r4
 800c258:	ee18 0a10 	vmov	r0, s16
 800c25c:	463a      	mov	r2, r7
 800c25e:	f000 fc37 	bl	800cad0 <__lshift>
 800c262:	1bed      	subs	r5, r5, r7
 800c264:	4604      	mov	r4, r0
 800c266:	f100 0914 	add.w	r9, r0, #20
 800c26a:	f04f 0a00 	mov.w	sl, #0
 800c26e:	e7ae      	b.n	800c1ce <__gethex+0x202>
 800c270:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c274:	42a8      	cmp	r0, r5
 800c276:	dd72      	ble.n	800c35e <__gethex+0x392>
 800c278:	1b45      	subs	r5, r0, r5
 800c27a:	42ae      	cmp	r6, r5
 800c27c:	dc36      	bgt.n	800c2ec <__gethex+0x320>
 800c27e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c282:	2b02      	cmp	r3, #2
 800c284:	d02a      	beq.n	800c2dc <__gethex+0x310>
 800c286:	2b03      	cmp	r3, #3
 800c288:	d02c      	beq.n	800c2e4 <__gethex+0x318>
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d11c      	bne.n	800c2c8 <__gethex+0x2fc>
 800c28e:	42ae      	cmp	r6, r5
 800c290:	d11a      	bne.n	800c2c8 <__gethex+0x2fc>
 800c292:	2e01      	cmp	r6, #1
 800c294:	d112      	bne.n	800c2bc <__gethex+0x2f0>
 800c296:	9a04      	ldr	r2, [sp, #16]
 800c298:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c29c:	6013      	str	r3, [r2, #0]
 800c29e:	2301      	movs	r3, #1
 800c2a0:	6123      	str	r3, [r4, #16]
 800c2a2:	f8c9 3000 	str.w	r3, [r9]
 800c2a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c2a8:	2762      	movs	r7, #98	; 0x62
 800c2aa:	601c      	str	r4, [r3, #0]
 800c2ac:	e723      	b.n	800c0f6 <__gethex+0x12a>
 800c2ae:	bf00      	nop
 800c2b0:	0800e598 	.word	0x0800e598
 800c2b4:	0800e520 	.word	0x0800e520
 800c2b8:	0800e531 	.word	0x0800e531
 800c2bc:	1e71      	subs	r1, r6, #1
 800c2be:	4620      	mov	r0, r4
 800c2c0:	f000 fe4a 	bl	800cf58 <__any_on>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d1e6      	bne.n	800c296 <__gethex+0x2ca>
 800c2c8:	ee18 0a10 	vmov	r0, s16
 800c2cc:	4621      	mov	r1, r4
 800c2ce:	f000 f9e3 	bl	800c698 <_Bfree>
 800c2d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	6013      	str	r3, [r2, #0]
 800c2d8:	2750      	movs	r7, #80	; 0x50
 800c2da:	e70c      	b.n	800c0f6 <__gethex+0x12a>
 800c2dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1f2      	bne.n	800c2c8 <__gethex+0x2fc>
 800c2e2:	e7d8      	b.n	800c296 <__gethex+0x2ca>
 800c2e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1d5      	bne.n	800c296 <__gethex+0x2ca>
 800c2ea:	e7ed      	b.n	800c2c8 <__gethex+0x2fc>
 800c2ec:	1e6f      	subs	r7, r5, #1
 800c2ee:	f1ba 0f00 	cmp.w	sl, #0
 800c2f2:	d131      	bne.n	800c358 <__gethex+0x38c>
 800c2f4:	b127      	cbz	r7, 800c300 <__gethex+0x334>
 800c2f6:	4639      	mov	r1, r7
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	f000 fe2d 	bl	800cf58 <__any_on>
 800c2fe:	4682      	mov	sl, r0
 800c300:	117b      	asrs	r3, r7, #5
 800c302:	2101      	movs	r1, #1
 800c304:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c308:	f007 071f 	and.w	r7, r7, #31
 800c30c:	fa01 f707 	lsl.w	r7, r1, r7
 800c310:	421f      	tst	r7, r3
 800c312:	4629      	mov	r1, r5
 800c314:	4620      	mov	r0, r4
 800c316:	bf18      	it	ne
 800c318:	f04a 0a02 	orrne.w	sl, sl, #2
 800c31c:	1b76      	subs	r6, r6, r5
 800c31e:	f7ff fded 	bl	800befc <rshift>
 800c322:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c326:	2702      	movs	r7, #2
 800c328:	f1ba 0f00 	cmp.w	sl, #0
 800c32c:	d048      	beq.n	800c3c0 <__gethex+0x3f4>
 800c32e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c332:	2b02      	cmp	r3, #2
 800c334:	d015      	beq.n	800c362 <__gethex+0x396>
 800c336:	2b03      	cmp	r3, #3
 800c338:	d017      	beq.n	800c36a <__gethex+0x39e>
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d109      	bne.n	800c352 <__gethex+0x386>
 800c33e:	f01a 0f02 	tst.w	sl, #2
 800c342:	d006      	beq.n	800c352 <__gethex+0x386>
 800c344:	f8d9 0000 	ldr.w	r0, [r9]
 800c348:	ea4a 0a00 	orr.w	sl, sl, r0
 800c34c:	f01a 0f01 	tst.w	sl, #1
 800c350:	d10e      	bne.n	800c370 <__gethex+0x3a4>
 800c352:	f047 0710 	orr.w	r7, r7, #16
 800c356:	e033      	b.n	800c3c0 <__gethex+0x3f4>
 800c358:	f04f 0a01 	mov.w	sl, #1
 800c35c:	e7d0      	b.n	800c300 <__gethex+0x334>
 800c35e:	2701      	movs	r7, #1
 800c360:	e7e2      	b.n	800c328 <__gethex+0x35c>
 800c362:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c364:	f1c3 0301 	rsb	r3, r3, #1
 800c368:	9315      	str	r3, [sp, #84]	; 0x54
 800c36a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d0f0      	beq.n	800c352 <__gethex+0x386>
 800c370:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c374:	f104 0314 	add.w	r3, r4, #20
 800c378:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c37c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c380:	f04f 0c00 	mov.w	ip, #0
 800c384:	4618      	mov	r0, r3
 800c386:	f853 2b04 	ldr.w	r2, [r3], #4
 800c38a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c38e:	d01c      	beq.n	800c3ca <__gethex+0x3fe>
 800c390:	3201      	adds	r2, #1
 800c392:	6002      	str	r2, [r0, #0]
 800c394:	2f02      	cmp	r7, #2
 800c396:	f104 0314 	add.w	r3, r4, #20
 800c39a:	d13f      	bne.n	800c41c <__gethex+0x450>
 800c39c:	f8d8 2000 	ldr.w	r2, [r8]
 800c3a0:	3a01      	subs	r2, #1
 800c3a2:	42b2      	cmp	r2, r6
 800c3a4:	d10a      	bne.n	800c3bc <__gethex+0x3f0>
 800c3a6:	1171      	asrs	r1, r6, #5
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c3ae:	f006 061f 	and.w	r6, r6, #31
 800c3b2:	fa02 f606 	lsl.w	r6, r2, r6
 800c3b6:	421e      	tst	r6, r3
 800c3b8:	bf18      	it	ne
 800c3ba:	4617      	movne	r7, r2
 800c3bc:	f047 0720 	orr.w	r7, r7, #32
 800c3c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c3c2:	601c      	str	r4, [r3, #0]
 800c3c4:	9b04      	ldr	r3, [sp, #16]
 800c3c6:	601d      	str	r5, [r3, #0]
 800c3c8:	e695      	b.n	800c0f6 <__gethex+0x12a>
 800c3ca:	4299      	cmp	r1, r3
 800c3cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c3d0:	d8d8      	bhi.n	800c384 <__gethex+0x3b8>
 800c3d2:	68a3      	ldr	r3, [r4, #8]
 800c3d4:	459b      	cmp	fp, r3
 800c3d6:	db19      	blt.n	800c40c <__gethex+0x440>
 800c3d8:	6861      	ldr	r1, [r4, #4]
 800c3da:	ee18 0a10 	vmov	r0, s16
 800c3de:	3101      	adds	r1, #1
 800c3e0:	f000 f91a 	bl	800c618 <_Balloc>
 800c3e4:	4681      	mov	r9, r0
 800c3e6:	b918      	cbnz	r0, 800c3f0 <__gethex+0x424>
 800c3e8:	4b1a      	ldr	r3, [pc, #104]	; (800c454 <__gethex+0x488>)
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	2184      	movs	r1, #132	; 0x84
 800c3ee:	e6a8      	b.n	800c142 <__gethex+0x176>
 800c3f0:	6922      	ldr	r2, [r4, #16]
 800c3f2:	3202      	adds	r2, #2
 800c3f4:	f104 010c 	add.w	r1, r4, #12
 800c3f8:	0092      	lsls	r2, r2, #2
 800c3fa:	300c      	adds	r0, #12
 800c3fc:	f7fd f9a0 	bl	8009740 <memcpy>
 800c400:	4621      	mov	r1, r4
 800c402:	ee18 0a10 	vmov	r0, s16
 800c406:	f000 f947 	bl	800c698 <_Bfree>
 800c40a:	464c      	mov	r4, r9
 800c40c:	6923      	ldr	r3, [r4, #16]
 800c40e:	1c5a      	adds	r2, r3, #1
 800c410:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c414:	6122      	str	r2, [r4, #16]
 800c416:	2201      	movs	r2, #1
 800c418:	615a      	str	r2, [r3, #20]
 800c41a:	e7bb      	b.n	800c394 <__gethex+0x3c8>
 800c41c:	6922      	ldr	r2, [r4, #16]
 800c41e:	455a      	cmp	r2, fp
 800c420:	dd0b      	ble.n	800c43a <__gethex+0x46e>
 800c422:	2101      	movs	r1, #1
 800c424:	4620      	mov	r0, r4
 800c426:	f7ff fd69 	bl	800befc <rshift>
 800c42a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c42e:	3501      	adds	r5, #1
 800c430:	42ab      	cmp	r3, r5
 800c432:	f6ff aed0 	blt.w	800c1d6 <__gethex+0x20a>
 800c436:	2701      	movs	r7, #1
 800c438:	e7c0      	b.n	800c3bc <__gethex+0x3f0>
 800c43a:	f016 061f 	ands.w	r6, r6, #31
 800c43e:	d0fa      	beq.n	800c436 <__gethex+0x46a>
 800c440:	4453      	add	r3, sl
 800c442:	f1c6 0620 	rsb	r6, r6, #32
 800c446:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c44a:	f000 f9d7 	bl	800c7fc <__hi0bits>
 800c44e:	42b0      	cmp	r0, r6
 800c450:	dbe7      	blt.n	800c422 <__gethex+0x456>
 800c452:	e7f0      	b.n	800c436 <__gethex+0x46a>
 800c454:	0800e520 	.word	0x0800e520

0800c458 <L_shift>:
 800c458:	f1c2 0208 	rsb	r2, r2, #8
 800c45c:	0092      	lsls	r2, r2, #2
 800c45e:	b570      	push	{r4, r5, r6, lr}
 800c460:	f1c2 0620 	rsb	r6, r2, #32
 800c464:	6843      	ldr	r3, [r0, #4]
 800c466:	6804      	ldr	r4, [r0, #0]
 800c468:	fa03 f506 	lsl.w	r5, r3, r6
 800c46c:	432c      	orrs	r4, r5
 800c46e:	40d3      	lsrs	r3, r2
 800c470:	6004      	str	r4, [r0, #0]
 800c472:	f840 3f04 	str.w	r3, [r0, #4]!
 800c476:	4288      	cmp	r0, r1
 800c478:	d3f4      	bcc.n	800c464 <L_shift+0xc>
 800c47a:	bd70      	pop	{r4, r5, r6, pc}

0800c47c <__match>:
 800c47c:	b530      	push	{r4, r5, lr}
 800c47e:	6803      	ldr	r3, [r0, #0]
 800c480:	3301      	adds	r3, #1
 800c482:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c486:	b914      	cbnz	r4, 800c48e <__match+0x12>
 800c488:	6003      	str	r3, [r0, #0]
 800c48a:	2001      	movs	r0, #1
 800c48c:	bd30      	pop	{r4, r5, pc}
 800c48e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c492:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c496:	2d19      	cmp	r5, #25
 800c498:	bf98      	it	ls
 800c49a:	3220      	addls	r2, #32
 800c49c:	42a2      	cmp	r2, r4
 800c49e:	d0f0      	beq.n	800c482 <__match+0x6>
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	e7f3      	b.n	800c48c <__match+0x10>

0800c4a4 <__hexnan>:
 800c4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a8:	680b      	ldr	r3, [r1, #0]
 800c4aa:	115e      	asrs	r6, r3, #5
 800c4ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c4b0:	f013 031f 	ands.w	r3, r3, #31
 800c4b4:	b087      	sub	sp, #28
 800c4b6:	bf18      	it	ne
 800c4b8:	3604      	addne	r6, #4
 800c4ba:	2500      	movs	r5, #0
 800c4bc:	1f37      	subs	r7, r6, #4
 800c4be:	4690      	mov	r8, r2
 800c4c0:	6802      	ldr	r2, [r0, #0]
 800c4c2:	9301      	str	r3, [sp, #4]
 800c4c4:	4682      	mov	sl, r0
 800c4c6:	f846 5c04 	str.w	r5, [r6, #-4]
 800c4ca:	46b9      	mov	r9, r7
 800c4cc:	463c      	mov	r4, r7
 800c4ce:	9502      	str	r5, [sp, #8]
 800c4d0:	46ab      	mov	fp, r5
 800c4d2:	7851      	ldrb	r1, [r2, #1]
 800c4d4:	1c53      	adds	r3, r2, #1
 800c4d6:	9303      	str	r3, [sp, #12]
 800c4d8:	b341      	cbz	r1, 800c52c <__hexnan+0x88>
 800c4da:	4608      	mov	r0, r1
 800c4dc:	9205      	str	r2, [sp, #20]
 800c4de:	9104      	str	r1, [sp, #16]
 800c4e0:	f7ff fd5e 	bl	800bfa0 <__hexdig_fun>
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	d14f      	bne.n	800c588 <__hexnan+0xe4>
 800c4e8:	9904      	ldr	r1, [sp, #16]
 800c4ea:	9a05      	ldr	r2, [sp, #20]
 800c4ec:	2920      	cmp	r1, #32
 800c4ee:	d818      	bhi.n	800c522 <__hexnan+0x7e>
 800c4f0:	9b02      	ldr	r3, [sp, #8]
 800c4f2:	459b      	cmp	fp, r3
 800c4f4:	dd13      	ble.n	800c51e <__hexnan+0x7a>
 800c4f6:	454c      	cmp	r4, r9
 800c4f8:	d206      	bcs.n	800c508 <__hexnan+0x64>
 800c4fa:	2d07      	cmp	r5, #7
 800c4fc:	dc04      	bgt.n	800c508 <__hexnan+0x64>
 800c4fe:	462a      	mov	r2, r5
 800c500:	4649      	mov	r1, r9
 800c502:	4620      	mov	r0, r4
 800c504:	f7ff ffa8 	bl	800c458 <L_shift>
 800c508:	4544      	cmp	r4, r8
 800c50a:	d950      	bls.n	800c5ae <__hexnan+0x10a>
 800c50c:	2300      	movs	r3, #0
 800c50e:	f1a4 0904 	sub.w	r9, r4, #4
 800c512:	f844 3c04 	str.w	r3, [r4, #-4]
 800c516:	f8cd b008 	str.w	fp, [sp, #8]
 800c51a:	464c      	mov	r4, r9
 800c51c:	461d      	mov	r5, r3
 800c51e:	9a03      	ldr	r2, [sp, #12]
 800c520:	e7d7      	b.n	800c4d2 <__hexnan+0x2e>
 800c522:	2929      	cmp	r1, #41	; 0x29
 800c524:	d156      	bne.n	800c5d4 <__hexnan+0x130>
 800c526:	3202      	adds	r2, #2
 800c528:	f8ca 2000 	str.w	r2, [sl]
 800c52c:	f1bb 0f00 	cmp.w	fp, #0
 800c530:	d050      	beq.n	800c5d4 <__hexnan+0x130>
 800c532:	454c      	cmp	r4, r9
 800c534:	d206      	bcs.n	800c544 <__hexnan+0xa0>
 800c536:	2d07      	cmp	r5, #7
 800c538:	dc04      	bgt.n	800c544 <__hexnan+0xa0>
 800c53a:	462a      	mov	r2, r5
 800c53c:	4649      	mov	r1, r9
 800c53e:	4620      	mov	r0, r4
 800c540:	f7ff ff8a 	bl	800c458 <L_shift>
 800c544:	4544      	cmp	r4, r8
 800c546:	d934      	bls.n	800c5b2 <__hexnan+0x10e>
 800c548:	f1a8 0204 	sub.w	r2, r8, #4
 800c54c:	4623      	mov	r3, r4
 800c54e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c552:	f842 1f04 	str.w	r1, [r2, #4]!
 800c556:	429f      	cmp	r7, r3
 800c558:	d2f9      	bcs.n	800c54e <__hexnan+0xaa>
 800c55a:	1b3b      	subs	r3, r7, r4
 800c55c:	f023 0303 	bic.w	r3, r3, #3
 800c560:	3304      	adds	r3, #4
 800c562:	3401      	adds	r4, #1
 800c564:	3e03      	subs	r6, #3
 800c566:	42b4      	cmp	r4, r6
 800c568:	bf88      	it	hi
 800c56a:	2304      	movhi	r3, #4
 800c56c:	4443      	add	r3, r8
 800c56e:	2200      	movs	r2, #0
 800c570:	f843 2b04 	str.w	r2, [r3], #4
 800c574:	429f      	cmp	r7, r3
 800c576:	d2fb      	bcs.n	800c570 <__hexnan+0xcc>
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	b91b      	cbnz	r3, 800c584 <__hexnan+0xe0>
 800c57c:	4547      	cmp	r7, r8
 800c57e:	d127      	bne.n	800c5d0 <__hexnan+0x12c>
 800c580:	2301      	movs	r3, #1
 800c582:	603b      	str	r3, [r7, #0]
 800c584:	2005      	movs	r0, #5
 800c586:	e026      	b.n	800c5d6 <__hexnan+0x132>
 800c588:	3501      	adds	r5, #1
 800c58a:	2d08      	cmp	r5, #8
 800c58c:	f10b 0b01 	add.w	fp, fp, #1
 800c590:	dd06      	ble.n	800c5a0 <__hexnan+0xfc>
 800c592:	4544      	cmp	r4, r8
 800c594:	d9c3      	bls.n	800c51e <__hexnan+0x7a>
 800c596:	2300      	movs	r3, #0
 800c598:	f844 3c04 	str.w	r3, [r4, #-4]
 800c59c:	2501      	movs	r5, #1
 800c59e:	3c04      	subs	r4, #4
 800c5a0:	6822      	ldr	r2, [r4, #0]
 800c5a2:	f000 000f 	and.w	r0, r0, #15
 800c5a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c5aa:	6022      	str	r2, [r4, #0]
 800c5ac:	e7b7      	b.n	800c51e <__hexnan+0x7a>
 800c5ae:	2508      	movs	r5, #8
 800c5b0:	e7b5      	b.n	800c51e <__hexnan+0x7a>
 800c5b2:	9b01      	ldr	r3, [sp, #4]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d0df      	beq.n	800c578 <__hexnan+0xd4>
 800c5b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c5bc:	f1c3 0320 	rsb	r3, r3, #32
 800c5c0:	fa22 f303 	lsr.w	r3, r2, r3
 800c5c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c5c8:	401a      	ands	r2, r3
 800c5ca:	f846 2c04 	str.w	r2, [r6, #-4]
 800c5ce:	e7d3      	b.n	800c578 <__hexnan+0xd4>
 800c5d0:	3f04      	subs	r7, #4
 800c5d2:	e7d1      	b.n	800c578 <__hexnan+0xd4>
 800c5d4:	2004      	movs	r0, #4
 800c5d6:	b007      	add	sp, #28
 800c5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5dc <_localeconv_r>:
 800c5dc:	4800      	ldr	r0, [pc, #0]	; (800c5e0 <_localeconv_r+0x4>)
 800c5de:	4770      	bx	lr
 800c5e0:	20000384 	.word	0x20000384

0800c5e4 <malloc>:
 800c5e4:	4b02      	ldr	r3, [pc, #8]	; (800c5f0 <malloc+0xc>)
 800c5e6:	4601      	mov	r1, r0
 800c5e8:	6818      	ldr	r0, [r3, #0]
 800c5ea:	f000 bd59 	b.w	800d0a0 <_malloc_r>
 800c5ee:	bf00      	nop
 800c5f0:	2000022c 	.word	0x2000022c

0800c5f4 <__ascii_mbtowc>:
 800c5f4:	b082      	sub	sp, #8
 800c5f6:	b901      	cbnz	r1, 800c5fa <__ascii_mbtowc+0x6>
 800c5f8:	a901      	add	r1, sp, #4
 800c5fa:	b142      	cbz	r2, 800c60e <__ascii_mbtowc+0x1a>
 800c5fc:	b14b      	cbz	r3, 800c612 <__ascii_mbtowc+0x1e>
 800c5fe:	7813      	ldrb	r3, [r2, #0]
 800c600:	600b      	str	r3, [r1, #0]
 800c602:	7812      	ldrb	r2, [r2, #0]
 800c604:	1e10      	subs	r0, r2, #0
 800c606:	bf18      	it	ne
 800c608:	2001      	movne	r0, #1
 800c60a:	b002      	add	sp, #8
 800c60c:	4770      	bx	lr
 800c60e:	4610      	mov	r0, r2
 800c610:	e7fb      	b.n	800c60a <__ascii_mbtowc+0x16>
 800c612:	f06f 0001 	mvn.w	r0, #1
 800c616:	e7f8      	b.n	800c60a <__ascii_mbtowc+0x16>

0800c618 <_Balloc>:
 800c618:	b570      	push	{r4, r5, r6, lr}
 800c61a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c61c:	4604      	mov	r4, r0
 800c61e:	460d      	mov	r5, r1
 800c620:	b976      	cbnz	r6, 800c640 <_Balloc+0x28>
 800c622:	2010      	movs	r0, #16
 800c624:	f7ff ffde 	bl	800c5e4 <malloc>
 800c628:	4602      	mov	r2, r0
 800c62a:	6260      	str	r0, [r4, #36]	; 0x24
 800c62c:	b920      	cbnz	r0, 800c638 <_Balloc+0x20>
 800c62e:	4b18      	ldr	r3, [pc, #96]	; (800c690 <_Balloc+0x78>)
 800c630:	4818      	ldr	r0, [pc, #96]	; (800c694 <_Balloc+0x7c>)
 800c632:	2166      	movs	r1, #102	; 0x66
 800c634:	f000 ff3e 	bl	800d4b4 <__assert_func>
 800c638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c63c:	6006      	str	r6, [r0, #0]
 800c63e:	60c6      	str	r6, [r0, #12]
 800c640:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c642:	68f3      	ldr	r3, [r6, #12]
 800c644:	b183      	cbz	r3, 800c668 <_Balloc+0x50>
 800c646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c648:	68db      	ldr	r3, [r3, #12]
 800c64a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c64e:	b9b8      	cbnz	r0, 800c680 <_Balloc+0x68>
 800c650:	2101      	movs	r1, #1
 800c652:	fa01 f605 	lsl.w	r6, r1, r5
 800c656:	1d72      	adds	r2, r6, #5
 800c658:	0092      	lsls	r2, r2, #2
 800c65a:	4620      	mov	r0, r4
 800c65c:	f000 fc9d 	bl	800cf9a <_calloc_r>
 800c660:	b160      	cbz	r0, 800c67c <_Balloc+0x64>
 800c662:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c666:	e00e      	b.n	800c686 <_Balloc+0x6e>
 800c668:	2221      	movs	r2, #33	; 0x21
 800c66a:	2104      	movs	r1, #4
 800c66c:	4620      	mov	r0, r4
 800c66e:	f000 fc94 	bl	800cf9a <_calloc_r>
 800c672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c674:	60f0      	str	r0, [r6, #12]
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1e4      	bne.n	800c646 <_Balloc+0x2e>
 800c67c:	2000      	movs	r0, #0
 800c67e:	bd70      	pop	{r4, r5, r6, pc}
 800c680:	6802      	ldr	r2, [r0, #0]
 800c682:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c686:	2300      	movs	r3, #0
 800c688:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c68c:	e7f7      	b.n	800c67e <_Balloc+0x66>
 800c68e:	bf00      	nop
 800c690:	0800e4ae 	.word	0x0800e4ae
 800c694:	0800e5ac 	.word	0x0800e5ac

0800c698 <_Bfree>:
 800c698:	b570      	push	{r4, r5, r6, lr}
 800c69a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c69c:	4605      	mov	r5, r0
 800c69e:	460c      	mov	r4, r1
 800c6a0:	b976      	cbnz	r6, 800c6c0 <_Bfree+0x28>
 800c6a2:	2010      	movs	r0, #16
 800c6a4:	f7ff ff9e 	bl	800c5e4 <malloc>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	6268      	str	r0, [r5, #36]	; 0x24
 800c6ac:	b920      	cbnz	r0, 800c6b8 <_Bfree+0x20>
 800c6ae:	4b09      	ldr	r3, [pc, #36]	; (800c6d4 <_Bfree+0x3c>)
 800c6b0:	4809      	ldr	r0, [pc, #36]	; (800c6d8 <_Bfree+0x40>)
 800c6b2:	218a      	movs	r1, #138	; 0x8a
 800c6b4:	f000 fefe 	bl	800d4b4 <__assert_func>
 800c6b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6bc:	6006      	str	r6, [r0, #0]
 800c6be:	60c6      	str	r6, [r0, #12]
 800c6c0:	b13c      	cbz	r4, 800c6d2 <_Bfree+0x3a>
 800c6c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c6c4:	6862      	ldr	r2, [r4, #4]
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6cc:	6021      	str	r1, [r4, #0]
 800c6ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c6d2:	bd70      	pop	{r4, r5, r6, pc}
 800c6d4:	0800e4ae 	.word	0x0800e4ae
 800c6d8:	0800e5ac 	.word	0x0800e5ac

0800c6dc <__multadd>:
 800c6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e0:	690d      	ldr	r5, [r1, #16]
 800c6e2:	4607      	mov	r7, r0
 800c6e4:	460c      	mov	r4, r1
 800c6e6:	461e      	mov	r6, r3
 800c6e8:	f101 0c14 	add.w	ip, r1, #20
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	f8dc 3000 	ldr.w	r3, [ip]
 800c6f2:	b299      	uxth	r1, r3
 800c6f4:	fb02 6101 	mla	r1, r2, r1, r6
 800c6f8:	0c1e      	lsrs	r6, r3, #16
 800c6fa:	0c0b      	lsrs	r3, r1, #16
 800c6fc:	fb02 3306 	mla	r3, r2, r6, r3
 800c700:	b289      	uxth	r1, r1
 800c702:	3001      	adds	r0, #1
 800c704:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c708:	4285      	cmp	r5, r0
 800c70a:	f84c 1b04 	str.w	r1, [ip], #4
 800c70e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c712:	dcec      	bgt.n	800c6ee <__multadd+0x12>
 800c714:	b30e      	cbz	r6, 800c75a <__multadd+0x7e>
 800c716:	68a3      	ldr	r3, [r4, #8]
 800c718:	42ab      	cmp	r3, r5
 800c71a:	dc19      	bgt.n	800c750 <__multadd+0x74>
 800c71c:	6861      	ldr	r1, [r4, #4]
 800c71e:	4638      	mov	r0, r7
 800c720:	3101      	adds	r1, #1
 800c722:	f7ff ff79 	bl	800c618 <_Balloc>
 800c726:	4680      	mov	r8, r0
 800c728:	b928      	cbnz	r0, 800c736 <__multadd+0x5a>
 800c72a:	4602      	mov	r2, r0
 800c72c:	4b0c      	ldr	r3, [pc, #48]	; (800c760 <__multadd+0x84>)
 800c72e:	480d      	ldr	r0, [pc, #52]	; (800c764 <__multadd+0x88>)
 800c730:	21b5      	movs	r1, #181	; 0xb5
 800c732:	f000 febf 	bl	800d4b4 <__assert_func>
 800c736:	6922      	ldr	r2, [r4, #16]
 800c738:	3202      	adds	r2, #2
 800c73a:	f104 010c 	add.w	r1, r4, #12
 800c73e:	0092      	lsls	r2, r2, #2
 800c740:	300c      	adds	r0, #12
 800c742:	f7fc fffd 	bl	8009740 <memcpy>
 800c746:	4621      	mov	r1, r4
 800c748:	4638      	mov	r0, r7
 800c74a:	f7ff ffa5 	bl	800c698 <_Bfree>
 800c74e:	4644      	mov	r4, r8
 800c750:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c754:	3501      	adds	r5, #1
 800c756:	615e      	str	r6, [r3, #20]
 800c758:	6125      	str	r5, [r4, #16]
 800c75a:	4620      	mov	r0, r4
 800c75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c760:	0800e520 	.word	0x0800e520
 800c764:	0800e5ac 	.word	0x0800e5ac

0800c768 <__s2b>:
 800c768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c76c:	460c      	mov	r4, r1
 800c76e:	4615      	mov	r5, r2
 800c770:	461f      	mov	r7, r3
 800c772:	2209      	movs	r2, #9
 800c774:	3308      	adds	r3, #8
 800c776:	4606      	mov	r6, r0
 800c778:	fb93 f3f2 	sdiv	r3, r3, r2
 800c77c:	2100      	movs	r1, #0
 800c77e:	2201      	movs	r2, #1
 800c780:	429a      	cmp	r2, r3
 800c782:	db09      	blt.n	800c798 <__s2b+0x30>
 800c784:	4630      	mov	r0, r6
 800c786:	f7ff ff47 	bl	800c618 <_Balloc>
 800c78a:	b940      	cbnz	r0, 800c79e <__s2b+0x36>
 800c78c:	4602      	mov	r2, r0
 800c78e:	4b19      	ldr	r3, [pc, #100]	; (800c7f4 <__s2b+0x8c>)
 800c790:	4819      	ldr	r0, [pc, #100]	; (800c7f8 <__s2b+0x90>)
 800c792:	21ce      	movs	r1, #206	; 0xce
 800c794:	f000 fe8e 	bl	800d4b4 <__assert_func>
 800c798:	0052      	lsls	r2, r2, #1
 800c79a:	3101      	adds	r1, #1
 800c79c:	e7f0      	b.n	800c780 <__s2b+0x18>
 800c79e:	9b08      	ldr	r3, [sp, #32]
 800c7a0:	6143      	str	r3, [r0, #20]
 800c7a2:	2d09      	cmp	r5, #9
 800c7a4:	f04f 0301 	mov.w	r3, #1
 800c7a8:	6103      	str	r3, [r0, #16]
 800c7aa:	dd16      	ble.n	800c7da <__s2b+0x72>
 800c7ac:	f104 0909 	add.w	r9, r4, #9
 800c7b0:	46c8      	mov	r8, r9
 800c7b2:	442c      	add	r4, r5
 800c7b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c7b8:	4601      	mov	r1, r0
 800c7ba:	3b30      	subs	r3, #48	; 0x30
 800c7bc:	220a      	movs	r2, #10
 800c7be:	4630      	mov	r0, r6
 800c7c0:	f7ff ff8c 	bl	800c6dc <__multadd>
 800c7c4:	45a0      	cmp	r8, r4
 800c7c6:	d1f5      	bne.n	800c7b4 <__s2b+0x4c>
 800c7c8:	f1a5 0408 	sub.w	r4, r5, #8
 800c7cc:	444c      	add	r4, r9
 800c7ce:	1b2d      	subs	r5, r5, r4
 800c7d0:	1963      	adds	r3, r4, r5
 800c7d2:	42bb      	cmp	r3, r7
 800c7d4:	db04      	blt.n	800c7e0 <__s2b+0x78>
 800c7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7da:	340a      	adds	r4, #10
 800c7dc:	2509      	movs	r5, #9
 800c7de:	e7f6      	b.n	800c7ce <__s2b+0x66>
 800c7e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c7e4:	4601      	mov	r1, r0
 800c7e6:	3b30      	subs	r3, #48	; 0x30
 800c7e8:	220a      	movs	r2, #10
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	f7ff ff76 	bl	800c6dc <__multadd>
 800c7f0:	e7ee      	b.n	800c7d0 <__s2b+0x68>
 800c7f2:	bf00      	nop
 800c7f4:	0800e520 	.word	0x0800e520
 800c7f8:	0800e5ac 	.word	0x0800e5ac

0800c7fc <__hi0bits>:
 800c7fc:	0c03      	lsrs	r3, r0, #16
 800c7fe:	041b      	lsls	r3, r3, #16
 800c800:	b9d3      	cbnz	r3, 800c838 <__hi0bits+0x3c>
 800c802:	0400      	lsls	r0, r0, #16
 800c804:	2310      	movs	r3, #16
 800c806:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c80a:	bf04      	itt	eq
 800c80c:	0200      	lsleq	r0, r0, #8
 800c80e:	3308      	addeq	r3, #8
 800c810:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c814:	bf04      	itt	eq
 800c816:	0100      	lsleq	r0, r0, #4
 800c818:	3304      	addeq	r3, #4
 800c81a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c81e:	bf04      	itt	eq
 800c820:	0080      	lsleq	r0, r0, #2
 800c822:	3302      	addeq	r3, #2
 800c824:	2800      	cmp	r0, #0
 800c826:	db05      	blt.n	800c834 <__hi0bits+0x38>
 800c828:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c82c:	f103 0301 	add.w	r3, r3, #1
 800c830:	bf08      	it	eq
 800c832:	2320      	moveq	r3, #32
 800c834:	4618      	mov	r0, r3
 800c836:	4770      	bx	lr
 800c838:	2300      	movs	r3, #0
 800c83a:	e7e4      	b.n	800c806 <__hi0bits+0xa>

0800c83c <__lo0bits>:
 800c83c:	6803      	ldr	r3, [r0, #0]
 800c83e:	f013 0207 	ands.w	r2, r3, #7
 800c842:	4601      	mov	r1, r0
 800c844:	d00b      	beq.n	800c85e <__lo0bits+0x22>
 800c846:	07da      	lsls	r2, r3, #31
 800c848:	d423      	bmi.n	800c892 <__lo0bits+0x56>
 800c84a:	0798      	lsls	r0, r3, #30
 800c84c:	bf49      	itett	mi
 800c84e:	085b      	lsrmi	r3, r3, #1
 800c850:	089b      	lsrpl	r3, r3, #2
 800c852:	2001      	movmi	r0, #1
 800c854:	600b      	strmi	r3, [r1, #0]
 800c856:	bf5c      	itt	pl
 800c858:	600b      	strpl	r3, [r1, #0]
 800c85a:	2002      	movpl	r0, #2
 800c85c:	4770      	bx	lr
 800c85e:	b298      	uxth	r0, r3
 800c860:	b9a8      	cbnz	r0, 800c88e <__lo0bits+0x52>
 800c862:	0c1b      	lsrs	r3, r3, #16
 800c864:	2010      	movs	r0, #16
 800c866:	b2da      	uxtb	r2, r3
 800c868:	b90a      	cbnz	r2, 800c86e <__lo0bits+0x32>
 800c86a:	3008      	adds	r0, #8
 800c86c:	0a1b      	lsrs	r3, r3, #8
 800c86e:	071a      	lsls	r2, r3, #28
 800c870:	bf04      	itt	eq
 800c872:	091b      	lsreq	r3, r3, #4
 800c874:	3004      	addeq	r0, #4
 800c876:	079a      	lsls	r2, r3, #30
 800c878:	bf04      	itt	eq
 800c87a:	089b      	lsreq	r3, r3, #2
 800c87c:	3002      	addeq	r0, #2
 800c87e:	07da      	lsls	r2, r3, #31
 800c880:	d403      	bmi.n	800c88a <__lo0bits+0x4e>
 800c882:	085b      	lsrs	r3, r3, #1
 800c884:	f100 0001 	add.w	r0, r0, #1
 800c888:	d005      	beq.n	800c896 <__lo0bits+0x5a>
 800c88a:	600b      	str	r3, [r1, #0]
 800c88c:	4770      	bx	lr
 800c88e:	4610      	mov	r0, r2
 800c890:	e7e9      	b.n	800c866 <__lo0bits+0x2a>
 800c892:	2000      	movs	r0, #0
 800c894:	4770      	bx	lr
 800c896:	2020      	movs	r0, #32
 800c898:	4770      	bx	lr
	...

0800c89c <__i2b>:
 800c89c:	b510      	push	{r4, lr}
 800c89e:	460c      	mov	r4, r1
 800c8a0:	2101      	movs	r1, #1
 800c8a2:	f7ff feb9 	bl	800c618 <_Balloc>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	b928      	cbnz	r0, 800c8b6 <__i2b+0x1a>
 800c8aa:	4b05      	ldr	r3, [pc, #20]	; (800c8c0 <__i2b+0x24>)
 800c8ac:	4805      	ldr	r0, [pc, #20]	; (800c8c4 <__i2b+0x28>)
 800c8ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c8b2:	f000 fdff 	bl	800d4b4 <__assert_func>
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	6144      	str	r4, [r0, #20]
 800c8ba:	6103      	str	r3, [r0, #16]
 800c8bc:	bd10      	pop	{r4, pc}
 800c8be:	bf00      	nop
 800c8c0:	0800e520 	.word	0x0800e520
 800c8c4:	0800e5ac 	.word	0x0800e5ac

0800c8c8 <__multiply>:
 800c8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8cc:	4691      	mov	r9, r2
 800c8ce:	690a      	ldr	r2, [r1, #16]
 800c8d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	bfb8      	it	lt
 800c8d8:	460b      	movlt	r3, r1
 800c8da:	460c      	mov	r4, r1
 800c8dc:	bfbc      	itt	lt
 800c8de:	464c      	movlt	r4, r9
 800c8e0:	4699      	movlt	r9, r3
 800c8e2:	6927      	ldr	r7, [r4, #16]
 800c8e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c8e8:	68a3      	ldr	r3, [r4, #8]
 800c8ea:	6861      	ldr	r1, [r4, #4]
 800c8ec:	eb07 060a 	add.w	r6, r7, sl
 800c8f0:	42b3      	cmp	r3, r6
 800c8f2:	b085      	sub	sp, #20
 800c8f4:	bfb8      	it	lt
 800c8f6:	3101      	addlt	r1, #1
 800c8f8:	f7ff fe8e 	bl	800c618 <_Balloc>
 800c8fc:	b930      	cbnz	r0, 800c90c <__multiply+0x44>
 800c8fe:	4602      	mov	r2, r0
 800c900:	4b44      	ldr	r3, [pc, #272]	; (800ca14 <__multiply+0x14c>)
 800c902:	4845      	ldr	r0, [pc, #276]	; (800ca18 <__multiply+0x150>)
 800c904:	f240 115d 	movw	r1, #349	; 0x15d
 800c908:	f000 fdd4 	bl	800d4b4 <__assert_func>
 800c90c:	f100 0514 	add.w	r5, r0, #20
 800c910:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c914:	462b      	mov	r3, r5
 800c916:	2200      	movs	r2, #0
 800c918:	4543      	cmp	r3, r8
 800c91a:	d321      	bcc.n	800c960 <__multiply+0x98>
 800c91c:	f104 0314 	add.w	r3, r4, #20
 800c920:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c924:	f109 0314 	add.w	r3, r9, #20
 800c928:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c92c:	9202      	str	r2, [sp, #8]
 800c92e:	1b3a      	subs	r2, r7, r4
 800c930:	3a15      	subs	r2, #21
 800c932:	f022 0203 	bic.w	r2, r2, #3
 800c936:	3204      	adds	r2, #4
 800c938:	f104 0115 	add.w	r1, r4, #21
 800c93c:	428f      	cmp	r7, r1
 800c93e:	bf38      	it	cc
 800c940:	2204      	movcc	r2, #4
 800c942:	9201      	str	r2, [sp, #4]
 800c944:	9a02      	ldr	r2, [sp, #8]
 800c946:	9303      	str	r3, [sp, #12]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d80c      	bhi.n	800c966 <__multiply+0x9e>
 800c94c:	2e00      	cmp	r6, #0
 800c94e:	dd03      	ble.n	800c958 <__multiply+0x90>
 800c950:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c954:	2b00      	cmp	r3, #0
 800c956:	d05a      	beq.n	800ca0e <__multiply+0x146>
 800c958:	6106      	str	r6, [r0, #16]
 800c95a:	b005      	add	sp, #20
 800c95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c960:	f843 2b04 	str.w	r2, [r3], #4
 800c964:	e7d8      	b.n	800c918 <__multiply+0x50>
 800c966:	f8b3 a000 	ldrh.w	sl, [r3]
 800c96a:	f1ba 0f00 	cmp.w	sl, #0
 800c96e:	d024      	beq.n	800c9ba <__multiply+0xf2>
 800c970:	f104 0e14 	add.w	lr, r4, #20
 800c974:	46a9      	mov	r9, r5
 800c976:	f04f 0c00 	mov.w	ip, #0
 800c97a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c97e:	f8d9 1000 	ldr.w	r1, [r9]
 800c982:	fa1f fb82 	uxth.w	fp, r2
 800c986:	b289      	uxth	r1, r1
 800c988:	fb0a 110b 	mla	r1, sl, fp, r1
 800c98c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c990:	f8d9 2000 	ldr.w	r2, [r9]
 800c994:	4461      	add	r1, ip
 800c996:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c99a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c99e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c9a2:	b289      	uxth	r1, r1
 800c9a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c9a8:	4577      	cmp	r7, lr
 800c9aa:	f849 1b04 	str.w	r1, [r9], #4
 800c9ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c9b2:	d8e2      	bhi.n	800c97a <__multiply+0xb2>
 800c9b4:	9a01      	ldr	r2, [sp, #4]
 800c9b6:	f845 c002 	str.w	ip, [r5, r2]
 800c9ba:	9a03      	ldr	r2, [sp, #12]
 800c9bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c9c0:	3304      	adds	r3, #4
 800c9c2:	f1b9 0f00 	cmp.w	r9, #0
 800c9c6:	d020      	beq.n	800ca0a <__multiply+0x142>
 800c9c8:	6829      	ldr	r1, [r5, #0]
 800c9ca:	f104 0c14 	add.w	ip, r4, #20
 800c9ce:	46ae      	mov	lr, r5
 800c9d0:	f04f 0a00 	mov.w	sl, #0
 800c9d4:	f8bc b000 	ldrh.w	fp, [ip]
 800c9d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c9dc:	fb09 220b 	mla	r2, r9, fp, r2
 800c9e0:	4492      	add	sl, r2
 800c9e2:	b289      	uxth	r1, r1
 800c9e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c9e8:	f84e 1b04 	str.w	r1, [lr], #4
 800c9ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c9f0:	f8be 1000 	ldrh.w	r1, [lr]
 800c9f4:	0c12      	lsrs	r2, r2, #16
 800c9f6:	fb09 1102 	mla	r1, r9, r2, r1
 800c9fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c9fe:	4567      	cmp	r7, ip
 800ca00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ca04:	d8e6      	bhi.n	800c9d4 <__multiply+0x10c>
 800ca06:	9a01      	ldr	r2, [sp, #4]
 800ca08:	50a9      	str	r1, [r5, r2]
 800ca0a:	3504      	adds	r5, #4
 800ca0c:	e79a      	b.n	800c944 <__multiply+0x7c>
 800ca0e:	3e01      	subs	r6, #1
 800ca10:	e79c      	b.n	800c94c <__multiply+0x84>
 800ca12:	bf00      	nop
 800ca14:	0800e520 	.word	0x0800e520
 800ca18:	0800e5ac 	.word	0x0800e5ac

0800ca1c <__pow5mult>:
 800ca1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca20:	4615      	mov	r5, r2
 800ca22:	f012 0203 	ands.w	r2, r2, #3
 800ca26:	4606      	mov	r6, r0
 800ca28:	460f      	mov	r7, r1
 800ca2a:	d007      	beq.n	800ca3c <__pow5mult+0x20>
 800ca2c:	4c25      	ldr	r4, [pc, #148]	; (800cac4 <__pow5mult+0xa8>)
 800ca2e:	3a01      	subs	r2, #1
 800ca30:	2300      	movs	r3, #0
 800ca32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca36:	f7ff fe51 	bl	800c6dc <__multadd>
 800ca3a:	4607      	mov	r7, r0
 800ca3c:	10ad      	asrs	r5, r5, #2
 800ca3e:	d03d      	beq.n	800cabc <__pow5mult+0xa0>
 800ca40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ca42:	b97c      	cbnz	r4, 800ca64 <__pow5mult+0x48>
 800ca44:	2010      	movs	r0, #16
 800ca46:	f7ff fdcd 	bl	800c5e4 <malloc>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	6270      	str	r0, [r6, #36]	; 0x24
 800ca4e:	b928      	cbnz	r0, 800ca5c <__pow5mult+0x40>
 800ca50:	4b1d      	ldr	r3, [pc, #116]	; (800cac8 <__pow5mult+0xac>)
 800ca52:	481e      	ldr	r0, [pc, #120]	; (800cacc <__pow5mult+0xb0>)
 800ca54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ca58:	f000 fd2c 	bl	800d4b4 <__assert_func>
 800ca5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca60:	6004      	str	r4, [r0, #0]
 800ca62:	60c4      	str	r4, [r0, #12]
 800ca64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ca68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca6c:	b94c      	cbnz	r4, 800ca82 <__pow5mult+0x66>
 800ca6e:	f240 2171 	movw	r1, #625	; 0x271
 800ca72:	4630      	mov	r0, r6
 800ca74:	f7ff ff12 	bl	800c89c <__i2b>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca7e:	4604      	mov	r4, r0
 800ca80:	6003      	str	r3, [r0, #0]
 800ca82:	f04f 0900 	mov.w	r9, #0
 800ca86:	07eb      	lsls	r3, r5, #31
 800ca88:	d50a      	bpl.n	800caa0 <__pow5mult+0x84>
 800ca8a:	4639      	mov	r1, r7
 800ca8c:	4622      	mov	r2, r4
 800ca8e:	4630      	mov	r0, r6
 800ca90:	f7ff ff1a 	bl	800c8c8 <__multiply>
 800ca94:	4639      	mov	r1, r7
 800ca96:	4680      	mov	r8, r0
 800ca98:	4630      	mov	r0, r6
 800ca9a:	f7ff fdfd 	bl	800c698 <_Bfree>
 800ca9e:	4647      	mov	r7, r8
 800caa0:	106d      	asrs	r5, r5, #1
 800caa2:	d00b      	beq.n	800cabc <__pow5mult+0xa0>
 800caa4:	6820      	ldr	r0, [r4, #0]
 800caa6:	b938      	cbnz	r0, 800cab8 <__pow5mult+0x9c>
 800caa8:	4622      	mov	r2, r4
 800caaa:	4621      	mov	r1, r4
 800caac:	4630      	mov	r0, r6
 800caae:	f7ff ff0b 	bl	800c8c8 <__multiply>
 800cab2:	6020      	str	r0, [r4, #0]
 800cab4:	f8c0 9000 	str.w	r9, [r0]
 800cab8:	4604      	mov	r4, r0
 800caba:	e7e4      	b.n	800ca86 <__pow5mult+0x6a>
 800cabc:	4638      	mov	r0, r7
 800cabe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cac2:	bf00      	nop
 800cac4:	0800e6f8 	.word	0x0800e6f8
 800cac8:	0800e4ae 	.word	0x0800e4ae
 800cacc:	0800e5ac 	.word	0x0800e5ac

0800cad0 <__lshift>:
 800cad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cad4:	460c      	mov	r4, r1
 800cad6:	6849      	ldr	r1, [r1, #4]
 800cad8:	6923      	ldr	r3, [r4, #16]
 800cada:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cade:	68a3      	ldr	r3, [r4, #8]
 800cae0:	4607      	mov	r7, r0
 800cae2:	4691      	mov	r9, r2
 800cae4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cae8:	f108 0601 	add.w	r6, r8, #1
 800caec:	42b3      	cmp	r3, r6
 800caee:	db0b      	blt.n	800cb08 <__lshift+0x38>
 800caf0:	4638      	mov	r0, r7
 800caf2:	f7ff fd91 	bl	800c618 <_Balloc>
 800caf6:	4605      	mov	r5, r0
 800caf8:	b948      	cbnz	r0, 800cb0e <__lshift+0x3e>
 800cafa:	4602      	mov	r2, r0
 800cafc:	4b2a      	ldr	r3, [pc, #168]	; (800cba8 <__lshift+0xd8>)
 800cafe:	482b      	ldr	r0, [pc, #172]	; (800cbac <__lshift+0xdc>)
 800cb00:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cb04:	f000 fcd6 	bl	800d4b4 <__assert_func>
 800cb08:	3101      	adds	r1, #1
 800cb0a:	005b      	lsls	r3, r3, #1
 800cb0c:	e7ee      	b.n	800caec <__lshift+0x1c>
 800cb0e:	2300      	movs	r3, #0
 800cb10:	f100 0114 	add.w	r1, r0, #20
 800cb14:	f100 0210 	add.w	r2, r0, #16
 800cb18:	4618      	mov	r0, r3
 800cb1a:	4553      	cmp	r3, sl
 800cb1c:	db37      	blt.n	800cb8e <__lshift+0xbe>
 800cb1e:	6920      	ldr	r0, [r4, #16]
 800cb20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb24:	f104 0314 	add.w	r3, r4, #20
 800cb28:	f019 091f 	ands.w	r9, r9, #31
 800cb2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cb34:	d02f      	beq.n	800cb96 <__lshift+0xc6>
 800cb36:	f1c9 0e20 	rsb	lr, r9, #32
 800cb3a:	468a      	mov	sl, r1
 800cb3c:	f04f 0c00 	mov.w	ip, #0
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	fa02 f209 	lsl.w	r2, r2, r9
 800cb46:	ea42 020c 	orr.w	r2, r2, ip
 800cb4a:	f84a 2b04 	str.w	r2, [sl], #4
 800cb4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb52:	4298      	cmp	r0, r3
 800cb54:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cb58:	d8f2      	bhi.n	800cb40 <__lshift+0x70>
 800cb5a:	1b03      	subs	r3, r0, r4
 800cb5c:	3b15      	subs	r3, #21
 800cb5e:	f023 0303 	bic.w	r3, r3, #3
 800cb62:	3304      	adds	r3, #4
 800cb64:	f104 0215 	add.w	r2, r4, #21
 800cb68:	4290      	cmp	r0, r2
 800cb6a:	bf38      	it	cc
 800cb6c:	2304      	movcc	r3, #4
 800cb6e:	f841 c003 	str.w	ip, [r1, r3]
 800cb72:	f1bc 0f00 	cmp.w	ip, #0
 800cb76:	d001      	beq.n	800cb7c <__lshift+0xac>
 800cb78:	f108 0602 	add.w	r6, r8, #2
 800cb7c:	3e01      	subs	r6, #1
 800cb7e:	4638      	mov	r0, r7
 800cb80:	612e      	str	r6, [r5, #16]
 800cb82:	4621      	mov	r1, r4
 800cb84:	f7ff fd88 	bl	800c698 <_Bfree>
 800cb88:	4628      	mov	r0, r5
 800cb8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb8e:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb92:	3301      	adds	r3, #1
 800cb94:	e7c1      	b.n	800cb1a <__lshift+0x4a>
 800cb96:	3904      	subs	r1, #4
 800cb98:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb9c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cba0:	4298      	cmp	r0, r3
 800cba2:	d8f9      	bhi.n	800cb98 <__lshift+0xc8>
 800cba4:	e7ea      	b.n	800cb7c <__lshift+0xac>
 800cba6:	bf00      	nop
 800cba8:	0800e520 	.word	0x0800e520
 800cbac:	0800e5ac 	.word	0x0800e5ac

0800cbb0 <__mcmp>:
 800cbb0:	b530      	push	{r4, r5, lr}
 800cbb2:	6902      	ldr	r2, [r0, #16]
 800cbb4:	690c      	ldr	r4, [r1, #16]
 800cbb6:	1b12      	subs	r2, r2, r4
 800cbb8:	d10e      	bne.n	800cbd8 <__mcmp+0x28>
 800cbba:	f100 0314 	add.w	r3, r0, #20
 800cbbe:	3114      	adds	r1, #20
 800cbc0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cbc4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cbc8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cbcc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cbd0:	42a5      	cmp	r5, r4
 800cbd2:	d003      	beq.n	800cbdc <__mcmp+0x2c>
 800cbd4:	d305      	bcc.n	800cbe2 <__mcmp+0x32>
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	4610      	mov	r0, r2
 800cbda:	bd30      	pop	{r4, r5, pc}
 800cbdc:	4283      	cmp	r3, r0
 800cbde:	d3f3      	bcc.n	800cbc8 <__mcmp+0x18>
 800cbe0:	e7fa      	b.n	800cbd8 <__mcmp+0x28>
 800cbe2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbe6:	e7f7      	b.n	800cbd8 <__mcmp+0x28>

0800cbe8 <__mdiff>:
 800cbe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbec:	460c      	mov	r4, r1
 800cbee:	4606      	mov	r6, r0
 800cbf0:	4611      	mov	r1, r2
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	4690      	mov	r8, r2
 800cbf6:	f7ff ffdb 	bl	800cbb0 <__mcmp>
 800cbfa:	1e05      	subs	r5, r0, #0
 800cbfc:	d110      	bne.n	800cc20 <__mdiff+0x38>
 800cbfe:	4629      	mov	r1, r5
 800cc00:	4630      	mov	r0, r6
 800cc02:	f7ff fd09 	bl	800c618 <_Balloc>
 800cc06:	b930      	cbnz	r0, 800cc16 <__mdiff+0x2e>
 800cc08:	4b3a      	ldr	r3, [pc, #232]	; (800ccf4 <__mdiff+0x10c>)
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	f240 2132 	movw	r1, #562	; 0x232
 800cc10:	4839      	ldr	r0, [pc, #228]	; (800ccf8 <__mdiff+0x110>)
 800cc12:	f000 fc4f 	bl	800d4b4 <__assert_func>
 800cc16:	2301      	movs	r3, #1
 800cc18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc20:	bfa4      	itt	ge
 800cc22:	4643      	movge	r3, r8
 800cc24:	46a0      	movge	r8, r4
 800cc26:	4630      	mov	r0, r6
 800cc28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cc2c:	bfa6      	itte	ge
 800cc2e:	461c      	movge	r4, r3
 800cc30:	2500      	movge	r5, #0
 800cc32:	2501      	movlt	r5, #1
 800cc34:	f7ff fcf0 	bl	800c618 <_Balloc>
 800cc38:	b920      	cbnz	r0, 800cc44 <__mdiff+0x5c>
 800cc3a:	4b2e      	ldr	r3, [pc, #184]	; (800ccf4 <__mdiff+0x10c>)
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cc42:	e7e5      	b.n	800cc10 <__mdiff+0x28>
 800cc44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cc48:	6926      	ldr	r6, [r4, #16]
 800cc4a:	60c5      	str	r5, [r0, #12]
 800cc4c:	f104 0914 	add.w	r9, r4, #20
 800cc50:	f108 0514 	add.w	r5, r8, #20
 800cc54:	f100 0e14 	add.w	lr, r0, #20
 800cc58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cc5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cc60:	f108 0210 	add.w	r2, r8, #16
 800cc64:	46f2      	mov	sl, lr
 800cc66:	2100      	movs	r1, #0
 800cc68:	f859 3b04 	ldr.w	r3, [r9], #4
 800cc6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cc70:	fa1f f883 	uxth.w	r8, r3
 800cc74:	fa11 f18b 	uxtah	r1, r1, fp
 800cc78:	0c1b      	lsrs	r3, r3, #16
 800cc7a:	eba1 0808 	sub.w	r8, r1, r8
 800cc7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cc82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cc86:	fa1f f888 	uxth.w	r8, r8
 800cc8a:	1419      	asrs	r1, r3, #16
 800cc8c:	454e      	cmp	r6, r9
 800cc8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cc92:	f84a 3b04 	str.w	r3, [sl], #4
 800cc96:	d8e7      	bhi.n	800cc68 <__mdiff+0x80>
 800cc98:	1b33      	subs	r3, r6, r4
 800cc9a:	3b15      	subs	r3, #21
 800cc9c:	f023 0303 	bic.w	r3, r3, #3
 800cca0:	3304      	adds	r3, #4
 800cca2:	3415      	adds	r4, #21
 800cca4:	42a6      	cmp	r6, r4
 800cca6:	bf38      	it	cc
 800cca8:	2304      	movcc	r3, #4
 800ccaa:	441d      	add	r5, r3
 800ccac:	4473      	add	r3, lr
 800ccae:	469e      	mov	lr, r3
 800ccb0:	462e      	mov	r6, r5
 800ccb2:	4566      	cmp	r6, ip
 800ccb4:	d30e      	bcc.n	800ccd4 <__mdiff+0xec>
 800ccb6:	f10c 0203 	add.w	r2, ip, #3
 800ccba:	1b52      	subs	r2, r2, r5
 800ccbc:	f022 0203 	bic.w	r2, r2, #3
 800ccc0:	3d03      	subs	r5, #3
 800ccc2:	45ac      	cmp	ip, r5
 800ccc4:	bf38      	it	cc
 800ccc6:	2200      	movcc	r2, #0
 800ccc8:	441a      	add	r2, r3
 800ccca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ccce:	b17b      	cbz	r3, 800ccf0 <__mdiff+0x108>
 800ccd0:	6107      	str	r7, [r0, #16]
 800ccd2:	e7a3      	b.n	800cc1c <__mdiff+0x34>
 800ccd4:	f856 8b04 	ldr.w	r8, [r6], #4
 800ccd8:	fa11 f288 	uxtah	r2, r1, r8
 800ccdc:	1414      	asrs	r4, r2, #16
 800ccde:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cce2:	b292      	uxth	r2, r2
 800cce4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cce8:	f84e 2b04 	str.w	r2, [lr], #4
 800ccec:	1421      	asrs	r1, r4, #16
 800ccee:	e7e0      	b.n	800ccb2 <__mdiff+0xca>
 800ccf0:	3f01      	subs	r7, #1
 800ccf2:	e7ea      	b.n	800ccca <__mdiff+0xe2>
 800ccf4:	0800e520 	.word	0x0800e520
 800ccf8:	0800e5ac 	.word	0x0800e5ac

0800ccfc <__ulp>:
 800ccfc:	b082      	sub	sp, #8
 800ccfe:	ed8d 0b00 	vstr	d0, [sp]
 800cd02:	9b01      	ldr	r3, [sp, #4]
 800cd04:	4912      	ldr	r1, [pc, #72]	; (800cd50 <__ulp+0x54>)
 800cd06:	4019      	ands	r1, r3
 800cd08:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cd0c:	2900      	cmp	r1, #0
 800cd0e:	dd05      	ble.n	800cd1c <__ulp+0x20>
 800cd10:	2200      	movs	r2, #0
 800cd12:	460b      	mov	r3, r1
 800cd14:	ec43 2b10 	vmov	d0, r2, r3
 800cd18:	b002      	add	sp, #8
 800cd1a:	4770      	bx	lr
 800cd1c:	4249      	negs	r1, r1
 800cd1e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cd22:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cd26:	f04f 0200 	mov.w	r2, #0
 800cd2a:	f04f 0300 	mov.w	r3, #0
 800cd2e:	da04      	bge.n	800cd3a <__ulp+0x3e>
 800cd30:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cd34:	fa41 f300 	asr.w	r3, r1, r0
 800cd38:	e7ec      	b.n	800cd14 <__ulp+0x18>
 800cd3a:	f1a0 0114 	sub.w	r1, r0, #20
 800cd3e:	291e      	cmp	r1, #30
 800cd40:	bfda      	itte	le
 800cd42:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cd46:	fa20 f101 	lsrle.w	r1, r0, r1
 800cd4a:	2101      	movgt	r1, #1
 800cd4c:	460a      	mov	r2, r1
 800cd4e:	e7e1      	b.n	800cd14 <__ulp+0x18>
 800cd50:	7ff00000 	.word	0x7ff00000

0800cd54 <__b2d>:
 800cd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd56:	6905      	ldr	r5, [r0, #16]
 800cd58:	f100 0714 	add.w	r7, r0, #20
 800cd5c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cd60:	1f2e      	subs	r6, r5, #4
 800cd62:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cd66:	4620      	mov	r0, r4
 800cd68:	f7ff fd48 	bl	800c7fc <__hi0bits>
 800cd6c:	f1c0 0320 	rsb	r3, r0, #32
 800cd70:	280a      	cmp	r0, #10
 800cd72:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cdf0 <__b2d+0x9c>
 800cd76:	600b      	str	r3, [r1, #0]
 800cd78:	dc14      	bgt.n	800cda4 <__b2d+0x50>
 800cd7a:	f1c0 0e0b 	rsb	lr, r0, #11
 800cd7e:	fa24 f10e 	lsr.w	r1, r4, lr
 800cd82:	42b7      	cmp	r7, r6
 800cd84:	ea41 030c 	orr.w	r3, r1, ip
 800cd88:	bf34      	ite	cc
 800cd8a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cd8e:	2100      	movcs	r1, #0
 800cd90:	3015      	adds	r0, #21
 800cd92:	fa04 f000 	lsl.w	r0, r4, r0
 800cd96:	fa21 f10e 	lsr.w	r1, r1, lr
 800cd9a:	ea40 0201 	orr.w	r2, r0, r1
 800cd9e:	ec43 2b10 	vmov	d0, r2, r3
 800cda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cda4:	42b7      	cmp	r7, r6
 800cda6:	bf3a      	itte	cc
 800cda8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cdac:	f1a5 0608 	subcc.w	r6, r5, #8
 800cdb0:	2100      	movcs	r1, #0
 800cdb2:	380b      	subs	r0, #11
 800cdb4:	d017      	beq.n	800cde6 <__b2d+0x92>
 800cdb6:	f1c0 0c20 	rsb	ip, r0, #32
 800cdba:	fa04 f500 	lsl.w	r5, r4, r0
 800cdbe:	42be      	cmp	r6, r7
 800cdc0:	fa21 f40c 	lsr.w	r4, r1, ip
 800cdc4:	ea45 0504 	orr.w	r5, r5, r4
 800cdc8:	bf8c      	ite	hi
 800cdca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cdce:	2400      	movls	r4, #0
 800cdd0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cdd4:	fa01 f000 	lsl.w	r0, r1, r0
 800cdd8:	fa24 f40c 	lsr.w	r4, r4, ip
 800cddc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cde0:	ea40 0204 	orr.w	r2, r0, r4
 800cde4:	e7db      	b.n	800cd9e <__b2d+0x4a>
 800cde6:	ea44 030c 	orr.w	r3, r4, ip
 800cdea:	460a      	mov	r2, r1
 800cdec:	e7d7      	b.n	800cd9e <__b2d+0x4a>
 800cdee:	bf00      	nop
 800cdf0:	3ff00000 	.word	0x3ff00000

0800cdf4 <__d2b>:
 800cdf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cdf8:	4689      	mov	r9, r1
 800cdfa:	2101      	movs	r1, #1
 800cdfc:	ec57 6b10 	vmov	r6, r7, d0
 800ce00:	4690      	mov	r8, r2
 800ce02:	f7ff fc09 	bl	800c618 <_Balloc>
 800ce06:	4604      	mov	r4, r0
 800ce08:	b930      	cbnz	r0, 800ce18 <__d2b+0x24>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	4b25      	ldr	r3, [pc, #148]	; (800cea4 <__d2b+0xb0>)
 800ce0e:	4826      	ldr	r0, [pc, #152]	; (800cea8 <__d2b+0xb4>)
 800ce10:	f240 310a 	movw	r1, #778	; 0x30a
 800ce14:	f000 fb4e 	bl	800d4b4 <__assert_func>
 800ce18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ce1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ce20:	bb35      	cbnz	r5, 800ce70 <__d2b+0x7c>
 800ce22:	2e00      	cmp	r6, #0
 800ce24:	9301      	str	r3, [sp, #4]
 800ce26:	d028      	beq.n	800ce7a <__d2b+0x86>
 800ce28:	4668      	mov	r0, sp
 800ce2a:	9600      	str	r6, [sp, #0]
 800ce2c:	f7ff fd06 	bl	800c83c <__lo0bits>
 800ce30:	9900      	ldr	r1, [sp, #0]
 800ce32:	b300      	cbz	r0, 800ce76 <__d2b+0x82>
 800ce34:	9a01      	ldr	r2, [sp, #4]
 800ce36:	f1c0 0320 	rsb	r3, r0, #32
 800ce3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce3e:	430b      	orrs	r3, r1
 800ce40:	40c2      	lsrs	r2, r0
 800ce42:	6163      	str	r3, [r4, #20]
 800ce44:	9201      	str	r2, [sp, #4]
 800ce46:	9b01      	ldr	r3, [sp, #4]
 800ce48:	61a3      	str	r3, [r4, #24]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	bf14      	ite	ne
 800ce4e:	2202      	movne	r2, #2
 800ce50:	2201      	moveq	r2, #1
 800ce52:	6122      	str	r2, [r4, #16]
 800ce54:	b1d5      	cbz	r5, 800ce8c <__d2b+0x98>
 800ce56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ce5a:	4405      	add	r5, r0
 800ce5c:	f8c9 5000 	str.w	r5, [r9]
 800ce60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ce64:	f8c8 0000 	str.w	r0, [r8]
 800ce68:	4620      	mov	r0, r4
 800ce6a:	b003      	add	sp, #12
 800ce6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce74:	e7d5      	b.n	800ce22 <__d2b+0x2e>
 800ce76:	6161      	str	r1, [r4, #20]
 800ce78:	e7e5      	b.n	800ce46 <__d2b+0x52>
 800ce7a:	a801      	add	r0, sp, #4
 800ce7c:	f7ff fcde 	bl	800c83c <__lo0bits>
 800ce80:	9b01      	ldr	r3, [sp, #4]
 800ce82:	6163      	str	r3, [r4, #20]
 800ce84:	2201      	movs	r2, #1
 800ce86:	6122      	str	r2, [r4, #16]
 800ce88:	3020      	adds	r0, #32
 800ce8a:	e7e3      	b.n	800ce54 <__d2b+0x60>
 800ce8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ce94:	f8c9 0000 	str.w	r0, [r9]
 800ce98:	6918      	ldr	r0, [r3, #16]
 800ce9a:	f7ff fcaf 	bl	800c7fc <__hi0bits>
 800ce9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cea2:	e7df      	b.n	800ce64 <__d2b+0x70>
 800cea4:	0800e520 	.word	0x0800e520
 800cea8:	0800e5ac 	.word	0x0800e5ac

0800ceac <__ratio>:
 800ceac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb0:	4688      	mov	r8, r1
 800ceb2:	4669      	mov	r1, sp
 800ceb4:	4681      	mov	r9, r0
 800ceb6:	f7ff ff4d 	bl	800cd54 <__b2d>
 800ceba:	a901      	add	r1, sp, #4
 800cebc:	4640      	mov	r0, r8
 800cebe:	ec55 4b10 	vmov	r4, r5, d0
 800cec2:	f7ff ff47 	bl	800cd54 <__b2d>
 800cec6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ceca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cece:	eba3 0c02 	sub.w	ip, r3, r2
 800ced2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ced6:	1a9b      	subs	r3, r3, r2
 800ced8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cedc:	ec51 0b10 	vmov	r0, r1, d0
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	bfd6      	itet	le
 800cee4:	460a      	movle	r2, r1
 800cee6:	462a      	movgt	r2, r5
 800cee8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ceec:	468b      	mov	fp, r1
 800ceee:	462f      	mov	r7, r5
 800cef0:	bfd4      	ite	le
 800cef2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cef6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cefa:	4620      	mov	r0, r4
 800cefc:	ee10 2a10 	vmov	r2, s0
 800cf00:	465b      	mov	r3, fp
 800cf02:	4639      	mov	r1, r7
 800cf04:	f7f3 fcaa 	bl	800085c <__aeabi_ddiv>
 800cf08:	ec41 0b10 	vmov	d0, r0, r1
 800cf0c:	b003      	add	sp, #12
 800cf0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf12 <__copybits>:
 800cf12:	3901      	subs	r1, #1
 800cf14:	b570      	push	{r4, r5, r6, lr}
 800cf16:	1149      	asrs	r1, r1, #5
 800cf18:	6914      	ldr	r4, [r2, #16]
 800cf1a:	3101      	adds	r1, #1
 800cf1c:	f102 0314 	add.w	r3, r2, #20
 800cf20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cf24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cf28:	1f05      	subs	r5, r0, #4
 800cf2a:	42a3      	cmp	r3, r4
 800cf2c:	d30c      	bcc.n	800cf48 <__copybits+0x36>
 800cf2e:	1aa3      	subs	r3, r4, r2
 800cf30:	3b11      	subs	r3, #17
 800cf32:	f023 0303 	bic.w	r3, r3, #3
 800cf36:	3211      	adds	r2, #17
 800cf38:	42a2      	cmp	r2, r4
 800cf3a:	bf88      	it	hi
 800cf3c:	2300      	movhi	r3, #0
 800cf3e:	4418      	add	r0, r3
 800cf40:	2300      	movs	r3, #0
 800cf42:	4288      	cmp	r0, r1
 800cf44:	d305      	bcc.n	800cf52 <__copybits+0x40>
 800cf46:	bd70      	pop	{r4, r5, r6, pc}
 800cf48:	f853 6b04 	ldr.w	r6, [r3], #4
 800cf4c:	f845 6f04 	str.w	r6, [r5, #4]!
 800cf50:	e7eb      	b.n	800cf2a <__copybits+0x18>
 800cf52:	f840 3b04 	str.w	r3, [r0], #4
 800cf56:	e7f4      	b.n	800cf42 <__copybits+0x30>

0800cf58 <__any_on>:
 800cf58:	f100 0214 	add.w	r2, r0, #20
 800cf5c:	6900      	ldr	r0, [r0, #16]
 800cf5e:	114b      	asrs	r3, r1, #5
 800cf60:	4298      	cmp	r0, r3
 800cf62:	b510      	push	{r4, lr}
 800cf64:	db11      	blt.n	800cf8a <__any_on+0x32>
 800cf66:	dd0a      	ble.n	800cf7e <__any_on+0x26>
 800cf68:	f011 011f 	ands.w	r1, r1, #31
 800cf6c:	d007      	beq.n	800cf7e <__any_on+0x26>
 800cf6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cf72:	fa24 f001 	lsr.w	r0, r4, r1
 800cf76:	fa00 f101 	lsl.w	r1, r0, r1
 800cf7a:	428c      	cmp	r4, r1
 800cf7c:	d10b      	bne.n	800cf96 <__any_on+0x3e>
 800cf7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d803      	bhi.n	800cf8e <__any_on+0x36>
 800cf86:	2000      	movs	r0, #0
 800cf88:	bd10      	pop	{r4, pc}
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	e7f7      	b.n	800cf7e <__any_on+0x26>
 800cf8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cf92:	2900      	cmp	r1, #0
 800cf94:	d0f5      	beq.n	800cf82 <__any_on+0x2a>
 800cf96:	2001      	movs	r0, #1
 800cf98:	e7f6      	b.n	800cf88 <__any_on+0x30>

0800cf9a <_calloc_r>:
 800cf9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf9c:	fba1 2402 	umull	r2, r4, r1, r2
 800cfa0:	b94c      	cbnz	r4, 800cfb6 <_calloc_r+0x1c>
 800cfa2:	4611      	mov	r1, r2
 800cfa4:	9201      	str	r2, [sp, #4]
 800cfa6:	f000 f87b 	bl	800d0a0 <_malloc_r>
 800cfaa:	9a01      	ldr	r2, [sp, #4]
 800cfac:	4605      	mov	r5, r0
 800cfae:	b930      	cbnz	r0, 800cfbe <_calloc_r+0x24>
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	b003      	add	sp, #12
 800cfb4:	bd30      	pop	{r4, r5, pc}
 800cfb6:	220c      	movs	r2, #12
 800cfb8:	6002      	str	r2, [r0, #0]
 800cfba:	2500      	movs	r5, #0
 800cfbc:	e7f8      	b.n	800cfb0 <_calloc_r+0x16>
 800cfbe:	4621      	mov	r1, r4
 800cfc0:	f7fc fbcc 	bl	800975c <memset>
 800cfc4:	e7f4      	b.n	800cfb0 <_calloc_r+0x16>
	...

0800cfc8 <_free_r>:
 800cfc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfca:	2900      	cmp	r1, #0
 800cfcc:	d044      	beq.n	800d058 <_free_r+0x90>
 800cfce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfd2:	9001      	str	r0, [sp, #4]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	f1a1 0404 	sub.w	r4, r1, #4
 800cfda:	bfb8      	it	lt
 800cfdc:	18e4      	addlt	r4, r4, r3
 800cfde:	f000 fab3 	bl	800d548 <__malloc_lock>
 800cfe2:	4a1e      	ldr	r2, [pc, #120]	; (800d05c <_free_r+0x94>)
 800cfe4:	9801      	ldr	r0, [sp, #4]
 800cfe6:	6813      	ldr	r3, [r2, #0]
 800cfe8:	b933      	cbnz	r3, 800cff8 <_free_r+0x30>
 800cfea:	6063      	str	r3, [r4, #4]
 800cfec:	6014      	str	r4, [r2, #0]
 800cfee:	b003      	add	sp, #12
 800cff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cff4:	f000 baae 	b.w	800d554 <__malloc_unlock>
 800cff8:	42a3      	cmp	r3, r4
 800cffa:	d908      	bls.n	800d00e <_free_r+0x46>
 800cffc:	6825      	ldr	r5, [r4, #0]
 800cffe:	1961      	adds	r1, r4, r5
 800d000:	428b      	cmp	r3, r1
 800d002:	bf01      	itttt	eq
 800d004:	6819      	ldreq	r1, [r3, #0]
 800d006:	685b      	ldreq	r3, [r3, #4]
 800d008:	1949      	addeq	r1, r1, r5
 800d00a:	6021      	streq	r1, [r4, #0]
 800d00c:	e7ed      	b.n	800cfea <_free_r+0x22>
 800d00e:	461a      	mov	r2, r3
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	b10b      	cbz	r3, 800d018 <_free_r+0x50>
 800d014:	42a3      	cmp	r3, r4
 800d016:	d9fa      	bls.n	800d00e <_free_r+0x46>
 800d018:	6811      	ldr	r1, [r2, #0]
 800d01a:	1855      	adds	r5, r2, r1
 800d01c:	42a5      	cmp	r5, r4
 800d01e:	d10b      	bne.n	800d038 <_free_r+0x70>
 800d020:	6824      	ldr	r4, [r4, #0]
 800d022:	4421      	add	r1, r4
 800d024:	1854      	adds	r4, r2, r1
 800d026:	42a3      	cmp	r3, r4
 800d028:	6011      	str	r1, [r2, #0]
 800d02a:	d1e0      	bne.n	800cfee <_free_r+0x26>
 800d02c:	681c      	ldr	r4, [r3, #0]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	6053      	str	r3, [r2, #4]
 800d032:	4421      	add	r1, r4
 800d034:	6011      	str	r1, [r2, #0]
 800d036:	e7da      	b.n	800cfee <_free_r+0x26>
 800d038:	d902      	bls.n	800d040 <_free_r+0x78>
 800d03a:	230c      	movs	r3, #12
 800d03c:	6003      	str	r3, [r0, #0]
 800d03e:	e7d6      	b.n	800cfee <_free_r+0x26>
 800d040:	6825      	ldr	r5, [r4, #0]
 800d042:	1961      	adds	r1, r4, r5
 800d044:	428b      	cmp	r3, r1
 800d046:	bf04      	itt	eq
 800d048:	6819      	ldreq	r1, [r3, #0]
 800d04a:	685b      	ldreq	r3, [r3, #4]
 800d04c:	6063      	str	r3, [r4, #4]
 800d04e:	bf04      	itt	eq
 800d050:	1949      	addeq	r1, r1, r5
 800d052:	6021      	streq	r1, [r4, #0]
 800d054:	6054      	str	r4, [r2, #4]
 800d056:	e7ca      	b.n	800cfee <_free_r+0x26>
 800d058:	b003      	add	sp, #12
 800d05a:	bd30      	pop	{r4, r5, pc}
 800d05c:	2000105c 	.word	0x2000105c

0800d060 <sbrk_aligned>:
 800d060:	b570      	push	{r4, r5, r6, lr}
 800d062:	4e0e      	ldr	r6, [pc, #56]	; (800d09c <sbrk_aligned+0x3c>)
 800d064:	460c      	mov	r4, r1
 800d066:	6831      	ldr	r1, [r6, #0]
 800d068:	4605      	mov	r5, r0
 800d06a:	b911      	cbnz	r1, 800d072 <sbrk_aligned+0x12>
 800d06c:	f000 f9f0 	bl	800d450 <_sbrk_r>
 800d070:	6030      	str	r0, [r6, #0]
 800d072:	4621      	mov	r1, r4
 800d074:	4628      	mov	r0, r5
 800d076:	f000 f9eb 	bl	800d450 <_sbrk_r>
 800d07a:	1c43      	adds	r3, r0, #1
 800d07c:	d00a      	beq.n	800d094 <sbrk_aligned+0x34>
 800d07e:	1cc4      	adds	r4, r0, #3
 800d080:	f024 0403 	bic.w	r4, r4, #3
 800d084:	42a0      	cmp	r0, r4
 800d086:	d007      	beq.n	800d098 <sbrk_aligned+0x38>
 800d088:	1a21      	subs	r1, r4, r0
 800d08a:	4628      	mov	r0, r5
 800d08c:	f000 f9e0 	bl	800d450 <_sbrk_r>
 800d090:	3001      	adds	r0, #1
 800d092:	d101      	bne.n	800d098 <sbrk_aligned+0x38>
 800d094:	f04f 34ff 	mov.w	r4, #4294967295
 800d098:	4620      	mov	r0, r4
 800d09a:	bd70      	pop	{r4, r5, r6, pc}
 800d09c:	20001060 	.word	0x20001060

0800d0a0 <_malloc_r>:
 800d0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a4:	1ccd      	adds	r5, r1, #3
 800d0a6:	f025 0503 	bic.w	r5, r5, #3
 800d0aa:	3508      	adds	r5, #8
 800d0ac:	2d0c      	cmp	r5, #12
 800d0ae:	bf38      	it	cc
 800d0b0:	250c      	movcc	r5, #12
 800d0b2:	2d00      	cmp	r5, #0
 800d0b4:	4607      	mov	r7, r0
 800d0b6:	db01      	blt.n	800d0bc <_malloc_r+0x1c>
 800d0b8:	42a9      	cmp	r1, r5
 800d0ba:	d905      	bls.n	800d0c8 <_malloc_r+0x28>
 800d0bc:	230c      	movs	r3, #12
 800d0be:	603b      	str	r3, [r7, #0]
 800d0c0:	2600      	movs	r6, #0
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c8:	4e2e      	ldr	r6, [pc, #184]	; (800d184 <_malloc_r+0xe4>)
 800d0ca:	f000 fa3d 	bl	800d548 <__malloc_lock>
 800d0ce:	6833      	ldr	r3, [r6, #0]
 800d0d0:	461c      	mov	r4, r3
 800d0d2:	bb34      	cbnz	r4, 800d122 <_malloc_r+0x82>
 800d0d4:	4629      	mov	r1, r5
 800d0d6:	4638      	mov	r0, r7
 800d0d8:	f7ff ffc2 	bl	800d060 <sbrk_aligned>
 800d0dc:	1c43      	adds	r3, r0, #1
 800d0de:	4604      	mov	r4, r0
 800d0e0:	d14d      	bne.n	800d17e <_malloc_r+0xde>
 800d0e2:	6834      	ldr	r4, [r6, #0]
 800d0e4:	4626      	mov	r6, r4
 800d0e6:	2e00      	cmp	r6, #0
 800d0e8:	d140      	bne.n	800d16c <_malloc_r+0xcc>
 800d0ea:	6823      	ldr	r3, [r4, #0]
 800d0ec:	4631      	mov	r1, r6
 800d0ee:	4638      	mov	r0, r7
 800d0f0:	eb04 0803 	add.w	r8, r4, r3
 800d0f4:	f000 f9ac 	bl	800d450 <_sbrk_r>
 800d0f8:	4580      	cmp	r8, r0
 800d0fa:	d13a      	bne.n	800d172 <_malloc_r+0xd2>
 800d0fc:	6821      	ldr	r1, [r4, #0]
 800d0fe:	3503      	adds	r5, #3
 800d100:	1a6d      	subs	r5, r5, r1
 800d102:	f025 0503 	bic.w	r5, r5, #3
 800d106:	3508      	adds	r5, #8
 800d108:	2d0c      	cmp	r5, #12
 800d10a:	bf38      	it	cc
 800d10c:	250c      	movcc	r5, #12
 800d10e:	4629      	mov	r1, r5
 800d110:	4638      	mov	r0, r7
 800d112:	f7ff ffa5 	bl	800d060 <sbrk_aligned>
 800d116:	3001      	adds	r0, #1
 800d118:	d02b      	beq.n	800d172 <_malloc_r+0xd2>
 800d11a:	6823      	ldr	r3, [r4, #0]
 800d11c:	442b      	add	r3, r5
 800d11e:	6023      	str	r3, [r4, #0]
 800d120:	e00e      	b.n	800d140 <_malloc_r+0xa0>
 800d122:	6822      	ldr	r2, [r4, #0]
 800d124:	1b52      	subs	r2, r2, r5
 800d126:	d41e      	bmi.n	800d166 <_malloc_r+0xc6>
 800d128:	2a0b      	cmp	r2, #11
 800d12a:	d916      	bls.n	800d15a <_malloc_r+0xba>
 800d12c:	1961      	adds	r1, r4, r5
 800d12e:	42a3      	cmp	r3, r4
 800d130:	6025      	str	r5, [r4, #0]
 800d132:	bf18      	it	ne
 800d134:	6059      	strne	r1, [r3, #4]
 800d136:	6863      	ldr	r3, [r4, #4]
 800d138:	bf08      	it	eq
 800d13a:	6031      	streq	r1, [r6, #0]
 800d13c:	5162      	str	r2, [r4, r5]
 800d13e:	604b      	str	r3, [r1, #4]
 800d140:	4638      	mov	r0, r7
 800d142:	f104 060b 	add.w	r6, r4, #11
 800d146:	f000 fa05 	bl	800d554 <__malloc_unlock>
 800d14a:	f026 0607 	bic.w	r6, r6, #7
 800d14e:	1d23      	adds	r3, r4, #4
 800d150:	1af2      	subs	r2, r6, r3
 800d152:	d0b6      	beq.n	800d0c2 <_malloc_r+0x22>
 800d154:	1b9b      	subs	r3, r3, r6
 800d156:	50a3      	str	r3, [r4, r2]
 800d158:	e7b3      	b.n	800d0c2 <_malloc_r+0x22>
 800d15a:	6862      	ldr	r2, [r4, #4]
 800d15c:	42a3      	cmp	r3, r4
 800d15e:	bf0c      	ite	eq
 800d160:	6032      	streq	r2, [r6, #0]
 800d162:	605a      	strne	r2, [r3, #4]
 800d164:	e7ec      	b.n	800d140 <_malloc_r+0xa0>
 800d166:	4623      	mov	r3, r4
 800d168:	6864      	ldr	r4, [r4, #4]
 800d16a:	e7b2      	b.n	800d0d2 <_malloc_r+0x32>
 800d16c:	4634      	mov	r4, r6
 800d16e:	6876      	ldr	r6, [r6, #4]
 800d170:	e7b9      	b.n	800d0e6 <_malloc_r+0x46>
 800d172:	230c      	movs	r3, #12
 800d174:	603b      	str	r3, [r7, #0]
 800d176:	4638      	mov	r0, r7
 800d178:	f000 f9ec 	bl	800d554 <__malloc_unlock>
 800d17c:	e7a1      	b.n	800d0c2 <_malloc_r+0x22>
 800d17e:	6025      	str	r5, [r4, #0]
 800d180:	e7de      	b.n	800d140 <_malloc_r+0xa0>
 800d182:	bf00      	nop
 800d184:	2000105c 	.word	0x2000105c

0800d188 <__ssputs_r>:
 800d188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d18c:	688e      	ldr	r6, [r1, #8]
 800d18e:	429e      	cmp	r6, r3
 800d190:	4682      	mov	sl, r0
 800d192:	460c      	mov	r4, r1
 800d194:	4690      	mov	r8, r2
 800d196:	461f      	mov	r7, r3
 800d198:	d838      	bhi.n	800d20c <__ssputs_r+0x84>
 800d19a:	898a      	ldrh	r2, [r1, #12]
 800d19c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d1a0:	d032      	beq.n	800d208 <__ssputs_r+0x80>
 800d1a2:	6825      	ldr	r5, [r4, #0]
 800d1a4:	6909      	ldr	r1, [r1, #16]
 800d1a6:	eba5 0901 	sub.w	r9, r5, r1
 800d1aa:	6965      	ldr	r5, [r4, #20]
 800d1ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	444b      	add	r3, r9
 800d1b8:	106d      	asrs	r5, r5, #1
 800d1ba:	429d      	cmp	r5, r3
 800d1bc:	bf38      	it	cc
 800d1be:	461d      	movcc	r5, r3
 800d1c0:	0553      	lsls	r3, r2, #21
 800d1c2:	d531      	bpl.n	800d228 <__ssputs_r+0xa0>
 800d1c4:	4629      	mov	r1, r5
 800d1c6:	f7ff ff6b 	bl	800d0a0 <_malloc_r>
 800d1ca:	4606      	mov	r6, r0
 800d1cc:	b950      	cbnz	r0, 800d1e4 <__ssputs_r+0x5c>
 800d1ce:	230c      	movs	r3, #12
 800d1d0:	f8ca 3000 	str.w	r3, [sl]
 800d1d4:	89a3      	ldrh	r3, [r4, #12]
 800d1d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1da:	81a3      	strh	r3, [r4, #12]
 800d1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e4:	6921      	ldr	r1, [r4, #16]
 800d1e6:	464a      	mov	r2, r9
 800d1e8:	f7fc faaa 	bl	8009740 <memcpy>
 800d1ec:	89a3      	ldrh	r3, [r4, #12]
 800d1ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d1f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1f6:	81a3      	strh	r3, [r4, #12]
 800d1f8:	6126      	str	r6, [r4, #16]
 800d1fa:	6165      	str	r5, [r4, #20]
 800d1fc:	444e      	add	r6, r9
 800d1fe:	eba5 0509 	sub.w	r5, r5, r9
 800d202:	6026      	str	r6, [r4, #0]
 800d204:	60a5      	str	r5, [r4, #8]
 800d206:	463e      	mov	r6, r7
 800d208:	42be      	cmp	r6, r7
 800d20a:	d900      	bls.n	800d20e <__ssputs_r+0x86>
 800d20c:	463e      	mov	r6, r7
 800d20e:	6820      	ldr	r0, [r4, #0]
 800d210:	4632      	mov	r2, r6
 800d212:	4641      	mov	r1, r8
 800d214:	f000 f97e 	bl	800d514 <memmove>
 800d218:	68a3      	ldr	r3, [r4, #8]
 800d21a:	1b9b      	subs	r3, r3, r6
 800d21c:	60a3      	str	r3, [r4, #8]
 800d21e:	6823      	ldr	r3, [r4, #0]
 800d220:	4433      	add	r3, r6
 800d222:	6023      	str	r3, [r4, #0]
 800d224:	2000      	movs	r0, #0
 800d226:	e7db      	b.n	800d1e0 <__ssputs_r+0x58>
 800d228:	462a      	mov	r2, r5
 800d22a:	f000 f999 	bl	800d560 <_realloc_r>
 800d22e:	4606      	mov	r6, r0
 800d230:	2800      	cmp	r0, #0
 800d232:	d1e1      	bne.n	800d1f8 <__ssputs_r+0x70>
 800d234:	6921      	ldr	r1, [r4, #16]
 800d236:	4650      	mov	r0, sl
 800d238:	f7ff fec6 	bl	800cfc8 <_free_r>
 800d23c:	e7c7      	b.n	800d1ce <__ssputs_r+0x46>
	...

0800d240 <_svfiprintf_r>:
 800d240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d244:	4698      	mov	r8, r3
 800d246:	898b      	ldrh	r3, [r1, #12]
 800d248:	061b      	lsls	r3, r3, #24
 800d24a:	b09d      	sub	sp, #116	; 0x74
 800d24c:	4607      	mov	r7, r0
 800d24e:	460d      	mov	r5, r1
 800d250:	4614      	mov	r4, r2
 800d252:	d50e      	bpl.n	800d272 <_svfiprintf_r+0x32>
 800d254:	690b      	ldr	r3, [r1, #16]
 800d256:	b963      	cbnz	r3, 800d272 <_svfiprintf_r+0x32>
 800d258:	2140      	movs	r1, #64	; 0x40
 800d25a:	f7ff ff21 	bl	800d0a0 <_malloc_r>
 800d25e:	6028      	str	r0, [r5, #0]
 800d260:	6128      	str	r0, [r5, #16]
 800d262:	b920      	cbnz	r0, 800d26e <_svfiprintf_r+0x2e>
 800d264:	230c      	movs	r3, #12
 800d266:	603b      	str	r3, [r7, #0]
 800d268:	f04f 30ff 	mov.w	r0, #4294967295
 800d26c:	e0d1      	b.n	800d412 <_svfiprintf_r+0x1d2>
 800d26e:	2340      	movs	r3, #64	; 0x40
 800d270:	616b      	str	r3, [r5, #20]
 800d272:	2300      	movs	r3, #0
 800d274:	9309      	str	r3, [sp, #36]	; 0x24
 800d276:	2320      	movs	r3, #32
 800d278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d27c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d280:	2330      	movs	r3, #48	; 0x30
 800d282:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d42c <_svfiprintf_r+0x1ec>
 800d286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d28a:	f04f 0901 	mov.w	r9, #1
 800d28e:	4623      	mov	r3, r4
 800d290:	469a      	mov	sl, r3
 800d292:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d296:	b10a      	cbz	r2, 800d29c <_svfiprintf_r+0x5c>
 800d298:	2a25      	cmp	r2, #37	; 0x25
 800d29a:	d1f9      	bne.n	800d290 <_svfiprintf_r+0x50>
 800d29c:	ebba 0b04 	subs.w	fp, sl, r4
 800d2a0:	d00b      	beq.n	800d2ba <_svfiprintf_r+0x7a>
 800d2a2:	465b      	mov	r3, fp
 800d2a4:	4622      	mov	r2, r4
 800d2a6:	4629      	mov	r1, r5
 800d2a8:	4638      	mov	r0, r7
 800d2aa:	f7ff ff6d 	bl	800d188 <__ssputs_r>
 800d2ae:	3001      	adds	r0, #1
 800d2b0:	f000 80aa 	beq.w	800d408 <_svfiprintf_r+0x1c8>
 800d2b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2b6:	445a      	add	r2, fp
 800d2b8:	9209      	str	r2, [sp, #36]	; 0x24
 800d2ba:	f89a 3000 	ldrb.w	r3, [sl]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	f000 80a2 	beq.w	800d408 <_svfiprintf_r+0x1c8>
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2ce:	f10a 0a01 	add.w	sl, sl, #1
 800d2d2:	9304      	str	r3, [sp, #16]
 800d2d4:	9307      	str	r3, [sp, #28]
 800d2d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2da:	931a      	str	r3, [sp, #104]	; 0x68
 800d2dc:	4654      	mov	r4, sl
 800d2de:	2205      	movs	r2, #5
 800d2e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2e4:	4851      	ldr	r0, [pc, #324]	; (800d42c <_svfiprintf_r+0x1ec>)
 800d2e6:	f7f2 ff83 	bl	80001f0 <memchr>
 800d2ea:	9a04      	ldr	r2, [sp, #16]
 800d2ec:	b9d8      	cbnz	r0, 800d326 <_svfiprintf_r+0xe6>
 800d2ee:	06d0      	lsls	r0, r2, #27
 800d2f0:	bf44      	itt	mi
 800d2f2:	2320      	movmi	r3, #32
 800d2f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2f8:	0711      	lsls	r1, r2, #28
 800d2fa:	bf44      	itt	mi
 800d2fc:	232b      	movmi	r3, #43	; 0x2b
 800d2fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d302:	f89a 3000 	ldrb.w	r3, [sl]
 800d306:	2b2a      	cmp	r3, #42	; 0x2a
 800d308:	d015      	beq.n	800d336 <_svfiprintf_r+0xf6>
 800d30a:	9a07      	ldr	r2, [sp, #28]
 800d30c:	4654      	mov	r4, sl
 800d30e:	2000      	movs	r0, #0
 800d310:	f04f 0c0a 	mov.w	ip, #10
 800d314:	4621      	mov	r1, r4
 800d316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d31a:	3b30      	subs	r3, #48	; 0x30
 800d31c:	2b09      	cmp	r3, #9
 800d31e:	d94e      	bls.n	800d3be <_svfiprintf_r+0x17e>
 800d320:	b1b0      	cbz	r0, 800d350 <_svfiprintf_r+0x110>
 800d322:	9207      	str	r2, [sp, #28]
 800d324:	e014      	b.n	800d350 <_svfiprintf_r+0x110>
 800d326:	eba0 0308 	sub.w	r3, r0, r8
 800d32a:	fa09 f303 	lsl.w	r3, r9, r3
 800d32e:	4313      	orrs	r3, r2
 800d330:	9304      	str	r3, [sp, #16]
 800d332:	46a2      	mov	sl, r4
 800d334:	e7d2      	b.n	800d2dc <_svfiprintf_r+0x9c>
 800d336:	9b03      	ldr	r3, [sp, #12]
 800d338:	1d19      	adds	r1, r3, #4
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	9103      	str	r1, [sp, #12]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	bfbb      	ittet	lt
 800d342:	425b      	neglt	r3, r3
 800d344:	f042 0202 	orrlt.w	r2, r2, #2
 800d348:	9307      	strge	r3, [sp, #28]
 800d34a:	9307      	strlt	r3, [sp, #28]
 800d34c:	bfb8      	it	lt
 800d34e:	9204      	strlt	r2, [sp, #16]
 800d350:	7823      	ldrb	r3, [r4, #0]
 800d352:	2b2e      	cmp	r3, #46	; 0x2e
 800d354:	d10c      	bne.n	800d370 <_svfiprintf_r+0x130>
 800d356:	7863      	ldrb	r3, [r4, #1]
 800d358:	2b2a      	cmp	r3, #42	; 0x2a
 800d35a:	d135      	bne.n	800d3c8 <_svfiprintf_r+0x188>
 800d35c:	9b03      	ldr	r3, [sp, #12]
 800d35e:	1d1a      	adds	r2, r3, #4
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	9203      	str	r2, [sp, #12]
 800d364:	2b00      	cmp	r3, #0
 800d366:	bfb8      	it	lt
 800d368:	f04f 33ff 	movlt.w	r3, #4294967295
 800d36c:	3402      	adds	r4, #2
 800d36e:	9305      	str	r3, [sp, #20]
 800d370:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d43c <_svfiprintf_r+0x1fc>
 800d374:	7821      	ldrb	r1, [r4, #0]
 800d376:	2203      	movs	r2, #3
 800d378:	4650      	mov	r0, sl
 800d37a:	f7f2 ff39 	bl	80001f0 <memchr>
 800d37e:	b140      	cbz	r0, 800d392 <_svfiprintf_r+0x152>
 800d380:	2340      	movs	r3, #64	; 0x40
 800d382:	eba0 000a 	sub.w	r0, r0, sl
 800d386:	fa03 f000 	lsl.w	r0, r3, r0
 800d38a:	9b04      	ldr	r3, [sp, #16]
 800d38c:	4303      	orrs	r3, r0
 800d38e:	3401      	adds	r4, #1
 800d390:	9304      	str	r3, [sp, #16]
 800d392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d396:	4826      	ldr	r0, [pc, #152]	; (800d430 <_svfiprintf_r+0x1f0>)
 800d398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d39c:	2206      	movs	r2, #6
 800d39e:	f7f2 ff27 	bl	80001f0 <memchr>
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	d038      	beq.n	800d418 <_svfiprintf_r+0x1d8>
 800d3a6:	4b23      	ldr	r3, [pc, #140]	; (800d434 <_svfiprintf_r+0x1f4>)
 800d3a8:	bb1b      	cbnz	r3, 800d3f2 <_svfiprintf_r+0x1b2>
 800d3aa:	9b03      	ldr	r3, [sp, #12]
 800d3ac:	3307      	adds	r3, #7
 800d3ae:	f023 0307 	bic.w	r3, r3, #7
 800d3b2:	3308      	adds	r3, #8
 800d3b4:	9303      	str	r3, [sp, #12]
 800d3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3b8:	4433      	add	r3, r6
 800d3ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d3bc:	e767      	b.n	800d28e <_svfiprintf_r+0x4e>
 800d3be:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3c2:	460c      	mov	r4, r1
 800d3c4:	2001      	movs	r0, #1
 800d3c6:	e7a5      	b.n	800d314 <_svfiprintf_r+0xd4>
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	3401      	adds	r4, #1
 800d3cc:	9305      	str	r3, [sp, #20]
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	f04f 0c0a 	mov.w	ip, #10
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3da:	3a30      	subs	r2, #48	; 0x30
 800d3dc:	2a09      	cmp	r2, #9
 800d3de:	d903      	bls.n	800d3e8 <_svfiprintf_r+0x1a8>
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d0c5      	beq.n	800d370 <_svfiprintf_r+0x130>
 800d3e4:	9105      	str	r1, [sp, #20]
 800d3e6:	e7c3      	b.n	800d370 <_svfiprintf_r+0x130>
 800d3e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e7f0      	b.n	800d3d4 <_svfiprintf_r+0x194>
 800d3f2:	ab03      	add	r3, sp, #12
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	462a      	mov	r2, r5
 800d3f8:	4b0f      	ldr	r3, [pc, #60]	; (800d438 <_svfiprintf_r+0x1f8>)
 800d3fa:	a904      	add	r1, sp, #16
 800d3fc:	4638      	mov	r0, r7
 800d3fe:	f7fc fa55 	bl	80098ac <_printf_float>
 800d402:	1c42      	adds	r2, r0, #1
 800d404:	4606      	mov	r6, r0
 800d406:	d1d6      	bne.n	800d3b6 <_svfiprintf_r+0x176>
 800d408:	89ab      	ldrh	r3, [r5, #12]
 800d40a:	065b      	lsls	r3, r3, #25
 800d40c:	f53f af2c 	bmi.w	800d268 <_svfiprintf_r+0x28>
 800d410:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d412:	b01d      	add	sp, #116	; 0x74
 800d414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d418:	ab03      	add	r3, sp, #12
 800d41a:	9300      	str	r3, [sp, #0]
 800d41c:	462a      	mov	r2, r5
 800d41e:	4b06      	ldr	r3, [pc, #24]	; (800d438 <_svfiprintf_r+0x1f8>)
 800d420:	a904      	add	r1, sp, #16
 800d422:	4638      	mov	r0, r7
 800d424:	f7fc fce6 	bl	8009df4 <_printf_i>
 800d428:	e7eb      	b.n	800d402 <_svfiprintf_r+0x1c2>
 800d42a:	bf00      	nop
 800d42c:	0800e704 	.word	0x0800e704
 800d430:	0800e70e 	.word	0x0800e70e
 800d434:	080098ad 	.word	0x080098ad
 800d438:	0800d189 	.word	0x0800d189
 800d43c:	0800e70a 	.word	0x0800e70a

0800d440 <nan>:
 800d440:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d448 <nan+0x8>
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop
 800d448:	00000000 	.word	0x00000000
 800d44c:	7ff80000 	.word	0x7ff80000

0800d450 <_sbrk_r>:
 800d450:	b538      	push	{r3, r4, r5, lr}
 800d452:	4d06      	ldr	r5, [pc, #24]	; (800d46c <_sbrk_r+0x1c>)
 800d454:	2300      	movs	r3, #0
 800d456:	4604      	mov	r4, r0
 800d458:	4608      	mov	r0, r1
 800d45a:	602b      	str	r3, [r5, #0]
 800d45c:	f7f7 f8a0 	bl	80045a0 <_sbrk>
 800d460:	1c43      	adds	r3, r0, #1
 800d462:	d102      	bne.n	800d46a <_sbrk_r+0x1a>
 800d464:	682b      	ldr	r3, [r5, #0]
 800d466:	b103      	cbz	r3, 800d46a <_sbrk_r+0x1a>
 800d468:	6023      	str	r3, [r4, #0]
 800d46a:	bd38      	pop	{r3, r4, r5, pc}
 800d46c:	20001064 	.word	0x20001064

0800d470 <strncmp>:
 800d470:	b510      	push	{r4, lr}
 800d472:	b17a      	cbz	r2, 800d494 <strncmp+0x24>
 800d474:	4603      	mov	r3, r0
 800d476:	3901      	subs	r1, #1
 800d478:	1884      	adds	r4, r0, r2
 800d47a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d47e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d482:	4290      	cmp	r0, r2
 800d484:	d101      	bne.n	800d48a <strncmp+0x1a>
 800d486:	42a3      	cmp	r3, r4
 800d488:	d101      	bne.n	800d48e <strncmp+0x1e>
 800d48a:	1a80      	subs	r0, r0, r2
 800d48c:	bd10      	pop	{r4, pc}
 800d48e:	2800      	cmp	r0, #0
 800d490:	d1f3      	bne.n	800d47a <strncmp+0xa>
 800d492:	e7fa      	b.n	800d48a <strncmp+0x1a>
 800d494:	4610      	mov	r0, r2
 800d496:	e7f9      	b.n	800d48c <strncmp+0x1c>

0800d498 <__ascii_wctomb>:
 800d498:	b149      	cbz	r1, 800d4ae <__ascii_wctomb+0x16>
 800d49a:	2aff      	cmp	r2, #255	; 0xff
 800d49c:	bf85      	ittet	hi
 800d49e:	238a      	movhi	r3, #138	; 0x8a
 800d4a0:	6003      	strhi	r3, [r0, #0]
 800d4a2:	700a      	strbls	r2, [r1, #0]
 800d4a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d4a8:	bf98      	it	ls
 800d4aa:	2001      	movls	r0, #1
 800d4ac:	4770      	bx	lr
 800d4ae:	4608      	mov	r0, r1
 800d4b0:	4770      	bx	lr
	...

0800d4b4 <__assert_func>:
 800d4b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4b6:	4614      	mov	r4, r2
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	4b09      	ldr	r3, [pc, #36]	; (800d4e0 <__assert_func+0x2c>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	4605      	mov	r5, r0
 800d4c0:	68d8      	ldr	r0, [r3, #12]
 800d4c2:	b14c      	cbz	r4, 800d4d8 <__assert_func+0x24>
 800d4c4:	4b07      	ldr	r3, [pc, #28]	; (800d4e4 <__assert_func+0x30>)
 800d4c6:	9100      	str	r1, [sp, #0]
 800d4c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d4cc:	4906      	ldr	r1, [pc, #24]	; (800d4e8 <__assert_func+0x34>)
 800d4ce:	462b      	mov	r3, r5
 800d4d0:	f000 f80e 	bl	800d4f0 <fiprintf>
 800d4d4:	f000 fa8c 	bl	800d9f0 <abort>
 800d4d8:	4b04      	ldr	r3, [pc, #16]	; (800d4ec <__assert_func+0x38>)
 800d4da:	461c      	mov	r4, r3
 800d4dc:	e7f3      	b.n	800d4c6 <__assert_func+0x12>
 800d4de:	bf00      	nop
 800d4e0:	2000022c 	.word	0x2000022c
 800d4e4:	0800e715 	.word	0x0800e715
 800d4e8:	0800e722 	.word	0x0800e722
 800d4ec:	0800e750 	.word	0x0800e750

0800d4f0 <fiprintf>:
 800d4f0:	b40e      	push	{r1, r2, r3}
 800d4f2:	b503      	push	{r0, r1, lr}
 800d4f4:	4601      	mov	r1, r0
 800d4f6:	ab03      	add	r3, sp, #12
 800d4f8:	4805      	ldr	r0, [pc, #20]	; (800d510 <fiprintf+0x20>)
 800d4fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4fe:	6800      	ldr	r0, [r0, #0]
 800d500:	9301      	str	r3, [sp, #4]
 800d502:	f000 f885 	bl	800d610 <_vfiprintf_r>
 800d506:	b002      	add	sp, #8
 800d508:	f85d eb04 	ldr.w	lr, [sp], #4
 800d50c:	b003      	add	sp, #12
 800d50e:	4770      	bx	lr
 800d510:	2000022c 	.word	0x2000022c

0800d514 <memmove>:
 800d514:	4288      	cmp	r0, r1
 800d516:	b510      	push	{r4, lr}
 800d518:	eb01 0402 	add.w	r4, r1, r2
 800d51c:	d902      	bls.n	800d524 <memmove+0x10>
 800d51e:	4284      	cmp	r4, r0
 800d520:	4623      	mov	r3, r4
 800d522:	d807      	bhi.n	800d534 <memmove+0x20>
 800d524:	1e43      	subs	r3, r0, #1
 800d526:	42a1      	cmp	r1, r4
 800d528:	d008      	beq.n	800d53c <memmove+0x28>
 800d52a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d52e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d532:	e7f8      	b.n	800d526 <memmove+0x12>
 800d534:	4402      	add	r2, r0
 800d536:	4601      	mov	r1, r0
 800d538:	428a      	cmp	r2, r1
 800d53a:	d100      	bne.n	800d53e <memmove+0x2a>
 800d53c:	bd10      	pop	{r4, pc}
 800d53e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d546:	e7f7      	b.n	800d538 <memmove+0x24>

0800d548 <__malloc_lock>:
 800d548:	4801      	ldr	r0, [pc, #4]	; (800d550 <__malloc_lock+0x8>)
 800d54a:	f000 bc11 	b.w	800dd70 <__retarget_lock_acquire_recursive>
 800d54e:	bf00      	nop
 800d550:	20001068 	.word	0x20001068

0800d554 <__malloc_unlock>:
 800d554:	4801      	ldr	r0, [pc, #4]	; (800d55c <__malloc_unlock+0x8>)
 800d556:	f000 bc0c 	b.w	800dd72 <__retarget_lock_release_recursive>
 800d55a:	bf00      	nop
 800d55c:	20001068 	.word	0x20001068

0800d560 <_realloc_r>:
 800d560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d564:	4680      	mov	r8, r0
 800d566:	4614      	mov	r4, r2
 800d568:	460e      	mov	r6, r1
 800d56a:	b921      	cbnz	r1, 800d576 <_realloc_r+0x16>
 800d56c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d570:	4611      	mov	r1, r2
 800d572:	f7ff bd95 	b.w	800d0a0 <_malloc_r>
 800d576:	b92a      	cbnz	r2, 800d584 <_realloc_r+0x24>
 800d578:	f7ff fd26 	bl	800cfc8 <_free_r>
 800d57c:	4625      	mov	r5, r4
 800d57e:	4628      	mov	r0, r5
 800d580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d584:	f000 fc5c 	bl	800de40 <_malloc_usable_size_r>
 800d588:	4284      	cmp	r4, r0
 800d58a:	4607      	mov	r7, r0
 800d58c:	d802      	bhi.n	800d594 <_realloc_r+0x34>
 800d58e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d592:	d812      	bhi.n	800d5ba <_realloc_r+0x5a>
 800d594:	4621      	mov	r1, r4
 800d596:	4640      	mov	r0, r8
 800d598:	f7ff fd82 	bl	800d0a0 <_malloc_r>
 800d59c:	4605      	mov	r5, r0
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d0ed      	beq.n	800d57e <_realloc_r+0x1e>
 800d5a2:	42bc      	cmp	r4, r7
 800d5a4:	4622      	mov	r2, r4
 800d5a6:	4631      	mov	r1, r6
 800d5a8:	bf28      	it	cs
 800d5aa:	463a      	movcs	r2, r7
 800d5ac:	f7fc f8c8 	bl	8009740 <memcpy>
 800d5b0:	4631      	mov	r1, r6
 800d5b2:	4640      	mov	r0, r8
 800d5b4:	f7ff fd08 	bl	800cfc8 <_free_r>
 800d5b8:	e7e1      	b.n	800d57e <_realloc_r+0x1e>
 800d5ba:	4635      	mov	r5, r6
 800d5bc:	e7df      	b.n	800d57e <_realloc_r+0x1e>

0800d5be <__sfputc_r>:
 800d5be:	6893      	ldr	r3, [r2, #8]
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	b410      	push	{r4}
 800d5c6:	6093      	str	r3, [r2, #8]
 800d5c8:	da08      	bge.n	800d5dc <__sfputc_r+0x1e>
 800d5ca:	6994      	ldr	r4, [r2, #24]
 800d5cc:	42a3      	cmp	r3, r4
 800d5ce:	db01      	blt.n	800d5d4 <__sfputc_r+0x16>
 800d5d0:	290a      	cmp	r1, #10
 800d5d2:	d103      	bne.n	800d5dc <__sfputc_r+0x1e>
 800d5d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5d8:	f000 b94a 	b.w	800d870 <__swbuf_r>
 800d5dc:	6813      	ldr	r3, [r2, #0]
 800d5de:	1c58      	adds	r0, r3, #1
 800d5e0:	6010      	str	r0, [r2, #0]
 800d5e2:	7019      	strb	r1, [r3, #0]
 800d5e4:	4608      	mov	r0, r1
 800d5e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5ea:	4770      	bx	lr

0800d5ec <__sfputs_r>:
 800d5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ee:	4606      	mov	r6, r0
 800d5f0:	460f      	mov	r7, r1
 800d5f2:	4614      	mov	r4, r2
 800d5f4:	18d5      	adds	r5, r2, r3
 800d5f6:	42ac      	cmp	r4, r5
 800d5f8:	d101      	bne.n	800d5fe <__sfputs_r+0x12>
 800d5fa:	2000      	movs	r0, #0
 800d5fc:	e007      	b.n	800d60e <__sfputs_r+0x22>
 800d5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d602:	463a      	mov	r2, r7
 800d604:	4630      	mov	r0, r6
 800d606:	f7ff ffda 	bl	800d5be <__sfputc_r>
 800d60a:	1c43      	adds	r3, r0, #1
 800d60c:	d1f3      	bne.n	800d5f6 <__sfputs_r+0xa>
 800d60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d610 <_vfiprintf_r>:
 800d610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d614:	460d      	mov	r5, r1
 800d616:	b09d      	sub	sp, #116	; 0x74
 800d618:	4614      	mov	r4, r2
 800d61a:	4698      	mov	r8, r3
 800d61c:	4606      	mov	r6, r0
 800d61e:	b118      	cbz	r0, 800d628 <_vfiprintf_r+0x18>
 800d620:	6983      	ldr	r3, [r0, #24]
 800d622:	b90b      	cbnz	r3, 800d628 <_vfiprintf_r+0x18>
 800d624:	f000 fb06 	bl	800dc34 <__sinit>
 800d628:	4b89      	ldr	r3, [pc, #548]	; (800d850 <_vfiprintf_r+0x240>)
 800d62a:	429d      	cmp	r5, r3
 800d62c:	d11b      	bne.n	800d666 <_vfiprintf_r+0x56>
 800d62e:	6875      	ldr	r5, [r6, #4]
 800d630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d632:	07d9      	lsls	r1, r3, #31
 800d634:	d405      	bmi.n	800d642 <_vfiprintf_r+0x32>
 800d636:	89ab      	ldrh	r3, [r5, #12]
 800d638:	059a      	lsls	r2, r3, #22
 800d63a:	d402      	bmi.n	800d642 <_vfiprintf_r+0x32>
 800d63c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d63e:	f000 fb97 	bl	800dd70 <__retarget_lock_acquire_recursive>
 800d642:	89ab      	ldrh	r3, [r5, #12]
 800d644:	071b      	lsls	r3, r3, #28
 800d646:	d501      	bpl.n	800d64c <_vfiprintf_r+0x3c>
 800d648:	692b      	ldr	r3, [r5, #16]
 800d64a:	b9eb      	cbnz	r3, 800d688 <_vfiprintf_r+0x78>
 800d64c:	4629      	mov	r1, r5
 800d64e:	4630      	mov	r0, r6
 800d650:	f000 f960 	bl	800d914 <__swsetup_r>
 800d654:	b1c0      	cbz	r0, 800d688 <_vfiprintf_r+0x78>
 800d656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d658:	07dc      	lsls	r4, r3, #31
 800d65a:	d50e      	bpl.n	800d67a <_vfiprintf_r+0x6a>
 800d65c:	f04f 30ff 	mov.w	r0, #4294967295
 800d660:	b01d      	add	sp, #116	; 0x74
 800d662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d666:	4b7b      	ldr	r3, [pc, #492]	; (800d854 <_vfiprintf_r+0x244>)
 800d668:	429d      	cmp	r5, r3
 800d66a:	d101      	bne.n	800d670 <_vfiprintf_r+0x60>
 800d66c:	68b5      	ldr	r5, [r6, #8]
 800d66e:	e7df      	b.n	800d630 <_vfiprintf_r+0x20>
 800d670:	4b79      	ldr	r3, [pc, #484]	; (800d858 <_vfiprintf_r+0x248>)
 800d672:	429d      	cmp	r5, r3
 800d674:	bf08      	it	eq
 800d676:	68f5      	ldreq	r5, [r6, #12]
 800d678:	e7da      	b.n	800d630 <_vfiprintf_r+0x20>
 800d67a:	89ab      	ldrh	r3, [r5, #12]
 800d67c:	0598      	lsls	r0, r3, #22
 800d67e:	d4ed      	bmi.n	800d65c <_vfiprintf_r+0x4c>
 800d680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d682:	f000 fb76 	bl	800dd72 <__retarget_lock_release_recursive>
 800d686:	e7e9      	b.n	800d65c <_vfiprintf_r+0x4c>
 800d688:	2300      	movs	r3, #0
 800d68a:	9309      	str	r3, [sp, #36]	; 0x24
 800d68c:	2320      	movs	r3, #32
 800d68e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d692:	f8cd 800c 	str.w	r8, [sp, #12]
 800d696:	2330      	movs	r3, #48	; 0x30
 800d698:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d85c <_vfiprintf_r+0x24c>
 800d69c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6a0:	f04f 0901 	mov.w	r9, #1
 800d6a4:	4623      	mov	r3, r4
 800d6a6:	469a      	mov	sl, r3
 800d6a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6ac:	b10a      	cbz	r2, 800d6b2 <_vfiprintf_r+0xa2>
 800d6ae:	2a25      	cmp	r2, #37	; 0x25
 800d6b0:	d1f9      	bne.n	800d6a6 <_vfiprintf_r+0x96>
 800d6b2:	ebba 0b04 	subs.w	fp, sl, r4
 800d6b6:	d00b      	beq.n	800d6d0 <_vfiprintf_r+0xc0>
 800d6b8:	465b      	mov	r3, fp
 800d6ba:	4622      	mov	r2, r4
 800d6bc:	4629      	mov	r1, r5
 800d6be:	4630      	mov	r0, r6
 800d6c0:	f7ff ff94 	bl	800d5ec <__sfputs_r>
 800d6c4:	3001      	adds	r0, #1
 800d6c6:	f000 80aa 	beq.w	800d81e <_vfiprintf_r+0x20e>
 800d6ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6cc:	445a      	add	r2, fp
 800d6ce:	9209      	str	r2, [sp, #36]	; 0x24
 800d6d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f000 80a2 	beq.w	800d81e <_vfiprintf_r+0x20e>
 800d6da:	2300      	movs	r3, #0
 800d6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6e4:	f10a 0a01 	add.w	sl, sl, #1
 800d6e8:	9304      	str	r3, [sp, #16]
 800d6ea:	9307      	str	r3, [sp, #28]
 800d6ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6f0:	931a      	str	r3, [sp, #104]	; 0x68
 800d6f2:	4654      	mov	r4, sl
 800d6f4:	2205      	movs	r2, #5
 800d6f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6fa:	4858      	ldr	r0, [pc, #352]	; (800d85c <_vfiprintf_r+0x24c>)
 800d6fc:	f7f2 fd78 	bl	80001f0 <memchr>
 800d700:	9a04      	ldr	r2, [sp, #16]
 800d702:	b9d8      	cbnz	r0, 800d73c <_vfiprintf_r+0x12c>
 800d704:	06d1      	lsls	r1, r2, #27
 800d706:	bf44      	itt	mi
 800d708:	2320      	movmi	r3, #32
 800d70a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d70e:	0713      	lsls	r3, r2, #28
 800d710:	bf44      	itt	mi
 800d712:	232b      	movmi	r3, #43	; 0x2b
 800d714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d718:	f89a 3000 	ldrb.w	r3, [sl]
 800d71c:	2b2a      	cmp	r3, #42	; 0x2a
 800d71e:	d015      	beq.n	800d74c <_vfiprintf_r+0x13c>
 800d720:	9a07      	ldr	r2, [sp, #28]
 800d722:	4654      	mov	r4, sl
 800d724:	2000      	movs	r0, #0
 800d726:	f04f 0c0a 	mov.w	ip, #10
 800d72a:	4621      	mov	r1, r4
 800d72c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d730:	3b30      	subs	r3, #48	; 0x30
 800d732:	2b09      	cmp	r3, #9
 800d734:	d94e      	bls.n	800d7d4 <_vfiprintf_r+0x1c4>
 800d736:	b1b0      	cbz	r0, 800d766 <_vfiprintf_r+0x156>
 800d738:	9207      	str	r2, [sp, #28]
 800d73a:	e014      	b.n	800d766 <_vfiprintf_r+0x156>
 800d73c:	eba0 0308 	sub.w	r3, r0, r8
 800d740:	fa09 f303 	lsl.w	r3, r9, r3
 800d744:	4313      	orrs	r3, r2
 800d746:	9304      	str	r3, [sp, #16]
 800d748:	46a2      	mov	sl, r4
 800d74a:	e7d2      	b.n	800d6f2 <_vfiprintf_r+0xe2>
 800d74c:	9b03      	ldr	r3, [sp, #12]
 800d74e:	1d19      	adds	r1, r3, #4
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	9103      	str	r1, [sp, #12]
 800d754:	2b00      	cmp	r3, #0
 800d756:	bfbb      	ittet	lt
 800d758:	425b      	neglt	r3, r3
 800d75a:	f042 0202 	orrlt.w	r2, r2, #2
 800d75e:	9307      	strge	r3, [sp, #28]
 800d760:	9307      	strlt	r3, [sp, #28]
 800d762:	bfb8      	it	lt
 800d764:	9204      	strlt	r2, [sp, #16]
 800d766:	7823      	ldrb	r3, [r4, #0]
 800d768:	2b2e      	cmp	r3, #46	; 0x2e
 800d76a:	d10c      	bne.n	800d786 <_vfiprintf_r+0x176>
 800d76c:	7863      	ldrb	r3, [r4, #1]
 800d76e:	2b2a      	cmp	r3, #42	; 0x2a
 800d770:	d135      	bne.n	800d7de <_vfiprintf_r+0x1ce>
 800d772:	9b03      	ldr	r3, [sp, #12]
 800d774:	1d1a      	adds	r2, r3, #4
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	9203      	str	r2, [sp, #12]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	bfb8      	it	lt
 800d77e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d782:	3402      	adds	r4, #2
 800d784:	9305      	str	r3, [sp, #20]
 800d786:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d86c <_vfiprintf_r+0x25c>
 800d78a:	7821      	ldrb	r1, [r4, #0]
 800d78c:	2203      	movs	r2, #3
 800d78e:	4650      	mov	r0, sl
 800d790:	f7f2 fd2e 	bl	80001f0 <memchr>
 800d794:	b140      	cbz	r0, 800d7a8 <_vfiprintf_r+0x198>
 800d796:	2340      	movs	r3, #64	; 0x40
 800d798:	eba0 000a 	sub.w	r0, r0, sl
 800d79c:	fa03 f000 	lsl.w	r0, r3, r0
 800d7a0:	9b04      	ldr	r3, [sp, #16]
 800d7a2:	4303      	orrs	r3, r0
 800d7a4:	3401      	adds	r4, #1
 800d7a6:	9304      	str	r3, [sp, #16]
 800d7a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ac:	482c      	ldr	r0, [pc, #176]	; (800d860 <_vfiprintf_r+0x250>)
 800d7ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7b2:	2206      	movs	r2, #6
 800d7b4:	f7f2 fd1c 	bl	80001f0 <memchr>
 800d7b8:	2800      	cmp	r0, #0
 800d7ba:	d03f      	beq.n	800d83c <_vfiprintf_r+0x22c>
 800d7bc:	4b29      	ldr	r3, [pc, #164]	; (800d864 <_vfiprintf_r+0x254>)
 800d7be:	bb1b      	cbnz	r3, 800d808 <_vfiprintf_r+0x1f8>
 800d7c0:	9b03      	ldr	r3, [sp, #12]
 800d7c2:	3307      	adds	r3, #7
 800d7c4:	f023 0307 	bic.w	r3, r3, #7
 800d7c8:	3308      	adds	r3, #8
 800d7ca:	9303      	str	r3, [sp, #12]
 800d7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ce:	443b      	add	r3, r7
 800d7d0:	9309      	str	r3, [sp, #36]	; 0x24
 800d7d2:	e767      	b.n	800d6a4 <_vfiprintf_r+0x94>
 800d7d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7d8:	460c      	mov	r4, r1
 800d7da:	2001      	movs	r0, #1
 800d7dc:	e7a5      	b.n	800d72a <_vfiprintf_r+0x11a>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	3401      	adds	r4, #1
 800d7e2:	9305      	str	r3, [sp, #20]
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	f04f 0c0a 	mov.w	ip, #10
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7f0:	3a30      	subs	r2, #48	; 0x30
 800d7f2:	2a09      	cmp	r2, #9
 800d7f4:	d903      	bls.n	800d7fe <_vfiprintf_r+0x1ee>
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d0c5      	beq.n	800d786 <_vfiprintf_r+0x176>
 800d7fa:	9105      	str	r1, [sp, #20]
 800d7fc:	e7c3      	b.n	800d786 <_vfiprintf_r+0x176>
 800d7fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800d802:	4604      	mov	r4, r0
 800d804:	2301      	movs	r3, #1
 800d806:	e7f0      	b.n	800d7ea <_vfiprintf_r+0x1da>
 800d808:	ab03      	add	r3, sp, #12
 800d80a:	9300      	str	r3, [sp, #0]
 800d80c:	462a      	mov	r2, r5
 800d80e:	4b16      	ldr	r3, [pc, #88]	; (800d868 <_vfiprintf_r+0x258>)
 800d810:	a904      	add	r1, sp, #16
 800d812:	4630      	mov	r0, r6
 800d814:	f7fc f84a 	bl	80098ac <_printf_float>
 800d818:	4607      	mov	r7, r0
 800d81a:	1c78      	adds	r0, r7, #1
 800d81c:	d1d6      	bne.n	800d7cc <_vfiprintf_r+0x1bc>
 800d81e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d820:	07d9      	lsls	r1, r3, #31
 800d822:	d405      	bmi.n	800d830 <_vfiprintf_r+0x220>
 800d824:	89ab      	ldrh	r3, [r5, #12]
 800d826:	059a      	lsls	r2, r3, #22
 800d828:	d402      	bmi.n	800d830 <_vfiprintf_r+0x220>
 800d82a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d82c:	f000 faa1 	bl	800dd72 <__retarget_lock_release_recursive>
 800d830:	89ab      	ldrh	r3, [r5, #12]
 800d832:	065b      	lsls	r3, r3, #25
 800d834:	f53f af12 	bmi.w	800d65c <_vfiprintf_r+0x4c>
 800d838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d83a:	e711      	b.n	800d660 <_vfiprintf_r+0x50>
 800d83c:	ab03      	add	r3, sp, #12
 800d83e:	9300      	str	r3, [sp, #0]
 800d840:	462a      	mov	r2, r5
 800d842:	4b09      	ldr	r3, [pc, #36]	; (800d868 <_vfiprintf_r+0x258>)
 800d844:	a904      	add	r1, sp, #16
 800d846:	4630      	mov	r0, r6
 800d848:	f7fc fad4 	bl	8009df4 <_printf_i>
 800d84c:	e7e4      	b.n	800d818 <_vfiprintf_r+0x208>
 800d84e:	bf00      	nop
 800d850:	0800e774 	.word	0x0800e774
 800d854:	0800e794 	.word	0x0800e794
 800d858:	0800e754 	.word	0x0800e754
 800d85c:	0800e704 	.word	0x0800e704
 800d860:	0800e70e 	.word	0x0800e70e
 800d864:	080098ad 	.word	0x080098ad
 800d868:	0800d5ed 	.word	0x0800d5ed
 800d86c:	0800e70a 	.word	0x0800e70a

0800d870 <__swbuf_r>:
 800d870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d872:	460e      	mov	r6, r1
 800d874:	4614      	mov	r4, r2
 800d876:	4605      	mov	r5, r0
 800d878:	b118      	cbz	r0, 800d882 <__swbuf_r+0x12>
 800d87a:	6983      	ldr	r3, [r0, #24]
 800d87c:	b90b      	cbnz	r3, 800d882 <__swbuf_r+0x12>
 800d87e:	f000 f9d9 	bl	800dc34 <__sinit>
 800d882:	4b21      	ldr	r3, [pc, #132]	; (800d908 <__swbuf_r+0x98>)
 800d884:	429c      	cmp	r4, r3
 800d886:	d12b      	bne.n	800d8e0 <__swbuf_r+0x70>
 800d888:	686c      	ldr	r4, [r5, #4]
 800d88a:	69a3      	ldr	r3, [r4, #24]
 800d88c:	60a3      	str	r3, [r4, #8]
 800d88e:	89a3      	ldrh	r3, [r4, #12]
 800d890:	071a      	lsls	r2, r3, #28
 800d892:	d52f      	bpl.n	800d8f4 <__swbuf_r+0x84>
 800d894:	6923      	ldr	r3, [r4, #16]
 800d896:	b36b      	cbz	r3, 800d8f4 <__swbuf_r+0x84>
 800d898:	6923      	ldr	r3, [r4, #16]
 800d89a:	6820      	ldr	r0, [r4, #0]
 800d89c:	1ac0      	subs	r0, r0, r3
 800d89e:	6963      	ldr	r3, [r4, #20]
 800d8a0:	b2f6      	uxtb	r6, r6
 800d8a2:	4283      	cmp	r3, r0
 800d8a4:	4637      	mov	r7, r6
 800d8a6:	dc04      	bgt.n	800d8b2 <__swbuf_r+0x42>
 800d8a8:	4621      	mov	r1, r4
 800d8aa:	4628      	mov	r0, r5
 800d8ac:	f000 f92e 	bl	800db0c <_fflush_r>
 800d8b0:	bb30      	cbnz	r0, 800d900 <__swbuf_r+0x90>
 800d8b2:	68a3      	ldr	r3, [r4, #8]
 800d8b4:	3b01      	subs	r3, #1
 800d8b6:	60a3      	str	r3, [r4, #8]
 800d8b8:	6823      	ldr	r3, [r4, #0]
 800d8ba:	1c5a      	adds	r2, r3, #1
 800d8bc:	6022      	str	r2, [r4, #0]
 800d8be:	701e      	strb	r6, [r3, #0]
 800d8c0:	6963      	ldr	r3, [r4, #20]
 800d8c2:	3001      	adds	r0, #1
 800d8c4:	4283      	cmp	r3, r0
 800d8c6:	d004      	beq.n	800d8d2 <__swbuf_r+0x62>
 800d8c8:	89a3      	ldrh	r3, [r4, #12]
 800d8ca:	07db      	lsls	r3, r3, #31
 800d8cc:	d506      	bpl.n	800d8dc <__swbuf_r+0x6c>
 800d8ce:	2e0a      	cmp	r6, #10
 800d8d0:	d104      	bne.n	800d8dc <__swbuf_r+0x6c>
 800d8d2:	4621      	mov	r1, r4
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	f000 f919 	bl	800db0c <_fflush_r>
 800d8da:	b988      	cbnz	r0, 800d900 <__swbuf_r+0x90>
 800d8dc:	4638      	mov	r0, r7
 800d8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8e0:	4b0a      	ldr	r3, [pc, #40]	; (800d90c <__swbuf_r+0x9c>)
 800d8e2:	429c      	cmp	r4, r3
 800d8e4:	d101      	bne.n	800d8ea <__swbuf_r+0x7a>
 800d8e6:	68ac      	ldr	r4, [r5, #8]
 800d8e8:	e7cf      	b.n	800d88a <__swbuf_r+0x1a>
 800d8ea:	4b09      	ldr	r3, [pc, #36]	; (800d910 <__swbuf_r+0xa0>)
 800d8ec:	429c      	cmp	r4, r3
 800d8ee:	bf08      	it	eq
 800d8f0:	68ec      	ldreq	r4, [r5, #12]
 800d8f2:	e7ca      	b.n	800d88a <__swbuf_r+0x1a>
 800d8f4:	4621      	mov	r1, r4
 800d8f6:	4628      	mov	r0, r5
 800d8f8:	f000 f80c 	bl	800d914 <__swsetup_r>
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	d0cb      	beq.n	800d898 <__swbuf_r+0x28>
 800d900:	f04f 37ff 	mov.w	r7, #4294967295
 800d904:	e7ea      	b.n	800d8dc <__swbuf_r+0x6c>
 800d906:	bf00      	nop
 800d908:	0800e774 	.word	0x0800e774
 800d90c:	0800e794 	.word	0x0800e794
 800d910:	0800e754 	.word	0x0800e754

0800d914 <__swsetup_r>:
 800d914:	4b32      	ldr	r3, [pc, #200]	; (800d9e0 <__swsetup_r+0xcc>)
 800d916:	b570      	push	{r4, r5, r6, lr}
 800d918:	681d      	ldr	r5, [r3, #0]
 800d91a:	4606      	mov	r6, r0
 800d91c:	460c      	mov	r4, r1
 800d91e:	b125      	cbz	r5, 800d92a <__swsetup_r+0x16>
 800d920:	69ab      	ldr	r3, [r5, #24]
 800d922:	b913      	cbnz	r3, 800d92a <__swsetup_r+0x16>
 800d924:	4628      	mov	r0, r5
 800d926:	f000 f985 	bl	800dc34 <__sinit>
 800d92a:	4b2e      	ldr	r3, [pc, #184]	; (800d9e4 <__swsetup_r+0xd0>)
 800d92c:	429c      	cmp	r4, r3
 800d92e:	d10f      	bne.n	800d950 <__swsetup_r+0x3c>
 800d930:	686c      	ldr	r4, [r5, #4]
 800d932:	89a3      	ldrh	r3, [r4, #12]
 800d934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d938:	0719      	lsls	r1, r3, #28
 800d93a:	d42c      	bmi.n	800d996 <__swsetup_r+0x82>
 800d93c:	06dd      	lsls	r5, r3, #27
 800d93e:	d411      	bmi.n	800d964 <__swsetup_r+0x50>
 800d940:	2309      	movs	r3, #9
 800d942:	6033      	str	r3, [r6, #0]
 800d944:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d948:	81a3      	strh	r3, [r4, #12]
 800d94a:	f04f 30ff 	mov.w	r0, #4294967295
 800d94e:	e03e      	b.n	800d9ce <__swsetup_r+0xba>
 800d950:	4b25      	ldr	r3, [pc, #148]	; (800d9e8 <__swsetup_r+0xd4>)
 800d952:	429c      	cmp	r4, r3
 800d954:	d101      	bne.n	800d95a <__swsetup_r+0x46>
 800d956:	68ac      	ldr	r4, [r5, #8]
 800d958:	e7eb      	b.n	800d932 <__swsetup_r+0x1e>
 800d95a:	4b24      	ldr	r3, [pc, #144]	; (800d9ec <__swsetup_r+0xd8>)
 800d95c:	429c      	cmp	r4, r3
 800d95e:	bf08      	it	eq
 800d960:	68ec      	ldreq	r4, [r5, #12]
 800d962:	e7e6      	b.n	800d932 <__swsetup_r+0x1e>
 800d964:	0758      	lsls	r0, r3, #29
 800d966:	d512      	bpl.n	800d98e <__swsetup_r+0x7a>
 800d968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d96a:	b141      	cbz	r1, 800d97e <__swsetup_r+0x6a>
 800d96c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d970:	4299      	cmp	r1, r3
 800d972:	d002      	beq.n	800d97a <__swsetup_r+0x66>
 800d974:	4630      	mov	r0, r6
 800d976:	f7ff fb27 	bl	800cfc8 <_free_r>
 800d97a:	2300      	movs	r3, #0
 800d97c:	6363      	str	r3, [r4, #52]	; 0x34
 800d97e:	89a3      	ldrh	r3, [r4, #12]
 800d980:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d984:	81a3      	strh	r3, [r4, #12]
 800d986:	2300      	movs	r3, #0
 800d988:	6063      	str	r3, [r4, #4]
 800d98a:	6923      	ldr	r3, [r4, #16]
 800d98c:	6023      	str	r3, [r4, #0]
 800d98e:	89a3      	ldrh	r3, [r4, #12]
 800d990:	f043 0308 	orr.w	r3, r3, #8
 800d994:	81a3      	strh	r3, [r4, #12]
 800d996:	6923      	ldr	r3, [r4, #16]
 800d998:	b94b      	cbnz	r3, 800d9ae <__swsetup_r+0x9a>
 800d99a:	89a3      	ldrh	r3, [r4, #12]
 800d99c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d9a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9a4:	d003      	beq.n	800d9ae <__swsetup_r+0x9a>
 800d9a6:	4621      	mov	r1, r4
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	f000 fa09 	bl	800ddc0 <__smakebuf_r>
 800d9ae:	89a0      	ldrh	r0, [r4, #12]
 800d9b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9b4:	f010 0301 	ands.w	r3, r0, #1
 800d9b8:	d00a      	beq.n	800d9d0 <__swsetup_r+0xbc>
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	60a3      	str	r3, [r4, #8]
 800d9be:	6963      	ldr	r3, [r4, #20]
 800d9c0:	425b      	negs	r3, r3
 800d9c2:	61a3      	str	r3, [r4, #24]
 800d9c4:	6923      	ldr	r3, [r4, #16]
 800d9c6:	b943      	cbnz	r3, 800d9da <__swsetup_r+0xc6>
 800d9c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d9cc:	d1ba      	bne.n	800d944 <__swsetup_r+0x30>
 800d9ce:	bd70      	pop	{r4, r5, r6, pc}
 800d9d0:	0781      	lsls	r1, r0, #30
 800d9d2:	bf58      	it	pl
 800d9d4:	6963      	ldrpl	r3, [r4, #20]
 800d9d6:	60a3      	str	r3, [r4, #8]
 800d9d8:	e7f4      	b.n	800d9c4 <__swsetup_r+0xb0>
 800d9da:	2000      	movs	r0, #0
 800d9dc:	e7f7      	b.n	800d9ce <__swsetup_r+0xba>
 800d9de:	bf00      	nop
 800d9e0:	2000022c 	.word	0x2000022c
 800d9e4:	0800e774 	.word	0x0800e774
 800d9e8:	0800e794 	.word	0x0800e794
 800d9ec:	0800e754 	.word	0x0800e754

0800d9f0 <abort>:
 800d9f0:	b508      	push	{r3, lr}
 800d9f2:	2006      	movs	r0, #6
 800d9f4:	f000 fa54 	bl	800dea0 <raise>
 800d9f8:	2001      	movs	r0, #1
 800d9fa:	f7f6 fd59 	bl	80044b0 <_exit>
	...

0800da00 <__sflush_r>:
 800da00:	898a      	ldrh	r2, [r1, #12]
 800da02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da06:	4605      	mov	r5, r0
 800da08:	0710      	lsls	r0, r2, #28
 800da0a:	460c      	mov	r4, r1
 800da0c:	d458      	bmi.n	800dac0 <__sflush_r+0xc0>
 800da0e:	684b      	ldr	r3, [r1, #4]
 800da10:	2b00      	cmp	r3, #0
 800da12:	dc05      	bgt.n	800da20 <__sflush_r+0x20>
 800da14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da16:	2b00      	cmp	r3, #0
 800da18:	dc02      	bgt.n	800da20 <__sflush_r+0x20>
 800da1a:	2000      	movs	r0, #0
 800da1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da22:	2e00      	cmp	r6, #0
 800da24:	d0f9      	beq.n	800da1a <__sflush_r+0x1a>
 800da26:	2300      	movs	r3, #0
 800da28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da2c:	682f      	ldr	r7, [r5, #0]
 800da2e:	602b      	str	r3, [r5, #0]
 800da30:	d032      	beq.n	800da98 <__sflush_r+0x98>
 800da32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da34:	89a3      	ldrh	r3, [r4, #12]
 800da36:	075a      	lsls	r2, r3, #29
 800da38:	d505      	bpl.n	800da46 <__sflush_r+0x46>
 800da3a:	6863      	ldr	r3, [r4, #4]
 800da3c:	1ac0      	subs	r0, r0, r3
 800da3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da40:	b10b      	cbz	r3, 800da46 <__sflush_r+0x46>
 800da42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da44:	1ac0      	subs	r0, r0, r3
 800da46:	2300      	movs	r3, #0
 800da48:	4602      	mov	r2, r0
 800da4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da4c:	6a21      	ldr	r1, [r4, #32]
 800da4e:	4628      	mov	r0, r5
 800da50:	47b0      	blx	r6
 800da52:	1c43      	adds	r3, r0, #1
 800da54:	89a3      	ldrh	r3, [r4, #12]
 800da56:	d106      	bne.n	800da66 <__sflush_r+0x66>
 800da58:	6829      	ldr	r1, [r5, #0]
 800da5a:	291d      	cmp	r1, #29
 800da5c:	d82c      	bhi.n	800dab8 <__sflush_r+0xb8>
 800da5e:	4a2a      	ldr	r2, [pc, #168]	; (800db08 <__sflush_r+0x108>)
 800da60:	40ca      	lsrs	r2, r1
 800da62:	07d6      	lsls	r6, r2, #31
 800da64:	d528      	bpl.n	800dab8 <__sflush_r+0xb8>
 800da66:	2200      	movs	r2, #0
 800da68:	6062      	str	r2, [r4, #4]
 800da6a:	04d9      	lsls	r1, r3, #19
 800da6c:	6922      	ldr	r2, [r4, #16]
 800da6e:	6022      	str	r2, [r4, #0]
 800da70:	d504      	bpl.n	800da7c <__sflush_r+0x7c>
 800da72:	1c42      	adds	r2, r0, #1
 800da74:	d101      	bne.n	800da7a <__sflush_r+0x7a>
 800da76:	682b      	ldr	r3, [r5, #0]
 800da78:	b903      	cbnz	r3, 800da7c <__sflush_r+0x7c>
 800da7a:	6560      	str	r0, [r4, #84]	; 0x54
 800da7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da7e:	602f      	str	r7, [r5, #0]
 800da80:	2900      	cmp	r1, #0
 800da82:	d0ca      	beq.n	800da1a <__sflush_r+0x1a>
 800da84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da88:	4299      	cmp	r1, r3
 800da8a:	d002      	beq.n	800da92 <__sflush_r+0x92>
 800da8c:	4628      	mov	r0, r5
 800da8e:	f7ff fa9b 	bl	800cfc8 <_free_r>
 800da92:	2000      	movs	r0, #0
 800da94:	6360      	str	r0, [r4, #52]	; 0x34
 800da96:	e7c1      	b.n	800da1c <__sflush_r+0x1c>
 800da98:	6a21      	ldr	r1, [r4, #32]
 800da9a:	2301      	movs	r3, #1
 800da9c:	4628      	mov	r0, r5
 800da9e:	47b0      	blx	r6
 800daa0:	1c41      	adds	r1, r0, #1
 800daa2:	d1c7      	bne.n	800da34 <__sflush_r+0x34>
 800daa4:	682b      	ldr	r3, [r5, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d0c4      	beq.n	800da34 <__sflush_r+0x34>
 800daaa:	2b1d      	cmp	r3, #29
 800daac:	d001      	beq.n	800dab2 <__sflush_r+0xb2>
 800daae:	2b16      	cmp	r3, #22
 800dab0:	d101      	bne.n	800dab6 <__sflush_r+0xb6>
 800dab2:	602f      	str	r7, [r5, #0]
 800dab4:	e7b1      	b.n	800da1a <__sflush_r+0x1a>
 800dab6:	89a3      	ldrh	r3, [r4, #12]
 800dab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dabc:	81a3      	strh	r3, [r4, #12]
 800dabe:	e7ad      	b.n	800da1c <__sflush_r+0x1c>
 800dac0:	690f      	ldr	r7, [r1, #16]
 800dac2:	2f00      	cmp	r7, #0
 800dac4:	d0a9      	beq.n	800da1a <__sflush_r+0x1a>
 800dac6:	0793      	lsls	r3, r2, #30
 800dac8:	680e      	ldr	r6, [r1, #0]
 800daca:	bf08      	it	eq
 800dacc:	694b      	ldreq	r3, [r1, #20]
 800dace:	600f      	str	r7, [r1, #0]
 800dad0:	bf18      	it	ne
 800dad2:	2300      	movne	r3, #0
 800dad4:	eba6 0807 	sub.w	r8, r6, r7
 800dad8:	608b      	str	r3, [r1, #8]
 800dada:	f1b8 0f00 	cmp.w	r8, #0
 800dade:	dd9c      	ble.n	800da1a <__sflush_r+0x1a>
 800dae0:	6a21      	ldr	r1, [r4, #32]
 800dae2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dae4:	4643      	mov	r3, r8
 800dae6:	463a      	mov	r2, r7
 800dae8:	4628      	mov	r0, r5
 800daea:	47b0      	blx	r6
 800daec:	2800      	cmp	r0, #0
 800daee:	dc06      	bgt.n	800dafe <__sflush_r+0xfe>
 800daf0:	89a3      	ldrh	r3, [r4, #12]
 800daf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daf6:	81a3      	strh	r3, [r4, #12]
 800daf8:	f04f 30ff 	mov.w	r0, #4294967295
 800dafc:	e78e      	b.n	800da1c <__sflush_r+0x1c>
 800dafe:	4407      	add	r7, r0
 800db00:	eba8 0800 	sub.w	r8, r8, r0
 800db04:	e7e9      	b.n	800dada <__sflush_r+0xda>
 800db06:	bf00      	nop
 800db08:	20400001 	.word	0x20400001

0800db0c <_fflush_r>:
 800db0c:	b538      	push	{r3, r4, r5, lr}
 800db0e:	690b      	ldr	r3, [r1, #16]
 800db10:	4605      	mov	r5, r0
 800db12:	460c      	mov	r4, r1
 800db14:	b913      	cbnz	r3, 800db1c <_fflush_r+0x10>
 800db16:	2500      	movs	r5, #0
 800db18:	4628      	mov	r0, r5
 800db1a:	bd38      	pop	{r3, r4, r5, pc}
 800db1c:	b118      	cbz	r0, 800db26 <_fflush_r+0x1a>
 800db1e:	6983      	ldr	r3, [r0, #24]
 800db20:	b90b      	cbnz	r3, 800db26 <_fflush_r+0x1a>
 800db22:	f000 f887 	bl	800dc34 <__sinit>
 800db26:	4b14      	ldr	r3, [pc, #80]	; (800db78 <_fflush_r+0x6c>)
 800db28:	429c      	cmp	r4, r3
 800db2a:	d11b      	bne.n	800db64 <_fflush_r+0x58>
 800db2c:	686c      	ldr	r4, [r5, #4]
 800db2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d0ef      	beq.n	800db16 <_fflush_r+0xa>
 800db36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db38:	07d0      	lsls	r0, r2, #31
 800db3a:	d404      	bmi.n	800db46 <_fflush_r+0x3a>
 800db3c:	0599      	lsls	r1, r3, #22
 800db3e:	d402      	bmi.n	800db46 <_fflush_r+0x3a>
 800db40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db42:	f000 f915 	bl	800dd70 <__retarget_lock_acquire_recursive>
 800db46:	4628      	mov	r0, r5
 800db48:	4621      	mov	r1, r4
 800db4a:	f7ff ff59 	bl	800da00 <__sflush_r>
 800db4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db50:	07da      	lsls	r2, r3, #31
 800db52:	4605      	mov	r5, r0
 800db54:	d4e0      	bmi.n	800db18 <_fflush_r+0xc>
 800db56:	89a3      	ldrh	r3, [r4, #12]
 800db58:	059b      	lsls	r3, r3, #22
 800db5a:	d4dd      	bmi.n	800db18 <_fflush_r+0xc>
 800db5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db5e:	f000 f908 	bl	800dd72 <__retarget_lock_release_recursive>
 800db62:	e7d9      	b.n	800db18 <_fflush_r+0xc>
 800db64:	4b05      	ldr	r3, [pc, #20]	; (800db7c <_fflush_r+0x70>)
 800db66:	429c      	cmp	r4, r3
 800db68:	d101      	bne.n	800db6e <_fflush_r+0x62>
 800db6a:	68ac      	ldr	r4, [r5, #8]
 800db6c:	e7df      	b.n	800db2e <_fflush_r+0x22>
 800db6e:	4b04      	ldr	r3, [pc, #16]	; (800db80 <_fflush_r+0x74>)
 800db70:	429c      	cmp	r4, r3
 800db72:	bf08      	it	eq
 800db74:	68ec      	ldreq	r4, [r5, #12]
 800db76:	e7da      	b.n	800db2e <_fflush_r+0x22>
 800db78:	0800e774 	.word	0x0800e774
 800db7c:	0800e794 	.word	0x0800e794
 800db80:	0800e754 	.word	0x0800e754

0800db84 <std>:
 800db84:	2300      	movs	r3, #0
 800db86:	b510      	push	{r4, lr}
 800db88:	4604      	mov	r4, r0
 800db8a:	e9c0 3300 	strd	r3, r3, [r0]
 800db8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db92:	6083      	str	r3, [r0, #8]
 800db94:	8181      	strh	r1, [r0, #12]
 800db96:	6643      	str	r3, [r0, #100]	; 0x64
 800db98:	81c2      	strh	r2, [r0, #14]
 800db9a:	6183      	str	r3, [r0, #24]
 800db9c:	4619      	mov	r1, r3
 800db9e:	2208      	movs	r2, #8
 800dba0:	305c      	adds	r0, #92	; 0x5c
 800dba2:	f7fb fddb 	bl	800975c <memset>
 800dba6:	4b05      	ldr	r3, [pc, #20]	; (800dbbc <std+0x38>)
 800dba8:	6263      	str	r3, [r4, #36]	; 0x24
 800dbaa:	4b05      	ldr	r3, [pc, #20]	; (800dbc0 <std+0x3c>)
 800dbac:	62a3      	str	r3, [r4, #40]	; 0x28
 800dbae:	4b05      	ldr	r3, [pc, #20]	; (800dbc4 <std+0x40>)
 800dbb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dbb2:	4b05      	ldr	r3, [pc, #20]	; (800dbc8 <std+0x44>)
 800dbb4:	6224      	str	r4, [r4, #32]
 800dbb6:	6323      	str	r3, [r4, #48]	; 0x30
 800dbb8:	bd10      	pop	{r4, pc}
 800dbba:	bf00      	nop
 800dbbc:	0800ded9 	.word	0x0800ded9
 800dbc0:	0800defb 	.word	0x0800defb
 800dbc4:	0800df33 	.word	0x0800df33
 800dbc8:	0800df57 	.word	0x0800df57

0800dbcc <_cleanup_r>:
 800dbcc:	4901      	ldr	r1, [pc, #4]	; (800dbd4 <_cleanup_r+0x8>)
 800dbce:	f000 b8af 	b.w	800dd30 <_fwalk_reent>
 800dbd2:	bf00      	nop
 800dbd4:	0800db0d 	.word	0x0800db0d

0800dbd8 <__sfmoreglue>:
 800dbd8:	b570      	push	{r4, r5, r6, lr}
 800dbda:	2268      	movs	r2, #104	; 0x68
 800dbdc:	1e4d      	subs	r5, r1, #1
 800dbde:	4355      	muls	r5, r2
 800dbe0:	460e      	mov	r6, r1
 800dbe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dbe6:	f7ff fa5b 	bl	800d0a0 <_malloc_r>
 800dbea:	4604      	mov	r4, r0
 800dbec:	b140      	cbz	r0, 800dc00 <__sfmoreglue+0x28>
 800dbee:	2100      	movs	r1, #0
 800dbf0:	e9c0 1600 	strd	r1, r6, [r0]
 800dbf4:	300c      	adds	r0, #12
 800dbf6:	60a0      	str	r0, [r4, #8]
 800dbf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dbfc:	f7fb fdae 	bl	800975c <memset>
 800dc00:	4620      	mov	r0, r4
 800dc02:	bd70      	pop	{r4, r5, r6, pc}

0800dc04 <__sfp_lock_acquire>:
 800dc04:	4801      	ldr	r0, [pc, #4]	; (800dc0c <__sfp_lock_acquire+0x8>)
 800dc06:	f000 b8b3 	b.w	800dd70 <__retarget_lock_acquire_recursive>
 800dc0a:	bf00      	nop
 800dc0c:	20001069 	.word	0x20001069

0800dc10 <__sfp_lock_release>:
 800dc10:	4801      	ldr	r0, [pc, #4]	; (800dc18 <__sfp_lock_release+0x8>)
 800dc12:	f000 b8ae 	b.w	800dd72 <__retarget_lock_release_recursive>
 800dc16:	bf00      	nop
 800dc18:	20001069 	.word	0x20001069

0800dc1c <__sinit_lock_acquire>:
 800dc1c:	4801      	ldr	r0, [pc, #4]	; (800dc24 <__sinit_lock_acquire+0x8>)
 800dc1e:	f000 b8a7 	b.w	800dd70 <__retarget_lock_acquire_recursive>
 800dc22:	bf00      	nop
 800dc24:	2000106a 	.word	0x2000106a

0800dc28 <__sinit_lock_release>:
 800dc28:	4801      	ldr	r0, [pc, #4]	; (800dc30 <__sinit_lock_release+0x8>)
 800dc2a:	f000 b8a2 	b.w	800dd72 <__retarget_lock_release_recursive>
 800dc2e:	bf00      	nop
 800dc30:	2000106a 	.word	0x2000106a

0800dc34 <__sinit>:
 800dc34:	b510      	push	{r4, lr}
 800dc36:	4604      	mov	r4, r0
 800dc38:	f7ff fff0 	bl	800dc1c <__sinit_lock_acquire>
 800dc3c:	69a3      	ldr	r3, [r4, #24]
 800dc3e:	b11b      	cbz	r3, 800dc48 <__sinit+0x14>
 800dc40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc44:	f7ff bff0 	b.w	800dc28 <__sinit_lock_release>
 800dc48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dc4c:	6523      	str	r3, [r4, #80]	; 0x50
 800dc4e:	4b13      	ldr	r3, [pc, #76]	; (800dc9c <__sinit+0x68>)
 800dc50:	4a13      	ldr	r2, [pc, #76]	; (800dca0 <__sinit+0x6c>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	62a2      	str	r2, [r4, #40]	; 0x28
 800dc56:	42a3      	cmp	r3, r4
 800dc58:	bf04      	itt	eq
 800dc5a:	2301      	moveq	r3, #1
 800dc5c:	61a3      	streq	r3, [r4, #24]
 800dc5e:	4620      	mov	r0, r4
 800dc60:	f000 f820 	bl	800dca4 <__sfp>
 800dc64:	6060      	str	r0, [r4, #4]
 800dc66:	4620      	mov	r0, r4
 800dc68:	f000 f81c 	bl	800dca4 <__sfp>
 800dc6c:	60a0      	str	r0, [r4, #8]
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f000 f818 	bl	800dca4 <__sfp>
 800dc74:	2200      	movs	r2, #0
 800dc76:	60e0      	str	r0, [r4, #12]
 800dc78:	2104      	movs	r1, #4
 800dc7a:	6860      	ldr	r0, [r4, #4]
 800dc7c:	f7ff ff82 	bl	800db84 <std>
 800dc80:	68a0      	ldr	r0, [r4, #8]
 800dc82:	2201      	movs	r2, #1
 800dc84:	2109      	movs	r1, #9
 800dc86:	f7ff ff7d 	bl	800db84 <std>
 800dc8a:	68e0      	ldr	r0, [r4, #12]
 800dc8c:	2202      	movs	r2, #2
 800dc8e:	2112      	movs	r1, #18
 800dc90:	f7ff ff78 	bl	800db84 <std>
 800dc94:	2301      	movs	r3, #1
 800dc96:	61a3      	str	r3, [r4, #24]
 800dc98:	e7d2      	b.n	800dc40 <__sinit+0xc>
 800dc9a:	bf00      	nop
 800dc9c:	0800e30c 	.word	0x0800e30c
 800dca0:	0800dbcd 	.word	0x0800dbcd

0800dca4 <__sfp>:
 800dca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dca6:	4607      	mov	r7, r0
 800dca8:	f7ff ffac 	bl	800dc04 <__sfp_lock_acquire>
 800dcac:	4b1e      	ldr	r3, [pc, #120]	; (800dd28 <__sfp+0x84>)
 800dcae:	681e      	ldr	r6, [r3, #0]
 800dcb0:	69b3      	ldr	r3, [r6, #24]
 800dcb2:	b913      	cbnz	r3, 800dcba <__sfp+0x16>
 800dcb4:	4630      	mov	r0, r6
 800dcb6:	f7ff ffbd 	bl	800dc34 <__sinit>
 800dcba:	3648      	adds	r6, #72	; 0x48
 800dcbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dcc0:	3b01      	subs	r3, #1
 800dcc2:	d503      	bpl.n	800dccc <__sfp+0x28>
 800dcc4:	6833      	ldr	r3, [r6, #0]
 800dcc6:	b30b      	cbz	r3, 800dd0c <__sfp+0x68>
 800dcc8:	6836      	ldr	r6, [r6, #0]
 800dcca:	e7f7      	b.n	800dcbc <__sfp+0x18>
 800dccc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dcd0:	b9d5      	cbnz	r5, 800dd08 <__sfp+0x64>
 800dcd2:	4b16      	ldr	r3, [pc, #88]	; (800dd2c <__sfp+0x88>)
 800dcd4:	60e3      	str	r3, [r4, #12]
 800dcd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dcda:	6665      	str	r5, [r4, #100]	; 0x64
 800dcdc:	f000 f847 	bl	800dd6e <__retarget_lock_init_recursive>
 800dce0:	f7ff ff96 	bl	800dc10 <__sfp_lock_release>
 800dce4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dce8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dcec:	6025      	str	r5, [r4, #0]
 800dcee:	61a5      	str	r5, [r4, #24]
 800dcf0:	2208      	movs	r2, #8
 800dcf2:	4629      	mov	r1, r5
 800dcf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dcf8:	f7fb fd30 	bl	800975c <memset>
 800dcfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dd00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dd04:	4620      	mov	r0, r4
 800dd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd08:	3468      	adds	r4, #104	; 0x68
 800dd0a:	e7d9      	b.n	800dcc0 <__sfp+0x1c>
 800dd0c:	2104      	movs	r1, #4
 800dd0e:	4638      	mov	r0, r7
 800dd10:	f7ff ff62 	bl	800dbd8 <__sfmoreglue>
 800dd14:	4604      	mov	r4, r0
 800dd16:	6030      	str	r0, [r6, #0]
 800dd18:	2800      	cmp	r0, #0
 800dd1a:	d1d5      	bne.n	800dcc8 <__sfp+0x24>
 800dd1c:	f7ff ff78 	bl	800dc10 <__sfp_lock_release>
 800dd20:	230c      	movs	r3, #12
 800dd22:	603b      	str	r3, [r7, #0]
 800dd24:	e7ee      	b.n	800dd04 <__sfp+0x60>
 800dd26:	bf00      	nop
 800dd28:	0800e30c 	.word	0x0800e30c
 800dd2c:	ffff0001 	.word	0xffff0001

0800dd30 <_fwalk_reent>:
 800dd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd34:	4606      	mov	r6, r0
 800dd36:	4688      	mov	r8, r1
 800dd38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dd3c:	2700      	movs	r7, #0
 800dd3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd42:	f1b9 0901 	subs.w	r9, r9, #1
 800dd46:	d505      	bpl.n	800dd54 <_fwalk_reent+0x24>
 800dd48:	6824      	ldr	r4, [r4, #0]
 800dd4a:	2c00      	cmp	r4, #0
 800dd4c:	d1f7      	bne.n	800dd3e <_fwalk_reent+0xe>
 800dd4e:	4638      	mov	r0, r7
 800dd50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd54:	89ab      	ldrh	r3, [r5, #12]
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d907      	bls.n	800dd6a <_fwalk_reent+0x3a>
 800dd5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	d003      	beq.n	800dd6a <_fwalk_reent+0x3a>
 800dd62:	4629      	mov	r1, r5
 800dd64:	4630      	mov	r0, r6
 800dd66:	47c0      	blx	r8
 800dd68:	4307      	orrs	r7, r0
 800dd6a:	3568      	adds	r5, #104	; 0x68
 800dd6c:	e7e9      	b.n	800dd42 <_fwalk_reent+0x12>

0800dd6e <__retarget_lock_init_recursive>:
 800dd6e:	4770      	bx	lr

0800dd70 <__retarget_lock_acquire_recursive>:
 800dd70:	4770      	bx	lr

0800dd72 <__retarget_lock_release_recursive>:
 800dd72:	4770      	bx	lr

0800dd74 <__swhatbuf_r>:
 800dd74:	b570      	push	{r4, r5, r6, lr}
 800dd76:	460e      	mov	r6, r1
 800dd78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd7c:	2900      	cmp	r1, #0
 800dd7e:	b096      	sub	sp, #88	; 0x58
 800dd80:	4614      	mov	r4, r2
 800dd82:	461d      	mov	r5, r3
 800dd84:	da08      	bge.n	800dd98 <__swhatbuf_r+0x24>
 800dd86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	602a      	str	r2, [r5, #0]
 800dd8e:	061a      	lsls	r2, r3, #24
 800dd90:	d410      	bmi.n	800ddb4 <__swhatbuf_r+0x40>
 800dd92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd96:	e00e      	b.n	800ddb6 <__swhatbuf_r+0x42>
 800dd98:	466a      	mov	r2, sp
 800dd9a:	f000 f903 	bl	800dfa4 <_fstat_r>
 800dd9e:	2800      	cmp	r0, #0
 800dda0:	dbf1      	blt.n	800dd86 <__swhatbuf_r+0x12>
 800dda2:	9a01      	ldr	r2, [sp, #4]
 800dda4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dda8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ddac:	425a      	negs	r2, r3
 800ddae:	415a      	adcs	r2, r3
 800ddb0:	602a      	str	r2, [r5, #0]
 800ddb2:	e7ee      	b.n	800dd92 <__swhatbuf_r+0x1e>
 800ddb4:	2340      	movs	r3, #64	; 0x40
 800ddb6:	2000      	movs	r0, #0
 800ddb8:	6023      	str	r3, [r4, #0]
 800ddba:	b016      	add	sp, #88	; 0x58
 800ddbc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ddc0 <__smakebuf_r>:
 800ddc0:	898b      	ldrh	r3, [r1, #12]
 800ddc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ddc4:	079d      	lsls	r5, r3, #30
 800ddc6:	4606      	mov	r6, r0
 800ddc8:	460c      	mov	r4, r1
 800ddca:	d507      	bpl.n	800dddc <__smakebuf_r+0x1c>
 800ddcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ddd0:	6023      	str	r3, [r4, #0]
 800ddd2:	6123      	str	r3, [r4, #16]
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	6163      	str	r3, [r4, #20]
 800ddd8:	b002      	add	sp, #8
 800ddda:	bd70      	pop	{r4, r5, r6, pc}
 800dddc:	ab01      	add	r3, sp, #4
 800ddde:	466a      	mov	r2, sp
 800dde0:	f7ff ffc8 	bl	800dd74 <__swhatbuf_r>
 800dde4:	9900      	ldr	r1, [sp, #0]
 800dde6:	4605      	mov	r5, r0
 800dde8:	4630      	mov	r0, r6
 800ddea:	f7ff f959 	bl	800d0a0 <_malloc_r>
 800ddee:	b948      	cbnz	r0, 800de04 <__smakebuf_r+0x44>
 800ddf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddf4:	059a      	lsls	r2, r3, #22
 800ddf6:	d4ef      	bmi.n	800ddd8 <__smakebuf_r+0x18>
 800ddf8:	f023 0303 	bic.w	r3, r3, #3
 800ddfc:	f043 0302 	orr.w	r3, r3, #2
 800de00:	81a3      	strh	r3, [r4, #12]
 800de02:	e7e3      	b.n	800ddcc <__smakebuf_r+0xc>
 800de04:	4b0d      	ldr	r3, [pc, #52]	; (800de3c <__smakebuf_r+0x7c>)
 800de06:	62b3      	str	r3, [r6, #40]	; 0x28
 800de08:	89a3      	ldrh	r3, [r4, #12]
 800de0a:	6020      	str	r0, [r4, #0]
 800de0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de10:	81a3      	strh	r3, [r4, #12]
 800de12:	9b00      	ldr	r3, [sp, #0]
 800de14:	6163      	str	r3, [r4, #20]
 800de16:	9b01      	ldr	r3, [sp, #4]
 800de18:	6120      	str	r0, [r4, #16]
 800de1a:	b15b      	cbz	r3, 800de34 <__smakebuf_r+0x74>
 800de1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de20:	4630      	mov	r0, r6
 800de22:	f000 f8d1 	bl	800dfc8 <_isatty_r>
 800de26:	b128      	cbz	r0, 800de34 <__smakebuf_r+0x74>
 800de28:	89a3      	ldrh	r3, [r4, #12]
 800de2a:	f023 0303 	bic.w	r3, r3, #3
 800de2e:	f043 0301 	orr.w	r3, r3, #1
 800de32:	81a3      	strh	r3, [r4, #12]
 800de34:	89a0      	ldrh	r0, [r4, #12]
 800de36:	4305      	orrs	r5, r0
 800de38:	81a5      	strh	r5, [r4, #12]
 800de3a:	e7cd      	b.n	800ddd8 <__smakebuf_r+0x18>
 800de3c:	0800dbcd 	.word	0x0800dbcd

0800de40 <_malloc_usable_size_r>:
 800de40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de44:	1f18      	subs	r0, r3, #4
 800de46:	2b00      	cmp	r3, #0
 800de48:	bfbc      	itt	lt
 800de4a:	580b      	ldrlt	r3, [r1, r0]
 800de4c:	18c0      	addlt	r0, r0, r3
 800de4e:	4770      	bx	lr

0800de50 <_raise_r>:
 800de50:	291f      	cmp	r1, #31
 800de52:	b538      	push	{r3, r4, r5, lr}
 800de54:	4604      	mov	r4, r0
 800de56:	460d      	mov	r5, r1
 800de58:	d904      	bls.n	800de64 <_raise_r+0x14>
 800de5a:	2316      	movs	r3, #22
 800de5c:	6003      	str	r3, [r0, #0]
 800de5e:	f04f 30ff 	mov.w	r0, #4294967295
 800de62:	bd38      	pop	{r3, r4, r5, pc}
 800de64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800de66:	b112      	cbz	r2, 800de6e <_raise_r+0x1e>
 800de68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de6c:	b94b      	cbnz	r3, 800de82 <_raise_r+0x32>
 800de6e:	4620      	mov	r0, r4
 800de70:	f000 f830 	bl	800ded4 <_getpid_r>
 800de74:	462a      	mov	r2, r5
 800de76:	4601      	mov	r1, r0
 800de78:	4620      	mov	r0, r4
 800de7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de7e:	f000 b817 	b.w	800deb0 <_kill_r>
 800de82:	2b01      	cmp	r3, #1
 800de84:	d00a      	beq.n	800de9c <_raise_r+0x4c>
 800de86:	1c59      	adds	r1, r3, #1
 800de88:	d103      	bne.n	800de92 <_raise_r+0x42>
 800de8a:	2316      	movs	r3, #22
 800de8c:	6003      	str	r3, [r0, #0]
 800de8e:	2001      	movs	r0, #1
 800de90:	e7e7      	b.n	800de62 <_raise_r+0x12>
 800de92:	2400      	movs	r4, #0
 800de94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800de98:	4628      	mov	r0, r5
 800de9a:	4798      	blx	r3
 800de9c:	2000      	movs	r0, #0
 800de9e:	e7e0      	b.n	800de62 <_raise_r+0x12>

0800dea0 <raise>:
 800dea0:	4b02      	ldr	r3, [pc, #8]	; (800deac <raise+0xc>)
 800dea2:	4601      	mov	r1, r0
 800dea4:	6818      	ldr	r0, [r3, #0]
 800dea6:	f7ff bfd3 	b.w	800de50 <_raise_r>
 800deaa:	bf00      	nop
 800deac:	2000022c 	.word	0x2000022c

0800deb0 <_kill_r>:
 800deb0:	b538      	push	{r3, r4, r5, lr}
 800deb2:	4d07      	ldr	r5, [pc, #28]	; (800ded0 <_kill_r+0x20>)
 800deb4:	2300      	movs	r3, #0
 800deb6:	4604      	mov	r4, r0
 800deb8:	4608      	mov	r0, r1
 800deba:	4611      	mov	r1, r2
 800debc:	602b      	str	r3, [r5, #0]
 800debe:	f7f6 fae7 	bl	8004490 <_kill>
 800dec2:	1c43      	adds	r3, r0, #1
 800dec4:	d102      	bne.n	800decc <_kill_r+0x1c>
 800dec6:	682b      	ldr	r3, [r5, #0]
 800dec8:	b103      	cbz	r3, 800decc <_kill_r+0x1c>
 800deca:	6023      	str	r3, [r4, #0]
 800decc:	bd38      	pop	{r3, r4, r5, pc}
 800dece:	bf00      	nop
 800ded0:	20001064 	.word	0x20001064

0800ded4 <_getpid_r>:
 800ded4:	f7f6 bad4 	b.w	8004480 <_getpid>

0800ded8 <__sread>:
 800ded8:	b510      	push	{r4, lr}
 800deda:	460c      	mov	r4, r1
 800dedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dee0:	f000 f894 	bl	800e00c <_read_r>
 800dee4:	2800      	cmp	r0, #0
 800dee6:	bfab      	itete	ge
 800dee8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800deea:	89a3      	ldrhlt	r3, [r4, #12]
 800deec:	181b      	addge	r3, r3, r0
 800deee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800def2:	bfac      	ite	ge
 800def4:	6563      	strge	r3, [r4, #84]	; 0x54
 800def6:	81a3      	strhlt	r3, [r4, #12]
 800def8:	bd10      	pop	{r4, pc}

0800defa <__swrite>:
 800defa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800defe:	461f      	mov	r7, r3
 800df00:	898b      	ldrh	r3, [r1, #12]
 800df02:	05db      	lsls	r3, r3, #23
 800df04:	4605      	mov	r5, r0
 800df06:	460c      	mov	r4, r1
 800df08:	4616      	mov	r6, r2
 800df0a:	d505      	bpl.n	800df18 <__swrite+0x1e>
 800df0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df10:	2302      	movs	r3, #2
 800df12:	2200      	movs	r2, #0
 800df14:	f000 f868 	bl	800dfe8 <_lseek_r>
 800df18:	89a3      	ldrh	r3, [r4, #12]
 800df1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df22:	81a3      	strh	r3, [r4, #12]
 800df24:	4632      	mov	r2, r6
 800df26:	463b      	mov	r3, r7
 800df28:	4628      	mov	r0, r5
 800df2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df2e:	f000 b817 	b.w	800df60 <_write_r>

0800df32 <__sseek>:
 800df32:	b510      	push	{r4, lr}
 800df34:	460c      	mov	r4, r1
 800df36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df3a:	f000 f855 	bl	800dfe8 <_lseek_r>
 800df3e:	1c43      	adds	r3, r0, #1
 800df40:	89a3      	ldrh	r3, [r4, #12]
 800df42:	bf15      	itete	ne
 800df44:	6560      	strne	r0, [r4, #84]	; 0x54
 800df46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df4e:	81a3      	strheq	r3, [r4, #12]
 800df50:	bf18      	it	ne
 800df52:	81a3      	strhne	r3, [r4, #12]
 800df54:	bd10      	pop	{r4, pc}

0800df56 <__sclose>:
 800df56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df5a:	f000 b813 	b.w	800df84 <_close_r>
	...

0800df60 <_write_r>:
 800df60:	b538      	push	{r3, r4, r5, lr}
 800df62:	4d07      	ldr	r5, [pc, #28]	; (800df80 <_write_r+0x20>)
 800df64:	4604      	mov	r4, r0
 800df66:	4608      	mov	r0, r1
 800df68:	4611      	mov	r1, r2
 800df6a:	2200      	movs	r2, #0
 800df6c:	602a      	str	r2, [r5, #0]
 800df6e:	461a      	mov	r2, r3
 800df70:	f7f6 fac5 	bl	80044fe <_write>
 800df74:	1c43      	adds	r3, r0, #1
 800df76:	d102      	bne.n	800df7e <_write_r+0x1e>
 800df78:	682b      	ldr	r3, [r5, #0]
 800df7a:	b103      	cbz	r3, 800df7e <_write_r+0x1e>
 800df7c:	6023      	str	r3, [r4, #0]
 800df7e:	bd38      	pop	{r3, r4, r5, pc}
 800df80:	20001064 	.word	0x20001064

0800df84 <_close_r>:
 800df84:	b538      	push	{r3, r4, r5, lr}
 800df86:	4d06      	ldr	r5, [pc, #24]	; (800dfa0 <_close_r+0x1c>)
 800df88:	2300      	movs	r3, #0
 800df8a:	4604      	mov	r4, r0
 800df8c:	4608      	mov	r0, r1
 800df8e:	602b      	str	r3, [r5, #0]
 800df90:	f7f6 fad1 	bl	8004536 <_close>
 800df94:	1c43      	adds	r3, r0, #1
 800df96:	d102      	bne.n	800df9e <_close_r+0x1a>
 800df98:	682b      	ldr	r3, [r5, #0]
 800df9a:	b103      	cbz	r3, 800df9e <_close_r+0x1a>
 800df9c:	6023      	str	r3, [r4, #0]
 800df9e:	bd38      	pop	{r3, r4, r5, pc}
 800dfa0:	20001064 	.word	0x20001064

0800dfa4 <_fstat_r>:
 800dfa4:	b538      	push	{r3, r4, r5, lr}
 800dfa6:	4d07      	ldr	r5, [pc, #28]	; (800dfc4 <_fstat_r+0x20>)
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	4604      	mov	r4, r0
 800dfac:	4608      	mov	r0, r1
 800dfae:	4611      	mov	r1, r2
 800dfb0:	602b      	str	r3, [r5, #0]
 800dfb2:	f7f6 facc 	bl	800454e <_fstat>
 800dfb6:	1c43      	adds	r3, r0, #1
 800dfb8:	d102      	bne.n	800dfc0 <_fstat_r+0x1c>
 800dfba:	682b      	ldr	r3, [r5, #0]
 800dfbc:	b103      	cbz	r3, 800dfc0 <_fstat_r+0x1c>
 800dfbe:	6023      	str	r3, [r4, #0]
 800dfc0:	bd38      	pop	{r3, r4, r5, pc}
 800dfc2:	bf00      	nop
 800dfc4:	20001064 	.word	0x20001064

0800dfc8 <_isatty_r>:
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	4d06      	ldr	r5, [pc, #24]	; (800dfe4 <_isatty_r+0x1c>)
 800dfcc:	2300      	movs	r3, #0
 800dfce:	4604      	mov	r4, r0
 800dfd0:	4608      	mov	r0, r1
 800dfd2:	602b      	str	r3, [r5, #0]
 800dfd4:	f7f6 facb 	bl	800456e <_isatty>
 800dfd8:	1c43      	adds	r3, r0, #1
 800dfda:	d102      	bne.n	800dfe2 <_isatty_r+0x1a>
 800dfdc:	682b      	ldr	r3, [r5, #0]
 800dfde:	b103      	cbz	r3, 800dfe2 <_isatty_r+0x1a>
 800dfe0:	6023      	str	r3, [r4, #0]
 800dfe2:	bd38      	pop	{r3, r4, r5, pc}
 800dfe4:	20001064 	.word	0x20001064

0800dfe8 <_lseek_r>:
 800dfe8:	b538      	push	{r3, r4, r5, lr}
 800dfea:	4d07      	ldr	r5, [pc, #28]	; (800e008 <_lseek_r+0x20>)
 800dfec:	4604      	mov	r4, r0
 800dfee:	4608      	mov	r0, r1
 800dff0:	4611      	mov	r1, r2
 800dff2:	2200      	movs	r2, #0
 800dff4:	602a      	str	r2, [r5, #0]
 800dff6:	461a      	mov	r2, r3
 800dff8:	f7f6 fac4 	bl	8004584 <_lseek>
 800dffc:	1c43      	adds	r3, r0, #1
 800dffe:	d102      	bne.n	800e006 <_lseek_r+0x1e>
 800e000:	682b      	ldr	r3, [r5, #0]
 800e002:	b103      	cbz	r3, 800e006 <_lseek_r+0x1e>
 800e004:	6023      	str	r3, [r4, #0]
 800e006:	bd38      	pop	{r3, r4, r5, pc}
 800e008:	20001064 	.word	0x20001064

0800e00c <_read_r>:
 800e00c:	b538      	push	{r3, r4, r5, lr}
 800e00e:	4d07      	ldr	r5, [pc, #28]	; (800e02c <_read_r+0x20>)
 800e010:	4604      	mov	r4, r0
 800e012:	4608      	mov	r0, r1
 800e014:	4611      	mov	r1, r2
 800e016:	2200      	movs	r2, #0
 800e018:	602a      	str	r2, [r5, #0]
 800e01a:	461a      	mov	r2, r3
 800e01c:	f7f6 fa52 	bl	80044c4 <_read>
 800e020:	1c43      	adds	r3, r0, #1
 800e022:	d102      	bne.n	800e02a <_read_r+0x1e>
 800e024:	682b      	ldr	r3, [r5, #0]
 800e026:	b103      	cbz	r3, 800e02a <_read_r+0x1e>
 800e028:	6023      	str	r3, [r4, #0]
 800e02a:	bd38      	pop	{r3, r4, r5, pc}
 800e02c:	20001064 	.word	0x20001064

0800e030 <acosf>:
 800e030:	b508      	push	{r3, lr}
 800e032:	ed2d 8b02 	vpush	{d8}
 800e036:	eeb0 8a40 	vmov.f32	s16, s0
 800e03a:	f000 f843 	bl	800e0c4 <__ieee754_acosf>
 800e03e:	eeb4 8a48 	vcmp.f32	s16, s16
 800e042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e046:	eef0 8a40 	vmov.f32	s17, s0
 800e04a:	d615      	bvs.n	800e078 <acosf+0x48>
 800e04c:	eeb0 0a48 	vmov.f32	s0, s16
 800e050:	f000 f933 	bl	800e2ba <fabsf>
 800e054:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e058:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e060:	dd0a      	ble.n	800e078 <acosf+0x48>
 800e062:	f7fb fb43 	bl	80096ec <__errno>
 800e066:	ecbd 8b02 	vpop	{d8}
 800e06a:	2321      	movs	r3, #33	; 0x21
 800e06c:	6003      	str	r3, [r0, #0]
 800e06e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e072:	4804      	ldr	r0, [pc, #16]	; (800e084 <acosf+0x54>)
 800e074:	f7fc b9f4 	b.w	800a460 <nanf>
 800e078:	eeb0 0a68 	vmov.f32	s0, s17
 800e07c:	ecbd 8b02 	vpop	{d8}
 800e080:	bd08      	pop	{r3, pc}
 800e082:	bf00      	nop
 800e084:	0800e750 	.word	0x0800e750

0800e088 <sqrtf>:
 800e088:	b508      	push	{r3, lr}
 800e08a:	ed2d 8b02 	vpush	{d8}
 800e08e:	eeb0 8a40 	vmov.f32	s16, s0
 800e092:	f000 f90f 	bl	800e2b4 <__ieee754_sqrtf>
 800e096:	eeb4 8a48 	vcmp.f32	s16, s16
 800e09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e09e:	d60c      	bvs.n	800e0ba <sqrtf+0x32>
 800e0a0:	eddf 8a07 	vldr	s17, [pc, #28]	; 800e0c0 <sqrtf+0x38>
 800e0a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0ac:	d505      	bpl.n	800e0ba <sqrtf+0x32>
 800e0ae:	f7fb fb1d 	bl	80096ec <__errno>
 800e0b2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e0b6:	2321      	movs	r3, #33	; 0x21
 800e0b8:	6003      	str	r3, [r0, #0]
 800e0ba:	ecbd 8b02 	vpop	{d8}
 800e0be:	bd08      	pop	{r3, pc}
 800e0c0:	00000000 	.word	0x00000000

0800e0c4 <__ieee754_acosf>:
 800e0c4:	b508      	push	{r3, lr}
 800e0c6:	ee10 3a10 	vmov	r3, s0
 800e0ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e0ce:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800e0d2:	ed2d 8b0c 	vpush	{d8-d13}
 800e0d6:	d10a      	bne.n	800e0ee <__ieee754_acosf+0x2a>
 800e0d8:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800e270 <__ieee754_acosf+0x1ac>
 800e0dc:	ed9f 8a65 	vldr	s16, [pc, #404]	; 800e274 <__ieee754_acosf+0x1b0>
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	bfd8      	it	le
 800e0e4:	eeb0 0a48 	vmovle.f32	s0, s16
 800e0e8:	ecbd 8b0c 	vpop	{d8-d13}
 800e0ec:	bd08      	pop	{r3, pc}
 800e0ee:	dd04      	ble.n	800e0fa <__ieee754_acosf+0x36>
 800e0f0:	ee30 8a40 	vsub.f32	s16, s0, s0
 800e0f4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e0f8:	e7f6      	b.n	800e0e8 <__ieee754_acosf+0x24>
 800e0fa:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800e0fe:	da3c      	bge.n	800e17a <__ieee754_acosf+0xb6>
 800e100:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800e104:	f340 80b1 	ble.w	800e26a <__ieee754_acosf+0x1a6>
 800e108:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e10c:	eddf 6a5a 	vldr	s13, [pc, #360]	; 800e278 <__ieee754_acosf+0x1b4>
 800e110:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800e27c <__ieee754_acosf+0x1b8>
 800e114:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 800e280 <__ieee754_acosf+0x1bc>
 800e118:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 800e284 <__ieee754_acosf+0x1c0>
 800e11c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e120:	eddf 6a59 	vldr	s13, [pc, #356]	; 800e288 <__ieee754_acosf+0x1c4>
 800e124:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e128:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800e28c <__ieee754_acosf+0x1c8>
 800e12c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e130:	eddf 6a57 	vldr	s13, [pc, #348]	; 800e290 <__ieee754_acosf+0x1cc>
 800e134:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e138:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800e294 <__ieee754_acosf+0x1d0>
 800e13c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e140:	eddf 6a55 	vldr	s13, [pc, #340]	; 800e298 <__ieee754_acosf+0x1d4>
 800e144:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800e148:	eddf 6a54 	vldr	s13, [pc, #336]	; 800e29c <__ieee754_acosf+0x1d8>
 800e14c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e150:	ed9f 6a53 	vldr	s12, [pc, #332]	; 800e2a0 <__ieee754_acosf+0x1dc>
 800e154:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e158:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e15c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e160:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e164:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e168:	eea0 8a67 	vfms.f32	s16, s0, s15
 800e16c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800e2a4 <__ieee754_acosf+0x1e0>
 800e170:	ee30 0a48 	vsub.f32	s0, s0, s16
 800e174:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e178:	e7b6      	b.n	800e0e8 <__ieee754_acosf+0x24>
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	eddf da3e 	vldr	s27, [pc, #248]	; 800e278 <__ieee754_acosf+0x1b4>
 800e180:	eddf ca3e 	vldr	s25, [pc, #248]	; 800e27c <__ieee754_acosf+0x1b8>
 800e184:	ed9f ca40 	vldr	s24, [pc, #256]	; 800e288 <__ieee754_acosf+0x1c4>
 800e188:	eddf ba40 	vldr	s23, [pc, #256]	; 800e28c <__ieee754_acosf+0x1c8>
 800e18c:	ed9f ba40 	vldr	s22, [pc, #256]	; 800e290 <__ieee754_acosf+0x1cc>
 800e190:	eddf 8a40 	vldr	s17, [pc, #256]	; 800e294 <__ieee754_acosf+0x1d0>
 800e194:	ed9f da40 	vldr	s26, [pc, #256]	; 800e298 <__ieee754_acosf+0x1d4>
 800e198:	eddf aa39 	vldr	s21, [pc, #228]	; 800e280 <__ieee754_acosf+0x1bc>
 800e19c:	ed9f aa3f 	vldr	s20, [pc, #252]	; 800e29c <__ieee754_acosf+0x1d8>
 800e1a0:	eddf 9a3f 	vldr	s19, [pc, #252]	; 800e2a0 <__ieee754_acosf+0x1dc>
 800e1a4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800e1a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e1ac:	da28      	bge.n	800e200 <__ieee754_acosf+0x13c>
 800e1ae:	ee30 0a09 	vadd.f32	s0, s0, s18
 800e1b2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e1b6:	eee0 ca2d 	vfma.f32	s25, s0, s27
 800e1ba:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800e1be:	eeac ca80 	vfma.f32	s24, s25, s0
 800e1c2:	eeaa aa80 	vfma.f32	s20, s21, s0
 800e1c6:	eeec ba00 	vfma.f32	s23, s24, s0
 800e1ca:	eeea 9a00 	vfma.f32	s19, s20, s0
 800e1ce:	eeab ba80 	vfma.f32	s22, s23, s0
 800e1d2:	eea9 9a80 	vfma.f32	s18, s19, s0
 800e1d6:	eeeb 8a00 	vfma.f32	s17, s22, s0
 800e1da:	ee68 8a80 	vmul.f32	s17, s17, s0
 800e1de:	f000 f869 	bl	800e2b4 <__ieee754_sqrtf>
 800e1e2:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800e1e6:	eddf 7a30 	vldr	s15, [pc, #192]	; 800e2a8 <__ieee754_acosf+0x1e4>
 800e1ea:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e1ee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e1f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e1f6:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800e2ac <__ieee754_acosf+0x1e8>
 800e1fa:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e1fe:	e773      	b.n	800e0e8 <__ieee754_acosf+0x24>
 800e200:	ee39 8a40 	vsub.f32	s16, s18, s0
 800e204:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e208:	eeb0 0a48 	vmov.f32	s0, s16
 800e20c:	f000 f852 	bl	800e2b4 <__ieee754_sqrtf>
 800e210:	eee8 ca2d 	vfma.f32	s25, s16, s27
 800e214:	eee8 aa0d 	vfma.f32	s21, s16, s26
 800e218:	eeac ca88 	vfma.f32	s24, s25, s16
 800e21c:	eeaa aa88 	vfma.f32	s20, s21, s16
 800e220:	eeec ba08 	vfma.f32	s23, s24, s16
 800e224:	ee10 3a10 	vmov	r3, s0
 800e228:	eeab ba88 	vfma.f32	s22, s23, s16
 800e22c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e230:	f023 030f 	bic.w	r3, r3, #15
 800e234:	eeea 9a08 	vfma.f32	s19, s20, s16
 800e238:	ee07 3a90 	vmov	s15, r3
 800e23c:	eeeb 8a08 	vfma.f32	s17, s22, s16
 800e240:	eeb0 6a48 	vmov.f32	s12, s16
 800e244:	eea7 6ae7 	vfms.f32	s12, s15, s15
 800e248:	eea9 9a88 	vfma.f32	s18, s19, s16
 800e24c:	ee70 6a27 	vadd.f32	s13, s0, s15
 800e250:	ee68 8a88 	vmul.f32	s17, s17, s16
 800e254:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800e258:	eec8 6a89 	vdiv.f32	s13, s17, s18
 800e25c:	eea0 7a26 	vfma.f32	s14, s0, s13
 800e260:	ee37 0a87 	vadd.f32	s0, s15, s14
 800e264:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e268:	e73e      	b.n	800e0e8 <__ieee754_acosf+0x24>
 800e26a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800e2b0 <__ieee754_acosf+0x1ec>
 800e26e:	e73b      	b.n	800e0e8 <__ieee754_acosf+0x24>
 800e270:	00000000 	.word	0x00000000
 800e274:	40490fdb 	.word	0x40490fdb
 800e278:	3811ef08 	.word	0x3811ef08
 800e27c:	3a4f7f04 	.word	0x3a4f7f04
 800e280:	bf303361 	.word	0xbf303361
 800e284:	33a22168 	.word	0x33a22168
 800e288:	bd241146 	.word	0xbd241146
 800e28c:	3e4e0aa8 	.word	0x3e4e0aa8
 800e290:	bea6b090 	.word	0xbea6b090
 800e294:	3e2aaaab 	.word	0x3e2aaaab
 800e298:	3d9dc62e 	.word	0x3d9dc62e
 800e29c:	4001572d 	.word	0x4001572d
 800e2a0:	c019d139 	.word	0xc019d139
 800e2a4:	3fc90fda 	.word	0x3fc90fda
 800e2a8:	b3a22168 	.word	0xb3a22168
 800e2ac:	40490fda 	.word	0x40490fda
 800e2b0:	3fc90fdb 	.word	0x3fc90fdb

0800e2b4 <__ieee754_sqrtf>:
 800e2b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e2b8:	4770      	bx	lr

0800e2ba <fabsf>:
 800e2ba:	ee10 3a10 	vmov	r3, s0
 800e2be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2c2:	ee00 3a10 	vmov	s0, r3
 800e2c6:	4770      	bx	lr

0800e2c8 <_init>:
 800e2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ca:	bf00      	nop
 800e2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ce:	bc08      	pop	{r3}
 800e2d0:	469e      	mov	lr, r3
 800e2d2:	4770      	bx	lr

0800e2d4 <_fini>:
 800e2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2d6:	bf00      	nop
 800e2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2da:	bc08      	pop	{r3}
 800e2dc:	469e      	mov	lr, r3
 800e2de:	4770      	bx	lr
