
FRA262_G4_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000110d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08011270  08011270  00021270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011744  08011744  00030428  2**0
                  CONTENTS
  4 .ARM          00000008  08011744  08011744  00021744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801174c  0801174c  00030428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801174c  0801174c  0002174c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011750  08011750  00021750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000428  20000000  08011754  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d80  20000428  08011b7c  00030428  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011a8  08011b7c  000311a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030428  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015659  00000000  00000000  00030458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002755  00000000  00000000  00045ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00048208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  00049430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192eb  00000000  00000000  0004a588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a86  00000000  00000000  00063873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0257  00000000  00000000  000792f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119550  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006488  00000000  00000000  001195a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000428 	.word	0x20000428
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011258 	.word	0x08011258

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000042c 	.word	0x2000042c
 80001dc:	08011258 	.word	0x08011258

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <modbus_1t5_Timeout+0x1c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	751a      	strb	r2, [r3, #20]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	20000444 	.word	0x20000444

08001028 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <modbus_3t5_Timeout+0x1c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	755a      	strb	r2, [r3, #21]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	20000444 	.word	0x20000444

08001048 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <modbus_UART_Recived+0x60>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001062:	1c59      	adds	r1, r3, #1
 8001064:	b289      	uxth	r1, r1
 8001066:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 800106a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800106e:	d210      	bcs.n	8001092 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68d8      	ldr	r0, [r3, #12]
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <modbus_UART_Recived+0x60>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001082:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001086:	4413      	add	r3, r2
 8001088:	3302      	adds	r3, #2
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	f00a f95e 	bl	800b34e <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000444 	.word	0x20000444

080010ac <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80010b6:	4a24      	ldr	r2, [pc, #144]	; (8001148 <Modbus_init+0x9c>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <Modbus_init+0x9c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <Modbus_init+0x9c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	4a20      	ldr	r2, [pc, #128]	; (800114c <Modbus_init+0xa0>)
 80010cc:	2114      	movs	r1, #20
 80010ce:	4618      	mov	r0, r3
 80010d0:	f009 faaa 	bl	800a628 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <Modbus_init+0x9c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <Modbus_init+0xa4>)
 80010dc:	210e      	movs	r1, #14
 80010de:	4618      	mov	r0, r3
 80010e0:	f009 faa2 	bl	800a628 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <Modbus_init+0x9c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <Modbus_init+0xa8>)
 80010ec:	2103      	movs	r1, #3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f00a f840 	bl	800b174 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <Modbus_init+0x9c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d8      	ldr	r0, [r3, #12]
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <Modbus_init+0x9c>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <Modbus_init+0x9c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001106:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800110a:	4413      	add	r3, r2
 800110c:	3302      	adds	r3, #2
 800110e:	2201      	movs	r2, #1
 8001110:	4619      	mov	r1, r3
 8001112:	f00a f91c 	bl	800b34e <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <Modbus_init+0x9c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10c      	bne.n	8001140 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <Modbus_init+0x9c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	4618      	mov	r0, r3
 800112e:	f008 fb2f 	bl	8009790 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <Modbus_init+0x9c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f008 fd64 	bl	8009c08 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000444 	.word	0x20000444
 800114c:	08001009 	.word	0x08001009
 8001150:	08001029 	.word	0x08001029
 8001154:	08001049 	.word	0x08001049

08001158 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001164:	23ff      	movs	r3, #255	; 0xff
 8001166:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800116c:	e013      	b.n	8001196 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	4053      	eors	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <CRC16+0x64>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4413      	add	r3, r2
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	4053      	eors	r3, r2
 800118a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <CRC16+0x68>)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001196:	883b      	ldrh	r3, [r7, #0]
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	803a      	strh	r2, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e6      	bne.n	800116e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000100 	.word	0x20000100
 80011c0:	20000000 	.word	0x20000000

080011c4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80011ca:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	7e1b      	ldrb	r3, [r3, #24]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d80a      	bhi.n	80011ec <Modbus_Protocal_Worker+0x28>
 80011d6:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <Modbus_Protocal_Worker+0x18>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	080011f7 	.word	0x080011f7
 80011e0:	08001397 	.word	0x08001397
 80011e4:	08001283 	.word	0x08001283
 80011e8:	080012a9 	.word	0x080012a9
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80011ec:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	761a      	strb	r2, [r3, #24]
		break;
 80011f4:	e0e8      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001202:	f000 f9d7 	bl	80015b4 <Modbus_Emission>
 8001206:	e01c      	b.n	8001242 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001208:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	7d9b      	ldrb	r3, [r3, #22]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d017      	beq.n	8001242 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800121a:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001222:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2203      	movs	r2, #3
 8001240:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b20      	cmp	r3, #32
 8001250:	f040 80b3 	bne.w	80013ba <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800125e:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001270:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001274:	4413      	add	r3, r2
 8001276:	3302      	adds	r3, #2
 8001278:	2201      	movs	r2, #1
 800127a:	4619      	mov	r1, r3
 800127c:	f00a f867 	bl	800b34e <HAL_UART_Receive_IT>
		}
		break;
 8001280:	e09b      	b.n	80013ba <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001282:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7d1b      	ldrb	r3, [r3, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8098 	beq.w	80013be <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001296:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	22fe      	movs	r2, #254	; 0xfe
 800129c:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2204      	movs	r2, #4
 80012a4:	761a      	strb	r2, [r3, #24]
		}
		break;
 80012a6:	e08a      	b.n	80013be <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	7d9b      	ldrb	r3, [r3, #22]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80012c6:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ce:	f113 0f02 	cmn.w	r3, #2
 80012d2:	d150      	bne.n	8001376 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80012d4:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f203 2272 	addw	r2, r3, #626	; 0x272
 80012e4:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80012ec:	3b02      	subs	r3, #2
 80012ee:	4619      	mov	r1, r3
 80012f0:	4610      	mov	r0, r2
 80012f2:	f7ff ff31 	bl	8001158 <CRC16>
 80012f6:	4603      	mov	r3, r0
 80012f8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012fa:	793a      	ldrb	r2, [r7, #4]
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001308:	3b02      	subs	r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001310:	429a      	cmp	r2, r3
 8001312:	d10c      	bne.n	800132e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001314:	797a      	ldrb	r2, [r7, #5]
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001322:	3b01      	subs	r3, #1
 8001324:	440b      	add	r3, r1
 8001326:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800132a:	429a      	cmp	r2, r3
 800132c:	d004      	beq.n	8001338 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	22ff      	movs	r2, #255	; 0xff
 8001334:	75da      	strb	r2, [r3, #23]
				break;
 8001336:	e047      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d113      	bne.n	8001372 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800135a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001364:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001366:	461a      	mov	r2, r3
 8001368:	f00b f9b4 	bl	800c6d4 <memcpy>

			//execute command
			Modbus_frame_response();
 800136c:	f000 f90a 	bl	8001584 <Modbus_frame_response>
 8001370:	e001      	b.n	8001376 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001372:	bf00      	nop
					}
		break;


	}
}
 8001374:	e028      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7d5b      	ldrb	r3, [r3, #21]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	4618      	mov	r0, r3
 8001390:	f00a f88c 	bl	800b4ac <HAL_UART_AbortReceive>
		break;
 8001394:	e015      	b.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d10f      	bne.n	80013c6 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	761a      	strb	r2, [r3, #24]
		break;
 80013b8:	e005      	b.n	80013c6 <Modbus_Protocal_Worker+0x202>
		break;
 80013ba:	bf00      	nop
 80013bc:	e004      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013be:	bf00      	nop
 80013c0:	e002      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c6:	bf00      	nop
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000444 	.word	0x20000444

080013d4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <modbusWrite1Register+0x80>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	7e9b      	ldrb	r3, [r3, #26]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <modbusWrite1Register+0x80>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	7edb      	ldrb	r3, [r3, #27]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <modbusWrite1Register+0x80>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d903      	bls.n	8001406 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013fe:	2002      	movs	r0, #2
 8001400:	f000 f8a4 	bl	800154c <ModbusErrorReply>
			 return;
 8001404:	e023      	b.n	800144e <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <modbusWrite1Register+0x80>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <modbusWrite1Register+0x80>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	7f12      	ldrb	r2, [r2, #28]
 8001418:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <modbusWrite1Register+0x80>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <modbusWrite1Register+0x80>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6859      	ldr	r1, [r3, #4]
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	440b      	add	r3, r1
 800142a:	7f52      	ldrb	r2, [r2, #29]
 800142c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <modbusWrite1Register+0x80>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <modbusWrite1Register+0x80>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 800143c:	2208      	movs	r2, #8
 800143e:	4619      	mov	r1, r3
 8001440:	f00b f948 	bl	800c6d4 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <modbusWrite1Register+0x80>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2205      	movs	r2, #5
 800144a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000444 	.word	0x20000444

08001458 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <modbusRead1Register+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	7f1b      	ldrb	r3, [r3, #28]
 8001464:	b29b      	uxth	r3, r3
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <modbusRead1Register+0xf0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	7f5b      	ldrb	r3, [r3, #29]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4413      	add	r3, r2
 8001474:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <modbusRead1Register+0xf0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7e9b      	ldrb	r3, [r3, #26]
 800147c:	b29b      	uxth	r3, r3
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <modbusRead1Register+0xf0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	7edb      	ldrb	r3, [r3, #27]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <modbusRead1Register+0x42>
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	2b7d      	cmp	r3, #125	; 0x7d
 8001498:	d903      	bls.n	80014a2 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f856 	bl	800154c <ModbusErrorReply>
		 return;
 80014a0:	e04e      	b.n	8001540 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80014a2:	88ba      	ldrh	r2, [r7, #4]
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <modbusRead1Register+0xf0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d808      	bhi.n	80014c0 <modbusRead1Register+0x68>
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4413      	add	r3, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <modbusRead1Register+0xf0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d903      	bls.n	80014c8 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f000 f843 	bl	800154c <ModbusErrorReply>
		 return;
 80014c6:	e03b      	b.n	8001540 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <modbusRead1Register+0xf0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <modbusRead1Register+0xf0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	0052      	lsls	r2, r2, #1
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80014e2:	2400      	movs	r4, #0
 80014e4:	e020      	b.n	8001528 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <modbusRead1Register+0xf0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	88bb      	ldrh	r3, [r7, #4]
 80014ee:	4423      	add	r3, r4
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	18d1      	adds	r1, r2, r3
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <modbusRead1Register+0xf0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	1c63      	adds	r3, r4, #1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	7849      	ldrb	r1, [r1, #1]
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <modbusRead1Register+0xf0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	4423      	add	r3, r4
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <modbusRead1Register+0xf0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	0063      	lsls	r3, r4, #1
 800151a:	3303      	adds	r3, #3
 800151c:	7809      	ldrb	r1, [r1, #0]
 800151e:	4413      	add	r3, r2
 8001520:	460a      	mov	r2, r1
 8001522:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001526:	3401      	adds	r4, #1
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	429c      	cmp	r4, r3
 800152c:	dbdb      	blt.n	80014e6 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <modbusRead1Register+0xf0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	20000444 	.word	0x20000444

0800154c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register | 0x80;
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <ModbusErrorReply+0x34>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2283      	movs	r2, #131	; 0x83
 800155c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <ModbusErrorReply+0x34>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	79fa      	ldrb	r2, [r7, #7]
 8001566:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <ModbusErrorReply+0x34>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	20000444 	.word	0x20000444

08001584 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <Modbus_frame_response+0x2c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	7e5b      	ldrb	r3, [r3, #25]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d004      	beq.n	800159c <Modbus_frame_response+0x18>
 8001592:	2b06      	cmp	r3, #6
 8001594:	d105      	bne.n	80015a2 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001596:	f7ff ff1d 	bl	80013d4 <modbusWrite1Register>
		break;
 800159a:	e006      	b.n	80015aa <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800159c:	f7ff ff5c 	bl	8001458 <modbusRead1Register>
		break;
 80015a0:	e003      	b.n	80015aa <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff ffd2 	bl	800154c <ModbusErrorReply>
		break;
 80015a8:	bf00      	nop

	}
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000444 	.word	0x20000444

080015b4 <Modbus_Emission>:

void Modbus_Emission()
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <Modbus_Emission+0xfc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b20      	cmp	r3, #32
 80015c8:	d15e      	bne.n	8001688 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80015ca:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <Modbus_Emission+0xfc>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <Modbus_Emission+0xfc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <Modbus_Emission+0xfc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80015e0:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80015e2:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <Modbus_Emission+0xfc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <Modbus_Emission+0xfc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 80015f2:	461a      	mov	r2, r3
 80015f4:	f00b f86e 	bl	800c6d4 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80015f8:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <Modbus_Emission+0xfc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <Modbus_Emission+0xfc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3203      	adds	r2, #3
 8001608:	b292      	uxth	r2, r2
 800160a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <Modbus_Emission+0xfc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <Modbus_Emission+0xfc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800161e:	3b02      	subs	r3, #2
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f7ff fd98 	bl	8001158 <CRC16>
 8001628:	4603      	mov	r3, r0
 800162a:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <Modbus_Emission+0xfc>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <Modbus_Emission+0xfc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001638:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800163a:	7939      	ldrb	r1, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	460a      	mov	r2, r1
 8001640:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <Modbus_Emission+0xfc>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <Modbus_Emission+0xfc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001650:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001652:	7979      	ldrb	r1, [r7, #5]
 8001654:	4413      	add	r3, r2
 8001656:	460a      	mov	r2, r1
 8001658:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <Modbus_Emission+0xfc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b20      	cmp	r3, #32
 800166a:	d10d      	bne.n	8001688 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <Modbus_Emission+0xfc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <Modbus_Emission+0xfc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <Modbus_Emission+0xfc>)
 800167c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800167e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001682:	461a      	mov	r2, r3
 8001684:	f009 fe94 	bl	800b3b0 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <Modbus_Emission+0xfc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <Modbus_Emission+0xfc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <Modbus_Emission+0xfc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <Modbus_Emission+0xfc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2202      	movs	r2, #2
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000444 	.word	0x20000444
 80016b4:	00000000 	.word	0x00000000

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016be:	f003 fb15 	bl	8004cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c2:	f000 fa95 	bl	8001bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c6:	f000 fdd5 	bl	8002274 <MX_GPIO_Init>
  MX_DMA_Init();
 80016ca:	f000 fd9d 	bl	8002208 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016ce:	f000 fd6f 	bl	80021b0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80016d2:	f000 fc13 	bl	8001efc <MX_TIM3_Init>
  MX_TIM1_Init();
 80016d6:	f000 fb81 	bl	8001ddc <MX_TIM1_Init>
  MX_ADC1_Init();
 80016da:	f000 faf1 	bl	8001cc0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80016de:	f000 fd3d 	bl	800215c <MX_USART1_UART_Init>
  MX_TIM11_Init();
 80016e2:	f000 fce7 	bl	80020b4 <MX_TIM11_Init>
  MX_TIM9_Init();
 80016e6:	f000 fcab 	bl	8002040 <MX_TIM9_Init>
  MX_I2C1_Init();
 80016ea:	f000 fb49 	bl	8001d80 <MX_I2C1_Init>
  MX_TIM4_Init();
 80016ee:	f000 fc59 	bl	8001fa4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  hmodbus.huart = &huart2;
 80016f2:	4bad      	ldr	r3, [pc, #692]	; (80019a8 <main+0x2f0>)
 80016f4:	4aad      	ldr	r2, [pc, #692]	; (80019ac <main+0x2f4>)
 80016f6:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 80016f8:	4bab      	ldr	r3, [pc, #684]	; (80019a8 <main+0x2f0>)
 80016fa:	4aad      	ldr	r2, [pc, #692]	; (80019b0 <main+0x2f8>)
 80016fc:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80016fe:	4baa      	ldr	r3, [pc, #680]	; (80019a8 <main+0x2f0>)
 8001700:	2215      	movs	r2, #21
 8001702:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 70;
 8001704:	4ba8      	ldr	r3, [pc, #672]	; (80019a8 <main+0x2f0>)
 8001706:	2246      	movs	r2, #70	; 0x46
 8001708:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 800170a:	49aa      	ldr	r1, [pc, #680]	; (80019b4 <main+0x2fc>)
 800170c:	48a6      	ldr	r0, [pc, #664]	; (80019a8 <main+0x2f0>)
 800170e:	f7ff fccd 	bl	80010ac <Modbus_init>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8001712:	2104      	movs	r1, #4
 8001714:	48a8      	ldr	r0, [pc, #672]	; (80019b8 <main+0x300>)
 8001716:	f008 fb91 	bl	8009e3c <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Start Timer1
 800171a:	48a8      	ldr	r0, [pc, #672]	; (80019bc <main+0x304>)
 800171c:	f007 ffde 	bl	80096dc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001720:	2100      	movs	r1, #0
 8001722:	48a6      	ldr	r0, [pc, #664]	; (80019bc <main+0x304>)
 8001724:	f008 f958 	bl	80099d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001728:	2104      	movs	r1, #4
 800172a:	48a4      	ldr	r0, [pc, #656]	; (80019bc <main+0x304>)
 800172c:	f008 f954 	bl	80099d8 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001730:	48a3      	ldr	r0, [pc, #652]	; (80019c0 <main+0x308>)
 8001732:	f008 f82d 	bl	8009790 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4); //Start IT Timer4
 8001736:	48a3      	ldr	r0, [pc, #652]	; (80019c4 <main+0x30c>)
 8001738:	f008 f82a 	bl	8009790 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, L_EN);
 800173c:	4ba2      	ldr	r3, [pc, #648]	; (80019c8 <main+0x310>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	461a      	mov	r2, r3
 8001744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001748:	48a0      	ldr	r0, [pc, #640]	; (80019cc <main+0x314>)
 800174a:	f004 fe31 	bl	80063b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, R_EN);
 800174e:	4ba0      	ldr	r3, [pc, #640]	; (80019d0 <main+0x318>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	2110      	movs	r1, #16
 8001758:	489c      	ldr	r0, [pc, #624]	; (80019cc <main+0x314>)
 800175a:	f004 fe29 	bl	80063b0 <HAL_GPIO_WritePin>

  HAL_ADC_Start_DMA(&hadc1, XYSwitch, 2);
 800175e:	2202      	movs	r2, #2
 8001760:	499c      	ldr	r1, [pc, #624]	; (80019d4 <main+0x31c>)
 8001762:	489d      	ldr	r0, [pc, #628]	; (80019d8 <main+0x320>)
 8001764:	f003 fb9c 	bl	8004ea0 <HAL_ADC_Start_DMA>

  registerFrame[1].U16 = 0;
 8001768:	4b92      	ldr	r3, [pc, #584]	; (80019b4 <main+0x2fc>)
 800176a:	2200      	movs	r2, #0
 800176c:	805a      	strh	r2, [r3, #2]
  EndEffectorState = 0;	//SoftReset
 800176e:	4b9b      	ldr	r3, [pc, #620]	; (80019dc <main+0x324>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
  EndEffectorWriteFlag = 1;
 8001774:	4b9a      	ldr	r3, [pc, #616]	; (80019e0 <main+0x328>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
  EndEffectorWrite();
 800177a:	f000 fe83 	bl	8002484 <EndEffectorWrite>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Protocal_Worker();
 800177e:	f7ff fd21 	bl	80011c4 <Modbus_Protocal_Worker>
	  static uint32_t heartbeat = 0;
	  static uint32_t uart_time = 0;
	  if(heartbeat < HAL_GetTick())
 8001782:	f003 fb19 	bl	8004db8 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	4b96      	ldr	r3, [pc, #600]	; (80019e4 <main+0x32c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d909      	bls.n	80017a4 <main+0xec>
	  {
		  heartbeat = HAL_GetTick()+100;
 8001790:	f003 fb12 	bl	8004db8 <HAL_GetTick>
 8001794:	4603      	mov	r3, r0
 8001796:	3364      	adds	r3, #100	; 0x64
 8001798:	4a92      	ldr	r2, [pc, #584]	; (80019e4 <main+0x32c>)
 800179a:	6013      	str	r3, [r2, #0]
		  registerFrame[0].U16 = 22881;
 800179c:	4b85      	ldr	r3, [pc, #532]	; (80019b4 <main+0x2fc>)
 800179e:	f645 1261 	movw	r2, #22881	; 0x5961
 80017a2:	801a      	strh	r2, [r3, #0]
	  }

	  if (huart1.gState == HAL_UART_STATE_READY && (HAL_GetTick() >= uart_time))
 80017a4:	4b90      	ldr	r3, [pc, #576]	; (80019e8 <main+0x330>)
 80017a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b20      	cmp	r3, #32
 80017ae:	d130      	bne.n	8001812 <main+0x15a>
 80017b0:	f003 fb02 	bl	8004db8 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b8d      	ldr	r3, [pc, #564]	; (80019ec <main+0x334>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d329      	bcc.n	8001812 <main+0x15a>
	  {
		  sprintf(TxBuffer,"%d %.2f %.2f\r\n",position, setposition, setvelocity);
 80017be:	4b8c      	ldr	r3, [pc, #560]	; (80019f0 <main+0x338>)
 80017c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c4:	461e      	mov	r6, r3
 80017c6:	4b8b      	ldr	r3, [pc, #556]	; (80019f4 <main+0x33c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fec4 	bl	8000558 <__aeabi_f2d>
 80017d0:	4604      	mov	r4, r0
 80017d2:	460d      	mov	r5, r1
 80017d4:	4b88      	ldr	r3, [pc, #544]	; (80019f8 <main+0x340>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe febd 	bl	8000558 <__aeabi_f2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017e6:	e9cd 4500 	strd	r4, r5, [sp]
 80017ea:	4632      	mov	r2, r6
 80017ec:	4983      	ldr	r1, [pc, #524]	; (80019fc <main+0x344>)
 80017ee:	4884      	ldr	r0, [pc, #528]	; (8001a00 <main+0x348>)
 80017f0:	f00b fe06 	bl	800d400 <siprintf>
		  HAL_UART_Transmit_IT(&huart1, (uint8_t *)TxBuffer, strlen(TxBuffer));
 80017f4:	4882      	ldr	r0, [pc, #520]	; (8001a00 <main+0x348>)
 80017f6:	f7fe fcf3 	bl	80001e0 <strlen>
 80017fa:	4603      	mov	r3, r0
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	461a      	mov	r2, r3
 8001800:	497f      	ldr	r1, [pc, #508]	; (8001a00 <main+0x348>)
 8001802:	4879      	ldr	r0, [pc, #484]	; (80019e8 <main+0x330>)
 8001804:	f009 fd5e 	bl	800b2c4 <HAL_UART_Transmit_IT>
		  uart_time += 20;
 8001808:	4b78      	ldr	r3, [pc, #480]	; (80019ec <main+0x334>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3314      	adds	r3, #20
 800180e:	4a77      	ldr	r2, [pc, #476]	; (80019ec <main+0x334>)
 8001810:	6013      	str	r3, [r2, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PC1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8001812:	2102      	movs	r1, #2
 8001814:	487b      	ldr	r0, [pc, #492]	; (8001a04 <main+0x34c>)
 8001816:	f004 fdb3 	bl	8006380 <HAL_GPIO_ReadPin>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	4b7a      	ldr	r3, [pc, #488]	; (8001a08 <main+0x350>)
 8001820:	601a      	str	r2, [r3, #0]
	  PC2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8001822:	2104      	movs	r1, #4
 8001824:	4877      	ldr	r0, [pc, #476]	; (8001a04 <main+0x34c>)
 8001826:	f004 fdab 	bl	8006380 <HAL_GPIO_ReadPin>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	4b77      	ldr	r3, [pc, #476]	; (8001a0c <main+0x354>)
 8001830:	601a      	str	r2, [r3, #0]
	  PC3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 8001832:	2108      	movs	r1, #8
 8001834:	4873      	ldr	r0, [pc, #460]	; (8001a04 <main+0x34c>)
 8001836:	f004 fda3 	bl	8006380 <HAL_GPIO_ReadPin>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	4b74      	ldr	r3, [pc, #464]	; (8001a10 <main+0x358>)
 8001840:	601a      	str	r2, [r3, #0]

	  VelocityApprox();
 8001842:	f000 ff5d 	bl	8002700 <VelocityApprox>
	  AccelerationApprox();
 8001846:	f000 ff89 	bl	800275c <AccelerationApprox>
	  Routine(); //Sent Y Actual Position Velocity Acceleration to Base System
 800184a:	f000 ffa5 	bl	8002798 <Routine>

	  JoystickPinUpdate(); //Check Pin Flag
 800184e:	f001 f895 	bl	800297c <JoystickPinUpdate>

	  switch(scheduler)
 8001852:	4b70      	ldr	r3, [pc, #448]	; (8001a14 <main+0x35c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b05      	cmp	r3, #5
 8001858:	d891      	bhi.n	800177e <main+0xc6>
 800185a:	a201      	add	r2, pc, #4	; (adr r2, 8001860 <main+0x1a8>)
 800185c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001860:	08001879 	.word	0x08001879
 8001864:	0800188f 	.word	0x0800188f
 8001868:	08001917 	.word	0x08001917
 800186c:	08001a2d 	.word	0x08001a2d
 8001870:	08001b65 	.word	0x08001b65
 8001874:	08001bab 	.word	0x08001bab
	  {
	  //JoyStick
	  case 0:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001878:	4b4f      	ldr	r3, [pc, #316]	; (80019b8 <main+0x300>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	b21a      	sxth	r2, r3
 8001880:	4b5b      	ldr	r3, [pc, #364]	; (80019f0 <main+0x338>)
 8001882:	801a      	strh	r2, [r3, #0]
		  JoystickControl(); //Read Pin form JoyStick
 8001884:	f001 f916 	bl	8002ab4 <JoystickControl>
		  JoystickLocationState();
 8001888:	f001 f9e2 	bl	8002c50 <JoystickLocationState>
		  break;
 800188c:	e193      	b.n	8001bb6 <main+0x4fe>

	  //Go Pick
	  case 1 :
		  registerFrame[16].U16 = 8; //Y Moving Status: Go Pick
 800188e:	4b49      	ldr	r3, [pc, #292]	; (80019b4 <main+0x2fc>)
 8001890:	2208      	movs	r2, #8
 8001892:	841a      	strh	r2, [r3, #32]
		  qf = (PickTray.hole_y[HoleSequence])/0.045;
 8001894:	4b60      	ldr	r3, [pc, #384]	; (8001a18 <main+0x360>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a60      	ldr	r2, [pc, #384]	; (8001a1c <main+0x364>)
 800189a:	330c      	adds	r3, #12
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	3304      	adds	r3, #4
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe57 	bl	8000558 <__aeabi_f2d>
 80018aa:	a33d      	add	r3, pc, #244	; (adr r3, 80019a0 <main+0x2e8>)
 80018ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b0:	f7fe ffd4 	bl	800085c <__aeabi_ddiv>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	f7ff f99c 	bl	8000bf8 <__aeabi_d2f>
 80018c0:	4603      	mov	r3, r0
 80018c2:	4a57      	ldr	r2, [pc, #348]	; (8001a20 <main+0x368>)
 80018c4:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PickTray.hole_x[HoleSequence]*10; //X-Axis Target Position Pick Tray
 80018c6:	4b54      	ldr	r3, [pc, #336]	; (8001a18 <main+0x360>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a54      	ldr	r2, [pc, #336]	; (8001a1c <main+0x364>)
 80018cc:	3304      	adds	r3, #4
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	edd3 7a00 	vldr	s15, [r3]
 80018d6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018e2:	ee17 3a90 	vmov	r3, s15
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <main+0x2fc>)
 80018ea:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 80018ee:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <main+0x2fc>)
 80018f0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80018f4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 3;
 80018f8:	4b2e      	ldr	r3, [pc, #184]	; (80019b4 <main+0x2fc>)
 80018fa:	2203      	movs	r2, #3
 80018fc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  registerFrame[64].U16 = 2; //X Moving Status: Run
 8001900:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <main+0x2fc>)
 8001902:	2202      	movs	r2, #2
 8001904:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  Trajectstate = 0;
 8001908:	4b46      	ldr	r3, [pc, #280]	; (8001a24 <main+0x36c>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
		  scheduler = 3;
 800190e:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <main+0x35c>)
 8001910:	2203      	movs	r2, #3
 8001912:	601a      	str	r2, [r3, #0]
		  break;
 8001914:	e14f      	b.n	8001bb6 <main+0x4fe>

	  //Go Place
	  case 2 :
		  registerFrame[16].U16 = 16; //Y Moving Status: Go Place
 8001916:	4b27      	ldr	r3, [pc, #156]	; (80019b4 <main+0x2fc>)
 8001918:	2210      	movs	r2, #16
 800191a:	841a      	strh	r2, [r3, #32]
		  qf = (PlaceTray.hole_y[HoleSequence])/0.045;
 800191c:	4b3e      	ldr	r3, [pc, #248]	; (8001a18 <main+0x360>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a41      	ldr	r2, [pc, #260]	; (8001a28 <main+0x370>)
 8001922:	330c      	adds	r3, #12
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	3304      	adds	r3, #4
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fe13 	bl	8000558 <__aeabi_f2d>
 8001932:	a31b      	add	r3, pc, #108	; (adr r3, 80019a0 <main+0x2e8>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe ff90 	bl	800085c <__aeabi_ddiv>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f7ff f958 	bl	8000bf8 <__aeabi_d2f>
 8001948:	4603      	mov	r3, r0
 800194a:	4a35      	ldr	r2, [pc, #212]	; (8001a20 <main+0x368>)
 800194c:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PlaceTray.hole_x[HoleSequence]*10; //X-Axis Target Position Place Tray
 800194e:	4b32      	ldr	r3, [pc, #200]	; (8001a18 <main+0x360>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a35      	ldr	r2, [pc, #212]	; (8001a28 <main+0x370>)
 8001954:	3304      	adds	r3, #4
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800196a:	ee17 3a90 	vmov	r3, s15
 800196e:	b29a      	uxth	r2, r3
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <main+0x2fc>)
 8001972:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <main+0x2fc>)
 8001978:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800197c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 3;
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <main+0x2fc>)
 8001982:	2203      	movs	r2, #3
 8001984:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  registerFrame[64].U16 = 2; //X Moving Status: Run
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <main+0x2fc>)
 800198a:	2202      	movs	r2, #2
 800198c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  Trajectstate = 0;
 8001990:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <main+0x36c>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
		  scheduler = 3;
 8001996:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <main+0x35c>)
 8001998:	2203      	movs	r2, #3
 800199a:	601a      	str	r2, [r3, #0]
		  break;
 800199c:	e10b      	b.n	8001bb6 <main+0x4fe>
 800199e:	bf00      	nop
 80019a0:	70a3d70a 	.word	0x70a3d70a
 80019a4:	3fa70a3d 	.word	0x3fa70a3d
 80019a8:	20000bc4 	.word	0x20000bc4
 80019ac:	2000093c 	.word	0x2000093c
 80019b0:	20000814 	.word	0x20000814
 80019b4:	2000109c 	.word	0x2000109c
 80019b8:	200005f8 	.word	0x200005f8
 80019bc:	20000544 	.word	0x20000544
 80019c0:	20000760 	.word	0x20000760
 80019c4:	200006ac 	.word	0x200006ac
 80019c8:	20000208 	.word	0x20000208
 80019cc:	40020400 	.word	0x40020400
 80019d0:	20000204 	.word	0x20000204
 80019d4:	20000b9c 	.word	0x20000b9c
 80019d8:	20000448 	.word	0x20000448
 80019dc:	20000bb0 	.word	0x20000bb0
 80019e0:	20000ba8 	.word	0x20000ba8
 80019e4:	20001178 	.word	0x20001178
 80019e8:	200008c8 	.word	0x200008c8
 80019ec:	2000117c 	.word	0x2000117c
 80019f0:	20000a5c 	.word	0x20000a5c
 80019f4:	20000a68 	.word	0x20000a68
 80019f8:	20000a88 	.word	0x20000a88
 80019fc:	08011270 	.word	0x08011270
 8001a00:	20001128 	.word	0x20001128
 8001a04:	40020800 	.word	0x40020800
 8001a08:	20000bb8 	.word	0x20000bb8
 8001a0c:	20000bbc 	.word	0x20000bbc
 8001a10:	20000bc0 	.word	0x20000bc0
 8001a14:	20000a10 	.word	0x20000a10
 8001a18:	20000a14 	.word	0x20000a14
 8001a1c:	20000a90 	.word	0x20000a90
 8001a20:	20000a24 	.word	0x20000a24
 8001a24:	20000a1c 	.word	0x20000a1c
 8001a28:	20000af4 	.word	0x20000af4

	  //Trajectory
	  case 3:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001a2c:	4b62      	ldr	r3, [pc, #392]	; (8001bb8 <main+0x500>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	b21a      	sxth	r2, r3
 8001a34:	4b61      	ldr	r3, [pc, #388]	; (8001bbc <main+0x504>)
 8001a36:	801a      	strh	r2, [r3, #0]
		  static uint32_t timestamp0 = 0;
		  if(HAL_GetTick() > timestamp0)
 8001a38:	f003 f9be 	bl	8004db8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	4b60      	ldr	r3, [pc, #384]	; (8001bc0 <main+0x508>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d909      	bls.n	8001a5a <main+0x3a2>
		  {
			  timestamp0 = HAL_GetTick() + 1;
 8001a46:	f003 f9b7 	bl	8004db8 <HAL_GetTick>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	4a5c      	ldr	r2, [pc, #368]	; (8001bc0 <main+0x508>)
 8001a50:	6013      	str	r3, [r2, #0]
			  VelocityApprox();
 8001a52:	f000 fe55 	bl	8002700 <VelocityApprox>
			  AccelerationApprox();
 8001a56:	f000 fe81 	bl	800275c <AccelerationApprox>
//			  TrajectoryGenerator();
//		  }

		  //PWM & Motor drive & PID
		  static uint32_t timestamp2 = 0;
		  if (HAL_GetTick()>= timestamp2)
 8001a5a:	f003 f9ad 	bl	8004db8 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	4b58      	ldr	r3, [pc, #352]	; (8001bc4 <main+0x50c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d33b      	bcc.n	8001ae0 <main+0x428>
		  {
			  timestamp2 = HAL_GetTick() + 1;
 8001a68:	f003 f9a6 	bl	8004db8 <HAL_GetTick>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	3301      	adds	r3, #1
 8001a70:	4a54      	ldr	r2, [pc, #336]	; (8001bc4 <main+0x50c>)
 8001a72:	6013      	str	r3, [r2, #0]
			  duty = PIDcal();
 8001a74:	f000 fef0 	bl	8002858 <PIDcal>
 8001a78:	eef0 7a40 	vmov.f32	s15, s0
 8001a7c:	4b52      	ldr	r3, [pc, #328]	; (8001bc8 <main+0x510>)
 8001a7e:	edc3 7a00 	vstr	s15, [r3]
			  if (duty >= 0)
 8001a82:	4b51      	ldr	r3, [pc, #324]	; (8001bc8 <main+0x510>)
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a90:	db0e      	blt.n	8001ab0 <main+0x3f8>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001a92:	4b4e      	ldr	r3, [pc, #312]	; (8001bcc <main+0x514>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2200      	movs	r2, #0
 8001a98:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 8001a9a:	4b4b      	ldr	r3, [pc, #300]	; (8001bc8 <main+0x510>)
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	4b4a      	ldr	r3, [pc, #296]	; (8001bcc <main+0x514>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aa8:	ee17 2a90 	vmov	r2, s15
 8001aac:	635a      	str	r2, [r3, #52]	; 0x34
 8001aae:	e017      	b.n	8001ae0 <main+0x428>
			  }
			  else if (duty < 0)
 8001ab0:	4b45      	ldr	r3, [pc, #276]	; (8001bc8 <main+0x510>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abe:	d50f      	bpl.n	8001ae0 <main+0x428>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001ac0:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <main+0x514>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
 8001ac8:	4b3f      	ldr	r3, [pc, #252]	; (8001bc8 <main+0x510>)
 8001aca:	edd3 7a00 	vldr	s15, [r3]
 8001ace:	eef1 7a67 	vneg.f32	s15, s15
 8001ad2:	4b3e      	ldr	r3, [pc, #248]	; (8001bcc <main+0x514>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ada:	ee17 2a90 	vmov	r2, s15
 8001ade:	639a      	str	r2, [r3, #56]	; 0x38
			  }
		  }

		  // Check Final Position
		  if(position >= qf - 4 && position <= qf + 4) //&& registerFrame[64].U16 == 0
 8001ae0:	4b36      	ldr	r3, [pc, #216]	; (8001bbc <main+0x504>)
 8001ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae6:	ee07 3a90 	vmov	s15, r3
 8001aea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aee:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <main+0x518>)
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001af8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001afc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b04:	db23      	blt.n	8001b4e <main+0x496>
 8001b06:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <main+0x504>)
 8001b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b14:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <main+0x518>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2a:	d810      	bhi.n	8001b4e <main+0x496>
		  {
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <main+0x514>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2200      	movs	r2, #0
 8001b32:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001b34:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <main+0x514>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	639a      	str	r2, [r3, #56]	; 0x38
			  Trajectstate = 3;
 8001b3c:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <main+0x51c>)
 8001b3e:	2203      	movs	r2, #3
 8001b40:	601a      	str	r2, [r3, #0]
			  // End Effector
			  EndEffectorWriteFlag = 1;
 8001b42:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <main+0x520>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
			  scheduler = 4;
 8001b48:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <main+0x524>)
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	601a      	str	r2, [r3, #0]
		  }

		  // Reset Button
		  if (ResetButton.flag == 1)
 8001b4e:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <main+0x528>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d12c      	bne.n	8001bb0 <main+0x4f8>
		  {
			  ResetButton.flag = 0;
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <main+0x528>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
			  scheduler = 0;
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <main+0x524>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8001b62:	e025      	b.n	8001bb0 <main+0x4f8>

	  //Proximity
	  case 4 :
		  if (HoleSequence < 9)
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <main+0x52c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	dc13      	bgt.n	8001b94 <main+0x4dc>
		  {
			  if (TaskType == 1)
 8001b6c:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <main+0x530>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d105      	bne.n	8001b80 <main+0x4c8>
			  {
				  EndEffectorState = 4;			//Pick
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <main+0x534>)
 8001b76:	2204      	movs	r2, #4
 8001b78:	601a      	str	r2, [r3, #0]
				  EndEffectorWrite();
 8001b7a:	f000 fc83 	bl	8002484 <EndEffectorWrite>
 8001b7e:	e009      	b.n	8001b94 <main+0x4dc>
//				  TaskType = -1; 			// TestYesterday
//				  HAL_Delay(2000);		    // TestYesterday
//				  scheduler = 2; 			// TestYesterday
			  }
			  else if (TaskType == -1)
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <main+0x530>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d104      	bne.n	8001b94 <main+0x4dc>
			  {
				  EndEffectorState = 5;			//Place
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <main+0x534>)
 8001b8c:	2205      	movs	r2, #5
 8001b8e:	601a      	str	r2, [r3, #0]
				  EndEffectorWrite();
 8001b90:	f000 fc78 	bl	8002484 <EndEffectorWrite>
//				  {
//					  scheduler = 1; 		// TestYesterday
//				  }
			  }
		  }
		  if (ResetButton.flag == 1)
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <main+0x528>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d10b      	bne.n	8001bb4 <main+0x4fc>
			  {
				  ResetButton.flag = 0;
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <main+0x528>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
				  scheduler = 0;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <main+0x524>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
			  }

		  break;
 8001ba8:	e004      	b.n	8001bb4 <main+0x4fc>

	  //Emergency
	  case 5:
		  Homing();
 8001baa:	f000 fc2b 	bl	8002404 <Homing>
		  break;
 8001bae:	e002      	b.n	8001bb6 <main+0x4fe>
		  break;
 8001bb0:	bf00      	nop
 8001bb2:	e5e4      	b.n	800177e <main+0xc6>
		  break;
 8001bb4:	bf00      	nop
  {
 8001bb6:	e5e2      	b.n	800177e <main+0xc6>
 8001bb8:	200005f8 	.word	0x200005f8
 8001bbc:	20000a5c 	.word	0x20000a5c
 8001bc0:	20001180 	.word	0x20001180
 8001bc4:	20001184 	.word	0x20001184
 8001bc8:	20000a18 	.word	0x20000a18
 8001bcc:	20000544 	.word	0x20000544
 8001bd0:	20000a24 	.word	0x20000a24
 8001bd4:	20000a1c 	.word	0x20000a1c
 8001bd8:	20000ba8 	.word	0x20000ba8
 8001bdc:	20000a10 	.word	0x20000a10
 8001be0:	20000b6c 	.word	0x20000b6c
 8001be4:	20000a14 	.word	0x20000a14
 8001be8:	20000200 	.word	0x20000200
 8001bec:	20000bb0 	.word	0x20000bb0

08001bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b094      	sub	sp, #80	; 0x50
 8001bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf6:	f107 0320 	add.w	r3, r7, #32
 8001bfa:	2230      	movs	r2, #48	; 0x30
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f00a fd76 	bl	800c6f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c04:	f107 030c 	add.w	r3, r7, #12
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c14:	2300      	movs	r3, #0
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <SystemClock_Config+0xc8>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	4a26      	ldr	r2, [pc, #152]	; (8001cb8 <SystemClock_Config+0xc8>)
 8001c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c22:	6413      	str	r3, [r2, #64]	; 0x40
 8001c24:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <SystemClock_Config+0xc8>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c30:	2300      	movs	r3, #0
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <SystemClock_Config+0xcc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a20      	ldr	r2, [pc, #128]	; (8001cbc <SystemClock_Config+0xcc>)
 8001c3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <SystemClock_Config+0xcc>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c50:	2301      	movs	r3, #1
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c54:	2310      	movs	r3, #16
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c60:	2308      	movs	r3, #8
 8001c62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001c64:	2364      	movs	r3, #100	; 0x64
 8001c66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c70:	f107 0320 	add.w	r3, r7, #32
 8001c74:	4618      	mov	r0, r3
 8001c76:	f007 f83d 	bl	8008cf4 <HAL_RCC_OscConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c80:	f002 fba6 	bl	80043d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c84:	230f      	movs	r3, #15
 8001c86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	2103      	movs	r1, #3
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f007 fa9f 	bl	80091e4 <HAL_RCC_ClockConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001cac:	f002 fb90 	bl	80043d0 <Error_Handler>
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3750      	adds	r7, #80	; 0x50
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000

08001cc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001cd2:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <MX_ADC1_Init+0xb4>)
 8001cd4:	4a28      	ldr	r2, [pc, #160]	; (8001d78 <MX_ADC1_Init+0xb8>)
 8001cd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cd8:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <MX_ADC1_Init+0xb4>)
 8001cda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cde:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ce0:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <MX_ADC1_Init+0xb4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ce6:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <MX_ADC1_Init+0xb4>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001cec:	4b21      	ldr	r3, [pc, #132]	; (8001d74 <MX_ADC1_Init+0xb4>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <MX_ADC1_Init+0xb4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <MX_ADC1_Init+0xb4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d00:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <MX_ADC1_Init+0xb4>)
 8001d02:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <MX_ADC1_Init+0xbc>)
 8001d04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d06:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <MX_ADC1_Init+0xb4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <MX_ADC1_Init+0xb4>)
 8001d0e:	2202      	movs	r2, #2
 8001d10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d12:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <MX_ADC1_Init+0xb4>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d1a:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <MX_ADC1_Init+0xb4>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d20:	4814      	ldr	r0, [pc, #80]	; (8001d74 <MX_ADC1_Init+0xb4>)
 8001d22:	f003 f879 	bl	8004e18 <HAL_ADC_Init>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d2c:	f002 fb50 	bl	80043d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d34:	2301      	movs	r3, #1
 8001d36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d3c:	463b      	mov	r3, r7
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <MX_ADC1_Init+0xb4>)
 8001d42:	f003 f9bb 	bl	80050bc <HAL_ADC_ConfigChannel>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d4c:	f002 fb40 	bl	80043d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d50:	2301      	movs	r3, #1
 8001d52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d54:	2302      	movs	r3, #2
 8001d56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d58:	463b      	mov	r3, r7
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_ADC1_Init+0xb4>)
 8001d5e:	f003 f9ad 	bl	80050bc <HAL_ADC_ConfigChannel>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001d68:	f002 fb32 	bl	80043d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000448 	.word	0x20000448
 8001d78:	40012000 	.word	0x40012000
 8001d7c:	0f000001 	.word	0x0f000001

08001d80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001d86:	4a13      	ldr	r2, [pc, #76]	; (8001dd4 <MX_I2C1_Init+0x54>)
 8001d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001d8c:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <MX_I2C1_Init+0x58>)
 8001d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001d9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001da2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001da4:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dbc:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001dbe:	f004 fb29 	bl	8006414 <HAL_I2C_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dc8:	f002 fb02 	bl	80043d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200004f0 	.word	0x200004f0
 8001dd4:	40005400 	.word	0x40005400
 8001dd8:	000186a0 	.word	0x000186a0

08001ddc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b092      	sub	sp, #72	; 0x48
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
 8001dfc:	615a      	str	r2, [r3, #20]
 8001dfe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	2220      	movs	r2, #32
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f00a fc72 	bl	800c6f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e0c:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <MX_TIM1_Init+0x118>)
 8001e0e:	4a3a      	ldr	r2, [pc, #232]	; (8001ef8 <MX_TIM1_Init+0x11c>)
 8001e10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e12:	4b38      	ldr	r3, [pc, #224]	; (8001ef4 <MX_TIM1_Init+0x118>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e18:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <MX_TIM1_Init+0x118>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8001e1e:	4b35      	ldr	r3, [pc, #212]	; (8001ef4 <MX_TIM1_Init+0x118>)
 8001e20:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001e24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e26:	4b33      	ldr	r3, [pc, #204]	; (8001ef4 <MX_TIM1_Init+0x118>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e2c:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <MX_TIM1_Init+0x118>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e32:	4b30      	ldr	r3, [pc, #192]	; (8001ef4 <MX_TIM1_Init+0x118>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e38:	482e      	ldr	r0, [pc, #184]	; (8001ef4 <MX_TIM1_Init+0x118>)
 8001e3a:	f007 fd71 	bl	8009920 <HAL_TIM_PWM_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001e44:	f002 fac4 	bl	80043d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e54:	4619      	mov	r1, r3
 8001e56:	4827      	ldr	r0, [pc, #156]	; (8001ef4 <MX_TIM1_Init+0x118>)
 8001e58:	f009 f854 	bl	800af04 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001e62:	f002 fab5 	bl	80043d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e66:	2360      	movs	r3, #96	; 0x60
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e72:	2300      	movs	r3, #0
 8001e74:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e86:	2200      	movs	r2, #0
 8001e88:	4619      	mov	r1, r3
 8001e8a:	481a      	ldr	r0, [pc, #104]	; (8001ef4 <MX_TIM1_Init+0x118>)
 8001e8c:	f008 f9e8 	bl	800a260 <HAL_TIM_PWM_ConfigChannel>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001e96:	f002 fa9b 	bl	80043d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4814      	ldr	r0, [pc, #80]	; (8001ef4 <MX_TIM1_Init+0x118>)
 8001ea4:	f008 f9dc 	bl	800a260 <HAL_TIM_PWM_ConfigChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001eae:	f002 fa8f 	bl	80043d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ec6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4807      	ldr	r0, [pc, #28]	; (8001ef4 <MX_TIM1_Init+0x118>)
 8001ed6:	f009 f883 	bl	800afe0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001ee0:	f002 fa76 	bl	80043d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ee4:	4803      	ldr	r0, [pc, #12]	; (8001ef4 <MX_TIM1_Init+0x118>)
 8001ee6:	f002 fc4d 	bl	8004784 <HAL_TIM_MspPostInit>

}
 8001eea:	bf00      	nop
 8001eec:	3748      	adds	r7, #72	; 0x48
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000544 	.word	0x20000544
 8001ef8:	40010000 	.word	0x40010000

08001efc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	; 0x30
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f02:	f107 030c 	add.w	r3, r7, #12
 8001f06:	2224      	movs	r2, #36	; 0x24
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f00a fbf0 	bl	800c6f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <MX_TIM3_Init+0xa0>)
 8001f1a:	4a21      	ldr	r2, [pc, #132]	; (8001fa0 <MX_TIM3_Init+0xa4>)
 8001f1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <MX_TIM3_Init+0xa0>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <MX_TIM3_Init+0xa0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD-1;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <MX_TIM3_Init+0xa0>)
 8001f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f32:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <MX_TIM3_Init+0xa0>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f38:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <MX_TIM3_Init+0xa0>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f46:	2301      	movs	r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001f4e:	230f      	movs	r3, #15
 8001f50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f56:	2301      	movs	r3, #1
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001f5e:	230f      	movs	r3, #15
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f62:	f107 030c 	add.w	r3, r7, #12
 8001f66:	4619      	mov	r1, r3
 8001f68:	480c      	ldr	r0, [pc, #48]	; (8001f9c <MX_TIM3_Init+0xa0>)
 8001f6a:	f007 feb3 	bl	8009cd4 <HAL_TIM_Encoder_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f74:	f002 fa2c 	bl	80043d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	4619      	mov	r1, r3
 8001f84:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_TIM3_Init+0xa0>)
 8001f86:	f008 ffbd 	bl	800af04 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001f90:	f002 fa1e 	bl	80043d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	3730      	adds	r7, #48	; 0x30
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200005f8 	.word	0x200005f8
 8001fa0:	40000400 	.word	0x40000400

08001fa4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001faa:	f107 0308 	add.w	r3, r7, #8
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb8:	463b      	mov	r3, r7
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <MX_TIM4_Init+0x94>)
 8001fc2:	4a1e      	ldr	r2, [pc, #120]	; (800203c <MX_TIM4_Init+0x98>)
 8001fc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <MX_TIM4_Init+0x94>)
 8001fc8:	2263      	movs	r2, #99	; 0x63
 8001fca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fcc:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <MX_TIM4_Init+0x94>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001fd2:	4b19      	ldr	r3, [pc, #100]	; (8002038 <MX_TIM4_Init+0x94>)
 8001fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <MX_TIM4_Init+0x94>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe0:	4b15      	ldr	r3, [pc, #84]	; (8002038 <MX_TIM4_Init+0x94>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fe6:	4814      	ldr	r0, [pc, #80]	; (8002038 <MX_TIM4_Init+0x94>)
 8001fe8:	f007 fb1c 	bl	8009624 <HAL_TIM_Base_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001ff2:	f002 f9ed 	bl	80043d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ffc:	f107 0308 	add.w	r3, r7, #8
 8002000:	4619      	mov	r1, r3
 8002002:	480d      	ldr	r0, [pc, #52]	; (8002038 <MX_TIM4_Init+0x94>)
 8002004:	f008 f9ee 	bl	800a3e4 <HAL_TIM_ConfigClockSource>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800200e:	f002 f9df 	bl	80043d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800201a:	463b      	mov	r3, r7
 800201c:	4619      	mov	r1, r3
 800201e:	4806      	ldr	r0, [pc, #24]	; (8002038 <MX_TIM4_Init+0x94>)
 8002020:	f008 ff70 	bl	800af04 <HAL_TIMEx_MasterConfigSynchronization>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800202a:	f002 f9d1 	bl	80043d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200006ac 	.word	0x200006ac
 800203c:	40000800 	.word	0x40000800

08002040 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002046:	463b      	mov	r3, r7
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002052:	4b16      	ldr	r3, [pc, #88]	; (80020ac <MX_TIM9_Init+0x6c>)
 8002054:	4a16      	ldr	r2, [pc, #88]	; (80020b0 <MX_TIM9_Init+0x70>)
 8002056:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99;
 8002058:	4b14      	ldr	r3, [pc, #80]	; (80020ac <MX_TIM9_Init+0x6c>)
 800205a:	2263      	movs	r2, #99	; 0x63
 800205c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205e:	4b13      	ldr	r3, [pc, #76]	; (80020ac <MX_TIM9_Init+0x6c>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <MX_TIM9_Init+0x6c>)
 8002066:	f240 32e7 	movw	r2, #999	; 0x3e7
 800206a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <MX_TIM9_Init+0x6c>)
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <MX_TIM9_Init+0x6c>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002078:	480c      	ldr	r0, [pc, #48]	; (80020ac <MX_TIM9_Init+0x6c>)
 800207a:	f007 fad3 	bl	8009624 <HAL_TIM_Base_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002084:	f002 f9a4 	bl	80043d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800208c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800208e:	463b      	mov	r3, r7
 8002090:	4619      	mov	r1, r3
 8002092:	4806      	ldr	r0, [pc, #24]	; (80020ac <MX_TIM9_Init+0x6c>)
 8002094:	f008 f9a6 	bl	800a3e4 <HAL_TIM_ConfigClockSource>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800209e:	f002 f997 	bl	80043d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000760 	.word	0x20000760
 80020b0:	40014000 	.word	0x40014000

080020b4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
 80020c8:	615a      	str	r2, [r3, #20]
 80020ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80020cc:	4b21      	ldr	r3, [pc, #132]	; (8002154 <MX_TIM11_Init+0xa0>)
 80020ce:	4a22      	ldr	r2, [pc, #136]	; (8002158 <MX_TIM11_Init+0xa4>)
 80020d0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <MX_TIM11_Init+0xa0>)
 80020d4:	2263      	movs	r2, #99	; 0x63
 80020d6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d8:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <MX_TIM11_Init+0xa0>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <MX_TIM11_Init+0xa0>)
 80020e0:	f240 72d5 	movw	r2, #2005	; 0x7d5
 80020e4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e6:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <MX_TIM11_Init+0xa0>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <MX_TIM11_Init+0xa0>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80020f2:	4818      	ldr	r0, [pc, #96]	; (8002154 <MX_TIM11_Init+0xa0>)
 80020f4:	f007 fa96 	bl	8009624 <HAL_TIM_Base_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80020fe:	f002 f967 	bl	80043d0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8002102:	4814      	ldr	r0, [pc, #80]	; (8002154 <MX_TIM11_Init+0xa0>)
 8002104:	f007 fba6 	bl	8009854 <HAL_TIM_OC_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800210e:	f002 f95f 	bl	80043d0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8002112:	2108      	movs	r1, #8
 8002114:	480f      	ldr	r0, [pc, #60]	; (8002154 <MX_TIM11_Init+0xa0>)
 8002116:	f007 fd0f 	bl	8009b38 <HAL_TIM_OnePulse_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8002120:	f002 f956 	bl	80043d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002124:	2310      	movs	r3, #16
 8002126:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8002128:	f240 5399 	movw	r3, #1433	; 0x599
 800212c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	2200      	movs	r2, #0
 800213a:	4619      	mov	r1, r3
 800213c:	4805      	ldr	r0, [pc, #20]	; (8002154 <MX_TIM11_Init+0xa0>)
 800213e:	f008 f833 	bl	800a1a8 <HAL_TIM_OC_ConfigChannel>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8002148:	f002 f942 	bl	80043d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800214c:	bf00      	nop
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000814 	.word	0x20000814
 8002158:	40014800 	.word	0x40014800

0800215c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002162:	4a12      	ldr	r2, [pc, #72]	; (80021ac <MX_USART1_UART_Init+0x50>)
 8002164:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800216c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002176:	2200      	movs	r2, #0
 8002178:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800217a:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <MX_USART1_UART_Init+0x4c>)
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002180:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002182:	220c      	movs	r2, #12
 8002184:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <MX_USART1_UART_Init+0x4c>)
 800218e:	2200      	movs	r2, #0
 8002190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002192:	4805      	ldr	r0, [pc, #20]	; (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002194:	f008 ff94 	bl	800b0c0 <HAL_UART_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800219e:	f002 f917 	bl	80043d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200008c8 	.word	0x200008c8
 80021ac:	40011000 	.word	0x40011000

080021b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <MX_USART2_UART_Init+0x50>)
 80021b6:	4a13      	ldr	r2, [pc, #76]	; (8002204 <MX_USART2_UART_Init+0x54>)
 80021b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80021ba:	4b11      	ldr	r3, [pc, #68]	; (8002200 <MX_USART2_UART_Init+0x50>)
 80021bc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80021c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <MX_USART2_UART_Init+0x50>)
 80021c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021c8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021ca:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <MX_USART2_UART_Init+0x50>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <MX_USART2_UART_Init+0x50>)
 80021d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <MX_USART2_UART_Init+0x50>)
 80021da:	220c      	movs	r2, #12
 80021dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <MX_USART2_UART_Init+0x50>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <MX_USART2_UART_Init+0x50>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021ea:	4805      	ldr	r0, [pc, #20]	; (8002200 <MX_USART2_UART_Init+0x50>)
 80021ec:	f008 ff68 	bl	800b0c0 <HAL_UART_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80021f6:	f002 f8eb 	bl	80043d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	2000093c 	.word	0x2000093c
 8002204:	40004400 	.word	0x40004400

08002208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	4b17      	ldr	r3, [pc, #92]	; (8002270 <MX_DMA_Init+0x68>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a16      	ldr	r2, [pc, #88]	; (8002270 <MX_DMA_Init+0x68>)
 8002218:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b14      	ldr	r3, [pc, #80]	; (8002270 <MX_DMA_Init+0x68>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <MX_DMA_Init+0x68>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <MX_DMA_Init+0x68>)
 8002234:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <MX_DMA_Init+0x68>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2100      	movs	r1, #0
 800224a:	2011      	movs	r0, #17
 800224c:	f003 fac1 	bl	80057d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002250:	2011      	movs	r0, #17
 8002252:	f003 fada 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2100      	movs	r1, #0
 800225a:	2038      	movs	r0, #56	; 0x38
 800225c:	f003 fab9 	bl	80057d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002260:	2038      	movs	r0, #56	; 0x38
 8002262:	f003 fad2 	bl	800580a <HAL_NVIC_EnableIRQ>

}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800

08002274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	; 0x28
 8002278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	60da      	str	r2, [r3, #12]
 8002288:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	4b48      	ldr	r3, [pc, #288]	; (80023b0 <MX_GPIO_Init+0x13c>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a47      	ldr	r2, [pc, #284]	; (80023b0 <MX_GPIO_Init+0x13c>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b45      	ldr	r3, [pc, #276]	; (80023b0 <MX_GPIO_Init+0x13c>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <MX_GPIO_Init+0x13c>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a40      	ldr	r2, [pc, #256]	; (80023b0 <MX_GPIO_Init+0x13c>)
 80022b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b3e      	ldr	r3, [pc, #248]	; (80023b0 <MX_GPIO_Init+0x13c>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	4b3a      	ldr	r3, [pc, #232]	; (80023b0 <MX_GPIO_Init+0x13c>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a39      	ldr	r2, [pc, #228]	; (80023b0 <MX_GPIO_Init+0x13c>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <MX_GPIO_Init+0x13c>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	4b33      	ldr	r3, [pc, #204]	; (80023b0 <MX_GPIO_Init+0x13c>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a32      	ldr	r2, [pc, #200]	; (80023b0 <MX_GPIO_Init+0x13c>)
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <MX_GPIO_Init+0x13c>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 80022fa:	2200      	movs	r2, #0
 80022fc:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8002300:	482c      	ldr	r0, [pc, #176]	; (80023b4 <MX_GPIO_Init+0x140>)
 8002302:	f004 f855 	bl	80063b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002306:	2302      	movs	r3, #2
 8002308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	4619      	mov	r1, r3
 8002318:	4827      	ldr	r0, [pc, #156]	; (80023b8 <MX_GPIO_Init+0x144>)
 800231a:	f003 fead 	bl	8006078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800231e:	230c      	movs	r3, #12
 8002320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002322:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	4619      	mov	r1, r3
 8002332:	4821      	ldr	r0, [pc, #132]	; (80023b8 <MX_GPIO_Init+0x144>)
 8002334:	f003 fea0 	bl	8006078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8002338:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800233c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002346:	f107 0314 	add.w	r3, r7, #20
 800234a:	4619      	mov	r1, r3
 800234c:	481b      	ldr	r0, [pc, #108]	; (80023bc <MX_GPIO_Init+0x148>)
 800234e:	f003 fe93 	bl	8006078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8002352:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8002356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002358:	2301      	movs	r3, #1
 800235a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	2300      	movs	r3, #0
 8002362:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	4619      	mov	r1, r3
 800236a:	4812      	ldr	r0, [pc, #72]	; (80023b4 <MX_GPIO_Init+0x140>)
 800236c:	f003 fe84 	bl	8006078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002370:	2360      	movs	r3, #96	; 0x60
 8002372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002374:	2300      	movs	r3, #0
 8002376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	4619      	mov	r1, r3
 8002382:	480c      	ldr	r0, [pc, #48]	; (80023b4 <MX_GPIO_Init+0x140>)
 8002384:	f003 fe78 	bl	8006078 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002388:	2200      	movs	r2, #0
 800238a:	2100      	movs	r1, #0
 800238c:	2008      	movs	r0, #8
 800238e:	f003 fa20 	bl	80057d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002392:	2008      	movs	r0, #8
 8002394:	f003 fa39 	bl	800580a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	2100      	movs	r1, #0
 800239c:	2009      	movs	r0, #9
 800239e:	f003 fa18 	bl	80057d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80023a2:	2009      	movs	r0, #9
 80023a4:	f003 fa31 	bl	800580a <HAL_NVIC_EnableIRQ>

}
 80023a8:	bf00      	nop
 80023aa:	3728      	adds	r7, #40	; 0x28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40020400 	.word	0x40020400
 80023b8:	40020800 	.word	0x40020800
 80023bc:	40020000 	.word	0x40020000

080023c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d106      	bne.n	80023de <HAL_GPIO_EXTI_Callback+0x1e>
	{
		scheduler = 5;
 80023d0:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_GPIO_EXTI_Callback+0x3c>)
 80023d2:	2205      	movs	r2, #5
 80023d4:	601a      	str	r2, [r3, #0]
		Proximity = 1;
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <HAL_GPIO_EXTI_Callback+0x40>)
 80023d8:	2201      	movs	r2, #1
 80023da:	601a      	str	r2, [r3, #0]
	else if(GPIO_Pin == GPIO_PIN_3)
	{
		scheduler = 5;
		Proximity = 2;
	}
}
 80023dc:	e008      	b.n	80023f0 <HAL_GPIO_EXTI_Callback+0x30>
	else if(GPIO_Pin == GPIO_PIN_3)
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d105      	bne.n	80023f0 <HAL_GPIO_EXTI_Callback+0x30>
		scheduler = 5;
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_GPIO_EXTI_Callback+0x3c>)
 80023e6:	2205      	movs	r2, #5
 80023e8:	601a      	str	r2, [r3, #0]
		Proximity = 2;
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_GPIO_EXTI_Callback+0x40>)
 80023ec:	2202      	movs	r2, #2
 80023ee:	601a      	str	r2, [r3, #0]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	20000a10 	.word	0x20000a10
 8002400:	20000bb4 	.word	0x20000bb4

08002404 <Homing>:

void Homing()
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
	if (Proximity == 1)
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <Homing+0x6c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d108      	bne.n	8002422 <Homing+0x1e>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002410:	4b18      	ldr	r3, [pc, #96]	; (8002474 <Homing+0x70>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2200      	movs	r2, #0
 8002416:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <Homing+0x70>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2200      	movs	r2, #0
 800241e:	635a      	str	r2, [r3, #52]	; 0x34
 8002420:	e00b      	b.n	800243a <Homing+0x36>
	}

	else if (Proximity == 2)
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <Homing+0x6c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d107      	bne.n	800243a <Homing+0x36>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <Homing+0x70>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2200      	movs	r2, #0
 8002430:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <Homing+0x70>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2200      	movs	r2, #0
 8002438:	635a      	str	r2, [r3, #52]	; 0x34
	}

	//Proximity Home
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 1)
 800243a:	2102      	movs	r1, #2
 800243c:	480e      	ldr	r0, [pc, #56]	; (8002478 <Homing+0x74>)
 800243e:	f003 ff9f 	bl	8006380 <HAL_GPIO_ReadPin>
 8002442:	4603      	mov	r3, r0
 8002444:	2b01      	cmp	r3, #1
 8002446:	d110      	bne.n	800246a <Homing+0x66>
	{
		Proximity = 0;
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <Homing+0x6c>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <Homing+0x70>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2200      	movs	r2, #0
 8002454:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002456:	4b07      	ldr	r3, [pc, #28]	; (8002474 <Homing+0x70>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2200      	movs	r2, #0
 800245c:	635a      	str	r2, [r3, #52]	; 0x34
		JoySpeed = 0;
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <Homing+0x78>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
		scheduler = 0;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <Homing+0x7c>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
	}
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000bb4 	.word	0x20000bb4
 8002474:	20000544 	.word	0x20000544
 8002478:	40020800 	.word	0x40020800
 800247c:	20000ba4 	.word	0x20000ba4
 8002480:	20000a10 	.word	0x20000a10

08002484 <EndEffectorWrite>:

void EndEffectorWrite()
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af02      	add	r7, sp, #8
//	HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
	switch(EndEffectorState)
 800248a:	4b8b      	ldr	r3, [pc, #556]	; (80026b8 <EndEffectorWrite+0x234>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b08      	cmp	r3, #8
 8002490:	f200 810e 	bhi.w	80026b0 <EndEffectorWrite+0x22c>
 8002494:	a201      	add	r2, pc, #4	; (adr r2, 800249c <EndEffectorWrite+0x18>)
 8002496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249a:	bf00      	nop
 800249c:	080024c1 	.word	0x080024c1
 80024a0:	080024e3 	.word	0x080024e3
 80024a4:	0800250b 	.word	0x0800250b
 80024a8:	08002533 	.word	0x08002533
 80024ac:	0800255b 	.word	0x0800255b
 80024b0:	080025ad 	.word	0x080025ad
 80024b4:	0800261d 	.word	0x0800261d
 80024b8:	08002643 	.word	0x08002643
 80024bc:	08002669 	.word	0x08002669
	{
	case 0:
		if(EndEffectorWriteFlag == 1)
 80024c0:	4b7e      	ldr	r3, [pc, #504]	; (80026bc <EndEffectorWrite+0x238>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	f040 80e2 	bne.w	800268e <EndEffectorWrite+0x20a>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, SoftReset, 4, 100);
 80024ca:	2364      	movs	r3, #100	; 0x64
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2304      	movs	r3, #4
 80024d0:	4a7b      	ldr	r2, [pc, #492]	; (80026c0 <EndEffectorWrite+0x23c>)
 80024d2:	212a      	movs	r1, #42	; 0x2a
 80024d4:	487b      	ldr	r0, [pc, #492]	; (80026c4 <EndEffectorWrite+0x240>)
 80024d6:	f004 f8e1 	bl	800669c <HAL_I2C_Master_Transmit>
//				HAL_Delay(5);
//				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
				EndEffectorWriteFlag = 0;
 80024da:	4b78      	ldr	r3, [pc, #480]	; (80026bc <EndEffectorWrite+0x238>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
			}
		break;
 80024e0:	e0d5      	b.n	800268e <EndEffectorWrite+0x20a>
	case 1:
		if(EndEffectorWriteFlag == 1)
 80024e2:	4b76      	ldr	r3, [pc, #472]	; (80026bc <EndEffectorWrite+0x238>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	f040 80d3 	bne.w	8002692 <EndEffectorWrite+0x20e>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, TestModeOn, 2, 100);
 80024ec:	2364      	movs	r3, #100	; 0x64
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2302      	movs	r3, #2
 80024f2:	4a75      	ldr	r2, [pc, #468]	; (80026c8 <EndEffectorWrite+0x244>)
 80024f4:	212a      	movs	r1, #42	; 0x2a
 80024f6:	4873      	ldr	r0, [pc, #460]	; (80026c4 <EndEffectorWrite+0x240>)
 80024f8:	f004 f8d0 	bl	800669c <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 1; //End Effector Status: Laser On
 80024fc:	4b73      	ldr	r3, [pc, #460]	; (80026cc <EndEffectorWrite+0x248>)
 80024fe:	2201      	movs	r2, #1
 8002500:	809a      	strh	r2, [r3, #4]
//				HAL_Delay(5);
//				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
				EndEffectorWriteFlag = 0;
 8002502:	4b6e      	ldr	r3, [pc, #440]	; (80026bc <EndEffectorWrite+0x238>)
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002508:	e0c3      	b.n	8002692 <EndEffectorWrite+0x20e>
	case 2:
		if(EndEffectorWriteFlag == 1)
 800250a:	4b6c      	ldr	r3, [pc, #432]	; (80026bc <EndEffectorWrite+0x238>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b01      	cmp	r3, #1
 8002510:	f040 80c1 	bne.w	8002696 <EndEffectorWrite+0x212>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, TestModeOff, 2, 100);
 8002514:	2364      	movs	r3, #100	; 0x64
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2302      	movs	r3, #2
 800251a:	4a6d      	ldr	r2, [pc, #436]	; (80026d0 <EndEffectorWrite+0x24c>)
 800251c:	212a      	movs	r1, #42	; 0x2a
 800251e:	4869      	ldr	r0, [pc, #420]	; (80026c4 <EndEffectorWrite+0x240>)
 8002520:	f004 f8bc 	bl	800669c <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Laser Off
 8002524:	4b69      	ldr	r3, [pc, #420]	; (80026cc <EndEffectorWrite+0x248>)
 8002526:	2200      	movs	r2, #0
 8002528:	809a      	strh	r2, [r3, #4]
//				HAL_Delay(5);
//				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
				EndEffectorWriteFlag = 0;
 800252a:	4b64      	ldr	r3, [pc, #400]	; (80026bc <EndEffectorWrite+0x238>)
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002530:	e0b1      	b.n	8002696 <EndEffectorWrite+0x212>
	case 3:
		if(EndEffectorWriteFlag == 1)
 8002532:	4b62      	ldr	r3, [pc, #392]	; (80026bc <EndEffectorWrite+0x238>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	f040 80af 	bne.w	800269a <EndEffectorWrite+0x216>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, RunModeOn, 2, 100);
 800253c:	2364      	movs	r3, #100	; 0x64
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2302      	movs	r3, #2
 8002542:	4a64      	ldr	r2, [pc, #400]	; (80026d4 <EndEffectorWrite+0x250>)
 8002544:	212a      	movs	r1, #42	; 0x2a
 8002546:	485f      	ldr	r0, [pc, #380]	; (80026c4 <EndEffectorWrite+0x240>)
 8002548:	f004 f8a8 	bl	800669c <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 2; //End Effector Status: Gripper Power
 800254c:	4b5f      	ldr	r3, [pc, #380]	; (80026cc <EndEffectorWrite+0x248>)
 800254e:	2202      	movs	r2, #2
 8002550:	809a      	strh	r2, [r3, #4]
//				HAL_Delay(5);
//				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
				EndEffectorWriteFlag = 0;
 8002552:	4b5a      	ldr	r3, [pc, #360]	; (80026bc <EndEffectorWrite+0x238>)
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002558:	e09f      	b.n	800269a <EndEffectorWrite+0x216>
	case 4:
		if(EndEffectorWriteFlag == 1)
 800255a:	4b58      	ldr	r3, [pc, #352]	; (80026bc <EndEffectorWrite+0x238>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d113      	bne.n	800258a <EndEffectorWrite+0x106>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, PickData, 2, 100);
 8002562:	2364      	movs	r3, #100	; 0x64
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2302      	movs	r3, #2
 8002568:	4a5b      	ldr	r2, [pc, #364]	; (80026d8 <EndEffectorWrite+0x254>)
 800256a:	212a      	movs	r1, #42	; 0x2a
 800256c:	4855      	ldr	r0, [pc, #340]	; (80026c4 <EndEffectorWrite+0x240>)
 800256e:	f004 f895 	bl	800669c <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 6; //End Effector Status: Piking
 8002572:	4b56      	ldr	r3, [pc, #344]	; (80026cc <EndEffectorWrite+0x248>)
 8002574:	2206      	movs	r2, #6
 8002576:	809a      	strh	r2, [r3, #4]
				HAL_Delay(10);
 8002578:	200a      	movs	r0, #10
 800257a:	f002 fc29 	bl	8004dd0 <HAL_Delay>
				EndEffectorReadFlag = 1;
 800257e:	4b57      	ldr	r3, [pc, #348]	; (80026dc <EndEffectorWrite+0x258>)
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
//				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
				EndEffectorWriteFlag = 0;
 8002584:	4b4d      	ldr	r3, [pc, #308]	; (80026bc <EndEffectorWrite+0x238>)
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
			}
		if(EndEffectorDataReadBack[0] == 0x07)	//Picked
 800258a:	4b55      	ldr	r3, [pc, #340]	; (80026e0 <EndEffectorWrite+0x25c>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b07      	cmp	r3, #7
 8002590:	f040 8085 	bne.w	800269e <EndEffectorWrite+0x21a>
			{
				TaskType *= -1;
 8002594:	4b53      	ldr	r3, [pc, #332]	; (80026e4 <EndEffectorWrite+0x260>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	425b      	negs	r3, r3
 800259a:	4a52      	ldr	r2, [pc, #328]	; (80026e4 <EndEffectorWrite+0x260>)
 800259c:	6013      	str	r3, [r2, #0]
				EndEffectorReadFlag = 0;
 800259e:	4b4f      	ldr	r3, [pc, #316]	; (80026dc <EndEffectorWrite+0x258>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
				scheduler = 2;
 80025a4:	4b50      	ldr	r3, [pc, #320]	; (80026e8 <EndEffectorWrite+0x264>)
 80025a6:	2202      	movs	r2, #2
 80025a8:	601a      	str	r2, [r3, #0]
			}
		break;
 80025aa:	e078      	b.n	800269e <EndEffectorWrite+0x21a>
	case 5:
		if(EndEffectorWriteFlag == 1)
 80025ac:	4b43      	ldr	r3, [pc, #268]	; (80026bc <EndEffectorWrite+0x238>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d113      	bne.n	80025dc <EndEffectorWrite+0x158>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, PlaceData, 2, 100);
 80025b4:	2364      	movs	r3, #100	; 0x64
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	2302      	movs	r3, #2
 80025ba:	4a4c      	ldr	r2, [pc, #304]	; (80026ec <EndEffectorWrite+0x268>)
 80025bc:	212a      	movs	r1, #42	; 0x2a
 80025be:	4841      	ldr	r0, [pc, #260]	; (80026c4 <EndEffectorWrite+0x240>)
 80025c0:	f004 f86c 	bl	800669c <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 10; //End Effector Status: Placing
 80025c4:	4b41      	ldr	r3, [pc, #260]	; (80026cc <EndEffectorWrite+0x248>)
 80025c6:	220a      	movs	r2, #10
 80025c8:	809a      	strh	r2, [r3, #4]
				HAL_Delay(10);
 80025ca:	200a      	movs	r0, #10
 80025cc:	f002 fc00 	bl	8004dd0 <HAL_Delay>
				EndEffectorReadFlag = 1;
 80025d0:	4b42      	ldr	r3, [pc, #264]	; (80026dc <EndEffectorWrite+0x258>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
//				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
				EndEffectorWriteFlag = 0;
 80025d6:	4b39      	ldr	r3, [pc, #228]	; (80026bc <EndEffectorWrite+0x238>)
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
			}
		if(EndEffectorDataReadBack[0] == 0x04)	//Placed
 80025dc:	4b40      	ldr	r3, [pc, #256]	; (80026e0 <EndEffectorWrite+0x25c>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d15e      	bne.n	80026a2 <EndEffectorWrite+0x21e>
			{
				registerFrame[2].U16 = 2; //End Effector Status: Gripper Power
 80025e4:	4b39      	ldr	r3, [pc, #228]	; (80026cc <EndEffectorWrite+0x248>)
 80025e6:	2202      	movs	r2, #2
 80025e8:	809a      	strh	r2, [r3, #4]
				TaskType *= -1;
 80025ea:	4b3e      	ldr	r3, [pc, #248]	; (80026e4 <EndEffectorWrite+0x260>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	425b      	negs	r3, r3
 80025f0:	4a3c      	ldr	r2, [pc, #240]	; (80026e4 <EndEffectorWrite+0x260>)
 80025f2:	6013      	str	r3, [r2, #0]
				EndEffectorReadFlag = 0;
 80025f4:	4b39      	ldr	r3, [pc, #228]	; (80026dc <EndEffectorWrite+0x258>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
				HoleSequence += 1;
 80025fa:	4b3d      	ldr	r3, [pc, #244]	; (80026f0 <EndEffectorWrite+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3301      	adds	r3, #1
 8002600:	4a3b      	ldr	r2, [pc, #236]	; (80026f0 <EndEffectorWrite+0x26c>)
 8002602:	6013      	str	r3, [r2, #0]
				if (HoleSequence == 9)
 8002604:	4b3a      	ldr	r3, [pc, #232]	; (80026f0 <EndEffectorWrite+0x26c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b09      	cmp	r3, #9
 800260a:	d103      	bne.n	8002614 <EndEffectorWrite+0x190>
				{
					scheduler = 0;
 800260c:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <EndEffectorWrite+0x264>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
				else
				{
					scheduler = 1;
				}
			}
		break;
 8002612:	e046      	b.n	80026a2 <EndEffectorWrite+0x21e>
					scheduler = 1;
 8002614:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <EndEffectorWrite+0x264>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]
		break;
 800261a:	e042      	b.n	80026a2 <EndEffectorWrite+0x21e>
	case 6:
		if(EndEffectorWriteFlag == 1)
 800261c:	4b27      	ldr	r3, [pc, #156]	; (80026bc <EndEffectorWrite+0x238>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d140      	bne.n	80026a6 <EndEffectorWrite+0x222>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, RunModeOff, 2, 100);
 8002624:	2364      	movs	r3, #100	; 0x64
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2302      	movs	r3, #2
 800262a:	4a32      	ldr	r2, [pc, #200]	; (80026f4 <EndEffectorWrite+0x270>)
 800262c:	212a      	movs	r1, #42	; 0x2a
 800262e:	4825      	ldr	r0, [pc, #148]	; (80026c4 <EndEffectorWrite+0x240>)
 8002630:	f004 f834 	bl	800669c <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 8002634:	4b25      	ldr	r3, [pc, #148]	; (80026cc <EndEffectorWrite+0x248>)
 8002636:	2200      	movs	r2, #0
 8002638:	809a      	strh	r2, [r3, #4]
//				HAL_Delay(5);
//				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
				EndEffectorWriteFlag = 0;
 800263a:	4b20      	ldr	r3, [pc, #128]	; (80026bc <EndEffectorWrite+0x238>)
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002640:	e031      	b.n	80026a6 <EndEffectorWrite+0x222>
	case 7:
		if(EndEffectorWriteFlag == 1)
 8002642:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <EndEffectorWrite+0x238>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d12f      	bne.n	80026aa <EndEffectorWrite+0x226>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, Emergency, 1, 100);
 800264a:	2364      	movs	r3, #100	; 0x64
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	2301      	movs	r3, #1
 8002650:	4a29      	ldr	r2, [pc, #164]	; (80026f8 <EndEffectorWrite+0x274>)
 8002652:	212a      	movs	r1, #42	; 0x2a
 8002654:	481b      	ldr	r0, [pc, #108]	; (80026c4 <EndEffectorWrite+0x240>)
 8002656:	f004 f821 	bl	800669c <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 800265a:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <EndEffectorWrite+0x248>)
 800265c:	2200      	movs	r2, #0
 800265e:	809a      	strh	r2, [r3, #4]
//				HAL_Delay(5);
//				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
				EndEffectorWriteFlag = 0;
 8002660:	4b16      	ldr	r3, [pc, #88]	; (80026bc <EndEffectorWrite+0x238>)
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002666:	e020      	b.n	80026aa <EndEffectorWrite+0x226>
	case 8:
		if(EndEffectorWriteFlag == 1)
 8002668:	4b14      	ldr	r3, [pc, #80]	; (80026bc <EndEffectorWrite+0x238>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d11e      	bne.n	80026ae <EndEffectorWrite+0x22a>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, QuitEmergency, 4, 100);
 8002670:	2364      	movs	r3, #100	; 0x64
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	2304      	movs	r3, #4
 8002676:	4a21      	ldr	r2, [pc, #132]	; (80026fc <EndEffectorWrite+0x278>)
 8002678:	212a      	movs	r1, #42	; 0x2a
 800267a:	4812      	ldr	r0, [pc, #72]	; (80026c4 <EndEffectorWrite+0x240>)
 800267c:	f004 f80e 	bl	800669c <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <EndEffectorWrite+0x248>)
 8002682:	2200      	movs	r2, #0
 8002684:	809a      	strh	r2, [r3, #4]
//				HAL_Delay(5);
//				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
				EndEffectorWriteFlag = 0;
 8002686:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <EndEffectorWrite+0x238>)
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800268c:	e00f      	b.n	80026ae <EndEffectorWrite+0x22a>
		break;
 800268e:	bf00      	nop
 8002690:	e00e      	b.n	80026b0 <EndEffectorWrite+0x22c>
		break;
 8002692:	bf00      	nop
 8002694:	e00c      	b.n	80026b0 <EndEffectorWrite+0x22c>
		break;
 8002696:	bf00      	nop
 8002698:	e00a      	b.n	80026b0 <EndEffectorWrite+0x22c>
		break;
 800269a:	bf00      	nop
 800269c:	e008      	b.n	80026b0 <EndEffectorWrite+0x22c>
		break;
 800269e:	bf00      	nop
 80026a0:	e006      	b.n	80026b0 <EndEffectorWrite+0x22c>
		break;
 80026a2:	bf00      	nop
 80026a4:	e004      	b.n	80026b0 <EndEffectorWrite+0x22c>
		break;
 80026a6:	bf00      	nop
 80026a8:	e002      	b.n	80026b0 <EndEffectorWrite+0x22c>
		break;
 80026aa:	bf00      	nop
 80026ac:	e000      	b.n	80026b0 <EndEffectorWrite+0x22c>
		break;
 80026ae:	bf00      	nop
	}
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000bb0 	.word	0x20000bb0
 80026bc:	20000ba8 	.word	0x20000ba8
 80026c0:	20000224 	.word	0x20000224
 80026c4:	200004f0 	.word	0x200004f0
 80026c8:	20000230 	.word	0x20000230
 80026cc:	2000109c 	.word	0x2000109c
 80026d0:	20000234 	.word	0x20000234
 80026d4:	20000238 	.word	0x20000238
 80026d8:	20000240 	.word	0x20000240
 80026dc:	20000ba9 	.word	0x20000ba9
 80026e0:	20000bac 	.word	0x20000bac
 80026e4:	20000200 	.word	0x20000200
 80026e8:	20000a10 	.word	0x20000a10
 80026ec:	20000244 	.word	0x20000244
 80026f0:	20000a14 	.word	0x20000a14
 80026f4:	2000023c 	.word	0x2000023c
 80026f8:	20000228 	.word	0x20000228
 80026fc:	2000022c 	.word	0x2000022c

08002700 <VelocityApprox>:

void VelocityApprox()
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	static int16_t lastposition = 0;
	velocity = (position - lastposition)/0.001; //pulse/s
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <VelocityApprox+0x50>)
 8002706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270a:	461a      	mov	r2, r3
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <VelocityApprox+0x54>)
 800270e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	4618      	mov	r0, r3
 8002716:	f7fd ff0d 	bl	8000534 <__aeabi_i2d>
 800271a:	a30b      	add	r3, pc, #44	; (adr r3, 8002748 <VelocityApprox+0x48>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	f7fe f89c 	bl	800085c <__aeabi_ddiv>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4610      	mov	r0, r2
 800272a:	4619      	mov	r1, r3
 800272c:	f7fe fa64 	bl	8000bf8 <__aeabi_d2f>
 8002730:	4603      	mov	r3, r0
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <VelocityApprox+0x58>)
 8002734:	6013      	str	r3, [r2, #0]
	lastposition = position;
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <VelocityApprox+0x50>)
 8002738:	f9b3 2000 	ldrsh.w	r2, [r3]
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <VelocityApprox+0x54>)
 800273e:	801a      	strh	r2, [r3, #0]
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	f3af 8000 	nop.w
 8002748:	d2f1a9fc 	.word	0xd2f1a9fc
 800274c:	3f50624d 	.word	0x3f50624d
 8002750:	20000a5c 	.word	0x20000a5c
 8002754:	20001188 	.word	0x20001188
 8002758:	20000a80 	.word	0x20000a80

0800275c <AccelerationApprox>:

void AccelerationApprox()
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
	static float LastVelo = 0;
	Accel = (velocity - LastVelo);	//pulse/s^2
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <AccelerationApprox+0x2c>)
 8002762:	ed93 7a00 	vldr	s14, [r3]
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <AccelerationApprox+0x30>)
 8002768:	edd3 7a00 	vldr	s15, [r3]
 800276c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <AccelerationApprox+0x34>)
 8002772:	edc3 7a00 	vstr	s15, [r3]
	LastVelo = velocity;
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <AccelerationApprox+0x2c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a04      	ldr	r2, [pc, #16]	; (800278c <AccelerationApprox+0x30>)
 800277c:	6013      	str	r3, [r2, #0]

}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	20000a80 	.word	0x20000a80
 800278c:	2000118c 	.word	0x2000118c
 8002790:	20000a84 	.word	0x20000a84
 8002794:	00000000 	.word	0x00000000

08002798 <Routine>:

void Routine()
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
	position_f = position;
 800279c:	4b28      	ldr	r3, [pc, #160]	; (8002840 <Routine+0xa8>)
 800279e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027aa:	4b26      	ldr	r3, [pc, #152]	; (8002844 <Routine+0xac>)
 80027ac:	edc3 7a00 	vstr	s15, [r3]
	Yactualposition = position_f*0.45;			//mm*10
 80027b0:	4b24      	ldr	r3, [pc, #144]	; (8002844 <Routine+0xac>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fecf 	bl	8000558 <__aeabi_f2d>
 80027ba:	a31f      	add	r3, pc, #124	; (adr r3, 8002838 <Routine+0xa0>)
 80027bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c0:	f7fd ff22 	bl	8000608 <__aeabi_dmul>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4610      	mov	r0, r2
 80027ca:	4619      	mov	r1, r3
 80027cc:	f7fe f9cc 	bl	8000b68 <__aeabi_d2iz>
 80027d0:	4603      	mov	r3, r0
 80027d2:	b21a      	sxth	r2, r3
 80027d4:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <Routine+0xb0>)
 80027d6:	801a      	strh	r2, [r3, #0]
	registerFrame[17].U16 = Yactualposition;	//mm*10			//Y Actual Position
 80027d8:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <Routine+0xb0>)
 80027da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027de:	b29a      	uxth	r2, r3
 80027e0:	4b1a      	ldr	r3, [pc, #104]	; (800284c <Routine+0xb4>)
 80027e2:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[18].U16 = velocity*0.45;		//mm/s*10		//Y Actual Speed
 80027e4:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <Routine+0xb8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd feb5 	bl	8000558 <__aeabi_f2d>
 80027ee:	a312      	add	r3, pc, #72	; (adr r3, 8002838 <Routine+0xa0>)
 80027f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f4:	f7fd ff08 	bl	8000608 <__aeabi_dmul>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f7fe f9da 	bl	8000bb8 <__aeabi_d2uiz>
 8002804:	4603      	mov	r3, r0
 8002806:	b29a      	uxth	r2, r3
 8002808:	4b10      	ldr	r3, [pc, #64]	; (800284c <Routine+0xb4>)
 800280a:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[19].U16 = Accel*0.45; 		//mm/s^2*10		//Y Actual Acceleration
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <Routine+0xbc>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd fea1 	bl	8000558 <__aeabi_f2d>
 8002816:	a308      	add	r3, pc, #32	; (adr r3, 8002838 <Routine+0xa0>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f7fd fef4 	bl	8000608 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	f7fe f9c6 	bl	8000bb8 <__aeabi_d2uiz>
 800282c:	4603      	mov	r3, r0
 800282e:	b29a      	uxth	r2, r3
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <Routine+0xb4>)
 8002832:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8002834:	bf00      	nop
 8002836:	bd80      	pop	{r7, pc}
 8002838:	cccccccd 	.word	0xcccccccd
 800283c:	3fdccccc 	.word	0x3fdccccc
 8002840:	20000a5c 	.word	0x20000a5c
 8002844:	20000a60 	.word	0x20000a60
 8002848:	20000a64 	.word	0x20000a64
 800284c:	2000109c 	.word	0x2000109c
 8002850:	20000a80 	.word	0x20000a80
 8002854:	20000a84 	.word	0x20000a84

08002858 <PIDcal>:

float PIDcal()
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
	//position control
	errorposition = setposition - position;
 800285c:	4b3d      	ldr	r3, [pc, #244]	; (8002954 <PIDcal+0xfc>)
 800285e:	ed93 7a00 	vldr	s14, [r3]
 8002862:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <PIDcal+0x100>)
 8002864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002868:	ee07 3a90 	vmov	s15, r3
 800286c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002874:	4b39      	ldr	r3, [pc, #228]	; (800295c <PIDcal+0x104>)
 8002876:	edc3 7a00 	vstr	s15, [r3]

	if(errorposition >= 22)
 800287a:	4b38      	ldr	r3, [pc, #224]	; (800295c <PIDcal+0x104>)
 800287c:	edd3 7a00 	vldr	s15, [r3]
 8002880:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288c:	db0a      	blt.n	80028a4 <PIDcal+0x4c>
	{
		errorposition += 22;
 800288e:	4b33      	ldr	r3, [pc, #204]	; (800295c <PIDcal+0x104>)
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002898:	ee77 7a87 	vadd.f32	s15, s15, s14
 800289c:	4b2f      	ldr	r3, [pc, #188]	; (800295c <PIDcal+0x104>)
 800289e:	edc3 7a00 	vstr	s15, [r3]
 80028a2:	e013      	b.n	80028cc <PIDcal+0x74>
	}
	else if(errorposition <= -22)
 80028a4:	4b2d      	ldr	r3, [pc, #180]	; (800295c <PIDcal+0x104>)
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	eebb 7a06 	vmov.f32	s14, #182	; 0xc1b00000 -22.0
 80028ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b6:	d809      	bhi.n	80028cc <PIDcal+0x74>
	{
		errorposition -= 22;
 80028b8:	4b28      	ldr	r3, [pc, #160]	; (800295c <PIDcal+0x104>)
 80028ba:	edd3 7a00 	vldr	s15, [r3]
 80028be:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 80028c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028c6:	4b25      	ldr	r3, [pc, #148]	; (800295c <PIDcal+0x104>)
 80028c8:	edc3 7a00 	vstr	s15, [r3]
	}

	integral_p = integral_p + errorposition;
 80028cc:	4b24      	ldr	r3, [pc, #144]	; (8002960 <PIDcal+0x108>)
 80028ce:	ed93 7a00 	vldr	s14, [r3]
 80028d2:	4b22      	ldr	r3, [pc, #136]	; (800295c <PIDcal+0x104>)
 80028d4:	edd3 7a00 	vldr	s15, [r3]
 80028d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028dc:	4b20      	ldr	r3, [pc, #128]	; (8002960 <PIDcal+0x108>)
 80028de:	edc3 7a00 	vstr	s15, [r3]
	derivative_p = errorposition - pre_errorposition;
 80028e2:	4b1e      	ldr	r3, [pc, #120]	; (800295c <PIDcal+0x104>)
 80028e4:	ed93 7a00 	vldr	s14, [r3]
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <PIDcal+0x10c>)
 80028ea:	edd3 7a00 	vldr	s15, [r3]
 80028ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f2:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <PIDcal+0x110>)
 80028f4:	edc3 7a00 	vstr	s15, [r3]
	u_position = Kp_p*errorposition + Ki_p*integral_p + Kd_p*derivative_p;
 80028f8:	4b1c      	ldr	r3, [pc, #112]	; (800296c <PIDcal+0x114>)
 80028fa:	ed93 7a00 	vldr	s14, [r3]
 80028fe:	4b17      	ldr	r3, [pc, #92]	; (800295c <PIDcal+0x104>)
 8002900:	edd3 7a00 	vldr	s15, [r3]
 8002904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002908:	4b19      	ldr	r3, [pc, #100]	; (8002970 <PIDcal+0x118>)
 800290a:	edd3 6a00 	vldr	s13, [r3]
 800290e:	4b14      	ldr	r3, [pc, #80]	; (8002960 <PIDcal+0x108>)
 8002910:	edd3 7a00 	vldr	s15, [r3]
 8002914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002918:	ee37 7a27 	vadd.f32	s14, s14, s15
 800291c:	4b15      	ldr	r3, [pc, #84]	; (8002974 <PIDcal+0x11c>)
 800291e:	edd3 6a00 	vldr	s13, [r3]
 8002922:	4b11      	ldr	r3, [pc, #68]	; (8002968 <PIDcal+0x110>)
 8002924:	edd3 7a00 	vldr	s15, [r3]
 8002928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800292c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002930:	4b11      	ldr	r3, [pc, #68]	; (8002978 <PIDcal+0x120>)
 8002932:	edc3 7a00 	vstr	s15, [r3]

	pre_errorposition = errorposition;
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <PIDcal+0x104>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <PIDcal+0x10c>)
 800293c:	6013      	str	r3, [r2, #0]
//	duty = Kp_v*errorvelocity + Ki_v*integral_v + Kd_v*derivative_v;
//
//	pre_errorvelocity = errorvelocity;

//	return duty;
	return u_position;
 800293e:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <PIDcal+0x120>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	ee07 3a90 	vmov	s15, r3
}
 8002946:	eeb0 0a67 	vmov.f32	s0, s15
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	20000a68 	.word	0x20000a68
 8002958:	20000a5c 	.word	0x20000a5c
 800295c:	20000a6c 	.word	0x20000a6c
 8002960:	20000a78 	.word	0x20000a78
 8002964:	20000a74 	.word	0x20000a74
 8002968:	20000a7c 	.word	0x20000a7c
 800296c:	20000214 	.word	0x20000214
 8002970:	20000218 	.word	0x20000218
 8002974:	2000021c 	.word	0x2000021c
 8002978:	20000a70 	.word	0x20000a70

0800297c <JoystickPinUpdate>:

void JoystickPinUpdate()
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
	  GetPositionButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8002980:	2140      	movs	r1, #64	; 0x40
 8002982:	4845      	ldr	r0, [pc, #276]	; (8002a98 <JoystickPinUpdate+0x11c>)
 8002984:	f003 fcfc 	bl	8006380 <HAL_GPIO_ReadPin>
 8002988:	4603      	mov	r3, r0
 800298a:	461a      	mov	r2, r3
 800298c:	4b43      	ldr	r3, [pc, #268]	; (8002a9c <JoystickPinUpdate+0x120>)
 800298e:	605a      	str	r2, [r3, #4]
	  if (GetPositionButton.last == 1 && GetPositionButton.current == 0)
 8002990:	4b42      	ldr	r3, [pc, #264]	; (8002a9c <JoystickPinUpdate+0x120>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d107      	bne.n	80029a8 <JoystickPinUpdate+0x2c>
 8002998:	4b40      	ldr	r3, [pc, #256]	; (8002a9c <JoystickPinUpdate+0x120>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <JoystickPinUpdate+0x2c>
	  {
		  GetPositionButton.flag = 1;
 80029a0:	4b3e      	ldr	r3, [pc, #248]	; (8002a9c <JoystickPinUpdate+0x120>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	e002      	b.n	80029ae <JoystickPinUpdate+0x32>
	  }
	  else
	  {
		  GetPositionButton.flag = 0;
 80029a8:	4b3c      	ldr	r3, [pc, #240]	; (8002a9c <JoystickPinUpdate+0x120>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
	  }
	  GetPositionButton.last = GetPositionButton.current;
 80029ae:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <JoystickPinUpdate+0x120>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4a3a      	ldr	r2, [pc, #232]	; (8002a9c <JoystickPinUpdate+0x120>)
 80029b4:	6013      	str	r3, [r2, #0]

	  ResetButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80029b6:	2120      	movs	r1, #32
 80029b8:	4839      	ldr	r0, [pc, #228]	; (8002aa0 <JoystickPinUpdate+0x124>)
 80029ba:	f003 fce1 	bl	8006380 <HAL_GPIO_ReadPin>
 80029be:	4603      	mov	r3, r0
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <JoystickPinUpdate+0x128>)
 80029c4:	605a      	str	r2, [r3, #4]
	  if (ResetButton.last == 1 && ResetButton.current == 0)
 80029c6:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <JoystickPinUpdate+0x128>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d107      	bne.n	80029de <JoystickPinUpdate+0x62>
 80029ce:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <JoystickPinUpdate+0x128>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d103      	bne.n	80029de <JoystickPinUpdate+0x62>
	  {
		ResetButton.flag = 1;
 80029d6:	4b33      	ldr	r3, [pc, #204]	; (8002aa4 <JoystickPinUpdate+0x128>)
 80029d8:	2201      	movs	r2, #1
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	e002      	b.n	80029e4 <JoystickPinUpdate+0x68>
	  }
	  else
	  {
		  ResetButton.flag = 0;
 80029de:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <JoystickPinUpdate+0x128>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	609a      	str	r2, [r3, #8]
	  }
	  ResetButton.last = ResetButton.current;
 80029e4:	4b2f      	ldr	r3, [pc, #188]	; (8002aa4 <JoystickPinUpdate+0x128>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a2e      	ldr	r2, [pc, #184]	; (8002aa4 <JoystickPinUpdate+0x128>)
 80029ea:	6013      	str	r3, [r2, #0]

	  FineButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 80029ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029f0:	482b      	ldr	r0, [pc, #172]	; (8002aa0 <JoystickPinUpdate+0x124>)
 80029f2:	f003 fcc5 	bl	8006380 <HAL_GPIO_ReadPin>
 80029f6:	4603      	mov	r3, r0
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <JoystickPinUpdate+0x12c>)
 80029fc:	605a      	str	r2, [r3, #4]
	  if (FineButton.last == 1 && FineButton.current == 0)
 80029fe:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <JoystickPinUpdate+0x12c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d107      	bne.n	8002a16 <JoystickPinUpdate+0x9a>
 8002a06:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <JoystickPinUpdate+0x12c>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d103      	bne.n	8002a16 <JoystickPinUpdate+0x9a>
	  {
		  FineButton.flag = 1;
 8002a0e:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <JoystickPinUpdate+0x12c>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e002      	b.n	8002a1c <JoystickPinUpdate+0xa0>
	  }
	  else
	  {
		  FineButton.flag = 0;
 8002a16:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <JoystickPinUpdate+0x12c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	609a      	str	r2, [r3, #8]
	  }
	  FineButton.last = FineButton.current;
 8002a1c:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <JoystickPinUpdate+0x12c>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4a21      	ldr	r2, [pc, #132]	; (8002aa8 <JoystickPinUpdate+0x12c>)
 8002a22:	6013      	str	r3, [r2, #0]

	  RoughButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8002a24:	2120      	movs	r1, #32
 8002a26:	481c      	ldr	r0, [pc, #112]	; (8002a98 <JoystickPinUpdate+0x11c>)
 8002a28:	f003 fcaa 	bl	8006380 <HAL_GPIO_ReadPin>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <JoystickPinUpdate+0x130>)
 8002a32:	605a      	str	r2, [r3, #4]
	  if (RoughButton.last == 1 && RoughButton.current == 0)
 8002a34:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <JoystickPinUpdate+0x130>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d107      	bne.n	8002a4c <JoystickPinUpdate+0xd0>
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <JoystickPinUpdate+0x130>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d103      	bne.n	8002a4c <JoystickPinUpdate+0xd0>
	  {
		  RoughButton.flag = 1;
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <JoystickPinUpdate+0x130>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	609a      	str	r2, [r3, #8]
 8002a4a:	e002      	b.n	8002a52 <JoystickPinUpdate+0xd6>
	  }
	  else
	  {
		  RoughButton.flag = 0;
 8002a4c:	4b17      	ldr	r3, [pc, #92]	; (8002aac <JoystickPinUpdate+0x130>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
	  }
	  RoughButton.last = RoughButton.current;
 8002a52:	4b16      	ldr	r3, [pc, #88]	; (8002aac <JoystickPinUpdate+0x130>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4a15      	ldr	r2, [pc, #84]	; (8002aac <JoystickPinUpdate+0x130>)
 8002a58:	6013      	str	r3, [r2, #0]

	  HomingButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8002a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a5e:	480e      	ldr	r0, [pc, #56]	; (8002a98 <JoystickPinUpdate+0x11c>)
 8002a60:	f003 fc8e 	bl	8006380 <HAL_GPIO_ReadPin>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <JoystickPinUpdate+0x134>)
 8002a6a:	605a      	str	r2, [r3, #4]
	  if (HomingButton.last == 1 && HomingButton.current == 0)
 8002a6c:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <JoystickPinUpdate+0x134>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <JoystickPinUpdate+0x108>
 8002a74:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <JoystickPinUpdate+0x134>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d103      	bne.n	8002a84 <JoystickPinUpdate+0x108>
	  {
		  HomingButton.flag = 1;
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <JoystickPinUpdate+0x134>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	e002      	b.n	8002a8a <JoystickPinUpdate+0x10e>
	  }
	  else
	  {
		  HomingButton.flag = 0;
 8002a84:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <JoystickPinUpdate+0x134>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
	  }
	  HomingButton.last = HomingButton.current;
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <JoystickPinUpdate+0x134>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	4a08      	ldr	r2, [pc, #32]	; (8002ab0 <JoystickPinUpdate+0x134>)
 8002a90:	6013      	str	r3, [r2, #0]
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40020400 	.word	0x40020400
 8002a9c:	20000b60 	.word	0x20000b60
 8002aa0:	40020000 	.word	0x40020000
 8002aa4:	20000b6c 	.word	0x20000b6c
 8002aa8:	20000b78 	.word	0x20000b78
 8002aac:	20000b84 	.word	0x20000b84
 8002ab0:	20000b90 	.word	0x20000b90

08002ab4 <JoystickControl>:

void JoystickControl()
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
	if(RoughButton.flag == 1)
 8002ab8:	4b5e      	ldr	r3, [pc, #376]	; (8002c34 <JoystickControl+0x180>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d106      	bne.n	8002ace <JoystickControl+0x1a>
	{
		JoySpeed = 0;
 8002ac0:	4b5d      	ldr	r3, [pc, #372]	; (8002c38 <JoystickControl+0x184>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
		RoughButton.flag = 0;
 8002ac6:	4b5b      	ldr	r3, [pc, #364]	; (8002c34 <JoystickControl+0x180>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	e014      	b.n	8002af8 <JoystickControl+0x44>
	}
	else if(FineButton.flag == 1)
 8002ace:	4b5b      	ldr	r3, [pc, #364]	; (8002c3c <JoystickControl+0x188>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d106      	bne.n	8002ae4 <JoystickControl+0x30>
	{
		JoySpeed = 1;
 8002ad6:	4b58      	ldr	r3, [pc, #352]	; (8002c38 <JoystickControl+0x184>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
		FineButton.flag = 0;
 8002adc:	4b57      	ldr	r3, [pc, #348]	; (8002c3c <JoystickControl+0x188>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
 8002ae2:	e009      	b.n	8002af8 <JoystickControl+0x44>
	}
	else if(HomingButton.flag == 1)
 8002ae4:	4b56      	ldr	r3, [pc, #344]	; (8002c40 <JoystickControl+0x18c>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d105      	bne.n	8002af8 <JoystickControl+0x44>
	{
		JoySpeed = 2;
 8002aec:	4b52      	ldr	r3, [pc, #328]	; (8002c38 <JoystickControl+0x184>)
 8002aee:	2202      	movs	r2, #2
 8002af0:	601a      	str	r2, [r3, #0]
		HomingButton.flag = 0;
 8002af2:	4b53      	ldr	r3, [pc, #332]	; (8002c40 <JoystickControl+0x18c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
	}

	switch(JoySpeed)
 8002af8:	4b4f      	ldr	r3, [pc, #316]	; (8002c38 <JoystickControl+0x184>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	f000 808a 	beq.w	8002c16 <JoystickControl+0x162>
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	f300 8093 	bgt.w	8002c2e <JoystickControl+0x17a>
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <JoystickControl+0x5e>
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d041      	beq.n	8002b94 <JoystickControl+0xe0>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
		Homing();
		break;
	}
}
 8002b10:	e08d      	b.n	8002c2e <JoystickControl+0x17a>
		if(XYSwitch[1] > 3000)
 8002b12:	4b4c      	ldr	r3, [pc, #304]	; (8002c44 <JoystickControl+0x190>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	dd09      	ble.n	8002b32 <JoystickControl+0x7e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002b1e:	4b4a      	ldr	r3, [pc, #296]	; (8002c48 <JoystickControl+0x194>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2200      	movs	r2, #0
 8002b24:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,15000);
 8002b26:	4b48      	ldr	r3, [pc, #288]	; (8002c48 <JoystickControl+0x194>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002b2e:	635a      	str	r2, [r3, #52]	; 0x34
 8002b30:	e016      	b.n	8002b60 <JoystickControl+0xac>
		else if(XYSwitch[1] < 1000)
 8002b32:	4b44      	ldr	r3, [pc, #272]	; (8002c44 <JoystickControl+0x190>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b3a:	da09      	bge.n	8002b50 <JoystickControl+0x9c>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,15000);
 8002b3c:	4b42      	ldr	r3, [pc, #264]	; (8002c48 <JoystickControl+0x194>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002b44:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002b46:	4b40      	ldr	r3, [pc, #256]	; (8002c48 <JoystickControl+0x194>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b4e:	e007      	b.n	8002b60 <JoystickControl+0xac>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002b50:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <JoystickControl+0x194>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2200      	movs	r2, #0
 8002b56:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002b58:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <JoystickControl+0x194>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 3000)
 8002b60:	4b38      	ldr	r3, [pc, #224]	; (8002c44 <JoystickControl+0x190>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	dd04      	ble.n	8002b76 <JoystickControl+0xc2>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 8002b6c:	4b37      	ldr	r3, [pc, #220]	; (8002c4c <JoystickControl+0x198>)
 8002b6e:	2204      	movs	r2, #4
 8002b70:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002b74:	e05b      	b.n	8002c2e <JoystickControl+0x17a>
		else if(XYSwitch[0] < 1000)
 8002b76:	4b33      	ldr	r3, [pc, #204]	; (8002c44 <JoystickControl+0x190>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b7e:	da04      	bge.n	8002b8a <JoystickControl+0xd6>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 8002b80:	4b32      	ldr	r3, [pc, #200]	; (8002c4c <JoystickControl+0x198>)
 8002b82:	2208      	movs	r2, #8
 8002b84:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002b88:	e051      	b.n	8002c2e <JoystickControl+0x17a>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 8002b8a:	4b30      	ldr	r3, [pc, #192]	; (8002c4c <JoystickControl+0x198>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002b92:	e04c      	b.n	8002c2e <JoystickControl+0x17a>
		if(XYSwitch[1] > 3000)
 8002b94:	4b2b      	ldr	r3, [pc, #172]	; (8002c44 <JoystickControl+0x190>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	dd09      	ble.n	8002bb4 <JoystickControl+0x100>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002ba0:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <JoystickControl+0x194>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
 8002ba8:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <JoystickControl+0x194>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f242 7210 	movw	r2, #10000	; 0x2710
 8002bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8002bb2:	e016      	b.n	8002be2 <JoystickControl+0x12e>
		else if(XYSwitch[1] < 1000)
 8002bb4:	4b23      	ldr	r3, [pc, #140]	; (8002c44 <JoystickControl+0x190>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bbc:	da09      	bge.n	8002bd2 <JoystickControl+0x11e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,10000);
 8002bbe:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <JoystickControl+0x194>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f242 7210 	movw	r2, #10000	; 0x2710
 8002bc6:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002bc8:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <JoystickControl+0x194>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	635a      	str	r2, [r3, #52]	; 0x34
 8002bd0:	e007      	b.n	8002be2 <JoystickControl+0x12e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <JoystickControl+0x194>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002bda:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <JoystickControl+0x194>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2200      	movs	r2, #0
 8002be0:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 3000)
 8002be2:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <JoystickControl+0x190>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002bea:	4293      	cmp	r3, r2
 8002bec:	dd04      	ble.n	8002bf8 <JoystickControl+0x144>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 8002bee:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <JoystickControl+0x198>)
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002bf6:	e01a      	b.n	8002c2e <JoystickControl+0x17a>
		else if(XYSwitch[0] < 1000)
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <JoystickControl+0x190>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c00:	da04      	bge.n	8002c0c <JoystickControl+0x158>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 8002c02:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <JoystickControl+0x198>)
 8002c04:	2208      	movs	r2, #8
 8002c06:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002c0a:	e010      	b.n	8002c2e <JoystickControl+0x17a>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <JoystickControl+0x198>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002c14:	e00b      	b.n	8002c2e <JoystickControl+0x17a>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <JoystickControl+0x194>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <JoystickControl+0x194>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f242 7210 	movw	r2, #10000	; 0x2710
 8002c26:	635a      	str	r2, [r3, #52]	; 0x34
		Homing();
 8002c28:	f7ff fbec 	bl	8002404 <Homing>
		break;
 8002c2c:	bf00      	nop
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000b84 	.word	0x20000b84
 8002c38:	20000ba4 	.word	0x20000ba4
 8002c3c:	20000b78 	.word	0x20000b78
 8002c40:	20000b90 	.word	0x20000b90
 8002c44:	20000b9c 	.word	0x20000b9c
 8002c48:	20000544 	.word	0x20000544
 8002c4c:	2000109c 	.word	0x2000109c

08002c50 <JoystickLocationState>:

void JoystickLocationState()
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
	if(registerFrame[1].U16 == 1)	//Base System Status: Set Pick Tray
 8002c54:	4b48      	ldr	r3, [pc, #288]	; (8002d78 <JoystickLocationState+0x128>)
 8002c56:	885b      	ldrh	r3, [r3, #2]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d114      	bne.n	8002c86 <JoystickLocationState+0x36>
	{
		registerFrame[1].U16 = 0;
 8002c5c:	4b46      	ldr	r3, [pc, #280]	; (8002d78 <JoystickLocationState+0x128>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 1;	//Y Moving Status: Jog Pick
 8002c62:	4b45      	ldr	r3, [pc, #276]	; (8002d78 <JoystickLocationState+0x128>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	841a      	strh	r2, [r3, #32]
		EndEffectorState = 1;		//TestModeOn
 8002c68:	4b44      	ldr	r3, [pc, #272]	; (8002d7c <JoystickLocationState+0x12c>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 1;	//End Effector Status: Laser On
 8002c6e:	4b42      	ldr	r3, [pc, #264]	; (8002d78 <JoystickLocationState+0x128>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8002c74:	4b42      	ldr	r3, [pc, #264]	; (8002d80 <JoystickLocationState+0x130>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 8002c7a:	f7ff fc03 	bl	8002484 <EndEffectorWrite>
		state = 1;					//Go Pick state
 8002c7e:	4b41      	ldr	r3, [pc, #260]	; (8002d84 <JoystickLocationState+0x134>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	e017      	b.n	8002cb6 <JoystickLocationState+0x66>
	}
	else if(registerFrame[1].U16 == 2)	//Base System Status: Set Place Tray
 8002c86:	4b3c      	ldr	r3, [pc, #240]	; (8002d78 <JoystickLocationState+0x128>)
 8002c88:	885b      	ldrh	r3, [r3, #2]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d113      	bne.n	8002cb6 <JoystickLocationState+0x66>
	{
		registerFrame[1].U16 = 0;
 8002c8e:	4b3a      	ldr	r3, [pc, #232]	; (8002d78 <JoystickLocationState+0x128>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 2;	//Y Moving Status: Jog Place
 8002c94:	4b38      	ldr	r3, [pc, #224]	; (8002d78 <JoystickLocationState+0x128>)
 8002c96:	2202      	movs	r2, #2
 8002c98:	841a      	strh	r2, [r3, #32]
		EndEffectorState = 1;		//TestModeOn
 8002c9a:	4b38      	ldr	r3, [pc, #224]	; (8002d7c <JoystickLocationState+0x12c>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 1;	//Laser On
 8002ca0:	4b35      	ldr	r3, [pc, #212]	; (8002d78 <JoystickLocationState+0x128>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8002ca6:	4b36      	ldr	r3, [pc, #216]	; (8002d80 <JoystickLocationState+0x130>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 8002cac:	f7ff fbea 	bl	8002484 <EndEffectorWrite>
		state = 3;					//Go Place state
 8002cb0:	4b34      	ldr	r3, [pc, #208]	; (8002d84 <JoystickLocationState+0x134>)
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	601a      	str	r2, [r3, #0]
	}
	if(registerFrame[1].U16 == 8)	//Run Tray Mode
 8002cb6:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <JoystickLocationState+0x128>)
 8002cb8:	885b      	ldrh	r3, [r3, #2]
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d102      	bne.n	8002cc4 <JoystickLocationState+0x74>
	{
		state = 5;
 8002cbe:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <JoystickLocationState+0x134>)
 8002cc0:	2205      	movs	r2, #5
 8002cc2:	601a      	str	r2, [r3, #0]
	}


	switch(state)
 8002cc4:	4b2f      	ldr	r3, [pc, #188]	; (8002d84 <JoystickLocationState+0x134>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	f200 8617 	bhi.w	80038fe <JoystickLocationState+0xcae>
 8002cd0:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <JoystickLocationState+0x88>)
 8002cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd6:	bf00      	nop
 8002cd8:	08002ced 	.word	0x08002ced
 8002cdc:	08002d99 	.word	0x08002d99
 8002ce0:	080032ab 	.word	0x080032ab
 8002ce4:	08003389 	.word	0x08003389
 8002ce8:	08003899 	.word	0x08003899
	{
	//Get Pick Tray 1st Point
	case 1:
		PickTray.L1[0] = 0;
 8002cec:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <JoystickLocationState+0x138>)
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
		PickTray.L2[0] = 0;
 8002cf4:	4b24      	ldr	r3, [pc, #144]	; (8002d88 <JoystickLocationState+0x138>)
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	609a      	str	r2, [r3, #8]
		PickTray.L1[1] = 0;
 8002cfc:	4b22      	ldr	r3, [pc, #136]	; (8002d88 <JoystickLocationState+0x138>)
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	605a      	str	r2, [r3, #4]
		PickTray.L2[1] = 0;
 8002d04:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <JoystickLocationState+0x138>)
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8002d0c:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <JoystickLocationState+0x13c>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	f040 85eb 	bne.w	80038ec <JoystickLocationState+0xc9c>
		{
			PickTray.L1[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8002d16:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <JoystickLocationState+0x128>)
 8002d18:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002d1c:	4a1c      	ldr	r2, [pc, #112]	; (8002d90 <JoystickLocationState+0x140>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	08db      	lsrs	r3, r3, #3
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	ee07 3a90 	vmov	s15, r3
 8002d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d2e:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <JoystickLocationState+0x138>)
 8002d30:	edc3 7a00 	vstr	s15, [r3]
			PickTray.L1[1] = position*0.045; //Pick Tray Y Position 1 //mm
 8002d34:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <JoystickLocationState+0x144>)
 8002d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd fbfa 	bl	8000534 <__aeabi_i2d>
 8002d40:	a30b      	add	r3, pc, #44	; (adr r3, 8002d70 <JoystickLocationState+0x120>)
 8002d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d46:	f7fd fc5f 	bl	8000608 <__aeabi_dmul>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	f7fd ff51 	bl	8000bf8 <__aeabi_d2f>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4a0b      	ldr	r2, [pc, #44]	; (8002d88 <JoystickLocationState+0x138>)
 8002d5a:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <JoystickLocationState+0x13c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
			state = 2;
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <JoystickLocationState+0x134>)
 8002d64:	2202      	movs	r2, #2
 8002d66:	601a      	str	r2, [r3, #0]
		}
		break;
 8002d68:	f000 bdc0 	b.w	80038ec <JoystickLocationState+0xc9c>
 8002d6c:	f3af 8000 	nop.w
 8002d70:	70a3d70a 	.word	0x70a3d70a
 8002d74:	3fa70a3d 	.word	0x3fa70a3d
 8002d78:	2000109c 	.word	0x2000109c
 8002d7c:	20000bb0 	.word	0x20000bb0
 8002d80:	20000ba8 	.word	0x20000ba8
 8002d84:	20000220 	.word	0x20000220
 8002d88:	20000a90 	.word	0x20000a90
 8002d8c:	20000b60 	.word	0x20000b60
 8002d90:	cccccccd 	.word	0xcccccccd
 8002d94:	20000a5c 	.word	0x20000a5c

	//Get Pick Tray 2nd Point
	case 2:
		if (GetPositionButton.flag == 1)
 8002d98:	4bd5      	ldr	r3, [pc, #852]	; (80030f0 <JoystickLocationState+0x4a0>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	f040 8278 	bne.w	8003292 <JoystickLocationState+0x642>
		{
			PickTray.L2[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 2 //mm
 8002da2:	4bd4      	ldr	r3, [pc, #848]	; (80030f4 <JoystickLocationState+0x4a4>)
 8002da4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002da8:	4ad3      	ldr	r2, [pc, #844]	; (80030f8 <JoystickLocationState+0x4a8>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	08db      	lsrs	r3, r3, #3
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	ee07 3a90 	vmov	s15, r3
 8002db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dba:	4bd0      	ldr	r3, [pc, #832]	; (80030fc <JoystickLocationState+0x4ac>)
 8002dbc:	edc3 7a02 	vstr	s15, [r3, #8]
			PickTray.L2[1] = position*0.045; //Pick Tray Y Position 2 //mm
 8002dc0:	4bcf      	ldr	r3, [pc, #828]	; (8003100 <JoystickLocationState+0x4b0>)
 8002dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd fbb4 	bl	8000534 <__aeabi_i2d>
 8002dcc:	a3c6      	add	r3, pc, #792	; (adr r3, 80030e8 <JoystickLocationState+0x498>)
 8002dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd2:	f7fd fc19 	bl	8000608 <__aeabi_dmul>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f7fd ff0b 	bl	8000bf8 <__aeabi_d2f>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4ac5      	ldr	r2, [pc, #788]	; (80030fc <JoystickLocationState+0x4ac>)
 8002de6:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 8002de8:	4bc1      	ldr	r3, [pc, #772]	; (80030f0 <JoystickLocationState+0x4a0>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	609a      	str	r2, [r3, #8]

			cos_Theta = (PickTray.L2[0]-PickTray.L1[0])/60;
 8002dee:	4bc3      	ldr	r3, [pc, #780]	; (80030fc <JoystickLocationState+0x4ac>)
 8002df0:	ed93 7a02 	vldr	s14, [r3, #8]
 8002df4:	4bc1      	ldr	r3, [pc, #772]	; (80030fc <JoystickLocationState+0x4ac>)
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dfe:	eddf 6ac1 	vldr	s13, [pc, #772]	; 8003104 <JoystickLocationState+0x4b4>
 8002e02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e06:	4bc0      	ldr	r3, [pc, #768]	; (8003108 <JoystickLocationState+0x4b8>)
 8002e08:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PickTray.L2[1]-PickTray.L1[1])/60;
 8002e0c:	4bbb      	ldr	r3, [pc, #748]	; (80030fc <JoystickLocationState+0x4ac>)
 8002e0e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002e12:	4bba      	ldr	r3, [pc, #744]	; (80030fc <JoystickLocationState+0x4ac>)
 8002e14:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e1c:	eddf 6ab9 	vldr	s13, [pc, #740]	; 8003104 <JoystickLocationState+0x4b4>
 8002e20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e24:	4bb9      	ldr	r3, [pc, #740]	; (800310c <JoystickLocationState+0x4bc>)
 8002e26:	edc3 7a00 	vstr	s15, [r3]

			PickTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PickTray.L1[0];
 8002e2a:	4bb7      	ldr	r3, [pc, #732]	; (8003108 <JoystickLocationState+0x4b8>)
 8002e2c:	edd3 7a00 	vldr	s15, [r3]
 8002e30:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e38:	4bb4      	ldr	r3, [pc, #720]	; (800310c <JoystickLocationState+0x4bc>)
 8002e3a:	edd3 7a00 	vldr	s15, [r3]
 8002e3e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002e42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e4a:	4bac      	ldr	r3, [pc, #688]	; (80030fc <JoystickLocationState+0x4ac>)
 8002e4c:	edd3 7a00 	vldr	s15, [r3]
 8002e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e54:	4ba9      	ldr	r3, [pc, #676]	; (80030fc <JoystickLocationState+0x4ac>)
 8002e56:	edc3 7a04 	vstr	s15, [r3, #16]
			PickTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PickTray.L1[1];
 8002e5a:	4bac      	ldr	r3, [pc, #688]	; (800310c <JoystickLocationState+0x4bc>)
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e68:	4ba7      	ldr	r3, [pc, #668]	; (8003108 <JoystickLocationState+0x4b8>)
 8002e6a:	edd3 7a00 	vldr	s15, [r3]
 8002e6e:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002e72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e7a:	4ba0      	ldr	r3, [pc, #640]	; (80030fc <JoystickLocationState+0x4ac>)
 8002e7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e84:	4b9d      	ldr	r3, [pc, #628]	; (80030fc <JoystickLocationState+0x4ac>)
 8002e86:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PickTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PickTray.L1[0];
 8002e8a:	4b9f      	ldr	r3, [pc, #636]	; (8003108 <JoystickLocationState+0x4b8>)
 8002e8c:	edd3 7a00 	vldr	s15, [r3]
 8002e90:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002e94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e98:	4b9c      	ldr	r3, [pc, #624]	; (800310c <JoystickLocationState+0x4bc>)
 8002e9a:	edd3 7a00 	vldr	s15, [r3]
 8002e9e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002ea2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ea6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eaa:	4b94      	ldr	r3, [pc, #592]	; (80030fc <JoystickLocationState+0x4ac>)
 8002eac:	edd3 7a00 	vldr	s15, [r3]
 8002eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb4:	4b91      	ldr	r3, [pc, #580]	; (80030fc <JoystickLocationState+0x4ac>)
 8002eb6:	edc3 7a05 	vstr	s15, [r3, #20]
			PickTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PickTray.L1[1];
 8002eba:	4b94      	ldr	r3, [pc, #592]	; (800310c <JoystickLocationState+0x4bc>)
 8002ebc:	edd3 7a00 	vldr	s15, [r3]
 8002ec0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002ec4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ec8:	4b8f      	ldr	r3, [pc, #572]	; (8003108 <JoystickLocationState+0x4b8>)
 8002eca:	edd3 7a00 	vldr	s15, [r3]
 8002ece:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002ed2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ed6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eda:	4b88      	ldr	r3, [pc, #544]	; (80030fc <JoystickLocationState+0x4ac>)
 8002edc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee4:	4b85      	ldr	r3, [pc, #532]	; (80030fc <JoystickLocationState+0x4ac>)
 8002ee6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PickTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PickTray.L1[0];
 8002eea:	4b87      	ldr	r3, [pc, #540]	; (8003108 <JoystickLocationState+0x4b8>)
 8002eec:	edd3 7a00 	vldr	s15, [r3]
 8002ef0:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8003110 <JoystickLocationState+0x4c0>
 8002ef4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ef8:	4b84      	ldr	r3, [pc, #528]	; (800310c <JoystickLocationState+0x4bc>)
 8002efa:	edd3 7a00 	vldr	s15, [r3]
 8002efe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002f02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f0a:	4b7c      	ldr	r3, [pc, #496]	; (80030fc <JoystickLocationState+0x4ac>)
 8002f0c:	edd3 7a00 	vldr	s15, [r3]
 8002f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f14:	4b79      	ldr	r3, [pc, #484]	; (80030fc <JoystickLocationState+0x4ac>)
 8002f16:	edc3 7a06 	vstr	s15, [r3, #24]
			PickTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PickTray.L1[1];
 8002f1a:	4b7c      	ldr	r3, [pc, #496]	; (800310c <JoystickLocationState+0x4bc>)
 8002f1c:	edd3 7a00 	vldr	s15, [r3]
 8002f20:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8003110 <JoystickLocationState+0x4c0>
 8002f24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f28:	4b77      	ldr	r3, [pc, #476]	; (8003108 <JoystickLocationState+0x4b8>)
 8002f2a:	edd3 7a00 	vldr	s15, [r3]
 8002f2e:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002f32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f3a:	4b70      	ldr	r3, [pc, #448]	; (80030fc <JoystickLocationState+0x4ac>)
 8002f3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f44:	4b6d      	ldr	r3, [pc, #436]	; (80030fc <JoystickLocationState+0x4ac>)
 8002f46:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PickTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PickTray.L1[0];
 8002f4a:	4b6f      	ldr	r3, [pc, #444]	; (8003108 <JoystickLocationState+0x4b8>)
 8002f4c:	edd3 7a00 	vldr	s15, [r3]
 8002f50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f58:	4b6c      	ldr	r3, [pc, #432]	; (800310c <JoystickLocationState+0x4bc>)
 8002f5a:	edd3 7a00 	vldr	s15, [r3]
 8002f5e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002f62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f6a:	4b64      	ldr	r3, [pc, #400]	; (80030fc <JoystickLocationState+0x4ac>)
 8002f6c:	edd3 7a00 	vldr	s15, [r3]
 8002f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f74:	4b61      	ldr	r3, [pc, #388]	; (80030fc <JoystickLocationState+0x4ac>)
 8002f76:	edc3 7a07 	vstr	s15, [r3, #28]
			PickTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PickTray.L1[1];
 8002f7a:	4b64      	ldr	r3, [pc, #400]	; (800310c <JoystickLocationState+0x4bc>)
 8002f7c:	edd3 7a00 	vldr	s15, [r3]
 8002f80:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f88:	4b5f      	ldr	r3, [pc, #380]	; (8003108 <JoystickLocationState+0x4b8>)
 8002f8a:	edd3 7a00 	vldr	s15, [r3]
 8002f8e:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002f92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f9a:	4b58      	ldr	r3, [pc, #352]	; (80030fc <JoystickLocationState+0x4ac>)
 8002f9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa4:	4b55      	ldr	r3, [pc, #340]	; (80030fc <JoystickLocationState+0x4ac>)
 8002fa6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PickTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PickTray.L1[0];
 8002faa:	4b57      	ldr	r3, [pc, #348]	; (8003108 <JoystickLocationState+0x4b8>)
 8002fac:	edd3 7a00 	vldr	s15, [r3]
 8002fb0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002fb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002fb8:	4b54      	ldr	r3, [pc, #336]	; (800310c <JoystickLocationState+0x4bc>)
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002fc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fca:	4b4c      	ldr	r3, [pc, #304]	; (80030fc <JoystickLocationState+0x4ac>)
 8002fcc:	edd3 7a00 	vldr	s15, [r3]
 8002fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd4:	4b49      	ldr	r3, [pc, #292]	; (80030fc <JoystickLocationState+0x4ac>)
 8002fd6:	edc3 7a08 	vstr	s15, [r3, #32]
			PickTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PickTray.L1[1];
 8002fda:	4b4c      	ldr	r3, [pc, #304]	; (800310c <JoystickLocationState+0x4bc>)
 8002fdc:	edd3 7a00 	vldr	s15, [r3]
 8002fe0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002fe4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002fe8:	4b47      	ldr	r3, [pc, #284]	; (8003108 <JoystickLocationState+0x4b8>)
 8002fea:	edd3 7a00 	vldr	s15, [r3]
 8002fee:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002ff2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ff6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ffa:	4b40      	ldr	r3, [pc, #256]	; (80030fc <JoystickLocationState+0x4ac>)
 8002ffc:	edd3 7a01 	vldr	s15, [r3, #4]
 8003000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003004:	4b3d      	ldr	r3, [pc, #244]	; (80030fc <JoystickLocationState+0x4ac>)
 8003006:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PickTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PickTray.L1[0];
 800300a:	4b3f      	ldr	r3, [pc, #252]	; (8003108 <JoystickLocationState+0x4b8>)
 800300c:	edd3 7a00 	vldr	s15, [r3]
 8003010:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003110 <JoystickLocationState+0x4c0>
 8003014:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003018:	4b3c      	ldr	r3, [pc, #240]	; (800310c <JoystickLocationState+0x4bc>)
 800301a:	edd3 7a00 	vldr	s15, [r3]
 800301e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003022:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003026:	ee37 7a27 	vadd.f32	s14, s14, s15
 800302a:	4b34      	ldr	r3, [pc, #208]	; (80030fc <JoystickLocationState+0x4ac>)
 800302c:	edd3 7a00 	vldr	s15, [r3]
 8003030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003034:	4b31      	ldr	r3, [pc, #196]	; (80030fc <JoystickLocationState+0x4ac>)
 8003036:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PickTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PickTray.L1[1];
 800303a:	4b34      	ldr	r3, [pc, #208]	; (800310c <JoystickLocationState+0x4bc>)
 800303c:	edd3 7a00 	vldr	s15, [r3]
 8003040:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003110 <JoystickLocationState+0x4c0>
 8003044:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003048:	4b2f      	ldr	r3, [pc, #188]	; (8003108 <JoystickLocationState+0x4b8>)
 800304a:	edd3 7a00 	vldr	s15, [r3]
 800304e:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8003052:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003056:	ee37 7a27 	vadd.f32	s14, s14, s15
 800305a:	4b28      	ldr	r3, [pc, #160]	; (80030fc <JoystickLocationState+0x4ac>)
 800305c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003064:	4b25      	ldr	r3, [pc, #148]	; (80030fc <JoystickLocationState+0x4ac>)
 8003066:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PickTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PickTray.L1[0];
 800306a:	4b27      	ldr	r3, [pc, #156]	; (8003108 <JoystickLocationState+0x4b8>)
 800306c:	edd3 7a00 	vldr	s15, [r3]
 8003070:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003074:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003078:	4b24      	ldr	r3, [pc, #144]	; (800310c <JoystickLocationState+0x4bc>)
 800307a:	edd3 7a00 	vldr	s15, [r3]
 800307e:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003114 <JoystickLocationState+0x4c4>
 8003082:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003086:	ee37 7a27 	vadd.f32	s14, s14, s15
 800308a:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <JoystickLocationState+0x4ac>)
 800308c:	edd3 7a00 	vldr	s15, [r3]
 8003090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <JoystickLocationState+0x4ac>)
 8003096:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PickTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PickTray.L1[1];
 800309a:	4b1c      	ldr	r3, [pc, #112]	; (800310c <JoystickLocationState+0x4bc>)
 800309c:	edd3 7a00 	vldr	s15, [r3]
 80030a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030a8:	4b17      	ldr	r3, [pc, #92]	; (8003108 <JoystickLocationState+0x4b8>)
 80030aa:	edd3 7a00 	vldr	s15, [r3]
 80030ae:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003118 <JoystickLocationState+0x4c8>
 80030b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030ba:	4b10      	ldr	r3, [pc, #64]	; (80030fc <JoystickLocationState+0x4ac>)
 80030bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80030c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c4:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <JoystickLocationState+0x4ac>)
 80030c6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PickTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PickTray.L1[0];
 80030ca:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <JoystickLocationState+0x4b8>)
 80030cc:	edd3 7a00 	vldr	s15, [r3]
 80030d0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80030d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <JoystickLocationState+0x4bc>)
 80030da:	edd3 7a00 	vldr	s15, [r3]
 80030de:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003114 <JoystickLocationState+0x4c4>
 80030e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030e6:	e019      	b.n	800311c <JoystickLocationState+0x4cc>
 80030e8:	70a3d70a 	.word	0x70a3d70a
 80030ec:	3fa70a3d 	.word	0x3fa70a3d
 80030f0:	20000b60 	.word	0x20000b60
 80030f4:	2000109c 	.word	0x2000109c
 80030f8:	cccccccd 	.word	0xcccccccd
 80030fc:	20000a90 	.word	0x20000a90
 8003100:	20000a5c 	.word	0x20000a5c
 8003104:	42700000 	.word	0x42700000
 8003108:	20000b58 	.word	0x20000b58
 800310c:	20000b5c 	.word	0x20000b5c
 8003110:	42480000 	.word	0x42480000
 8003114:	42200000 	.word	0x42200000
 8003118:	c2200000 	.word	0xc2200000
 800311c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003120:	4b8b      	ldr	r3, [pc, #556]	; (8003350 <JoystickLocationState+0x700>)
 8003122:	edd3 7a00 	vldr	s15, [r3]
 8003126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312a:	4b89      	ldr	r3, [pc, #548]	; (8003350 <JoystickLocationState+0x700>)
 800312c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PickTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PickTray.L1[1];
 8003130:	4b88      	ldr	r3, [pc, #544]	; (8003354 <JoystickLocationState+0x704>)
 8003132:	edd3 7a00 	vldr	s15, [r3]
 8003136:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800313a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800313e:	4b86      	ldr	r3, [pc, #536]	; (8003358 <JoystickLocationState+0x708>)
 8003140:	edd3 7a00 	vldr	s15, [r3]
 8003144:	eddf 6a85 	vldr	s13, [pc, #532]	; 800335c <JoystickLocationState+0x70c>
 8003148:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800314c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003150:	4b7f      	ldr	r3, [pc, #508]	; (8003350 <JoystickLocationState+0x700>)
 8003152:	edd3 7a01 	vldr	s15, [r3, #4]
 8003156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315a:	4b7d      	ldr	r3, [pc, #500]	; (8003350 <JoystickLocationState+0x700>)
 800315c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PickTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PickTray.L1[0];
 8003160:	4b7d      	ldr	r3, [pc, #500]	; (8003358 <JoystickLocationState+0x708>)
 8003162:	edd3 7a00 	vldr	s15, [r3]
 8003166:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003360 <JoystickLocationState+0x710>
 800316a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800316e:	4b79      	ldr	r3, [pc, #484]	; (8003354 <JoystickLocationState+0x704>)
 8003170:	edd3 7a00 	vldr	s15, [r3]
 8003174:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8003364 <JoystickLocationState+0x714>
 8003178:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800317c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003180:	4b73      	ldr	r3, [pc, #460]	; (8003350 <JoystickLocationState+0x700>)
 8003182:	edd3 7a00 	vldr	s15, [r3]
 8003186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800318a:	4b71      	ldr	r3, [pc, #452]	; (8003350 <JoystickLocationState+0x700>)
 800318c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PickTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PickTray.L1[1];
 8003190:	4b70      	ldr	r3, [pc, #448]	; (8003354 <JoystickLocationState+0x704>)
 8003192:	edd3 7a00 	vldr	s15, [r3]
 8003196:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003360 <JoystickLocationState+0x710>
 800319a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800319e:	4b6e      	ldr	r3, [pc, #440]	; (8003358 <JoystickLocationState+0x708>)
 80031a0:	edd3 7a00 	vldr	s15, [r3]
 80031a4:	eddf 6a6d 	vldr	s13, [pc, #436]	; 800335c <JoystickLocationState+0x70c>
 80031a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031b0:	4b67      	ldr	r3, [pc, #412]	; (8003350 <JoystickLocationState+0x700>)
 80031b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80031b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ba:	4b65      	ldr	r3, [pc, #404]	; (8003350 <JoystickLocationState+0x700>)
 80031bc:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PickTray.origin_x = PickTray.L1[0]+(50*sin_Theta);
 80031c0:	4b63      	ldr	r3, [pc, #396]	; (8003350 <JoystickLocationState+0x700>)
 80031c2:	ed93 7a00 	vldr	s14, [r3]
 80031c6:	4b63      	ldr	r3, [pc, #396]	; (8003354 <JoystickLocationState+0x704>)
 80031c8:	edd3 7a00 	vldr	s15, [r3]
 80031cc:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003360 <JoystickLocationState+0x710>
 80031d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d8:	4b5d      	ldr	r3, [pc, #372]	; (8003350 <JoystickLocationState+0x700>)
 80031da:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			PickTray.origin_y = PickTray.L1[1]-(50*cos_Theta);
 80031de:	4b5c      	ldr	r3, [pc, #368]	; (8003350 <JoystickLocationState+0x700>)
 80031e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80031e4:	4b5c      	ldr	r3, [pc, #368]	; (8003358 <JoystickLocationState+0x708>)
 80031e6:	edd3 7a00 	vldr	s15, [r3]
 80031ea:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8003360 <JoystickLocationState+0x710>
 80031ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031f6:	4b56      	ldr	r3, [pc, #344]	; (8003350 <JoystickLocationState+0x700>)
 80031f8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			PickTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 80031fc:	4b56      	ldr	r3, [pc, #344]	; (8003358 <JoystickLocationState+0x708>)
 80031fe:	edd3 7a00 	vldr	s15, [r3]
 8003202:	eeb0 0a67 	vmov.f32	s0, s15
 8003206:	f00d fedb 	bl	8010fc0 <acosf>
 800320a:	ee10 3a10 	vmov	r3, s0
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd f9a2 	bl	8000558 <__aeabi_f2d>
 8003214:	a34a      	add	r3, pc, #296	; (adr r3, 8003340 <JoystickLocationState+0x6f0>)
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f7fd f9f5 	bl	8000608 <__aeabi_dmul>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4610      	mov	r0, r2
 8003224:	4619      	mov	r1, r3
 8003226:	f7fd fce7 	bl	8000bf8 <__aeabi_d2f>
 800322a:	4603      	mov	r3, r0
 800322c:	4a48      	ldr	r2, [pc, #288]	; (8003350 <JoystickLocationState+0x700>)
 800322e:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[32].U16 = PickTray.origin_x * 10;
 8003230:	4b47      	ldr	r3, [pc, #284]	; (8003350 <JoystickLocationState+0x700>)
 8003232:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003236:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800323a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800323e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003242:	ee17 3a90 	vmov	r3, s15
 8003246:	b29a      	uxth	r2, r3
 8003248:	4b47      	ldr	r3, [pc, #284]	; (8003368 <JoystickLocationState+0x718>)
 800324a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			registerFrame[33].U16 = PickTray.origin_y * 10;
 800324e:	4b40      	ldr	r3, [pc, #256]	; (8003350 <JoystickLocationState+0x700>)
 8003250:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003254:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003258:	ee67 7a87 	vmul.f32	s15, s15, s14
 800325c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003260:	ee17 3a90 	vmov	r3, s15
 8003264:	b29a      	uxth	r2, r3
 8003266:	4b40      	ldr	r3, [pc, #256]	; (8003368 <JoystickLocationState+0x718>)
 8003268:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			registerFrame[34].U16 = PickTray.orientation * 100;
 800326c:	4b38      	ldr	r3, [pc, #224]	; (8003350 <JoystickLocationState+0x700>)
 800326e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003272:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800336c <JoystickLocationState+0x71c>
 8003276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800327a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800327e:	ee17 3a90 	vmov	r3, s15
 8003282:	b29a      	uxth	r2, r3
 8003284:	4b38      	ldr	r3, [pc, #224]	; (8003368 <JoystickLocationState+0x718>)
 8003286:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			registerFrame[16].U16 = 0;
 800328a:	4b37      	ldr	r3, [pc, #220]	; (8003368 <JoystickLocationState+0x718>)
 800328c:	2200      	movs	r2, #0
 800328e:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8003290:	e32e      	b.n	80038f0 <JoystickLocationState+0xca0>
		else if (ResetButton.flag == 1)
 8003292:	4b37      	ldr	r3, [pc, #220]	; (8003370 <JoystickLocationState+0x720>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b01      	cmp	r3, #1
 8003298:	f040 832a 	bne.w	80038f0 <JoystickLocationState+0xca0>
			ResetButton.flag = 0;
 800329c:	4b34      	ldr	r3, [pc, #208]	; (8003370 <JoystickLocationState+0x720>)
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
			state = 1;
 80032a2:	4b34      	ldr	r3, [pc, #208]	; (8003374 <JoystickLocationState+0x724>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
		break;
 80032a8:	e322      	b.n	80038f0 <JoystickLocationState+0xca0>

	//Get Place Tray 1st Point
	case 3:
		PlaceTray.L1[0] = 0;
 80032aa:	4b33      	ldr	r3, [pc, #204]	; (8003378 <JoystickLocationState+0x728>)
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
		PlaceTray.L2[0] = 0;
 80032b2:	4b31      	ldr	r3, [pc, #196]	; (8003378 <JoystickLocationState+0x728>)
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
		PlaceTray.L1[1] = 0;
 80032ba:	4b2f      	ldr	r3, [pc, #188]	; (8003378 <JoystickLocationState+0x728>)
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	605a      	str	r2, [r3, #4]
		PlaceTray.L2[1] = 0;
 80032c2:	4b2d      	ldr	r3, [pc, #180]	; (8003378 <JoystickLocationState+0x728>)
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 80032ca:	4b2c      	ldr	r3, [pc, #176]	; (800337c <JoystickLocationState+0x72c>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d129      	bne.n	8003326 <JoystickLocationState+0x6d6>
		{
			PlaceTray.L1[0] = (registerFrame[68].U16)/10; //Place Tray X Position 1 //mm
 80032d2:	4b25      	ldr	r3, [pc, #148]	; (8003368 <JoystickLocationState+0x718>)
 80032d4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80032d8:	4a29      	ldr	r2, [pc, #164]	; (8003380 <JoystickLocationState+0x730>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	08db      	lsrs	r3, r3, #3
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	ee07 3a90 	vmov	s15, r3
 80032e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ea:	4b23      	ldr	r3, [pc, #140]	; (8003378 <JoystickLocationState+0x728>)
 80032ec:	edc3 7a00 	vstr	s15, [r3]
			PlaceTray.L1[1] = position*0.045; //Place Tray Y Position 1 //mm
 80032f0:	4b24      	ldr	r3, [pc, #144]	; (8003384 <JoystickLocationState+0x734>)
 80032f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fd f91c 	bl	8000534 <__aeabi_i2d>
 80032fc:	a312      	add	r3, pc, #72	; (adr r3, 8003348 <JoystickLocationState+0x6f8>)
 80032fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003302:	f7fd f981 	bl	8000608 <__aeabi_dmul>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4610      	mov	r0, r2
 800330c:	4619      	mov	r1, r3
 800330e:	f7fd fc73 	bl	8000bf8 <__aeabi_d2f>
 8003312:	4603      	mov	r3, r0
 8003314:	4a18      	ldr	r2, [pc, #96]	; (8003378 <JoystickLocationState+0x728>)
 8003316:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 8003318:	4b18      	ldr	r3, [pc, #96]	; (800337c <JoystickLocationState+0x72c>)
 800331a:	2200      	movs	r2, #0
 800331c:	609a      	str	r2, [r3, #8]
			state = 4;
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <JoystickLocationState+0x724>)
 8003320:	2204      	movs	r2, #4
 8003322:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8003324:	e2e6      	b.n	80038f4 <JoystickLocationState+0xca4>
		else if (ResetButton.flag == 1)
 8003326:	4b12      	ldr	r3, [pc, #72]	; (8003370 <JoystickLocationState+0x720>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b01      	cmp	r3, #1
 800332c:	f040 82e2 	bne.w	80038f4 <JoystickLocationState+0xca4>
			ResetButton.flag = 0;
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <JoystickLocationState+0x720>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
			state = 1;
 8003336:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <JoystickLocationState+0x724>)
 8003338:	2201      	movs	r2, #1
 800333a:	601a      	str	r2, [r3, #0]
		break;
 800333c:	e2da      	b.n	80038f4 <JoystickLocationState+0xca4>
 800333e:	bf00      	nop
 8003340:	1a63c1f8 	.word	0x1a63c1f8
 8003344:	404ca5dc 	.word	0x404ca5dc
 8003348:	70a3d70a 	.word	0x70a3d70a
 800334c:	3fa70a3d 	.word	0x3fa70a3d
 8003350:	20000a90 	.word	0x20000a90
 8003354:	20000b5c 	.word	0x20000b5c
 8003358:	20000b58 	.word	0x20000b58
 800335c:	c2200000 	.word	0xc2200000
 8003360:	42480000 	.word	0x42480000
 8003364:	42200000 	.word	0x42200000
 8003368:	2000109c 	.word	0x2000109c
 800336c:	42c80000 	.word	0x42c80000
 8003370:	20000b6c 	.word	0x20000b6c
 8003374:	20000220 	.word	0x20000220
 8003378:	20000af4 	.word	0x20000af4
 800337c:	20000b60 	.word	0x20000b60
 8003380:	cccccccd 	.word	0xcccccccd
 8003384:	20000a5c 	.word	0x20000a5c

	//Get Place Tray 2nd Point
	case 4:
		if (GetPositionButton.flag == 1)
 8003388:	4bd5      	ldr	r3, [pc, #852]	; (80036e0 <JoystickLocationState+0xa90>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b01      	cmp	r3, #1
 800338e:	f040 8278 	bne.w	8003882 <JoystickLocationState+0xc32>
		{
			PlaceTray.L2[0] = (registerFrame[68].U16)/10; //Place Tray X Position 2 //mm
 8003392:	4bd4      	ldr	r3, [pc, #848]	; (80036e4 <JoystickLocationState+0xa94>)
 8003394:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003398:	4ad3      	ldr	r2, [pc, #844]	; (80036e8 <JoystickLocationState+0xa98>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	08db      	lsrs	r3, r3, #3
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033aa:	4bd0      	ldr	r3, [pc, #832]	; (80036ec <JoystickLocationState+0xa9c>)
 80033ac:	edc3 7a02 	vstr	s15, [r3, #8]
			PlaceTray.L2[1] = position*0.045; //Place Tray Y Position 2 //mm
 80033b0:	4bcf      	ldr	r3, [pc, #828]	; (80036f0 <JoystickLocationState+0xaa0>)
 80033b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd f8bc 	bl	8000534 <__aeabi_i2d>
 80033bc:	a3c6      	add	r3, pc, #792	; (adr r3, 80036d8 <JoystickLocationState+0xa88>)
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	f7fd f921 	bl	8000608 <__aeabi_dmul>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4610      	mov	r0, r2
 80033cc:	4619      	mov	r1, r3
 80033ce:	f7fd fc13 	bl	8000bf8 <__aeabi_d2f>
 80033d2:	4603      	mov	r3, r0
 80033d4:	4ac5      	ldr	r2, [pc, #788]	; (80036ec <JoystickLocationState+0xa9c>)
 80033d6:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 80033d8:	4bc1      	ldr	r3, [pc, #772]	; (80036e0 <JoystickLocationState+0xa90>)
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]

			cos_Theta = (PlaceTray.L2[0]-PlaceTray.L1[0])/60;
 80033de:	4bc3      	ldr	r3, [pc, #780]	; (80036ec <JoystickLocationState+0xa9c>)
 80033e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80033e4:	4bc1      	ldr	r3, [pc, #772]	; (80036ec <JoystickLocationState+0xa9c>)
 80033e6:	edd3 7a00 	vldr	s15, [r3]
 80033ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033ee:	eddf 6ac1 	vldr	s13, [pc, #772]	; 80036f4 <JoystickLocationState+0xaa4>
 80033f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033f6:	4bc0      	ldr	r3, [pc, #768]	; (80036f8 <JoystickLocationState+0xaa8>)
 80033f8:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PlaceTray.L2[1]-PlaceTray.L1[1])/60;
 80033fc:	4bbb      	ldr	r3, [pc, #748]	; (80036ec <JoystickLocationState+0xa9c>)
 80033fe:	ed93 7a03 	vldr	s14, [r3, #12]
 8003402:	4bba      	ldr	r3, [pc, #744]	; (80036ec <JoystickLocationState+0xa9c>)
 8003404:	edd3 7a01 	vldr	s15, [r3, #4]
 8003408:	ee37 7a67 	vsub.f32	s14, s14, s15
 800340c:	eddf 6ab9 	vldr	s13, [pc, #740]	; 80036f4 <JoystickLocationState+0xaa4>
 8003410:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003414:	4bb9      	ldr	r3, [pc, #740]	; (80036fc <JoystickLocationState+0xaac>)
 8003416:	edc3 7a00 	vstr	s15, [r3]

			PlaceTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PlaceTray.L1[0];
 800341a:	4bb7      	ldr	r3, [pc, #732]	; (80036f8 <JoystickLocationState+0xaa8>)
 800341c:	edd3 7a00 	vldr	s15, [r3]
 8003420:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003424:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003428:	4bb4      	ldr	r3, [pc, #720]	; (80036fc <JoystickLocationState+0xaac>)
 800342a:	edd3 7a00 	vldr	s15, [r3]
 800342e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003432:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003436:	ee37 7a27 	vadd.f32	s14, s14, s15
 800343a:	4bac      	ldr	r3, [pc, #688]	; (80036ec <JoystickLocationState+0xa9c>)
 800343c:	edd3 7a00 	vldr	s15, [r3]
 8003440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003444:	4ba9      	ldr	r3, [pc, #676]	; (80036ec <JoystickLocationState+0xa9c>)
 8003446:	edc3 7a04 	vstr	s15, [r3, #16]
			PlaceTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PlaceTray.L1[1];
 800344a:	4bac      	ldr	r3, [pc, #688]	; (80036fc <JoystickLocationState+0xaac>)
 800344c:	edd3 7a00 	vldr	s15, [r3]
 8003450:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003454:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003458:	4ba7      	ldr	r3, [pc, #668]	; (80036f8 <JoystickLocationState+0xaa8>)
 800345a:	edd3 7a00 	vldr	s15, [r3]
 800345e:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8003462:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003466:	ee37 7a27 	vadd.f32	s14, s14, s15
 800346a:	4ba0      	ldr	r3, [pc, #640]	; (80036ec <JoystickLocationState+0xa9c>)
 800346c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003474:	4b9d      	ldr	r3, [pc, #628]	; (80036ec <JoystickLocationState+0xa9c>)
 8003476:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PlaceTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PlaceTray.L1[0];
 800347a:	4b9f      	ldr	r3, [pc, #636]	; (80036f8 <JoystickLocationState+0xaa8>)
 800347c:	edd3 7a00 	vldr	s15, [r3]
 8003480:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003484:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003488:	4b9c      	ldr	r3, [pc, #624]	; (80036fc <JoystickLocationState+0xaac>)
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003492:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003496:	ee37 7a27 	vadd.f32	s14, s14, s15
 800349a:	4b94      	ldr	r3, [pc, #592]	; (80036ec <JoystickLocationState+0xa9c>)
 800349c:	edd3 7a00 	vldr	s15, [r3]
 80034a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034a4:	4b91      	ldr	r3, [pc, #580]	; (80036ec <JoystickLocationState+0xa9c>)
 80034a6:	edc3 7a05 	vstr	s15, [r3, #20]
			PlaceTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PlaceTray.L1[1];
 80034aa:	4b94      	ldr	r3, [pc, #592]	; (80036fc <JoystickLocationState+0xaac>)
 80034ac:	edd3 7a00 	vldr	s15, [r3]
 80034b0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80034b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034b8:	4b8f      	ldr	r3, [pc, #572]	; (80036f8 <JoystickLocationState+0xaa8>)
 80034ba:	edd3 7a00 	vldr	s15, [r3]
 80034be:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80034c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034ca:	4b88      	ldr	r3, [pc, #544]	; (80036ec <JoystickLocationState+0xa9c>)
 80034cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80034d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d4:	4b85      	ldr	r3, [pc, #532]	; (80036ec <JoystickLocationState+0xa9c>)
 80034d6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PlaceTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PlaceTray.L1[0];
 80034da:	4b87      	ldr	r3, [pc, #540]	; (80036f8 <JoystickLocationState+0xaa8>)
 80034dc:	edd3 7a00 	vldr	s15, [r3]
 80034e0:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8003700 <JoystickLocationState+0xab0>
 80034e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034e8:	4b84      	ldr	r3, [pc, #528]	; (80036fc <JoystickLocationState+0xaac>)
 80034ea:	edd3 7a00 	vldr	s15, [r3]
 80034ee:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80034f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034fa:	4b7c      	ldr	r3, [pc, #496]	; (80036ec <JoystickLocationState+0xa9c>)
 80034fc:	edd3 7a00 	vldr	s15, [r3]
 8003500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003504:	4b79      	ldr	r3, [pc, #484]	; (80036ec <JoystickLocationState+0xa9c>)
 8003506:	edc3 7a06 	vstr	s15, [r3, #24]
			PlaceTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PlaceTray.L1[1];
 800350a:	4b7c      	ldr	r3, [pc, #496]	; (80036fc <JoystickLocationState+0xaac>)
 800350c:	edd3 7a00 	vldr	s15, [r3]
 8003510:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8003700 <JoystickLocationState+0xab0>
 8003514:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003518:	4b77      	ldr	r3, [pc, #476]	; (80036f8 <JoystickLocationState+0xaa8>)
 800351a:	edd3 7a00 	vldr	s15, [r3]
 800351e:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8003522:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800352a:	4b70      	ldr	r3, [pc, #448]	; (80036ec <JoystickLocationState+0xa9c>)
 800352c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003534:	4b6d      	ldr	r3, [pc, #436]	; (80036ec <JoystickLocationState+0xa9c>)
 8003536:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PlaceTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PlaceTray.L1[0];
 800353a:	4b6f      	ldr	r3, [pc, #444]	; (80036f8 <JoystickLocationState+0xaa8>)
 800353c:	edd3 7a00 	vldr	s15, [r3]
 8003540:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003544:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003548:	4b6c      	ldr	r3, [pc, #432]	; (80036fc <JoystickLocationState+0xaac>)
 800354a:	edd3 7a00 	vldr	s15, [r3]
 800354e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003552:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003556:	ee37 7a27 	vadd.f32	s14, s14, s15
 800355a:	4b64      	ldr	r3, [pc, #400]	; (80036ec <JoystickLocationState+0xa9c>)
 800355c:	edd3 7a00 	vldr	s15, [r3]
 8003560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003564:	4b61      	ldr	r3, [pc, #388]	; (80036ec <JoystickLocationState+0xa9c>)
 8003566:	edc3 7a07 	vstr	s15, [r3, #28]
			PlaceTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PlaceTray.L1[1];
 800356a:	4b64      	ldr	r3, [pc, #400]	; (80036fc <JoystickLocationState+0xaac>)
 800356c:	edd3 7a00 	vldr	s15, [r3]
 8003570:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003574:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003578:	4b5f      	ldr	r3, [pc, #380]	; (80036f8 <JoystickLocationState+0xaa8>)
 800357a:	edd3 7a00 	vldr	s15, [r3]
 800357e:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8003582:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800358a:	4b58      	ldr	r3, [pc, #352]	; (80036ec <JoystickLocationState+0xa9c>)
 800358c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003594:	4b55      	ldr	r3, [pc, #340]	; (80036ec <JoystickLocationState+0xa9c>)
 8003596:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PlaceTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PlaceTray.L1[0];
 800359a:	4b57      	ldr	r3, [pc, #348]	; (80036f8 <JoystickLocationState+0xaa8>)
 800359c:	edd3 7a00 	vldr	s15, [r3]
 80035a0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80035a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035a8:	4b54      	ldr	r3, [pc, #336]	; (80036fc <JoystickLocationState+0xaac>)
 80035aa:	edd3 7a00 	vldr	s15, [r3]
 80035ae:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80035b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035ba:	4b4c      	ldr	r3, [pc, #304]	; (80036ec <JoystickLocationState+0xa9c>)
 80035bc:	edd3 7a00 	vldr	s15, [r3]
 80035c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c4:	4b49      	ldr	r3, [pc, #292]	; (80036ec <JoystickLocationState+0xa9c>)
 80035c6:	edc3 7a08 	vstr	s15, [r3, #32]
			PlaceTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PlaceTray.L1[1];
 80035ca:	4b4c      	ldr	r3, [pc, #304]	; (80036fc <JoystickLocationState+0xaac>)
 80035cc:	edd3 7a00 	vldr	s15, [r3]
 80035d0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80035d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035d8:	4b47      	ldr	r3, [pc, #284]	; (80036f8 <JoystickLocationState+0xaa8>)
 80035da:	edd3 7a00 	vldr	s15, [r3]
 80035de:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 80035e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035ea:	4b40      	ldr	r3, [pc, #256]	; (80036ec <JoystickLocationState+0xa9c>)
 80035ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80035f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f4:	4b3d      	ldr	r3, [pc, #244]	; (80036ec <JoystickLocationState+0xa9c>)
 80035f6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PlaceTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PlaceTray.L1[0];
 80035fa:	4b3f      	ldr	r3, [pc, #252]	; (80036f8 <JoystickLocationState+0xaa8>)
 80035fc:	edd3 7a00 	vldr	s15, [r3]
 8003600:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003700 <JoystickLocationState+0xab0>
 8003604:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003608:	4b3c      	ldr	r3, [pc, #240]	; (80036fc <JoystickLocationState+0xaac>)
 800360a:	edd3 7a00 	vldr	s15, [r3]
 800360e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003612:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003616:	ee37 7a27 	vadd.f32	s14, s14, s15
 800361a:	4b34      	ldr	r3, [pc, #208]	; (80036ec <JoystickLocationState+0xa9c>)
 800361c:	edd3 7a00 	vldr	s15, [r3]
 8003620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003624:	4b31      	ldr	r3, [pc, #196]	; (80036ec <JoystickLocationState+0xa9c>)
 8003626:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PlaceTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PlaceTray.L1[1];
 800362a:	4b34      	ldr	r3, [pc, #208]	; (80036fc <JoystickLocationState+0xaac>)
 800362c:	edd3 7a00 	vldr	s15, [r3]
 8003630:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003700 <JoystickLocationState+0xab0>
 8003634:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003638:	4b2f      	ldr	r3, [pc, #188]	; (80036f8 <JoystickLocationState+0xaa8>)
 800363a:	edd3 7a00 	vldr	s15, [r3]
 800363e:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8003642:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800364a:	4b28      	ldr	r3, [pc, #160]	; (80036ec <JoystickLocationState+0xa9c>)
 800364c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003654:	4b25      	ldr	r3, [pc, #148]	; (80036ec <JoystickLocationState+0xa9c>)
 8003656:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PlaceTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PlaceTray.L1[0];
 800365a:	4b27      	ldr	r3, [pc, #156]	; (80036f8 <JoystickLocationState+0xaa8>)
 800365c:	edd3 7a00 	vldr	s15, [r3]
 8003660:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003664:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003668:	4b24      	ldr	r3, [pc, #144]	; (80036fc <JoystickLocationState+0xaac>)
 800366a:	edd3 7a00 	vldr	s15, [r3]
 800366e:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003704 <JoystickLocationState+0xab4>
 8003672:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003676:	ee37 7a27 	vadd.f32	s14, s14, s15
 800367a:	4b1c      	ldr	r3, [pc, #112]	; (80036ec <JoystickLocationState+0xa9c>)
 800367c:	edd3 7a00 	vldr	s15, [r3]
 8003680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003684:	4b19      	ldr	r3, [pc, #100]	; (80036ec <JoystickLocationState+0xa9c>)
 8003686:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PlaceTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PlaceTray.L1[1];
 800368a:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <JoystickLocationState+0xaac>)
 800368c:	edd3 7a00 	vldr	s15, [r3]
 8003690:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003694:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003698:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <JoystickLocationState+0xaa8>)
 800369a:	edd3 7a00 	vldr	s15, [r3]
 800369e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003708 <JoystickLocationState+0xab8>
 80036a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036aa:	4b10      	ldr	r3, [pc, #64]	; (80036ec <JoystickLocationState+0xa9c>)
 80036ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80036b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b4:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <JoystickLocationState+0xa9c>)
 80036b6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PlaceTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PlaceTray.L1[0];
 80036ba:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <JoystickLocationState+0xaa8>)
 80036bc:	edd3 7a00 	vldr	s15, [r3]
 80036c0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80036c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <JoystickLocationState+0xaac>)
 80036ca:	edd3 7a00 	vldr	s15, [r3]
 80036ce:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003704 <JoystickLocationState+0xab4>
 80036d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036d6:	e019      	b.n	800370c <JoystickLocationState+0xabc>
 80036d8:	70a3d70a 	.word	0x70a3d70a
 80036dc:	3fa70a3d 	.word	0x3fa70a3d
 80036e0:	20000b60 	.word	0x20000b60
 80036e4:	2000109c 	.word	0x2000109c
 80036e8:	cccccccd 	.word	0xcccccccd
 80036ec:	20000af4 	.word	0x20000af4
 80036f0:	20000a5c 	.word	0x20000a5c
 80036f4:	42700000 	.word	0x42700000
 80036f8:	20000b58 	.word	0x20000b58
 80036fc:	20000b5c 	.word	0x20000b5c
 8003700:	42480000 	.word	0x42480000
 8003704:	42200000 	.word	0x42200000
 8003708:	c2200000 	.word	0xc2200000
 800370c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003710:	4b7f      	ldr	r3, [pc, #508]	; (8003910 <JoystickLocationState+0xcc0>)
 8003712:	edd3 7a00 	vldr	s15, [r3]
 8003716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800371a:	4b7d      	ldr	r3, [pc, #500]	; (8003910 <JoystickLocationState+0xcc0>)
 800371c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PlaceTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003720:	4b7c      	ldr	r3, [pc, #496]	; (8003914 <JoystickLocationState+0xcc4>)
 8003722:	edd3 7a00 	vldr	s15, [r3]
 8003726:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800372a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800372e:	4b7a      	ldr	r3, [pc, #488]	; (8003918 <JoystickLocationState+0xcc8>)
 8003730:	edd3 7a00 	vldr	s15, [r3]
 8003734:	eddf 6a79 	vldr	s13, [pc, #484]	; 800391c <JoystickLocationState+0xccc>
 8003738:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800373c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003740:	4b73      	ldr	r3, [pc, #460]	; (8003910 <JoystickLocationState+0xcc0>)
 8003742:	edd3 7a01 	vldr	s15, [r3, #4]
 8003746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800374a:	4b71      	ldr	r3, [pc, #452]	; (8003910 <JoystickLocationState+0xcc0>)
 800374c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PlaceTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003750:	4b71      	ldr	r3, [pc, #452]	; (8003918 <JoystickLocationState+0xcc8>)
 8003752:	edd3 7a00 	vldr	s15, [r3]
 8003756:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003920 <JoystickLocationState+0xcd0>
 800375a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800375e:	4b6d      	ldr	r3, [pc, #436]	; (8003914 <JoystickLocationState+0xcc4>)
 8003760:	edd3 7a00 	vldr	s15, [r3]
 8003764:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003924 <JoystickLocationState+0xcd4>
 8003768:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800376c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003770:	4b67      	ldr	r3, [pc, #412]	; (8003910 <JoystickLocationState+0xcc0>)
 8003772:	edd3 7a00 	vldr	s15, [r3]
 8003776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800377a:	4b65      	ldr	r3, [pc, #404]	; (8003910 <JoystickLocationState+0xcc0>)
 800377c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PlaceTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003780:	4b64      	ldr	r3, [pc, #400]	; (8003914 <JoystickLocationState+0xcc4>)
 8003782:	edd3 7a00 	vldr	s15, [r3]
 8003786:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8003920 <JoystickLocationState+0xcd0>
 800378a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800378e:	4b62      	ldr	r3, [pc, #392]	; (8003918 <JoystickLocationState+0xcc8>)
 8003790:	edd3 7a00 	vldr	s15, [r3]
 8003794:	eddf 6a61 	vldr	s13, [pc, #388]	; 800391c <JoystickLocationState+0xccc>
 8003798:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800379c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037a0:	4b5b      	ldr	r3, [pc, #364]	; (8003910 <JoystickLocationState+0xcc0>)
 80037a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80037a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037aa:	4b59      	ldr	r3, [pc, #356]	; (8003910 <JoystickLocationState+0xcc0>)
 80037ac:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PlaceTray.origin_x = PlaceTray.L1[0]+(50*sin_Theta);
 80037b0:	4b57      	ldr	r3, [pc, #348]	; (8003910 <JoystickLocationState+0xcc0>)
 80037b2:	ed93 7a00 	vldr	s14, [r3]
 80037b6:	4b57      	ldr	r3, [pc, #348]	; (8003914 <JoystickLocationState+0xcc4>)
 80037b8:	edd3 7a00 	vldr	s15, [r3]
 80037bc:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003920 <JoystickLocationState+0xcd0>
 80037c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80037c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037c8:	4b51      	ldr	r3, [pc, #324]	; (8003910 <JoystickLocationState+0xcc0>)
 80037ca:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			PlaceTray.origin_y = PlaceTray.L1[1]-(50*cos_Theta);
 80037ce:	4b50      	ldr	r3, [pc, #320]	; (8003910 <JoystickLocationState+0xcc0>)
 80037d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80037d4:	4b50      	ldr	r3, [pc, #320]	; (8003918 <JoystickLocationState+0xcc8>)
 80037d6:	edd3 7a00 	vldr	s15, [r3]
 80037da:	eddf 6a51 	vldr	s13, [pc, #324]	; 8003920 <JoystickLocationState+0xcd0>
 80037de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80037e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037e6:	4b4a      	ldr	r3, [pc, #296]	; (8003910 <JoystickLocationState+0xcc0>)
 80037e8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			PlaceTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 80037ec:	4b4a      	ldr	r3, [pc, #296]	; (8003918 <JoystickLocationState+0xcc8>)
 80037ee:	edd3 7a00 	vldr	s15, [r3]
 80037f2:	eeb0 0a67 	vmov.f32	s0, s15
 80037f6:	f00d fbe3 	bl	8010fc0 <acosf>
 80037fa:	ee10 3a10 	vmov	r3, s0
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fc feaa 	bl	8000558 <__aeabi_f2d>
 8003804:	a340      	add	r3, pc, #256	; (adr r3, 8003908 <JoystickLocationState+0xcb8>)
 8003806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380a:	f7fc fefd 	bl	8000608 <__aeabi_dmul>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4610      	mov	r0, r2
 8003814:	4619      	mov	r1, r3
 8003816:	f7fd f9ef 	bl	8000bf8 <__aeabi_d2f>
 800381a:	4603      	mov	r3, r0
 800381c:	4a3c      	ldr	r2, [pc, #240]	; (8003910 <JoystickLocationState+0xcc0>)
 800381e:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[35].U16 = PlaceTray.origin_x * 10;
 8003820:	4b3b      	ldr	r3, [pc, #236]	; (8003910 <JoystickLocationState+0xcc0>)
 8003822:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003826:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800382a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800382e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003832:	ee17 3a90 	vmov	r3, s15
 8003836:	b29a      	uxth	r2, r3
 8003838:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <JoystickLocationState+0xcd8>)
 800383a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[36].U16 = PlaceTray.origin_y * 10;
 800383e:	4b34      	ldr	r3, [pc, #208]	; (8003910 <JoystickLocationState+0xcc0>)
 8003840:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003844:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800384c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003850:	ee17 3a90 	vmov	r3, s15
 8003854:	b29a      	uxth	r2, r3
 8003856:	4b34      	ldr	r3, [pc, #208]	; (8003928 <JoystickLocationState+0xcd8>)
 8003858:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[37].U16 = PlaceTray.orientation * 100;
 800385c:	4b2c      	ldr	r3, [pc, #176]	; (8003910 <JoystickLocationState+0xcc0>)
 800385e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003862:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800392c <JoystickLocationState+0xcdc>
 8003866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800386a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800386e:	ee17 3a90 	vmov	r3, s15
 8003872:	b29a      	uxth	r2, r3
 8003874:	4b2c      	ldr	r3, [pc, #176]	; (8003928 <JoystickLocationState+0xcd8>)
 8003876:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			registerFrame[16].U16 = 0;
 800387a:	4b2b      	ldr	r3, [pc, #172]	; (8003928 <JoystickLocationState+0xcd8>)
 800387c:	2200      	movs	r2, #0
 800387e:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8003880:	e03a      	b.n	80038f8 <JoystickLocationState+0xca8>
		else if (ResetButton.flag == 1)
 8003882:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <JoystickLocationState+0xce0>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d136      	bne.n	80038f8 <JoystickLocationState+0xca8>
			ResetButton.flag = 0;
 800388a:	4b29      	ldr	r3, [pc, #164]	; (8003930 <JoystickLocationState+0xce0>)
 800388c:	2200      	movs	r2, #0
 800388e:	609a      	str	r2, [r3, #8]
			state = 1;
 8003890:	4b28      	ldr	r3, [pc, #160]	; (8003934 <JoystickLocationState+0xce4>)
 8003892:	2201      	movs	r2, #1
 8003894:	601a      	str	r2, [r3, #0]
		break;
 8003896:	e02f      	b.n	80038f8 <JoystickLocationState+0xca8>
	case 5:
		EndEffectorState = 2;		//TestModeOff
 8003898:	4b27      	ldr	r3, [pc, #156]	; (8003938 <JoystickLocationState+0xce8>)
 800389a:	2202      	movs	r2, #2
 800389c:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 0;	//End Effector Status: Laser Off
 800389e:	4b22      	ldr	r3, [pc, #136]	; (8003928 <JoystickLocationState+0xcd8>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 80038a4:	4b25      	ldr	r3, [pc, #148]	; (800393c <JoystickLocationState+0xcec>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 80038aa:	f7fe fdeb 	bl	8002484 <EndEffectorWrite>

		HAL_Delay(10);
 80038ae:	200a      	movs	r0, #10
 80038b0:	f001 fa8e 	bl	8004dd0 <HAL_Delay>

		EndEffectorState = 3;		//RunModeOn
 80038b4:	4b20      	ldr	r3, [pc, #128]	; (8003938 <JoystickLocationState+0xce8>)
 80038b6:	2203      	movs	r2, #3
 80038b8:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 2;	//End Effector Status: Gripper Power
 80038ba:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <JoystickLocationState+0xcd8>)
 80038bc:	2202      	movs	r2, #2
 80038be:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 80038c0:	4b1e      	ldr	r3, [pc, #120]	; (800393c <JoystickLocationState+0xcec>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 80038c6:	f7fe fddd 	bl	8002484 <EndEffectorWrite>

		state = 1;
 80038ca:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <JoystickLocationState+0xce4>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
		scheduler = 1;				//Go Pick
 80038d0:	4b1b      	ldr	r3, [pc, #108]	; (8003940 <JoystickLocationState+0xcf0>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	601a      	str	r2, [r3, #0]
		if (ResetButton.flag == 1)
 80038d6:	4b16      	ldr	r3, [pc, #88]	; (8003930 <JoystickLocationState+0xce0>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d10e      	bne.n	80038fc <JoystickLocationState+0xcac>
		{
			ResetButton.flag = 0;
 80038de:	4b14      	ldr	r3, [pc, #80]	; (8003930 <JoystickLocationState+0xce0>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	609a      	str	r2, [r3, #8]
			state = 1;
 80038e4:	4b13      	ldr	r3, [pc, #76]	; (8003934 <JoystickLocationState+0xce4>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
		}
		break;
 80038ea:	e007      	b.n	80038fc <JoystickLocationState+0xcac>
		break;
 80038ec:	bf00      	nop
 80038ee:	e006      	b.n	80038fe <JoystickLocationState+0xcae>
		break;
 80038f0:	bf00      	nop
 80038f2:	e004      	b.n	80038fe <JoystickLocationState+0xcae>
		break;
 80038f4:	bf00      	nop
 80038f6:	e002      	b.n	80038fe <JoystickLocationState+0xcae>
		break;
 80038f8:	bf00      	nop
 80038fa:	e000      	b.n	80038fe <JoystickLocationState+0xcae>
		break;
 80038fc:	bf00      	nop
	}
}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	f3af 8000 	nop.w
 8003908:	1a63c1f8 	.word	0x1a63c1f8
 800390c:	404ca5dc 	.word	0x404ca5dc
 8003910:	20000af4 	.word	0x20000af4
 8003914:	20000b5c 	.word	0x20000b5c
 8003918:	20000b58 	.word	0x20000b58
 800391c:	c2200000 	.word	0xc2200000
 8003920:	42480000 	.word	0x42480000
 8003924:	42200000 	.word	0x42200000
 8003928:	2000109c 	.word	0x2000109c
 800392c:	42c80000 	.word	0x42c80000
 8003930:	20000b6c 	.word	0x20000b6c
 8003934:	20000220 	.word	0x20000220
 8003938:	20000bb0 	.word	0x20000bb0
 800393c:	20000ba8 	.word	0x20000ba8
 8003940:	20000a10 	.word	0x20000a10

08003944 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af02      	add	r7, sp, #8
 800394a:	6078      	str	r0, [r7, #4]
	if(htim == &htim9) //check call back from timer9
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a10      	ldr	r2, [pc, #64]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d105      	bne.n	8003960 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		if(scheduler == 3)
 8003954:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d101      	bne.n	8003960 <HAL_TIM_PeriodElapsedCallback+0x1c>
		{
			TrajectoryGenerator();
 800395c:	f000 f824 	bl	80039a8 <TrajectoryGenerator>
		}
	}
	if(htim == &htim4){
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a0d      	ldr	r2, [pc, #52]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d10f      	bne.n	8003988 <HAL_TIM_PeriodElapsedCallback+0x44>
		if(scheduler == 4 && EndEffectorReadFlag == 1)
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d10b      	bne.n	8003988 <HAL_TIM_PeriodElapsedCallback+0x44>
 8003970:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d107      	bne.n	8003988 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, 50);
 8003978:	2332      	movs	r3, #50	; 0x32
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	2301      	movs	r3, #1
 800397e:	4a08      	ldr	r2, [pc, #32]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003980:	212a      	movs	r1, #42	; 0x2a
 8003982:	4808      	ldr	r0, [pc, #32]	; (80039a4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003984:	f002 ff88 	bl	8006898 <HAL_I2C_Master_Receive>
		}
	}
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20000760 	.word	0x20000760
 8003994:	20000a10 	.word	0x20000a10
 8003998:	200006ac 	.word	0x200006ac
 800399c:	20000ba9 	.word	0x20000ba9
 80039a0:	20000bac 	.word	0x20000bac
 80039a4:	200004f0 	.word	0x200004f0

080039a8 <TrajectoryGenerator>:

void TrajectoryGenerator()
{
 80039a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039ac:	af00      	add	r7, sp, #0
	switch(Trajectstate)
 80039ae:	4b93      	ldr	r3, [pc, #588]	; (8003bfc <TrajectoryGenerator+0x254>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	f200 84eb 	bhi.w	800438e <TrajectoryGenerator+0x9e6>
 80039b8:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <TrajectoryGenerator+0x18>)
 80039ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039be:	bf00      	nop
 80039c0:	080039d1 	.word	0x080039d1
 80039c4:	08003c45 	.word	0x08003c45
 80039c8:	08003f51 	.word	0x08003f51
 80039cc:	08004379 	.word	0x08004379
	{
	case 0: //initial Condition & Case Check
			qi = position;
 80039d0:	4b8b      	ldr	r3, [pc, #556]	; (8003c00 <TrajectoryGenerator+0x258>)
 80039d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039de:	4b89      	ldr	r3, [pc, #548]	; (8003c04 <TrajectoryGenerator+0x25c>)
 80039e0:	edc3 7a00 	vstr	s15, [r3]
			qdi = 0;
 80039e4:	4b88      	ldr	r3, [pc, #544]	; (8003c08 <TrajectoryGenerator+0x260>)
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
			qd_max = 22222.22;  //1000 pulse/s
 80039ec:	4b87      	ldr	r3, [pc, #540]	; (8003c0c <TrajectoryGenerator+0x264>)
 80039ee:	4a88      	ldr	r2, [pc, #544]	; (8003c10 <TrajectoryGenerator+0x268>)
 80039f0:	601a      	str	r2, [r3, #0]
			qdd_max = 66666.67; //3000 pulse/s^2
 80039f2:	4b88      	ldr	r3, [pc, #544]	; (8003c14 <TrajectoryGenerator+0x26c>)
 80039f4:	4a88      	ldr	r2, [pc, #544]	; (8003c18 <TrajectoryGenerator+0x270>)
 80039f6:	601a      	str	r2, [r3, #0]

		  if(qf > qi)
 80039f8:	4b88      	ldr	r3, [pc, #544]	; (8003c1c <TrajectoryGenerator+0x274>)
 80039fa:	ed93 7a00 	vldr	s14, [r3]
 80039fe:	4b81      	ldr	r3, [pc, #516]	; (8003c04 <TrajectoryGenerator+0x25c>)
 8003a00:	edd3 7a00 	vldr	s15, [r3]
 8003a04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0c:	dd16      	ble.n	8003a3c <TrajectoryGenerator+0x94>
		  {
			  t_half = sqrtf((qf-qi)/qdd_max);
 8003a0e:	4b83      	ldr	r3, [pc, #524]	; (8003c1c <TrajectoryGenerator+0x274>)
 8003a10:	ed93 7a00 	vldr	s14, [r3]
 8003a14:	4b7b      	ldr	r3, [pc, #492]	; (8003c04 <TrajectoryGenerator+0x25c>)
 8003a16:	edd3 7a00 	vldr	s15, [r3]
 8003a1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a1e:	4b7d      	ldr	r3, [pc, #500]	; (8003c14 <TrajectoryGenerator+0x26c>)
 8003a20:	edd3 7a00 	vldr	s15, [r3]
 8003a24:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a28:	eeb0 0a66 	vmov.f32	s0, s13
 8003a2c:	f00d faf4 	bl	8011018 <sqrtf>
 8003a30:	eef0 7a40 	vmov.f32	s15, s0
 8003a34:	4b7a      	ldr	r3, [pc, #488]	; (8003c20 <TrajectoryGenerator+0x278>)
 8003a36:	edc3 7a00 	vstr	s15, [r3]
 8003a3a:	e022      	b.n	8003a82 <TrajectoryGenerator+0xda>
		  }
		  else if(qf < qi)
 8003a3c:	4b77      	ldr	r3, [pc, #476]	; (8003c1c <TrajectoryGenerator+0x274>)
 8003a3e:	ed93 7a00 	vldr	s14, [r3]
 8003a42:	4b70      	ldr	r3, [pc, #448]	; (8003c04 <TrajectoryGenerator+0x25c>)
 8003a44:	edd3 7a00 	vldr	s15, [r3]
 8003a48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a50:	d517      	bpl.n	8003a82 <TrajectoryGenerator+0xda>
		  {
			  t_half = sqrtf(-1*(qf-qi)/qdd_max);
 8003a52:	4b72      	ldr	r3, [pc, #456]	; (8003c1c <TrajectoryGenerator+0x274>)
 8003a54:	ed93 7a00 	vldr	s14, [r3]
 8003a58:	4b6a      	ldr	r3, [pc, #424]	; (8003c04 <TrajectoryGenerator+0x25c>)
 8003a5a:	edd3 7a00 	vldr	s15, [r3]
 8003a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a62:	eeb1 7a67 	vneg.f32	s14, s15
 8003a66:	4b6b      	ldr	r3, [pc, #428]	; (8003c14 <TrajectoryGenerator+0x26c>)
 8003a68:	edd3 7a00 	vldr	s15, [r3]
 8003a6c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a70:	eeb0 0a66 	vmov.f32	s0, s13
 8003a74:	f00d fad0 	bl	8011018 <sqrtf>
 8003a78:	eef0 7a40 	vmov.f32	s15, s0
 8003a7c:	4b68      	ldr	r3, [pc, #416]	; (8003c20 <TrajectoryGenerator+0x278>)
 8003a7e:	edc3 7a00 	vstr	s15, [r3]
		  }

		  if(qf-qi < 0)
 8003a82:	4b66      	ldr	r3, [pc, #408]	; (8003c1c <TrajectoryGenerator+0x274>)
 8003a84:	ed93 7a00 	vldr	s14, [r3]
 8003a88:	4b5e      	ldr	r3, [pc, #376]	; (8003c04 <TrajectoryGenerator+0x25c>)
 8003a8a:	edd3 7a00 	vldr	s15, [r3]
 8003a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9a:	d50f      	bpl.n	8003abc <TrajectoryGenerator+0x114>
		  {
			  qd_max = -1*qd_max;
 8003a9c:	4b5b      	ldr	r3, [pc, #364]	; (8003c0c <TrajectoryGenerator+0x264>)
 8003a9e:	edd3 7a00 	vldr	s15, [r3]
 8003aa2:	eef1 7a67 	vneg.f32	s15, s15
 8003aa6:	4b59      	ldr	r3, [pc, #356]	; (8003c0c <TrajectoryGenerator+0x264>)
 8003aa8:	edc3 7a00 	vstr	s15, [r3]
			  qdd_max = -1*qdd_max;
 8003aac:	4b59      	ldr	r3, [pc, #356]	; (8003c14 <TrajectoryGenerator+0x26c>)
 8003aae:	edd3 7a00 	vldr	s15, [r3]
 8003ab2:	eef1 7a67 	vneg.f32	s15, s15
 8003ab6:	4b57      	ldr	r3, [pc, #348]	; (8003c14 <TrajectoryGenerator+0x26c>)
 8003ab8:	edc3 7a00 	vstr	s15, [r3]
		  }

		  tacc = (qd_max-qdi)/qdd_max;
 8003abc:	4b53      	ldr	r3, [pc, #332]	; (8003c0c <TrajectoryGenerator+0x264>)
 8003abe:	ed93 7a00 	vldr	s14, [r3]
 8003ac2:	4b51      	ldr	r3, [pc, #324]	; (8003c08 <TrajectoryGenerator+0x260>)
 8003ac4:	edd3 7a00 	vldr	s15, [r3]
 8003ac8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003acc:	4b51      	ldr	r3, [pc, #324]	; (8003c14 <TrajectoryGenerator+0x26c>)
 8003ace:	ed93 7a00 	vldr	s14, [r3]
 8003ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ad6:	4b53      	ldr	r3, [pc, #332]	; (8003c24 <TrajectoryGenerator+0x27c>)
 8003ad8:	edc3 7a00 	vstr	s15, [r3]
		  qacc = qdi*tacc + 0.5*qdd_max*tacc*tacc;
 8003adc:	4b4a      	ldr	r3, [pc, #296]	; (8003c08 <TrajectoryGenerator+0x260>)
 8003ade:	ed93 7a00 	vldr	s14, [r3]
 8003ae2:	4b50      	ldr	r3, [pc, #320]	; (8003c24 <TrajectoryGenerator+0x27c>)
 8003ae4:	edd3 7a00 	vldr	s15, [r3]
 8003ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aec:	ee17 0a90 	vmov	r0, s15
 8003af0:	f7fc fd32 	bl	8000558 <__aeabi_f2d>
 8003af4:	4604      	mov	r4, r0
 8003af6:	460d      	mov	r5, r1
 8003af8:	4b46      	ldr	r3, [pc, #280]	; (8003c14 <TrajectoryGenerator+0x26c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fc fd2b 	bl	8000558 <__aeabi_f2d>
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	4b48      	ldr	r3, [pc, #288]	; (8003c28 <TrajectoryGenerator+0x280>)
 8003b08:	f7fc fd7e 	bl	8000608 <__aeabi_dmul>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4690      	mov	r8, r2
 8003b12:	4699      	mov	r9, r3
 8003b14:	4b43      	ldr	r3, [pc, #268]	; (8003c24 <TrajectoryGenerator+0x27c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fc fd1d 	bl	8000558 <__aeabi_f2d>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4640      	mov	r0, r8
 8003b24:	4649      	mov	r1, r9
 8003b26:	f7fc fd6f 	bl	8000608 <__aeabi_dmul>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4690      	mov	r8, r2
 8003b30:	4699      	mov	r9, r3
 8003b32:	4b3c      	ldr	r3, [pc, #240]	; (8003c24 <TrajectoryGenerator+0x27c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fc fd0e 	bl	8000558 <__aeabi_f2d>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4640      	mov	r0, r8
 8003b42:	4649      	mov	r1, r9
 8003b44:	f7fc fd60 	bl	8000608 <__aeabi_dmul>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	4629      	mov	r1, r5
 8003b50:	f7fc fba4 	bl	800029c <__adddf3>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4610      	mov	r0, r2
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	f7fd f84c 	bl	8000bf8 <__aeabi_d2f>
 8003b60:	4603      	mov	r3, r0
 8003b62:	4a32      	ldr	r2, [pc, #200]	; (8003c2c <TrajectoryGenerator+0x284>)
 8003b64:	6013      	str	r3, [r2, #0]
		  qdec = qacc;
 8003b66:	4b31      	ldr	r3, [pc, #196]	; (8003c2c <TrajectoryGenerator+0x284>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a31      	ldr	r2, [pc, #196]	; (8003c30 <TrajectoryGenerator+0x288>)
 8003b6c:	6013      	str	r3, [r2, #0]
		  tconst = ((qf-qi)-qacc-qdec)/qd_max;
 8003b6e:	4b2b      	ldr	r3, [pc, #172]	; (8003c1c <TrajectoryGenerator+0x274>)
 8003b70:	ed93 7a00 	vldr	s14, [r3]
 8003b74:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <TrajectoryGenerator+0x25c>)
 8003b76:	edd3 7a00 	vldr	s15, [r3]
 8003b7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <TrajectoryGenerator+0x284>)
 8003b80:	edd3 7a00 	vldr	s15, [r3]
 8003b84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b88:	4b29      	ldr	r3, [pc, #164]	; (8003c30 <TrajectoryGenerator+0x288>)
 8003b8a:	edd3 7a00 	vldr	s15, [r3]
 8003b8e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003b92:	4b1e      	ldr	r3, [pc, #120]	; (8003c0c <TrajectoryGenerator+0x264>)
 8003b94:	ed93 7a00 	vldr	s14, [r3]
 8003b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <TrajectoryGenerator+0x28c>)
 8003b9e:	edc3 7a00 	vstr	s15, [r3]
		  tdec = tacc;
 8003ba2:	4b20      	ldr	r3, [pc, #128]	; (8003c24 <TrajectoryGenerator+0x27c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a24      	ldr	r2, [pc, #144]	; (8003c38 <TrajectoryGenerator+0x290>)
 8003ba8:	6013      	str	r3, [r2, #0]

		  if(fabs(qdi+qdd_max*t_half) >= fabs(qd_max))
 8003baa:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <TrajectoryGenerator+0x26c>)
 8003bac:	ed93 7a00 	vldr	s14, [r3]
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <TrajectoryGenerator+0x278>)
 8003bb2:	edd3 7a00 	vldr	s15, [r3]
 8003bb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bba:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <TrajectoryGenerator+0x260>)
 8003bbc:	edd3 7a00 	vldr	s15, [r3]
 8003bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc4:	eeb0 7ae7 	vabs.f32	s14, s15
 8003bc8:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <TrajectoryGenerator+0x264>)
 8003bca:	edd3 7a00 	vldr	s15, [r3]
 8003bce:	eef0 7ae7 	vabs.f32	s15, s15
 8003bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bda:	db07      	blt.n	8003bec <TrajectoryGenerator+0x244>
		  {
			  initime = time;
 8003bdc:	4b17      	ldr	r3, [pc, #92]	; (8003c3c <TrajectoryGenerator+0x294>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <TrajectoryGenerator+0x298>)
 8003be2:	6013      	str	r3, [r2, #0]
			  Trajectstate = 2;
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <TrajectoryGenerator+0x254>)
 8003be6:	2202      	movs	r2, #2
 8003be8:	601a      	str	r2, [r3, #0]
		  else
		  {
			  initime = time;
			  Trajectstate = 1;
		  }
		  break;
 8003bea:	e3d0      	b.n	800438e <TrajectoryGenerator+0x9e6>
			  initime = time;
 8003bec:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <TrajectoryGenerator+0x294>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a13      	ldr	r2, [pc, #76]	; (8003c40 <TrajectoryGenerator+0x298>)
 8003bf2:	6013      	str	r3, [r2, #0]
			  Trajectstate = 1;
 8003bf4:	4b01      	ldr	r3, [pc, #4]	; (8003bfc <TrajectoryGenerator+0x254>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
		  break;
 8003bfa:	e3c8      	b.n	800438e <TrajectoryGenerator+0x9e6>
 8003bfc:	20000a1c 	.word	0x20000a1c
 8003c00:	20000a5c 	.word	0x20000a5c
 8003c04:	20000a28 	.word	0x20000a28
 8003c08:	20000a2c 	.word	0x20000a2c
 8003c0c:	2000020c 	.word	0x2000020c
 8003c10:	46ad9c71 	.word	0x46ad9c71
 8003c14:	20000210 	.word	0x20000210
 8003c18:	47823556 	.word	0x47823556
 8003c1c:	20000a24 	.word	0x20000a24
 8003c20:	20000a34 	.word	0x20000a34
 8003c24:	20000a48 	.word	0x20000a48
 8003c28:	3fe00000 	.word	0x3fe00000
 8003c2c:	20000a4c 	.word	0x20000a4c
 8003c30:	20000a50 	.word	0x20000a50
 8003c34:	20000a54 	.word	0x20000a54
 8003c38:	20000a58 	.word	0x20000a58
 8003c3c:	20000a20 	.word	0x20000a20
 8003c40:	20000a30 	.word	0x20000a30

	case 1:
		  if(time <= t_half + initime)
 8003c44:	4bb6      	ldr	r3, [pc, #728]	; (8003f20 <TrajectoryGenerator+0x578>)
 8003c46:	ed93 7a00 	vldr	s14, [r3]
 8003c4a:	4bb6      	ldr	r3, [pc, #728]	; (8003f24 <TrajectoryGenerator+0x57c>)
 8003c4c:	edd3 7a00 	vldr	s15, [r3]
 8003c50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c54:	4bb4      	ldr	r3, [pc, #720]	; (8003f28 <TrajectoryGenerator+0x580>)
 8003c56:	edd3 7a00 	vldr	s15, [r3]
 8003c5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c62:	f2c0 8092 	blt.w	8003d8a <TrajectoryGenerator+0x3e2>
		  {
			  setacc = qdd_max;
 8003c66:	4bb1      	ldr	r3, [pc, #708]	; (8003f2c <TrajectoryGenerator+0x584>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4ab1      	ldr	r2, [pc, #708]	; (8003f30 <TrajectoryGenerator+0x588>)
 8003c6c:	6013      	str	r3, [r2, #0]
			  setvelocity = qdi + setacc*(time-initime);
 8003c6e:	4bae      	ldr	r3, [pc, #696]	; (8003f28 <TrajectoryGenerator+0x580>)
 8003c70:	ed93 7a00 	vldr	s14, [r3]
 8003c74:	4bab      	ldr	r3, [pc, #684]	; (8003f24 <TrajectoryGenerator+0x57c>)
 8003c76:	edd3 7a00 	vldr	s15, [r3]
 8003c7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c7e:	4bac      	ldr	r3, [pc, #688]	; (8003f30 <TrajectoryGenerator+0x588>)
 8003c80:	edd3 7a00 	vldr	s15, [r3]
 8003c84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c88:	4baa      	ldr	r3, [pc, #680]	; (8003f34 <TrajectoryGenerator+0x58c>)
 8003c8a:	edd3 7a00 	vldr	s15, [r3]
 8003c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c92:	4ba9      	ldr	r3, [pc, #676]	; (8003f38 <TrajectoryGenerator+0x590>)
 8003c94:	edc3 7a00 	vstr	s15, [r3]
			  setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 8003c98:	4ba3      	ldr	r3, [pc, #652]	; (8003f28 <TrajectoryGenerator+0x580>)
 8003c9a:	ed93 7a00 	vldr	s14, [r3]
 8003c9e:	4ba1      	ldr	r3, [pc, #644]	; (8003f24 <TrajectoryGenerator+0x57c>)
 8003ca0:	edd3 7a00 	vldr	s15, [r3]
 8003ca4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ca8:	4ba2      	ldr	r3, [pc, #648]	; (8003f34 <TrajectoryGenerator+0x58c>)
 8003caa:	edd3 7a00 	vldr	s15, [r3]
 8003cae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cb2:	4ba2      	ldr	r3, [pc, #648]	; (8003f3c <TrajectoryGenerator+0x594>)
 8003cb4:	edd3 7a00 	vldr	s15, [r3]
 8003cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cbc:	ee17 0a90 	vmov	r0, s15
 8003cc0:	f7fc fc4a 	bl	8000558 <__aeabi_f2d>
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	460d      	mov	r5, r1
 8003cc8:	4b99      	ldr	r3, [pc, #612]	; (8003f30 <TrajectoryGenerator+0x588>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fc fc43 	bl	8000558 <__aeabi_f2d>
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	4b9a      	ldr	r3, [pc, #616]	; (8003f40 <TrajectoryGenerator+0x598>)
 8003cd8:	f7fc fc96 	bl	8000608 <__aeabi_dmul>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4690      	mov	r8, r2
 8003ce2:	4699      	mov	r9, r3
 8003ce4:	4b90      	ldr	r3, [pc, #576]	; (8003f28 <TrajectoryGenerator+0x580>)
 8003ce6:	ed93 7a00 	vldr	s14, [r3]
 8003cea:	4b8e      	ldr	r3, [pc, #568]	; (8003f24 <TrajectoryGenerator+0x57c>)
 8003cec:	edd3 7a00 	vldr	s15, [r3]
 8003cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cf4:	ee17 0a90 	vmov	r0, s15
 8003cf8:	f7fc fc2e 	bl	8000558 <__aeabi_f2d>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4640      	mov	r0, r8
 8003d02:	4649      	mov	r1, r9
 8003d04:	f7fc fc80 	bl	8000608 <__aeabi_dmul>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4690      	mov	r8, r2
 8003d0e:	4699      	mov	r9, r3
 8003d10:	4b85      	ldr	r3, [pc, #532]	; (8003f28 <TrajectoryGenerator+0x580>)
 8003d12:	ed93 7a00 	vldr	s14, [r3]
 8003d16:	4b83      	ldr	r3, [pc, #524]	; (8003f24 <TrajectoryGenerator+0x57c>)
 8003d18:	edd3 7a00 	vldr	s15, [r3]
 8003d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d20:	ee17 0a90 	vmov	r0, s15
 8003d24:	f7fc fc18 	bl	8000558 <__aeabi_f2d>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4640      	mov	r0, r8
 8003d2e:	4649      	mov	r1, r9
 8003d30:	f7fc fc6a 	bl	8000608 <__aeabi_dmul>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4620      	mov	r0, r4
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	f7fc faae 	bl	800029c <__adddf3>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4610      	mov	r0, r2
 8003d46:	4619      	mov	r1, r3
 8003d48:	f7fc ff56 	bl	8000bf8 <__aeabi_d2f>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	4a7d      	ldr	r2, [pc, #500]	; (8003f44 <TrajectoryGenerator+0x59c>)
 8003d50:	6013      	str	r3, [r2, #0]

			  qi_1 = setposition;
 8003d52:	4b7c      	ldr	r3, [pc, #496]	; (8003f44 <TrajectoryGenerator+0x59c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a7c      	ldr	r2, [pc, #496]	; (8003f48 <TrajectoryGenerator+0x5a0>)
 8003d58:	6013      	str	r3, [r2, #0]
			  qdi_1 = setvelocity;
 8003d5a:	4b77      	ldr	r3, [pc, #476]	; (8003f38 <TrajectoryGenerator+0x590>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a7b      	ldr	r2, [pc, #492]	; (8003f4c <TrajectoryGenerator+0x5a4>)
 8003d60:	6013      	str	r3, [r2, #0]
			  time += 0.001;
 8003d62:	4b71      	ldr	r3, [pc, #452]	; (8003f28 <TrajectoryGenerator+0x580>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc fbf6 	bl	8000558 <__aeabi_f2d>
 8003d6c:	a36a      	add	r3, pc, #424	; (adr r3, 8003f18 <TrajectoryGenerator+0x570>)
 8003d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d72:	f7fc fa93 	bl	800029c <__adddf3>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f7fc ff3b 	bl	8000bf8 <__aeabi_d2f>
 8003d82:	4603      	mov	r3, r0
 8003d84:	4a68      	ldr	r2, [pc, #416]	; (8003f28 <TrajectoryGenerator+0x580>)
 8003d86:	6013      	str	r3, [r2, #0]
			  setacc = -qdd_max;
			  setvelocity = qdi_1 + setacc*(time-initime-t_half);
			  setposition = qi_1 + qdi_1*(time-initime-t_half)+0.5*setacc*(time-initime-t_half)*(time-initime-t_half);
			  time += 0.001;
		  }
		break;
 8003d88:	e301      	b.n	800438e <TrajectoryGenerator+0x9e6>
		  else if(t_half + initime < time && time <= (2*t_half) + initime)
 8003d8a:	4b65      	ldr	r3, [pc, #404]	; (8003f20 <TrajectoryGenerator+0x578>)
 8003d8c:	ed93 7a00 	vldr	s14, [r3]
 8003d90:	4b64      	ldr	r3, [pc, #400]	; (8003f24 <TrajectoryGenerator+0x57c>)
 8003d92:	edd3 7a00 	vldr	s15, [r3]
 8003d96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d9a:	4b63      	ldr	r3, [pc, #396]	; (8003f28 <TrajectoryGenerator+0x580>)
 8003d9c:	edd3 7a00 	vldr	s15, [r3]
 8003da0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da8:	d400      	bmi.n	8003dac <TrajectoryGenerator+0x404>
		break;
 8003daa:	e2f0      	b.n	800438e <TrajectoryGenerator+0x9e6>
		  else if(t_half + initime < time && time <= (2*t_half) + initime)
 8003dac:	4b5c      	ldr	r3, [pc, #368]	; (8003f20 <TrajectoryGenerator+0x578>)
 8003dae:	edd3 7a00 	vldr	s15, [r3]
 8003db2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003db6:	4b5b      	ldr	r3, [pc, #364]	; (8003f24 <TrajectoryGenerator+0x57c>)
 8003db8:	edd3 7a00 	vldr	s15, [r3]
 8003dbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dc0:	4b59      	ldr	r3, [pc, #356]	; (8003f28 <TrajectoryGenerator+0x580>)
 8003dc2:	edd3 7a00 	vldr	s15, [r3]
 8003dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dce:	da00      	bge.n	8003dd2 <TrajectoryGenerator+0x42a>
		break;
 8003dd0:	e2dd      	b.n	800438e <TrajectoryGenerator+0x9e6>
			  setacc = -qdd_max;
 8003dd2:	4b56      	ldr	r3, [pc, #344]	; (8003f2c <TrajectoryGenerator+0x584>)
 8003dd4:	edd3 7a00 	vldr	s15, [r3]
 8003dd8:	eef1 7a67 	vneg.f32	s15, s15
 8003ddc:	4b54      	ldr	r3, [pc, #336]	; (8003f30 <TrajectoryGenerator+0x588>)
 8003dde:	edc3 7a00 	vstr	s15, [r3]
			  setvelocity = qdi_1 + setacc*(time-initime-t_half);
 8003de2:	4b51      	ldr	r3, [pc, #324]	; (8003f28 <TrajectoryGenerator+0x580>)
 8003de4:	ed93 7a00 	vldr	s14, [r3]
 8003de8:	4b4e      	ldr	r3, [pc, #312]	; (8003f24 <TrajectoryGenerator+0x57c>)
 8003dea:	edd3 7a00 	vldr	s15, [r3]
 8003dee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003df2:	4b4b      	ldr	r3, [pc, #300]	; (8003f20 <TrajectoryGenerator+0x578>)
 8003df4:	edd3 7a00 	vldr	s15, [r3]
 8003df8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dfc:	4b4c      	ldr	r3, [pc, #304]	; (8003f30 <TrajectoryGenerator+0x588>)
 8003dfe:	edd3 7a00 	vldr	s15, [r3]
 8003e02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e06:	4b51      	ldr	r3, [pc, #324]	; (8003f4c <TrajectoryGenerator+0x5a4>)
 8003e08:	edd3 7a00 	vldr	s15, [r3]
 8003e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e10:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <TrajectoryGenerator+0x590>)
 8003e12:	edc3 7a00 	vstr	s15, [r3]
			  setposition = qi_1 + qdi_1*(time-initime-t_half)+0.5*setacc*(time-initime-t_half)*(time-initime-t_half);
 8003e16:	4b44      	ldr	r3, [pc, #272]	; (8003f28 <TrajectoryGenerator+0x580>)
 8003e18:	ed93 7a00 	vldr	s14, [r3]
 8003e1c:	4b41      	ldr	r3, [pc, #260]	; (8003f24 <TrajectoryGenerator+0x57c>)
 8003e1e:	edd3 7a00 	vldr	s15, [r3]
 8003e22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e26:	4b3e      	ldr	r3, [pc, #248]	; (8003f20 <TrajectoryGenerator+0x578>)
 8003e28:	edd3 7a00 	vldr	s15, [r3]
 8003e2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e30:	4b46      	ldr	r3, [pc, #280]	; (8003f4c <TrajectoryGenerator+0x5a4>)
 8003e32:	edd3 7a00 	vldr	s15, [r3]
 8003e36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e3a:	4b43      	ldr	r3, [pc, #268]	; (8003f48 <TrajectoryGenerator+0x5a0>)
 8003e3c:	edd3 7a00 	vldr	s15, [r3]
 8003e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e44:	ee17 0a90 	vmov	r0, s15
 8003e48:	f7fc fb86 	bl	8000558 <__aeabi_f2d>
 8003e4c:	4604      	mov	r4, r0
 8003e4e:	460d      	mov	r5, r1
 8003e50:	4b37      	ldr	r3, [pc, #220]	; (8003f30 <TrajectoryGenerator+0x588>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fc fb7f 	bl	8000558 <__aeabi_f2d>
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	4b38      	ldr	r3, [pc, #224]	; (8003f40 <TrajectoryGenerator+0x598>)
 8003e60:	f7fc fbd2 	bl	8000608 <__aeabi_dmul>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4690      	mov	r8, r2
 8003e6a:	4699      	mov	r9, r3
 8003e6c:	4b2e      	ldr	r3, [pc, #184]	; (8003f28 <TrajectoryGenerator+0x580>)
 8003e6e:	ed93 7a00 	vldr	s14, [r3]
 8003e72:	4b2c      	ldr	r3, [pc, #176]	; (8003f24 <TrajectoryGenerator+0x57c>)
 8003e74:	edd3 7a00 	vldr	s15, [r3]
 8003e78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e7c:	4b28      	ldr	r3, [pc, #160]	; (8003f20 <TrajectoryGenerator+0x578>)
 8003e7e:	edd3 7a00 	vldr	s15, [r3]
 8003e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e86:	ee17 0a90 	vmov	r0, s15
 8003e8a:	f7fc fb65 	bl	8000558 <__aeabi_f2d>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4640      	mov	r0, r8
 8003e94:	4649      	mov	r1, r9
 8003e96:	f7fc fbb7 	bl	8000608 <__aeabi_dmul>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4690      	mov	r8, r2
 8003ea0:	4699      	mov	r9, r3
 8003ea2:	4b21      	ldr	r3, [pc, #132]	; (8003f28 <TrajectoryGenerator+0x580>)
 8003ea4:	ed93 7a00 	vldr	s14, [r3]
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <TrajectoryGenerator+0x57c>)
 8003eaa:	edd3 7a00 	vldr	s15, [r3]
 8003eae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003eb2:	4b1b      	ldr	r3, [pc, #108]	; (8003f20 <TrajectoryGenerator+0x578>)
 8003eb4:	edd3 7a00 	vldr	s15, [r3]
 8003eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ebc:	ee17 0a90 	vmov	r0, s15
 8003ec0:	f7fc fb4a 	bl	8000558 <__aeabi_f2d>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4640      	mov	r0, r8
 8003eca:	4649      	mov	r1, r9
 8003ecc:	f7fc fb9c 	bl	8000608 <__aeabi_dmul>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	f7fc f9e0 	bl	800029c <__adddf3>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	f7fc fe88 	bl	8000bf8 <__aeabi_d2f>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4a16      	ldr	r2, [pc, #88]	; (8003f44 <TrajectoryGenerator+0x59c>)
 8003eec:	6013      	str	r3, [r2, #0]
			  time += 0.001;
 8003eee:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <TrajectoryGenerator+0x580>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fc fb30 	bl	8000558 <__aeabi_f2d>
 8003ef8:	a307      	add	r3, pc, #28	; (adr r3, 8003f18 <TrajectoryGenerator+0x570>)
 8003efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efe:	f7fc f9cd 	bl	800029c <__adddf3>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4610      	mov	r0, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f7fc fe75 	bl	8000bf8 <__aeabi_d2f>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4a05      	ldr	r2, [pc, #20]	; (8003f28 <TrajectoryGenerator+0x580>)
 8003f12:	6013      	str	r3, [r2, #0]
		break;
 8003f14:	e23b      	b.n	800438e <TrajectoryGenerator+0x9e6>
 8003f16:	bf00      	nop
 8003f18:	d2f1a9fc 	.word	0xd2f1a9fc
 8003f1c:	3f50624d 	.word	0x3f50624d
 8003f20:	20000a34 	.word	0x20000a34
 8003f24:	20000a30 	.word	0x20000a30
 8003f28:	20000a20 	.word	0x20000a20
 8003f2c:	20000210 	.word	0x20000210
 8003f30:	20000a8c 	.word	0x20000a8c
 8003f34:	20000a2c 	.word	0x20000a2c
 8003f38:	20000a88 	.word	0x20000a88
 8003f3c:	20000a28 	.word	0x20000a28
 8003f40:	3fe00000 	.word	0x3fe00000
 8003f44:	20000a68 	.word	0x20000a68
 8003f48:	20000a40 	.word	0x20000a40
 8003f4c:	20000a38 	.word	0x20000a38

	case 2:
		 if(time <= tacc + initime)
 8003f50:	4b9d      	ldr	r3, [pc, #628]	; (80041c8 <TrajectoryGenerator+0x820>)
 8003f52:	ed93 7a00 	vldr	s14, [r3]
 8003f56:	4b9d      	ldr	r3, [pc, #628]	; (80041cc <TrajectoryGenerator+0x824>)
 8003f58:	edd3 7a00 	vldr	s15, [r3]
 8003f5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f60:	4b9b      	ldr	r3, [pc, #620]	; (80041d0 <TrajectoryGenerator+0x828>)
 8003f62:	edd3 7a00 	vldr	s15, [r3]
 8003f66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6e:	f2c0 8092 	blt.w	8004096 <TrajectoryGenerator+0x6ee>
		 {
			 setacc = qdd_max;
 8003f72:	4b98      	ldr	r3, [pc, #608]	; (80041d4 <TrajectoryGenerator+0x82c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a98      	ldr	r2, [pc, #608]	; (80041d8 <TrajectoryGenerator+0x830>)
 8003f78:	6013      	str	r3, [r2, #0]
			 setvelocity = qdi + setacc*(time-initime);
 8003f7a:	4b95      	ldr	r3, [pc, #596]	; (80041d0 <TrajectoryGenerator+0x828>)
 8003f7c:	ed93 7a00 	vldr	s14, [r3]
 8003f80:	4b92      	ldr	r3, [pc, #584]	; (80041cc <TrajectoryGenerator+0x824>)
 8003f82:	edd3 7a00 	vldr	s15, [r3]
 8003f86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f8a:	4b93      	ldr	r3, [pc, #588]	; (80041d8 <TrajectoryGenerator+0x830>)
 8003f8c:	edd3 7a00 	vldr	s15, [r3]
 8003f90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f94:	4b91      	ldr	r3, [pc, #580]	; (80041dc <TrajectoryGenerator+0x834>)
 8003f96:	edd3 7a00 	vldr	s15, [r3]
 8003f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f9e:	4b90      	ldr	r3, [pc, #576]	; (80041e0 <TrajectoryGenerator+0x838>)
 8003fa0:	edc3 7a00 	vstr	s15, [r3]
			 setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 8003fa4:	4b8a      	ldr	r3, [pc, #552]	; (80041d0 <TrajectoryGenerator+0x828>)
 8003fa6:	ed93 7a00 	vldr	s14, [r3]
 8003faa:	4b88      	ldr	r3, [pc, #544]	; (80041cc <TrajectoryGenerator+0x824>)
 8003fac:	edd3 7a00 	vldr	s15, [r3]
 8003fb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fb4:	4b89      	ldr	r3, [pc, #548]	; (80041dc <TrajectoryGenerator+0x834>)
 8003fb6:	edd3 7a00 	vldr	s15, [r3]
 8003fba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fbe:	4b89      	ldr	r3, [pc, #548]	; (80041e4 <TrajectoryGenerator+0x83c>)
 8003fc0:	edd3 7a00 	vldr	s15, [r3]
 8003fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fc8:	ee17 0a90 	vmov	r0, s15
 8003fcc:	f7fc fac4 	bl	8000558 <__aeabi_f2d>
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	460d      	mov	r5, r1
 8003fd4:	4b80      	ldr	r3, [pc, #512]	; (80041d8 <TrajectoryGenerator+0x830>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fc fabd 	bl	8000558 <__aeabi_f2d>
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	4b81      	ldr	r3, [pc, #516]	; (80041e8 <TrajectoryGenerator+0x840>)
 8003fe4:	f7fc fb10 	bl	8000608 <__aeabi_dmul>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4690      	mov	r8, r2
 8003fee:	4699      	mov	r9, r3
 8003ff0:	4b77      	ldr	r3, [pc, #476]	; (80041d0 <TrajectoryGenerator+0x828>)
 8003ff2:	ed93 7a00 	vldr	s14, [r3]
 8003ff6:	4b75      	ldr	r3, [pc, #468]	; (80041cc <TrajectoryGenerator+0x824>)
 8003ff8:	edd3 7a00 	vldr	s15, [r3]
 8003ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004000:	ee17 0a90 	vmov	r0, s15
 8004004:	f7fc faa8 	bl	8000558 <__aeabi_f2d>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4640      	mov	r0, r8
 800400e:	4649      	mov	r1, r9
 8004010:	f7fc fafa 	bl	8000608 <__aeabi_dmul>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4690      	mov	r8, r2
 800401a:	4699      	mov	r9, r3
 800401c:	4b6c      	ldr	r3, [pc, #432]	; (80041d0 <TrajectoryGenerator+0x828>)
 800401e:	ed93 7a00 	vldr	s14, [r3]
 8004022:	4b6a      	ldr	r3, [pc, #424]	; (80041cc <TrajectoryGenerator+0x824>)
 8004024:	edd3 7a00 	vldr	s15, [r3]
 8004028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800402c:	ee17 0a90 	vmov	r0, s15
 8004030:	f7fc fa92 	bl	8000558 <__aeabi_f2d>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4640      	mov	r0, r8
 800403a:	4649      	mov	r1, r9
 800403c:	f7fc fae4 	bl	8000608 <__aeabi_dmul>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4620      	mov	r0, r4
 8004046:	4629      	mov	r1, r5
 8004048:	f7fc f928 	bl	800029c <__adddf3>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4610      	mov	r0, r2
 8004052:	4619      	mov	r1, r3
 8004054:	f7fc fdd0 	bl	8000bf8 <__aeabi_d2f>
 8004058:	4603      	mov	r3, r0
 800405a:	4a64      	ldr	r2, [pc, #400]	; (80041ec <TrajectoryGenerator+0x844>)
 800405c:	6013      	str	r3, [r2, #0]

			 qi_1 = setposition;
 800405e:	4b63      	ldr	r3, [pc, #396]	; (80041ec <TrajectoryGenerator+0x844>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a63      	ldr	r2, [pc, #396]	; (80041f0 <TrajectoryGenerator+0x848>)
 8004064:	6013      	str	r3, [r2, #0]
			 qdi_1 = setvelocity;
 8004066:	4b5e      	ldr	r3, [pc, #376]	; (80041e0 <TrajectoryGenerator+0x838>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a62      	ldr	r2, [pc, #392]	; (80041f4 <TrajectoryGenerator+0x84c>)
 800406c:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 800406e:	4b58      	ldr	r3, [pc, #352]	; (80041d0 <TrajectoryGenerator+0x828>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fc fa70 	bl	8000558 <__aeabi_f2d>
 8004078:	a351      	add	r3, pc, #324	; (adr r3, 80041c0 <TrajectoryGenerator+0x818>)
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	f7fc f90d 	bl	800029c <__adddf3>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4610      	mov	r0, r2
 8004088:	4619      	mov	r1, r3
 800408a:	f7fc fdb5 	bl	8000bf8 <__aeabi_d2f>
 800408e:	4603      	mov	r3, r0
 8004090:	4a4f      	ldr	r2, [pc, #316]	; (80041d0 <TrajectoryGenerator+0x828>)
 8004092:	6013      	str	r3, [r2, #0]
			 setacc = -qdd_max;
			 setvelocity = qdi_2 + setacc*(time-initime-tacc-tconst);
			 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
			 time += 0.001;
		 }
		 break;
 8004094:	e17b      	b.n	800438e <TrajectoryGenerator+0x9e6>
		 else if(tacc+initime < time && time <= initime+tacc+tconst)
 8004096:	4b4c      	ldr	r3, [pc, #304]	; (80041c8 <TrajectoryGenerator+0x820>)
 8004098:	ed93 7a00 	vldr	s14, [r3]
 800409c:	4b4b      	ldr	r3, [pc, #300]	; (80041cc <TrajectoryGenerator+0x824>)
 800409e:	edd3 7a00 	vldr	s15, [r3]
 80040a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040a6:	4b4a      	ldr	r3, [pc, #296]	; (80041d0 <TrajectoryGenerator+0x828>)
 80040a8:	edd3 7a00 	vldr	s15, [r3]
 80040ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b4:	d552      	bpl.n	800415c <TrajectoryGenerator+0x7b4>
 80040b6:	4b45      	ldr	r3, [pc, #276]	; (80041cc <TrajectoryGenerator+0x824>)
 80040b8:	ed93 7a00 	vldr	s14, [r3]
 80040bc:	4b42      	ldr	r3, [pc, #264]	; (80041c8 <TrajectoryGenerator+0x820>)
 80040be:	edd3 7a00 	vldr	s15, [r3]
 80040c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040c6:	4b4c      	ldr	r3, [pc, #304]	; (80041f8 <TrajectoryGenerator+0x850>)
 80040c8:	edd3 7a00 	vldr	s15, [r3]
 80040cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040d0:	4b3f      	ldr	r3, [pc, #252]	; (80041d0 <TrajectoryGenerator+0x828>)
 80040d2:	edd3 7a00 	vldr	s15, [r3]
 80040d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040de:	db3d      	blt.n	800415c <TrajectoryGenerator+0x7b4>
			 setacc = 0;
 80040e0:	4b3d      	ldr	r3, [pc, #244]	; (80041d8 <TrajectoryGenerator+0x830>)
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
			 setvelocity = qd_max;
 80040e8:	4b44      	ldr	r3, [pc, #272]	; (80041fc <TrajectoryGenerator+0x854>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a3c      	ldr	r2, [pc, #240]	; (80041e0 <TrajectoryGenerator+0x838>)
 80040ee:	6013      	str	r3, [r2, #0]
			 setposition = qi_1 + qd_max*(time-initime-tacc);
 80040f0:	4b37      	ldr	r3, [pc, #220]	; (80041d0 <TrajectoryGenerator+0x828>)
 80040f2:	ed93 7a00 	vldr	s14, [r3]
 80040f6:	4b35      	ldr	r3, [pc, #212]	; (80041cc <TrajectoryGenerator+0x824>)
 80040f8:	edd3 7a00 	vldr	s15, [r3]
 80040fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004100:	4b31      	ldr	r3, [pc, #196]	; (80041c8 <TrajectoryGenerator+0x820>)
 8004102:	edd3 7a00 	vldr	s15, [r3]
 8004106:	ee37 7a67 	vsub.f32	s14, s14, s15
 800410a:	4b3c      	ldr	r3, [pc, #240]	; (80041fc <TrajectoryGenerator+0x854>)
 800410c:	edd3 7a00 	vldr	s15, [r3]
 8004110:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004114:	4b36      	ldr	r3, [pc, #216]	; (80041f0 <TrajectoryGenerator+0x848>)
 8004116:	edd3 7a00 	vldr	s15, [r3]
 800411a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800411e:	4b33      	ldr	r3, [pc, #204]	; (80041ec <TrajectoryGenerator+0x844>)
 8004120:	edc3 7a00 	vstr	s15, [r3]
			 qi_2 = setposition;
 8004124:	4b31      	ldr	r3, [pc, #196]	; (80041ec <TrajectoryGenerator+0x844>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a35      	ldr	r2, [pc, #212]	; (8004200 <TrajectoryGenerator+0x858>)
 800412a:	6013      	str	r3, [r2, #0]
			 qdi_2 = setvelocity;
 800412c:	4b2c      	ldr	r3, [pc, #176]	; (80041e0 <TrajectoryGenerator+0x838>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a34      	ldr	r2, [pc, #208]	; (8004204 <TrajectoryGenerator+0x85c>)
 8004132:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 8004134:	4b26      	ldr	r3, [pc, #152]	; (80041d0 <TrajectoryGenerator+0x828>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f7fc fa0d 	bl	8000558 <__aeabi_f2d>
 800413e:	a320      	add	r3, pc, #128	; (adr r3, 80041c0 <TrajectoryGenerator+0x818>)
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	f7fc f8aa 	bl	800029c <__adddf3>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	4610      	mov	r0, r2
 800414e:	4619      	mov	r1, r3
 8004150:	f7fc fd52 	bl	8000bf8 <__aeabi_d2f>
 8004154:	4603      	mov	r3, r0
 8004156:	4a1e      	ldr	r2, [pc, #120]	; (80041d0 <TrajectoryGenerator+0x828>)
 8004158:	6013      	str	r3, [r2, #0]
		 break;
 800415a:	e118      	b.n	800438e <TrajectoryGenerator+0x9e6>
		 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 800415c:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <TrajectoryGenerator+0x820>)
 800415e:	ed93 7a00 	vldr	s14, [r3]
 8004162:	4b25      	ldr	r3, [pc, #148]	; (80041f8 <TrajectoryGenerator+0x850>)
 8004164:	edd3 7a00 	vldr	s15, [r3]
 8004168:	ee37 7a27 	vadd.f32	s14, s14, s15
 800416c:	4b17      	ldr	r3, [pc, #92]	; (80041cc <TrajectoryGenerator+0x824>)
 800416e:	edd3 7a00 	vldr	s15, [r3]
 8004172:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004176:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <TrajectoryGenerator+0x828>)
 8004178:	edd3 7a00 	vldr	s15, [r3]
 800417c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004184:	d400      	bmi.n	8004188 <TrajectoryGenerator+0x7e0>
		 break;
 8004186:	e102      	b.n	800438e <TrajectoryGenerator+0x9e6>
		 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8004188:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <TrajectoryGenerator+0x820>)
 800418a:	ed93 7a00 	vldr	s14, [r3]
 800418e:	4b1a      	ldr	r3, [pc, #104]	; (80041f8 <TrajectoryGenerator+0x850>)
 8004190:	edd3 7a00 	vldr	s15, [r3]
 8004194:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004198:	4b1b      	ldr	r3, [pc, #108]	; (8004208 <TrajectoryGenerator+0x860>)
 800419a:	edd3 7a00 	vldr	s15, [r3]
 800419e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041a2:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <TrajectoryGenerator+0x824>)
 80041a4:	edd3 7a00 	vldr	s15, [r3]
 80041a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041ac:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <TrajectoryGenerator+0x828>)
 80041ae:	edd3 7a00 	vldr	s15, [r3]
 80041b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ba:	da27      	bge.n	800420c <TrajectoryGenerator+0x864>
		 break;
 80041bc:	e0e7      	b.n	800438e <TrajectoryGenerator+0x9e6>
 80041be:	bf00      	nop
 80041c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80041c4:	3f50624d 	.word	0x3f50624d
 80041c8:	20000a48 	.word	0x20000a48
 80041cc:	20000a30 	.word	0x20000a30
 80041d0:	20000a20 	.word	0x20000a20
 80041d4:	20000210 	.word	0x20000210
 80041d8:	20000a8c 	.word	0x20000a8c
 80041dc:	20000a2c 	.word	0x20000a2c
 80041e0:	20000a88 	.word	0x20000a88
 80041e4:	20000a28 	.word	0x20000a28
 80041e8:	3fe00000 	.word	0x3fe00000
 80041ec:	20000a68 	.word	0x20000a68
 80041f0:	20000a40 	.word	0x20000a40
 80041f4:	20000a38 	.word	0x20000a38
 80041f8:	20000a54 	.word	0x20000a54
 80041fc:	2000020c 	.word	0x2000020c
 8004200:	20000a44 	.word	0x20000a44
 8004204:	20000a3c 	.word	0x20000a3c
 8004208:	20000a58 	.word	0x20000a58
			 setacc = -qdd_max;
 800420c:	4b64      	ldr	r3, [pc, #400]	; (80043a0 <TrajectoryGenerator+0x9f8>)
 800420e:	edd3 7a00 	vldr	s15, [r3]
 8004212:	eef1 7a67 	vneg.f32	s15, s15
 8004216:	4b63      	ldr	r3, [pc, #396]	; (80043a4 <TrajectoryGenerator+0x9fc>)
 8004218:	edc3 7a00 	vstr	s15, [r3]
			 setvelocity = qdi_2 + setacc*(time-initime-tacc-tconst);
 800421c:	4b62      	ldr	r3, [pc, #392]	; (80043a8 <TrajectoryGenerator+0xa00>)
 800421e:	ed93 7a00 	vldr	s14, [r3]
 8004222:	4b62      	ldr	r3, [pc, #392]	; (80043ac <TrajectoryGenerator+0xa04>)
 8004224:	edd3 7a00 	vldr	s15, [r3]
 8004228:	ee37 7a67 	vsub.f32	s14, s14, s15
 800422c:	4b60      	ldr	r3, [pc, #384]	; (80043b0 <TrajectoryGenerator+0xa08>)
 800422e:	edd3 7a00 	vldr	s15, [r3]
 8004232:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004236:	4b5f      	ldr	r3, [pc, #380]	; (80043b4 <TrajectoryGenerator+0xa0c>)
 8004238:	edd3 7a00 	vldr	s15, [r3]
 800423c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004240:	4b58      	ldr	r3, [pc, #352]	; (80043a4 <TrajectoryGenerator+0x9fc>)
 8004242:	edd3 7a00 	vldr	s15, [r3]
 8004246:	ee27 7a27 	vmul.f32	s14, s14, s15
 800424a:	4b5b      	ldr	r3, [pc, #364]	; (80043b8 <TrajectoryGenerator+0xa10>)
 800424c:	edd3 7a00 	vldr	s15, [r3]
 8004250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004254:	4b59      	ldr	r3, [pc, #356]	; (80043bc <TrajectoryGenerator+0xa14>)
 8004256:	edc3 7a00 	vstr	s15, [r3]
			 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
 800425a:	4b53      	ldr	r3, [pc, #332]	; (80043a8 <TrajectoryGenerator+0xa00>)
 800425c:	ed93 7a00 	vldr	s14, [r3]
 8004260:	4b52      	ldr	r3, [pc, #328]	; (80043ac <TrajectoryGenerator+0xa04>)
 8004262:	edd3 7a00 	vldr	s15, [r3]
 8004266:	ee37 7a67 	vsub.f32	s14, s14, s15
 800426a:	4b51      	ldr	r3, [pc, #324]	; (80043b0 <TrajectoryGenerator+0xa08>)
 800426c:	edd3 7a00 	vldr	s15, [r3]
 8004270:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004274:	4b4f      	ldr	r3, [pc, #316]	; (80043b4 <TrajectoryGenerator+0xa0c>)
 8004276:	edd3 7a00 	vldr	s15, [r3]
 800427a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800427e:	4b4e      	ldr	r3, [pc, #312]	; (80043b8 <TrajectoryGenerator+0xa10>)
 8004280:	edd3 7a00 	vldr	s15, [r3]
 8004284:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004288:	4b4d      	ldr	r3, [pc, #308]	; (80043c0 <TrajectoryGenerator+0xa18>)
 800428a:	edd3 7a00 	vldr	s15, [r3]
 800428e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004292:	ee17 0a90 	vmov	r0, s15
 8004296:	f7fc f95f 	bl	8000558 <__aeabi_f2d>
 800429a:	4604      	mov	r4, r0
 800429c:	460d      	mov	r5, r1
 800429e:	4b41      	ldr	r3, [pc, #260]	; (80043a4 <TrajectoryGenerator+0x9fc>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fc f958 	bl	8000558 <__aeabi_f2d>
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	4b45      	ldr	r3, [pc, #276]	; (80043c4 <TrajectoryGenerator+0xa1c>)
 80042ae:	f7fc f9ab 	bl	8000608 <__aeabi_dmul>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4690      	mov	r8, r2
 80042b8:	4699      	mov	r9, r3
 80042ba:	4b3b      	ldr	r3, [pc, #236]	; (80043a8 <TrajectoryGenerator+0xa00>)
 80042bc:	ed93 7a00 	vldr	s14, [r3]
 80042c0:	4b3a      	ldr	r3, [pc, #232]	; (80043ac <TrajectoryGenerator+0xa04>)
 80042c2:	edd3 7a00 	vldr	s15, [r3]
 80042c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042ca:	4b39      	ldr	r3, [pc, #228]	; (80043b0 <TrajectoryGenerator+0xa08>)
 80042cc:	edd3 7a00 	vldr	s15, [r3]
 80042d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042d4:	4b37      	ldr	r3, [pc, #220]	; (80043b4 <TrajectoryGenerator+0xa0c>)
 80042d6:	edd3 7a00 	vldr	s15, [r3]
 80042da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042de:	ee17 0a90 	vmov	r0, s15
 80042e2:	f7fc f939 	bl	8000558 <__aeabi_f2d>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4640      	mov	r0, r8
 80042ec:	4649      	mov	r1, r9
 80042ee:	f7fc f98b 	bl	8000608 <__aeabi_dmul>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4690      	mov	r8, r2
 80042f8:	4699      	mov	r9, r3
 80042fa:	4b2b      	ldr	r3, [pc, #172]	; (80043a8 <TrajectoryGenerator+0xa00>)
 80042fc:	ed93 7a00 	vldr	s14, [r3]
 8004300:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <TrajectoryGenerator+0xa04>)
 8004302:	edd3 7a00 	vldr	s15, [r3]
 8004306:	ee37 7a67 	vsub.f32	s14, s14, s15
 800430a:	4b29      	ldr	r3, [pc, #164]	; (80043b0 <TrajectoryGenerator+0xa08>)
 800430c:	edd3 7a00 	vldr	s15, [r3]
 8004310:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004314:	4b27      	ldr	r3, [pc, #156]	; (80043b4 <TrajectoryGenerator+0xa0c>)
 8004316:	edd3 7a00 	vldr	s15, [r3]
 800431a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800431e:	ee17 0a90 	vmov	r0, s15
 8004322:	f7fc f919 	bl	8000558 <__aeabi_f2d>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4640      	mov	r0, r8
 800432c:	4649      	mov	r1, r9
 800432e:	f7fc f96b 	bl	8000608 <__aeabi_dmul>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4620      	mov	r0, r4
 8004338:	4629      	mov	r1, r5
 800433a:	f7fb ffaf 	bl	800029c <__adddf3>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4610      	mov	r0, r2
 8004344:	4619      	mov	r1, r3
 8004346:	f7fc fc57 	bl	8000bf8 <__aeabi_d2f>
 800434a:	4603      	mov	r3, r0
 800434c:	4a1e      	ldr	r2, [pc, #120]	; (80043c8 <TrajectoryGenerator+0xa20>)
 800434e:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 8004350:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <TrajectoryGenerator+0xa00>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f7fc f8ff 	bl	8000558 <__aeabi_f2d>
 800435a:	a30f      	add	r3, pc, #60	; (adr r3, 8004398 <TrajectoryGenerator+0x9f0>)
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f7fb ff9c 	bl	800029c <__adddf3>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	f7fc fc44 	bl	8000bf8 <__aeabi_d2f>
 8004370:	4603      	mov	r3, r0
 8004372:	4a0d      	ldr	r2, [pc, #52]	; (80043a8 <TrajectoryGenerator+0xa00>)
 8004374:	6013      	str	r3, [r2, #0]
		 break;
 8004376:	e00a      	b.n	800438e <TrajectoryGenerator+0x9e6>
	case 3: // wait state
		setposition = position;
 8004378:	4b14      	ldr	r3, [pc, #80]	; (80043cc <TrajectoryGenerator+0xa24>)
 800437a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004386:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <TrajectoryGenerator+0xa20>)
 8004388:	edc3 7a00 	vstr	s15, [r3]
		break;
 800438c:	bf00      	nop
	}
}
 800438e:	bf00      	nop
 8004390:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004394:	f3af 8000 	nop.w
 8004398:	d2f1a9fc 	.word	0xd2f1a9fc
 800439c:	3f50624d 	.word	0x3f50624d
 80043a0:	20000210 	.word	0x20000210
 80043a4:	20000a8c 	.word	0x20000a8c
 80043a8:	20000a20 	.word	0x20000a20
 80043ac:	20000a30 	.word	0x20000a30
 80043b0:	20000a48 	.word	0x20000a48
 80043b4:	20000a54 	.word	0x20000a54
 80043b8:	20000a3c 	.word	0x20000a3c
 80043bc:	20000a88 	.word	0x20000a88
 80043c0:	20000a44 	.word	0x20000a44
 80043c4:	3fe00000 	.word	0x3fe00000
 80043c8:	20000a68 	.word	0x20000a68
 80043cc:	20000a5c 	.word	0x20000a5c

080043d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043d4:	b672      	cpsid	i
}
 80043d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043d8:	e7fe      	b.n	80043d8 <Error_Handler+0x8>
	...

080043dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	607b      	str	r3, [r7, #4]
 80043e6:	4b10      	ldr	r3, [pc, #64]	; (8004428 <HAL_MspInit+0x4c>)
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	4a0f      	ldr	r2, [pc, #60]	; (8004428 <HAL_MspInit+0x4c>)
 80043ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043f0:	6453      	str	r3, [r2, #68]	; 0x44
 80043f2:	4b0d      	ldr	r3, [pc, #52]	; (8004428 <HAL_MspInit+0x4c>)
 80043f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043fa:	607b      	str	r3, [r7, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043fe:	2300      	movs	r3, #0
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <HAL_MspInit+0x4c>)
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	4a08      	ldr	r2, [pc, #32]	; (8004428 <HAL_MspInit+0x4c>)
 8004408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440c:	6413      	str	r3, [r2, #64]	; 0x40
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <HAL_MspInit+0x4c>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800441a:	2007      	movs	r0, #7
 800441c:	f001 f9ce 	bl	80057bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40023800 	.word	0x40023800

0800442c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004434:	f107 0314 	add.w	r3, r7, #20
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a2f      	ldr	r2, [pc, #188]	; (8004508 <HAL_ADC_MspInit+0xdc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d157      	bne.n	80044fe <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	4b2e      	ldr	r3, [pc, #184]	; (800450c <HAL_ADC_MspInit+0xe0>)
 8004454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004456:	4a2d      	ldr	r2, [pc, #180]	; (800450c <HAL_ADC_MspInit+0xe0>)
 8004458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800445c:	6453      	str	r3, [r2, #68]	; 0x44
 800445e:	4b2b      	ldr	r3, [pc, #172]	; (800450c <HAL_ADC_MspInit+0xe0>)
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	4b27      	ldr	r3, [pc, #156]	; (800450c <HAL_ADC_MspInit+0xe0>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	4a26      	ldr	r2, [pc, #152]	; (800450c <HAL_ADC_MspInit+0xe0>)
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	6313      	str	r3, [r2, #48]	; 0x30
 800447a:	4b24      	ldr	r3, [pc, #144]	; (800450c <HAL_ADC_MspInit+0xe0>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004486:	2303      	movs	r3, #3
 8004488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800448a:	2303      	movs	r3, #3
 800448c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004492:	f107 0314 	add.w	r3, r7, #20
 8004496:	4619      	mov	r1, r3
 8004498:	481d      	ldr	r0, [pc, #116]	; (8004510 <HAL_ADC_MspInit+0xe4>)
 800449a:	f001 fded 	bl	8006078 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800449e:	4b1d      	ldr	r3, [pc, #116]	; (8004514 <HAL_ADC_MspInit+0xe8>)
 80044a0:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <HAL_ADC_MspInit+0xec>)
 80044a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80044a4:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <HAL_ADC_MspInit+0xe8>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044aa:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <HAL_ADC_MspInit+0xe8>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80044b0:	4b18      	ldr	r3, [pc, #96]	; (8004514 <HAL_ADC_MspInit+0xe8>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80044b6:	4b17      	ldr	r3, [pc, #92]	; (8004514 <HAL_ADC_MspInit+0xe8>)
 80044b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80044be:	4b15      	ldr	r3, [pc, #84]	; (8004514 <HAL_ADC_MspInit+0xe8>)
 80044c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80044c6:	4b13      	ldr	r3, [pc, #76]	; (8004514 <HAL_ADC_MspInit+0xe8>)
 80044c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80044ce:	4b11      	ldr	r3, [pc, #68]	; (8004514 <HAL_ADC_MspInit+0xe8>)
 80044d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80044d6:	4b0f      	ldr	r3, [pc, #60]	; (8004514 <HAL_ADC_MspInit+0xe8>)
 80044d8:	2200      	movs	r2, #0
 80044da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044dc:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <HAL_ADC_MspInit+0xe8>)
 80044de:	2200      	movs	r2, #0
 80044e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80044e2:	480c      	ldr	r0, [pc, #48]	; (8004514 <HAL_ADC_MspInit+0xe8>)
 80044e4:	f001 f9ac 	bl	8005840 <HAL_DMA_Init>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80044ee:	f7ff ff6f 	bl	80043d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a07      	ldr	r2, [pc, #28]	; (8004514 <HAL_ADC_MspInit+0xe8>)
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38
 80044f8:	4a06      	ldr	r2, [pc, #24]	; (8004514 <HAL_ADC_MspInit+0xe8>)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80044fe:	bf00      	nop
 8004500:	3728      	adds	r7, #40	; 0x28
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40012000 	.word	0x40012000
 800450c:	40023800 	.word	0x40023800
 8004510:	40020000 	.word	0x40020000
 8004514:	20000490 	.word	0x20000490
 8004518:	40026410 	.word	0x40026410

0800451c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	; 0x28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004524:	f107 0314 	add.w	r3, r7, #20
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a21      	ldr	r2, [pc, #132]	; (80045c0 <HAL_I2C_MspInit+0xa4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d13c      	bne.n	80045b8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800453e:	2300      	movs	r3, #0
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	4b20      	ldr	r3, [pc, #128]	; (80045c4 <HAL_I2C_MspInit+0xa8>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	4a1f      	ldr	r2, [pc, #124]	; (80045c4 <HAL_I2C_MspInit+0xa8>)
 8004548:	f043 0302 	orr.w	r3, r3, #2
 800454c:	6313      	str	r3, [r2, #48]	; 0x30
 800454e:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <HAL_I2C_MspInit+0xa8>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800455a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800455e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004560:	2312      	movs	r3, #18
 8004562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004564:	2300      	movs	r3, #0
 8004566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004568:	2303      	movs	r3, #3
 800456a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800456c:	2304      	movs	r3, #4
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004570:	f107 0314 	add.w	r3, r7, #20
 8004574:	4619      	mov	r1, r3
 8004576:	4814      	ldr	r0, [pc, #80]	; (80045c8 <HAL_I2C_MspInit+0xac>)
 8004578:	f001 fd7e 	bl	8006078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <HAL_I2C_MspInit+0xa8>)
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	4a0f      	ldr	r2, [pc, #60]	; (80045c4 <HAL_I2C_MspInit+0xa8>)
 8004586:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800458a:	6413      	str	r3, [r2, #64]	; 0x40
 800458c:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <HAL_I2C_MspInit+0xa8>)
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004598:	2200      	movs	r2, #0
 800459a:	2100      	movs	r1, #0
 800459c:	201f      	movs	r0, #31
 800459e:	f001 f918 	bl	80057d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80045a2:	201f      	movs	r0, #31
 80045a4:	f001 f931 	bl	800580a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80045a8:	2200      	movs	r2, #0
 80045aa:	2100      	movs	r1, #0
 80045ac:	2020      	movs	r0, #32
 80045ae:	f001 f910 	bl	80057d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80045b2:	2020      	movs	r0, #32
 80045b4:	f001 f929 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80045b8:	bf00      	nop
 80045ba:	3728      	adds	r7, #40	; 0x28
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40005400 	.word	0x40005400
 80045c4:	40023800 	.word	0x40023800
 80045c8:	40020400 	.word	0x40020400

080045cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a12      	ldr	r2, [pc, #72]	; (8004624 <HAL_TIM_PWM_MspInit+0x58>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d11d      	bne.n	800461a <HAL_TIM_PWM_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	4b11      	ldr	r3, [pc, #68]	; (8004628 <HAL_TIM_PWM_MspInit+0x5c>)
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	4a10      	ldr	r2, [pc, #64]	; (8004628 <HAL_TIM_PWM_MspInit+0x5c>)
 80045e8:	f043 0301 	orr.w	r3, r3, #1
 80045ec:	6453      	str	r3, [r2, #68]	; 0x44
 80045ee:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <HAL_TIM_PWM_MspInit+0x5c>)
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80045fa:	2200      	movs	r2, #0
 80045fc:	2100      	movs	r1, #0
 80045fe:	2018      	movs	r0, #24
 8004600:	f001 f8e7 	bl	80057d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004604:	2018      	movs	r0, #24
 8004606:	f001 f900 	bl	800580a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800460a:	2200      	movs	r2, #0
 800460c:	2100      	movs	r1, #0
 800460e:	201a      	movs	r0, #26
 8004610:	f001 f8df 	bl	80057d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004614:	201a      	movs	r0, #26
 8004616:	f001 f8f8 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800461a:	bf00      	nop
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40010000 	.word	0x40010000
 8004628:	40023800 	.word	0x40023800

0800462c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	; 0x28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004634:	f107 0314 	add.w	r3, r7, #20
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	605a      	str	r2, [r3, #4]
 800463e:	609a      	str	r2, [r3, #8]
 8004640:	60da      	str	r2, [r3, #12]
 8004642:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a19      	ldr	r2, [pc, #100]	; (80046b0 <HAL_TIM_Encoder_MspInit+0x84>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d12b      	bne.n	80046a6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	613b      	str	r3, [r7, #16]
 8004652:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	4a17      	ldr	r2, [pc, #92]	; (80046b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004658:	f043 0302 	orr.w	r3, r3, #2
 800465c:	6413      	str	r3, [r2, #64]	; 0x40
 800465e:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	4a10      	ldr	r2, [pc, #64]	; (80046b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	6313      	str	r3, [r2, #48]	; 0x30
 800467a:	4b0e      	ldr	r3, [pc, #56]	; (80046b4 <HAL_TIM_Encoder_MspInit+0x88>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004686:	23c0      	movs	r3, #192	; 0xc0
 8004688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800468a:	2302      	movs	r3, #2
 800468c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468e:	2300      	movs	r3, #0
 8004690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004692:	2300      	movs	r3, #0
 8004694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004696:	2302      	movs	r3, #2
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800469a:	f107 0314 	add.w	r3, r7, #20
 800469e:	4619      	mov	r1, r3
 80046a0:	4805      	ldr	r0, [pc, #20]	; (80046b8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80046a2:	f001 fce9 	bl	8006078 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80046a6:	bf00      	nop
 80046a8:	3728      	adds	r7, #40	; 0x28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40000400 	.word	0x40000400
 80046b4:	40023800 	.word	0x40023800
 80046b8:	40020000 	.word	0x40020000

080046bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a2a      	ldr	r2, [pc, #168]	; (8004774 <HAL_TIM_Base_MspInit+0xb8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d116      	bne.n	80046fc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	4b29      	ldr	r3, [pc, #164]	; (8004778 <HAL_TIM_Base_MspInit+0xbc>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	4a28      	ldr	r2, [pc, #160]	; (8004778 <HAL_TIM_Base_MspInit+0xbc>)
 80046d8:	f043 0304 	orr.w	r3, r3, #4
 80046dc:	6413      	str	r3, [r2, #64]	; 0x40
 80046de:	4b26      	ldr	r3, [pc, #152]	; (8004778 <HAL_TIM_Base_MspInit+0xbc>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80046ea:	2200      	movs	r2, #0
 80046ec:	2100      	movs	r1, #0
 80046ee:	201e      	movs	r0, #30
 80046f0:	f001 f86f 	bl	80057d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80046f4:	201e      	movs	r0, #30
 80046f6:	f001 f888 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80046fa:	e036      	b.n	800476a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM9)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1e      	ldr	r2, [pc, #120]	; (800477c <HAL_TIM_Base_MspInit+0xc0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d116      	bne.n	8004734 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004706:	2300      	movs	r3, #0
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <HAL_TIM_Base_MspInit+0xbc>)
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	4a1a      	ldr	r2, [pc, #104]	; (8004778 <HAL_TIM_Base_MspInit+0xbc>)
 8004710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004714:	6453      	str	r3, [r2, #68]	; 0x44
 8004716:	4b18      	ldr	r3, [pc, #96]	; (8004778 <HAL_TIM_Base_MspInit+0xbc>)
 8004718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004722:	2200      	movs	r2, #0
 8004724:	2100      	movs	r1, #0
 8004726:	2018      	movs	r0, #24
 8004728:	f001 f853 	bl	80057d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800472c:	2018      	movs	r0, #24
 800472e:	f001 f86c 	bl	800580a <HAL_NVIC_EnableIRQ>
}
 8004732:	e01a      	b.n	800476a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a11      	ldr	r2, [pc, #68]	; (8004780 <HAL_TIM_Base_MspInit+0xc4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d115      	bne.n	800476a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <HAL_TIM_Base_MspInit+0xbc>)
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	4a0c      	ldr	r2, [pc, #48]	; (8004778 <HAL_TIM_Base_MspInit+0xbc>)
 8004748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800474c:	6453      	str	r3, [r2, #68]	; 0x44
 800474e:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <HAL_TIM_Base_MspInit+0xbc>)
 8004750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800475a:	2200      	movs	r2, #0
 800475c:	2100      	movs	r1, #0
 800475e:	201a      	movs	r0, #26
 8004760:	f001 f837 	bl	80057d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004764:	201a      	movs	r0, #26
 8004766:	f001 f850 	bl	800580a <HAL_NVIC_EnableIRQ>
}
 800476a:	bf00      	nop
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40000800 	.word	0x40000800
 8004778:	40023800 	.word	0x40023800
 800477c:	40014000 	.word	0x40014000
 8004780:	40014800 	.word	0x40014800

08004784 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800478c:	f107 030c 	add.w	r3, r7, #12
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	609a      	str	r2, [r3, #8]
 8004798:	60da      	str	r2, [r3, #12]
 800479a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a12      	ldr	r2, [pc, #72]	; (80047ec <HAL_TIM_MspPostInit+0x68>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d11e      	bne.n	80047e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <HAL_TIM_MspPostInit+0x6c>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	4a10      	ldr	r2, [pc, #64]	; (80047f0 <HAL_TIM_MspPostInit+0x6c>)
 80047b0:	f043 0301 	orr.w	r3, r3, #1
 80047b4:	6313      	str	r3, [r2, #48]	; 0x30
 80047b6:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <HAL_TIM_MspPostInit+0x6c>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80047c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80047c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c8:	2302      	movs	r3, #2
 80047ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047cc:	2300      	movs	r3, #0
 80047ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d0:	2300      	movs	r3, #0
 80047d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80047d4:	2301      	movs	r3, #1
 80047d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d8:	f107 030c 	add.w	r3, r7, #12
 80047dc:	4619      	mov	r1, r3
 80047de:	4805      	ldr	r0, [pc, #20]	; (80047f4 <HAL_TIM_MspPostInit+0x70>)
 80047e0:	f001 fc4a 	bl	8006078 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80047e4:	bf00      	nop
 80047e6:	3720      	adds	r7, #32
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40010000 	.word	0x40010000
 80047f0:	40023800 	.word	0x40023800
 80047f4:	40020000 	.word	0x40020000

080047f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08c      	sub	sp, #48	; 0x30
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004800:	f107 031c 	add.w	r3, r7, #28
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	605a      	str	r2, [r3, #4]
 800480a:	609a      	str	r2, [r3, #8]
 800480c:	60da      	str	r2, [r3, #12]
 800480e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a60      	ldr	r2, [pc, #384]	; (8004998 <HAL_UART_MspInit+0x1a0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d153      	bne.n	80048c2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800481a:	2300      	movs	r3, #0
 800481c:	61bb      	str	r3, [r7, #24]
 800481e:	4b5f      	ldr	r3, [pc, #380]	; (800499c <HAL_UART_MspInit+0x1a4>)
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	4a5e      	ldr	r2, [pc, #376]	; (800499c <HAL_UART_MspInit+0x1a4>)
 8004824:	f043 0310 	orr.w	r3, r3, #16
 8004828:	6453      	str	r3, [r2, #68]	; 0x44
 800482a:	4b5c      	ldr	r3, [pc, #368]	; (800499c <HAL_UART_MspInit+0x1a4>)
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	f003 0310 	and.w	r3, r3, #16
 8004832:	61bb      	str	r3, [r7, #24]
 8004834:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	4b58      	ldr	r3, [pc, #352]	; (800499c <HAL_UART_MspInit+0x1a4>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	4a57      	ldr	r2, [pc, #348]	; (800499c <HAL_UART_MspInit+0x1a4>)
 8004840:	f043 0301 	orr.w	r3, r3, #1
 8004844:	6313      	str	r3, [r2, #48]	; 0x30
 8004846:	4b55      	ldr	r3, [pc, #340]	; (800499c <HAL_UART_MspInit+0x1a4>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	4b51      	ldr	r3, [pc, #324]	; (800499c <HAL_UART_MspInit+0x1a4>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485a:	4a50      	ldr	r2, [pc, #320]	; (800499c <HAL_UART_MspInit+0x1a4>)
 800485c:	f043 0302 	orr.w	r3, r3, #2
 8004860:	6313      	str	r3, [r2, #48]	; 0x30
 8004862:	4b4e      	ldr	r3, [pc, #312]	; (800499c <HAL_UART_MspInit+0x1a4>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800486e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004874:	2302      	movs	r3, #2
 8004876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004878:	2300      	movs	r3, #0
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800487c:	2303      	movs	r3, #3
 800487e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004880:	2307      	movs	r3, #7
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004884:	f107 031c 	add.w	r3, r7, #28
 8004888:	4619      	mov	r1, r3
 800488a:	4845      	ldr	r0, [pc, #276]	; (80049a0 <HAL_UART_MspInit+0x1a8>)
 800488c:	f001 fbf4 	bl	8006078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004890:	2380      	movs	r3, #128	; 0x80
 8004892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004894:	2302      	movs	r3, #2
 8004896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004898:	2300      	movs	r3, #0
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800489c:	2303      	movs	r3, #3
 800489e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80048a0:	2307      	movs	r3, #7
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048a4:	f107 031c 	add.w	r3, r7, #28
 80048a8:	4619      	mov	r1, r3
 80048aa:	483e      	ldr	r0, [pc, #248]	; (80049a4 <HAL_UART_MspInit+0x1ac>)
 80048ac:	f001 fbe4 	bl	8006078 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80048b0:	2200      	movs	r2, #0
 80048b2:	2100      	movs	r1, #0
 80048b4:	2025      	movs	r0, #37	; 0x25
 80048b6:	f000 ff8c 	bl	80057d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80048ba:	2025      	movs	r0, #37	; 0x25
 80048bc:	f000 ffa5 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80048c0:	e066      	b.n	8004990 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART2)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a38      	ldr	r2, [pc, #224]	; (80049a8 <HAL_UART_MspInit+0x1b0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d161      	bne.n	8004990 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	4b32      	ldr	r3, [pc, #200]	; (800499c <HAL_UART_MspInit+0x1a4>)
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	4a31      	ldr	r2, [pc, #196]	; (800499c <HAL_UART_MspInit+0x1a4>)
 80048d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048da:	6413      	str	r3, [r2, #64]	; 0x40
 80048dc:	4b2f      	ldr	r3, [pc, #188]	; (800499c <HAL_UART_MspInit+0x1a4>)
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e8:	2300      	movs	r3, #0
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	4b2b      	ldr	r3, [pc, #172]	; (800499c <HAL_UART_MspInit+0x1a4>)
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	4a2a      	ldr	r2, [pc, #168]	; (800499c <HAL_UART_MspInit+0x1a4>)
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	6313      	str	r3, [r2, #48]	; 0x30
 80048f8:	4b28      	ldr	r3, [pc, #160]	; (800499c <HAL_UART_MspInit+0x1a4>)
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004904:	230c      	movs	r3, #12
 8004906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004908:	2302      	movs	r3, #2
 800490a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490c:	2300      	movs	r3, #0
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004910:	2303      	movs	r3, #3
 8004912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004914:	2307      	movs	r3, #7
 8004916:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004918:	f107 031c 	add.w	r3, r7, #28
 800491c:	4619      	mov	r1, r3
 800491e:	4820      	ldr	r0, [pc, #128]	; (80049a0 <HAL_UART_MspInit+0x1a8>)
 8004920:	f001 fbaa 	bl	8006078 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004924:	4b21      	ldr	r3, [pc, #132]	; (80049ac <HAL_UART_MspInit+0x1b4>)
 8004926:	4a22      	ldr	r2, [pc, #136]	; (80049b0 <HAL_UART_MspInit+0x1b8>)
 8004928:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800492a:	4b20      	ldr	r3, [pc, #128]	; (80049ac <HAL_UART_MspInit+0x1b4>)
 800492c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004930:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004932:	4b1e      	ldr	r3, [pc, #120]	; (80049ac <HAL_UART_MspInit+0x1b4>)
 8004934:	2240      	movs	r2, #64	; 0x40
 8004936:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004938:	4b1c      	ldr	r3, [pc, #112]	; (80049ac <HAL_UART_MspInit+0x1b4>)
 800493a:	2200      	movs	r2, #0
 800493c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800493e:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <HAL_UART_MspInit+0x1b4>)
 8004940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004944:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004946:	4b19      	ldr	r3, [pc, #100]	; (80049ac <HAL_UART_MspInit+0x1b4>)
 8004948:	2200      	movs	r2, #0
 800494a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800494c:	4b17      	ldr	r3, [pc, #92]	; (80049ac <HAL_UART_MspInit+0x1b4>)
 800494e:	2200      	movs	r2, #0
 8004950:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004952:	4b16      	ldr	r3, [pc, #88]	; (80049ac <HAL_UART_MspInit+0x1b4>)
 8004954:	2200      	movs	r2, #0
 8004956:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004958:	4b14      	ldr	r3, [pc, #80]	; (80049ac <HAL_UART_MspInit+0x1b4>)
 800495a:	2200      	movs	r2, #0
 800495c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800495e:	4b13      	ldr	r3, [pc, #76]	; (80049ac <HAL_UART_MspInit+0x1b4>)
 8004960:	2200      	movs	r2, #0
 8004962:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004964:	4811      	ldr	r0, [pc, #68]	; (80049ac <HAL_UART_MspInit+0x1b4>)
 8004966:	f000 ff6b 	bl	8005840 <HAL_DMA_Init>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8004970:	f7ff fd2e 	bl	80043d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a0d      	ldr	r2, [pc, #52]	; (80049ac <HAL_UART_MspInit+0x1b4>)
 8004978:	635a      	str	r2, [r3, #52]	; 0x34
 800497a:	4a0c      	ldr	r2, [pc, #48]	; (80049ac <HAL_UART_MspInit+0x1b4>)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004980:	2200      	movs	r2, #0
 8004982:	2100      	movs	r1, #0
 8004984:	2026      	movs	r0, #38	; 0x26
 8004986:	f000 ff24 	bl	80057d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800498a:	2026      	movs	r0, #38	; 0x26
 800498c:	f000 ff3d 	bl	800580a <HAL_NVIC_EnableIRQ>
}
 8004990:	bf00      	nop
 8004992:	3730      	adds	r7, #48	; 0x30
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40011000 	.word	0x40011000
 800499c:	40023800 	.word	0x40023800
 80049a0:	40020000 	.word	0x40020000
 80049a4:	40020400 	.word	0x40020400
 80049a8:	40004400 	.word	0x40004400
 80049ac:	200009b0 	.word	0x200009b0
 80049b0:	400260a0 	.word	0x400260a0

080049b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049b8:	e7fe      	b.n	80049b8 <NMI_Handler+0x4>

080049ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049ba:	b480      	push	{r7}
 80049bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049be:	e7fe      	b.n	80049be <HardFault_Handler+0x4>

080049c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049c4:	e7fe      	b.n	80049c4 <MemManage_Handler+0x4>

080049c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049c6:	b480      	push	{r7}
 80049c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049ca:	e7fe      	b.n	80049ca <BusFault_Handler+0x4>

080049cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049d0:	e7fe      	b.n	80049d0 <UsageFault_Handler+0x4>

080049d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049d2:	b480      	push	{r7}
 80049d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049d6:	bf00      	nop
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049ee:	b480      	push	{r7}
 80049f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049f2:	bf00      	nop
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a00:	f000 f9c6 	bl	8004d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a04:	bf00      	nop
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004a0c:	2004      	movs	r0, #4
 8004a0e:	f001 fce9 	bl	80063e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004a12:	bf00      	nop
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004a1a:	2008      	movs	r0, #8
 8004a1c:	f001 fce2 	bl	80063e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004a20:	bf00      	nop
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004a28:	4802      	ldr	r0, [pc, #8]	; (8004a34 <DMA1_Stream6_IRQHandler+0x10>)
 8004a2a:	f001 f8a1 	bl	8005b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004a2e:	bf00      	nop
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	200009b0 	.word	0x200009b0

08004a38 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a3c:	4803      	ldr	r0, [pc, #12]	; (8004a4c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8004a3e:	f005 fa8b 	bl	8009f58 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8004a42:	4803      	ldr	r0, [pc, #12]	; (8004a50 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8004a44:	f005 fa88 	bl	8009f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004a48:	bf00      	nop
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	20000544 	.word	0x20000544
 8004a50:	20000760 	.word	0x20000760

08004a54 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a58:	4803      	ldr	r0, [pc, #12]	; (8004a68 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004a5a:	f005 fa7d 	bl	8009f58 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004a5e:	4803      	ldr	r0, [pc, #12]	; (8004a6c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004a60:	f005 fa7a 	bl	8009f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004a64:	bf00      	nop
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	20000544 	.word	0x20000544
 8004a6c:	20000814 	.word	0x20000814

08004a70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004a74:	4802      	ldr	r0, [pc, #8]	; (8004a80 <TIM4_IRQHandler+0x10>)
 8004a76:	f005 fa6f 	bl	8009f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	200006ac 	.word	0x200006ac

08004a84 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004a88:	4802      	ldr	r0, [pc, #8]	; (8004a94 <I2C1_EV_IRQHandler+0x10>)
 8004a8a:	f002 f92b 	bl	8006ce4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	200004f0 	.word	0x200004f0

08004a98 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004a9c:	4802      	ldr	r0, [pc, #8]	; (8004aa8 <I2C1_ER_IRQHandler+0x10>)
 8004a9e:	f002 fa92 	bl	8006fc6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	200004f0 	.word	0x200004f0

08004aac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004ab0:	4802      	ldr	r0, [pc, #8]	; (8004abc <USART1_IRQHandler+0x10>)
 8004ab2:	f006 fd9f 	bl	800b5f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	200008c8 	.word	0x200008c8

08004ac0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ac4:	4802      	ldr	r0, [pc, #8]	; (8004ad0 <USART2_IRQHandler+0x10>)
 8004ac6:	f006 fd95 	bl	800b5f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004aca:	bf00      	nop
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	2000093c 	.word	0x2000093c

08004ad4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004ad8:	4802      	ldr	r0, [pc, #8]	; (8004ae4 <DMA2_Stream0_IRQHandler+0x10>)
 8004ada:	f001 f849 	bl	8005b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000490 	.word	0x20000490

08004ae8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  return 1;
 8004aec:	2301      	movs	r3, #1
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <_kill>:

int _kill(int pid, int sig)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b02:	f007 fdbd 	bl	800c680 <__errno>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2216      	movs	r2, #22
 8004b0a:	601a      	str	r2, [r3, #0]
  return -1;
 8004b0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <_exit>:

void _exit (int status)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b20:	f04f 31ff 	mov.w	r1, #4294967295
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff ffe7 	bl	8004af8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b2a:	e7fe      	b.n	8004b2a <_exit+0x12>

08004b2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b38:	2300      	movs	r3, #0
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	e00a      	b.n	8004b54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b3e:	f3af 8000 	nop.w
 8004b42:	4601      	mov	r1, r0
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	60ba      	str	r2, [r7, #8]
 8004b4a:	b2ca      	uxtb	r2, r1
 8004b4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	3301      	adds	r3, #1
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	dbf0      	blt.n	8004b3e <_read+0x12>
  }

  return len;
 8004b5c:	687b      	ldr	r3, [r7, #4]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b086      	sub	sp, #24
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	e009      	b.n	8004b8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	60ba      	str	r2, [r7, #8]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	dbf1      	blt.n	8004b78 <_write+0x12>
  }
  return len;
 8004b94:	687b      	ldr	r3, [r7, #4]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <_close>:

int _close(int file)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bc6:	605a      	str	r2, [r3, #4]
  return 0;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <_isatty>:

int _isatty(int file)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004bde:	2301      	movs	r3, #1
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c10:	4a14      	ldr	r2, [pc, #80]	; (8004c64 <_sbrk+0x5c>)
 8004c12:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <_sbrk+0x60>)
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c1c:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <_sbrk+0x64>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d102      	bne.n	8004c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c24:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <_sbrk+0x64>)
 8004c26:	4a12      	ldr	r2, [pc, #72]	; (8004c70 <_sbrk+0x68>)
 8004c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c2a:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <_sbrk+0x64>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4413      	add	r3, r2
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d207      	bcs.n	8004c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c38:	f007 fd22 	bl	800c680 <__errno>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	220c      	movs	r2, #12
 8004c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c42:	f04f 33ff 	mov.w	r3, #4294967295
 8004c46:	e009      	b.n	8004c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c48:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <_sbrk+0x64>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c4e:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <_sbrk+0x64>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4413      	add	r3, r2
 8004c56:	4a05      	ldr	r2, [pc, #20]	; (8004c6c <_sbrk+0x64>)
 8004c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20020000 	.word	0x20020000
 8004c68:	00000400 	.word	0x00000400
 8004c6c:	20001190 	.word	0x20001190
 8004c70:	200011a8 	.word	0x200011a8

08004c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c78:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <SystemInit+0x20>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7e:	4a05      	ldr	r2, [pc, #20]	; (8004c94 <SystemInit+0x20>)
 8004c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	e000ed00 	.word	0xe000ed00

08004c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8004c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c9c:	480d      	ldr	r0, [pc, #52]	; (8004cd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004c9e:	490e      	ldr	r1, [pc, #56]	; (8004cd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ca0:	4a0e      	ldr	r2, [pc, #56]	; (8004cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ca4:	e002      	b.n	8004cac <LoopCopyDataInit>

08004ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004caa:	3304      	adds	r3, #4

08004cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cb0:	d3f9      	bcc.n	8004ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cb2:	4a0b      	ldr	r2, [pc, #44]	; (8004ce0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004cb4:	4c0b      	ldr	r4, [pc, #44]	; (8004ce4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cb8:	e001      	b.n	8004cbe <LoopFillZerobss>

08004cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cbc:	3204      	adds	r2, #4

08004cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cc0:	d3fb      	bcc.n	8004cba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004cc2:	f7ff ffd7 	bl	8004c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cc6:	f007 fce1 	bl	800c68c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cca:	f7fc fcf5 	bl	80016b8 <main>
  bx  lr    
 8004cce:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 8004cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004cd8:	20000428 	.word	0x20000428
  ldr r2, =_sidata
 8004cdc:	08011754 	.word	0x08011754
  ldr r2, =_sbss
 8004ce0:	20000428 	.word	0x20000428
  ldr r4, =_ebss
 8004ce4:	200011a8 	.word	0x200011a8

08004ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ce8:	e7fe      	b.n	8004ce8 <ADC_IRQHandler>
	...

08004cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004cf0:	4b0e      	ldr	r3, [pc, #56]	; (8004d2c <HAL_Init+0x40>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a0d      	ldr	r2, [pc, #52]	; (8004d2c <HAL_Init+0x40>)
 8004cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <HAL_Init+0x40>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <HAL_Init+0x40>)
 8004d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d08:	4b08      	ldr	r3, [pc, #32]	; (8004d2c <HAL_Init+0x40>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a07      	ldr	r2, [pc, #28]	; (8004d2c <HAL_Init+0x40>)
 8004d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d14:	2003      	movs	r0, #3
 8004d16:	f000 fd51 	bl	80057bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	f000 f808 	bl	8004d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d20:	f7ff fb5c 	bl	80043dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40023c00 	.word	0x40023c00

08004d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d38:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <HAL_InitTick+0x54>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	4b12      	ldr	r3, [pc, #72]	; (8004d88 <HAL_InitTick+0x58>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	4619      	mov	r1, r3
 8004d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fd69 	bl	8005826 <HAL_SYSTICK_Config>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e00e      	b.n	8004d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b0f      	cmp	r3, #15
 8004d62:	d80a      	bhi.n	8004d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d64:	2200      	movs	r2, #0
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	f04f 30ff 	mov.w	r0, #4294967295
 8004d6c:	f000 fd31 	bl	80057d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d70:	4a06      	ldr	r2, [pc, #24]	; (8004d8c <HAL_InitTick+0x5c>)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	e000      	b.n	8004d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20000248 	.word	0x20000248
 8004d88:	20000250 	.word	0x20000250
 8004d8c:	2000024c 	.word	0x2000024c

08004d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <HAL_IncTick+0x20>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <HAL_IncTick+0x24>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4413      	add	r3, r2
 8004da0:	4a04      	ldr	r2, [pc, #16]	; (8004db4 <HAL_IncTick+0x24>)
 8004da2:	6013      	str	r3, [r2, #0]
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	20000250 	.word	0x20000250
 8004db4:	20001194 	.word	0x20001194

08004db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
  return uwTick;
 8004dbc:	4b03      	ldr	r3, [pc, #12]	; (8004dcc <HAL_GetTick+0x14>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	20001194 	.word	0x20001194

08004dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004dd8:	f7ff ffee 	bl	8004db8 <HAL_GetTick>
 8004ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de8:	d005      	beq.n	8004df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dea:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <HAL_Delay+0x44>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	461a      	mov	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4413      	add	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004df6:	bf00      	nop
 8004df8:	f7ff ffde 	bl	8004db8 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d8f7      	bhi.n	8004df8 <HAL_Delay+0x28>
  {
  }
}
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000250 	.word	0x20000250

08004e18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e033      	b.n	8004e96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff faf8 	bl	800442c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f003 0310 	and.w	r3, r3, #16
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d118      	bne.n	8004e88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e5e:	f023 0302 	bic.w	r3, r3, #2
 8004e62:	f043 0202 	orr.w	r2, r3, #2
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fa58 	bl	8005320 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	f023 0303 	bic.w	r3, r3, #3
 8004e7e:	f043 0201 	orr.w	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	641a      	str	r2, [r3, #64]	; 0x40
 8004e86:	e001      	b.n	8004e8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_ADC_Start_DMA+0x1e>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e0ce      	b.n	800505c <HAL_ADC_Start_DMA+0x1bc>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d018      	beq.n	8004f06 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004ee4:	4b5f      	ldr	r3, [pc, #380]	; (8005064 <HAL_ADC_Start_DMA+0x1c4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a5f      	ldr	r2, [pc, #380]	; (8005068 <HAL_ADC_Start_DMA+0x1c8>)
 8004eea:	fba2 2303 	umull	r2, r3, r2, r3
 8004eee:	0c9a      	lsrs	r2, r3, #18
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	4413      	add	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004ef8:	e002      	b.n	8004f00 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f9      	bne.n	8004efa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f14:	d107      	bne.n	8004f26 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f24:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	f040 8086 	bne.w	8005042 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d007      	beq.n	8004f68 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f74:	d106      	bne.n	8004f84 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7a:	f023 0206 	bic.w	r2, r3, #6
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	645a      	str	r2, [r3, #68]	; 0x44
 8004f82:	e002      	b.n	8004f8a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f92:	4b36      	ldr	r3, [pc, #216]	; (800506c <HAL_ADC_Start_DMA+0x1cc>)
 8004f94:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	4a35      	ldr	r2, [pc, #212]	; (8005070 <HAL_ADC_Start_DMA+0x1d0>)
 8004f9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa2:	4a34      	ldr	r2, [pc, #208]	; (8005074 <HAL_ADC_Start_DMA+0x1d4>)
 8004fa4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	4a33      	ldr	r2, [pc, #204]	; (8005078 <HAL_ADC_Start_DMA+0x1d8>)
 8004fac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004fb6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004fc6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fd6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	334c      	adds	r3, #76	; 0x4c
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f000 fcd8 	bl	800599c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10f      	bne.n	8005018 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d129      	bne.n	800505a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005014:	609a      	str	r2, [r3, #8]
 8005016:	e020      	b.n	800505a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a17      	ldr	r2, [pc, #92]	; (800507c <HAL_ADC_Start_DMA+0x1dc>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d11b      	bne.n	800505a <HAL_ADC_Start_DMA+0x1ba>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d114      	bne.n	800505a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800503e:	609a      	str	r2, [r3, #8]
 8005040:	e00b      	b.n	800505a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f043 0210 	orr.w	r2, r3, #16
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005052:	f043 0201 	orr.w	r2, r3, #1
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20000248 	.word	0x20000248
 8005068:	431bde83 	.word	0x431bde83
 800506c:	40012300 	.word	0x40012300
 8005070:	08005519 	.word	0x08005519
 8005074:	080055d3 	.word	0x080055d3
 8005078:	080055ef 	.word	0x080055ef
 800507c:	40012000 	.word	0x40012000

08005080 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <HAL_ADC_ConfigChannel+0x1c>
 80050d4:	2302      	movs	r3, #2
 80050d6:	e113      	b.n	8005300 <HAL_ADC_ConfigChannel+0x244>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b09      	cmp	r3, #9
 80050e6:	d925      	bls.n	8005134 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68d9      	ldr	r1, [r3, #12]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	4613      	mov	r3, r2
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	4413      	add	r3, r2
 80050fc:	3b1e      	subs	r3, #30
 80050fe:	2207      	movs	r2, #7
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	43da      	mvns	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	400a      	ands	r2, r1
 800510c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68d9      	ldr	r1, [r3, #12]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	b29b      	uxth	r3, r3
 800511e:	4618      	mov	r0, r3
 8005120:	4603      	mov	r3, r0
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	4403      	add	r3, r0
 8005126:	3b1e      	subs	r3, #30
 8005128:	409a      	lsls	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	60da      	str	r2, [r3, #12]
 8005132:	e022      	b.n	800517a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6919      	ldr	r1, [r3, #16]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	b29b      	uxth	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	4613      	mov	r3, r2
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	4413      	add	r3, r2
 8005148:	2207      	movs	r2, #7
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	43da      	mvns	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	400a      	ands	r2, r1
 8005156:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6919      	ldr	r1, [r3, #16]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	b29b      	uxth	r3, r3
 8005168:	4618      	mov	r0, r3
 800516a:	4603      	mov	r3, r0
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	4403      	add	r3, r0
 8005170:	409a      	lsls	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b06      	cmp	r3, #6
 8005180:	d824      	bhi.n	80051cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	3b05      	subs	r3, #5
 8005194:	221f      	movs	r2, #31
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	43da      	mvns	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	400a      	ands	r2, r1
 80051a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	4618      	mov	r0, r3
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	3b05      	subs	r3, #5
 80051be:	fa00 f203 	lsl.w	r2, r0, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	635a      	str	r2, [r3, #52]	; 0x34
 80051ca:	e04c      	b.n	8005266 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b0c      	cmp	r3, #12
 80051d2:	d824      	bhi.n	800521e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	4613      	mov	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	3b23      	subs	r3, #35	; 0x23
 80051e6:	221f      	movs	r2, #31
 80051e8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ec:	43da      	mvns	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	400a      	ands	r2, r1
 80051f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	4618      	mov	r0, r3
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	3b23      	subs	r3, #35	; 0x23
 8005210:	fa00 f203 	lsl.w	r2, r0, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
 800521c:	e023      	b.n	8005266 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	3b41      	subs	r3, #65	; 0x41
 8005230:	221f      	movs	r2, #31
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	43da      	mvns	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	400a      	ands	r2, r1
 800523e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	b29b      	uxth	r3, r3
 800524c:	4618      	mov	r0, r3
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	3b41      	subs	r3, #65	; 0x41
 800525a:	fa00 f203 	lsl.w	r2, r0, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005266:	4b29      	ldr	r3, [pc, #164]	; (800530c <HAL_ADC_ConfigChannel+0x250>)
 8005268:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a28      	ldr	r2, [pc, #160]	; (8005310 <HAL_ADC_ConfigChannel+0x254>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d10f      	bne.n	8005294 <HAL_ADC_ConfigChannel+0x1d8>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b12      	cmp	r3, #18
 800527a:	d10b      	bne.n	8005294 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1d      	ldr	r2, [pc, #116]	; (8005310 <HAL_ADC_ConfigChannel+0x254>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d12b      	bne.n	80052f6 <HAL_ADC_ConfigChannel+0x23a>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a1c      	ldr	r2, [pc, #112]	; (8005314 <HAL_ADC_ConfigChannel+0x258>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <HAL_ADC_ConfigChannel+0x1f4>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b11      	cmp	r3, #17
 80052ae:	d122      	bne.n	80052f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a11      	ldr	r2, [pc, #68]	; (8005314 <HAL_ADC_ConfigChannel+0x258>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d111      	bne.n	80052f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80052d2:	4b11      	ldr	r3, [pc, #68]	; (8005318 <HAL_ADC_ConfigChannel+0x25c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a11      	ldr	r2, [pc, #68]	; (800531c <HAL_ADC_ConfigChannel+0x260>)
 80052d8:	fba2 2303 	umull	r2, r3, r2, r3
 80052dc:	0c9a      	lsrs	r2, r3, #18
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80052e8:	e002      	b.n	80052f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f9      	bne.n	80052ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40012300 	.word	0x40012300
 8005310:	40012000 	.word	0x40012000
 8005314:	10000012 	.word	0x10000012
 8005318:	20000248 	.word	0x20000248
 800531c:	431bde83 	.word	0x431bde83

08005320 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005328:	4b79      	ldr	r3, [pc, #484]	; (8005510 <ADC_Init+0x1f0>)
 800532a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	431a      	orrs	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005354:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6859      	ldr	r1, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	021a      	lsls	r2, r3, #8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005378:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6859      	ldr	r1, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800539a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6899      	ldr	r1, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b2:	4a58      	ldr	r2, [pc, #352]	; (8005514 <ADC_Init+0x1f4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d022      	beq.n	80053fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6899      	ldr	r1, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80053e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6899      	ldr	r1, [r3, #8]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	609a      	str	r2, [r3, #8]
 80053fc:	e00f      	b.n	800541e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800540c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800541c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0202 	bic.w	r2, r2, #2
 800542c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6899      	ldr	r1, [r3, #8]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	7e1b      	ldrb	r3, [r3, #24]
 8005438:	005a      	lsls	r2, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01b      	beq.n	8005484 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800545a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800546a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6859      	ldr	r1, [r3, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	3b01      	subs	r3, #1
 8005478:	035a      	lsls	r2, r3, #13
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	605a      	str	r2, [r3, #4]
 8005482:	e007      	b.n	8005494 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005492:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80054a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	051a      	lsls	r2, r3, #20
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6899      	ldr	r1, [r3, #8]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054d6:	025a      	lsls	r2, r3, #9
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6899      	ldr	r1, [r3, #8]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	029a      	lsls	r2, r3, #10
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	609a      	str	r2, [r3, #8]
}
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	40012300 	.word	0x40012300
 8005514:	0f000001 	.word	0x0f000001

08005518 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800552e:	2b00      	cmp	r3, #0
 8005530:	d13c      	bne.n	80055ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d12b      	bne.n	80055a4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005550:	2b00      	cmp	r3, #0
 8005552:	d127      	bne.n	80055a4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800555e:	2b00      	cmp	r3, #0
 8005560:	d006      	beq.n	8005570 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800556c:	2b00      	cmp	r3, #0
 800556e:	d119      	bne.n	80055a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0220 	bic.w	r2, r2, #32
 800557e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d105      	bne.n	80055a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559c:	f043 0201 	orr.w	r2, r3, #1
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f7ff fd6b 	bl	8005080 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80055aa:	e00e      	b.n	80055ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f7ff fd75 	bl	80050a8 <HAL_ADC_ErrorCallback>
}
 80055be:	e004      	b.n	80055ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	4798      	blx	r3
}
 80055ca:	bf00      	nop
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f7ff fd57 	bl	8005094 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80055e6:	bf00      	nop
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b084      	sub	sp, #16
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2240      	movs	r2, #64	; 0x40
 8005600:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005606:	f043 0204 	orr.w	r2, r3, #4
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f7ff fd4a 	bl	80050a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800562c:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <__NVIC_SetPriorityGrouping+0x44>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005638:	4013      	ands	r3, r2
 800563a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800564c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800564e:	4a04      	ldr	r2, [pc, #16]	; (8005660 <__NVIC_SetPriorityGrouping+0x44>)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	60d3      	str	r3, [r2, #12]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	e000ed00 	.word	0xe000ed00

08005664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005668:	4b04      	ldr	r3, [pc, #16]	; (800567c <__NVIC_GetPriorityGrouping+0x18>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	0a1b      	lsrs	r3, r3, #8
 800566e:	f003 0307 	and.w	r3, r3, #7
}
 8005672:	4618      	mov	r0, r3
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	e000ed00 	.word	0xe000ed00

08005680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800568a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800568e:	2b00      	cmp	r3, #0
 8005690:	db0b      	blt.n	80056aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	f003 021f 	and.w	r2, r3, #31
 8005698:	4907      	ldr	r1, [pc, #28]	; (80056b8 <__NVIC_EnableIRQ+0x38>)
 800569a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800569e:	095b      	lsrs	r3, r3, #5
 80056a0:	2001      	movs	r0, #1
 80056a2:	fa00 f202 	lsl.w	r2, r0, r2
 80056a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	e000e100 	.word	0xe000e100

080056bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	4603      	mov	r3, r0
 80056c4:	6039      	str	r1, [r7, #0]
 80056c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	db0a      	blt.n	80056e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	490c      	ldr	r1, [pc, #48]	; (8005708 <__NVIC_SetPriority+0x4c>)
 80056d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056da:	0112      	lsls	r2, r2, #4
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	440b      	add	r3, r1
 80056e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056e4:	e00a      	b.n	80056fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	4908      	ldr	r1, [pc, #32]	; (800570c <__NVIC_SetPriority+0x50>)
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	3b04      	subs	r3, #4
 80056f4:	0112      	lsls	r2, r2, #4
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	440b      	add	r3, r1
 80056fa:	761a      	strb	r2, [r3, #24]
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	e000e100 	.word	0xe000e100
 800570c:	e000ed00 	.word	0xe000ed00

08005710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005710:	b480      	push	{r7}
 8005712:	b089      	sub	sp, #36	; 0x24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	f1c3 0307 	rsb	r3, r3, #7
 800572a:	2b04      	cmp	r3, #4
 800572c:	bf28      	it	cs
 800572e:	2304      	movcs	r3, #4
 8005730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	3304      	adds	r3, #4
 8005736:	2b06      	cmp	r3, #6
 8005738:	d902      	bls.n	8005740 <NVIC_EncodePriority+0x30>
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3b03      	subs	r3, #3
 800573e:	e000      	b.n	8005742 <NVIC_EncodePriority+0x32>
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005744:	f04f 32ff 	mov.w	r2, #4294967295
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	43da      	mvns	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	401a      	ands	r2, r3
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005758:	f04f 31ff 	mov.w	r1, #4294967295
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	fa01 f303 	lsl.w	r3, r1, r3
 8005762:	43d9      	mvns	r1, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005768:	4313      	orrs	r3, r2
         );
}
 800576a:	4618      	mov	r0, r3
 800576c:	3724      	adds	r7, #36	; 0x24
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
	...

08005778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3b01      	subs	r3, #1
 8005784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005788:	d301      	bcc.n	800578e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800578a:	2301      	movs	r3, #1
 800578c:	e00f      	b.n	80057ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800578e:	4a0a      	ldr	r2, [pc, #40]	; (80057b8 <SysTick_Config+0x40>)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3b01      	subs	r3, #1
 8005794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005796:	210f      	movs	r1, #15
 8005798:	f04f 30ff 	mov.w	r0, #4294967295
 800579c:	f7ff ff8e 	bl	80056bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057a0:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <SysTick_Config+0x40>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057a6:	4b04      	ldr	r3, [pc, #16]	; (80057b8 <SysTick_Config+0x40>)
 80057a8:	2207      	movs	r2, #7
 80057aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	e000e010 	.word	0xe000e010

080057bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff ff29 	bl	800561c <__NVIC_SetPriorityGrouping>
}
 80057ca:	bf00      	nop
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b086      	sub	sp, #24
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	4603      	mov	r3, r0
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
 80057de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057e4:	f7ff ff3e 	bl	8005664 <__NVIC_GetPriorityGrouping>
 80057e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	6978      	ldr	r0, [r7, #20]
 80057f0:	f7ff ff8e 	bl	8005710 <NVIC_EncodePriority>
 80057f4:	4602      	mov	r2, r0
 80057f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057fa:	4611      	mov	r1, r2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7ff ff5d 	bl	80056bc <__NVIC_SetPriority>
}
 8005802:	bf00      	nop
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
 8005810:	4603      	mov	r3, r0
 8005812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff ff31 	bl	8005680 <__NVIC_EnableIRQ>
}
 800581e:	bf00      	nop
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff ffa2 	bl	8005778 <SysTick_Config>
 8005834:	4603      	mov	r3, r0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800584c:	f7ff fab4 	bl	8004db8 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e099      	b.n	8005990 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 0201 	bic.w	r2, r2, #1
 800587a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800587c:	e00f      	b.n	800589e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800587e:	f7ff fa9b 	bl	8004db8 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b05      	cmp	r3, #5
 800588a:	d908      	bls.n	800589e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2220      	movs	r2, #32
 8005890:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2203      	movs	r2, #3
 8005896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e078      	b.n	8005990 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e8      	bne.n	800587e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4b38      	ldr	r3, [pc, #224]	; (8005998 <HAL_DMA_Init+0x158>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d107      	bne.n	8005908 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	4313      	orrs	r3, r2
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f023 0307 	bic.w	r3, r3, #7
 800591e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	2b04      	cmp	r3, #4
 8005930:	d117      	bne.n	8005962 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	4313      	orrs	r3, r2
 800593a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00e      	beq.n	8005962 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fb1b 	bl	8005f80 <DMA_CheckFifoParam>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d008      	beq.n	8005962 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2240      	movs	r2, #64	; 0x40
 8005954:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800595e:	2301      	movs	r3, #1
 8005960:	e016      	b.n	8005990 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 fad2 	bl	8005f14 <DMA_CalcBaseAndBitshift>
 8005970:	4603      	mov	r3, r0
 8005972:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005978:	223f      	movs	r2, #63	; 0x3f
 800597a:	409a      	lsls	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	f010803f 	.word	0xf010803f

0800599c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_DMA_Start_IT+0x26>
 80059be:	2302      	movs	r3, #2
 80059c0:	e040      	b.n	8005a44 <HAL_DMA_Start_IT+0xa8>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d12f      	bne.n	8005a36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2202      	movs	r2, #2
 80059da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 fa64 	bl	8005eb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f4:	223f      	movs	r2, #63	; 0x3f
 80059f6:	409a      	lsls	r2, r3
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0216 	orr.w	r2, r2, #22
 8005a0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d007      	beq.n	8005a24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0208 	orr.w	r2, r2, #8
 8005a22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0201 	orr.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	e005      	b.n	8005a42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005a3e:	2302      	movs	r3, #2
 8005a40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005a5a:	f7ff f9ad 	bl	8004db8 <HAL_GetTick>
 8005a5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d008      	beq.n	8005a7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2280      	movs	r2, #128	; 0x80
 8005a70:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e052      	b.n	8005b24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0216 	bic.w	r2, r2, #22
 8005a8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695a      	ldr	r2, [r3, #20]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d103      	bne.n	8005aae <HAL_DMA_Abort+0x62>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d007      	beq.n	8005abe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0208 	bic.w	r2, r2, #8
 8005abc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0201 	bic.w	r2, r2, #1
 8005acc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ace:	e013      	b.n	8005af8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ad0:	f7ff f972 	bl	8004db8 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b05      	cmp	r3, #5
 8005adc:	d90c      	bls.n	8005af8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2203      	movs	r2, #3
 8005ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e015      	b.n	8005b24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1e4      	bne.n	8005ad0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0a:	223f      	movs	r2, #63	; 0x3f
 8005b0c:	409a      	lsls	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d004      	beq.n	8005b4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2280      	movs	r2, #128	; 0x80
 8005b44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e00c      	b.n	8005b64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2205      	movs	r2, #5
 8005b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0201 	bic.w	r2, r2, #1
 8005b60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b7c:	4b8e      	ldr	r3, [pc, #568]	; (8005db8 <HAL_DMA_IRQHandler+0x248>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a8e      	ldr	r2, [pc, #568]	; (8005dbc <HAL_DMA_IRQHandler+0x24c>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	0a9b      	lsrs	r3, r3, #10
 8005b88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9a:	2208      	movs	r2, #8
 8005b9c:	409a      	lsls	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d01a      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d013      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0204 	bic.w	r2, r2, #4
 8005bc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc8:	2208      	movs	r2, #8
 8005bca:	409a      	lsls	r2, r3
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd4:	f043 0201 	orr.w	r2, r3, #1
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be0:	2201      	movs	r2, #1
 8005be2:	409a      	lsls	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4013      	ands	r3, r2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d012      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00b      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfe:	2201      	movs	r2, #1
 8005c00:	409a      	lsls	r2, r3
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0a:	f043 0202 	orr.w	r2, r3, #2
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c16:	2204      	movs	r2, #4
 8005c18:	409a      	lsls	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d012      	beq.n	8005c48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c34:	2204      	movs	r2, #4
 8005c36:	409a      	lsls	r2, r3
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c40:	f043 0204 	orr.w	r2, r3, #4
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c4c:	2210      	movs	r2, #16
 8005c4e:	409a      	lsls	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4013      	ands	r3, r2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d043      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d03c      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6a:	2210      	movs	r2, #16
 8005c6c:	409a      	lsls	r2, r3
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d018      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d108      	bne.n	8005ca0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d024      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	4798      	blx	r3
 8005c9e:	e01f      	b.n	8005ce0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01b      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	4798      	blx	r3
 8005cb0:	e016      	b.n	8005ce0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d107      	bne.n	8005cd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0208 	bic.w	r2, r2, #8
 8005cce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	409a      	lsls	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 808f 	beq.w	8005e10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0310 	and.w	r3, r3, #16
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 8087 	beq.w	8005e10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d06:	2220      	movs	r2, #32
 8005d08:	409a      	lsls	r2, r3
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b05      	cmp	r3, #5
 8005d18:	d136      	bne.n	8005d88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0216 	bic.w	r2, r2, #22
 8005d28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695a      	ldr	r2, [r3, #20]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d103      	bne.n	8005d4a <HAL_DMA_IRQHandler+0x1da>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0208 	bic.w	r2, r2, #8
 8005d58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5e:	223f      	movs	r2, #63	; 0x3f
 8005d60:	409a      	lsls	r2, r3
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d07e      	beq.n	8005e7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	4798      	blx	r3
        }
        return;
 8005d86:	e079      	b.n	8005e7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d01d      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10d      	bne.n	8005dc0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d031      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	4798      	blx	r3
 8005db4:	e02c      	b.n	8005e10 <HAL_DMA_IRQHandler+0x2a0>
 8005db6:	bf00      	nop
 8005db8:	20000248 	.word	0x20000248
 8005dbc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d023      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	4798      	blx	r3
 8005dd0:	e01e      	b.n	8005e10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10f      	bne.n	8005e00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0210 	bic.w	r2, r2, #16
 8005dee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d032      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d022      	beq.n	8005e6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2205      	movs	r2, #5
 8005e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0201 	bic.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	60bb      	str	r3, [r7, #8]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d307      	bcc.n	8005e58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1f2      	bne.n	8005e3c <HAL_DMA_IRQHandler+0x2cc>
 8005e56:	e000      	b.n	8005e5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005e58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d005      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	4798      	blx	r3
 8005e7a:	e000      	b.n	8005e7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005e7c:	bf00      	nop
    }
  }
}
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e92:	b2db      	uxtb	r3, r3
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ed4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	2b40      	cmp	r3, #64	; 0x40
 8005ee4:	d108      	bne.n	8005ef8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005ef6:	e007      	b.n	8005f08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	60da      	str	r2, [r3, #12]
}
 8005f08:	bf00      	nop
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	3b10      	subs	r3, #16
 8005f24:	4a14      	ldr	r2, [pc, #80]	; (8005f78 <DMA_CalcBaseAndBitshift+0x64>)
 8005f26:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2a:	091b      	lsrs	r3, r3, #4
 8005f2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f2e:	4a13      	ldr	r2, [pc, #76]	; (8005f7c <DMA_CalcBaseAndBitshift+0x68>)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d909      	bls.n	8005f56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f4a:	f023 0303 	bic.w	r3, r3, #3
 8005f4e:	1d1a      	adds	r2, r3, #4
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	659a      	str	r2, [r3, #88]	; 0x58
 8005f54:	e007      	b.n	8005f66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f5e:	f023 0303 	bic.w	r3, r3, #3
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	aaaaaaab 	.word	0xaaaaaaab
 8005f7c:	08011298 	.word	0x08011298

08005f80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d11f      	bne.n	8005fda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d856      	bhi.n	800604e <DMA_CheckFifoParam+0xce>
 8005fa0:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <DMA_CheckFifoParam+0x28>)
 8005fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa6:	bf00      	nop
 8005fa8:	08005fb9 	.word	0x08005fb9
 8005fac:	08005fcb 	.word	0x08005fcb
 8005fb0:	08005fb9 	.word	0x08005fb9
 8005fb4:	0800604f 	.word	0x0800604f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d046      	beq.n	8006052 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fc8:	e043      	b.n	8006052 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fd2:	d140      	bne.n	8006056 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fd8:	e03d      	b.n	8006056 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe2:	d121      	bne.n	8006028 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d837      	bhi.n	800605a <DMA_CheckFifoParam+0xda>
 8005fea:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <DMA_CheckFifoParam+0x70>)
 8005fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff0:	08006001 	.word	0x08006001
 8005ff4:	08006007 	.word	0x08006007
 8005ff8:	08006001 	.word	0x08006001
 8005ffc:	08006019 	.word	0x08006019
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	73fb      	strb	r3, [r7, #15]
      break;
 8006004:	e030      	b.n	8006068 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d025      	beq.n	800605e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006016:	e022      	b.n	800605e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006020:	d11f      	bne.n	8006062 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006026:	e01c      	b.n	8006062 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2b02      	cmp	r3, #2
 800602c:	d903      	bls.n	8006036 <DMA_CheckFifoParam+0xb6>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b03      	cmp	r3, #3
 8006032:	d003      	beq.n	800603c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006034:	e018      	b.n	8006068 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	73fb      	strb	r3, [r7, #15]
      break;
 800603a:	e015      	b.n	8006068 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00e      	beq.n	8006066 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
      break;
 800604c:	e00b      	b.n	8006066 <DMA_CheckFifoParam+0xe6>
      break;
 800604e:	bf00      	nop
 8006050:	e00a      	b.n	8006068 <DMA_CheckFifoParam+0xe8>
      break;
 8006052:	bf00      	nop
 8006054:	e008      	b.n	8006068 <DMA_CheckFifoParam+0xe8>
      break;
 8006056:	bf00      	nop
 8006058:	e006      	b.n	8006068 <DMA_CheckFifoParam+0xe8>
      break;
 800605a:	bf00      	nop
 800605c:	e004      	b.n	8006068 <DMA_CheckFifoParam+0xe8>
      break;
 800605e:	bf00      	nop
 8006060:	e002      	b.n	8006068 <DMA_CheckFifoParam+0xe8>
      break;   
 8006062:	bf00      	nop
 8006064:	e000      	b.n	8006068 <DMA_CheckFifoParam+0xe8>
      break;
 8006066:	bf00      	nop
    }
  } 
  
  return status; 
 8006068:	7bfb      	ldrb	r3, [r7, #15]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop

08006078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006078:	b480      	push	{r7}
 800607a:	b089      	sub	sp, #36	; 0x24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006086:	2300      	movs	r3, #0
 8006088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800608a:	2300      	movs	r3, #0
 800608c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800608e:	2300      	movs	r3, #0
 8006090:	61fb      	str	r3, [r7, #28]
 8006092:	e159      	b.n	8006348 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006094:	2201      	movs	r2, #1
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	fa02 f303 	lsl.w	r3, r2, r3
 800609c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	4013      	ands	r3, r2
 80060a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	f040 8148 	bne.w	8006342 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f003 0303 	and.w	r3, r3, #3
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d005      	beq.n	80060ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d130      	bne.n	800612c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	2203      	movs	r2, #3
 80060d6:	fa02 f303 	lsl.w	r3, r2, r3
 80060da:	43db      	mvns	r3, r3
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	4013      	ands	r3, r2
 80060e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	fa02 f303 	lsl.w	r3, r2, r3
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006100:	2201      	movs	r2, #1
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	fa02 f303 	lsl.w	r3, r2, r3
 8006108:	43db      	mvns	r3, r3
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	4013      	ands	r3, r2
 800610e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	091b      	lsrs	r3, r3, #4
 8006116:	f003 0201 	and.w	r2, r3, #1
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	4313      	orrs	r3, r2
 8006124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f003 0303 	and.w	r3, r3, #3
 8006134:	2b03      	cmp	r3, #3
 8006136:	d017      	beq.n	8006168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	2203      	movs	r2, #3
 8006144:	fa02 f303 	lsl.w	r3, r2, r3
 8006148:	43db      	mvns	r3, r3
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	4013      	ands	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	4313      	orrs	r3, r2
 8006160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f003 0303 	and.w	r3, r3, #3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d123      	bne.n	80061bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	08da      	lsrs	r2, r3, #3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3208      	adds	r2, #8
 800617c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	220f      	movs	r2, #15
 800618c:	fa02 f303 	lsl.w	r3, r2, r3
 8006190:	43db      	mvns	r3, r3
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	4013      	ands	r3, r2
 8006196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	08da      	lsrs	r2, r3, #3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	3208      	adds	r2, #8
 80061b6:	69b9      	ldr	r1, [r7, #24]
 80061b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	2203      	movs	r2, #3
 80061c8:	fa02 f303 	lsl.w	r3, r2, r3
 80061cc:	43db      	mvns	r3, r3
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	4013      	ands	r3, r2
 80061d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f003 0203 	and.w	r2, r3, #3
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	fa02 f303 	lsl.w	r3, r2, r3
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 80a2 	beq.w	8006342 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	4b57      	ldr	r3, [pc, #348]	; (8006360 <HAL_GPIO_Init+0x2e8>)
 8006204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006206:	4a56      	ldr	r2, [pc, #344]	; (8006360 <HAL_GPIO_Init+0x2e8>)
 8006208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800620c:	6453      	str	r3, [r2, #68]	; 0x44
 800620e:	4b54      	ldr	r3, [pc, #336]	; (8006360 <HAL_GPIO_Init+0x2e8>)
 8006210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800621a:	4a52      	ldr	r2, [pc, #328]	; (8006364 <HAL_GPIO_Init+0x2ec>)
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	089b      	lsrs	r3, r3, #2
 8006220:	3302      	adds	r3, #2
 8006222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	220f      	movs	r2, #15
 8006232:	fa02 f303 	lsl.w	r3, r2, r3
 8006236:	43db      	mvns	r3, r3
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	4013      	ands	r3, r2
 800623c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a49      	ldr	r2, [pc, #292]	; (8006368 <HAL_GPIO_Init+0x2f0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d019      	beq.n	800627a <HAL_GPIO_Init+0x202>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a48      	ldr	r2, [pc, #288]	; (800636c <HAL_GPIO_Init+0x2f4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d013      	beq.n	8006276 <HAL_GPIO_Init+0x1fe>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a47      	ldr	r2, [pc, #284]	; (8006370 <HAL_GPIO_Init+0x2f8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d00d      	beq.n	8006272 <HAL_GPIO_Init+0x1fa>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a46      	ldr	r2, [pc, #280]	; (8006374 <HAL_GPIO_Init+0x2fc>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d007      	beq.n	800626e <HAL_GPIO_Init+0x1f6>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a45      	ldr	r2, [pc, #276]	; (8006378 <HAL_GPIO_Init+0x300>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d101      	bne.n	800626a <HAL_GPIO_Init+0x1f2>
 8006266:	2304      	movs	r3, #4
 8006268:	e008      	b.n	800627c <HAL_GPIO_Init+0x204>
 800626a:	2307      	movs	r3, #7
 800626c:	e006      	b.n	800627c <HAL_GPIO_Init+0x204>
 800626e:	2303      	movs	r3, #3
 8006270:	e004      	b.n	800627c <HAL_GPIO_Init+0x204>
 8006272:	2302      	movs	r3, #2
 8006274:	e002      	b.n	800627c <HAL_GPIO_Init+0x204>
 8006276:	2301      	movs	r3, #1
 8006278:	e000      	b.n	800627c <HAL_GPIO_Init+0x204>
 800627a:	2300      	movs	r3, #0
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	f002 0203 	and.w	r2, r2, #3
 8006282:	0092      	lsls	r2, r2, #2
 8006284:	4093      	lsls	r3, r2
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	4313      	orrs	r3, r2
 800628a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800628c:	4935      	ldr	r1, [pc, #212]	; (8006364 <HAL_GPIO_Init+0x2ec>)
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	089b      	lsrs	r3, r3, #2
 8006292:	3302      	adds	r3, #2
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800629a:	4b38      	ldr	r3, [pc, #224]	; (800637c <HAL_GPIO_Init+0x304>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	43db      	mvns	r3, r3
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	4013      	ands	r3, r2
 80062a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062be:	4a2f      	ldr	r2, [pc, #188]	; (800637c <HAL_GPIO_Init+0x304>)
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062c4:	4b2d      	ldr	r3, [pc, #180]	; (800637c <HAL_GPIO_Init+0x304>)
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	43db      	mvns	r3, r3
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	4013      	ands	r3, r2
 80062d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062e8:	4a24      	ldr	r2, [pc, #144]	; (800637c <HAL_GPIO_Init+0x304>)
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062ee:	4b23      	ldr	r3, [pc, #140]	; (800637c <HAL_GPIO_Init+0x304>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	43db      	mvns	r3, r3
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	4013      	ands	r3, r2
 80062fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006312:	4a1a      	ldr	r2, [pc, #104]	; (800637c <HAL_GPIO_Init+0x304>)
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006318:	4b18      	ldr	r3, [pc, #96]	; (800637c <HAL_GPIO_Init+0x304>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	43db      	mvns	r3, r3
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	4013      	ands	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4313      	orrs	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800633c:	4a0f      	ldr	r2, [pc, #60]	; (800637c <HAL_GPIO_Init+0x304>)
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	3301      	adds	r3, #1
 8006346:	61fb      	str	r3, [r7, #28]
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	2b0f      	cmp	r3, #15
 800634c:	f67f aea2 	bls.w	8006094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006350:	bf00      	nop
 8006352:	bf00      	nop
 8006354:	3724      	adds	r7, #36	; 0x24
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40023800 	.word	0x40023800
 8006364:	40013800 	.word	0x40013800
 8006368:	40020000 	.word	0x40020000
 800636c:	40020400 	.word	0x40020400
 8006370:	40020800 	.word	0x40020800
 8006374:	40020c00 	.word	0x40020c00
 8006378:	40021000 	.word	0x40021000
 800637c:	40013c00 	.word	0x40013c00

08006380 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	460b      	mov	r3, r1
 800638a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	691a      	ldr	r2, [r3, #16]
 8006390:	887b      	ldrh	r3, [r7, #2]
 8006392:	4013      	ands	r3, r2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006398:	2301      	movs	r3, #1
 800639a:	73fb      	strb	r3, [r7, #15]
 800639c:	e001      	b.n	80063a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800639e:	2300      	movs	r3, #0
 80063a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	807b      	strh	r3, [r7, #2]
 80063bc:	4613      	mov	r3, r2
 80063be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063c0:	787b      	ldrb	r3, [r7, #1]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063c6:	887a      	ldrh	r2, [r7, #2]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80063cc:	e003      	b.n	80063d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80063ce:	887b      	ldrh	r3, [r7, #2]
 80063d0:	041a      	lsls	r2, r3, #16
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	619a      	str	r2, [r3, #24]
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
	...

080063e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4603      	mov	r3, r0
 80063ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80063ee:	4b08      	ldr	r3, [pc, #32]	; (8006410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063f0:	695a      	ldr	r2, [r3, #20]
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	4013      	ands	r3, r2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d006      	beq.n	8006408 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80063fa:	4a05      	ldr	r2, [pc, #20]	; (8006410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063fc:	88fb      	ldrh	r3, [r7, #6]
 80063fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006400:	88fb      	ldrh	r3, [r7, #6]
 8006402:	4618      	mov	r0, r3
 8006404:	f7fb ffdc 	bl	80023c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006408:	bf00      	nop
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	40013c00 	.word	0x40013c00

08006414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e12b      	b.n	800667e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d106      	bne.n	8006440 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7fe f86e 	bl	800451c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2224      	movs	r2, #36	; 0x24
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0201 	bic.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006466:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006476:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006478:	f003 f8ac 	bl	80095d4 <HAL_RCC_GetPCLK1Freq>
 800647c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	4a81      	ldr	r2, [pc, #516]	; (8006688 <HAL_I2C_Init+0x274>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d807      	bhi.n	8006498 <HAL_I2C_Init+0x84>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4a80      	ldr	r2, [pc, #512]	; (800668c <HAL_I2C_Init+0x278>)
 800648c:	4293      	cmp	r3, r2
 800648e:	bf94      	ite	ls
 8006490:	2301      	movls	r3, #1
 8006492:	2300      	movhi	r3, #0
 8006494:	b2db      	uxtb	r3, r3
 8006496:	e006      	b.n	80064a6 <HAL_I2C_Init+0x92>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4a7d      	ldr	r2, [pc, #500]	; (8006690 <HAL_I2C_Init+0x27c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	bf94      	ite	ls
 80064a0:	2301      	movls	r3, #1
 80064a2:	2300      	movhi	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e0e7      	b.n	800667e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4a78      	ldr	r2, [pc, #480]	; (8006694 <HAL_I2C_Init+0x280>)
 80064b2:	fba2 2303 	umull	r2, r3, r2, r3
 80064b6:	0c9b      	lsrs	r3, r3, #18
 80064b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	4a6a      	ldr	r2, [pc, #424]	; (8006688 <HAL_I2C_Init+0x274>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d802      	bhi.n	80064e8 <HAL_I2C_Init+0xd4>
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	3301      	adds	r3, #1
 80064e6:	e009      	b.n	80064fc <HAL_I2C_Init+0xe8>
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80064ee:	fb02 f303 	mul.w	r3, r2, r3
 80064f2:	4a69      	ldr	r2, [pc, #420]	; (8006698 <HAL_I2C_Init+0x284>)
 80064f4:	fba2 2303 	umull	r2, r3, r2, r3
 80064f8:	099b      	lsrs	r3, r3, #6
 80064fa:	3301      	adds	r3, #1
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	430b      	orrs	r3, r1
 8006502:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800650e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	495c      	ldr	r1, [pc, #368]	; (8006688 <HAL_I2C_Init+0x274>)
 8006518:	428b      	cmp	r3, r1
 800651a:	d819      	bhi.n	8006550 <HAL_I2C_Init+0x13c>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	1e59      	subs	r1, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	fbb1 f3f3 	udiv	r3, r1, r3
 800652a:	1c59      	adds	r1, r3, #1
 800652c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006530:	400b      	ands	r3, r1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <HAL_I2C_Init+0x138>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	1e59      	subs	r1, r3, #1
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	fbb1 f3f3 	udiv	r3, r1, r3
 8006544:	3301      	adds	r3, #1
 8006546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800654a:	e051      	b.n	80065f0 <HAL_I2C_Init+0x1dc>
 800654c:	2304      	movs	r3, #4
 800654e:	e04f      	b.n	80065f0 <HAL_I2C_Init+0x1dc>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d111      	bne.n	800657c <HAL_I2C_Init+0x168>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	1e58      	subs	r0, r3, #1
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6859      	ldr	r1, [r3, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	440b      	add	r3, r1
 8006566:	fbb0 f3f3 	udiv	r3, r0, r3
 800656a:	3301      	adds	r3, #1
 800656c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006570:	2b00      	cmp	r3, #0
 8006572:	bf0c      	ite	eq
 8006574:	2301      	moveq	r3, #1
 8006576:	2300      	movne	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	e012      	b.n	80065a2 <HAL_I2C_Init+0x18e>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	1e58      	subs	r0, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6859      	ldr	r1, [r3, #4]
 8006584:	460b      	mov	r3, r1
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	440b      	add	r3, r1
 800658a:	0099      	lsls	r1, r3, #2
 800658c:	440b      	add	r3, r1
 800658e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006592:	3301      	adds	r3, #1
 8006594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006598:	2b00      	cmp	r3, #0
 800659a:	bf0c      	ite	eq
 800659c:	2301      	moveq	r3, #1
 800659e:	2300      	movne	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <HAL_I2C_Init+0x196>
 80065a6:	2301      	movs	r3, #1
 80065a8:	e022      	b.n	80065f0 <HAL_I2C_Init+0x1dc>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10e      	bne.n	80065d0 <HAL_I2C_Init+0x1bc>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	1e58      	subs	r0, r3, #1
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6859      	ldr	r1, [r3, #4]
 80065ba:	460b      	mov	r3, r1
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	440b      	add	r3, r1
 80065c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80065c4:	3301      	adds	r3, #1
 80065c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ce:	e00f      	b.n	80065f0 <HAL_I2C_Init+0x1dc>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	1e58      	subs	r0, r3, #1
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6859      	ldr	r1, [r3, #4]
 80065d8:	460b      	mov	r3, r1
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	440b      	add	r3, r1
 80065de:	0099      	lsls	r1, r3, #2
 80065e0:	440b      	add	r3, r1
 80065e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80065e6:	3301      	adds	r3, #1
 80065e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	6809      	ldr	r1, [r1, #0]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69da      	ldr	r2, [r3, #28]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800661e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6911      	ldr	r1, [r2, #16]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	68d2      	ldr	r2, [r2, #12]
 800662a:	4311      	orrs	r1, r2
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6812      	ldr	r2, [r2, #0]
 8006630:	430b      	orrs	r3, r1
 8006632:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	695a      	ldr	r2, [r3, #20]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	431a      	orrs	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0201 	orr.w	r2, r2, #1
 800665e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2220      	movs	r2, #32
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	000186a0 	.word	0x000186a0
 800668c:	001e847f 	.word	0x001e847f
 8006690:	003d08ff 	.word	0x003d08ff
 8006694:	431bde83 	.word	0x431bde83
 8006698:	10624dd3 	.word	0x10624dd3

0800669c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b088      	sub	sp, #32
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	607a      	str	r2, [r7, #4]
 80066a6:	461a      	mov	r2, r3
 80066a8:	460b      	mov	r3, r1
 80066aa:	817b      	strh	r3, [r7, #10]
 80066ac:	4613      	mov	r3, r2
 80066ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066b0:	f7fe fb82 	bl	8004db8 <HAL_GetTick>
 80066b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b20      	cmp	r3, #32
 80066c0:	f040 80e0 	bne.w	8006884 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	2319      	movs	r3, #25
 80066ca:	2201      	movs	r2, #1
 80066cc:	4970      	ldr	r1, [pc, #448]	; (8006890 <HAL_I2C_Master_Transmit+0x1f4>)
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f002 f8e6 	bl	80088a0 <I2C_WaitOnFlagUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80066da:	2302      	movs	r3, #2
 80066dc:	e0d3      	b.n	8006886 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d101      	bne.n	80066ec <HAL_I2C_Master_Transmit+0x50>
 80066e8:	2302      	movs	r3, #2
 80066ea:	e0cc      	b.n	8006886 <HAL_I2C_Master_Transmit+0x1ea>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d007      	beq.n	8006712 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f042 0201 	orr.w	r2, r2, #1
 8006710:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006720:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2221      	movs	r2, #33	; 0x21
 8006726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2210      	movs	r2, #16
 800672e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	893a      	ldrh	r2, [r7, #8]
 8006742:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4a50      	ldr	r2, [pc, #320]	; (8006894 <HAL_I2C_Master_Transmit+0x1f8>)
 8006752:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006754:	8979      	ldrh	r1, [r7, #10]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	6a3a      	ldr	r2, [r7, #32]
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f001 fea8 	bl	80084b0 <I2C_MasterRequestWrite>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e08d      	b.n	8006886 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800676a:	2300      	movs	r3, #0
 800676c:	613b      	str	r3, [r7, #16]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	613b      	str	r3, [r7, #16]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	613b      	str	r3, [r7, #16]
 800677e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006780:	e066      	b.n	8006850 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	6a39      	ldr	r1, [r7, #32]
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f002 f960 	bl	8008a4c <I2C_WaitOnTXEFlagUntilTimeout>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00d      	beq.n	80067ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	2b04      	cmp	r3, #4
 8006798:	d107      	bne.n	80067aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e06b      	b.n	8006886 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	781a      	ldrb	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b04      	cmp	r3, #4
 80067ea:	d11b      	bne.n	8006824 <HAL_I2C_Master_Transmit+0x188>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d017      	beq.n	8006824 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	781a      	ldrb	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800680e:	b29b      	uxth	r3, r3
 8006810:	3b01      	subs	r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681c:	3b01      	subs	r3, #1
 800681e:	b29a      	uxth	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	6a39      	ldr	r1, [r7, #32]
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f002 f950 	bl	8008ace <I2C_WaitOnBTFFlagUntilTimeout>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00d      	beq.n	8006850 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006838:	2b04      	cmp	r3, #4
 800683a:	d107      	bne.n	800684c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800684a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e01a      	b.n	8006886 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006854:	2b00      	cmp	r3, #0
 8006856:	d194      	bne.n	8006782 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2220      	movs	r2, #32
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006880:	2300      	movs	r3, #0
 8006882:	e000      	b.n	8006886 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006884:	2302      	movs	r3, #2
  }
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	00100002 	.word	0x00100002
 8006894:	ffff0000 	.word	0xffff0000

08006898 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08c      	sub	sp, #48	; 0x30
 800689c:	af02      	add	r7, sp, #8
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	607a      	str	r2, [r7, #4]
 80068a2:	461a      	mov	r2, r3
 80068a4:	460b      	mov	r3, r1
 80068a6:	817b      	strh	r3, [r7, #10]
 80068a8:	4613      	mov	r3, r2
 80068aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068ac:	f7fe fa84 	bl	8004db8 <HAL_GetTick>
 80068b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b20      	cmp	r3, #32
 80068bc:	f040 820b 	bne.w	8006cd6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	2319      	movs	r3, #25
 80068c6:	2201      	movs	r2, #1
 80068c8:	497c      	ldr	r1, [pc, #496]	; (8006abc <HAL_I2C_Master_Receive+0x224>)
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f001 ffe8 	bl	80088a0 <I2C_WaitOnFlagUntilTimeout>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80068d6:	2302      	movs	r3, #2
 80068d8:	e1fe      	b.n	8006cd8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <HAL_I2C_Master_Receive+0x50>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e1f7      	b.n	8006cd8 <HAL_I2C_Master_Receive+0x440>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d007      	beq.n	800690e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f042 0201 	orr.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800691c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2222      	movs	r2, #34	; 0x22
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2210      	movs	r2, #16
 800692a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	893a      	ldrh	r2, [r7, #8]
 800693e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4a5c      	ldr	r2, [pc, #368]	; (8006ac0 <HAL_I2C_Master_Receive+0x228>)
 800694e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006950:	8979      	ldrh	r1, [r7, #10]
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f001 fe2c 	bl	80085b4 <I2C_MasterRequestRead>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e1b8      	b.n	8006cd8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800696a:	2b00      	cmp	r3, #0
 800696c:	d113      	bne.n	8006996 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800696e:	2300      	movs	r3, #0
 8006970:	623b      	str	r3, [r7, #32]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	623b      	str	r3, [r7, #32]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	623b      	str	r3, [r7, #32]
 8006982:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	e18c      	b.n	8006cb0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699a:	2b01      	cmp	r3, #1
 800699c:	d11b      	bne.n	80069d6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ae:	2300      	movs	r3, #0
 80069b0:	61fb      	str	r3, [r7, #28]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	61fb      	str	r3, [r7, #28]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	61fb      	str	r3, [r7, #28]
 80069c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	e16c      	b.n	8006cb0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d11b      	bne.n	8006a16 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069fe:	2300      	movs	r3, #0
 8006a00:	61bb      	str	r3, [r7, #24]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	61bb      	str	r3, [r7, #24]
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	e14c      	b.n	8006cb0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a26:	2300      	movs	r3, #0
 8006a28:	617b      	str	r3, [r7, #20]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006a3c:	e138      	b.n	8006cb0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	f200 80f1 	bhi.w	8006c2a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d123      	bne.n	8006a98 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f002 f8ad 	bl	8008bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e139      	b.n	8006cd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691a      	ldr	r2, [r3, #16]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a96:	e10b      	b.n	8006cb0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d14e      	bne.n	8006b3e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	4906      	ldr	r1, [pc, #24]	; (8006ac4 <HAL_I2C_Master_Receive+0x22c>)
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f001 fef8 	bl	80088a0 <I2C_WaitOnFlagUntilTimeout>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d008      	beq.n	8006ac8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e10e      	b.n	8006cd8 <HAL_I2C_Master_Receive+0x440>
 8006aba:	bf00      	nop
 8006abc:	00100002 	.word	0x00100002
 8006ac0:	ffff0000 	.word	0xffff0000
 8006ac4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691a      	ldr	r2, [r3, #16]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	3b01      	subs	r3, #1
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	691a      	ldr	r2, [r3, #16]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	b2d2      	uxtb	r2, r2
 8006b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b3c:	e0b8      	b.n	8006cb0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	2200      	movs	r2, #0
 8006b46:	4966      	ldr	r1, [pc, #408]	; (8006ce0 <HAL_I2C_Master_Receive+0x448>)
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f001 fea9 	bl	80088a0 <I2C_WaitOnFlagUntilTimeout>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e0bf      	b.n	8006cd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691a      	ldr	r2, [r3, #16]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	1c5a      	adds	r2, r3, #1
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	3b01      	subs	r3, #1
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	494f      	ldr	r1, [pc, #316]	; (8006ce0 <HAL_I2C_Master_Receive+0x448>)
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f001 fe7b 	bl	80088a0 <I2C_WaitOnFlagUntilTimeout>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e091      	b.n	8006cd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691a      	ldr	r2, [r3, #16]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be0:	3b01      	subs	r3, #1
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	691a      	ldr	r2, [r3, #16]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c12:	3b01      	subs	r3, #1
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c28:	e042      	b.n	8006cb0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f001 ffc0 	bl	8008bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e04c      	b.n	8006cd8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	691a      	ldr	r2, [r3, #16]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	b2d2      	uxtb	r2, r2
 8006c4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	f003 0304 	and.w	r3, r3, #4
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d118      	bne.n	8006cb0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	691a      	ldr	r2, [r3, #16]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	b2d2      	uxtb	r2, r2
 8006c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f47f aec2 	bne.w	8006a3e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e000      	b.n	8006cd8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006cd6:	2302      	movs	r3, #2
  }
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3728      	adds	r7, #40	; 0x28
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	00010004 	.word	0x00010004

08006ce4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d04:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d0c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
 8006d10:	2b10      	cmp	r3, #16
 8006d12:	d003      	beq.n	8006d1c <HAL_I2C_EV_IRQHandler+0x38>
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	2b40      	cmp	r3, #64	; 0x40
 8006d18:	f040 80c1 	bne.w	8006e9e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10d      	bne.n	8006d52 <HAL_I2C_EV_IRQHandler+0x6e>
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006d3c:	d003      	beq.n	8006d46 <HAL_I2C_EV_IRQHandler+0x62>
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006d44:	d101      	bne.n	8006d4a <HAL_I2C_EV_IRQHandler+0x66>
 8006d46:	2301      	movs	r3, #1
 8006d48:	e000      	b.n	8006d4c <HAL_I2C_EV_IRQHandler+0x68>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	f000 8132 	beq.w	8006fb6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00c      	beq.n	8006d76 <HAL_I2C_EV_IRQHandler+0x92>
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	0a5b      	lsrs	r3, r3, #9
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d006      	beq.n	8006d76 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 ffa8 	bl	8008cbe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fd83 	bl	800787a <I2C_Master_SB>
 8006d74:	e092      	b.n	8006e9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	08db      	lsrs	r3, r3, #3
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d009      	beq.n	8006d96 <HAL_I2C_EV_IRQHandler+0xb2>
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	0a5b      	lsrs	r3, r3, #9
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fdf9 	bl	8007986 <I2C_Master_ADD10>
 8006d94:	e082      	b.n	8006e9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	085b      	lsrs	r3, r3, #1
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d009      	beq.n	8006db6 <HAL_I2C_EV_IRQHandler+0xd2>
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	0a5b      	lsrs	r3, r3, #9
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fe13 	bl	80079da <I2C_Master_ADDR>
 8006db4:	e072      	b.n	8006e9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	089b      	lsrs	r3, r3, #2
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d03b      	beq.n	8006e3a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dd0:	f000 80f3 	beq.w	8006fba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	09db      	lsrs	r3, r3, #7
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00f      	beq.n	8006e00 <HAL_I2C_EV_IRQHandler+0x11c>
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	0a9b      	lsrs	r3, r3, #10
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d009      	beq.n	8006e00 <HAL_I2C_EV_IRQHandler+0x11c>
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	089b      	lsrs	r3, r3, #2
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d103      	bne.n	8006e00 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f9f3 	bl	80071e4 <I2C_MasterTransmit_TXE>
 8006dfe:	e04d      	b.n	8006e9c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	089b      	lsrs	r3, r3, #2
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 80d6 	beq.w	8006fba <HAL_I2C_EV_IRQHandler+0x2d6>
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	0a5b      	lsrs	r3, r3, #9
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 80cf 	beq.w	8006fba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006e1c:	7bbb      	ldrb	r3, [r7, #14]
 8006e1e:	2b21      	cmp	r3, #33	; 0x21
 8006e20:	d103      	bne.n	8006e2a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fa7a 	bl	800731c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e28:	e0c7      	b.n	8006fba <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	2b40      	cmp	r3, #64	; 0x40
 8006e2e:	f040 80c4 	bne.w	8006fba <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fae8 	bl	8007408 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e38:	e0bf      	b.n	8006fba <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e48:	f000 80b7 	beq.w	8006fba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	099b      	lsrs	r3, r3, #6
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00f      	beq.n	8006e78 <HAL_I2C_EV_IRQHandler+0x194>
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	0a9b      	lsrs	r3, r3, #10
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d009      	beq.n	8006e78 <HAL_I2C_EV_IRQHandler+0x194>
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	089b      	lsrs	r3, r3, #2
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d103      	bne.n	8006e78 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fb5d 	bl	8007530 <I2C_MasterReceive_RXNE>
 8006e76:	e011      	b.n	8006e9c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	089b      	lsrs	r3, r3, #2
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 809a 	beq.w	8006fba <HAL_I2C_EV_IRQHandler+0x2d6>
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	0a5b      	lsrs	r3, r3, #9
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 8093 	beq.w	8006fba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fc06 	bl	80076a6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e9a:	e08e      	b.n	8006fba <HAL_I2C_EV_IRQHandler+0x2d6>
 8006e9c:	e08d      	b.n	8006fba <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d004      	beq.n	8006eb0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	61fb      	str	r3, [r7, #28]
 8006eae:	e007      	b.n	8006ec0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	085b      	lsrs	r3, r3, #1
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d012      	beq.n	8006ef2 <HAL_I2C_EV_IRQHandler+0x20e>
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	0a5b      	lsrs	r3, r3, #9
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00c      	beq.n	8006ef2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006ee8:	69b9      	ldr	r1, [r7, #24]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 ffc4 	bl	8007e78 <I2C_Slave_ADDR>
 8006ef0:	e066      	b.n	8006fc0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	091b      	lsrs	r3, r3, #4
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d009      	beq.n	8006f12 <HAL_I2C_EV_IRQHandler+0x22e>
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	0a5b      	lsrs	r3, r3, #9
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fffe 	bl	8007f0c <I2C_Slave_STOPF>
 8006f10:	e056      	b.n	8006fc0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f12:	7bbb      	ldrb	r3, [r7, #14]
 8006f14:	2b21      	cmp	r3, #33	; 0x21
 8006f16:	d002      	beq.n	8006f1e <HAL_I2C_EV_IRQHandler+0x23a>
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	2b29      	cmp	r3, #41	; 0x29
 8006f1c:	d125      	bne.n	8006f6a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	09db      	lsrs	r3, r3, #7
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00f      	beq.n	8006f4a <HAL_I2C_EV_IRQHandler+0x266>
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	0a9b      	lsrs	r3, r3, #10
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <HAL_I2C_EV_IRQHandler+0x266>
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	089b      	lsrs	r3, r3, #2
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d103      	bne.n	8006f4a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 feda 	bl	8007cfc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f48:	e039      	b.n	8006fbe <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	089b      	lsrs	r3, r3, #2
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d033      	beq.n	8006fbe <HAL_I2C_EV_IRQHandler+0x2da>
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	0a5b      	lsrs	r3, r3, #9
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d02d      	beq.n	8006fbe <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 ff07 	bl	8007d76 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f68:	e029      	b.n	8006fbe <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	099b      	lsrs	r3, r3, #6
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00f      	beq.n	8006f96 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	0a9b      	lsrs	r3, r3, #10
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d009      	beq.n	8006f96 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	089b      	lsrs	r3, r3, #2
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d103      	bne.n	8006f96 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 ff12 	bl	8007db8 <I2C_SlaveReceive_RXNE>
 8006f94:	e014      	b.n	8006fc0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	089b      	lsrs	r3, r3, #2
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00e      	beq.n	8006fc0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	0a5b      	lsrs	r3, r3, #9
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d008      	beq.n	8006fc0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 ff40 	bl	8007e34 <I2C_SlaveReceive_BTF>
 8006fb4:	e004      	b.n	8006fc0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006fb6:	bf00      	nop
 8006fb8:	e002      	b.n	8006fc0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fba:	bf00      	nop
 8006fbc:	e000      	b.n	8006fc0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fbe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006fc0:	3720      	adds	r7, #32
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b08a      	sub	sp, #40	; 0x28
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fe8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006fea:	6a3b      	ldr	r3, [r7, #32]
 8006fec:	0a1b      	lsrs	r3, r3, #8
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00e      	beq.n	8007014 <HAL_I2C_ER_IRQHandler+0x4e>
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	0a1b      	lsrs	r3, r3, #8
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d008      	beq.n	8007014 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007004:	f043 0301 	orr.w	r3, r3, #1
 8007008:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007012:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	0a5b      	lsrs	r3, r3, #9
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00e      	beq.n	800703e <HAL_I2C_ER_IRQHandler+0x78>
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	0a1b      	lsrs	r3, r3, #8
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d008      	beq.n	800703e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	f043 0302 	orr.w	r3, r3, #2
 8007032:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800703c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	0a9b      	lsrs	r3, r3, #10
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d03f      	beq.n	80070ca <HAL_I2C_ER_IRQHandler+0x104>
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	0a1b      	lsrs	r3, r3, #8
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d039      	beq.n	80070ca <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007056:	7efb      	ldrb	r3, [r7, #27]
 8007058:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800705e:	b29b      	uxth	r3, r3
 8007060:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007068:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007070:	7ebb      	ldrb	r3, [r7, #26]
 8007072:	2b20      	cmp	r3, #32
 8007074:	d112      	bne.n	800709c <HAL_I2C_ER_IRQHandler+0xd6>
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10f      	bne.n	800709c <HAL_I2C_ER_IRQHandler+0xd6>
 800707c:	7cfb      	ldrb	r3, [r7, #19]
 800707e:	2b21      	cmp	r3, #33	; 0x21
 8007080:	d008      	beq.n	8007094 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007082:	7cfb      	ldrb	r3, [r7, #19]
 8007084:	2b29      	cmp	r3, #41	; 0x29
 8007086:	d005      	beq.n	8007094 <HAL_I2C_ER_IRQHandler+0xce>
 8007088:	7cfb      	ldrb	r3, [r7, #19]
 800708a:	2b28      	cmp	r3, #40	; 0x28
 800708c:	d106      	bne.n	800709c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2b21      	cmp	r3, #33	; 0x21
 8007092:	d103      	bne.n	800709c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f001 f869 	bl	800816c <I2C_Slave_AF>
 800709a:	e016      	b.n	80070ca <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070a4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	f043 0304 	orr.w	r3, r3, #4
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80070ae:	7efb      	ldrb	r3, [r7, #27]
 80070b0:	2b10      	cmp	r3, #16
 80070b2:	d002      	beq.n	80070ba <HAL_I2C_ER_IRQHandler+0xf4>
 80070b4:	7efb      	ldrb	r3, [r7, #27]
 80070b6:	2b40      	cmp	r3, #64	; 0x40
 80070b8:	d107      	bne.n	80070ca <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070c8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	0adb      	lsrs	r3, r3, #11
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00e      	beq.n	80070f4 <HAL_I2C_ER_IRQHandler+0x12e>
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	0a1b      	lsrs	r3, r3, #8
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d008      	beq.n	80070f4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e4:	f043 0308 	orr.w	r3, r3, #8
 80070e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80070f2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d008      	beq.n	800710c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	431a      	orrs	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f001 f8a0 	bl	800824c <I2C_ITError>
  }
}
 800710c:	bf00      	nop
 800710e:	3728      	adds	r7, #40	; 0x28
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	460b      	mov	r3, r1
 800716e:	70fb      	strb	r3, [r7, #3]
 8007170:	4613      	mov	r3, r2
 8007172:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007206:	2b00      	cmp	r3, #0
 8007208:	d150      	bne.n	80072ac <I2C_MasterTransmit_TXE+0xc8>
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	2b21      	cmp	r3, #33	; 0x21
 800720e:	d14d      	bne.n	80072ac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b08      	cmp	r3, #8
 8007214:	d01d      	beq.n	8007252 <I2C_MasterTransmit_TXE+0x6e>
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2b20      	cmp	r3, #32
 800721a:	d01a      	beq.n	8007252 <I2C_MasterTransmit_TXE+0x6e>
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007222:	d016      	beq.n	8007252 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007232:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2211      	movs	r2, #17
 8007238:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2220      	movs	r2, #32
 8007246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff ff62 	bl	8007114 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007250:	e060      	b.n	8007314 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007260:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007270:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2220      	movs	r2, #32
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b40      	cmp	r3, #64	; 0x40
 800728a:	d107      	bne.n	800729c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7ff ff7d 	bl	8007194 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800729a:	e03b      	b.n	8007314 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff ff35 	bl	8007114 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80072aa:	e033      	b.n	8007314 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	2b21      	cmp	r3, #33	; 0x21
 80072b0:	d005      	beq.n	80072be <I2C_MasterTransmit_TXE+0xda>
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	2b40      	cmp	r3, #64	; 0x40
 80072b6:	d12d      	bne.n	8007314 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
 80072ba:	2b22      	cmp	r3, #34	; 0x22
 80072bc:	d12a      	bne.n	8007314 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d108      	bne.n	80072da <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072d6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80072d8:	e01c      	b.n	8007314 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b40      	cmp	r3, #64	; 0x40
 80072e4:	d103      	bne.n	80072ee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f88e 	bl	8007408 <I2C_MemoryTransmit_TXE_BTF>
}
 80072ec:	e012      	b.n	8007314 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	781a      	ldrb	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007308:	b29b      	uxth	r3, r3
 800730a:	3b01      	subs	r3, #1
 800730c:	b29a      	uxth	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007312:	e7ff      	b.n	8007314 <I2C_MasterTransmit_TXE+0x130>
 8007314:	bf00      	nop
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b21      	cmp	r3, #33	; 0x21
 8007334:	d164      	bne.n	8007400 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733a:	b29b      	uxth	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d012      	beq.n	8007366 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	781a      	ldrb	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735a:	b29b      	uxth	r3, r3
 800735c:	3b01      	subs	r3, #1
 800735e:	b29a      	uxth	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007364:	e04c      	b.n	8007400 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b08      	cmp	r3, #8
 800736a:	d01d      	beq.n	80073a8 <I2C_MasterTransmit_BTF+0x8c>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b20      	cmp	r3, #32
 8007370:	d01a      	beq.n	80073a8 <I2C_MasterTransmit_BTF+0x8c>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007378:	d016      	beq.n	80073a8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007388:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2211      	movs	r2, #17
 800738e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2220      	movs	r2, #32
 800739c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff feb7 	bl	8007114 <HAL_I2C_MasterTxCpltCallback>
}
 80073a6:	e02b      	b.n	8007400 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073b6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073c6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b40      	cmp	r3, #64	; 0x40
 80073e0:	d107      	bne.n	80073f2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff fed2 	bl	8007194 <HAL_I2C_MemTxCpltCallback>
}
 80073f0:	e006      	b.n	8007400 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7ff fe8a 	bl	8007114 <HAL_I2C_MasterTxCpltCallback>
}
 8007400:	bf00      	nop
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007416:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800741c:	2b00      	cmp	r3, #0
 800741e:	d11d      	bne.n	800745c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007424:	2b01      	cmp	r3, #1
 8007426:	d10b      	bne.n	8007440 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800742c:	b2da      	uxtb	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007438:	1c9a      	adds	r2, r3, #2
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800743e:	e073      	b.n	8007528 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007444:	b29b      	uxth	r3, r3
 8007446:	121b      	asrs	r3, r3, #8
 8007448:	b2da      	uxtb	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007454:	1c5a      	adds	r2, r3, #1
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	651a      	str	r2, [r3, #80]	; 0x50
}
 800745a:	e065      	b.n	8007528 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007460:	2b01      	cmp	r3, #1
 8007462:	d10b      	bne.n	800747c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007468:	b2da      	uxtb	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	651a      	str	r2, [r3, #80]	; 0x50
}
 800747a:	e055      	b.n	8007528 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007480:	2b02      	cmp	r3, #2
 8007482:	d151      	bne.n	8007528 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	2b22      	cmp	r3, #34	; 0x22
 8007488:	d10d      	bne.n	80074a6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007498:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80074a4:	e040      	b.n	8007528 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d015      	beq.n	80074dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
 80074b2:	2b21      	cmp	r3, #33	; 0x21
 80074b4:	d112      	bne.n	80074dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ba:	781a      	ldrb	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	3b01      	subs	r3, #1
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80074da:	e025      	b.n	8007528 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d120      	bne.n	8007528 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	2b21      	cmp	r3, #33	; 0x21
 80074ea:	d11d      	bne.n	8007528 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074fa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800750a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2220      	movs	r2, #32
 8007516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7ff fe36 	bl	8007194 <HAL_I2C_MemTxCpltCallback>
}
 8007528:	bf00      	nop
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b22      	cmp	r3, #34	; 0x22
 8007542:	f040 80ac 	bne.w	800769e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800754a:	b29b      	uxth	r3, r3
 800754c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b03      	cmp	r3, #3
 8007552:	d921      	bls.n	8007598 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	691a      	ldr	r2, [r3, #16]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755e:	b2d2      	uxtb	r2, r2
 8007560:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007570:	b29b      	uxth	r3, r3
 8007572:	3b01      	subs	r3, #1
 8007574:	b29a      	uxth	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757e:	b29b      	uxth	r3, r3
 8007580:	2b03      	cmp	r3, #3
 8007582:	f040 808c 	bne.w	800769e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007594:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007596:	e082      	b.n	800769e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759c:	2b02      	cmp	r3, #2
 800759e:	d075      	beq.n	800768c <I2C_MasterReceive_RXNE+0x15c>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d002      	beq.n	80075ac <I2C_MasterReceive_RXNE+0x7c>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d16f      	bne.n	800768c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 facf 	bl	8008b50 <I2C_WaitOnSTOPRequestThroughIT>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d142      	bne.n	800763e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075c6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691a      	ldr	r2, [r3, #16]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2220      	movs	r2, #32
 8007602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b40      	cmp	r3, #64	; 0x40
 8007610:	d10a      	bne.n	8007628 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff fdc1 	bl	80071a8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007626:	e03a      	b.n	800769e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2212      	movs	r2, #18
 8007634:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff fd76 	bl	8007128 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800763c:	e02f      	b.n	800769e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	685a      	ldr	r2, [r3, #4]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800764c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	691a      	ldr	r2, [r3, #16]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	b2d2      	uxtb	r2, r2
 800765a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800766a:	b29b      	uxth	r3, r3
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff fd99 	bl	80071bc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800768a:	e008      	b.n	800769e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800769a:	605a      	str	r2, [r3, #4]
}
 800769c:	e7ff      	b.n	800769e <I2C_MasterReceive_RXNE+0x16e>
 800769e:	bf00      	nop
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b084      	sub	sp, #16
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	d11b      	bne.n	80076f6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076cc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	691a      	ldr	r2, [r3, #16]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	b2d2      	uxtb	r2, r2
 80076da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	3b01      	subs	r3, #1
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80076f4:	e0bd      	b.n	8007872 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d129      	bne.n	8007754 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685a      	ldr	r2, [r3, #4]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800770e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b04      	cmp	r3, #4
 8007714:	d00a      	beq.n	800772c <I2C_MasterReceive_BTF+0x86>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b02      	cmp	r3, #2
 800771a:	d007      	beq.n	800772c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800772a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	691a      	ldr	r2, [r3, #16]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007736:	b2d2      	uxtb	r2, r2
 8007738:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007748:	b29b      	uxth	r3, r3
 800774a:	3b01      	subs	r3, #1
 800774c:	b29a      	uxth	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007752:	e08e      	b.n	8007872 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007758:	b29b      	uxth	r3, r3
 800775a:	2b02      	cmp	r3, #2
 800775c:	d176      	bne.n	800784c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d002      	beq.n	800776a <I2C_MasterReceive_BTF+0xc4>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b10      	cmp	r3, #16
 8007768:	d108      	bne.n	800777c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	e019      	b.n	80077b0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2b04      	cmp	r3, #4
 8007780:	d002      	beq.n	8007788 <I2C_MasterReceive_BTF+0xe2>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2b02      	cmp	r3, #2
 8007786:	d108      	bne.n	800779a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	e00a      	b.n	80077b0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b10      	cmp	r3, #16
 800779e:	d007      	beq.n	80077b0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691a      	ldr	r2, [r3, #16]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ba:	b2d2      	uxtb	r2, r2
 80077bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	3b01      	subs	r3, #1
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	691a      	ldr	r2, [r3, #16]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	b2d2      	uxtb	r2, r2
 80077e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	3b01      	subs	r3, #1
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800780a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2220      	movs	r2, #32
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b40      	cmp	r3, #64	; 0x40
 800781e:	d10a      	bne.n	8007836 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7ff fcba 	bl	80071a8 <HAL_I2C_MemRxCpltCallback>
}
 8007834:	e01d      	b.n	8007872 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2212      	movs	r2, #18
 8007842:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7ff fc6f 	bl	8007128 <HAL_I2C_MasterRxCpltCallback>
}
 800784a:	e012      	b.n	8007872 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	691a      	ldr	r2, [r3, #16]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007856:	b2d2      	uxtb	r2, r2
 8007858:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007868:	b29b      	uxth	r3, r3
 800786a:	3b01      	subs	r3, #1
 800786c:	b29a      	uxth	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007872:	bf00      	nop
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b40      	cmp	r3, #64	; 0x40
 800788c:	d117      	bne.n	80078be <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007892:	2b00      	cmp	r3, #0
 8007894:	d109      	bne.n	80078aa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789a:	b2db      	uxtb	r3, r3
 800789c:	461a      	mov	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078a6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80078a8:	e067      	b.n	800797a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	f043 0301 	orr.w	r3, r3, #1
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	611a      	str	r2, [r3, #16]
}
 80078bc:	e05d      	b.n	800797a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078c6:	d133      	bne.n	8007930 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b21      	cmp	r3, #33	; 0x21
 80078d2:	d109      	bne.n	80078e8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	461a      	mov	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078e4:	611a      	str	r2, [r3, #16]
 80078e6:	e008      	b.n	80078fa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	f043 0301 	orr.w	r3, r3, #1
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d004      	beq.n	800790c <I2C_Master_SB+0x92>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007908:	2b00      	cmp	r3, #0
 800790a:	d108      	bne.n	800791e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007910:	2b00      	cmp	r3, #0
 8007912:	d032      	beq.n	800797a <I2C_Master_SB+0x100>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791a:	2b00      	cmp	r3, #0
 800791c:	d02d      	beq.n	800797a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800792c:	605a      	str	r2, [r3, #4]
}
 800792e:	e024      	b.n	800797a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10e      	bne.n	8007956 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800793c:	b29b      	uxth	r3, r3
 800793e:	11db      	asrs	r3, r3, #7
 8007940:	b2db      	uxtb	r3, r3
 8007942:	f003 0306 	and.w	r3, r3, #6
 8007946:	b2db      	uxtb	r3, r3
 8007948:	f063 030f 	orn	r3, r3, #15
 800794c:	b2da      	uxtb	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	611a      	str	r2, [r3, #16]
}
 8007954:	e011      	b.n	800797a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800795a:	2b01      	cmp	r3, #1
 800795c:	d10d      	bne.n	800797a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007962:	b29b      	uxth	r3, r3
 8007964:	11db      	asrs	r3, r3, #7
 8007966:	b2db      	uxtb	r3, r3
 8007968:	f003 0306 	and.w	r3, r3, #6
 800796c:	b2db      	uxtb	r3, r3
 800796e:	f063 030e 	orn	r3, r3, #14
 8007972:	b2da      	uxtb	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	611a      	str	r2, [r3, #16]
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007992:	b2da      	uxtb	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d004      	beq.n	80079ac <I2C_Master_ADD10+0x26>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d108      	bne.n	80079be <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00c      	beq.n	80079ce <I2C_Master_ADD10+0x48>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d007      	beq.n	80079ce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079cc:	605a      	str	r2, [r3, #4]
  }
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80079da:	b480      	push	{r7}
 80079dc:	b091      	sub	sp, #68	; 0x44
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b22      	cmp	r3, #34	; 0x22
 8007a02:	f040 8169 	bne.w	8007cd8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10f      	bne.n	8007a2e <I2C_Master_ADDR+0x54>
 8007a0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a12:	2b40      	cmp	r3, #64	; 0x40
 8007a14:	d10b      	bne.n	8007a2e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a16:	2300      	movs	r3, #0
 8007a18:	633b      	str	r3, [r7, #48]	; 0x30
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	633b      	str	r3, [r7, #48]	; 0x30
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	633b      	str	r3, [r7, #48]	; 0x30
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	e160      	b.n	8007cf0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d11d      	bne.n	8007a72 <I2C_Master_ADDR+0x98>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a3e:	d118      	bne.n	8007a72 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a40:	2300      	movs	r3, #0
 8007a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a64:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	651a      	str	r2, [r3, #80]	; 0x50
 8007a70:	e13e      	b.n	8007cf0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d113      	bne.n	8007aa4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a90:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	e115      	b.n	8007cd0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	f040 808a 	bne.w	8007bc4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ab6:	d137      	bne.n	8007b28 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ac6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ad6:	d113      	bne.n	8007b00 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ae6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ae8:	2300      	movs	r3, #0
 8007aea:	627b      	str	r3, [r7, #36]	; 0x24
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	627b      	str	r3, [r7, #36]	; 0x24
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	627b      	str	r3, [r7, #36]	; 0x24
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	e0e7      	b.n	8007cd0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b00:	2300      	movs	r3, #0
 8007b02:	623b      	str	r3, [r7, #32]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	623b      	str	r3, [r7, #32]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	623b      	str	r3, [r7, #32]
 8007b14:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	e0d3      	b.n	8007cd0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2a:	2b08      	cmp	r3, #8
 8007b2c:	d02e      	beq.n	8007b8c <I2C_Master_ADDR+0x1b2>
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b30:	2b20      	cmp	r3, #32
 8007b32:	d02b      	beq.n	8007b8c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b36:	2b12      	cmp	r3, #18
 8007b38:	d102      	bne.n	8007b40 <I2C_Master_ADDR+0x166>
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d125      	bne.n	8007b8c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	d00e      	beq.n	8007b64 <I2C_Master_ADDR+0x18a>
 8007b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d00b      	beq.n	8007b64 <I2C_Master_ADDR+0x18a>
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4e:	2b10      	cmp	r3, #16
 8007b50:	d008      	beq.n	8007b64 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b60:	601a      	str	r2, [r3, #0]
 8007b62:	e007      	b.n	8007b74 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b72:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b74:	2300      	movs	r3, #0
 8007b76:	61fb      	str	r3, [r7, #28]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	61fb      	str	r3, [r7, #28]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	61fb      	str	r3, [r7, #28]
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	e0a1      	b.n	8007cd0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b9a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	61bb      	str	r3, [r7, #24]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	61bb      	str	r3, [r7, #24]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	61bb      	str	r3, [r7, #24]
 8007bb0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	e085      	b.n	8007cd0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d14d      	bne.n	8007c6a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	d016      	beq.n	8007c02 <I2C_Master_ADDR+0x228>
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d013      	beq.n	8007c02 <I2C_Master_ADDR+0x228>
 8007bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bdc:	2b10      	cmp	r3, #16
 8007bde:	d010      	beq.n	8007c02 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	e007      	b.n	8007c12 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c10:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c20:	d117      	bne.n	8007c52 <I2C_Master_ADDR+0x278>
 8007c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c28:	d00b      	beq.n	8007c42 <I2C_Master_ADDR+0x268>
 8007c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d008      	beq.n	8007c42 <I2C_Master_ADDR+0x268>
 8007c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c32:	2b08      	cmp	r3, #8
 8007c34:	d005      	beq.n	8007c42 <I2C_Master_ADDR+0x268>
 8007c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c38:	2b10      	cmp	r3, #16
 8007c3a:	d002      	beq.n	8007c42 <I2C_Master_ADDR+0x268>
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3e:	2b20      	cmp	r3, #32
 8007c40:	d107      	bne.n	8007c52 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c50:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c52:	2300      	movs	r3, #0
 8007c54:	617b      	str	r3, [r7, #20]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	695b      	ldr	r3, [r3, #20]
 8007c5c:	617b      	str	r3, [r7, #20]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	617b      	str	r3, [r7, #20]
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	e032      	b.n	8007cd0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c78:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c88:	d117      	bne.n	8007cba <I2C_Master_ADDR+0x2e0>
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c90:	d00b      	beq.n	8007caa <I2C_Master_ADDR+0x2d0>
 8007c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d008      	beq.n	8007caa <I2C_Master_ADDR+0x2d0>
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	2b08      	cmp	r3, #8
 8007c9c:	d005      	beq.n	8007caa <I2C_Master_ADDR+0x2d0>
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	2b10      	cmp	r3, #16
 8007ca2:	d002      	beq.n	8007caa <I2C_Master_ADDR+0x2d0>
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca6:	2b20      	cmp	r3, #32
 8007ca8:	d107      	bne.n	8007cba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007cb8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cba:	2300      	movs	r3, #0
 8007cbc:	613b      	str	r3, [r7, #16]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	613b      	str	r3, [r7, #16]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	613b      	str	r3, [r7, #16]
 8007cce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007cd6:	e00b      	b.n	8007cf0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	68fb      	ldr	r3, [r7, #12]
}
 8007cee:	e7ff      	b.n	8007cf0 <I2C_Master_ADDR+0x316>
 8007cf0:	bf00      	nop
 8007cf2:	3744      	adds	r7, #68	; 0x44
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d02b      	beq.n	8007d6e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1a:	781a      	ldrb	r2, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d26:	1c5a      	adds	r2, r3, #1
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	3b01      	subs	r3, #1
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d114      	bne.n	8007d6e <I2C_SlaveTransmit_TXE+0x72>
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	2b29      	cmp	r3, #41	; 0x29
 8007d48:	d111      	bne.n	8007d6e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d58:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2221      	movs	r2, #33	; 0x21
 8007d5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2228      	movs	r2, #40	; 0x28
 8007d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7ff f9e7 	bl	800713c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007d6e:	bf00      	nop
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007d76:	b480      	push	{r7}
 8007d78:	b083      	sub	sp, #12
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d011      	beq.n	8007dac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8c:	781a      	ldrb	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d98:	1c5a      	adds	r2, r3, #1
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	3b01      	subs	r3, #1
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dc6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d02c      	beq.n	8007e2c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	691a      	ldr	r2, [r3, #16]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	b2d2      	uxtb	r2, r2
 8007dde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	3b01      	subs	r3, #1
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d114      	bne.n	8007e2c <I2C_SlaveReceive_RXNE+0x74>
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	2b2a      	cmp	r3, #42	; 0x2a
 8007e06:	d111      	bne.n	8007e2c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e16:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2222      	movs	r2, #34	; 0x22
 8007e1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2228      	movs	r2, #40	; 0x28
 8007e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f7ff f992 	bl	8007150 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007e2c:	bf00      	nop
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d012      	beq.n	8007e6c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	691a      	ldr	r2, [r3, #16]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e50:	b2d2      	uxtb	r2, r2
 8007e52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	3b01      	subs	r3, #1
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007e92:	2b28      	cmp	r3, #40	; 0x28
 8007e94:	d127      	bne.n	8007ee6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ea4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	089b      	lsrs	r3, r3, #2
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	09db      	lsrs	r3, r3, #7
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d103      	bne.n	8007eca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	81bb      	strh	r3, [r7, #12]
 8007ec8:	e002      	b.n	8007ed0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007ed8:	89ba      	ldrh	r2, [r7, #12]
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
 8007edc:	4619      	mov	r1, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7ff f940 	bl	8007164 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007ee4:	e00e      	b.n	8007f04 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60bb      	str	r3, [r7, #8]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	60bb      	str	r3, [r7, #8]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	60bb      	str	r3, [r7, #8]
 8007efa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007f04:	bf00      	nop
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f1a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f2a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	60bb      	str	r3, [r7, #8]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	60bb      	str	r3, [r7, #8]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f042 0201 	orr.w	r2, r2, #1
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f58:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f68:	d172      	bne.n	8008050 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
 8007f6c:	2b22      	cmp	r3, #34	; 0x22
 8007f6e:	d002      	beq.n	8007f76 <I2C_Slave_STOPF+0x6a>
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	2b2a      	cmp	r3, #42	; 0x2a
 8007f74:	d135      	bne.n	8007fe2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d005      	beq.n	8007f9a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f92:	f043 0204 	orr.w	r2, r3, #4
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fa8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fd ff68 	bl	8005e84 <HAL_DMA_GetState>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d049      	beq.n	800804e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbe:	4a69      	ldr	r2, [pc, #420]	; (8008164 <I2C_Slave_STOPF+0x258>)
 8007fc0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fd fdb0 	bl	8005b2c <HAL_DMA_Abort_IT>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d03d      	beq.n	800804e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fdc:	4610      	mov	r0, r2
 8007fde:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007fe0:	e035      	b.n	800804e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d005      	beq.n	8008006 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffe:	f043 0204 	orr.w	r2, r3, #4
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008014:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801a:	4618      	mov	r0, r3
 800801c:	f7fd ff32 	bl	8005e84 <HAL_DMA_GetState>
 8008020:	4603      	mov	r3, r0
 8008022:	2b01      	cmp	r3, #1
 8008024:	d014      	beq.n	8008050 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800802a:	4a4e      	ldr	r2, [pc, #312]	; (8008164 <I2C_Slave_STOPF+0x258>)
 800802c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008032:	4618      	mov	r0, r3
 8008034:	f7fd fd7a 	bl	8005b2c <HAL_DMA_Abort_IT>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d008      	beq.n	8008050 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008048:	4610      	mov	r0, r2
 800804a:	4798      	blx	r3
 800804c:	e000      	b.n	8008050 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800804e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008054:	b29b      	uxth	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d03e      	beq.n	80080d8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	f003 0304 	and.w	r3, r3, #4
 8008064:	2b04      	cmp	r3, #4
 8008066:	d112      	bne.n	800808e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	691a      	ldr	r2, [r3, #16]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	b2d2      	uxtb	r2, r2
 8008074:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	1c5a      	adds	r2, r3, #1
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008084:	b29b      	uxth	r3, r3
 8008086:	3b01      	subs	r3, #1
 8008088:	b29a      	uxth	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008098:	2b40      	cmp	r3, #64	; 0x40
 800809a:	d112      	bne.n	80080c2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	691a      	ldr	r2, [r3, #16]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	b2d2      	uxtb	r2, r2
 80080a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	3b01      	subs	r3, #1
 80080bc:	b29a      	uxth	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d005      	beq.n	80080d8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d0:	f043 0204 	orr.w	r2, r3, #4
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d003      	beq.n	80080e8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f8b3 	bl	800824c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80080e6:	e039      	b.n	800815c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
 80080ea:	2b2a      	cmp	r3, #42	; 0x2a
 80080ec:	d109      	bne.n	8008102 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2228      	movs	r2, #40	; 0x28
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff f827 	bl	8007150 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b28      	cmp	r3, #40	; 0x28
 800810c:	d111      	bne.n	8008132 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a15      	ldr	r2, [pc, #84]	; (8008168 <I2C_Slave_STOPF+0x25c>)
 8008112:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2220      	movs	r2, #32
 800811e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7ff f828 	bl	8007180 <HAL_I2C_ListenCpltCallback>
}
 8008130:	e014      	b.n	800815c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008136:	2b22      	cmp	r3, #34	; 0x22
 8008138:	d002      	beq.n	8008140 <I2C_Slave_STOPF+0x234>
 800813a:	7bfb      	ldrb	r3, [r7, #15]
 800813c:	2b22      	cmp	r3, #34	; 0x22
 800813e:	d10d      	bne.n	800815c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2220      	movs	r2, #32
 800814a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7fe fffa 	bl	8007150 <HAL_I2C_SlaveRxCpltCallback>
}
 800815c:	bf00      	nop
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	08008751 	.word	0x08008751
 8008168:	ffff0000 	.word	0xffff0000

0800816c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800817a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008180:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	2b08      	cmp	r3, #8
 8008186:	d002      	beq.n	800818e <I2C_Slave_AF+0x22>
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b20      	cmp	r3, #32
 800818c:	d129      	bne.n	80081e2 <I2C_Slave_AF+0x76>
 800818e:	7bfb      	ldrb	r3, [r7, #15]
 8008190:	2b28      	cmp	r3, #40	; 0x28
 8008192:	d126      	bne.n	80081e2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a2c      	ldr	r2, [pc, #176]	; (8008248 <I2C_Slave_AF+0xdc>)
 8008198:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80081a8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081b2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081c2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2220      	movs	r2, #32
 80081ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7fe ffd0 	bl	8007180 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80081e0:	e02e      	b.n	8008240 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
 80081e4:	2b21      	cmp	r3, #33	; 0x21
 80081e6:	d126      	bne.n	8008236 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a17      	ldr	r2, [pc, #92]	; (8008248 <I2C_Slave_AF+0xdc>)
 80081ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2221      	movs	r2, #33	; 0x21
 80081f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2220      	movs	r2, #32
 80081f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008212:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800821c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800822c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7fe ff84 	bl	800713c <HAL_I2C_SlaveTxCpltCallback>
}
 8008234:	e004      	b.n	8008240 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800823e:	615a      	str	r2, [r3, #20]
}
 8008240:	bf00      	nop
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	ffff0000 	.word	0xffff0000

0800824c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800825a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008262:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	2b10      	cmp	r3, #16
 8008268:	d002      	beq.n	8008270 <I2C_ITError+0x24>
 800826a:	7bbb      	ldrb	r3, [r7, #14]
 800826c:	2b40      	cmp	r3, #64	; 0x40
 800826e:	d10a      	bne.n	8008286 <I2C_ITError+0x3a>
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	2b22      	cmp	r3, #34	; 0x22
 8008274:	d107      	bne.n	8008286 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008284:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008286:	7bfb      	ldrb	r3, [r7, #15]
 8008288:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800828c:	2b28      	cmp	r3, #40	; 0x28
 800828e:	d107      	bne.n	80082a0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2228      	movs	r2, #40	; 0x28
 800829a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800829e:	e015      	b.n	80082cc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082ae:	d00a      	beq.n	80082c6 <I2C_ITError+0x7a>
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
 80082b2:	2b60      	cmp	r3, #96	; 0x60
 80082b4:	d007      	beq.n	80082c6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082da:	d162      	bne.n	80083a2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082ea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d020      	beq.n	800833c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fe:	4a6a      	ldr	r2, [pc, #424]	; (80084a8 <I2C_ITError+0x25c>)
 8008300:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008306:	4618      	mov	r0, r3
 8008308:	f7fd fc10 	bl	8005b2c <HAL_DMA_Abort_IT>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	f000 8089 	beq.w	8008426 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 0201 	bic.w	r2, r2, #1
 8008322:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2220      	movs	r2, #32
 8008328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008336:	4610      	mov	r0, r2
 8008338:	4798      	blx	r3
 800833a:	e074      	b.n	8008426 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008340:	4a59      	ldr	r2, [pc, #356]	; (80084a8 <I2C_ITError+0x25c>)
 8008342:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008348:	4618      	mov	r0, r3
 800834a:	f7fd fbef 	bl	8005b2c <HAL_DMA_Abort_IT>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d068      	beq.n	8008426 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835e:	2b40      	cmp	r3, #64	; 0x40
 8008360:	d10b      	bne.n	800837a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	691a      	ldr	r2, [r3, #16]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	b2d2      	uxtb	r2, r2
 800836e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f022 0201 	bic.w	r2, r2, #1
 8008388:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2220      	movs	r2, #32
 800838e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800839c:	4610      	mov	r0, r2
 800839e:	4798      	blx	r3
 80083a0:	e041      	b.n	8008426 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b60      	cmp	r3, #96	; 0x60
 80083ac:	d125      	bne.n	80083fa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2220      	movs	r2, #32
 80083b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c6:	2b40      	cmp	r3, #64	; 0x40
 80083c8:	d10b      	bne.n	80083e2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	691a      	ldr	r2, [r3, #16]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d4:	b2d2      	uxtb	r2, r2
 80083d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	1c5a      	adds	r2, r3, #1
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f022 0201 	bic.w	r2, r2, #1
 80083f0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7fe feec 	bl	80071d0 <HAL_I2C_AbortCpltCallback>
 80083f8:	e015      	b.n	8008426 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008404:	2b40      	cmp	r3, #64	; 0x40
 8008406:	d10b      	bne.n	8008420 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	691a      	ldr	r2, [r3, #16]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008412:	b2d2      	uxtb	r2, r2
 8008414:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7fe fecb 	bl	80071bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10e      	bne.n	8008454 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800843c:	2b00      	cmp	r3, #0
 800843e:	d109      	bne.n	8008454 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008446:	2b00      	cmp	r3, #0
 8008448:	d104      	bne.n	8008454 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008450:	2b00      	cmp	r3, #0
 8008452:	d007      	beq.n	8008464 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008462:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800846a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b04      	cmp	r3, #4
 8008476:	d113      	bne.n	80084a0 <I2C_ITError+0x254>
 8008478:	7bfb      	ldrb	r3, [r7, #15]
 800847a:	2b28      	cmp	r3, #40	; 0x28
 800847c:	d110      	bne.n	80084a0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a0a      	ldr	r2, [pc, #40]	; (80084ac <I2C_ITError+0x260>)
 8008482:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2220      	movs	r2, #32
 800848e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f7fe fe70 	bl	8007180 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80084a0:	bf00      	nop
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	08008751 	.word	0x08008751
 80084ac:	ffff0000 	.word	0xffff0000

080084b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b088      	sub	sp, #32
 80084b4:	af02      	add	r7, sp, #8
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	607a      	str	r2, [r7, #4]
 80084ba:	603b      	str	r3, [r7, #0]
 80084bc:	460b      	mov	r3, r1
 80084be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	d006      	beq.n	80084da <I2C_MasterRequestWrite+0x2a>
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d003      	beq.n	80084da <I2C_MasterRequestWrite+0x2a>
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80084d8:	d108      	bne.n	80084ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084e8:	601a      	str	r2, [r3, #0]
 80084ea:	e00b      	b.n	8008504 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f0:	2b12      	cmp	r3, #18
 80084f2:	d107      	bne.n	8008504 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008502:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 f9c5 	bl	80088a0 <I2C_WaitOnFlagUntilTimeout>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00d      	beq.n	8008538 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800852a:	d103      	bne.n	8008534 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008532:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e035      	b.n	80085a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008540:	d108      	bne.n	8008554 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008542:	897b      	ldrh	r3, [r7, #10]
 8008544:	b2db      	uxtb	r3, r3
 8008546:	461a      	mov	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008550:	611a      	str	r2, [r3, #16]
 8008552:	e01b      	b.n	800858c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008554:	897b      	ldrh	r3, [r7, #10]
 8008556:	11db      	asrs	r3, r3, #7
 8008558:	b2db      	uxtb	r3, r3
 800855a:	f003 0306 	and.w	r3, r3, #6
 800855e:	b2db      	uxtb	r3, r3
 8008560:	f063 030f 	orn	r3, r3, #15
 8008564:	b2da      	uxtb	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	490e      	ldr	r1, [pc, #56]	; (80085ac <I2C_MasterRequestWrite+0xfc>)
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 f9eb 	bl	800894e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e010      	b.n	80085a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008582:	897b      	ldrh	r3, [r7, #10]
 8008584:	b2da      	uxtb	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	4907      	ldr	r1, [pc, #28]	; (80085b0 <I2C_MasterRequestWrite+0x100>)
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 f9db 	bl	800894e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e000      	b.n	80085a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3718      	adds	r7, #24
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	00010008 	.word	0x00010008
 80085b0:	00010002 	.word	0x00010002

080085b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af02      	add	r7, sp, #8
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	607a      	str	r2, [r7, #4]
 80085be:	603b      	str	r3, [r7, #0]
 80085c0:	460b      	mov	r3, r1
 80085c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2b08      	cmp	r3, #8
 80085de:	d006      	beq.n	80085ee <I2C_MasterRequestRead+0x3a>
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d003      	beq.n	80085ee <I2C_MasterRequestRead+0x3a>
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80085ec:	d108      	bne.n	8008600 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	e00b      	b.n	8008618 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008604:	2b11      	cmp	r3, #17
 8008606:	d107      	bne.n	8008618 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008616:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 f93b 	bl	80088a0 <I2C_WaitOnFlagUntilTimeout>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00d      	beq.n	800864c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800863a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800863e:	d103      	bne.n	8008648 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008646:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	e079      	b.n	8008740 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008654:	d108      	bne.n	8008668 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008656:	897b      	ldrh	r3, [r7, #10]
 8008658:	b2db      	uxtb	r3, r3
 800865a:	f043 0301 	orr.w	r3, r3, #1
 800865e:	b2da      	uxtb	r2, r3
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	611a      	str	r2, [r3, #16]
 8008666:	e05f      	b.n	8008728 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008668:	897b      	ldrh	r3, [r7, #10]
 800866a:	11db      	asrs	r3, r3, #7
 800866c:	b2db      	uxtb	r3, r3
 800866e:	f003 0306 	and.w	r3, r3, #6
 8008672:	b2db      	uxtb	r3, r3
 8008674:	f063 030f 	orn	r3, r3, #15
 8008678:	b2da      	uxtb	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	4930      	ldr	r1, [pc, #192]	; (8008748 <I2C_MasterRequestRead+0x194>)
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 f961 	bl	800894e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e054      	b.n	8008740 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008696:	897b      	ldrh	r3, [r7, #10]
 8008698:	b2da      	uxtb	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	4929      	ldr	r1, [pc, #164]	; (800874c <I2C_MasterRequestRead+0x198>)
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f000 f951 	bl	800894e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e044      	b.n	8008740 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086b6:	2300      	movs	r3, #0
 80086b8:	613b      	str	r3, [r7, #16]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	613b      	str	r3, [r7, #16]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	613b      	str	r3, [r7, #16]
 80086ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 f8d9 	bl	80088a0 <I2C_WaitOnFlagUntilTimeout>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00d      	beq.n	8008710 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008702:	d103      	bne.n	800870c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800870a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e017      	b.n	8008740 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008710:	897b      	ldrh	r3, [r7, #10]
 8008712:	11db      	asrs	r3, r3, #7
 8008714:	b2db      	uxtb	r3, r3
 8008716:	f003 0306 	and.w	r3, r3, #6
 800871a:	b2db      	uxtb	r3, r3
 800871c:	f063 030e 	orn	r3, r3, #14
 8008720:	b2da      	uxtb	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	4907      	ldr	r1, [pc, #28]	; (800874c <I2C_MasterRequestRead+0x198>)
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f000 f90d 	bl	800894e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e000      	b.n	8008740 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3718      	adds	r7, #24
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	00010008 	.word	0x00010008
 800874c:	00010002 	.word	0x00010002

08008750 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008758:	2300      	movs	r3, #0
 800875a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008760:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008768:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800876a:	4b4b      	ldr	r3, [pc, #300]	; (8008898 <I2C_DMAAbort+0x148>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	08db      	lsrs	r3, r3, #3
 8008770:	4a4a      	ldr	r2, [pc, #296]	; (800889c <I2C_DMAAbort+0x14c>)
 8008772:	fba2 2303 	umull	r2, r3, r2, r3
 8008776:	0a1a      	lsrs	r2, r3, #8
 8008778:	4613      	mov	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4413      	add	r3, r2
 800877e:	00da      	lsls	r2, r3, #3
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d106      	bne.n	8008798 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878e:	f043 0220 	orr.w	r2, r3, #32
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008796:	e00a      	b.n	80087ae <I2C_DMAAbort+0x5e>
    }
    count--;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3b01      	subs	r3, #1
 800879c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087ac:	d0ea      	beq.n	8008784 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ba:	2200      	movs	r2, #0
 80087bc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ca:	2200      	movs	r2, #0
 80087cc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087dc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	2200      	movs	r2, #0
 80087e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d003      	beq.n	80087f4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f0:	2200      	movs	r2, #0
 80087f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d003      	beq.n	8008804 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008800:	2200      	movs	r2, #0
 8008802:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f022 0201 	bic.w	r2, r2, #1
 8008812:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b60      	cmp	r3, #96	; 0x60
 800881e:	d10e      	bne.n	800883e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	2220      	movs	r2, #32
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	2200      	movs	r2, #0
 8008834:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008836:	6978      	ldr	r0, [r7, #20]
 8008838:	f7fe fcca 	bl	80071d0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800883c:	e027      	b.n	800888e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800883e:	7cfb      	ldrb	r3, [r7, #19]
 8008840:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008844:	2b28      	cmp	r3, #40	; 0x28
 8008846:	d117      	bne.n	8008878 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f042 0201 	orr.w	r2, r2, #1
 8008856:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008866:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	2200      	movs	r2, #0
 800886c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2228      	movs	r2, #40	; 0x28
 8008872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008876:	e007      	b.n	8008888 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	2220      	movs	r2, #32
 800887c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008888:	6978      	ldr	r0, [r7, #20]
 800888a:	f7fe fc97 	bl	80071bc <HAL_I2C_ErrorCallback>
}
 800888e:	bf00      	nop
 8008890:	3718      	adds	r7, #24
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20000248 	.word	0x20000248
 800889c:	14f8b589 	.word	0x14f8b589

080088a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	603b      	str	r3, [r7, #0]
 80088ac:	4613      	mov	r3, r2
 80088ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088b0:	e025      	b.n	80088fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b8:	d021      	beq.n	80088fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ba:	f7fc fa7d 	bl	8004db8 <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d302      	bcc.n	80088d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d116      	bne.n	80088fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2220      	movs	r2, #32
 80088da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ea:	f043 0220 	orr.w	r2, r3, #32
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e023      	b.n	8008946 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	0c1b      	lsrs	r3, r3, #16
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b01      	cmp	r3, #1
 8008906:	d10d      	bne.n	8008924 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	43da      	mvns	r2, r3
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	4013      	ands	r3, r2
 8008914:	b29b      	uxth	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	bf0c      	ite	eq
 800891a:	2301      	moveq	r3, #1
 800891c:	2300      	movne	r3, #0
 800891e:	b2db      	uxtb	r3, r3
 8008920:	461a      	mov	r2, r3
 8008922:	e00c      	b.n	800893e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	43da      	mvns	r2, r3
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	4013      	ands	r3, r2
 8008930:	b29b      	uxth	r3, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	bf0c      	ite	eq
 8008936:	2301      	moveq	r3, #1
 8008938:	2300      	movne	r3, #0
 800893a:	b2db      	uxtb	r3, r3
 800893c:	461a      	mov	r2, r3
 800893e:	79fb      	ldrb	r3, [r7, #7]
 8008940:	429a      	cmp	r2, r3
 8008942:	d0b6      	beq.n	80088b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b084      	sub	sp, #16
 8008952:	af00      	add	r7, sp, #0
 8008954:	60f8      	str	r0, [r7, #12]
 8008956:	60b9      	str	r1, [r7, #8]
 8008958:	607a      	str	r2, [r7, #4]
 800895a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800895c:	e051      	b.n	8008a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	695b      	ldr	r3, [r3, #20]
 8008964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800896c:	d123      	bne.n	80089b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800897c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008986:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2220      	movs	r2, #32
 8008992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a2:	f043 0204 	orr.w	r2, r3, #4
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e046      	b.n	8008a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089bc:	d021      	beq.n	8008a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089be:	f7fc f9fb 	bl	8004db8 <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d302      	bcc.n	80089d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d116      	bne.n	8008a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2220      	movs	r2, #32
 80089de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ee:	f043 0220 	orr.w	r2, r3, #32
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e020      	b.n	8008a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	0c1b      	lsrs	r3, r3, #16
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d10c      	bne.n	8008a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	43da      	mvns	r2, r3
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	4013      	ands	r3, r2
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	bf14      	ite	ne
 8008a1e:	2301      	movne	r3, #1
 8008a20:	2300      	moveq	r3, #0
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	e00b      	b.n	8008a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	43da      	mvns	r2, r3
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	4013      	ands	r3, r2
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	bf14      	ite	ne
 8008a38:	2301      	movne	r3, #1
 8008a3a:	2300      	moveq	r3, #0
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d18d      	bne.n	800895e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a58:	e02d      	b.n	8008ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 f900 	bl	8008c60 <I2C_IsAcknowledgeFailed>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e02d      	b.n	8008ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a70:	d021      	beq.n	8008ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a72:	f7fc f9a1 	bl	8004db8 <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d302      	bcc.n	8008a88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d116      	bne.n	8008ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2220      	movs	r2, #32
 8008a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa2:	f043 0220 	orr.w	r2, r3, #32
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e007      	b.n	8008ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	695b      	ldr	r3, [r3, #20]
 8008abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ac0:	2b80      	cmp	r3, #128	; 0x80
 8008ac2:	d1ca      	bne.n	8008a5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b084      	sub	sp, #16
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	60f8      	str	r0, [r7, #12]
 8008ad6:	60b9      	str	r1, [r7, #8]
 8008ad8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ada:	e02d      	b.n	8008b38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f000 f8bf 	bl	8008c60 <I2C_IsAcknowledgeFailed>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d001      	beq.n	8008aec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e02d      	b.n	8008b48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af2:	d021      	beq.n	8008b38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008af4:	f7fc f960 	bl	8004db8 <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d302      	bcc.n	8008b0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d116      	bne.n	8008b38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2220      	movs	r2, #32
 8008b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b24:	f043 0220 	orr.w	r2, r3, #32
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e007      	b.n	8008b48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	f003 0304 	and.w	r3, r3, #4
 8008b42:	2b04      	cmp	r3, #4
 8008b44:	d1ca      	bne.n	8008adc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008b5c:	4b13      	ldr	r3, [pc, #76]	; (8008bac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	08db      	lsrs	r3, r3, #3
 8008b62:	4a13      	ldr	r2, [pc, #76]	; (8008bb0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008b64:	fba2 2303 	umull	r2, r3, r2, r3
 8008b68:	0a1a      	lsrs	r2, r3, #8
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d107      	bne.n	8008b8e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b82:	f043 0220 	orr.w	r2, r3, #32
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e008      	b.n	8008ba0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b9c:	d0e9      	beq.n	8008b72 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	20000248 	.word	0x20000248
 8008bb0:	14f8b589 	.word	0x14f8b589

08008bb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008bc0:	e042      	b.n	8008c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	f003 0310 	and.w	r3, r3, #16
 8008bcc:	2b10      	cmp	r3, #16
 8008bce:	d119      	bne.n	8008c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f06f 0210 	mvn.w	r2, #16
 8008bd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2220      	movs	r2, #32
 8008be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e029      	b.n	8008c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c04:	f7fc f8d8 	bl	8004db8 <HAL_GetTick>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d302      	bcc.n	8008c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d116      	bne.n	8008c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2220      	movs	r2, #32
 8008c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c34:	f043 0220 	orr.w	r2, r3, #32
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e007      	b.n	8008c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c52:	2b40      	cmp	r3, #64	; 0x40
 8008c54:	d1b5      	bne.n	8008bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c76:	d11b      	bne.n	8008cb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2220      	movs	r2, #32
 8008c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9c:	f043 0204 	orr.w	r2, r3, #4
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e000      	b.n	8008cb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b083      	sub	sp, #12
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cca:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008cce:	d103      	bne.n	8008cd8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008cd6:	e007      	b.n	8008ce8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cdc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008ce0:	d102      	bne.n	8008ce8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2208      	movs	r2, #8
 8008ce6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d101      	bne.n	8008d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e267      	b.n	80091d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 0301 	and.w	r3, r3, #1
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d075      	beq.n	8008dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008d12:	4b88      	ldr	r3, [pc, #544]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f003 030c 	and.w	r3, r3, #12
 8008d1a:	2b04      	cmp	r3, #4
 8008d1c:	d00c      	beq.n	8008d38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d1e:	4b85      	ldr	r3, [pc, #532]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008d26:	2b08      	cmp	r3, #8
 8008d28:	d112      	bne.n	8008d50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d2a:	4b82      	ldr	r3, [pc, #520]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d36:	d10b      	bne.n	8008d50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d38:	4b7e      	ldr	r3, [pc, #504]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d05b      	beq.n	8008dfc <HAL_RCC_OscConfig+0x108>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d157      	bne.n	8008dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e242      	b.n	80091d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d58:	d106      	bne.n	8008d68 <HAL_RCC_OscConfig+0x74>
 8008d5a:	4b76      	ldr	r3, [pc, #472]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a75      	ldr	r2, [pc, #468]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d64:	6013      	str	r3, [r2, #0]
 8008d66:	e01d      	b.n	8008da4 <HAL_RCC_OscConfig+0xb0>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d70:	d10c      	bne.n	8008d8c <HAL_RCC_OscConfig+0x98>
 8008d72:	4b70      	ldr	r3, [pc, #448]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a6f      	ldr	r2, [pc, #444]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d7c:	6013      	str	r3, [r2, #0]
 8008d7e:	4b6d      	ldr	r3, [pc, #436]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a6c      	ldr	r2, [pc, #432]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d88:	6013      	str	r3, [r2, #0]
 8008d8a:	e00b      	b.n	8008da4 <HAL_RCC_OscConfig+0xb0>
 8008d8c:	4b69      	ldr	r3, [pc, #420]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a68      	ldr	r2, [pc, #416]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	4b66      	ldr	r3, [pc, #408]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a65      	ldr	r2, [pc, #404]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d013      	beq.n	8008dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dac:	f7fc f804 	bl	8004db8 <HAL_GetTick>
 8008db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008db2:	e008      	b.n	8008dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008db4:	f7fc f800 	bl	8004db8 <HAL_GetTick>
 8008db8:	4602      	mov	r2, r0
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	2b64      	cmp	r3, #100	; 0x64
 8008dc0:	d901      	bls.n	8008dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e207      	b.n	80091d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dc6:	4b5b      	ldr	r3, [pc, #364]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d0f0      	beq.n	8008db4 <HAL_RCC_OscConfig+0xc0>
 8008dd2:	e014      	b.n	8008dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dd4:	f7fb fff0 	bl	8004db8 <HAL_GetTick>
 8008dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008dda:	e008      	b.n	8008dee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ddc:	f7fb ffec 	bl	8004db8 <HAL_GetTick>
 8008de0:	4602      	mov	r2, r0
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	2b64      	cmp	r3, #100	; 0x64
 8008de8:	d901      	bls.n	8008dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e1f3      	b.n	80091d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008dee:	4b51      	ldr	r3, [pc, #324]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1f0      	bne.n	8008ddc <HAL_RCC_OscConfig+0xe8>
 8008dfa:	e000      	b.n	8008dfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0302 	and.w	r3, r3, #2
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d063      	beq.n	8008ed2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008e0a:	4b4a      	ldr	r3, [pc, #296]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f003 030c 	and.w	r3, r3, #12
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00b      	beq.n	8008e2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e16:	4b47      	ldr	r3, [pc, #284]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008e1e:	2b08      	cmp	r3, #8
 8008e20:	d11c      	bne.n	8008e5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e22:	4b44      	ldr	r3, [pc, #272]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d116      	bne.n	8008e5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e2e:	4b41      	ldr	r3, [pc, #260]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d005      	beq.n	8008e46 <HAL_RCC_OscConfig+0x152>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d001      	beq.n	8008e46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e1c7      	b.n	80091d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e46:	4b3b      	ldr	r3, [pc, #236]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	00db      	lsls	r3, r3, #3
 8008e54:	4937      	ldr	r1, [pc, #220]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008e56:	4313      	orrs	r3, r2
 8008e58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e5a:	e03a      	b.n	8008ed2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d020      	beq.n	8008ea6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e64:	4b34      	ldr	r3, [pc, #208]	; (8008f38 <HAL_RCC_OscConfig+0x244>)
 8008e66:	2201      	movs	r2, #1
 8008e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e6a:	f7fb ffa5 	bl	8004db8 <HAL_GetTick>
 8008e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e70:	e008      	b.n	8008e84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e72:	f7fb ffa1 	bl	8004db8 <HAL_GetTick>
 8008e76:	4602      	mov	r2, r0
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d901      	bls.n	8008e84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e1a8      	b.n	80091d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e84:	4b2b      	ldr	r3, [pc, #172]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 0302 	and.w	r3, r3, #2
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d0f0      	beq.n	8008e72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e90:	4b28      	ldr	r3, [pc, #160]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	00db      	lsls	r3, r3, #3
 8008e9e:	4925      	ldr	r1, [pc, #148]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	600b      	str	r3, [r1, #0]
 8008ea4:	e015      	b.n	8008ed2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ea6:	4b24      	ldr	r3, [pc, #144]	; (8008f38 <HAL_RCC_OscConfig+0x244>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eac:	f7fb ff84 	bl	8004db8 <HAL_GetTick>
 8008eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008eb2:	e008      	b.n	8008ec6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008eb4:	f7fb ff80 	bl	8004db8 <HAL_GetTick>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d901      	bls.n	8008ec6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e187      	b.n	80091d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ec6:	4b1b      	ldr	r3, [pc, #108]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0302 	and.w	r3, r3, #2
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1f0      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f003 0308 	and.w	r3, r3, #8
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d036      	beq.n	8008f4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d016      	beq.n	8008f14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ee6:	4b15      	ldr	r3, [pc, #84]	; (8008f3c <HAL_RCC_OscConfig+0x248>)
 8008ee8:	2201      	movs	r2, #1
 8008eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eec:	f7fb ff64 	bl	8004db8 <HAL_GetTick>
 8008ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ef2:	e008      	b.n	8008f06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ef4:	f7fb ff60 	bl	8004db8 <HAL_GetTick>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d901      	bls.n	8008f06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	e167      	b.n	80091d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f06:	4b0b      	ldr	r3, [pc, #44]	; (8008f34 <HAL_RCC_OscConfig+0x240>)
 8008f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f0a:	f003 0302 	and.w	r3, r3, #2
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d0f0      	beq.n	8008ef4 <HAL_RCC_OscConfig+0x200>
 8008f12:	e01b      	b.n	8008f4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f14:	4b09      	ldr	r3, [pc, #36]	; (8008f3c <HAL_RCC_OscConfig+0x248>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f1a:	f7fb ff4d 	bl	8004db8 <HAL_GetTick>
 8008f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f20:	e00e      	b.n	8008f40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f22:	f7fb ff49 	bl	8004db8 <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d907      	bls.n	8008f40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e150      	b.n	80091d6 <HAL_RCC_OscConfig+0x4e2>
 8008f34:	40023800 	.word	0x40023800
 8008f38:	42470000 	.word	0x42470000
 8008f3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f40:	4b88      	ldr	r3, [pc, #544]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 8008f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f44:	f003 0302 	and.w	r3, r3, #2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1ea      	bne.n	8008f22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0304 	and.w	r3, r3, #4
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f000 8097 	beq.w	8009088 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f5e:	4b81      	ldr	r3, [pc, #516]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 8008f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10f      	bne.n	8008f8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60bb      	str	r3, [r7, #8]
 8008f6e:	4b7d      	ldr	r3, [pc, #500]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 8008f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f72:	4a7c      	ldr	r2, [pc, #496]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 8008f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f78:	6413      	str	r3, [r2, #64]	; 0x40
 8008f7a:	4b7a      	ldr	r3, [pc, #488]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f82:	60bb      	str	r3, [r7, #8]
 8008f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f86:	2301      	movs	r3, #1
 8008f88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f8a:	4b77      	ldr	r3, [pc, #476]	; (8009168 <HAL_RCC_OscConfig+0x474>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d118      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f96:	4b74      	ldr	r3, [pc, #464]	; (8009168 <HAL_RCC_OscConfig+0x474>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a73      	ldr	r2, [pc, #460]	; (8009168 <HAL_RCC_OscConfig+0x474>)
 8008f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fa2:	f7fb ff09 	bl	8004db8 <HAL_GetTick>
 8008fa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fa8:	e008      	b.n	8008fbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008faa:	f7fb ff05 	bl	8004db8 <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d901      	bls.n	8008fbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e10c      	b.n	80091d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fbc:	4b6a      	ldr	r3, [pc, #424]	; (8009168 <HAL_RCC_OscConfig+0x474>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0f0      	beq.n	8008faa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d106      	bne.n	8008fde <HAL_RCC_OscConfig+0x2ea>
 8008fd0:	4b64      	ldr	r3, [pc, #400]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 8008fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fd4:	4a63      	ldr	r2, [pc, #396]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 8008fd6:	f043 0301 	orr.w	r3, r3, #1
 8008fda:	6713      	str	r3, [r2, #112]	; 0x70
 8008fdc:	e01c      	b.n	8009018 <HAL_RCC_OscConfig+0x324>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	2b05      	cmp	r3, #5
 8008fe4:	d10c      	bne.n	8009000 <HAL_RCC_OscConfig+0x30c>
 8008fe6:	4b5f      	ldr	r3, [pc, #380]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 8008fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fea:	4a5e      	ldr	r2, [pc, #376]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 8008fec:	f043 0304 	orr.w	r3, r3, #4
 8008ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8008ff2:	4b5c      	ldr	r3, [pc, #368]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 8008ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff6:	4a5b      	ldr	r2, [pc, #364]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 8008ff8:	f043 0301 	orr.w	r3, r3, #1
 8008ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8008ffe:	e00b      	b.n	8009018 <HAL_RCC_OscConfig+0x324>
 8009000:	4b58      	ldr	r3, [pc, #352]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 8009002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009004:	4a57      	ldr	r2, [pc, #348]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 8009006:	f023 0301 	bic.w	r3, r3, #1
 800900a:	6713      	str	r3, [r2, #112]	; 0x70
 800900c:	4b55      	ldr	r3, [pc, #340]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 800900e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009010:	4a54      	ldr	r2, [pc, #336]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 8009012:	f023 0304 	bic.w	r3, r3, #4
 8009016:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d015      	beq.n	800904c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009020:	f7fb feca 	bl	8004db8 <HAL_GetTick>
 8009024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009026:	e00a      	b.n	800903e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009028:	f7fb fec6 	bl	8004db8 <HAL_GetTick>
 800902c:	4602      	mov	r2, r0
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	f241 3288 	movw	r2, #5000	; 0x1388
 8009036:	4293      	cmp	r3, r2
 8009038:	d901      	bls.n	800903e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e0cb      	b.n	80091d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800903e:	4b49      	ldr	r3, [pc, #292]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 8009040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009042:	f003 0302 	and.w	r3, r3, #2
 8009046:	2b00      	cmp	r3, #0
 8009048:	d0ee      	beq.n	8009028 <HAL_RCC_OscConfig+0x334>
 800904a:	e014      	b.n	8009076 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800904c:	f7fb feb4 	bl	8004db8 <HAL_GetTick>
 8009050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009052:	e00a      	b.n	800906a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009054:	f7fb feb0 	bl	8004db8 <HAL_GetTick>
 8009058:	4602      	mov	r2, r0
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009062:	4293      	cmp	r3, r2
 8009064:	d901      	bls.n	800906a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009066:	2303      	movs	r3, #3
 8009068:	e0b5      	b.n	80091d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800906a:	4b3e      	ldr	r3, [pc, #248]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 800906c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800906e:	f003 0302 	and.w	r3, r3, #2
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1ee      	bne.n	8009054 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009076:	7dfb      	ldrb	r3, [r7, #23]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d105      	bne.n	8009088 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800907c:	4b39      	ldr	r3, [pc, #228]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 800907e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009080:	4a38      	ldr	r2, [pc, #224]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 8009082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009086:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	699b      	ldr	r3, [r3, #24]
 800908c:	2b00      	cmp	r3, #0
 800908e:	f000 80a1 	beq.w	80091d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009092:	4b34      	ldr	r3, [pc, #208]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f003 030c 	and.w	r3, r3, #12
 800909a:	2b08      	cmp	r3, #8
 800909c:	d05c      	beq.n	8009158 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d141      	bne.n	800912a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090a6:	4b31      	ldr	r3, [pc, #196]	; (800916c <HAL_RCC_OscConfig+0x478>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090ac:	f7fb fe84 	bl	8004db8 <HAL_GetTick>
 80090b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090b2:	e008      	b.n	80090c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090b4:	f7fb fe80 	bl	8004db8 <HAL_GetTick>
 80090b8:	4602      	mov	r2, r0
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	1ad3      	subs	r3, r2, r3
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d901      	bls.n	80090c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80090c2:	2303      	movs	r3, #3
 80090c4:	e087      	b.n	80091d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090c6:	4b27      	ldr	r3, [pc, #156]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1f0      	bne.n	80090b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	69da      	ldr	r2, [r3, #28]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	431a      	orrs	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e0:	019b      	lsls	r3, r3, #6
 80090e2:	431a      	orrs	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e8:	085b      	lsrs	r3, r3, #1
 80090ea:	3b01      	subs	r3, #1
 80090ec:	041b      	lsls	r3, r3, #16
 80090ee:	431a      	orrs	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	061b      	lsls	r3, r3, #24
 80090f6:	491b      	ldr	r1, [pc, #108]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 80090f8:	4313      	orrs	r3, r2
 80090fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090fc:	4b1b      	ldr	r3, [pc, #108]	; (800916c <HAL_RCC_OscConfig+0x478>)
 80090fe:	2201      	movs	r2, #1
 8009100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009102:	f7fb fe59 	bl	8004db8 <HAL_GetTick>
 8009106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009108:	e008      	b.n	800911c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800910a:	f7fb fe55 	bl	8004db8 <HAL_GetTick>
 800910e:	4602      	mov	r2, r0
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	2b02      	cmp	r3, #2
 8009116:	d901      	bls.n	800911c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e05c      	b.n	80091d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800911c:	4b11      	ldr	r3, [pc, #68]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d0f0      	beq.n	800910a <HAL_RCC_OscConfig+0x416>
 8009128:	e054      	b.n	80091d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800912a:	4b10      	ldr	r3, [pc, #64]	; (800916c <HAL_RCC_OscConfig+0x478>)
 800912c:	2200      	movs	r2, #0
 800912e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009130:	f7fb fe42 	bl	8004db8 <HAL_GetTick>
 8009134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009136:	e008      	b.n	800914a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009138:	f7fb fe3e 	bl	8004db8 <HAL_GetTick>
 800913c:	4602      	mov	r2, r0
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	2b02      	cmp	r3, #2
 8009144:	d901      	bls.n	800914a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	e045      	b.n	80091d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800914a:	4b06      	ldr	r3, [pc, #24]	; (8009164 <HAL_RCC_OscConfig+0x470>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1f0      	bne.n	8009138 <HAL_RCC_OscConfig+0x444>
 8009156:	e03d      	b.n	80091d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d107      	bne.n	8009170 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e038      	b.n	80091d6 <HAL_RCC_OscConfig+0x4e2>
 8009164:	40023800 	.word	0x40023800
 8009168:	40007000 	.word	0x40007000
 800916c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009170:	4b1b      	ldr	r3, [pc, #108]	; (80091e0 <HAL_RCC_OscConfig+0x4ec>)
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d028      	beq.n	80091d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009188:	429a      	cmp	r2, r3
 800918a:	d121      	bne.n	80091d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009196:	429a      	cmp	r2, r3
 8009198:	d11a      	bne.n	80091d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80091a0:	4013      	ands	r3, r2
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80091a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d111      	bne.n	80091d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b6:	085b      	lsrs	r3, r3, #1
 80091b8:	3b01      	subs	r3, #1
 80091ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80091bc:	429a      	cmp	r2, r3
 80091be:	d107      	bne.n	80091d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d001      	beq.n	80091d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e000      	b.n	80091d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3718      	adds	r7, #24
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	40023800 	.word	0x40023800

080091e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e0cc      	b.n	8009392 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80091f8:	4b68      	ldr	r3, [pc, #416]	; (800939c <HAL_RCC_ClockConfig+0x1b8>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0307 	and.w	r3, r3, #7
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	429a      	cmp	r2, r3
 8009204:	d90c      	bls.n	8009220 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009206:	4b65      	ldr	r3, [pc, #404]	; (800939c <HAL_RCC_ClockConfig+0x1b8>)
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	b2d2      	uxtb	r2, r2
 800920c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800920e:	4b63      	ldr	r3, [pc, #396]	; (800939c <HAL_RCC_ClockConfig+0x1b8>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f003 0307 	and.w	r3, r3, #7
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	429a      	cmp	r2, r3
 800921a:	d001      	beq.n	8009220 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e0b8      	b.n	8009392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0302 	and.w	r3, r3, #2
 8009228:	2b00      	cmp	r3, #0
 800922a:	d020      	beq.n	800926e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0304 	and.w	r3, r3, #4
 8009234:	2b00      	cmp	r3, #0
 8009236:	d005      	beq.n	8009244 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009238:	4b59      	ldr	r3, [pc, #356]	; (80093a0 <HAL_RCC_ClockConfig+0x1bc>)
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	4a58      	ldr	r2, [pc, #352]	; (80093a0 <HAL_RCC_ClockConfig+0x1bc>)
 800923e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009242:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0308 	and.w	r3, r3, #8
 800924c:	2b00      	cmp	r3, #0
 800924e:	d005      	beq.n	800925c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009250:	4b53      	ldr	r3, [pc, #332]	; (80093a0 <HAL_RCC_ClockConfig+0x1bc>)
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	4a52      	ldr	r2, [pc, #328]	; (80093a0 <HAL_RCC_ClockConfig+0x1bc>)
 8009256:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800925a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800925c:	4b50      	ldr	r3, [pc, #320]	; (80093a0 <HAL_RCC_ClockConfig+0x1bc>)
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	494d      	ldr	r1, [pc, #308]	; (80093a0 <HAL_RCC_ClockConfig+0x1bc>)
 800926a:	4313      	orrs	r3, r2
 800926c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b00      	cmp	r3, #0
 8009278:	d044      	beq.n	8009304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d107      	bne.n	8009292 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009282:	4b47      	ldr	r3, [pc, #284]	; (80093a0 <HAL_RCC_ClockConfig+0x1bc>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800928a:	2b00      	cmp	r3, #0
 800928c:	d119      	bne.n	80092c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e07f      	b.n	8009392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	2b02      	cmp	r3, #2
 8009298:	d003      	beq.n	80092a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800929e:	2b03      	cmp	r3, #3
 80092a0:	d107      	bne.n	80092b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092a2:	4b3f      	ldr	r3, [pc, #252]	; (80093a0 <HAL_RCC_ClockConfig+0x1bc>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d109      	bne.n	80092c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e06f      	b.n	8009392 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092b2:	4b3b      	ldr	r3, [pc, #236]	; (80093a0 <HAL_RCC_ClockConfig+0x1bc>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 0302 	and.w	r3, r3, #2
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d101      	bne.n	80092c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	e067      	b.n	8009392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80092c2:	4b37      	ldr	r3, [pc, #220]	; (80093a0 <HAL_RCC_ClockConfig+0x1bc>)
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	f023 0203 	bic.w	r2, r3, #3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	4934      	ldr	r1, [pc, #208]	; (80093a0 <HAL_RCC_ClockConfig+0x1bc>)
 80092d0:	4313      	orrs	r3, r2
 80092d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80092d4:	f7fb fd70 	bl	8004db8 <HAL_GetTick>
 80092d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092da:	e00a      	b.n	80092f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092dc:	f7fb fd6c 	bl	8004db8 <HAL_GetTick>
 80092e0:	4602      	mov	r2, r0
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d901      	bls.n	80092f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80092ee:	2303      	movs	r3, #3
 80092f0:	e04f      	b.n	8009392 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092f2:	4b2b      	ldr	r3, [pc, #172]	; (80093a0 <HAL_RCC_ClockConfig+0x1bc>)
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	f003 020c 	and.w	r2, r3, #12
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	429a      	cmp	r2, r3
 8009302:	d1eb      	bne.n	80092dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009304:	4b25      	ldr	r3, [pc, #148]	; (800939c <HAL_RCC_ClockConfig+0x1b8>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 0307 	and.w	r3, r3, #7
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	429a      	cmp	r2, r3
 8009310:	d20c      	bcs.n	800932c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009312:	4b22      	ldr	r3, [pc, #136]	; (800939c <HAL_RCC_ClockConfig+0x1b8>)
 8009314:	683a      	ldr	r2, [r7, #0]
 8009316:	b2d2      	uxtb	r2, r2
 8009318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800931a:	4b20      	ldr	r3, [pc, #128]	; (800939c <HAL_RCC_ClockConfig+0x1b8>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 0307 	and.w	r3, r3, #7
 8009322:	683a      	ldr	r2, [r7, #0]
 8009324:	429a      	cmp	r2, r3
 8009326:	d001      	beq.n	800932c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e032      	b.n	8009392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 0304 	and.w	r3, r3, #4
 8009334:	2b00      	cmp	r3, #0
 8009336:	d008      	beq.n	800934a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009338:	4b19      	ldr	r3, [pc, #100]	; (80093a0 <HAL_RCC_ClockConfig+0x1bc>)
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	4916      	ldr	r1, [pc, #88]	; (80093a0 <HAL_RCC_ClockConfig+0x1bc>)
 8009346:	4313      	orrs	r3, r2
 8009348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 0308 	and.w	r3, r3, #8
 8009352:	2b00      	cmp	r3, #0
 8009354:	d009      	beq.n	800936a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009356:	4b12      	ldr	r3, [pc, #72]	; (80093a0 <HAL_RCC_ClockConfig+0x1bc>)
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	00db      	lsls	r3, r3, #3
 8009364:	490e      	ldr	r1, [pc, #56]	; (80093a0 <HAL_RCC_ClockConfig+0x1bc>)
 8009366:	4313      	orrs	r3, r2
 8009368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800936a:	f000 f821 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800936e:	4602      	mov	r2, r0
 8009370:	4b0b      	ldr	r3, [pc, #44]	; (80093a0 <HAL_RCC_ClockConfig+0x1bc>)
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	091b      	lsrs	r3, r3, #4
 8009376:	f003 030f 	and.w	r3, r3, #15
 800937a:	490a      	ldr	r1, [pc, #40]	; (80093a4 <HAL_RCC_ClockConfig+0x1c0>)
 800937c:	5ccb      	ldrb	r3, [r1, r3]
 800937e:	fa22 f303 	lsr.w	r3, r2, r3
 8009382:	4a09      	ldr	r2, [pc, #36]	; (80093a8 <HAL_RCC_ClockConfig+0x1c4>)
 8009384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009386:	4b09      	ldr	r3, [pc, #36]	; (80093ac <HAL_RCC_ClockConfig+0x1c8>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4618      	mov	r0, r3
 800938c:	f7fb fcd0 	bl	8004d30 <HAL_InitTick>

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	40023c00 	.word	0x40023c00
 80093a0:	40023800 	.word	0x40023800
 80093a4:	08011280 	.word	0x08011280
 80093a8:	20000248 	.word	0x20000248
 80093ac:	2000024c 	.word	0x2000024c

080093b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093b4:	b094      	sub	sp, #80	; 0x50
 80093b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80093b8:	2300      	movs	r3, #0
 80093ba:	647b      	str	r3, [r7, #68]	; 0x44
 80093bc:	2300      	movs	r3, #0
 80093be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093c0:	2300      	movs	r3, #0
 80093c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80093c8:	4b79      	ldr	r3, [pc, #484]	; (80095b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f003 030c 	and.w	r3, r3, #12
 80093d0:	2b08      	cmp	r3, #8
 80093d2:	d00d      	beq.n	80093f0 <HAL_RCC_GetSysClockFreq+0x40>
 80093d4:	2b08      	cmp	r3, #8
 80093d6:	f200 80e1 	bhi.w	800959c <HAL_RCC_GetSysClockFreq+0x1ec>
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d002      	beq.n	80093e4 <HAL_RCC_GetSysClockFreq+0x34>
 80093de:	2b04      	cmp	r3, #4
 80093e0:	d003      	beq.n	80093ea <HAL_RCC_GetSysClockFreq+0x3a>
 80093e2:	e0db      	b.n	800959c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80093e4:	4b73      	ldr	r3, [pc, #460]	; (80095b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80093e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80093e8:	e0db      	b.n	80095a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80093ea:	4b73      	ldr	r3, [pc, #460]	; (80095b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80093ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80093ee:	e0d8      	b.n	80095a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80093f0:	4b6f      	ldr	r3, [pc, #444]	; (80095b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80093fa:	4b6d      	ldr	r3, [pc, #436]	; (80095b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d063      	beq.n	80094ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009406:	4b6a      	ldr	r3, [pc, #424]	; (80095b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	099b      	lsrs	r3, r3, #6
 800940c:	2200      	movs	r2, #0
 800940e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009410:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009418:	633b      	str	r3, [r7, #48]	; 0x30
 800941a:	2300      	movs	r3, #0
 800941c:	637b      	str	r3, [r7, #52]	; 0x34
 800941e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009422:	4622      	mov	r2, r4
 8009424:	462b      	mov	r3, r5
 8009426:	f04f 0000 	mov.w	r0, #0
 800942a:	f04f 0100 	mov.w	r1, #0
 800942e:	0159      	lsls	r1, r3, #5
 8009430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009434:	0150      	lsls	r0, r2, #5
 8009436:	4602      	mov	r2, r0
 8009438:	460b      	mov	r3, r1
 800943a:	4621      	mov	r1, r4
 800943c:	1a51      	subs	r1, r2, r1
 800943e:	6139      	str	r1, [r7, #16]
 8009440:	4629      	mov	r1, r5
 8009442:	eb63 0301 	sbc.w	r3, r3, r1
 8009446:	617b      	str	r3, [r7, #20]
 8009448:	f04f 0200 	mov.w	r2, #0
 800944c:	f04f 0300 	mov.w	r3, #0
 8009450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009454:	4659      	mov	r1, fp
 8009456:	018b      	lsls	r3, r1, #6
 8009458:	4651      	mov	r1, sl
 800945a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800945e:	4651      	mov	r1, sl
 8009460:	018a      	lsls	r2, r1, #6
 8009462:	4651      	mov	r1, sl
 8009464:	ebb2 0801 	subs.w	r8, r2, r1
 8009468:	4659      	mov	r1, fp
 800946a:	eb63 0901 	sbc.w	r9, r3, r1
 800946e:	f04f 0200 	mov.w	r2, #0
 8009472:	f04f 0300 	mov.w	r3, #0
 8009476:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800947a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800947e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009482:	4690      	mov	r8, r2
 8009484:	4699      	mov	r9, r3
 8009486:	4623      	mov	r3, r4
 8009488:	eb18 0303 	adds.w	r3, r8, r3
 800948c:	60bb      	str	r3, [r7, #8]
 800948e:	462b      	mov	r3, r5
 8009490:	eb49 0303 	adc.w	r3, r9, r3
 8009494:	60fb      	str	r3, [r7, #12]
 8009496:	f04f 0200 	mov.w	r2, #0
 800949a:	f04f 0300 	mov.w	r3, #0
 800949e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80094a2:	4629      	mov	r1, r5
 80094a4:	024b      	lsls	r3, r1, #9
 80094a6:	4621      	mov	r1, r4
 80094a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80094ac:	4621      	mov	r1, r4
 80094ae:	024a      	lsls	r2, r1, #9
 80094b0:	4610      	mov	r0, r2
 80094b2:	4619      	mov	r1, r3
 80094b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094b6:	2200      	movs	r2, #0
 80094b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80094ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094c0:	f7f7 fbea 	bl	8000c98 <__aeabi_uldivmod>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	4613      	mov	r3, r2
 80094ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094cc:	e058      	b.n	8009580 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094ce:	4b38      	ldr	r3, [pc, #224]	; (80095b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	099b      	lsrs	r3, r3, #6
 80094d4:	2200      	movs	r2, #0
 80094d6:	4618      	mov	r0, r3
 80094d8:	4611      	mov	r1, r2
 80094da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80094de:	623b      	str	r3, [r7, #32]
 80094e0:	2300      	movs	r3, #0
 80094e2:	627b      	str	r3, [r7, #36]	; 0x24
 80094e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80094e8:	4642      	mov	r2, r8
 80094ea:	464b      	mov	r3, r9
 80094ec:	f04f 0000 	mov.w	r0, #0
 80094f0:	f04f 0100 	mov.w	r1, #0
 80094f4:	0159      	lsls	r1, r3, #5
 80094f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80094fa:	0150      	lsls	r0, r2, #5
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4641      	mov	r1, r8
 8009502:	ebb2 0a01 	subs.w	sl, r2, r1
 8009506:	4649      	mov	r1, r9
 8009508:	eb63 0b01 	sbc.w	fp, r3, r1
 800950c:	f04f 0200 	mov.w	r2, #0
 8009510:	f04f 0300 	mov.w	r3, #0
 8009514:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009518:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800951c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009520:	ebb2 040a 	subs.w	r4, r2, sl
 8009524:	eb63 050b 	sbc.w	r5, r3, fp
 8009528:	f04f 0200 	mov.w	r2, #0
 800952c:	f04f 0300 	mov.w	r3, #0
 8009530:	00eb      	lsls	r3, r5, #3
 8009532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009536:	00e2      	lsls	r2, r4, #3
 8009538:	4614      	mov	r4, r2
 800953a:	461d      	mov	r5, r3
 800953c:	4643      	mov	r3, r8
 800953e:	18e3      	adds	r3, r4, r3
 8009540:	603b      	str	r3, [r7, #0]
 8009542:	464b      	mov	r3, r9
 8009544:	eb45 0303 	adc.w	r3, r5, r3
 8009548:	607b      	str	r3, [r7, #4]
 800954a:	f04f 0200 	mov.w	r2, #0
 800954e:	f04f 0300 	mov.w	r3, #0
 8009552:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009556:	4629      	mov	r1, r5
 8009558:	028b      	lsls	r3, r1, #10
 800955a:	4621      	mov	r1, r4
 800955c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009560:	4621      	mov	r1, r4
 8009562:	028a      	lsls	r2, r1, #10
 8009564:	4610      	mov	r0, r2
 8009566:	4619      	mov	r1, r3
 8009568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800956a:	2200      	movs	r2, #0
 800956c:	61bb      	str	r3, [r7, #24]
 800956e:	61fa      	str	r2, [r7, #28]
 8009570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009574:	f7f7 fb90 	bl	8000c98 <__aeabi_uldivmod>
 8009578:	4602      	mov	r2, r0
 800957a:	460b      	mov	r3, r1
 800957c:	4613      	mov	r3, r2
 800957e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009580:	4b0b      	ldr	r3, [pc, #44]	; (80095b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	0c1b      	lsrs	r3, r3, #16
 8009586:	f003 0303 	and.w	r3, r3, #3
 800958a:	3301      	adds	r3, #1
 800958c:	005b      	lsls	r3, r3, #1
 800958e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009590:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009594:	fbb2 f3f3 	udiv	r3, r2, r3
 8009598:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800959a:	e002      	b.n	80095a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800959c:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800959e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80095a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80095a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3750      	adds	r7, #80	; 0x50
 80095a8:	46bd      	mov	sp, r7
 80095aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095ae:	bf00      	nop
 80095b0:	40023800 	.word	0x40023800
 80095b4:	00f42400 	.word	0x00f42400
 80095b8:	007a1200 	.word	0x007a1200

080095bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095bc:	b480      	push	{r7}
 80095be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80095c0:	4b03      	ldr	r3, [pc, #12]	; (80095d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80095c2:	681b      	ldr	r3, [r3, #0]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	20000248 	.word	0x20000248

080095d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80095d8:	f7ff fff0 	bl	80095bc <HAL_RCC_GetHCLKFreq>
 80095dc:	4602      	mov	r2, r0
 80095de:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	0a9b      	lsrs	r3, r3, #10
 80095e4:	f003 0307 	and.w	r3, r3, #7
 80095e8:	4903      	ldr	r1, [pc, #12]	; (80095f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095ea:	5ccb      	ldrb	r3, [r1, r3]
 80095ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	40023800 	.word	0x40023800
 80095f8:	08011290 	.word	0x08011290

080095fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009600:	f7ff ffdc 	bl	80095bc <HAL_RCC_GetHCLKFreq>
 8009604:	4602      	mov	r2, r0
 8009606:	4b05      	ldr	r3, [pc, #20]	; (800961c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	0b5b      	lsrs	r3, r3, #13
 800960c:	f003 0307 	and.w	r3, r3, #7
 8009610:	4903      	ldr	r1, [pc, #12]	; (8009620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009612:	5ccb      	ldrb	r3, [r1, r3]
 8009614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009618:	4618      	mov	r0, r3
 800961a:	bd80      	pop	{r7, pc}
 800961c:	40023800 	.word	0x40023800
 8009620:	08011290 	.word	0x08011290

08009624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e04c      	b.n	80096d0 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800963c:	b2db      	uxtb	r3, r3
 800963e:	2b00      	cmp	r3, #0
 8009640:	d111      	bne.n	8009666 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f001 fc02 	bl	800ae54 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009654:	2b00      	cmp	r3, #0
 8009656:	d102      	bne.n	800965e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a1f      	ldr	r2, [pc, #124]	; (80096d8 <HAL_TIM_Base_Init+0xb4>)
 800965c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2202      	movs	r2, #2
 800966a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	3304      	adds	r3, #4
 8009676:	4619      	mov	r1, r3
 8009678:	4610      	mov	r0, r2
 800967a:	f001 f91f 	bl	800a8bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2201      	movs	r2, #1
 80096a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	080046bd 	.word	0x080046bd

080096dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d001      	beq.n	80096f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e03c      	b.n	800976e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2202      	movs	r2, #2
 80096f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a1e      	ldr	r2, [pc, #120]	; (800977c <HAL_TIM_Base_Start+0xa0>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d018      	beq.n	8009738 <HAL_TIM_Base_Start+0x5c>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800970e:	d013      	beq.n	8009738 <HAL_TIM_Base_Start+0x5c>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a1a      	ldr	r2, [pc, #104]	; (8009780 <HAL_TIM_Base_Start+0xa4>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d00e      	beq.n	8009738 <HAL_TIM_Base_Start+0x5c>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a19      	ldr	r2, [pc, #100]	; (8009784 <HAL_TIM_Base_Start+0xa8>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d009      	beq.n	8009738 <HAL_TIM_Base_Start+0x5c>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a17      	ldr	r2, [pc, #92]	; (8009788 <HAL_TIM_Base_Start+0xac>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d004      	beq.n	8009738 <HAL_TIM_Base_Start+0x5c>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a16      	ldr	r2, [pc, #88]	; (800978c <HAL_TIM_Base_Start+0xb0>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d111      	bne.n	800975c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	f003 0307 	and.w	r3, r3, #7
 8009742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2b06      	cmp	r3, #6
 8009748:	d010      	beq.n	800976c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f042 0201 	orr.w	r2, r2, #1
 8009758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800975a:	e007      	b.n	800976c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f042 0201 	orr.w	r2, r2, #1
 800976a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	40010000 	.word	0x40010000
 8009780:	40000400 	.word	0x40000400
 8009784:	40000800 	.word	0x40000800
 8009788:	40000c00 	.word	0x40000c00
 800978c:	40014000 	.word	0x40014000

08009790 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d001      	beq.n	80097a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e044      	b.n	8009832 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2202      	movs	r2, #2
 80097ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68da      	ldr	r2, [r3, #12]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f042 0201 	orr.w	r2, r2, #1
 80097be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a1e      	ldr	r2, [pc, #120]	; (8009840 <HAL_TIM_Base_Start_IT+0xb0>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d018      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x6c>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097d2:	d013      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x6c>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a1a      	ldr	r2, [pc, #104]	; (8009844 <HAL_TIM_Base_Start_IT+0xb4>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d00e      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x6c>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a19      	ldr	r2, [pc, #100]	; (8009848 <HAL_TIM_Base_Start_IT+0xb8>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d009      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x6c>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a17      	ldr	r2, [pc, #92]	; (800984c <HAL_TIM_Base_Start_IT+0xbc>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d004      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x6c>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a16      	ldr	r2, [pc, #88]	; (8009850 <HAL_TIM_Base_Start_IT+0xc0>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d111      	bne.n	8009820 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f003 0307 	and.w	r3, r3, #7
 8009806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2b06      	cmp	r3, #6
 800980c:	d010      	beq.n	8009830 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f042 0201 	orr.w	r2, r2, #1
 800981c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800981e:	e007      	b.n	8009830 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f042 0201 	orr.w	r2, r2, #1
 800982e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3714      	adds	r7, #20
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	40010000 	.word	0x40010000
 8009844:	40000400 	.word	0x40000400
 8009848:	40000800 	.word	0x40000800
 800984c:	40000c00 	.word	0x40000c00
 8009850:	40014000 	.word	0x40014000

08009854 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d101      	bne.n	8009866 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e04c      	b.n	8009900 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800986c:	b2db      	uxtb	r3, r3
 800986e:	2b00      	cmp	r3, #0
 8009870:	d111      	bne.n	8009896 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f001 faea 	bl	800ae54 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009884:	2b00      	cmp	r3, #0
 8009886:	d102      	bne.n	800988e <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a1f      	ldr	r2, [pc, #124]	; (8009908 <HAL_TIM_OC_Init+0xb4>)
 800988c:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2202      	movs	r2, #2
 800989a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	3304      	adds	r3, #4
 80098a6:	4619      	mov	r1, r3
 80098a8:	4610      	mov	r0, r2
 80098aa:	f001 f807 	bl	800a8bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	0800990d 	.word	0x0800990d

0800990c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d101      	bne.n	8009932 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e04c      	b.n	80099cc <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	d111      	bne.n	8009962 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f001 fa84 	bl	800ae54 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009950:	2b00      	cmp	r3, #0
 8009952:	d102      	bne.n	800995a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a1f      	ldr	r2, [pc, #124]	; (80099d4 <HAL_TIM_PWM_Init+0xb4>)
 8009958:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2202      	movs	r2, #2
 8009966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	3304      	adds	r3, #4
 8009972:	4619      	mov	r1, r3
 8009974:	4610      	mov	r0, r2
 8009976:	f000 ffa1 	bl	800a8bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	080045cd 	.word	0x080045cd

080099d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d109      	bne.n	80099fc <HAL_TIM_PWM_Start+0x24>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	bf14      	ite	ne
 80099f4:	2301      	movne	r3, #1
 80099f6:	2300      	moveq	r3, #0
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	e022      	b.n	8009a42 <HAL_TIM_PWM_Start+0x6a>
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	2b04      	cmp	r3, #4
 8009a00:	d109      	bne.n	8009a16 <HAL_TIM_PWM_Start+0x3e>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	bf14      	ite	ne
 8009a0e:	2301      	movne	r3, #1
 8009a10:	2300      	moveq	r3, #0
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	e015      	b.n	8009a42 <HAL_TIM_PWM_Start+0x6a>
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	2b08      	cmp	r3, #8
 8009a1a:	d109      	bne.n	8009a30 <HAL_TIM_PWM_Start+0x58>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	bf14      	ite	ne
 8009a28:	2301      	movne	r3, #1
 8009a2a:	2300      	moveq	r3, #0
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	e008      	b.n	8009a42 <HAL_TIM_PWM_Start+0x6a>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	bf14      	ite	ne
 8009a3c:	2301      	movne	r3, #1
 8009a3e:	2300      	moveq	r3, #0
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	e068      	b.n	8009b1c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d104      	bne.n	8009a5a <HAL_TIM_PWM_Start+0x82>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2202      	movs	r2, #2
 8009a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a58:	e013      	b.n	8009a82 <HAL_TIM_PWM_Start+0xaa>
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b04      	cmp	r3, #4
 8009a5e:	d104      	bne.n	8009a6a <HAL_TIM_PWM_Start+0x92>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2202      	movs	r2, #2
 8009a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a68:	e00b      	b.n	8009a82 <HAL_TIM_PWM_Start+0xaa>
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b08      	cmp	r3, #8
 8009a6e:	d104      	bne.n	8009a7a <HAL_TIM_PWM_Start+0xa2>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2202      	movs	r2, #2
 8009a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a78:	e003      	b.n	8009a82 <HAL_TIM_PWM_Start+0xaa>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2201      	movs	r2, #1
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f001 f9bc 	bl	800ae08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a23      	ldr	r2, [pc, #140]	; (8009b24 <HAL_TIM_PWM_Start+0x14c>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d107      	bne.n	8009aaa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009aa8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a1d      	ldr	r2, [pc, #116]	; (8009b24 <HAL_TIM_PWM_Start+0x14c>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d018      	beq.n	8009ae6 <HAL_TIM_PWM_Start+0x10e>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009abc:	d013      	beq.n	8009ae6 <HAL_TIM_PWM_Start+0x10e>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a19      	ldr	r2, [pc, #100]	; (8009b28 <HAL_TIM_PWM_Start+0x150>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d00e      	beq.n	8009ae6 <HAL_TIM_PWM_Start+0x10e>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a17      	ldr	r2, [pc, #92]	; (8009b2c <HAL_TIM_PWM_Start+0x154>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d009      	beq.n	8009ae6 <HAL_TIM_PWM_Start+0x10e>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a16      	ldr	r2, [pc, #88]	; (8009b30 <HAL_TIM_PWM_Start+0x158>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d004      	beq.n	8009ae6 <HAL_TIM_PWM_Start+0x10e>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a14      	ldr	r2, [pc, #80]	; (8009b34 <HAL_TIM_PWM_Start+0x15c>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d111      	bne.n	8009b0a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	f003 0307 	and.w	r3, r3, #7
 8009af0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2b06      	cmp	r3, #6
 8009af6:	d010      	beq.n	8009b1a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f042 0201 	orr.w	r2, r2, #1
 8009b06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b08:	e007      	b.n	8009b1a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f042 0201 	orr.w	r2, r2, #1
 8009b18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3710      	adds	r7, #16
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	40010000 	.word	0x40010000
 8009b28:	40000400 	.word	0x40000400
 8009b2c:	40000800 	.word	0x40000800
 8009b30:	40000c00 	.word	0x40000c00
 8009b34:	40014000 	.word	0x40014000

08009b38 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d101      	bne.n	8009b4c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e04c      	b.n	8009be6 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d111      	bne.n	8009b7c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f001 f977 	bl	800ae54 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d102      	bne.n	8009b74 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a1f      	ldr	r2, [pc, #124]	; (8009bf0 <HAL_TIM_OnePulse_Init+0xb8>)
 8009b72:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2202      	movs	r2, #2
 8009b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	4610      	mov	r0, r2
 8009b90:	f000 fe94 	bl	800a8bc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f022 0208 	bic.w	r2, r2, #8
 8009ba2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6819      	ldr	r1, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	683a      	ldr	r2, [r7, #0]
 8009bb0:	430a      	orrs	r2, r1
 8009bb2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	08009bf5 	.word	0x08009bf5

08009bf4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009bfc:	bf00      	nop
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c18:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009c20:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c28:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c30:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d108      	bne.n	8009c4a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c38:	7bbb      	ldrb	r3, [r7, #14]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d105      	bne.n	8009c4a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c3e:	7b7b      	ldrb	r3, [r7, #13]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d102      	bne.n	8009c4a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009c44:	7b3b      	ldrb	r3, [r7, #12]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d001      	beq.n	8009c4e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e03b      	b.n	8009cc6 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2202      	movs	r2, #2
 8009c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2202      	movs	r2, #2
 8009c5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2202      	movs	r2, #2
 8009c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2202      	movs	r2, #2
 8009c6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68da      	ldr	r2, [r3, #12]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f042 0202 	orr.w	r2, r2, #2
 8009c7c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68da      	ldr	r2, [r3, #12]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f042 0204 	orr.w	r2, r2, #4
 8009c8c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2201      	movs	r2, #1
 8009c94:	2100      	movs	r1, #0
 8009c96:	4618      	mov	r0, r3
 8009c98:	f001 f8b6 	bl	800ae08 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	2104      	movs	r1, #4
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f001 f8af 	bl	800ae08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a08      	ldr	r2, [pc, #32]	; (8009cd0 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d107      	bne.n	8009cc4 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cc2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	40010000 	.word	0x40010000

08009cd4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e0a2      	b.n	8009e2e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d111      	bne.n	8009d18 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f001 f8a9 	bl	800ae54 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d102      	bne.n	8009d10 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a4a      	ldr	r2, [pc, #296]	; (8009e38 <HAL_TIM_Encoder_Init+0x164>)
 8009d0e:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	6812      	ldr	r2, [r2, #0]
 8009d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d2e:	f023 0307 	bic.w	r3, r3, #7
 8009d32:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	3304      	adds	r3, #4
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	4610      	mov	r0, r2
 8009d40:	f000 fdbc 	bl	800a8bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d6c:	f023 0303 	bic.w	r3, r3, #3
 8009d70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	689a      	ldr	r2, [r3, #8]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	021b      	lsls	r3, r3, #8
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009d8a:	f023 030c 	bic.w	r3, r3, #12
 8009d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	68da      	ldr	r2, [r3, #12]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	69db      	ldr	r3, [r3, #28]
 8009da4:	021b      	lsls	r3, r3, #8
 8009da6:	4313      	orrs	r3, r2
 8009da8:	693a      	ldr	r2, [r7, #16]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	011a      	lsls	r2, r3, #4
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	6a1b      	ldr	r3, [r3, #32]
 8009db8:	031b      	lsls	r3, r3, #12
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009dc8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009dd0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	685a      	ldr	r2, [r3, #4]
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	695b      	ldr	r3, [r3, #20]
 8009dda:	011b      	lsls	r3, r3, #4
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3718      	adds	r7, #24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	0800462d 	.word	0x0800462d

08009e3c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009e54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009e64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d110      	bne.n	8009e8e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d102      	bne.n	8009e78 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e72:	7b7b      	ldrb	r3, [r7, #13]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d001      	beq.n	8009e7c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e069      	b.n	8009f50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2202      	movs	r2, #2
 8009e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2202      	movs	r2, #2
 8009e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e8c:	e031      	b.n	8009ef2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	2b04      	cmp	r3, #4
 8009e92:	d110      	bne.n	8009eb6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e94:	7bbb      	ldrb	r3, [r7, #14]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d102      	bne.n	8009ea0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e9a:	7b3b      	ldrb	r3, [r7, #12]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d001      	beq.n	8009ea4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e055      	b.n	8009f50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009eb4:	e01d      	b.n	8009ef2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d108      	bne.n	8009ece <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ebc:	7bbb      	ldrb	r3, [r7, #14]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d105      	bne.n	8009ece <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ec2:	7b7b      	ldrb	r3, [r7, #13]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d102      	bne.n	8009ece <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ec8:	7b3b      	ldrb	r3, [r7, #12]
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d001      	beq.n	8009ed2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e03e      	b.n	8009f50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2202      	movs	r2, #2
 8009ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2202      	movs	r2, #2
 8009ede:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2202      	movs	r2, #2
 8009ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2202      	movs	r2, #2
 8009eee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d003      	beq.n	8009f00 <HAL_TIM_Encoder_Start+0xc4>
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	2b04      	cmp	r3, #4
 8009efc:	d008      	beq.n	8009f10 <HAL_TIM_Encoder_Start+0xd4>
 8009efe:	e00f      	b.n	8009f20 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2201      	movs	r2, #1
 8009f06:	2100      	movs	r1, #0
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 ff7d 	bl	800ae08 <TIM_CCxChannelCmd>
      break;
 8009f0e:	e016      	b.n	8009f3e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2201      	movs	r2, #1
 8009f16:	2104      	movs	r1, #4
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 ff75 	bl	800ae08 <TIM_CCxChannelCmd>
      break;
 8009f1e:	e00e      	b.n	8009f3e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2201      	movs	r2, #1
 8009f26:	2100      	movs	r1, #0
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f000 ff6d 	bl	800ae08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2201      	movs	r2, #1
 8009f34:	2104      	movs	r1, #4
 8009f36:	4618      	mov	r0, r3
 8009f38:	f000 ff66 	bl	800ae08 <TIM_CCxChannelCmd>
      break;
 8009f3c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f042 0201 	orr.w	r2, r2, #1
 8009f4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	f003 0302 	and.w	r3, r3, #2
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d128      	bne.n	8009fc0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	f003 0302 	and.w	r3, r3, #2
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d121      	bne.n	8009fc0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f06f 0202 	mvn.w	r2, #2
 8009f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	f003 0303 	and.w	r3, r3, #3
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d005      	beq.n	8009fa6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	4798      	blx	r3
 8009fa4:	e009      	b.n	8009fba <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	f003 0304 	and.w	r3, r3, #4
 8009fca:	2b04      	cmp	r3, #4
 8009fcc:	d128      	bne.n	800a020 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	f003 0304 	and.w	r3, r3, #4
 8009fd8:	2b04      	cmp	r3, #4
 8009fda:	d121      	bne.n	800a020 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f06f 0204 	mvn.w	r2, #4
 8009fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2202      	movs	r2, #2
 8009fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d005      	beq.n	800a006 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	4798      	blx	r3
 800a004:	e009      	b.n	800a01a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	f003 0308 	and.w	r3, r3, #8
 800a02a:	2b08      	cmp	r3, #8
 800a02c:	d128      	bne.n	800a080 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	f003 0308 	and.w	r3, r3, #8
 800a038:	2b08      	cmp	r3, #8
 800a03a:	d121      	bne.n	800a080 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f06f 0208 	mvn.w	r2, #8
 800a044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2204      	movs	r2, #4
 800a04a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	69db      	ldr	r3, [r3, #28]
 800a052:	f003 0303 	and.w	r3, r3, #3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d005      	beq.n	800a066 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	4798      	blx	r3
 800a064:	e009      	b.n	800a07a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	f003 0310 	and.w	r3, r3, #16
 800a08a:	2b10      	cmp	r3, #16
 800a08c:	d128      	bne.n	800a0e0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	f003 0310 	and.w	r3, r3, #16
 800a098:	2b10      	cmp	r3, #16
 800a09a:	d121      	bne.n	800a0e0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f06f 0210 	mvn.w	r2, #16
 800a0a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2208      	movs	r2, #8
 800a0aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	69db      	ldr	r3, [r3, #28]
 800a0b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d005      	beq.n	800a0c6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	4798      	blx	r3
 800a0c4:	e009      	b.n	800a0da <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	f003 0301 	and.w	r3, r3, #1
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d110      	bne.n	800a110 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	f003 0301 	and.w	r3, r3, #1
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d109      	bne.n	800a110 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f06f 0201 	mvn.w	r2, #1
 800a104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a11a:	2b80      	cmp	r3, #128	; 0x80
 800a11c:	d110      	bne.n	800a140 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a128:	2b80      	cmp	r3, #128	; 0x80
 800a12a:	d109      	bne.n	800a140 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a14a:	2b40      	cmp	r3, #64	; 0x40
 800a14c:	d110      	bne.n	800a170 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a158:	2b40      	cmp	r3, #64	; 0x40
 800a15a:	d109      	bne.n	800a170 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	f003 0320 	and.w	r3, r3, #32
 800a17a:	2b20      	cmp	r3, #32
 800a17c:	d110      	bne.n	800a1a0 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	f003 0320 	and.w	r3, r3, #32
 800a188:	2b20      	cmp	r3, #32
 800a18a:	d109      	bne.n	800a1a0 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f06f 0220 	mvn.w	r2, #32
 800a194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1a0:	bf00      	nop
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d101      	bne.n	800a1c6 <HAL_TIM_OC_ConfigChannel+0x1e>
 800a1c2:	2302      	movs	r3, #2
 800a1c4:	e048      	b.n	800a258 <HAL_TIM_OC_ConfigChannel+0xb0>
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2b0c      	cmp	r3, #12
 800a1d2:	d839      	bhi.n	800a248 <HAL_TIM_OC_ConfigChannel+0xa0>
 800a1d4:	a201      	add	r2, pc, #4	; (adr r2, 800a1dc <HAL_TIM_OC_ConfigChannel+0x34>)
 800a1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1da:	bf00      	nop
 800a1dc:	0800a211 	.word	0x0800a211
 800a1e0:	0800a249 	.word	0x0800a249
 800a1e4:	0800a249 	.word	0x0800a249
 800a1e8:	0800a249 	.word	0x0800a249
 800a1ec:	0800a21f 	.word	0x0800a21f
 800a1f0:	0800a249 	.word	0x0800a249
 800a1f4:	0800a249 	.word	0x0800a249
 800a1f8:	0800a249 	.word	0x0800a249
 800a1fc:	0800a22d 	.word	0x0800a22d
 800a200:	0800a249 	.word	0x0800a249
 800a204:	0800a249 	.word	0x0800a249
 800a208:	0800a249 	.word	0x0800a249
 800a20c:	0800a23b 	.word	0x0800a23b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68b9      	ldr	r1, [r7, #8]
 800a216:	4618      	mov	r0, r3
 800a218:	f000 fbd0 	bl	800a9bc <TIM_OC1_SetConfig>
      break;
 800a21c:	e017      	b.n	800a24e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68b9      	ldr	r1, [r7, #8]
 800a224:	4618      	mov	r0, r3
 800a226:	f000 fc2f 	bl	800aa88 <TIM_OC2_SetConfig>
      break;
 800a22a:	e010      	b.n	800a24e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68b9      	ldr	r1, [r7, #8]
 800a232:	4618      	mov	r0, r3
 800a234:	f000 fc94 	bl	800ab60 <TIM_OC3_SetConfig>
      break;
 800a238:	e009      	b.n	800a24e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68b9      	ldr	r1, [r7, #8]
 800a240:	4618      	mov	r0, r3
 800a242:	f000 fcf7 	bl	800ac34 <TIM_OC4_SetConfig>
      break;
 800a246:	e002      	b.n	800a24e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	75fb      	strb	r3, [r7, #23]
      break;
 800a24c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a256:	7dfb      	ldrb	r3, [r7, #23]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3718      	adds	r7, #24
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b086      	sub	sp, #24
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a26c:	2300      	movs	r3, #0
 800a26e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a276:	2b01      	cmp	r3, #1
 800a278:	d101      	bne.n	800a27e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a27a:	2302      	movs	r3, #2
 800a27c:	e0ae      	b.n	800a3dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2201      	movs	r2, #1
 800a282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b0c      	cmp	r3, #12
 800a28a:	f200 809f 	bhi.w	800a3cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a28e:	a201      	add	r2, pc, #4	; (adr r2, 800a294 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a294:	0800a2c9 	.word	0x0800a2c9
 800a298:	0800a3cd 	.word	0x0800a3cd
 800a29c:	0800a3cd 	.word	0x0800a3cd
 800a2a0:	0800a3cd 	.word	0x0800a3cd
 800a2a4:	0800a309 	.word	0x0800a309
 800a2a8:	0800a3cd 	.word	0x0800a3cd
 800a2ac:	0800a3cd 	.word	0x0800a3cd
 800a2b0:	0800a3cd 	.word	0x0800a3cd
 800a2b4:	0800a34b 	.word	0x0800a34b
 800a2b8:	0800a3cd 	.word	0x0800a3cd
 800a2bc:	0800a3cd 	.word	0x0800a3cd
 800a2c0:	0800a3cd 	.word	0x0800a3cd
 800a2c4:	0800a38b 	.word	0x0800a38b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68b9      	ldr	r1, [r7, #8]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f000 fb74 	bl	800a9bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	699a      	ldr	r2, [r3, #24]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f042 0208 	orr.w	r2, r2, #8
 800a2e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	699a      	ldr	r2, [r3, #24]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f022 0204 	bic.w	r2, r2, #4
 800a2f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	6999      	ldr	r1, [r3, #24]
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	691a      	ldr	r2, [r3, #16]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	430a      	orrs	r2, r1
 800a304:	619a      	str	r2, [r3, #24]
      break;
 800a306:	e064      	b.n	800a3d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68b9      	ldr	r1, [r7, #8]
 800a30e:	4618      	mov	r0, r3
 800a310:	f000 fbba 	bl	800aa88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	699a      	ldr	r2, [r3, #24]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	699a      	ldr	r2, [r3, #24]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6999      	ldr	r1, [r3, #24]
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	021a      	lsls	r2, r3, #8
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	430a      	orrs	r2, r1
 800a346:	619a      	str	r2, [r3, #24]
      break;
 800a348:	e043      	b.n	800a3d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68b9      	ldr	r1, [r7, #8]
 800a350:	4618      	mov	r0, r3
 800a352:	f000 fc05 	bl	800ab60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	69da      	ldr	r2, [r3, #28]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f042 0208 	orr.w	r2, r2, #8
 800a364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	69da      	ldr	r2, [r3, #28]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f022 0204 	bic.w	r2, r2, #4
 800a374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	69d9      	ldr	r1, [r3, #28]
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	691a      	ldr	r2, [r3, #16]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	430a      	orrs	r2, r1
 800a386:	61da      	str	r2, [r3, #28]
      break;
 800a388:	e023      	b.n	800a3d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68b9      	ldr	r1, [r7, #8]
 800a390:	4618      	mov	r0, r3
 800a392:	f000 fc4f 	bl	800ac34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	69da      	ldr	r2, [r3, #28]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	69da      	ldr	r2, [r3, #28]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	69d9      	ldr	r1, [r3, #28]
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	021a      	lsls	r2, r3, #8
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	430a      	orrs	r2, r1
 800a3c8:	61da      	str	r2, [r3, #28]
      break;
 800a3ca:	e002      	b.n	800a3d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	75fb      	strb	r3, [r7, #23]
      break;
 800a3d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3718      	adds	r7, #24
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d101      	bne.n	800a400 <HAL_TIM_ConfigClockSource+0x1c>
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	e0b4      	b.n	800a56a <HAL_TIM_ConfigClockSource+0x186>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2202      	movs	r2, #2
 800a40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a41e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a426:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a438:	d03e      	beq.n	800a4b8 <HAL_TIM_ConfigClockSource+0xd4>
 800a43a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a43e:	f200 8087 	bhi.w	800a550 <HAL_TIM_ConfigClockSource+0x16c>
 800a442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a446:	f000 8086 	beq.w	800a556 <HAL_TIM_ConfigClockSource+0x172>
 800a44a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a44e:	d87f      	bhi.n	800a550 <HAL_TIM_ConfigClockSource+0x16c>
 800a450:	2b70      	cmp	r3, #112	; 0x70
 800a452:	d01a      	beq.n	800a48a <HAL_TIM_ConfigClockSource+0xa6>
 800a454:	2b70      	cmp	r3, #112	; 0x70
 800a456:	d87b      	bhi.n	800a550 <HAL_TIM_ConfigClockSource+0x16c>
 800a458:	2b60      	cmp	r3, #96	; 0x60
 800a45a:	d050      	beq.n	800a4fe <HAL_TIM_ConfigClockSource+0x11a>
 800a45c:	2b60      	cmp	r3, #96	; 0x60
 800a45e:	d877      	bhi.n	800a550 <HAL_TIM_ConfigClockSource+0x16c>
 800a460:	2b50      	cmp	r3, #80	; 0x50
 800a462:	d03c      	beq.n	800a4de <HAL_TIM_ConfigClockSource+0xfa>
 800a464:	2b50      	cmp	r3, #80	; 0x50
 800a466:	d873      	bhi.n	800a550 <HAL_TIM_ConfigClockSource+0x16c>
 800a468:	2b40      	cmp	r3, #64	; 0x40
 800a46a:	d058      	beq.n	800a51e <HAL_TIM_ConfigClockSource+0x13a>
 800a46c:	2b40      	cmp	r3, #64	; 0x40
 800a46e:	d86f      	bhi.n	800a550 <HAL_TIM_ConfigClockSource+0x16c>
 800a470:	2b30      	cmp	r3, #48	; 0x30
 800a472:	d064      	beq.n	800a53e <HAL_TIM_ConfigClockSource+0x15a>
 800a474:	2b30      	cmp	r3, #48	; 0x30
 800a476:	d86b      	bhi.n	800a550 <HAL_TIM_ConfigClockSource+0x16c>
 800a478:	2b20      	cmp	r3, #32
 800a47a:	d060      	beq.n	800a53e <HAL_TIM_ConfigClockSource+0x15a>
 800a47c:	2b20      	cmp	r3, #32
 800a47e:	d867      	bhi.n	800a550 <HAL_TIM_ConfigClockSource+0x16c>
 800a480:	2b00      	cmp	r3, #0
 800a482:	d05c      	beq.n	800a53e <HAL_TIM_ConfigClockSource+0x15a>
 800a484:	2b10      	cmp	r3, #16
 800a486:	d05a      	beq.n	800a53e <HAL_TIM_ConfigClockSource+0x15a>
 800a488:	e062      	b.n	800a550 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6818      	ldr	r0, [r3, #0]
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	6899      	ldr	r1, [r3, #8]
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	685a      	ldr	r2, [r3, #4]
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	f000 fc95 	bl	800adc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a4ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	609a      	str	r2, [r3, #8]
      break;
 800a4b6:	e04f      	b.n	800a558 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6818      	ldr	r0, [r3, #0]
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	6899      	ldr	r1, [r3, #8]
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	685a      	ldr	r2, [r3, #4]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	f000 fc7e 	bl	800adc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	689a      	ldr	r2, [r3, #8]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4da:	609a      	str	r2, [r3, #8]
      break;
 800a4dc:	e03c      	b.n	800a558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6818      	ldr	r0, [r3, #0]
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	6859      	ldr	r1, [r3, #4]
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	f000 fbf2 	bl	800acd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2150      	movs	r1, #80	; 0x50
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 fc4b 	bl	800ad92 <TIM_ITRx_SetConfig>
      break;
 800a4fc:	e02c      	b.n	800a558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6818      	ldr	r0, [r3, #0]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	6859      	ldr	r1, [r3, #4]
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	461a      	mov	r2, r3
 800a50c:	f000 fc11 	bl	800ad32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2160      	movs	r1, #96	; 0x60
 800a516:	4618      	mov	r0, r3
 800a518:	f000 fc3b 	bl	800ad92 <TIM_ITRx_SetConfig>
      break;
 800a51c:	e01c      	b.n	800a558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6818      	ldr	r0, [r3, #0]
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	6859      	ldr	r1, [r3, #4]
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	461a      	mov	r2, r3
 800a52c:	f000 fbd2 	bl	800acd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2140      	movs	r1, #64	; 0x40
 800a536:	4618      	mov	r0, r3
 800a538:	f000 fc2b 	bl	800ad92 <TIM_ITRx_SetConfig>
      break;
 800a53c:	e00c      	b.n	800a558 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4619      	mov	r1, r3
 800a548:	4610      	mov	r0, r2
 800a54a:	f000 fc22 	bl	800ad92 <TIM_ITRx_SetConfig>
      break;
 800a54e:	e003      	b.n	800a558 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	73fb      	strb	r3, [r7, #15]
      break;
 800a554:	e000      	b.n	800a558 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a556:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a568:	7bfb      	ldrb	r3, [r7, #15]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a572:	b480      	push	{r7}
 800a574:	b083      	sub	sp, #12
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a57a:	bf00      	nop
 800a57c:	370c      	adds	r7, #12
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr

0800a586 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a586:	b480      	push	{r7}
 800a588:	b083      	sub	sp, #12
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a58e:	bf00      	nop
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b083      	sub	sp, #12
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a5a2:	bf00      	nop
 800a5a4:	370c      	adds	r7, #12
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b083      	sub	sp, #12
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a5b6:	bf00      	nop
 800a5b8:	370c      	adds	r7, #12
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr

0800a5c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a5c2:	b480      	push	{r7}
 800a5c4:	b083      	sub	sp, #12
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5ca:	bf00      	nop
 800a5cc:	370c      	adds	r7, #12
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	b083      	sub	sp, #12
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a5de:	bf00      	nop
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5ea:	b480      	push	{r7}
 800a5ec:	b083      	sub	sp, #12
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5f2:	bf00      	nop
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a5fe:	b480      	push	{r7}
 800a600:	b083      	sub	sp, #12
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a606:	bf00      	nop
 800a608:	370c      	adds	r7, #12
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a612:	b480      	push	{r7}
 800a614:	b083      	sub	sp, #12
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a61a:	bf00      	nop
 800a61c:	370c      	adds	r7, #12
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
	...

0800a628 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a628:	b480      	push	{r7}
 800a62a:	b087      	sub	sp, #28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	460b      	mov	r3, r1
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	e135      	b.n	800a8b0 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d101      	bne.n	800a652 <HAL_TIM_RegisterCallback+0x2a>
 800a64e:	2302      	movs	r3, #2
 800a650:	e12e      	b.n	800a8b0 <HAL_TIM_RegisterCallback+0x288>
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2201      	movs	r2, #1
 800a656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b01      	cmp	r3, #1
 800a664:	f040 80ba 	bne.w	800a7dc <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 800a668:	7afb      	ldrb	r3, [r7, #11]
 800a66a:	2b1a      	cmp	r3, #26
 800a66c:	f200 80b3 	bhi.w	800a7d6 <HAL_TIM_RegisterCallback+0x1ae>
 800a670:	a201      	add	r2, pc, #4	; (adr r2, 800a678 <HAL_TIM_RegisterCallback+0x50>)
 800a672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a676:	bf00      	nop
 800a678:	0800a6e5 	.word	0x0800a6e5
 800a67c:	0800a6ed 	.word	0x0800a6ed
 800a680:	0800a6f5 	.word	0x0800a6f5
 800a684:	0800a6fd 	.word	0x0800a6fd
 800a688:	0800a705 	.word	0x0800a705
 800a68c:	0800a70d 	.word	0x0800a70d
 800a690:	0800a715 	.word	0x0800a715
 800a694:	0800a71d 	.word	0x0800a71d
 800a698:	0800a725 	.word	0x0800a725
 800a69c:	0800a72d 	.word	0x0800a72d
 800a6a0:	0800a735 	.word	0x0800a735
 800a6a4:	0800a73d 	.word	0x0800a73d
 800a6a8:	0800a745 	.word	0x0800a745
 800a6ac:	0800a74d 	.word	0x0800a74d
 800a6b0:	0800a755 	.word	0x0800a755
 800a6b4:	0800a75f 	.word	0x0800a75f
 800a6b8:	0800a769 	.word	0x0800a769
 800a6bc:	0800a773 	.word	0x0800a773
 800a6c0:	0800a77d 	.word	0x0800a77d
 800a6c4:	0800a787 	.word	0x0800a787
 800a6c8:	0800a791 	.word	0x0800a791
 800a6cc:	0800a79b 	.word	0x0800a79b
 800a6d0:	0800a7a5 	.word	0x0800a7a5
 800a6d4:	0800a7af 	.word	0x0800a7af
 800a6d8:	0800a7b9 	.word	0x0800a7b9
 800a6dc:	0800a7c3 	.word	0x0800a7c3
 800a6e0:	0800a7cd 	.word	0x0800a7cd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a6ea:	e0dc      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a6f2:	e0d8      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a6fa:	e0d4      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a702:	e0d0      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a70a:	e0cc      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a712:	e0c8      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a71a:	e0c4      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a722:	e0c0      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a72a:	e0bc      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a732:	e0b8      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a73a:	e0b4      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a742:	e0b0      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a74a:	e0ac      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a752:	e0a8      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800a75c:	e0a3      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800a766:	e09e      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800a770:	e099      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800a77a:	e094      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800a784:	e08f      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800a78e:	e08a      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800a798:	e085      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800a7a2:	e080      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800a7ac:	e07b      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800a7b6:	e076      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800a7c0:	e071      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800a7ca:	e06c      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800a7d4:	e067      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	75fb      	strb	r3, [r7, #23]
        break;
 800a7da:	e064      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d15c      	bne.n	800a8a2 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800a7e8:	7afb      	ldrb	r3, [r7, #11]
 800a7ea:	2b0d      	cmp	r3, #13
 800a7ec:	d856      	bhi.n	800a89c <HAL_TIM_RegisterCallback+0x274>
 800a7ee:	a201      	add	r2, pc, #4	; (adr r2, 800a7f4 <HAL_TIM_RegisterCallback+0x1cc>)
 800a7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f4:	0800a82d 	.word	0x0800a82d
 800a7f8:	0800a835 	.word	0x0800a835
 800a7fc:	0800a83d 	.word	0x0800a83d
 800a800:	0800a845 	.word	0x0800a845
 800a804:	0800a84d 	.word	0x0800a84d
 800a808:	0800a855 	.word	0x0800a855
 800a80c:	0800a85d 	.word	0x0800a85d
 800a810:	0800a865 	.word	0x0800a865
 800a814:	0800a86d 	.word	0x0800a86d
 800a818:	0800a875 	.word	0x0800a875
 800a81c:	0800a87d 	.word	0x0800a87d
 800a820:	0800a885 	.word	0x0800a885
 800a824:	0800a88d 	.word	0x0800a88d
 800a828:	0800a895 	.word	0x0800a895
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a832:	e038      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a83a:	e034      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a842:	e030      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a84a:	e02c      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a852:	e028      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a85a:	e024      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a862:	e020      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a86a:	e01c      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a872:	e018      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a87a:	e014      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a882:	e010      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a88a:	e00c      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a892:	e008      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a89a:	e004      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	75fb      	strb	r3, [r7, #23]
        break;
 800a8a0:	e001      	b.n	800a8a6 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a8ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	371c      	adds	r7, #28
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a34      	ldr	r2, [pc, #208]	; (800a9a0 <TIM_Base_SetConfig+0xe4>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d00f      	beq.n	800a8f4 <TIM_Base_SetConfig+0x38>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8da:	d00b      	beq.n	800a8f4 <TIM_Base_SetConfig+0x38>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a31      	ldr	r2, [pc, #196]	; (800a9a4 <TIM_Base_SetConfig+0xe8>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d007      	beq.n	800a8f4 <TIM_Base_SetConfig+0x38>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a30      	ldr	r2, [pc, #192]	; (800a9a8 <TIM_Base_SetConfig+0xec>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d003      	beq.n	800a8f4 <TIM_Base_SetConfig+0x38>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a2f      	ldr	r2, [pc, #188]	; (800a9ac <TIM_Base_SetConfig+0xf0>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d108      	bne.n	800a906 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	4313      	orrs	r3, r2
 800a904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a25      	ldr	r2, [pc, #148]	; (800a9a0 <TIM_Base_SetConfig+0xe4>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d01b      	beq.n	800a946 <TIM_Base_SetConfig+0x8a>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a914:	d017      	beq.n	800a946 <TIM_Base_SetConfig+0x8a>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a22      	ldr	r2, [pc, #136]	; (800a9a4 <TIM_Base_SetConfig+0xe8>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d013      	beq.n	800a946 <TIM_Base_SetConfig+0x8a>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a21      	ldr	r2, [pc, #132]	; (800a9a8 <TIM_Base_SetConfig+0xec>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d00f      	beq.n	800a946 <TIM_Base_SetConfig+0x8a>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a20      	ldr	r2, [pc, #128]	; (800a9ac <TIM_Base_SetConfig+0xf0>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d00b      	beq.n	800a946 <TIM_Base_SetConfig+0x8a>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a1f      	ldr	r2, [pc, #124]	; (800a9b0 <TIM_Base_SetConfig+0xf4>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d007      	beq.n	800a946 <TIM_Base_SetConfig+0x8a>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a1e      	ldr	r2, [pc, #120]	; (800a9b4 <TIM_Base_SetConfig+0xf8>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d003      	beq.n	800a946 <TIM_Base_SetConfig+0x8a>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a1d      	ldr	r2, [pc, #116]	; (800a9b8 <TIM_Base_SetConfig+0xfc>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d108      	bne.n	800a958 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a94c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	4313      	orrs	r3, r2
 800a956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	4313      	orrs	r3, r2
 800a964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	689a      	ldr	r2, [r3, #8]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a08      	ldr	r2, [pc, #32]	; (800a9a0 <TIM_Base_SetConfig+0xe4>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d103      	bne.n	800a98c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	691a      	ldr	r2, [r3, #16]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	615a      	str	r2, [r3, #20]
}
 800a992:	bf00      	nop
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	40010000 	.word	0x40010000
 800a9a4:	40000400 	.word	0x40000400
 800a9a8:	40000800 	.word	0x40000800
 800a9ac:	40000c00 	.word	0x40000c00
 800a9b0:	40014000 	.word	0x40014000
 800a9b4:	40014400 	.word	0x40014400
 800a9b8:	40014800 	.word	0x40014800

0800a9bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b087      	sub	sp, #28
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a1b      	ldr	r3, [r3, #32]
 800a9ca:	f023 0201 	bic.w	r2, r3, #1
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a1b      	ldr	r3, [r3, #32]
 800a9d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f023 0303 	bic.w	r3, r3, #3
 800a9f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	f023 0302 	bic.w	r3, r3, #2
 800aa04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	697a      	ldr	r2, [r7, #20]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4a1c      	ldr	r2, [pc, #112]	; (800aa84 <TIM_OC1_SetConfig+0xc8>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d10c      	bne.n	800aa32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	f023 0308 	bic.w	r3, r3, #8
 800aa1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	4313      	orrs	r3, r2
 800aa28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f023 0304 	bic.w	r3, r3, #4
 800aa30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a13      	ldr	r2, [pc, #76]	; (800aa84 <TIM_OC1_SetConfig+0xc8>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d111      	bne.n	800aa5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	695b      	ldr	r3, [r3, #20]
 800aa4e:	693a      	ldr	r2, [r7, #16]
 800aa50:	4313      	orrs	r3, r2
 800aa52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	693a      	ldr	r2, [r7, #16]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	693a      	ldr	r2, [r7, #16]
 800aa62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	68fa      	ldr	r2, [r7, #12]
 800aa68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	685a      	ldr	r2, [r3, #4]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	697a      	ldr	r2, [r7, #20]
 800aa76:	621a      	str	r2, [r3, #32]
}
 800aa78:	bf00      	nop
 800aa7a:	371c      	adds	r7, #28
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr
 800aa84:	40010000 	.word	0x40010000

0800aa88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b087      	sub	sp, #28
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a1b      	ldr	r3, [r3, #32]
 800aa96:	f023 0210 	bic.w	r2, r3, #16
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aabe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	021b      	lsls	r3, r3, #8
 800aac6:	68fa      	ldr	r2, [r7, #12]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	f023 0320 	bic.w	r3, r3, #32
 800aad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	011b      	lsls	r3, r3, #4
 800aada:	697a      	ldr	r2, [r7, #20]
 800aadc:	4313      	orrs	r3, r2
 800aade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a1e      	ldr	r2, [pc, #120]	; (800ab5c <TIM_OC2_SetConfig+0xd4>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d10d      	bne.n	800ab04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	011b      	lsls	r3, r3, #4
 800aaf6:	697a      	ldr	r2, [r7, #20]
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4a15      	ldr	r2, [pc, #84]	; (800ab5c <TIM_OC2_SetConfig+0xd4>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d113      	bne.n	800ab34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	695b      	ldr	r3, [r3, #20]
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	693a      	ldr	r2, [r7, #16]
 800ab24:	4313      	orrs	r3, r2
 800ab26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	699b      	ldr	r3, [r3, #24]
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	693a      	ldr	r2, [r7, #16]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	693a      	ldr	r2, [r7, #16]
 800ab38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	685a      	ldr	r2, [r3, #4]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	697a      	ldr	r2, [r7, #20]
 800ab4c:	621a      	str	r2, [r3, #32]
}
 800ab4e:	bf00      	nop
 800ab50:	371c      	adds	r7, #28
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	40010000 	.word	0x40010000

0800ab60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b087      	sub	sp, #28
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a1b      	ldr	r3, [r3, #32]
 800ab6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a1b      	ldr	r3, [r3, #32]
 800ab7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	69db      	ldr	r3, [r3, #28]
 800ab86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f023 0303 	bic.w	r3, r3, #3
 800ab96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	021b      	lsls	r3, r3, #8
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4a1d      	ldr	r2, [pc, #116]	; (800ac30 <TIM_OC3_SetConfig+0xd0>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d10d      	bne.n	800abda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	021b      	lsls	r3, r3, #8
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	4313      	orrs	r3, r2
 800abd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800abd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a14      	ldr	r2, [pc, #80]	; (800ac30 <TIM_OC3_SetConfig+0xd0>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d113      	bne.n	800ac0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	011b      	lsls	r3, r3, #4
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	699b      	ldr	r3, [r3, #24]
 800ac02:	011b      	lsls	r3, r3, #4
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	693a      	ldr	r2, [r7, #16]
 800ac0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	697a      	ldr	r2, [r7, #20]
 800ac22:	621a      	str	r2, [r3, #32]
}
 800ac24:	bf00      	nop
 800ac26:	371c      	adds	r7, #28
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	40010000 	.word	0x40010000

0800ac34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b087      	sub	sp, #28
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a1b      	ldr	r3, [r3, #32]
 800ac4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	69db      	ldr	r3, [r3, #28]
 800ac5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	021b      	lsls	r3, r3, #8
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	031b      	lsls	r3, r3, #12
 800ac86:	693a      	ldr	r2, [r7, #16]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a10      	ldr	r2, [pc, #64]	; (800acd0 <TIM_OC4_SetConfig+0x9c>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d109      	bne.n	800aca8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	695b      	ldr	r3, [r3, #20]
 800aca0:	019b      	lsls	r3, r3, #6
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	4313      	orrs	r3, r2
 800aca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	697a      	ldr	r2, [r7, #20]
 800acac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	685a      	ldr	r2, [r3, #4]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	693a      	ldr	r2, [r7, #16]
 800acc0:	621a      	str	r2, [r3, #32]
}
 800acc2:	bf00      	nop
 800acc4:	371c      	adds	r7, #28
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	40010000 	.word	0x40010000

0800acd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b087      	sub	sp, #28
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	6a1b      	ldr	r3, [r3, #32]
 800ace4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	6a1b      	ldr	r3, [r3, #32]
 800acea:	f023 0201 	bic.w	r2, r3, #1
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	699b      	ldr	r3, [r3, #24]
 800acf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800acfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	011b      	lsls	r3, r3, #4
 800ad04:	693a      	ldr	r2, [r7, #16]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	f023 030a 	bic.w	r3, r3, #10
 800ad10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	621a      	str	r2, [r3, #32]
}
 800ad26:	bf00      	nop
 800ad28:	371c      	adds	r7, #28
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad32:	b480      	push	{r7}
 800ad34:	b087      	sub	sp, #28
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	60f8      	str	r0, [r7, #12]
 800ad3a:	60b9      	str	r1, [r7, #8]
 800ad3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6a1b      	ldr	r3, [r3, #32]
 800ad42:	f023 0210 	bic.w	r2, r3, #16
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	699b      	ldr	r3, [r3, #24]
 800ad4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6a1b      	ldr	r3, [r3, #32]
 800ad54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	031b      	lsls	r3, r3, #12
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	4313      	orrs	r3, r2
 800ad66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	011b      	lsls	r3, r3, #4
 800ad74:	693a      	ldr	r2, [r7, #16]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	697a      	ldr	r2, [r7, #20]
 800ad7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	693a      	ldr	r2, [r7, #16]
 800ad84:	621a      	str	r2, [r3, #32]
}
 800ad86:	bf00      	nop
 800ad88:	371c      	adds	r7, #28
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b085      	sub	sp, #20
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
 800ad9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ada8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	4313      	orrs	r3, r2
 800adb0:	f043 0307 	orr.w	r3, r3, #7
 800adb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	609a      	str	r2, [r3, #8]
}
 800adbc:	bf00      	nop
 800adbe:	3714      	adds	r7, #20
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800adc8:	b480      	push	{r7}
 800adca:	b087      	sub	sp, #28
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
 800add4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ade2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	021a      	lsls	r2, r3, #8
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	431a      	orrs	r2, r3
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	4313      	orrs	r3, r2
 800adf0:	697a      	ldr	r2, [r7, #20]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	609a      	str	r2, [r3, #8]
}
 800adfc:	bf00      	nop
 800adfe:	371c      	adds	r7, #28
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b087      	sub	sp, #28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	f003 031f 	and.w	r3, r3, #31
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6a1a      	ldr	r2, [r3, #32]
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	43db      	mvns	r3, r3
 800ae2a:	401a      	ands	r2, r3
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6a1a      	ldr	r2, [r3, #32]
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	f003 031f 	and.w	r3, r3, #31
 800ae3a:	6879      	ldr	r1, [r7, #4]
 800ae3c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae40:	431a      	orrs	r2, r3
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	621a      	str	r2, [r3, #32]
}
 800ae46:	bf00      	nop
 800ae48:	371c      	adds	r7, #28
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
	...

0800ae54 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a1c      	ldr	r2, [pc, #112]	; (800aed0 <TIM_ResetCallback+0x7c>)
 800ae60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a1b      	ldr	r2, [pc, #108]	; (800aed4 <TIM_ResetCallback+0x80>)
 800ae68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a1a      	ldr	r2, [pc, #104]	; (800aed8 <TIM_ResetCallback+0x84>)
 800ae70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a19      	ldr	r2, [pc, #100]	; (800aedc <TIM_ResetCallback+0x88>)
 800ae78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a18      	ldr	r2, [pc, #96]	; (800aee0 <TIM_ResetCallback+0x8c>)
 800ae80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4a17      	ldr	r2, [pc, #92]	; (800aee4 <TIM_ResetCallback+0x90>)
 800ae88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	4a16      	ldr	r2, [pc, #88]	; (800aee8 <TIM_ResetCallback+0x94>)
 800ae90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	4a15      	ldr	r2, [pc, #84]	; (800aeec <TIM_ResetCallback+0x98>)
 800ae98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4a14      	ldr	r2, [pc, #80]	; (800aef0 <TIM_ResetCallback+0x9c>)
 800aea0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	4a13      	ldr	r2, [pc, #76]	; (800aef4 <TIM_ResetCallback+0xa0>)
 800aea8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	4a12      	ldr	r2, [pc, #72]	; (800aef8 <TIM_ResetCallback+0xa4>)
 800aeb0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4a11      	ldr	r2, [pc, #68]	; (800aefc <TIM_ResetCallback+0xa8>)
 800aeb8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a10      	ldr	r2, [pc, #64]	; (800af00 <TIM_ResetCallback+0xac>)
 800aec0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800aec4:	bf00      	nop
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr
 800aed0:	08003945 	.word	0x08003945
 800aed4:	0800a573 	.word	0x0800a573
 800aed8:	0800a5eb 	.word	0x0800a5eb
 800aedc:	0800a5ff 	.word	0x0800a5ff
 800aee0:	0800a59b 	.word	0x0800a59b
 800aee4:	0800a5af 	.word	0x0800a5af
 800aee8:	0800a587 	.word	0x0800a587
 800aeec:	0800a5c3 	.word	0x0800a5c3
 800aef0:	0800a5d7 	.word	0x0800a5d7
 800aef4:	0800a613 	.word	0x0800a613
 800aef8:	0800b085 	.word	0x0800b085
 800aefc:	0800b099 	.word	0x0800b099
 800af00:	0800b0ad 	.word	0x0800b0ad

0800af04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af14:	2b01      	cmp	r3, #1
 800af16:	d101      	bne.n	800af1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af18:	2302      	movs	r3, #2
 800af1a:	e050      	b.n	800afbe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2202      	movs	r2, #2
 800af28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a1c      	ldr	r2, [pc, #112]	; (800afcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d018      	beq.n	800af92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af68:	d013      	beq.n	800af92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a18      	ldr	r2, [pc, #96]	; (800afd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d00e      	beq.n	800af92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a16      	ldr	r2, [pc, #88]	; (800afd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d009      	beq.n	800af92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a15      	ldr	r2, [pc, #84]	; (800afd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d004      	beq.n	800af92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a13      	ldr	r2, [pc, #76]	; (800afdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d10c      	bne.n	800afac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	68ba      	ldr	r2, [r7, #8]
 800afa0:	4313      	orrs	r3, r2
 800afa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68ba      	ldr	r2, [r7, #8]
 800afaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3714      	adds	r7, #20
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	40010000 	.word	0x40010000
 800afd0:	40000400 	.word	0x40000400
 800afd4:	40000800 	.word	0x40000800
 800afd8:	40000c00 	.word	0x40000c00
 800afdc:	40014000 	.word	0x40014000

0800afe0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800afea:	2300      	movs	r3, #0
 800afec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d101      	bne.n	800affc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aff8:	2302      	movs	r3, #2
 800affa:	e03d      	b.n	800b078 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	4313      	orrs	r3, r2
 800b010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4313      	orrs	r3, r2
 800b03a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	4313      	orrs	r3, r2
 800b048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	695b      	ldr	r3, [r3, #20]
 800b054:	4313      	orrs	r3, r2
 800b056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	69db      	ldr	r3, [r3, #28]
 800b062:	4313      	orrs	r3, r2
 800b064:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3714      	adds	r7, #20
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d101      	bne.n	800b0d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e04a      	b.n	800b168 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d111      	bne.n	800b102 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fd72 	bl	800bbd0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d102      	bne.n	800b0fa <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a1e      	ldr	r2, [pc, #120]	; (800b170 <HAL_UART_Init+0xb0>)
 800b0f8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2224      	movs	r2, #36	; 0x24
 800b106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	68da      	ldr	r2, [r3, #12]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b118:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f001 f83c 	bl	800c198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	691a      	ldr	r2, [r3, #16]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b12e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	695a      	ldr	r2, [r3, #20]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b13e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68da      	ldr	r2, [r3, #12]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b14e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2220      	movs	r2, #32
 800b15a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2220      	movs	r2, #32
 800b162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b166:	2300      	movs	r3, #0
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	080047f9 	.word	0x080047f9

0800b174 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b174:	b480      	push	{r7}
 800b176:	b087      	sub	sp, #28
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	460b      	mov	r3, r1
 800b17e:	607a      	str	r2, [r7, #4]
 800b180:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b182:	2300      	movs	r3, #0
 800b184:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d107      	bne.n	800b19c <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b190:	f043 0220 	orr.w	r2, r3, #32
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	e08c      	b.n	800b2b6 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d101      	bne.n	800b1aa <HAL_UART_RegisterCallback+0x36>
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	e085      	b.n	800b2b6 <HAL_UART_RegisterCallback+0x142>
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	2b20      	cmp	r3, #32
 800b1bc:	d151      	bne.n	800b262 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800b1be:	7afb      	ldrb	r3, [r7, #11]
 800b1c0:	2b0c      	cmp	r3, #12
 800b1c2:	d845      	bhi.n	800b250 <HAL_UART_RegisterCallback+0xdc>
 800b1c4:	a201      	add	r2, pc, #4	; (adr r2, 800b1cc <HAL_UART_RegisterCallback+0x58>)
 800b1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ca:	bf00      	nop
 800b1cc:	0800b201 	.word	0x0800b201
 800b1d0:	0800b209 	.word	0x0800b209
 800b1d4:	0800b211 	.word	0x0800b211
 800b1d8:	0800b219 	.word	0x0800b219
 800b1dc:	0800b221 	.word	0x0800b221
 800b1e0:	0800b229 	.word	0x0800b229
 800b1e4:	0800b231 	.word	0x0800b231
 800b1e8:	0800b239 	.word	0x0800b239
 800b1ec:	0800b251 	.word	0x0800b251
 800b1f0:	0800b251 	.word	0x0800b251
 800b1f4:	0800b251 	.word	0x0800b251
 800b1f8:	0800b241 	.word	0x0800b241
 800b1fc:	0800b249 	.word	0x0800b249
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800b206:	e051      	b.n	800b2ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800b20e:	e04d      	b.n	800b2ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800b216:	e049      	b.n	800b2ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800b21e:	e045      	b.n	800b2ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800b226:	e041      	b.n	800b2ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800b22e:	e03d      	b.n	800b2ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800b236:	e039      	b.n	800b2ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800b23e:	e035      	b.n	800b2ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b246:	e031      	b.n	800b2ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b24e:	e02d      	b.n	800b2ac <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b254:	f043 0220 	orr.w	r2, r3, #32
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	75fb      	strb	r3, [r7, #23]
        break;
 800b260:	e024      	b.n	800b2ac <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d116      	bne.n	800b29c <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800b26e:	7afb      	ldrb	r3, [r7, #11]
 800b270:	2b0b      	cmp	r3, #11
 800b272:	d002      	beq.n	800b27a <HAL_UART_RegisterCallback+0x106>
 800b274:	2b0c      	cmp	r3, #12
 800b276:	d004      	beq.n	800b282 <HAL_UART_RegisterCallback+0x10e>
 800b278:	e007      	b.n	800b28a <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b280:	e014      	b.n	800b2ac <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b288:	e010      	b.n	800b2ac <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b28e:	f043 0220 	orr.w	r2, r3, #32
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	75fb      	strb	r3, [r7, #23]
        break;
 800b29a:	e007      	b.n	800b2ac <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a0:	f043 0220 	orr.w	r2, r3, #32
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b2b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	371c      	adds	r7, #28
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop

0800b2c4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	2b20      	cmp	r3, #32
 800b2dc:	d130      	bne.n	800b340 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <HAL_UART_Transmit_IT+0x26>
 800b2e4:	88fb      	ldrh	r3, [r7, #6]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d101      	bne.n	800b2ee <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e029      	b.n	800b342 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d101      	bne.n	800b2fc <HAL_UART_Transmit_IT+0x38>
 800b2f8:	2302      	movs	r3, #2
 800b2fa:	e022      	b.n	800b342 <HAL_UART_Transmit_IT+0x7e>
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2201      	movs	r2, #1
 800b300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	68ba      	ldr	r2, [r7, #8]
 800b308:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	88fa      	ldrh	r2, [r7, #6]
 800b30e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	88fa      	ldrh	r2, [r7, #6]
 800b314:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2221      	movs	r2, #33	; 0x21
 800b320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68da      	ldr	r2, [r3, #12]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b33a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b33c:	2300      	movs	r3, #0
 800b33e:	e000      	b.n	800b342 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b340:	2302      	movs	r3, #2
  }
}
 800b342:	4618      	mov	r0, r3
 800b344:	3714      	adds	r7, #20
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr

0800b34e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b084      	sub	sp, #16
 800b352:	af00      	add	r7, sp, #0
 800b354:	60f8      	str	r0, [r7, #12]
 800b356:	60b9      	str	r1, [r7, #8]
 800b358:	4613      	mov	r3, r2
 800b35a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b362:	b2db      	uxtb	r3, r3
 800b364:	2b20      	cmp	r3, #32
 800b366:	d11d      	bne.n	800b3a4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d002      	beq.n	800b374 <HAL_UART_Receive_IT+0x26>
 800b36e:	88fb      	ldrh	r3, [r7, #6]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d101      	bne.n	800b378 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b374:	2301      	movs	r3, #1
 800b376:	e016      	b.n	800b3a6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d101      	bne.n	800b386 <HAL_UART_Receive_IT+0x38>
 800b382:	2302      	movs	r3, #2
 800b384:	e00f      	b.n	800b3a6 <HAL_UART_Receive_IT+0x58>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2201      	movs	r2, #1
 800b38a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b394:	88fb      	ldrh	r3, [r7, #6]
 800b396:	461a      	mov	r2, r3
 800b398:	68b9      	ldr	r1, [r7, #8]
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f000 fcf8 	bl	800bd90 <UART_Start_Receive_IT>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	e000      	b.n	800b3a6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b3a4:	2302      	movs	r3, #2
  }
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
	...

0800b3b0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b08c      	sub	sp, #48	; 0x30
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	60f8      	str	r0, [r7, #12]
 800b3b8:	60b9      	str	r1, [r7, #8]
 800b3ba:	4613      	mov	r3, r2
 800b3bc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	2b20      	cmp	r3, #32
 800b3c8:	d165      	bne.n	800b496 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d002      	beq.n	800b3d6 <HAL_UART_Transmit_DMA+0x26>
 800b3d0:	88fb      	ldrh	r3, [r7, #6]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d101      	bne.n	800b3da <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e05e      	b.n	800b498 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d101      	bne.n	800b3e8 <HAL_UART_Transmit_DMA+0x38>
 800b3e4:	2302      	movs	r3, #2
 800b3e6:	e057      	b.n	800b498 <HAL_UART_Transmit_DMA+0xe8>
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b3f0:	68ba      	ldr	r2, [r7, #8]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	88fa      	ldrh	r2, [r7, #6]
 800b3fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	88fa      	ldrh	r2, [r7, #6]
 800b400:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2221      	movs	r2, #33	; 0x21
 800b40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b414:	4a22      	ldr	r2, [pc, #136]	; (800b4a0 <HAL_UART_Transmit_DMA+0xf0>)
 800b416:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b41c:	4a21      	ldr	r2, [pc, #132]	; (800b4a4 <HAL_UART_Transmit_DMA+0xf4>)
 800b41e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b424:	4a20      	ldr	r2, [pc, #128]	; (800b4a8 <HAL_UART_Transmit_DMA+0xf8>)
 800b426:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b42c:	2200      	movs	r2, #0
 800b42e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b430:	f107 0308 	add.w	r3, r7, #8
 800b434:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43c:	6819      	ldr	r1, [r3, #0]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	3304      	adds	r3, #4
 800b444:	461a      	mov	r2, r3
 800b446:	88fb      	ldrh	r3, [r7, #6]
 800b448:	f7fa faa8 	bl	800599c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b454:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	3314      	adds	r3, #20
 800b464:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	e853 3f00 	ldrex	r3, [r3]
 800b46c:	617b      	str	r3, [r7, #20]
   return(result);
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b474:	62bb      	str	r3, [r7, #40]	; 0x28
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	3314      	adds	r3, #20
 800b47c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b47e:	627a      	str	r2, [r7, #36]	; 0x24
 800b480:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b482:	6a39      	ldr	r1, [r7, #32]
 800b484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b486:	e841 2300 	strex	r3, r2, [r1]
 800b48a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1e5      	bne.n	800b45e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800b492:	2300      	movs	r3, #0
 800b494:	e000      	b.n	800b498 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800b496:	2302      	movs	r3, #2
  }
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3730      	adds	r7, #48	; 0x30
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	0800bc41 	.word	0x0800bc41
 800b4a4:	0800bcdd 	.word	0x0800bcdd
 800b4a8:	0800bcfb 	.word	0x0800bcfb

0800b4ac <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b09a      	sub	sp, #104	; 0x68
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	330c      	adds	r3, #12
 800b4ba:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4be:	e853 3f00 	ldrex	r3, [r3]
 800b4c2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b4c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4ca:	667b      	str	r3, [r7, #100]	; 0x64
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	330c      	adds	r3, #12
 800b4d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b4d4:	657a      	str	r2, [r7, #84]	; 0x54
 800b4d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b4da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b4dc:	e841 2300 	strex	r3, r2, [r1]
 800b4e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b4e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1e5      	bne.n	800b4b4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	3314      	adds	r3, #20
 800b4ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4f2:	e853 3f00 	ldrex	r3, [r3]
 800b4f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fa:	f023 0301 	bic.w	r3, r3, #1
 800b4fe:	663b      	str	r3, [r7, #96]	; 0x60
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	3314      	adds	r3, #20
 800b506:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b508:	643a      	str	r2, [r7, #64]	; 0x40
 800b50a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b50e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b510:	e841 2300 	strex	r3, r2, [r1]
 800b514:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1e5      	bne.n	800b4e8 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b520:	2b01      	cmp	r3, #1
 800b522:	d119      	bne.n	800b558 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	330c      	adds	r3, #12
 800b52a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52c:	6a3b      	ldr	r3, [r7, #32]
 800b52e:	e853 3f00 	ldrex	r3, [r3]
 800b532:	61fb      	str	r3, [r7, #28]
   return(result);
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	f023 0310 	bic.w	r3, r3, #16
 800b53a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	330c      	adds	r3, #12
 800b542:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b544:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b54a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b54c:	e841 2300 	strex	r3, r2, [r1]
 800b550:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1e5      	bne.n	800b524 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	695b      	ldr	r3, [r3, #20]
 800b55e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b562:	2b40      	cmp	r3, #64	; 0x40
 800b564:	d136      	bne.n	800b5d4 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	3314      	adds	r3, #20
 800b56c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	e853 3f00 	ldrex	r3, [r3]
 800b574:	60bb      	str	r3, [r7, #8]
   return(result);
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b57c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3314      	adds	r3, #20
 800b584:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b586:	61ba      	str	r2, [r7, #24]
 800b588:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58a:	6979      	ldr	r1, [r7, #20]
 800b58c:	69ba      	ldr	r2, [r7, #24]
 800b58e:	e841 2300 	strex	r3, r2, [r1]
 800b592:	613b      	str	r3, [r7, #16]
   return(result);
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1e5      	bne.n	800b566 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d018      	beq.n	800b5d4 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fa fa4c 	bl	8005a4c <HAL_DMA_Abort>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00c      	beq.n	800b5d4 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fa fc6e 	bl	8005ea0 <HAL_DMA_GetError>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b20      	cmp	r3, #32
 800b5c8:	d104      	bne.n	800b5d4 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2210      	movs	r2, #16
 800b5ce:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800b5d0:	2303      	movs	r3, #3
 800b5d2:	e00a      	b.n	800b5ea <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2220      	movs	r2, #32
 800b5de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3768      	adds	r7, #104	; 0x68
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
	...

0800b5f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b0ba      	sub	sp, #232	; 0xe8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	695b      	ldr	r3, [r3, #20]
 800b616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b61a:	2300      	movs	r3, #0
 800b61c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b620:	2300      	movs	r3, #0
 800b622:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b62a:	f003 030f 	and.w	r3, r3, #15
 800b62e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10f      	bne.n	800b65a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b63a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b63e:	f003 0320 	and.w	r3, r3, #32
 800b642:	2b00      	cmp	r3, #0
 800b644:	d009      	beq.n	800b65a <HAL_UART_IRQHandler+0x66>
 800b646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b64a:	f003 0320 	and.w	r3, r3, #32
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d003      	beq.n	800b65a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fce3 	bl	800c01e <UART_Receive_IT>
      return;
 800b658:	e25b      	b.n	800bb12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b65a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f000 80e1 	beq.w	800b826 <HAL_UART_IRQHandler+0x232>
 800b664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b668:	f003 0301 	and.w	r3, r3, #1
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d106      	bne.n	800b67e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b674:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f000 80d4 	beq.w	800b826 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00b      	beq.n	800b6a2 <HAL_UART_IRQHandler+0xae>
 800b68a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b68e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b692:	2b00      	cmp	r3, #0
 800b694:	d005      	beq.n	800b6a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69a:	f043 0201 	orr.w	r2, r3, #1
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b6a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6a6:	f003 0304 	and.w	r3, r3, #4
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00b      	beq.n	800b6c6 <HAL_UART_IRQHandler+0xd2>
 800b6ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6b2:	f003 0301 	and.w	r3, r3, #1
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d005      	beq.n	800b6c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6be:	f043 0202 	orr.w	r2, r3, #2
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b6c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ca:	f003 0302 	and.w	r3, r3, #2
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00b      	beq.n	800b6ea <HAL_UART_IRQHandler+0xf6>
 800b6d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6d6:	f003 0301 	and.w	r3, r3, #1
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d005      	beq.n	800b6ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e2:	f043 0204 	orr.w	r2, r3, #4
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b6ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ee:	f003 0308 	and.w	r3, r3, #8
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d011      	beq.n	800b71a <HAL_UART_IRQHandler+0x126>
 800b6f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6fa:	f003 0320 	and.w	r3, r3, #32
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d105      	bne.n	800b70e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b706:	f003 0301 	and.w	r3, r3, #1
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d005      	beq.n	800b71a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b712:	f043 0208 	orr.w	r2, r3, #8
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b71e:	2b00      	cmp	r3, #0
 800b720:	f000 81f2 	beq.w	800bb08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b728:	f003 0320 	and.w	r3, r3, #32
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d008      	beq.n	800b742 <HAL_UART_IRQHandler+0x14e>
 800b730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b734:	f003 0320 	and.w	r3, r3, #32
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d002      	beq.n	800b742 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fc6e 	bl	800c01e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	695b      	ldr	r3, [r3, #20]
 800b748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b74c:	2b40      	cmp	r3, #64	; 0x40
 800b74e:	bf0c      	ite	eq
 800b750:	2301      	moveq	r3, #1
 800b752:	2300      	movne	r3, #0
 800b754:	b2db      	uxtb	r3, r3
 800b756:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b75e:	f003 0308 	and.w	r3, r3, #8
 800b762:	2b00      	cmp	r3, #0
 800b764:	d103      	bne.n	800b76e <HAL_UART_IRQHandler+0x17a>
 800b766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d051      	beq.n	800b812 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fb74 	bl	800be5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	695b      	ldr	r3, [r3, #20]
 800b77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b77e:	2b40      	cmp	r3, #64	; 0x40
 800b780:	d142      	bne.n	800b808 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	3314      	adds	r3, #20
 800b788:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b790:	e853 3f00 	ldrex	r3, [r3]
 800b794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b798:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b79c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	3314      	adds	r3, #20
 800b7aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b7ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b7b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b7ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b7be:	e841 2300 	strex	r3, r2, [r1]
 800b7c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b7c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d1d9      	bne.n	800b782 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d013      	beq.n	800b7fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7da:	4a7f      	ldr	r2, [pc, #508]	; (800b9d8 <HAL_UART_IRQHandler+0x3e4>)
 800b7dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fa f9a2 	bl	8005b2c <HAL_DMA_Abort_IT>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d019      	beq.n	800b822 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b7f8:	4610      	mov	r0, r2
 800b7fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7fc:	e011      	b.n	800b822 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b806:	e00c      	b.n	800b822 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b810:	e007      	b.n	800b822 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2200      	movs	r2, #0
 800b81e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b820:	e172      	b.n	800bb08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b822:	bf00      	nop
    return;
 800b824:	e170      	b.n	800bb08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	f040 814c 	bne.w	800bac8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b834:	f003 0310 	and.w	r3, r3, #16
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f000 8145 	beq.w	800bac8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b83e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b842:	f003 0310 	and.w	r3, r3, #16
 800b846:	2b00      	cmp	r3, #0
 800b848:	f000 813e 	beq.w	800bac8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b84c:	2300      	movs	r3, #0
 800b84e:	60bb      	str	r3, [r7, #8]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	60bb      	str	r3, [r7, #8]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	60bb      	str	r3, [r7, #8]
 800b860:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	695b      	ldr	r3, [r3, #20]
 800b868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b86c:	2b40      	cmp	r3, #64	; 0x40
 800b86e:	f040 80b5 	bne.w	800b9dc <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b87e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b882:	2b00      	cmp	r3, #0
 800b884:	f000 8142 	beq.w	800bb0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b88c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b890:	429a      	cmp	r2, r3
 800b892:	f080 813b 	bcs.w	800bb0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b89c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a2:	69db      	ldr	r3, [r3, #28]
 800b8a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a8:	f000 8088 	beq.w	800b9bc <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	330c      	adds	r3, #12
 800b8b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b8ba:	e853 3f00 	ldrex	r3, [r3]
 800b8be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b8c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	330c      	adds	r3, #12
 800b8d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b8d8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b8dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b8e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b8e8:	e841 2300 	strex	r3, r2, [r1]
 800b8ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b8f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d1d9      	bne.n	800b8ac <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	3314      	adds	r3, #20
 800b8fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b902:	e853 3f00 	ldrex	r3, [r3]
 800b906:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b908:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b90a:	f023 0301 	bic.w	r3, r3, #1
 800b90e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	3314      	adds	r3, #20
 800b918:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b91c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b920:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b922:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b924:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b928:	e841 2300 	strex	r3, r2, [r1]
 800b92c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b92e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b930:	2b00      	cmp	r3, #0
 800b932:	d1e1      	bne.n	800b8f8 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	3314      	adds	r3, #20
 800b93a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b93c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b93e:	e853 3f00 	ldrex	r3, [r3]
 800b942:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b94a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	3314      	adds	r3, #20
 800b954:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b958:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b95a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b95e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b960:	e841 2300 	strex	r3, r2, [r1]
 800b964:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1e3      	bne.n	800b934 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2220      	movs	r2, #32
 800b970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	330c      	adds	r3, #12
 800b980:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b984:	e853 3f00 	ldrex	r3, [r3]
 800b988:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b98a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b98c:	f023 0310 	bic.w	r3, r3, #16
 800b990:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	330c      	adds	r3, #12
 800b99a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b99e:	65ba      	str	r2, [r7, #88]	; 0x58
 800b9a0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b9a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9a6:	e841 2300 	strex	r3, r2, [r1]
 800b9aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b9ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1e3      	bne.n	800b97a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7fa f848 	bl	8005a4c <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b9c8:	b292      	uxth	r2, r2
 800b9ca:	1a8a      	subs	r2, r1, r2
 800b9cc:	b292      	uxth	r2, r2
 800b9ce:	4611      	mov	r1, r2
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b9d4:	e09a      	b.n	800bb0c <HAL_UART_IRQHandler+0x518>
 800b9d6:	bf00      	nop
 800b9d8:	0800bf23 	.word	0x0800bf23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	1ad3      	subs	r3, r2, r3
 800b9e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	f000 808c 	beq.w	800bb10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b9f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f000 8087 	beq.w	800bb10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	330c      	adds	r3, #12
 800ba08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0c:	e853 3f00 	ldrex	r3, [r3]
 800ba10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	330c      	adds	r3, #12
 800ba22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ba26:	647a      	str	r2, [r7, #68]	; 0x44
 800ba28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba2e:	e841 2300 	strex	r3, r2, [r1]
 800ba32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d1e3      	bne.n	800ba02 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	3314      	adds	r3, #20
 800ba40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba44:	e853 3f00 	ldrex	r3, [r3]
 800ba48:	623b      	str	r3, [r7, #32]
   return(result);
 800ba4a:	6a3b      	ldr	r3, [r7, #32]
 800ba4c:	f023 0301 	bic.w	r3, r3, #1
 800ba50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	3314      	adds	r3, #20
 800ba5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ba5e:	633a      	str	r2, [r7, #48]	; 0x30
 800ba60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba66:	e841 2300 	strex	r3, r2, [r1]
 800ba6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d1e3      	bne.n	800ba3a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2220      	movs	r2, #32
 800ba76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	330c      	adds	r3, #12
 800ba86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	e853 3f00 	ldrex	r3, [r3]
 800ba8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f023 0310 	bic.w	r3, r3, #16
 800ba96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	330c      	adds	r3, #12
 800baa0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800baa4:	61fa      	str	r2, [r7, #28]
 800baa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa8:	69b9      	ldr	r1, [r7, #24]
 800baaa:	69fa      	ldr	r2, [r7, #28]
 800baac:	e841 2300 	strex	r3, r2, [r1]
 800bab0:	617b      	str	r3, [r7, #20]
   return(result);
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d1e3      	bne.n	800ba80 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800babc:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800bac0:	4611      	mov	r1, r2
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bac6:	e023      	b.n	800bb10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bacc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d009      	beq.n	800bae8 <HAL_UART_IRQHandler+0x4f4>
 800bad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800badc:	2b00      	cmp	r3, #0
 800bade:	d003      	beq.n	800bae8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fa33 	bl	800bf4c <UART_Transmit_IT>
    return;
 800bae6:	e014      	b.n	800bb12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00e      	beq.n	800bb12 <HAL_UART_IRQHandler+0x51e>
 800baf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d008      	beq.n	800bb12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 fa73 	bl	800bfec <UART_EndTransmit_IT>
    return;
 800bb06:	e004      	b.n	800bb12 <HAL_UART_IRQHandler+0x51e>
    return;
 800bb08:	bf00      	nop
 800bb0a:	e002      	b.n	800bb12 <HAL_UART_IRQHandler+0x51e>
      return;
 800bb0c:	bf00      	nop
 800bb0e:	e000      	b.n	800bb12 <HAL_UART_IRQHandler+0x51e>
      return;
 800bb10:	bf00      	nop
  }
}
 800bb12:	37e8      	adds	r7, #232	; 0xe8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bb20:	bf00      	nop
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800bb34:	bf00      	nop
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bb48:	bf00      	nop
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bb5c:	bf00      	nop
 800bb5e:	370c      	adds	r7, #12
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bb70:	bf00      	nop
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800bb84:	bf00      	nop
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800bb98:	bf00      	nop
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bbc4:	bf00      	nop
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	4a10      	ldr	r2, [pc, #64]	; (800bc1c <UART_InitCallbacksToDefault+0x4c>)
 800bbdc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4a0f      	ldr	r2, [pc, #60]	; (800bc20 <UART_InitCallbacksToDefault+0x50>)
 800bbe2:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4a0f      	ldr	r2, [pc, #60]	; (800bc24 <UART_InitCallbacksToDefault+0x54>)
 800bbe8:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	4a0e      	ldr	r2, [pc, #56]	; (800bc28 <UART_InitCallbacksToDefault+0x58>)
 800bbee:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4a0e      	ldr	r2, [pc, #56]	; (800bc2c <UART_InitCallbacksToDefault+0x5c>)
 800bbf4:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4a0d      	ldr	r2, [pc, #52]	; (800bc30 <UART_InitCallbacksToDefault+0x60>)
 800bbfa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a0d      	ldr	r2, [pc, #52]	; (800bc34 <UART_InitCallbacksToDefault+0x64>)
 800bc00:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	4a0c      	ldr	r2, [pc, #48]	; (800bc38 <UART_InitCallbacksToDefault+0x68>)
 800bc06:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4a0c      	ldr	r2, [pc, #48]	; (800bc3c <UART_InitCallbacksToDefault+0x6c>)
 800bc0c:	669a      	str	r2, [r3, #104]	; 0x68

}
 800bc0e:	bf00      	nop
 800bc10:	370c      	adds	r7, #12
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	0800bb2d 	.word	0x0800bb2d
 800bc20:	0800bb19 	.word	0x0800bb19
 800bc24:	0800bb55 	.word	0x0800bb55
 800bc28:	0800bb41 	.word	0x0800bb41
 800bc2c:	0800bb69 	.word	0x0800bb69
 800bc30:	0800bb7d 	.word	0x0800bb7d
 800bc34:	0800bb91 	.word	0x0800bb91
 800bc38:	0800bba5 	.word	0x0800bba5
 800bc3c:	0800bbb9 	.word	0x0800bbb9

0800bc40 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b090      	sub	sp, #64	; 0x40
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d137      	bne.n	800bccc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800bc5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc5e:	2200      	movs	r2, #0
 800bc60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	3314      	adds	r3, #20
 800bc68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6c:	e853 3f00 	ldrex	r3, [r3]
 800bc70:	623b      	str	r3, [r7, #32]
   return(result);
 800bc72:	6a3b      	ldr	r3, [r7, #32]
 800bc74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc78:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	3314      	adds	r3, #20
 800bc80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc82:	633a      	str	r2, [r7, #48]	; 0x30
 800bc84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc8a:	e841 2300 	strex	r3, r2, [r1]
 800bc8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d1e5      	bne.n	800bc62 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	330c      	adds	r3, #12
 800bc9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	e853 3f00 	ldrex	r3, [r3]
 800bca4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcac:	637b      	str	r3, [r7, #52]	; 0x34
 800bcae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	330c      	adds	r3, #12
 800bcb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcb6:	61fa      	str	r2, [r7, #28]
 800bcb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcba:	69b9      	ldr	r1, [r7, #24]
 800bcbc:	69fa      	ldr	r2, [r7, #28]
 800bcbe:	e841 2300 	strex	r3, r2, [r1]
 800bcc2:	617b      	str	r3, [r7, #20]
   return(result);
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1e5      	bne.n	800bc96 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bcca:	e003      	b.n	800bcd4 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800bccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bcd2:	4798      	blx	r3
}
 800bcd4:	bf00      	nop
 800bcd6:	3740      	adds	r7, #64	; 0x40
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcf2:	bf00      	nop
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b084      	sub	sp, #16
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bd02:	2300      	movs	r3, #0
 800bd04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	695b      	ldr	r3, [r3, #20]
 800bd12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd16:	2b80      	cmp	r3, #128	; 0x80
 800bd18:	bf0c      	ite	eq
 800bd1a:	2301      	moveq	r3, #1
 800bd1c:	2300      	movne	r3, #0
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd28:	b2db      	uxtb	r3, r3
 800bd2a:	2b21      	cmp	r3, #33	; 0x21
 800bd2c:	d108      	bne.n	800bd40 <UART_DMAError+0x46>
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d005      	beq.n	800bd40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	2200      	movs	r2, #0
 800bd38:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bd3a:	68b8      	ldr	r0, [r7, #8]
 800bd3c:	f000 f866 	bl	800be0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	695b      	ldr	r3, [r3, #20]
 800bd46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd4a:	2b40      	cmp	r3, #64	; 0x40
 800bd4c:	bf0c      	ite	eq
 800bd4e:	2301      	moveq	r3, #1
 800bd50:	2300      	movne	r3, #0
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	2b22      	cmp	r3, #34	; 0x22
 800bd60:	d108      	bne.n	800bd74 <UART_DMAError+0x7a>
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d005      	beq.n	800bd74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bd6e:	68b8      	ldr	r0, [r7, #8]
 800bd70:	f000 f874 	bl	800be5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd78:	f043 0210 	orr.w	r2, r3, #16
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd84:	68b8      	ldr	r0, [r7, #8]
 800bd86:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd88:	bf00      	nop
 800bd8a:	3710      	adds	r7, #16
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	68ba      	ldr	r2, [r7, #8]
 800bda2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	88fa      	ldrh	r2, [r7, #6]
 800bda8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	88fa      	ldrh	r2, [r7, #6]
 800bdae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2222      	movs	r2, #34	; 0x22
 800bdba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	691b      	ldr	r3, [r3, #16]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d007      	beq.n	800bdde <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	68da      	ldr	r2, [r3, #12]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bddc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	695a      	ldr	r2, [r3, #20]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f042 0201 	orr.w	r2, r2, #1
 800bdec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	68da      	ldr	r2, [r3, #12]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f042 0220 	orr.w	r2, r2, #32
 800bdfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	4618      	mov	r0, r3
 800be02:	3714      	adds	r7, #20
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b089      	sub	sp, #36	; 0x24
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	330c      	adds	r3, #12
 800be1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	e853 3f00 	ldrex	r3, [r3]
 800be22:	60bb      	str	r3, [r7, #8]
   return(result);
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800be2a:	61fb      	str	r3, [r7, #28]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	330c      	adds	r3, #12
 800be32:	69fa      	ldr	r2, [r7, #28]
 800be34:	61ba      	str	r2, [r7, #24]
 800be36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be38:	6979      	ldr	r1, [r7, #20]
 800be3a:	69ba      	ldr	r2, [r7, #24]
 800be3c:	e841 2300 	strex	r3, r2, [r1]
 800be40:	613b      	str	r3, [r7, #16]
   return(result);
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1e5      	bne.n	800be14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2220      	movs	r2, #32
 800be4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800be50:	bf00      	nop
 800be52:	3724      	adds	r7, #36	; 0x24
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b095      	sub	sp, #84	; 0x54
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	330c      	adds	r3, #12
 800be6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be6e:	e853 3f00 	ldrex	r3, [r3]
 800be72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800be74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	330c      	adds	r3, #12
 800be82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be84:	643a      	str	r2, [r7, #64]	; 0x40
 800be86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800be8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be8c:	e841 2300 	strex	r3, r2, [r1]
 800be90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be94:	2b00      	cmp	r3, #0
 800be96:	d1e5      	bne.n	800be64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	3314      	adds	r3, #20
 800be9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea0:	6a3b      	ldr	r3, [r7, #32]
 800bea2:	e853 3f00 	ldrex	r3, [r3]
 800bea6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	f023 0301 	bic.w	r3, r3, #1
 800beae:	64bb      	str	r3, [r7, #72]	; 0x48
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	3314      	adds	r3, #20
 800beb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800beb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800beba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bec0:	e841 2300 	strex	r3, r2, [r1]
 800bec4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1e5      	bne.n	800be98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d119      	bne.n	800bf08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	330c      	adds	r3, #12
 800beda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	e853 3f00 	ldrex	r3, [r3]
 800bee2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	f023 0310 	bic.w	r3, r3, #16
 800beea:	647b      	str	r3, [r7, #68]	; 0x44
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	330c      	adds	r3, #12
 800bef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bef4:	61ba      	str	r2, [r7, #24]
 800bef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef8:	6979      	ldr	r1, [r7, #20]
 800befa:	69ba      	ldr	r2, [r7, #24]
 800befc:	e841 2300 	strex	r3, r2, [r1]
 800bf00:	613b      	str	r3, [r7, #16]
   return(result);
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d1e5      	bne.n	800bed4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2220      	movs	r2, #32
 800bf0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bf16:	bf00      	nop
 800bf18:	3754      	adds	r7, #84	; 0x54
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr

0800bf22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b084      	sub	sp, #16
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2200      	movs	r2, #0
 800bf34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf44:	bf00      	nop
 800bf46:	3710      	adds	r7, #16
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b085      	sub	sp, #20
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	2b21      	cmp	r3, #33	; 0x21
 800bf5e:	d13e      	bne.n	800bfde <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf68:	d114      	bne.n	800bf94 <UART_Transmit_IT+0x48>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d110      	bne.n	800bf94 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6a1b      	ldr	r3, [r3, #32]
 800bf76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	881b      	ldrh	r3, [r3, #0]
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6a1b      	ldr	r3, [r3, #32]
 800bf8c:	1c9a      	adds	r2, r3, #2
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	621a      	str	r2, [r3, #32]
 800bf92:	e008      	b.n	800bfa6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6a1b      	ldr	r3, [r3, #32]
 800bf98:	1c59      	adds	r1, r3, #1
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	6211      	str	r1, [r2, #32]
 800bf9e:	781a      	ldrb	r2, [r3, #0]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	3b01      	subs	r3, #1
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d10f      	bne.n	800bfda <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	68da      	ldr	r2, [r3, #12]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bfc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68da      	ldr	r2, [r3, #12]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	e000      	b.n	800bfe0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bfde:	2302      	movs	r3, #2
  }
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3714      	adds	r7, #20
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	68da      	ldr	r2, [r3, #12]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c002:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2220      	movs	r2, #32
 800c008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	3708      	adds	r7, #8
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b08c      	sub	sp, #48	; 0x30
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	2b22      	cmp	r3, #34	; 0x22
 800c030:	f040 80ad 	bne.w	800c18e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c03c:	d117      	bne.n	800c06e <UART_Receive_IT+0x50>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d113      	bne.n	800c06e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c046:	2300      	movs	r3, #0
 800c048:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c04e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	b29b      	uxth	r3, r3
 800c058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c05c:	b29a      	uxth	r2, r3
 800c05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c060:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c066:	1c9a      	adds	r2, r3, #2
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	629a      	str	r2, [r3, #40]	; 0x28
 800c06c:	e026      	b.n	800c0bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c072:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c074:	2300      	movs	r3, #0
 800c076:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c080:	d007      	beq.n	800c092 <UART_Receive_IT+0x74>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d10a      	bne.n	800c0a0 <UART_Receive_IT+0x82>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	691b      	ldr	r3, [r3, #16]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d106      	bne.n	800c0a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	b2da      	uxtb	r2, r3
 800c09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09c:	701a      	strb	r2, [r3, #0]
 800c09e:	e008      	b.n	800c0b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0ac:	b2da      	uxtb	r2, r3
 800c0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b6:	1c5a      	adds	r2, r3, #1
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d15c      	bne.n	800c18a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	68da      	ldr	r2, [r3, #12]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f022 0220 	bic.w	r2, r2, #32
 800c0de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	68da      	ldr	r2, [r3, #12]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c0ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	695a      	ldr	r2, [r3, #20]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f022 0201 	bic.w	r2, r2, #1
 800c0fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2220      	movs	r2, #32
 800c104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d136      	bne.n	800c17e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	330c      	adds	r3, #12
 800c11c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	e853 3f00 	ldrex	r3, [r3]
 800c124:	613b      	str	r3, [r7, #16]
   return(result);
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	f023 0310 	bic.w	r3, r3, #16
 800c12c:	627b      	str	r3, [r7, #36]	; 0x24
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	330c      	adds	r3, #12
 800c134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c136:	623a      	str	r2, [r7, #32]
 800c138:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13a:	69f9      	ldr	r1, [r7, #28]
 800c13c:	6a3a      	ldr	r2, [r7, #32]
 800c13e:	e841 2300 	strex	r3, r2, [r1]
 800c142:	61bb      	str	r3, [r7, #24]
   return(result);
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1e5      	bne.n	800c116 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f003 0310 	and.w	r3, r3, #16
 800c154:	2b10      	cmp	r3, #16
 800c156:	d10a      	bne.n	800c16e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c158:	2300      	movs	r3, #0
 800c15a:	60fb      	str	r3, [r7, #12]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	60fb      	str	r3, [r7, #12]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	60fb      	str	r3, [r7, #12]
 800c16c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c176:	4611      	mov	r1, r2
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	4798      	blx	r3
 800c17c:	e003      	b.n	800c186 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c186:	2300      	movs	r3, #0
 800c188:	e002      	b.n	800c190 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800c18a:	2300      	movs	r3, #0
 800c18c:	e000      	b.n	800c190 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800c18e:	2302      	movs	r3, #2
  }
}
 800c190:	4618      	mov	r0, r3
 800c192:	3730      	adds	r7, #48	; 0x30
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c19c:	b0c0      	sub	sp, #256	; 0x100
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	691b      	ldr	r3, [r3, #16]
 800c1ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c1b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1b4:	68d9      	ldr	r1, [r3, #12]
 800c1b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	ea40 0301 	orr.w	r3, r0, r1
 800c1c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c1c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1c6:	689a      	ldr	r2, [r3, #8]
 800c1c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1cc:	691b      	ldr	r3, [r3, #16]
 800c1ce:	431a      	orrs	r2, r3
 800c1d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1d4:	695b      	ldr	r3, [r3, #20]
 800c1d6:	431a      	orrs	r2, r3
 800c1d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1dc:	69db      	ldr	r3, [r3, #28]
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c1e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c1f0:	f021 010c 	bic.w	r1, r1, #12
 800c1f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c1fe:	430b      	orrs	r3, r1
 800c200:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	695b      	ldr	r3, [r3, #20]
 800c20a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c20e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c212:	6999      	ldr	r1, [r3, #24]
 800c214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	ea40 0301 	orr.w	r3, r0, r1
 800c21e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	4b8f      	ldr	r3, [pc, #572]	; (800c464 <UART_SetConfig+0x2cc>)
 800c228:	429a      	cmp	r2, r3
 800c22a:	d005      	beq.n	800c238 <UART_SetConfig+0xa0>
 800c22c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	4b8d      	ldr	r3, [pc, #564]	; (800c468 <UART_SetConfig+0x2d0>)
 800c234:	429a      	cmp	r2, r3
 800c236:	d104      	bne.n	800c242 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c238:	f7fd f9e0 	bl	80095fc <HAL_RCC_GetPCLK2Freq>
 800c23c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c240:	e003      	b.n	800c24a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c242:	f7fd f9c7 	bl	80095d4 <HAL_RCC_GetPCLK1Freq>
 800c246:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c24a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c24e:	69db      	ldr	r3, [r3, #28]
 800c250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c254:	f040 810c 	bne.w	800c470 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c25c:	2200      	movs	r2, #0
 800c25e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c262:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c266:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c26a:	4622      	mov	r2, r4
 800c26c:	462b      	mov	r3, r5
 800c26e:	1891      	adds	r1, r2, r2
 800c270:	65b9      	str	r1, [r7, #88]	; 0x58
 800c272:	415b      	adcs	r3, r3
 800c274:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c276:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c27a:	4621      	mov	r1, r4
 800c27c:	eb12 0801 	adds.w	r8, r2, r1
 800c280:	4629      	mov	r1, r5
 800c282:	eb43 0901 	adc.w	r9, r3, r1
 800c286:	f04f 0200 	mov.w	r2, #0
 800c28a:	f04f 0300 	mov.w	r3, #0
 800c28e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c29a:	4690      	mov	r8, r2
 800c29c:	4699      	mov	r9, r3
 800c29e:	4623      	mov	r3, r4
 800c2a0:	eb18 0303 	adds.w	r3, r8, r3
 800c2a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c2a8:	462b      	mov	r3, r5
 800c2aa:	eb49 0303 	adc.w	r3, r9, r3
 800c2ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c2b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c2be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c2c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	18db      	adds	r3, r3, r3
 800c2ca:	653b      	str	r3, [r7, #80]	; 0x50
 800c2cc:	4613      	mov	r3, r2
 800c2ce:	eb42 0303 	adc.w	r3, r2, r3
 800c2d2:	657b      	str	r3, [r7, #84]	; 0x54
 800c2d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c2d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c2dc:	f7f4 fcdc 	bl	8000c98 <__aeabi_uldivmod>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	4b61      	ldr	r3, [pc, #388]	; (800c46c <UART_SetConfig+0x2d4>)
 800c2e6:	fba3 2302 	umull	r2, r3, r3, r2
 800c2ea:	095b      	lsrs	r3, r3, #5
 800c2ec:	011c      	lsls	r4, r3, #4
 800c2ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c2f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c2fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c300:	4642      	mov	r2, r8
 800c302:	464b      	mov	r3, r9
 800c304:	1891      	adds	r1, r2, r2
 800c306:	64b9      	str	r1, [r7, #72]	; 0x48
 800c308:	415b      	adcs	r3, r3
 800c30a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c30c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c310:	4641      	mov	r1, r8
 800c312:	eb12 0a01 	adds.w	sl, r2, r1
 800c316:	4649      	mov	r1, r9
 800c318:	eb43 0b01 	adc.w	fp, r3, r1
 800c31c:	f04f 0200 	mov.w	r2, #0
 800c320:	f04f 0300 	mov.w	r3, #0
 800c324:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c328:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c32c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c330:	4692      	mov	sl, r2
 800c332:	469b      	mov	fp, r3
 800c334:	4643      	mov	r3, r8
 800c336:	eb1a 0303 	adds.w	r3, sl, r3
 800c33a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c33e:	464b      	mov	r3, r9
 800c340:	eb4b 0303 	adc.w	r3, fp, r3
 800c344:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	2200      	movs	r2, #0
 800c350:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c354:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c358:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c35c:	460b      	mov	r3, r1
 800c35e:	18db      	adds	r3, r3, r3
 800c360:	643b      	str	r3, [r7, #64]	; 0x40
 800c362:	4613      	mov	r3, r2
 800c364:	eb42 0303 	adc.w	r3, r2, r3
 800c368:	647b      	str	r3, [r7, #68]	; 0x44
 800c36a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c36e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c372:	f7f4 fc91 	bl	8000c98 <__aeabi_uldivmod>
 800c376:	4602      	mov	r2, r0
 800c378:	460b      	mov	r3, r1
 800c37a:	4611      	mov	r1, r2
 800c37c:	4b3b      	ldr	r3, [pc, #236]	; (800c46c <UART_SetConfig+0x2d4>)
 800c37e:	fba3 2301 	umull	r2, r3, r3, r1
 800c382:	095b      	lsrs	r3, r3, #5
 800c384:	2264      	movs	r2, #100	; 0x64
 800c386:	fb02 f303 	mul.w	r3, r2, r3
 800c38a:	1acb      	subs	r3, r1, r3
 800c38c:	00db      	lsls	r3, r3, #3
 800c38e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c392:	4b36      	ldr	r3, [pc, #216]	; (800c46c <UART_SetConfig+0x2d4>)
 800c394:	fba3 2302 	umull	r2, r3, r3, r2
 800c398:	095b      	lsrs	r3, r3, #5
 800c39a:	005b      	lsls	r3, r3, #1
 800c39c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c3a0:	441c      	add	r4, r3
 800c3a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c3ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c3b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c3b4:	4642      	mov	r2, r8
 800c3b6:	464b      	mov	r3, r9
 800c3b8:	1891      	adds	r1, r2, r2
 800c3ba:	63b9      	str	r1, [r7, #56]	; 0x38
 800c3bc:	415b      	adcs	r3, r3
 800c3be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c3c4:	4641      	mov	r1, r8
 800c3c6:	1851      	adds	r1, r2, r1
 800c3c8:	6339      	str	r1, [r7, #48]	; 0x30
 800c3ca:	4649      	mov	r1, r9
 800c3cc:	414b      	adcs	r3, r1
 800c3ce:	637b      	str	r3, [r7, #52]	; 0x34
 800c3d0:	f04f 0200 	mov.w	r2, #0
 800c3d4:	f04f 0300 	mov.w	r3, #0
 800c3d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c3dc:	4659      	mov	r1, fp
 800c3de:	00cb      	lsls	r3, r1, #3
 800c3e0:	4651      	mov	r1, sl
 800c3e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c3e6:	4651      	mov	r1, sl
 800c3e8:	00ca      	lsls	r2, r1, #3
 800c3ea:	4610      	mov	r0, r2
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	4642      	mov	r2, r8
 800c3f2:	189b      	adds	r3, r3, r2
 800c3f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c3f8:	464b      	mov	r3, r9
 800c3fa:	460a      	mov	r2, r1
 800c3fc:	eb42 0303 	adc.w	r3, r2, r3
 800c400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c410:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c414:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c418:	460b      	mov	r3, r1
 800c41a:	18db      	adds	r3, r3, r3
 800c41c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c41e:	4613      	mov	r3, r2
 800c420:	eb42 0303 	adc.w	r3, r2, r3
 800c424:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c42a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c42e:	f7f4 fc33 	bl	8000c98 <__aeabi_uldivmod>
 800c432:	4602      	mov	r2, r0
 800c434:	460b      	mov	r3, r1
 800c436:	4b0d      	ldr	r3, [pc, #52]	; (800c46c <UART_SetConfig+0x2d4>)
 800c438:	fba3 1302 	umull	r1, r3, r3, r2
 800c43c:	095b      	lsrs	r3, r3, #5
 800c43e:	2164      	movs	r1, #100	; 0x64
 800c440:	fb01 f303 	mul.w	r3, r1, r3
 800c444:	1ad3      	subs	r3, r2, r3
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	3332      	adds	r3, #50	; 0x32
 800c44a:	4a08      	ldr	r2, [pc, #32]	; (800c46c <UART_SetConfig+0x2d4>)
 800c44c:	fba2 2303 	umull	r2, r3, r2, r3
 800c450:	095b      	lsrs	r3, r3, #5
 800c452:	f003 0207 	and.w	r2, r3, #7
 800c456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4422      	add	r2, r4
 800c45e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c460:	e105      	b.n	800c66e <UART_SetConfig+0x4d6>
 800c462:	bf00      	nop
 800c464:	40011000 	.word	0x40011000
 800c468:	40011400 	.word	0x40011400
 800c46c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c474:	2200      	movs	r2, #0
 800c476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c47a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c47e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c482:	4642      	mov	r2, r8
 800c484:	464b      	mov	r3, r9
 800c486:	1891      	adds	r1, r2, r2
 800c488:	6239      	str	r1, [r7, #32]
 800c48a:	415b      	adcs	r3, r3
 800c48c:	627b      	str	r3, [r7, #36]	; 0x24
 800c48e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c492:	4641      	mov	r1, r8
 800c494:	1854      	adds	r4, r2, r1
 800c496:	4649      	mov	r1, r9
 800c498:	eb43 0501 	adc.w	r5, r3, r1
 800c49c:	f04f 0200 	mov.w	r2, #0
 800c4a0:	f04f 0300 	mov.w	r3, #0
 800c4a4:	00eb      	lsls	r3, r5, #3
 800c4a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c4aa:	00e2      	lsls	r2, r4, #3
 800c4ac:	4614      	mov	r4, r2
 800c4ae:	461d      	mov	r5, r3
 800c4b0:	4643      	mov	r3, r8
 800c4b2:	18e3      	adds	r3, r4, r3
 800c4b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c4b8:	464b      	mov	r3, r9
 800c4ba:	eb45 0303 	adc.w	r3, r5, r3
 800c4be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c4c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c4ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c4d2:	f04f 0200 	mov.w	r2, #0
 800c4d6:	f04f 0300 	mov.w	r3, #0
 800c4da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c4de:	4629      	mov	r1, r5
 800c4e0:	008b      	lsls	r3, r1, #2
 800c4e2:	4621      	mov	r1, r4
 800c4e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c4e8:	4621      	mov	r1, r4
 800c4ea:	008a      	lsls	r2, r1, #2
 800c4ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c4f0:	f7f4 fbd2 	bl	8000c98 <__aeabi_uldivmod>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	4b60      	ldr	r3, [pc, #384]	; (800c67c <UART_SetConfig+0x4e4>)
 800c4fa:	fba3 2302 	umull	r2, r3, r3, r2
 800c4fe:	095b      	lsrs	r3, r3, #5
 800c500:	011c      	lsls	r4, r3, #4
 800c502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c506:	2200      	movs	r2, #0
 800c508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c50c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c510:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c514:	4642      	mov	r2, r8
 800c516:	464b      	mov	r3, r9
 800c518:	1891      	adds	r1, r2, r2
 800c51a:	61b9      	str	r1, [r7, #24]
 800c51c:	415b      	adcs	r3, r3
 800c51e:	61fb      	str	r3, [r7, #28]
 800c520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c524:	4641      	mov	r1, r8
 800c526:	1851      	adds	r1, r2, r1
 800c528:	6139      	str	r1, [r7, #16]
 800c52a:	4649      	mov	r1, r9
 800c52c:	414b      	adcs	r3, r1
 800c52e:	617b      	str	r3, [r7, #20]
 800c530:	f04f 0200 	mov.w	r2, #0
 800c534:	f04f 0300 	mov.w	r3, #0
 800c538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c53c:	4659      	mov	r1, fp
 800c53e:	00cb      	lsls	r3, r1, #3
 800c540:	4651      	mov	r1, sl
 800c542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c546:	4651      	mov	r1, sl
 800c548:	00ca      	lsls	r2, r1, #3
 800c54a:	4610      	mov	r0, r2
 800c54c:	4619      	mov	r1, r3
 800c54e:	4603      	mov	r3, r0
 800c550:	4642      	mov	r2, r8
 800c552:	189b      	adds	r3, r3, r2
 800c554:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c558:	464b      	mov	r3, r9
 800c55a:	460a      	mov	r2, r1
 800c55c:	eb42 0303 	adc.w	r3, r2, r3
 800c560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c56e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c570:	f04f 0200 	mov.w	r2, #0
 800c574:	f04f 0300 	mov.w	r3, #0
 800c578:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c57c:	4649      	mov	r1, r9
 800c57e:	008b      	lsls	r3, r1, #2
 800c580:	4641      	mov	r1, r8
 800c582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c586:	4641      	mov	r1, r8
 800c588:	008a      	lsls	r2, r1, #2
 800c58a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c58e:	f7f4 fb83 	bl	8000c98 <__aeabi_uldivmod>
 800c592:	4602      	mov	r2, r0
 800c594:	460b      	mov	r3, r1
 800c596:	4b39      	ldr	r3, [pc, #228]	; (800c67c <UART_SetConfig+0x4e4>)
 800c598:	fba3 1302 	umull	r1, r3, r3, r2
 800c59c:	095b      	lsrs	r3, r3, #5
 800c59e:	2164      	movs	r1, #100	; 0x64
 800c5a0:	fb01 f303 	mul.w	r3, r1, r3
 800c5a4:	1ad3      	subs	r3, r2, r3
 800c5a6:	011b      	lsls	r3, r3, #4
 800c5a8:	3332      	adds	r3, #50	; 0x32
 800c5aa:	4a34      	ldr	r2, [pc, #208]	; (800c67c <UART_SetConfig+0x4e4>)
 800c5ac:	fba2 2303 	umull	r2, r3, r2, r3
 800c5b0:	095b      	lsrs	r3, r3, #5
 800c5b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5b6:	441c      	add	r4, r3
 800c5b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c5bc:	2200      	movs	r2, #0
 800c5be:	673b      	str	r3, [r7, #112]	; 0x70
 800c5c0:	677a      	str	r2, [r7, #116]	; 0x74
 800c5c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c5c6:	4642      	mov	r2, r8
 800c5c8:	464b      	mov	r3, r9
 800c5ca:	1891      	adds	r1, r2, r2
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	415b      	adcs	r3, r3
 800c5d0:	60fb      	str	r3, [r7, #12]
 800c5d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c5d6:	4641      	mov	r1, r8
 800c5d8:	1851      	adds	r1, r2, r1
 800c5da:	6039      	str	r1, [r7, #0]
 800c5dc:	4649      	mov	r1, r9
 800c5de:	414b      	adcs	r3, r1
 800c5e0:	607b      	str	r3, [r7, #4]
 800c5e2:	f04f 0200 	mov.w	r2, #0
 800c5e6:	f04f 0300 	mov.w	r3, #0
 800c5ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c5ee:	4659      	mov	r1, fp
 800c5f0:	00cb      	lsls	r3, r1, #3
 800c5f2:	4651      	mov	r1, sl
 800c5f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c5f8:	4651      	mov	r1, sl
 800c5fa:	00ca      	lsls	r2, r1, #3
 800c5fc:	4610      	mov	r0, r2
 800c5fe:	4619      	mov	r1, r3
 800c600:	4603      	mov	r3, r0
 800c602:	4642      	mov	r2, r8
 800c604:	189b      	adds	r3, r3, r2
 800c606:	66bb      	str	r3, [r7, #104]	; 0x68
 800c608:	464b      	mov	r3, r9
 800c60a:	460a      	mov	r2, r1
 800c60c:	eb42 0303 	adc.w	r3, r2, r3
 800c610:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	2200      	movs	r2, #0
 800c61a:	663b      	str	r3, [r7, #96]	; 0x60
 800c61c:	667a      	str	r2, [r7, #100]	; 0x64
 800c61e:	f04f 0200 	mov.w	r2, #0
 800c622:	f04f 0300 	mov.w	r3, #0
 800c626:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c62a:	4649      	mov	r1, r9
 800c62c:	008b      	lsls	r3, r1, #2
 800c62e:	4641      	mov	r1, r8
 800c630:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c634:	4641      	mov	r1, r8
 800c636:	008a      	lsls	r2, r1, #2
 800c638:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c63c:	f7f4 fb2c 	bl	8000c98 <__aeabi_uldivmod>
 800c640:	4602      	mov	r2, r0
 800c642:	460b      	mov	r3, r1
 800c644:	4b0d      	ldr	r3, [pc, #52]	; (800c67c <UART_SetConfig+0x4e4>)
 800c646:	fba3 1302 	umull	r1, r3, r3, r2
 800c64a:	095b      	lsrs	r3, r3, #5
 800c64c:	2164      	movs	r1, #100	; 0x64
 800c64e:	fb01 f303 	mul.w	r3, r1, r3
 800c652:	1ad3      	subs	r3, r2, r3
 800c654:	011b      	lsls	r3, r3, #4
 800c656:	3332      	adds	r3, #50	; 0x32
 800c658:	4a08      	ldr	r2, [pc, #32]	; (800c67c <UART_SetConfig+0x4e4>)
 800c65a:	fba2 2303 	umull	r2, r3, r2, r3
 800c65e:	095b      	lsrs	r3, r3, #5
 800c660:	f003 020f 	and.w	r2, r3, #15
 800c664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4422      	add	r2, r4
 800c66c:	609a      	str	r2, [r3, #8]
}
 800c66e:	bf00      	nop
 800c670:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c674:	46bd      	mov	sp, r7
 800c676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c67a:	bf00      	nop
 800c67c:	51eb851f 	.word	0x51eb851f

0800c680 <__errno>:
 800c680:	4b01      	ldr	r3, [pc, #4]	; (800c688 <__errno+0x8>)
 800c682:	6818      	ldr	r0, [r3, #0]
 800c684:	4770      	bx	lr
 800c686:	bf00      	nop
 800c688:	20000254 	.word	0x20000254

0800c68c <__libc_init_array>:
 800c68c:	b570      	push	{r4, r5, r6, lr}
 800c68e:	4d0d      	ldr	r5, [pc, #52]	; (800c6c4 <__libc_init_array+0x38>)
 800c690:	4c0d      	ldr	r4, [pc, #52]	; (800c6c8 <__libc_init_array+0x3c>)
 800c692:	1b64      	subs	r4, r4, r5
 800c694:	10a4      	asrs	r4, r4, #2
 800c696:	2600      	movs	r6, #0
 800c698:	42a6      	cmp	r6, r4
 800c69a:	d109      	bne.n	800c6b0 <__libc_init_array+0x24>
 800c69c:	4d0b      	ldr	r5, [pc, #44]	; (800c6cc <__libc_init_array+0x40>)
 800c69e:	4c0c      	ldr	r4, [pc, #48]	; (800c6d0 <__libc_init_array+0x44>)
 800c6a0:	f004 fdda 	bl	8011258 <_init>
 800c6a4:	1b64      	subs	r4, r4, r5
 800c6a6:	10a4      	asrs	r4, r4, #2
 800c6a8:	2600      	movs	r6, #0
 800c6aa:	42a6      	cmp	r6, r4
 800c6ac:	d105      	bne.n	800c6ba <__libc_init_array+0x2e>
 800c6ae:	bd70      	pop	{r4, r5, r6, pc}
 800c6b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6b4:	4798      	blx	r3
 800c6b6:	3601      	adds	r6, #1
 800c6b8:	e7ee      	b.n	800c698 <__libc_init_array+0xc>
 800c6ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6be:	4798      	blx	r3
 800c6c0:	3601      	adds	r6, #1
 800c6c2:	e7f2      	b.n	800c6aa <__libc_init_array+0x1e>
 800c6c4:	0801174c 	.word	0x0801174c
 800c6c8:	0801174c 	.word	0x0801174c
 800c6cc:	0801174c 	.word	0x0801174c
 800c6d0:	08011750 	.word	0x08011750

0800c6d4 <memcpy>:
 800c6d4:	440a      	add	r2, r1
 800c6d6:	4291      	cmp	r1, r2
 800c6d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6dc:	d100      	bne.n	800c6e0 <memcpy+0xc>
 800c6de:	4770      	bx	lr
 800c6e0:	b510      	push	{r4, lr}
 800c6e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6ea:	4291      	cmp	r1, r2
 800c6ec:	d1f9      	bne.n	800c6e2 <memcpy+0xe>
 800c6ee:	bd10      	pop	{r4, pc}

0800c6f0 <memset>:
 800c6f0:	4402      	add	r2, r0
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d100      	bne.n	800c6fa <memset+0xa>
 800c6f8:	4770      	bx	lr
 800c6fa:	f803 1b01 	strb.w	r1, [r3], #1
 800c6fe:	e7f9      	b.n	800c6f4 <memset+0x4>

0800c700 <__cvt>:
 800c700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c704:	ec55 4b10 	vmov	r4, r5, d0
 800c708:	2d00      	cmp	r5, #0
 800c70a:	460e      	mov	r6, r1
 800c70c:	4619      	mov	r1, r3
 800c70e:	462b      	mov	r3, r5
 800c710:	bfbb      	ittet	lt
 800c712:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c716:	461d      	movlt	r5, r3
 800c718:	2300      	movge	r3, #0
 800c71a:	232d      	movlt	r3, #45	; 0x2d
 800c71c:	700b      	strb	r3, [r1, #0]
 800c71e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c720:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c724:	4691      	mov	r9, r2
 800c726:	f023 0820 	bic.w	r8, r3, #32
 800c72a:	bfbc      	itt	lt
 800c72c:	4622      	movlt	r2, r4
 800c72e:	4614      	movlt	r4, r2
 800c730:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c734:	d005      	beq.n	800c742 <__cvt+0x42>
 800c736:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c73a:	d100      	bne.n	800c73e <__cvt+0x3e>
 800c73c:	3601      	adds	r6, #1
 800c73e:	2102      	movs	r1, #2
 800c740:	e000      	b.n	800c744 <__cvt+0x44>
 800c742:	2103      	movs	r1, #3
 800c744:	ab03      	add	r3, sp, #12
 800c746:	9301      	str	r3, [sp, #4]
 800c748:	ab02      	add	r3, sp, #8
 800c74a:	9300      	str	r3, [sp, #0]
 800c74c:	ec45 4b10 	vmov	d0, r4, r5
 800c750:	4653      	mov	r3, sl
 800c752:	4632      	mov	r2, r6
 800c754:	f001 fdac 	bl	800e2b0 <_dtoa_r>
 800c758:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c75c:	4607      	mov	r7, r0
 800c75e:	d102      	bne.n	800c766 <__cvt+0x66>
 800c760:	f019 0f01 	tst.w	r9, #1
 800c764:	d022      	beq.n	800c7ac <__cvt+0xac>
 800c766:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c76a:	eb07 0906 	add.w	r9, r7, r6
 800c76e:	d110      	bne.n	800c792 <__cvt+0x92>
 800c770:	783b      	ldrb	r3, [r7, #0]
 800c772:	2b30      	cmp	r3, #48	; 0x30
 800c774:	d10a      	bne.n	800c78c <__cvt+0x8c>
 800c776:	2200      	movs	r2, #0
 800c778:	2300      	movs	r3, #0
 800c77a:	4620      	mov	r0, r4
 800c77c:	4629      	mov	r1, r5
 800c77e:	f7f4 f9ab 	bl	8000ad8 <__aeabi_dcmpeq>
 800c782:	b918      	cbnz	r0, 800c78c <__cvt+0x8c>
 800c784:	f1c6 0601 	rsb	r6, r6, #1
 800c788:	f8ca 6000 	str.w	r6, [sl]
 800c78c:	f8da 3000 	ldr.w	r3, [sl]
 800c790:	4499      	add	r9, r3
 800c792:	2200      	movs	r2, #0
 800c794:	2300      	movs	r3, #0
 800c796:	4620      	mov	r0, r4
 800c798:	4629      	mov	r1, r5
 800c79a:	f7f4 f99d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c79e:	b108      	cbz	r0, 800c7a4 <__cvt+0xa4>
 800c7a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c7a4:	2230      	movs	r2, #48	; 0x30
 800c7a6:	9b03      	ldr	r3, [sp, #12]
 800c7a8:	454b      	cmp	r3, r9
 800c7aa:	d307      	bcc.n	800c7bc <__cvt+0xbc>
 800c7ac:	9b03      	ldr	r3, [sp, #12]
 800c7ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7b0:	1bdb      	subs	r3, r3, r7
 800c7b2:	4638      	mov	r0, r7
 800c7b4:	6013      	str	r3, [r2, #0]
 800c7b6:	b004      	add	sp, #16
 800c7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7bc:	1c59      	adds	r1, r3, #1
 800c7be:	9103      	str	r1, [sp, #12]
 800c7c0:	701a      	strb	r2, [r3, #0]
 800c7c2:	e7f0      	b.n	800c7a6 <__cvt+0xa6>

0800c7c4 <__exponent>:
 800c7c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2900      	cmp	r1, #0
 800c7ca:	bfb8      	it	lt
 800c7cc:	4249      	neglt	r1, r1
 800c7ce:	f803 2b02 	strb.w	r2, [r3], #2
 800c7d2:	bfb4      	ite	lt
 800c7d4:	222d      	movlt	r2, #45	; 0x2d
 800c7d6:	222b      	movge	r2, #43	; 0x2b
 800c7d8:	2909      	cmp	r1, #9
 800c7da:	7042      	strb	r2, [r0, #1]
 800c7dc:	dd2a      	ble.n	800c834 <__exponent+0x70>
 800c7de:	f10d 0407 	add.w	r4, sp, #7
 800c7e2:	46a4      	mov	ip, r4
 800c7e4:	270a      	movs	r7, #10
 800c7e6:	46a6      	mov	lr, r4
 800c7e8:	460a      	mov	r2, r1
 800c7ea:	fb91 f6f7 	sdiv	r6, r1, r7
 800c7ee:	fb07 1516 	mls	r5, r7, r6, r1
 800c7f2:	3530      	adds	r5, #48	; 0x30
 800c7f4:	2a63      	cmp	r2, #99	; 0x63
 800c7f6:	f104 34ff 	add.w	r4, r4, #4294967295
 800c7fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c7fe:	4631      	mov	r1, r6
 800c800:	dcf1      	bgt.n	800c7e6 <__exponent+0x22>
 800c802:	3130      	adds	r1, #48	; 0x30
 800c804:	f1ae 0502 	sub.w	r5, lr, #2
 800c808:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c80c:	1c44      	adds	r4, r0, #1
 800c80e:	4629      	mov	r1, r5
 800c810:	4561      	cmp	r1, ip
 800c812:	d30a      	bcc.n	800c82a <__exponent+0x66>
 800c814:	f10d 0209 	add.w	r2, sp, #9
 800c818:	eba2 020e 	sub.w	r2, r2, lr
 800c81c:	4565      	cmp	r5, ip
 800c81e:	bf88      	it	hi
 800c820:	2200      	movhi	r2, #0
 800c822:	4413      	add	r3, r2
 800c824:	1a18      	subs	r0, r3, r0
 800c826:	b003      	add	sp, #12
 800c828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c82a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c82e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c832:	e7ed      	b.n	800c810 <__exponent+0x4c>
 800c834:	2330      	movs	r3, #48	; 0x30
 800c836:	3130      	adds	r1, #48	; 0x30
 800c838:	7083      	strb	r3, [r0, #2]
 800c83a:	70c1      	strb	r1, [r0, #3]
 800c83c:	1d03      	adds	r3, r0, #4
 800c83e:	e7f1      	b.n	800c824 <__exponent+0x60>

0800c840 <_printf_float>:
 800c840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c844:	ed2d 8b02 	vpush	{d8}
 800c848:	b08d      	sub	sp, #52	; 0x34
 800c84a:	460c      	mov	r4, r1
 800c84c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c850:	4616      	mov	r6, r2
 800c852:	461f      	mov	r7, r3
 800c854:	4605      	mov	r5, r0
 800c856:	f002 fe89 	bl	800f56c <_localeconv_r>
 800c85a:	f8d0 a000 	ldr.w	sl, [r0]
 800c85e:	4650      	mov	r0, sl
 800c860:	f7f3 fcbe 	bl	80001e0 <strlen>
 800c864:	2300      	movs	r3, #0
 800c866:	930a      	str	r3, [sp, #40]	; 0x28
 800c868:	6823      	ldr	r3, [r4, #0]
 800c86a:	9305      	str	r3, [sp, #20]
 800c86c:	f8d8 3000 	ldr.w	r3, [r8]
 800c870:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c874:	3307      	adds	r3, #7
 800c876:	f023 0307 	bic.w	r3, r3, #7
 800c87a:	f103 0208 	add.w	r2, r3, #8
 800c87e:	f8c8 2000 	str.w	r2, [r8]
 800c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c886:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c88a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c88e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c892:	9307      	str	r3, [sp, #28]
 800c894:	f8cd 8018 	str.w	r8, [sp, #24]
 800c898:	ee08 0a10 	vmov	s16, r0
 800c89c:	4b9f      	ldr	r3, [pc, #636]	; (800cb1c <_printf_float+0x2dc>)
 800c89e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8a6:	f7f4 f949 	bl	8000b3c <__aeabi_dcmpun>
 800c8aa:	bb88      	cbnz	r0, 800c910 <_printf_float+0xd0>
 800c8ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8b0:	4b9a      	ldr	r3, [pc, #616]	; (800cb1c <_printf_float+0x2dc>)
 800c8b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8b6:	f7f4 f923 	bl	8000b00 <__aeabi_dcmple>
 800c8ba:	bb48      	cbnz	r0, 800c910 <_printf_float+0xd0>
 800c8bc:	2200      	movs	r2, #0
 800c8be:	2300      	movs	r3, #0
 800c8c0:	4640      	mov	r0, r8
 800c8c2:	4649      	mov	r1, r9
 800c8c4:	f7f4 f912 	bl	8000aec <__aeabi_dcmplt>
 800c8c8:	b110      	cbz	r0, 800c8d0 <_printf_float+0x90>
 800c8ca:	232d      	movs	r3, #45	; 0x2d
 800c8cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8d0:	4b93      	ldr	r3, [pc, #588]	; (800cb20 <_printf_float+0x2e0>)
 800c8d2:	4894      	ldr	r0, [pc, #592]	; (800cb24 <_printf_float+0x2e4>)
 800c8d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c8d8:	bf94      	ite	ls
 800c8da:	4698      	movls	r8, r3
 800c8dc:	4680      	movhi	r8, r0
 800c8de:	2303      	movs	r3, #3
 800c8e0:	6123      	str	r3, [r4, #16]
 800c8e2:	9b05      	ldr	r3, [sp, #20]
 800c8e4:	f023 0204 	bic.w	r2, r3, #4
 800c8e8:	6022      	str	r2, [r4, #0]
 800c8ea:	f04f 0900 	mov.w	r9, #0
 800c8ee:	9700      	str	r7, [sp, #0]
 800c8f0:	4633      	mov	r3, r6
 800c8f2:	aa0b      	add	r2, sp, #44	; 0x2c
 800c8f4:	4621      	mov	r1, r4
 800c8f6:	4628      	mov	r0, r5
 800c8f8:	f000 f9d8 	bl	800ccac <_printf_common>
 800c8fc:	3001      	adds	r0, #1
 800c8fe:	f040 8090 	bne.w	800ca22 <_printf_float+0x1e2>
 800c902:	f04f 30ff 	mov.w	r0, #4294967295
 800c906:	b00d      	add	sp, #52	; 0x34
 800c908:	ecbd 8b02 	vpop	{d8}
 800c90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c910:	4642      	mov	r2, r8
 800c912:	464b      	mov	r3, r9
 800c914:	4640      	mov	r0, r8
 800c916:	4649      	mov	r1, r9
 800c918:	f7f4 f910 	bl	8000b3c <__aeabi_dcmpun>
 800c91c:	b140      	cbz	r0, 800c930 <_printf_float+0xf0>
 800c91e:	464b      	mov	r3, r9
 800c920:	2b00      	cmp	r3, #0
 800c922:	bfbc      	itt	lt
 800c924:	232d      	movlt	r3, #45	; 0x2d
 800c926:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c92a:	487f      	ldr	r0, [pc, #508]	; (800cb28 <_printf_float+0x2e8>)
 800c92c:	4b7f      	ldr	r3, [pc, #508]	; (800cb2c <_printf_float+0x2ec>)
 800c92e:	e7d1      	b.n	800c8d4 <_printf_float+0x94>
 800c930:	6863      	ldr	r3, [r4, #4]
 800c932:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c936:	9206      	str	r2, [sp, #24]
 800c938:	1c5a      	adds	r2, r3, #1
 800c93a:	d13f      	bne.n	800c9bc <_printf_float+0x17c>
 800c93c:	2306      	movs	r3, #6
 800c93e:	6063      	str	r3, [r4, #4]
 800c940:	9b05      	ldr	r3, [sp, #20]
 800c942:	6861      	ldr	r1, [r4, #4]
 800c944:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c948:	2300      	movs	r3, #0
 800c94a:	9303      	str	r3, [sp, #12]
 800c94c:	ab0a      	add	r3, sp, #40	; 0x28
 800c94e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c952:	ab09      	add	r3, sp, #36	; 0x24
 800c954:	ec49 8b10 	vmov	d0, r8, r9
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	6022      	str	r2, [r4, #0]
 800c95c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c960:	4628      	mov	r0, r5
 800c962:	f7ff fecd 	bl	800c700 <__cvt>
 800c966:	9b06      	ldr	r3, [sp, #24]
 800c968:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c96a:	2b47      	cmp	r3, #71	; 0x47
 800c96c:	4680      	mov	r8, r0
 800c96e:	d108      	bne.n	800c982 <_printf_float+0x142>
 800c970:	1cc8      	adds	r0, r1, #3
 800c972:	db02      	blt.n	800c97a <_printf_float+0x13a>
 800c974:	6863      	ldr	r3, [r4, #4]
 800c976:	4299      	cmp	r1, r3
 800c978:	dd41      	ble.n	800c9fe <_printf_float+0x1be>
 800c97a:	f1ab 0b02 	sub.w	fp, fp, #2
 800c97e:	fa5f fb8b 	uxtb.w	fp, fp
 800c982:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c986:	d820      	bhi.n	800c9ca <_printf_float+0x18a>
 800c988:	3901      	subs	r1, #1
 800c98a:	465a      	mov	r2, fp
 800c98c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c990:	9109      	str	r1, [sp, #36]	; 0x24
 800c992:	f7ff ff17 	bl	800c7c4 <__exponent>
 800c996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c998:	1813      	adds	r3, r2, r0
 800c99a:	2a01      	cmp	r2, #1
 800c99c:	4681      	mov	r9, r0
 800c99e:	6123      	str	r3, [r4, #16]
 800c9a0:	dc02      	bgt.n	800c9a8 <_printf_float+0x168>
 800c9a2:	6822      	ldr	r2, [r4, #0]
 800c9a4:	07d2      	lsls	r2, r2, #31
 800c9a6:	d501      	bpl.n	800c9ac <_printf_float+0x16c>
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	6123      	str	r3, [r4, #16]
 800c9ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d09c      	beq.n	800c8ee <_printf_float+0xae>
 800c9b4:	232d      	movs	r3, #45	; 0x2d
 800c9b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9ba:	e798      	b.n	800c8ee <_printf_float+0xae>
 800c9bc:	9a06      	ldr	r2, [sp, #24]
 800c9be:	2a47      	cmp	r2, #71	; 0x47
 800c9c0:	d1be      	bne.n	800c940 <_printf_float+0x100>
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d1bc      	bne.n	800c940 <_printf_float+0x100>
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	e7b9      	b.n	800c93e <_printf_float+0xfe>
 800c9ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c9ce:	d118      	bne.n	800ca02 <_printf_float+0x1c2>
 800c9d0:	2900      	cmp	r1, #0
 800c9d2:	6863      	ldr	r3, [r4, #4]
 800c9d4:	dd0b      	ble.n	800c9ee <_printf_float+0x1ae>
 800c9d6:	6121      	str	r1, [r4, #16]
 800c9d8:	b913      	cbnz	r3, 800c9e0 <_printf_float+0x1a0>
 800c9da:	6822      	ldr	r2, [r4, #0]
 800c9dc:	07d0      	lsls	r0, r2, #31
 800c9de:	d502      	bpl.n	800c9e6 <_printf_float+0x1a6>
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	440b      	add	r3, r1
 800c9e4:	6123      	str	r3, [r4, #16]
 800c9e6:	65a1      	str	r1, [r4, #88]	; 0x58
 800c9e8:	f04f 0900 	mov.w	r9, #0
 800c9ec:	e7de      	b.n	800c9ac <_printf_float+0x16c>
 800c9ee:	b913      	cbnz	r3, 800c9f6 <_printf_float+0x1b6>
 800c9f0:	6822      	ldr	r2, [r4, #0]
 800c9f2:	07d2      	lsls	r2, r2, #31
 800c9f4:	d501      	bpl.n	800c9fa <_printf_float+0x1ba>
 800c9f6:	3302      	adds	r3, #2
 800c9f8:	e7f4      	b.n	800c9e4 <_printf_float+0x1a4>
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e7f2      	b.n	800c9e4 <_printf_float+0x1a4>
 800c9fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ca02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca04:	4299      	cmp	r1, r3
 800ca06:	db05      	blt.n	800ca14 <_printf_float+0x1d4>
 800ca08:	6823      	ldr	r3, [r4, #0]
 800ca0a:	6121      	str	r1, [r4, #16]
 800ca0c:	07d8      	lsls	r0, r3, #31
 800ca0e:	d5ea      	bpl.n	800c9e6 <_printf_float+0x1a6>
 800ca10:	1c4b      	adds	r3, r1, #1
 800ca12:	e7e7      	b.n	800c9e4 <_printf_float+0x1a4>
 800ca14:	2900      	cmp	r1, #0
 800ca16:	bfd4      	ite	le
 800ca18:	f1c1 0202 	rsble	r2, r1, #2
 800ca1c:	2201      	movgt	r2, #1
 800ca1e:	4413      	add	r3, r2
 800ca20:	e7e0      	b.n	800c9e4 <_printf_float+0x1a4>
 800ca22:	6823      	ldr	r3, [r4, #0]
 800ca24:	055a      	lsls	r2, r3, #21
 800ca26:	d407      	bmi.n	800ca38 <_printf_float+0x1f8>
 800ca28:	6923      	ldr	r3, [r4, #16]
 800ca2a:	4642      	mov	r2, r8
 800ca2c:	4631      	mov	r1, r6
 800ca2e:	4628      	mov	r0, r5
 800ca30:	47b8      	blx	r7
 800ca32:	3001      	adds	r0, #1
 800ca34:	d12c      	bne.n	800ca90 <_printf_float+0x250>
 800ca36:	e764      	b.n	800c902 <_printf_float+0xc2>
 800ca38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca3c:	f240 80e0 	bls.w	800cc00 <_printf_float+0x3c0>
 800ca40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca44:	2200      	movs	r2, #0
 800ca46:	2300      	movs	r3, #0
 800ca48:	f7f4 f846 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	d034      	beq.n	800caba <_printf_float+0x27a>
 800ca50:	4a37      	ldr	r2, [pc, #220]	; (800cb30 <_printf_float+0x2f0>)
 800ca52:	2301      	movs	r3, #1
 800ca54:	4631      	mov	r1, r6
 800ca56:	4628      	mov	r0, r5
 800ca58:	47b8      	blx	r7
 800ca5a:	3001      	adds	r0, #1
 800ca5c:	f43f af51 	beq.w	800c902 <_printf_float+0xc2>
 800ca60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca64:	429a      	cmp	r2, r3
 800ca66:	db02      	blt.n	800ca6e <_printf_float+0x22e>
 800ca68:	6823      	ldr	r3, [r4, #0]
 800ca6a:	07d8      	lsls	r0, r3, #31
 800ca6c:	d510      	bpl.n	800ca90 <_printf_float+0x250>
 800ca6e:	ee18 3a10 	vmov	r3, s16
 800ca72:	4652      	mov	r2, sl
 800ca74:	4631      	mov	r1, r6
 800ca76:	4628      	mov	r0, r5
 800ca78:	47b8      	blx	r7
 800ca7a:	3001      	adds	r0, #1
 800ca7c:	f43f af41 	beq.w	800c902 <_printf_float+0xc2>
 800ca80:	f04f 0800 	mov.w	r8, #0
 800ca84:	f104 091a 	add.w	r9, r4, #26
 800ca88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca8a:	3b01      	subs	r3, #1
 800ca8c:	4543      	cmp	r3, r8
 800ca8e:	dc09      	bgt.n	800caa4 <_printf_float+0x264>
 800ca90:	6823      	ldr	r3, [r4, #0]
 800ca92:	079b      	lsls	r3, r3, #30
 800ca94:	f100 8105 	bmi.w	800cca2 <_printf_float+0x462>
 800ca98:	68e0      	ldr	r0, [r4, #12]
 800ca9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca9c:	4298      	cmp	r0, r3
 800ca9e:	bfb8      	it	lt
 800caa0:	4618      	movlt	r0, r3
 800caa2:	e730      	b.n	800c906 <_printf_float+0xc6>
 800caa4:	2301      	movs	r3, #1
 800caa6:	464a      	mov	r2, r9
 800caa8:	4631      	mov	r1, r6
 800caaa:	4628      	mov	r0, r5
 800caac:	47b8      	blx	r7
 800caae:	3001      	adds	r0, #1
 800cab0:	f43f af27 	beq.w	800c902 <_printf_float+0xc2>
 800cab4:	f108 0801 	add.w	r8, r8, #1
 800cab8:	e7e6      	b.n	800ca88 <_printf_float+0x248>
 800caba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	dc39      	bgt.n	800cb34 <_printf_float+0x2f4>
 800cac0:	4a1b      	ldr	r2, [pc, #108]	; (800cb30 <_printf_float+0x2f0>)
 800cac2:	2301      	movs	r3, #1
 800cac4:	4631      	mov	r1, r6
 800cac6:	4628      	mov	r0, r5
 800cac8:	47b8      	blx	r7
 800caca:	3001      	adds	r0, #1
 800cacc:	f43f af19 	beq.w	800c902 <_printf_float+0xc2>
 800cad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cad4:	4313      	orrs	r3, r2
 800cad6:	d102      	bne.n	800cade <_printf_float+0x29e>
 800cad8:	6823      	ldr	r3, [r4, #0]
 800cada:	07d9      	lsls	r1, r3, #31
 800cadc:	d5d8      	bpl.n	800ca90 <_printf_float+0x250>
 800cade:	ee18 3a10 	vmov	r3, s16
 800cae2:	4652      	mov	r2, sl
 800cae4:	4631      	mov	r1, r6
 800cae6:	4628      	mov	r0, r5
 800cae8:	47b8      	blx	r7
 800caea:	3001      	adds	r0, #1
 800caec:	f43f af09 	beq.w	800c902 <_printf_float+0xc2>
 800caf0:	f04f 0900 	mov.w	r9, #0
 800caf4:	f104 0a1a 	add.w	sl, r4, #26
 800caf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cafa:	425b      	negs	r3, r3
 800cafc:	454b      	cmp	r3, r9
 800cafe:	dc01      	bgt.n	800cb04 <_printf_float+0x2c4>
 800cb00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb02:	e792      	b.n	800ca2a <_printf_float+0x1ea>
 800cb04:	2301      	movs	r3, #1
 800cb06:	4652      	mov	r2, sl
 800cb08:	4631      	mov	r1, r6
 800cb0a:	4628      	mov	r0, r5
 800cb0c:	47b8      	blx	r7
 800cb0e:	3001      	adds	r0, #1
 800cb10:	f43f aef7 	beq.w	800c902 <_printf_float+0xc2>
 800cb14:	f109 0901 	add.w	r9, r9, #1
 800cb18:	e7ee      	b.n	800caf8 <_printf_float+0x2b8>
 800cb1a:	bf00      	nop
 800cb1c:	7fefffff 	.word	0x7fefffff
 800cb20:	080112a4 	.word	0x080112a4
 800cb24:	080112a8 	.word	0x080112a8
 800cb28:	080112b0 	.word	0x080112b0
 800cb2c:	080112ac 	.word	0x080112ac
 800cb30:	080112b4 	.word	0x080112b4
 800cb34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	bfa8      	it	ge
 800cb3c:	461a      	movge	r2, r3
 800cb3e:	2a00      	cmp	r2, #0
 800cb40:	4691      	mov	r9, r2
 800cb42:	dc37      	bgt.n	800cbb4 <_printf_float+0x374>
 800cb44:	f04f 0b00 	mov.w	fp, #0
 800cb48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb4c:	f104 021a 	add.w	r2, r4, #26
 800cb50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb52:	9305      	str	r3, [sp, #20]
 800cb54:	eba3 0309 	sub.w	r3, r3, r9
 800cb58:	455b      	cmp	r3, fp
 800cb5a:	dc33      	bgt.n	800cbc4 <_printf_float+0x384>
 800cb5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb60:	429a      	cmp	r2, r3
 800cb62:	db3b      	blt.n	800cbdc <_printf_float+0x39c>
 800cb64:	6823      	ldr	r3, [r4, #0]
 800cb66:	07da      	lsls	r2, r3, #31
 800cb68:	d438      	bmi.n	800cbdc <_printf_float+0x39c>
 800cb6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb6c:	9a05      	ldr	r2, [sp, #20]
 800cb6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb70:	1a9a      	subs	r2, r3, r2
 800cb72:	eba3 0901 	sub.w	r9, r3, r1
 800cb76:	4591      	cmp	r9, r2
 800cb78:	bfa8      	it	ge
 800cb7a:	4691      	movge	r9, r2
 800cb7c:	f1b9 0f00 	cmp.w	r9, #0
 800cb80:	dc35      	bgt.n	800cbee <_printf_float+0x3ae>
 800cb82:	f04f 0800 	mov.w	r8, #0
 800cb86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb8a:	f104 0a1a 	add.w	sl, r4, #26
 800cb8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb92:	1a9b      	subs	r3, r3, r2
 800cb94:	eba3 0309 	sub.w	r3, r3, r9
 800cb98:	4543      	cmp	r3, r8
 800cb9a:	f77f af79 	ble.w	800ca90 <_printf_float+0x250>
 800cb9e:	2301      	movs	r3, #1
 800cba0:	4652      	mov	r2, sl
 800cba2:	4631      	mov	r1, r6
 800cba4:	4628      	mov	r0, r5
 800cba6:	47b8      	blx	r7
 800cba8:	3001      	adds	r0, #1
 800cbaa:	f43f aeaa 	beq.w	800c902 <_printf_float+0xc2>
 800cbae:	f108 0801 	add.w	r8, r8, #1
 800cbb2:	e7ec      	b.n	800cb8e <_printf_float+0x34e>
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	4631      	mov	r1, r6
 800cbb8:	4642      	mov	r2, r8
 800cbba:	4628      	mov	r0, r5
 800cbbc:	47b8      	blx	r7
 800cbbe:	3001      	adds	r0, #1
 800cbc0:	d1c0      	bne.n	800cb44 <_printf_float+0x304>
 800cbc2:	e69e      	b.n	800c902 <_printf_float+0xc2>
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	4631      	mov	r1, r6
 800cbc8:	4628      	mov	r0, r5
 800cbca:	9205      	str	r2, [sp, #20]
 800cbcc:	47b8      	blx	r7
 800cbce:	3001      	adds	r0, #1
 800cbd0:	f43f ae97 	beq.w	800c902 <_printf_float+0xc2>
 800cbd4:	9a05      	ldr	r2, [sp, #20]
 800cbd6:	f10b 0b01 	add.w	fp, fp, #1
 800cbda:	e7b9      	b.n	800cb50 <_printf_float+0x310>
 800cbdc:	ee18 3a10 	vmov	r3, s16
 800cbe0:	4652      	mov	r2, sl
 800cbe2:	4631      	mov	r1, r6
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	47b8      	blx	r7
 800cbe8:	3001      	adds	r0, #1
 800cbea:	d1be      	bne.n	800cb6a <_printf_float+0x32a>
 800cbec:	e689      	b.n	800c902 <_printf_float+0xc2>
 800cbee:	9a05      	ldr	r2, [sp, #20]
 800cbf0:	464b      	mov	r3, r9
 800cbf2:	4442      	add	r2, r8
 800cbf4:	4631      	mov	r1, r6
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	47b8      	blx	r7
 800cbfa:	3001      	adds	r0, #1
 800cbfc:	d1c1      	bne.n	800cb82 <_printf_float+0x342>
 800cbfe:	e680      	b.n	800c902 <_printf_float+0xc2>
 800cc00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc02:	2a01      	cmp	r2, #1
 800cc04:	dc01      	bgt.n	800cc0a <_printf_float+0x3ca>
 800cc06:	07db      	lsls	r3, r3, #31
 800cc08:	d538      	bpl.n	800cc7c <_printf_float+0x43c>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	4642      	mov	r2, r8
 800cc0e:	4631      	mov	r1, r6
 800cc10:	4628      	mov	r0, r5
 800cc12:	47b8      	blx	r7
 800cc14:	3001      	adds	r0, #1
 800cc16:	f43f ae74 	beq.w	800c902 <_printf_float+0xc2>
 800cc1a:	ee18 3a10 	vmov	r3, s16
 800cc1e:	4652      	mov	r2, sl
 800cc20:	4631      	mov	r1, r6
 800cc22:	4628      	mov	r0, r5
 800cc24:	47b8      	blx	r7
 800cc26:	3001      	adds	r0, #1
 800cc28:	f43f ae6b 	beq.w	800c902 <_printf_float+0xc2>
 800cc2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc30:	2200      	movs	r2, #0
 800cc32:	2300      	movs	r3, #0
 800cc34:	f7f3 ff50 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc38:	b9d8      	cbnz	r0, 800cc72 <_printf_float+0x432>
 800cc3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc3c:	f108 0201 	add.w	r2, r8, #1
 800cc40:	3b01      	subs	r3, #1
 800cc42:	4631      	mov	r1, r6
 800cc44:	4628      	mov	r0, r5
 800cc46:	47b8      	blx	r7
 800cc48:	3001      	adds	r0, #1
 800cc4a:	d10e      	bne.n	800cc6a <_printf_float+0x42a>
 800cc4c:	e659      	b.n	800c902 <_printf_float+0xc2>
 800cc4e:	2301      	movs	r3, #1
 800cc50:	4652      	mov	r2, sl
 800cc52:	4631      	mov	r1, r6
 800cc54:	4628      	mov	r0, r5
 800cc56:	47b8      	blx	r7
 800cc58:	3001      	adds	r0, #1
 800cc5a:	f43f ae52 	beq.w	800c902 <_printf_float+0xc2>
 800cc5e:	f108 0801 	add.w	r8, r8, #1
 800cc62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc64:	3b01      	subs	r3, #1
 800cc66:	4543      	cmp	r3, r8
 800cc68:	dcf1      	bgt.n	800cc4e <_printf_float+0x40e>
 800cc6a:	464b      	mov	r3, r9
 800cc6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc70:	e6dc      	b.n	800ca2c <_printf_float+0x1ec>
 800cc72:	f04f 0800 	mov.w	r8, #0
 800cc76:	f104 0a1a 	add.w	sl, r4, #26
 800cc7a:	e7f2      	b.n	800cc62 <_printf_float+0x422>
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	4642      	mov	r2, r8
 800cc80:	e7df      	b.n	800cc42 <_printf_float+0x402>
 800cc82:	2301      	movs	r3, #1
 800cc84:	464a      	mov	r2, r9
 800cc86:	4631      	mov	r1, r6
 800cc88:	4628      	mov	r0, r5
 800cc8a:	47b8      	blx	r7
 800cc8c:	3001      	adds	r0, #1
 800cc8e:	f43f ae38 	beq.w	800c902 <_printf_float+0xc2>
 800cc92:	f108 0801 	add.w	r8, r8, #1
 800cc96:	68e3      	ldr	r3, [r4, #12]
 800cc98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc9a:	1a5b      	subs	r3, r3, r1
 800cc9c:	4543      	cmp	r3, r8
 800cc9e:	dcf0      	bgt.n	800cc82 <_printf_float+0x442>
 800cca0:	e6fa      	b.n	800ca98 <_printf_float+0x258>
 800cca2:	f04f 0800 	mov.w	r8, #0
 800cca6:	f104 0919 	add.w	r9, r4, #25
 800ccaa:	e7f4      	b.n	800cc96 <_printf_float+0x456>

0800ccac <_printf_common>:
 800ccac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccb0:	4616      	mov	r6, r2
 800ccb2:	4699      	mov	r9, r3
 800ccb4:	688a      	ldr	r2, [r1, #8]
 800ccb6:	690b      	ldr	r3, [r1, #16]
 800ccb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	bfb8      	it	lt
 800ccc0:	4613      	movlt	r3, r2
 800ccc2:	6033      	str	r3, [r6, #0]
 800ccc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ccc8:	4607      	mov	r7, r0
 800ccca:	460c      	mov	r4, r1
 800cccc:	b10a      	cbz	r2, 800ccd2 <_printf_common+0x26>
 800ccce:	3301      	adds	r3, #1
 800ccd0:	6033      	str	r3, [r6, #0]
 800ccd2:	6823      	ldr	r3, [r4, #0]
 800ccd4:	0699      	lsls	r1, r3, #26
 800ccd6:	bf42      	ittt	mi
 800ccd8:	6833      	ldrmi	r3, [r6, #0]
 800ccda:	3302      	addmi	r3, #2
 800ccdc:	6033      	strmi	r3, [r6, #0]
 800ccde:	6825      	ldr	r5, [r4, #0]
 800cce0:	f015 0506 	ands.w	r5, r5, #6
 800cce4:	d106      	bne.n	800ccf4 <_printf_common+0x48>
 800cce6:	f104 0a19 	add.w	sl, r4, #25
 800ccea:	68e3      	ldr	r3, [r4, #12]
 800ccec:	6832      	ldr	r2, [r6, #0]
 800ccee:	1a9b      	subs	r3, r3, r2
 800ccf0:	42ab      	cmp	r3, r5
 800ccf2:	dc26      	bgt.n	800cd42 <_printf_common+0x96>
 800ccf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ccf8:	1e13      	subs	r3, r2, #0
 800ccfa:	6822      	ldr	r2, [r4, #0]
 800ccfc:	bf18      	it	ne
 800ccfe:	2301      	movne	r3, #1
 800cd00:	0692      	lsls	r2, r2, #26
 800cd02:	d42b      	bmi.n	800cd5c <_printf_common+0xb0>
 800cd04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd08:	4649      	mov	r1, r9
 800cd0a:	4638      	mov	r0, r7
 800cd0c:	47c0      	blx	r8
 800cd0e:	3001      	adds	r0, #1
 800cd10:	d01e      	beq.n	800cd50 <_printf_common+0xa4>
 800cd12:	6823      	ldr	r3, [r4, #0]
 800cd14:	68e5      	ldr	r5, [r4, #12]
 800cd16:	6832      	ldr	r2, [r6, #0]
 800cd18:	f003 0306 	and.w	r3, r3, #6
 800cd1c:	2b04      	cmp	r3, #4
 800cd1e:	bf08      	it	eq
 800cd20:	1aad      	subeq	r5, r5, r2
 800cd22:	68a3      	ldr	r3, [r4, #8]
 800cd24:	6922      	ldr	r2, [r4, #16]
 800cd26:	bf0c      	ite	eq
 800cd28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd2c:	2500      	movne	r5, #0
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	bfc4      	itt	gt
 800cd32:	1a9b      	subgt	r3, r3, r2
 800cd34:	18ed      	addgt	r5, r5, r3
 800cd36:	2600      	movs	r6, #0
 800cd38:	341a      	adds	r4, #26
 800cd3a:	42b5      	cmp	r5, r6
 800cd3c:	d11a      	bne.n	800cd74 <_printf_common+0xc8>
 800cd3e:	2000      	movs	r0, #0
 800cd40:	e008      	b.n	800cd54 <_printf_common+0xa8>
 800cd42:	2301      	movs	r3, #1
 800cd44:	4652      	mov	r2, sl
 800cd46:	4649      	mov	r1, r9
 800cd48:	4638      	mov	r0, r7
 800cd4a:	47c0      	blx	r8
 800cd4c:	3001      	adds	r0, #1
 800cd4e:	d103      	bne.n	800cd58 <_printf_common+0xac>
 800cd50:	f04f 30ff 	mov.w	r0, #4294967295
 800cd54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd58:	3501      	adds	r5, #1
 800cd5a:	e7c6      	b.n	800ccea <_printf_common+0x3e>
 800cd5c:	18e1      	adds	r1, r4, r3
 800cd5e:	1c5a      	adds	r2, r3, #1
 800cd60:	2030      	movs	r0, #48	; 0x30
 800cd62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd66:	4422      	add	r2, r4
 800cd68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd70:	3302      	adds	r3, #2
 800cd72:	e7c7      	b.n	800cd04 <_printf_common+0x58>
 800cd74:	2301      	movs	r3, #1
 800cd76:	4622      	mov	r2, r4
 800cd78:	4649      	mov	r1, r9
 800cd7a:	4638      	mov	r0, r7
 800cd7c:	47c0      	blx	r8
 800cd7e:	3001      	adds	r0, #1
 800cd80:	d0e6      	beq.n	800cd50 <_printf_common+0xa4>
 800cd82:	3601      	adds	r6, #1
 800cd84:	e7d9      	b.n	800cd3a <_printf_common+0x8e>
	...

0800cd88 <_printf_i>:
 800cd88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd8c:	7e0f      	ldrb	r7, [r1, #24]
 800cd8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd90:	2f78      	cmp	r7, #120	; 0x78
 800cd92:	4691      	mov	r9, r2
 800cd94:	4680      	mov	r8, r0
 800cd96:	460c      	mov	r4, r1
 800cd98:	469a      	mov	sl, r3
 800cd9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd9e:	d807      	bhi.n	800cdb0 <_printf_i+0x28>
 800cda0:	2f62      	cmp	r7, #98	; 0x62
 800cda2:	d80a      	bhi.n	800cdba <_printf_i+0x32>
 800cda4:	2f00      	cmp	r7, #0
 800cda6:	f000 80d8 	beq.w	800cf5a <_printf_i+0x1d2>
 800cdaa:	2f58      	cmp	r7, #88	; 0x58
 800cdac:	f000 80a3 	beq.w	800cef6 <_printf_i+0x16e>
 800cdb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cdb8:	e03a      	b.n	800ce30 <_printf_i+0xa8>
 800cdba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cdbe:	2b15      	cmp	r3, #21
 800cdc0:	d8f6      	bhi.n	800cdb0 <_printf_i+0x28>
 800cdc2:	a101      	add	r1, pc, #4	; (adr r1, 800cdc8 <_printf_i+0x40>)
 800cdc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdc8:	0800ce21 	.word	0x0800ce21
 800cdcc:	0800ce35 	.word	0x0800ce35
 800cdd0:	0800cdb1 	.word	0x0800cdb1
 800cdd4:	0800cdb1 	.word	0x0800cdb1
 800cdd8:	0800cdb1 	.word	0x0800cdb1
 800cddc:	0800cdb1 	.word	0x0800cdb1
 800cde0:	0800ce35 	.word	0x0800ce35
 800cde4:	0800cdb1 	.word	0x0800cdb1
 800cde8:	0800cdb1 	.word	0x0800cdb1
 800cdec:	0800cdb1 	.word	0x0800cdb1
 800cdf0:	0800cdb1 	.word	0x0800cdb1
 800cdf4:	0800cf41 	.word	0x0800cf41
 800cdf8:	0800ce65 	.word	0x0800ce65
 800cdfc:	0800cf23 	.word	0x0800cf23
 800ce00:	0800cdb1 	.word	0x0800cdb1
 800ce04:	0800cdb1 	.word	0x0800cdb1
 800ce08:	0800cf63 	.word	0x0800cf63
 800ce0c:	0800cdb1 	.word	0x0800cdb1
 800ce10:	0800ce65 	.word	0x0800ce65
 800ce14:	0800cdb1 	.word	0x0800cdb1
 800ce18:	0800cdb1 	.word	0x0800cdb1
 800ce1c:	0800cf2b 	.word	0x0800cf2b
 800ce20:	682b      	ldr	r3, [r5, #0]
 800ce22:	1d1a      	adds	r2, r3, #4
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	602a      	str	r2, [r5, #0]
 800ce28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce30:	2301      	movs	r3, #1
 800ce32:	e0a3      	b.n	800cf7c <_printf_i+0x1f4>
 800ce34:	6820      	ldr	r0, [r4, #0]
 800ce36:	6829      	ldr	r1, [r5, #0]
 800ce38:	0606      	lsls	r6, r0, #24
 800ce3a:	f101 0304 	add.w	r3, r1, #4
 800ce3e:	d50a      	bpl.n	800ce56 <_printf_i+0xce>
 800ce40:	680e      	ldr	r6, [r1, #0]
 800ce42:	602b      	str	r3, [r5, #0]
 800ce44:	2e00      	cmp	r6, #0
 800ce46:	da03      	bge.n	800ce50 <_printf_i+0xc8>
 800ce48:	232d      	movs	r3, #45	; 0x2d
 800ce4a:	4276      	negs	r6, r6
 800ce4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce50:	485e      	ldr	r0, [pc, #376]	; (800cfcc <_printf_i+0x244>)
 800ce52:	230a      	movs	r3, #10
 800ce54:	e019      	b.n	800ce8a <_printf_i+0x102>
 800ce56:	680e      	ldr	r6, [r1, #0]
 800ce58:	602b      	str	r3, [r5, #0]
 800ce5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce5e:	bf18      	it	ne
 800ce60:	b236      	sxthne	r6, r6
 800ce62:	e7ef      	b.n	800ce44 <_printf_i+0xbc>
 800ce64:	682b      	ldr	r3, [r5, #0]
 800ce66:	6820      	ldr	r0, [r4, #0]
 800ce68:	1d19      	adds	r1, r3, #4
 800ce6a:	6029      	str	r1, [r5, #0]
 800ce6c:	0601      	lsls	r1, r0, #24
 800ce6e:	d501      	bpl.n	800ce74 <_printf_i+0xec>
 800ce70:	681e      	ldr	r6, [r3, #0]
 800ce72:	e002      	b.n	800ce7a <_printf_i+0xf2>
 800ce74:	0646      	lsls	r6, r0, #25
 800ce76:	d5fb      	bpl.n	800ce70 <_printf_i+0xe8>
 800ce78:	881e      	ldrh	r6, [r3, #0]
 800ce7a:	4854      	ldr	r0, [pc, #336]	; (800cfcc <_printf_i+0x244>)
 800ce7c:	2f6f      	cmp	r7, #111	; 0x6f
 800ce7e:	bf0c      	ite	eq
 800ce80:	2308      	moveq	r3, #8
 800ce82:	230a      	movne	r3, #10
 800ce84:	2100      	movs	r1, #0
 800ce86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce8a:	6865      	ldr	r5, [r4, #4]
 800ce8c:	60a5      	str	r5, [r4, #8]
 800ce8e:	2d00      	cmp	r5, #0
 800ce90:	bfa2      	ittt	ge
 800ce92:	6821      	ldrge	r1, [r4, #0]
 800ce94:	f021 0104 	bicge.w	r1, r1, #4
 800ce98:	6021      	strge	r1, [r4, #0]
 800ce9a:	b90e      	cbnz	r6, 800cea0 <_printf_i+0x118>
 800ce9c:	2d00      	cmp	r5, #0
 800ce9e:	d04d      	beq.n	800cf3c <_printf_i+0x1b4>
 800cea0:	4615      	mov	r5, r2
 800cea2:	fbb6 f1f3 	udiv	r1, r6, r3
 800cea6:	fb03 6711 	mls	r7, r3, r1, r6
 800ceaa:	5dc7      	ldrb	r7, [r0, r7]
 800ceac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ceb0:	4637      	mov	r7, r6
 800ceb2:	42bb      	cmp	r3, r7
 800ceb4:	460e      	mov	r6, r1
 800ceb6:	d9f4      	bls.n	800cea2 <_printf_i+0x11a>
 800ceb8:	2b08      	cmp	r3, #8
 800ceba:	d10b      	bne.n	800ced4 <_printf_i+0x14c>
 800cebc:	6823      	ldr	r3, [r4, #0]
 800cebe:	07de      	lsls	r6, r3, #31
 800cec0:	d508      	bpl.n	800ced4 <_printf_i+0x14c>
 800cec2:	6923      	ldr	r3, [r4, #16]
 800cec4:	6861      	ldr	r1, [r4, #4]
 800cec6:	4299      	cmp	r1, r3
 800cec8:	bfde      	ittt	le
 800ceca:	2330      	movle	r3, #48	; 0x30
 800cecc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ced0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ced4:	1b52      	subs	r2, r2, r5
 800ced6:	6122      	str	r2, [r4, #16]
 800ced8:	f8cd a000 	str.w	sl, [sp]
 800cedc:	464b      	mov	r3, r9
 800cede:	aa03      	add	r2, sp, #12
 800cee0:	4621      	mov	r1, r4
 800cee2:	4640      	mov	r0, r8
 800cee4:	f7ff fee2 	bl	800ccac <_printf_common>
 800cee8:	3001      	adds	r0, #1
 800ceea:	d14c      	bne.n	800cf86 <_printf_i+0x1fe>
 800ceec:	f04f 30ff 	mov.w	r0, #4294967295
 800cef0:	b004      	add	sp, #16
 800cef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cef6:	4835      	ldr	r0, [pc, #212]	; (800cfcc <_printf_i+0x244>)
 800cef8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cefc:	6829      	ldr	r1, [r5, #0]
 800cefe:	6823      	ldr	r3, [r4, #0]
 800cf00:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf04:	6029      	str	r1, [r5, #0]
 800cf06:	061d      	lsls	r5, r3, #24
 800cf08:	d514      	bpl.n	800cf34 <_printf_i+0x1ac>
 800cf0a:	07df      	lsls	r7, r3, #31
 800cf0c:	bf44      	itt	mi
 800cf0e:	f043 0320 	orrmi.w	r3, r3, #32
 800cf12:	6023      	strmi	r3, [r4, #0]
 800cf14:	b91e      	cbnz	r6, 800cf1e <_printf_i+0x196>
 800cf16:	6823      	ldr	r3, [r4, #0]
 800cf18:	f023 0320 	bic.w	r3, r3, #32
 800cf1c:	6023      	str	r3, [r4, #0]
 800cf1e:	2310      	movs	r3, #16
 800cf20:	e7b0      	b.n	800ce84 <_printf_i+0xfc>
 800cf22:	6823      	ldr	r3, [r4, #0]
 800cf24:	f043 0320 	orr.w	r3, r3, #32
 800cf28:	6023      	str	r3, [r4, #0]
 800cf2a:	2378      	movs	r3, #120	; 0x78
 800cf2c:	4828      	ldr	r0, [pc, #160]	; (800cfd0 <_printf_i+0x248>)
 800cf2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf32:	e7e3      	b.n	800cefc <_printf_i+0x174>
 800cf34:	0659      	lsls	r1, r3, #25
 800cf36:	bf48      	it	mi
 800cf38:	b2b6      	uxthmi	r6, r6
 800cf3a:	e7e6      	b.n	800cf0a <_printf_i+0x182>
 800cf3c:	4615      	mov	r5, r2
 800cf3e:	e7bb      	b.n	800ceb8 <_printf_i+0x130>
 800cf40:	682b      	ldr	r3, [r5, #0]
 800cf42:	6826      	ldr	r6, [r4, #0]
 800cf44:	6961      	ldr	r1, [r4, #20]
 800cf46:	1d18      	adds	r0, r3, #4
 800cf48:	6028      	str	r0, [r5, #0]
 800cf4a:	0635      	lsls	r5, r6, #24
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	d501      	bpl.n	800cf54 <_printf_i+0x1cc>
 800cf50:	6019      	str	r1, [r3, #0]
 800cf52:	e002      	b.n	800cf5a <_printf_i+0x1d2>
 800cf54:	0670      	lsls	r0, r6, #25
 800cf56:	d5fb      	bpl.n	800cf50 <_printf_i+0x1c8>
 800cf58:	8019      	strh	r1, [r3, #0]
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	6123      	str	r3, [r4, #16]
 800cf5e:	4615      	mov	r5, r2
 800cf60:	e7ba      	b.n	800ced8 <_printf_i+0x150>
 800cf62:	682b      	ldr	r3, [r5, #0]
 800cf64:	1d1a      	adds	r2, r3, #4
 800cf66:	602a      	str	r2, [r5, #0]
 800cf68:	681d      	ldr	r5, [r3, #0]
 800cf6a:	6862      	ldr	r2, [r4, #4]
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	4628      	mov	r0, r5
 800cf70:	f7f3 f93e 	bl	80001f0 <memchr>
 800cf74:	b108      	cbz	r0, 800cf7a <_printf_i+0x1f2>
 800cf76:	1b40      	subs	r0, r0, r5
 800cf78:	6060      	str	r0, [r4, #4]
 800cf7a:	6863      	ldr	r3, [r4, #4]
 800cf7c:	6123      	str	r3, [r4, #16]
 800cf7e:	2300      	movs	r3, #0
 800cf80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf84:	e7a8      	b.n	800ced8 <_printf_i+0x150>
 800cf86:	6923      	ldr	r3, [r4, #16]
 800cf88:	462a      	mov	r2, r5
 800cf8a:	4649      	mov	r1, r9
 800cf8c:	4640      	mov	r0, r8
 800cf8e:	47d0      	blx	sl
 800cf90:	3001      	adds	r0, #1
 800cf92:	d0ab      	beq.n	800ceec <_printf_i+0x164>
 800cf94:	6823      	ldr	r3, [r4, #0]
 800cf96:	079b      	lsls	r3, r3, #30
 800cf98:	d413      	bmi.n	800cfc2 <_printf_i+0x23a>
 800cf9a:	68e0      	ldr	r0, [r4, #12]
 800cf9c:	9b03      	ldr	r3, [sp, #12]
 800cf9e:	4298      	cmp	r0, r3
 800cfa0:	bfb8      	it	lt
 800cfa2:	4618      	movlt	r0, r3
 800cfa4:	e7a4      	b.n	800cef0 <_printf_i+0x168>
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	4632      	mov	r2, r6
 800cfaa:	4649      	mov	r1, r9
 800cfac:	4640      	mov	r0, r8
 800cfae:	47d0      	blx	sl
 800cfb0:	3001      	adds	r0, #1
 800cfb2:	d09b      	beq.n	800ceec <_printf_i+0x164>
 800cfb4:	3501      	adds	r5, #1
 800cfb6:	68e3      	ldr	r3, [r4, #12]
 800cfb8:	9903      	ldr	r1, [sp, #12]
 800cfba:	1a5b      	subs	r3, r3, r1
 800cfbc:	42ab      	cmp	r3, r5
 800cfbe:	dcf2      	bgt.n	800cfa6 <_printf_i+0x21e>
 800cfc0:	e7eb      	b.n	800cf9a <_printf_i+0x212>
 800cfc2:	2500      	movs	r5, #0
 800cfc4:	f104 0619 	add.w	r6, r4, #25
 800cfc8:	e7f5      	b.n	800cfb6 <_printf_i+0x22e>
 800cfca:	bf00      	nop
 800cfcc:	080112b6 	.word	0x080112b6
 800cfd0:	080112c7 	.word	0x080112c7

0800cfd4 <_scanf_float>:
 800cfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd8:	b087      	sub	sp, #28
 800cfda:	4617      	mov	r7, r2
 800cfdc:	9303      	str	r3, [sp, #12]
 800cfde:	688b      	ldr	r3, [r1, #8]
 800cfe0:	1e5a      	subs	r2, r3, #1
 800cfe2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cfe6:	bf83      	ittte	hi
 800cfe8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cfec:	195b      	addhi	r3, r3, r5
 800cfee:	9302      	strhi	r3, [sp, #8]
 800cff0:	2300      	movls	r3, #0
 800cff2:	bf86      	itte	hi
 800cff4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cff8:	608b      	strhi	r3, [r1, #8]
 800cffa:	9302      	strls	r3, [sp, #8]
 800cffc:	680b      	ldr	r3, [r1, #0]
 800cffe:	468b      	mov	fp, r1
 800d000:	2500      	movs	r5, #0
 800d002:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d006:	f84b 3b1c 	str.w	r3, [fp], #28
 800d00a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d00e:	4680      	mov	r8, r0
 800d010:	460c      	mov	r4, r1
 800d012:	465e      	mov	r6, fp
 800d014:	46aa      	mov	sl, r5
 800d016:	46a9      	mov	r9, r5
 800d018:	9501      	str	r5, [sp, #4]
 800d01a:	68a2      	ldr	r2, [r4, #8]
 800d01c:	b152      	cbz	r2, 800d034 <_scanf_float+0x60>
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	2b4e      	cmp	r3, #78	; 0x4e
 800d024:	d864      	bhi.n	800d0f0 <_scanf_float+0x11c>
 800d026:	2b40      	cmp	r3, #64	; 0x40
 800d028:	d83c      	bhi.n	800d0a4 <_scanf_float+0xd0>
 800d02a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d02e:	b2c8      	uxtb	r0, r1
 800d030:	280e      	cmp	r0, #14
 800d032:	d93a      	bls.n	800d0aa <_scanf_float+0xd6>
 800d034:	f1b9 0f00 	cmp.w	r9, #0
 800d038:	d003      	beq.n	800d042 <_scanf_float+0x6e>
 800d03a:	6823      	ldr	r3, [r4, #0]
 800d03c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d040:	6023      	str	r3, [r4, #0]
 800d042:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d046:	f1ba 0f01 	cmp.w	sl, #1
 800d04a:	f200 8113 	bhi.w	800d274 <_scanf_float+0x2a0>
 800d04e:	455e      	cmp	r6, fp
 800d050:	f200 8105 	bhi.w	800d25e <_scanf_float+0x28a>
 800d054:	2501      	movs	r5, #1
 800d056:	4628      	mov	r0, r5
 800d058:	b007      	add	sp, #28
 800d05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d05e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d062:	2a0d      	cmp	r2, #13
 800d064:	d8e6      	bhi.n	800d034 <_scanf_float+0x60>
 800d066:	a101      	add	r1, pc, #4	; (adr r1, 800d06c <_scanf_float+0x98>)
 800d068:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d06c:	0800d1ab 	.word	0x0800d1ab
 800d070:	0800d035 	.word	0x0800d035
 800d074:	0800d035 	.word	0x0800d035
 800d078:	0800d035 	.word	0x0800d035
 800d07c:	0800d20b 	.word	0x0800d20b
 800d080:	0800d1e3 	.word	0x0800d1e3
 800d084:	0800d035 	.word	0x0800d035
 800d088:	0800d035 	.word	0x0800d035
 800d08c:	0800d1b9 	.word	0x0800d1b9
 800d090:	0800d035 	.word	0x0800d035
 800d094:	0800d035 	.word	0x0800d035
 800d098:	0800d035 	.word	0x0800d035
 800d09c:	0800d035 	.word	0x0800d035
 800d0a0:	0800d171 	.word	0x0800d171
 800d0a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d0a8:	e7db      	b.n	800d062 <_scanf_float+0x8e>
 800d0aa:	290e      	cmp	r1, #14
 800d0ac:	d8c2      	bhi.n	800d034 <_scanf_float+0x60>
 800d0ae:	a001      	add	r0, pc, #4	; (adr r0, 800d0b4 <_scanf_float+0xe0>)
 800d0b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d0b4:	0800d163 	.word	0x0800d163
 800d0b8:	0800d035 	.word	0x0800d035
 800d0bc:	0800d163 	.word	0x0800d163
 800d0c0:	0800d1f7 	.word	0x0800d1f7
 800d0c4:	0800d035 	.word	0x0800d035
 800d0c8:	0800d111 	.word	0x0800d111
 800d0cc:	0800d14d 	.word	0x0800d14d
 800d0d0:	0800d14d 	.word	0x0800d14d
 800d0d4:	0800d14d 	.word	0x0800d14d
 800d0d8:	0800d14d 	.word	0x0800d14d
 800d0dc:	0800d14d 	.word	0x0800d14d
 800d0e0:	0800d14d 	.word	0x0800d14d
 800d0e4:	0800d14d 	.word	0x0800d14d
 800d0e8:	0800d14d 	.word	0x0800d14d
 800d0ec:	0800d14d 	.word	0x0800d14d
 800d0f0:	2b6e      	cmp	r3, #110	; 0x6e
 800d0f2:	d809      	bhi.n	800d108 <_scanf_float+0x134>
 800d0f4:	2b60      	cmp	r3, #96	; 0x60
 800d0f6:	d8b2      	bhi.n	800d05e <_scanf_float+0x8a>
 800d0f8:	2b54      	cmp	r3, #84	; 0x54
 800d0fa:	d077      	beq.n	800d1ec <_scanf_float+0x218>
 800d0fc:	2b59      	cmp	r3, #89	; 0x59
 800d0fe:	d199      	bne.n	800d034 <_scanf_float+0x60>
 800d100:	2d07      	cmp	r5, #7
 800d102:	d197      	bne.n	800d034 <_scanf_float+0x60>
 800d104:	2508      	movs	r5, #8
 800d106:	e029      	b.n	800d15c <_scanf_float+0x188>
 800d108:	2b74      	cmp	r3, #116	; 0x74
 800d10a:	d06f      	beq.n	800d1ec <_scanf_float+0x218>
 800d10c:	2b79      	cmp	r3, #121	; 0x79
 800d10e:	e7f6      	b.n	800d0fe <_scanf_float+0x12a>
 800d110:	6821      	ldr	r1, [r4, #0]
 800d112:	05c8      	lsls	r0, r1, #23
 800d114:	d51a      	bpl.n	800d14c <_scanf_float+0x178>
 800d116:	9b02      	ldr	r3, [sp, #8]
 800d118:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d11c:	6021      	str	r1, [r4, #0]
 800d11e:	f109 0901 	add.w	r9, r9, #1
 800d122:	b11b      	cbz	r3, 800d12c <_scanf_float+0x158>
 800d124:	3b01      	subs	r3, #1
 800d126:	3201      	adds	r2, #1
 800d128:	9302      	str	r3, [sp, #8]
 800d12a:	60a2      	str	r2, [r4, #8]
 800d12c:	68a3      	ldr	r3, [r4, #8]
 800d12e:	3b01      	subs	r3, #1
 800d130:	60a3      	str	r3, [r4, #8]
 800d132:	6923      	ldr	r3, [r4, #16]
 800d134:	3301      	adds	r3, #1
 800d136:	6123      	str	r3, [r4, #16]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	3b01      	subs	r3, #1
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	607b      	str	r3, [r7, #4]
 800d140:	f340 8084 	ble.w	800d24c <_scanf_float+0x278>
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	3301      	adds	r3, #1
 800d148:	603b      	str	r3, [r7, #0]
 800d14a:	e766      	b.n	800d01a <_scanf_float+0x46>
 800d14c:	eb1a 0f05 	cmn.w	sl, r5
 800d150:	f47f af70 	bne.w	800d034 <_scanf_float+0x60>
 800d154:	6822      	ldr	r2, [r4, #0]
 800d156:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d15a:	6022      	str	r2, [r4, #0]
 800d15c:	f806 3b01 	strb.w	r3, [r6], #1
 800d160:	e7e4      	b.n	800d12c <_scanf_float+0x158>
 800d162:	6822      	ldr	r2, [r4, #0]
 800d164:	0610      	lsls	r0, r2, #24
 800d166:	f57f af65 	bpl.w	800d034 <_scanf_float+0x60>
 800d16a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d16e:	e7f4      	b.n	800d15a <_scanf_float+0x186>
 800d170:	f1ba 0f00 	cmp.w	sl, #0
 800d174:	d10e      	bne.n	800d194 <_scanf_float+0x1c0>
 800d176:	f1b9 0f00 	cmp.w	r9, #0
 800d17a:	d10e      	bne.n	800d19a <_scanf_float+0x1c6>
 800d17c:	6822      	ldr	r2, [r4, #0]
 800d17e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d182:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d186:	d108      	bne.n	800d19a <_scanf_float+0x1c6>
 800d188:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d18c:	6022      	str	r2, [r4, #0]
 800d18e:	f04f 0a01 	mov.w	sl, #1
 800d192:	e7e3      	b.n	800d15c <_scanf_float+0x188>
 800d194:	f1ba 0f02 	cmp.w	sl, #2
 800d198:	d055      	beq.n	800d246 <_scanf_float+0x272>
 800d19a:	2d01      	cmp	r5, #1
 800d19c:	d002      	beq.n	800d1a4 <_scanf_float+0x1d0>
 800d19e:	2d04      	cmp	r5, #4
 800d1a0:	f47f af48 	bne.w	800d034 <_scanf_float+0x60>
 800d1a4:	3501      	adds	r5, #1
 800d1a6:	b2ed      	uxtb	r5, r5
 800d1a8:	e7d8      	b.n	800d15c <_scanf_float+0x188>
 800d1aa:	f1ba 0f01 	cmp.w	sl, #1
 800d1ae:	f47f af41 	bne.w	800d034 <_scanf_float+0x60>
 800d1b2:	f04f 0a02 	mov.w	sl, #2
 800d1b6:	e7d1      	b.n	800d15c <_scanf_float+0x188>
 800d1b8:	b97d      	cbnz	r5, 800d1da <_scanf_float+0x206>
 800d1ba:	f1b9 0f00 	cmp.w	r9, #0
 800d1be:	f47f af3c 	bne.w	800d03a <_scanf_float+0x66>
 800d1c2:	6822      	ldr	r2, [r4, #0]
 800d1c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d1c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d1cc:	f47f af39 	bne.w	800d042 <_scanf_float+0x6e>
 800d1d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d1d4:	6022      	str	r2, [r4, #0]
 800d1d6:	2501      	movs	r5, #1
 800d1d8:	e7c0      	b.n	800d15c <_scanf_float+0x188>
 800d1da:	2d03      	cmp	r5, #3
 800d1dc:	d0e2      	beq.n	800d1a4 <_scanf_float+0x1d0>
 800d1de:	2d05      	cmp	r5, #5
 800d1e0:	e7de      	b.n	800d1a0 <_scanf_float+0x1cc>
 800d1e2:	2d02      	cmp	r5, #2
 800d1e4:	f47f af26 	bne.w	800d034 <_scanf_float+0x60>
 800d1e8:	2503      	movs	r5, #3
 800d1ea:	e7b7      	b.n	800d15c <_scanf_float+0x188>
 800d1ec:	2d06      	cmp	r5, #6
 800d1ee:	f47f af21 	bne.w	800d034 <_scanf_float+0x60>
 800d1f2:	2507      	movs	r5, #7
 800d1f4:	e7b2      	b.n	800d15c <_scanf_float+0x188>
 800d1f6:	6822      	ldr	r2, [r4, #0]
 800d1f8:	0591      	lsls	r1, r2, #22
 800d1fa:	f57f af1b 	bpl.w	800d034 <_scanf_float+0x60>
 800d1fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d202:	6022      	str	r2, [r4, #0]
 800d204:	f8cd 9004 	str.w	r9, [sp, #4]
 800d208:	e7a8      	b.n	800d15c <_scanf_float+0x188>
 800d20a:	6822      	ldr	r2, [r4, #0]
 800d20c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d210:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d214:	d006      	beq.n	800d224 <_scanf_float+0x250>
 800d216:	0550      	lsls	r0, r2, #21
 800d218:	f57f af0c 	bpl.w	800d034 <_scanf_float+0x60>
 800d21c:	f1b9 0f00 	cmp.w	r9, #0
 800d220:	f43f af0f 	beq.w	800d042 <_scanf_float+0x6e>
 800d224:	0591      	lsls	r1, r2, #22
 800d226:	bf58      	it	pl
 800d228:	9901      	ldrpl	r1, [sp, #4]
 800d22a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d22e:	bf58      	it	pl
 800d230:	eba9 0101 	subpl.w	r1, r9, r1
 800d234:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d238:	bf58      	it	pl
 800d23a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d23e:	6022      	str	r2, [r4, #0]
 800d240:	f04f 0900 	mov.w	r9, #0
 800d244:	e78a      	b.n	800d15c <_scanf_float+0x188>
 800d246:	f04f 0a03 	mov.w	sl, #3
 800d24a:	e787      	b.n	800d15c <_scanf_float+0x188>
 800d24c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d250:	4639      	mov	r1, r7
 800d252:	4640      	mov	r0, r8
 800d254:	4798      	blx	r3
 800d256:	2800      	cmp	r0, #0
 800d258:	f43f aedf 	beq.w	800d01a <_scanf_float+0x46>
 800d25c:	e6ea      	b.n	800d034 <_scanf_float+0x60>
 800d25e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d262:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d266:	463a      	mov	r2, r7
 800d268:	4640      	mov	r0, r8
 800d26a:	4798      	blx	r3
 800d26c:	6923      	ldr	r3, [r4, #16]
 800d26e:	3b01      	subs	r3, #1
 800d270:	6123      	str	r3, [r4, #16]
 800d272:	e6ec      	b.n	800d04e <_scanf_float+0x7a>
 800d274:	1e6b      	subs	r3, r5, #1
 800d276:	2b06      	cmp	r3, #6
 800d278:	d825      	bhi.n	800d2c6 <_scanf_float+0x2f2>
 800d27a:	2d02      	cmp	r5, #2
 800d27c:	d836      	bhi.n	800d2ec <_scanf_float+0x318>
 800d27e:	455e      	cmp	r6, fp
 800d280:	f67f aee8 	bls.w	800d054 <_scanf_float+0x80>
 800d284:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d288:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d28c:	463a      	mov	r2, r7
 800d28e:	4640      	mov	r0, r8
 800d290:	4798      	blx	r3
 800d292:	6923      	ldr	r3, [r4, #16]
 800d294:	3b01      	subs	r3, #1
 800d296:	6123      	str	r3, [r4, #16]
 800d298:	e7f1      	b.n	800d27e <_scanf_float+0x2aa>
 800d29a:	9802      	ldr	r0, [sp, #8]
 800d29c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d2a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d2a4:	9002      	str	r0, [sp, #8]
 800d2a6:	463a      	mov	r2, r7
 800d2a8:	4640      	mov	r0, r8
 800d2aa:	4798      	blx	r3
 800d2ac:	6923      	ldr	r3, [r4, #16]
 800d2ae:	3b01      	subs	r3, #1
 800d2b0:	6123      	str	r3, [r4, #16]
 800d2b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d2b6:	fa5f fa8a 	uxtb.w	sl, sl
 800d2ba:	f1ba 0f02 	cmp.w	sl, #2
 800d2be:	d1ec      	bne.n	800d29a <_scanf_float+0x2c6>
 800d2c0:	3d03      	subs	r5, #3
 800d2c2:	b2ed      	uxtb	r5, r5
 800d2c4:	1b76      	subs	r6, r6, r5
 800d2c6:	6823      	ldr	r3, [r4, #0]
 800d2c8:	05da      	lsls	r2, r3, #23
 800d2ca:	d52f      	bpl.n	800d32c <_scanf_float+0x358>
 800d2cc:	055b      	lsls	r3, r3, #21
 800d2ce:	d510      	bpl.n	800d2f2 <_scanf_float+0x31e>
 800d2d0:	455e      	cmp	r6, fp
 800d2d2:	f67f aebf 	bls.w	800d054 <_scanf_float+0x80>
 800d2d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d2da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d2de:	463a      	mov	r2, r7
 800d2e0:	4640      	mov	r0, r8
 800d2e2:	4798      	blx	r3
 800d2e4:	6923      	ldr	r3, [r4, #16]
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	6123      	str	r3, [r4, #16]
 800d2ea:	e7f1      	b.n	800d2d0 <_scanf_float+0x2fc>
 800d2ec:	46aa      	mov	sl, r5
 800d2ee:	9602      	str	r6, [sp, #8]
 800d2f0:	e7df      	b.n	800d2b2 <_scanf_float+0x2de>
 800d2f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d2f6:	6923      	ldr	r3, [r4, #16]
 800d2f8:	2965      	cmp	r1, #101	; 0x65
 800d2fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800d2fe:	f106 35ff 	add.w	r5, r6, #4294967295
 800d302:	6123      	str	r3, [r4, #16]
 800d304:	d00c      	beq.n	800d320 <_scanf_float+0x34c>
 800d306:	2945      	cmp	r1, #69	; 0x45
 800d308:	d00a      	beq.n	800d320 <_scanf_float+0x34c>
 800d30a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d30e:	463a      	mov	r2, r7
 800d310:	4640      	mov	r0, r8
 800d312:	4798      	blx	r3
 800d314:	6923      	ldr	r3, [r4, #16]
 800d316:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d31a:	3b01      	subs	r3, #1
 800d31c:	1eb5      	subs	r5, r6, #2
 800d31e:	6123      	str	r3, [r4, #16]
 800d320:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d324:	463a      	mov	r2, r7
 800d326:	4640      	mov	r0, r8
 800d328:	4798      	blx	r3
 800d32a:	462e      	mov	r6, r5
 800d32c:	6825      	ldr	r5, [r4, #0]
 800d32e:	f015 0510 	ands.w	r5, r5, #16
 800d332:	d159      	bne.n	800d3e8 <_scanf_float+0x414>
 800d334:	7035      	strb	r5, [r6, #0]
 800d336:	6823      	ldr	r3, [r4, #0]
 800d338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d33c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d340:	d11b      	bne.n	800d37a <_scanf_float+0x3a6>
 800d342:	9b01      	ldr	r3, [sp, #4]
 800d344:	454b      	cmp	r3, r9
 800d346:	eba3 0209 	sub.w	r2, r3, r9
 800d34a:	d123      	bne.n	800d394 <_scanf_float+0x3c0>
 800d34c:	2200      	movs	r2, #0
 800d34e:	4659      	mov	r1, fp
 800d350:	4640      	mov	r0, r8
 800d352:	f000 fe97 	bl	800e084 <_strtod_r>
 800d356:	6822      	ldr	r2, [r4, #0]
 800d358:	9b03      	ldr	r3, [sp, #12]
 800d35a:	f012 0f02 	tst.w	r2, #2
 800d35e:	ec57 6b10 	vmov	r6, r7, d0
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	d021      	beq.n	800d3aa <_scanf_float+0x3d6>
 800d366:	9903      	ldr	r1, [sp, #12]
 800d368:	1d1a      	adds	r2, r3, #4
 800d36a:	600a      	str	r2, [r1, #0]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	e9c3 6700 	strd	r6, r7, [r3]
 800d372:	68e3      	ldr	r3, [r4, #12]
 800d374:	3301      	adds	r3, #1
 800d376:	60e3      	str	r3, [r4, #12]
 800d378:	e66d      	b.n	800d056 <_scanf_float+0x82>
 800d37a:	9b04      	ldr	r3, [sp, #16]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d0e5      	beq.n	800d34c <_scanf_float+0x378>
 800d380:	9905      	ldr	r1, [sp, #20]
 800d382:	230a      	movs	r3, #10
 800d384:	462a      	mov	r2, r5
 800d386:	3101      	adds	r1, #1
 800d388:	4640      	mov	r0, r8
 800d38a:	f000 ff03 	bl	800e194 <_strtol_r>
 800d38e:	9b04      	ldr	r3, [sp, #16]
 800d390:	9e05      	ldr	r6, [sp, #20]
 800d392:	1ac2      	subs	r2, r0, r3
 800d394:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d398:	429e      	cmp	r6, r3
 800d39a:	bf28      	it	cs
 800d39c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d3a0:	4912      	ldr	r1, [pc, #72]	; (800d3ec <_scanf_float+0x418>)
 800d3a2:	4630      	mov	r0, r6
 800d3a4:	f000 f82c 	bl	800d400 <siprintf>
 800d3a8:	e7d0      	b.n	800d34c <_scanf_float+0x378>
 800d3aa:	9903      	ldr	r1, [sp, #12]
 800d3ac:	f012 0f04 	tst.w	r2, #4
 800d3b0:	f103 0204 	add.w	r2, r3, #4
 800d3b4:	600a      	str	r2, [r1, #0]
 800d3b6:	d1d9      	bne.n	800d36c <_scanf_float+0x398>
 800d3b8:	f8d3 8000 	ldr.w	r8, [r3]
 800d3bc:	ee10 2a10 	vmov	r2, s0
 800d3c0:	ee10 0a10 	vmov	r0, s0
 800d3c4:	463b      	mov	r3, r7
 800d3c6:	4639      	mov	r1, r7
 800d3c8:	f7f3 fbb8 	bl	8000b3c <__aeabi_dcmpun>
 800d3cc:	b128      	cbz	r0, 800d3da <_scanf_float+0x406>
 800d3ce:	4808      	ldr	r0, [pc, #32]	; (800d3f0 <_scanf_float+0x41c>)
 800d3d0:	f000 f810 	bl	800d3f4 <nanf>
 800d3d4:	ed88 0a00 	vstr	s0, [r8]
 800d3d8:	e7cb      	b.n	800d372 <_scanf_float+0x39e>
 800d3da:	4630      	mov	r0, r6
 800d3dc:	4639      	mov	r1, r7
 800d3de:	f7f3 fc0b 	bl	8000bf8 <__aeabi_d2f>
 800d3e2:	f8c8 0000 	str.w	r0, [r8]
 800d3e6:	e7c4      	b.n	800d372 <_scanf_float+0x39e>
 800d3e8:	2500      	movs	r5, #0
 800d3ea:	e634      	b.n	800d056 <_scanf_float+0x82>
 800d3ec:	080112d8 	.word	0x080112d8
 800d3f0:	080116e0 	.word	0x080116e0

0800d3f4 <nanf>:
 800d3f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d3fc <nanf+0x8>
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	7fc00000 	.word	0x7fc00000

0800d400 <siprintf>:
 800d400:	b40e      	push	{r1, r2, r3}
 800d402:	b500      	push	{lr}
 800d404:	b09c      	sub	sp, #112	; 0x70
 800d406:	ab1d      	add	r3, sp, #116	; 0x74
 800d408:	9002      	str	r0, [sp, #8]
 800d40a:	9006      	str	r0, [sp, #24]
 800d40c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d410:	4809      	ldr	r0, [pc, #36]	; (800d438 <siprintf+0x38>)
 800d412:	9107      	str	r1, [sp, #28]
 800d414:	9104      	str	r1, [sp, #16]
 800d416:	4909      	ldr	r1, [pc, #36]	; (800d43c <siprintf+0x3c>)
 800d418:	f853 2b04 	ldr.w	r2, [r3], #4
 800d41c:	9105      	str	r1, [sp, #20]
 800d41e:	6800      	ldr	r0, [r0, #0]
 800d420:	9301      	str	r3, [sp, #4]
 800d422:	a902      	add	r1, sp, #8
 800d424:	f002 fed4 	bl	80101d0 <_svfiprintf_r>
 800d428:	9b02      	ldr	r3, [sp, #8]
 800d42a:	2200      	movs	r2, #0
 800d42c:	701a      	strb	r2, [r3, #0]
 800d42e:	b01c      	add	sp, #112	; 0x70
 800d430:	f85d eb04 	ldr.w	lr, [sp], #4
 800d434:	b003      	add	sp, #12
 800d436:	4770      	bx	lr
 800d438:	20000254 	.word	0x20000254
 800d43c:	ffff0208 	.word	0xffff0208

0800d440 <sulp>:
 800d440:	b570      	push	{r4, r5, r6, lr}
 800d442:	4604      	mov	r4, r0
 800d444:	460d      	mov	r5, r1
 800d446:	ec45 4b10 	vmov	d0, r4, r5
 800d44a:	4616      	mov	r6, r2
 800d44c:	f002 fc1e 	bl	800fc8c <__ulp>
 800d450:	ec51 0b10 	vmov	r0, r1, d0
 800d454:	b17e      	cbz	r6, 800d476 <sulp+0x36>
 800d456:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d45a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d45e:	2b00      	cmp	r3, #0
 800d460:	dd09      	ble.n	800d476 <sulp+0x36>
 800d462:	051b      	lsls	r3, r3, #20
 800d464:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d468:	2400      	movs	r4, #0
 800d46a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d46e:	4622      	mov	r2, r4
 800d470:	462b      	mov	r3, r5
 800d472:	f7f3 f8c9 	bl	8000608 <__aeabi_dmul>
 800d476:	bd70      	pop	{r4, r5, r6, pc}

0800d478 <_strtod_l>:
 800d478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d47c:	ed2d 8b02 	vpush	{d8}
 800d480:	b09d      	sub	sp, #116	; 0x74
 800d482:	461f      	mov	r7, r3
 800d484:	2300      	movs	r3, #0
 800d486:	9318      	str	r3, [sp, #96]	; 0x60
 800d488:	4ba2      	ldr	r3, [pc, #648]	; (800d714 <_strtod_l+0x29c>)
 800d48a:	9213      	str	r2, [sp, #76]	; 0x4c
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	9305      	str	r3, [sp, #20]
 800d490:	4604      	mov	r4, r0
 800d492:	4618      	mov	r0, r3
 800d494:	4688      	mov	r8, r1
 800d496:	f7f2 fea3 	bl	80001e0 <strlen>
 800d49a:	f04f 0a00 	mov.w	sl, #0
 800d49e:	4605      	mov	r5, r0
 800d4a0:	f04f 0b00 	mov.w	fp, #0
 800d4a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d4a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4aa:	781a      	ldrb	r2, [r3, #0]
 800d4ac:	2a2b      	cmp	r2, #43	; 0x2b
 800d4ae:	d04e      	beq.n	800d54e <_strtod_l+0xd6>
 800d4b0:	d83b      	bhi.n	800d52a <_strtod_l+0xb2>
 800d4b2:	2a0d      	cmp	r2, #13
 800d4b4:	d834      	bhi.n	800d520 <_strtod_l+0xa8>
 800d4b6:	2a08      	cmp	r2, #8
 800d4b8:	d834      	bhi.n	800d524 <_strtod_l+0xac>
 800d4ba:	2a00      	cmp	r2, #0
 800d4bc:	d03e      	beq.n	800d53c <_strtod_l+0xc4>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	930a      	str	r3, [sp, #40]	; 0x28
 800d4c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d4c4:	7833      	ldrb	r3, [r6, #0]
 800d4c6:	2b30      	cmp	r3, #48	; 0x30
 800d4c8:	f040 80b0 	bne.w	800d62c <_strtod_l+0x1b4>
 800d4cc:	7873      	ldrb	r3, [r6, #1]
 800d4ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d4d2:	2b58      	cmp	r3, #88	; 0x58
 800d4d4:	d168      	bne.n	800d5a8 <_strtod_l+0x130>
 800d4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4d8:	9301      	str	r3, [sp, #4]
 800d4da:	ab18      	add	r3, sp, #96	; 0x60
 800d4dc:	9702      	str	r7, [sp, #8]
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	4a8d      	ldr	r2, [pc, #564]	; (800d718 <_strtod_l+0x2a0>)
 800d4e2:	ab19      	add	r3, sp, #100	; 0x64
 800d4e4:	a917      	add	r1, sp, #92	; 0x5c
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	f001 fd38 	bl	800ef5c <__gethex>
 800d4ec:	f010 0707 	ands.w	r7, r0, #7
 800d4f0:	4605      	mov	r5, r0
 800d4f2:	d005      	beq.n	800d500 <_strtod_l+0x88>
 800d4f4:	2f06      	cmp	r7, #6
 800d4f6:	d12c      	bne.n	800d552 <_strtod_l+0xda>
 800d4f8:	3601      	adds	r6, #1
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	9617      	str	r6, [sp, #92]	; 0x5c
 800d4fe:	930a      	str	r3, [sp, #40]	; 0x28
 800d500:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d502:	2b00      	cmp	r3, #0
 800d504:	f040 8590 	bne.w	800e028 <_strtod_l+0xbb0>
 800d508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d50a:	b1eb      	cbz	r3, 800d548 <_strtod_l+0xd0>
 800d50c:	4652      	mov	r2, sl
 800d50e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d512:	ec43 2b10 	vmov	d0, r2, r3
 800d516:	b01d      	add	sp, #116	; 0x74
 800d518:	ecbd 8b02 	vpop	{d8}
 800d51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d520:	2a20      	cmp	r2, #32
 800d522:	d1cc      	bne.n	800d4be <_strtod_l+0x46>
 800d524:	3301      	adds	r3, #1
 800d526:	9317      	str	r3, [sp, #92]	; 0x5c
 800d528:	e7be      	b.n	800d4a8 <_strtod_l+0x30>
 800d52a:	2a2d      	cmp	r2, #45	; 0x2d
 800d52c:	d1c7      	bne.n	800d4be <_strtod_l+0x46>
 800d52e:	2201      	movs	r2, #1
 800d530:	920a      	str	r2, [sp, #40]	; 0x28
 800d532:	1c5a      	adds	r2, r3, #1
 800d534:	9217      	str	r2, [sp, #92]	; 0x5c
 800d536:	785b      	ldrb	r3, [r3, #1]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d1c2      	bne.n	800d4c2 <_strtod_l+0x4a>
 800d53c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d53e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d542:	2b00      	cmp	r3, #0
 800d544:	f040 856e 	bne.w	800e024 <_strtod_l+0xbac>
 800d548:	4652      	mov	r2, sl
 800d54a:	465b      	mov	r3, fp
 800d54c:	e7e1      	b.n	800d512 <_strtod_l+0x9a>
 800d54e:	2200      	movs	r2, #0
 800d550:	e7ee      	b.n	800d530 <_strtod_l+0xb8>
 800d552:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d554:	b13a      	cbz	r2, 800d566 <_strtod_l+0xee>
 800d556:	2135      	movs	r1, #53	; 0x35
 800d558:	a81a      	add	r0, sp, #104	; 0x68
 800d55a:	f002 fca2 	bl	800fea2 <__copybits>
 800d55e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d560:	4620      	mov	r0, r4
 800d562:	f002 f861 	bl	800f628 <_Bfree>
 800d566:	3f01      	subs	r7, #1
 800d568:	2f04      	cmp	r7, #4
 800d56a:	d806      	bhi.n	800d57a <_strtod_l+0x102>
 800d56c:	e8df f007 	tbb	[pc, r7]
 800d570:	1714030a 	.word	0x1714030a
 800d574:	0a          	.byte	0x0a
 800d575:	00          	.byte	0x00
 800d576:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d57a:	0728      	lsls	r0, r5, #28
 800d57c:	d5c0      	bpl.n	800d500 <_strtod_l+0x88>
 800d57e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d582:	e7bd      	b.n	800d500 <_strtod_l+0x88>
 800d584:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d588:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d58a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d58e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d592:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d596:	e7f0      	b.n	800d57a <_strtod_l+0x102>
 800d598:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d71c <_strtod_l+0x2a4>
 800d59c:	e7ed      	b.n	800d57a <_strtod_l+0x102>
 800d59e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d5a2:	f04f 3aff 	mov.w	sl, #4294967295
 800d5a6:	e7e8      	b.n	800d57a <_strtod_l+0x102>
 800d5a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5aa:	1c5a      	adds	r2, r3, #1
 800d5ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800d5ae:	785b      	ldrb	r3, [r3, #1]
 800d5b0:	2b30      	cmp	r3, #48	; 0x30
 800d5b2:	d0f9      	beq.n	800d5a8 <_strtod_l+0x130>
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d0a3      	beq.n	800d500 <_strtod_l+0x88>
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	f04f 0900 	mov.w	r9, #0
 800d5be:	9304      	str	r3, [sp, #16]
 800d5c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5c2:	9308      	str	r3, [sp, #32]
 800d5c4:	f8cd 901c 	str.w	r9, [sp, #28]
 800d5c8:	464f      	mov	r7, r9
 800d5ca:	220a      	movs	r2, #10
 800d5cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d5ce:	7806      	ldrb	r6, [r0, #0]
 800d5d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d5d4:	b2d9      	uxtb	r1, r3
 800d5d6:	2909      	cmp	r1, #9
 800d5d8:	d92a      	bls.n	800d630 <_strtod_l+0x1b8>
 800d5da:	9905      	ldr	r1, [sp, #20]
 800d5dc:	462a      	mov	r2, r5
 800d5de:	f002 ff0f 	bl	8010400 <strncmp>
 800d5e2:	b398      	cbz	r0, 800d64c <_strtod_l+0x1d4>
 800d5e4:	2000      	movs	r0, #0
 800d5e6:	4632      	mov	r2, r6
 800d5e8:	463d      	mov	r5, r7
 800d5ea:	9005      	str	r0, [sp, #20]
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	2a65      	cmp	r2, #101	; 0x65
 800d5f0:	d001      	beq.n	800d5f6 <_strtod_l+0x17e>
 800d5f2:	2a45      	cmp	r2, #69	; 0x45
 800d5f4:	d118      	bne.n	800d628 <_strtod_l+0x1b0>
 800d5f6:	b91d      	cbnz	r5, 800d600 <_strtod_l+0x188>
 800d5f8:	9a04      	ldr	r2, [sp, #16]
 800d5fa:	4302      	orrs	r2, r0
 800d5fc:	d09e      	beq.n	800d53c <_strtod_l+0xc4>
 800d5fe:	2500      	movs	r5, #0
 800d600:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d604:	f108 0201 	add.w	r2, r8, #1
 800d608:	9217      	str	r2, [sp, #92]	; 0x5c
 800d60a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d60e:	2a2b      	cmp	r2, #43	; 0x2b
 800d610:	d075      	beq.n	800d6fe <_strtod_l+0x286>
 800d612:	2a2d      	cmp	r2, #45	; 0x2d
 800d614:	d07b      	beq.n	800d70e <_strtod_l+0x296>
 800d616:	f04f 0c00 	mov.w	ip, #0
 800d61a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d61e:	2909      	cmp	r1, #9
 800d620:	f240 8082 	bls.w	800d728 <_strtod_l+0x2b0>
 800d624:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d628:	2600      	movs	r6, #0
 800d62a:	e09d      	b.n	800d768 <_strtod_l+0x2f0>
 800d62c:	2300      	movs	r3, #0
 800d62e:	e7c4      	b.n	800d5ba <_strtod_l+0x142>
 800d630:	2f08      	cmp	r7, #8
 800d632:	bfd8      	it	le
 800d634:	9907      	ldrle	r1, [sp, #28]
 800d636:	f100 0001 	add.w	r0, r0, #1
 800d63a:	bfda      	itte	le
 800d63c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d640:	9307      	strle	r3, [sp, #28]
 800d642:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d646:	3701      	adds	r7, #1
 800d648:	9017      	str	r0, [sp, #92]	; 0x5c
 800d64a:	e7bf      	b.n	800d5cc <_strtod_l+0x154>
 800d64c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d64e:	195a      	adds	r2, r3, r5
 800d650:	9217      	str	r2, [sp, #92]	; 0x5c
 800d652:	5d5a      	ldrb	r2, [r3, r5]
 800d654:	2f00      	cmp	r7, #0
 800d656:	d037      	beq.n	800d6c8 <_strtod_l+0x250>
 800d658:	9005      	str	r0, [sp, #20]
 800d65a:	463d      	mov	r5, r7
 800d65c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d660:	2b09      	cmp	r3, #9
 800d662:	d912      	bls.n	800d68a <_strtod_l+0x212>
 800d664:	2301      	movs	r3, #1
 800d666:	e7c2      	b.n	800d5ee <_strtod_l+0x176>
 800d668:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d66a:	1c5a      	adds	r2, r3, #1
 800d66c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d66e:	785a      	ldrb	r2, [r3, #1]
 800d670:	3001      	adds	r0, #1
 800d672:	2a30      	cmp	r2, #48	; 0x30
 800d674:	d0f8      	beq.n	800d668 <_strtod_l+0x1f0>
 800d676:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d67a:	2b08      	cmp	r3, #8
 800d67c:	f200 84d9 	bhi.w	800e032 <_strtod_l+0xbba>
 800d680:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d682:	9005      	str	r0, [sp, #20]
 800d684:	2000      	movs	r0, #0
 800d686:	9308      	str	r3, [sp, #32]
 800d688:	4605      	mov	r5, r0
 800d68a:	3a30      	subs	r2, #48	; 0x30
 800d68c:	f100 0301 	add.w	r3, r0, #1
 800d690:	d014      	beq.n	800d6bc <_strtod_l+0x244>
 800d692:	9905      	ldr	r1, [sp, #20]
 800d694:	4419      	add	r1, r3
 800d696:	9105      	str	r1, [sp, #20]
 800d698:	462b      	mov	r3, r5
 800d69a:	eb00 0e05 	add.w	lr, r0, r5
 800d69e:	210a      	movs	r1, #10
 800d6a0:	4573      	cmp	r3, lr
 800d6a2:	d113      	bne.n	800d6cc <_strtod_l+0x254>
 800d6a4:	182b      	adds	r3, r5, r0
 800d6a6:	2b08      	cmp	r3, #8
 800d6a8:	f105 0501 	add.w	r5, r5, #1
 800d6ac:	4405      	add	r5, r0
 800d6ae:	dc1c      	bgt.n	800d6ea <_strtod_l+0x272>
 800d6b0:	9907      	ldr	r1, [sp, #28]
 800d6b2:	230a      	movs	r3, #10
 800d6b4:	fb03 2301 	mla	r3, r3, r1, r2
 800d6b8:	9307      	str	r3, [sp, #28]
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d6be:	1c51      	adds	r1, r2, #1
 800d6c0:	9117      	str	r1, [sp, #92]	; 0x5c
 800d6c2:	7852      	ldrb	r2, [r2, #1]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	e7c9      	b.n	800d65c <_strtod_l+0x1e4>
 800d6c8:	4638      	mov	r0, r7
 800d6ca:	e7d2      	b.n	800d672 <_strtod_l+0x1fa>
 800d6cc:	2b08      	cmp	r3, #8
 800d6ce:	dc04      	bgt.n	800d6da <_strtod_l+0x262>
 800d6d0:	9e07      	ldr	r6, [sp, #28]
 800d6d2:	434e      	muls	r6, r1
 800d6d4:	9607      	str	r6, [sp, #28]
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	e7e2      	b.n	800d6a0 <_strtod_l+0x228>
 800d6da:	f103 0c01 	add.w	ip, r3, #1
 800d6de:	f1bc 0f10 	cmp.w	ip, #16
 800d6e2:	bfd8      	it	le
 800d6e4:	fb01 f909 	mulle.w	r9, r1, r9
 800d6e8:	e7f5      	b.n	800d6d6 <_strtod_l+0x25e>
 800d6ea:	2d10      	cmp	r5, #16
 800d6ec:	bfdc      	itt	le
 800d6ee:	230a      	movle	r3, #10
 800d6f0:	fb03 2909 	mlale	r9, r3, r9, r2
 800d6f4:	e7e1      	b.n	800d6ba <_strtod_l+0x242>
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	9305      	str	r3, [sp, #20]
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	e77c      	b.n	800d5f8 <_strtod_l+0x180>
 800d6fe:	f04f 0c00 	mov.w	ip, #0
 800d702:	f108 0202 	add.w	r2, r8, #2
 800d706:	9217      	str	r2, [sp, #92]	; 0x5c
 800d708:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d70c:	e785      	b.n	800d61a <_strtod_l+0x1a2>
 800d70e:	f04f 0c01 	mov.w	ip, #1
 800d712:	e7f6      	b.n	800d702 <_strtod_l+0x28a>
 800d714:	08011528 	.word	0x08011528
 800d718:	080112e0 	.word	0x080112e0
 800d71c:	7ff00000 	.word	0x7ff00000
 800d720:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d722:	1c51      	adds	r1, r2, #1
 800d724:	9117      	str	r1, [sp, #92]	; 0x5c
 800d726:	7852      	ldrb	r2, [r2, #1]
 800d728:	2a30      	cmp	r2, #48	; 0x30
 800d72a:	d0f9      	beq.n	800d720 <_strtod_l+0x2a8>
 800d72c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d730:	2908      	cmp	r1, #8
 800d732:	f63f af79 	bhi.w	800d628 <_strtod_l+0x1b0>
 800d736:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d73a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d73c:	9206      	str	r2, [sp, #24]
 800d73e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d740:	1c51      	adds	r1, r2, #1
 800d742:	9117      	str	r1, [sp, #92]	; 0x5c
 800d744:	7852      	ldrb	r2, [r2, #1]
 800d746:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d74a:	2e09      	cmp	r6, #9
 800d74c:	d937      	bls.n	800d7be <_strtod_l+0x346>
 800d74e:	9e06      	ldr	r6, [sp, #24]
 800d750:	1b89      	subs	r1, r1, r6
 800d752:	2908      	cmp	r1, #8
 800d754:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d758:	dc02      	bgt.n	800d760 <_strtod_l+0x2e8>
 800d75a:	4576      	cmp	r6, lr
 800d75c:	bfa8      	it	ge
 800d75e:	4676      	movge	r6, lr
 800d760:	f1bc 0f00 	cmp.w	ip, #0
 800d764:	d000      	beq.n	800d768 <_strtod_l+0x2f0>
 800d766:	4276      	negs	r6, r6
 800d768:	2d00      	cmp	r5, #0
 800d76a:	d14d      	bne.n	800d808 <_strtod_l+0x390>
 800d76c:	9904      	ldr	r1, [sp, #16]
 800d76e:	4301      	orrs	r1, r0
 800d770:	f47f aec6 	bne.w	800d500 <_strtod_l+0x88>
 800d774:	2b00      	cmp	r3, #0
 800d776:	f47f aee1 	bne.w	800d53c <_strtod_l+0xc4>
 800d77a:	2a69      	cmp	r2, #105	; 0x69
 800d77c:	d027      	beq.n	800d7ce <_strtod_l+0x356>
 800d77e:	dc24      	bgt.n	800d7ca <_strtod_l+0x352>
 800d780:	2a49      	cmp	r2, #73	; 0x49
 800d782:	d024      	beq.n	800d7ce <_strtod_l+0x356>
 800d784:	2a4e      	cmp	r2, #78	; 0x4e
 800d786:	f47f aed9 	bne.w	800d53c <_strtod_l+0xc4>
 800d78a:	499f      	ldr	r1, [pc, #636]	; (800da08 <_strtod_l+0x590>)
 800d78c:	a817      	add	r0, sp, #92	; 0x5c
 800d78e:	f001 fe3d 	bl	800f40c <__match>
 800d792:	2800      	cmp	r0, #0
 800d794:	f43f aed2 	beq.w	800d53c <_strtod_l+0xc4>
 800d798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	2b28      	cmp	r3, #40	; 0x28
 800d79e:	d12d      	bne.n	800d7fc <_strtod_l+0x384>
 800d7a0:	499a      	ldr	r1, [pc, #616]	; (800da0c <_strtod_l+0x594>)
 800d7a2:	aa1a      	add	r2, sp, #104	; 0x68
 800d7a4:	a817      	add	r0, sp, #92	; 0x5c
 800d7a6:	f001 fe45 	bl	800f434 <__hexnan>
 800d7aa:	2805      	cmp	r0, #5
 800d7ac:	d126      	bne.n	800d7fc <_strtod_l+0x384>
 800d7ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d7b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d7b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d7b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d7bc:	e6a0      	b.n	800d500 <_strtod_l+0x88>
 800d7be:	210a      	movs	r1, #10
 800d7c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d7c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d7c8:	e7b9      	b.n	800d73e <_strtod_l+0x2c6>
 800d7ca:	2a6e      	cmp	r2, #110	; 0x6e
 800d7cc:	e7db      	b.n	800d786 <_strtod_l+0x30e>
 800d7ce:	4990      	ldr	r1, [pc, #576]	; (800da10 <_strtod_l+0x598>)
 800d7d0:	a817      	add	r0, sp, #92	; 0x5c
 800d7d2:	f001 fe1b 	bl	800f40c <__match>
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	f43f aeb0 	beq.w	800d53c <_strtod_l+0xc4>
 800d7dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7de:	498d      	ldr	r1, [pc, #564]	; (800da14 <_strtod_l+0x59c>)
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	a817      	add	r0, sp, #92	; 0x5c
 800d7e4:	9317      	str	r3, [sp, #92]	; 0x5c
 800d7e6:	f001 fe11 	bl	800f40c <__match>
 800d7ea:	b910      	cbnz	r0, 800d7f2 <_strtod_l+0x37a>
 800d7ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	9317      	str	r3, [sp, #92]	; 0x5c
 800d7f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800da24 <_strtod_l+0x5ac>
 800d7f6:	f04f 0a00 	mov.w	sl, #0
 800d7fa:	e681      	b.n	800d500 <_strtod_l+0x88>
 800d7fc:	4886      	ldr	r0, [pc, #536]	; (800da18 <_strtod_l+0x5a0>)
 800d7fe:	f002 fde7 	bl	80103d0 <nan>
 800d802:	ec5b ab10 	vmov	sl, fp, d0
 800d806:	e67b      	b.n	800d500 <_strtod_l+0x88>
 800d808:	9b05      	ldr	r3, [sp, #20]
 800d80a:	9807      	ldr	r0, [sp, #28]
 800d80c:	1af3      	subs	r3, r6, r3
 800d80e:	2f00      	cmp	r7, #0
 800d810:	bf08      	it	eq
 800d812:	462f      	moveq	r7, r5
 800d814:	2d10      	cmp	r5, #16
 800d816:	9306      	str	r3, [sp, #24]
 800d818:	46a8      	mov	r8, r5
 800d81a:	bfa8      	it	ge
 800d81c:	f04f 0810 	movge.w	r8, #16
 800d820:	f7f2 fe78 	bl	8000514 <__aeabi_ui2d>
 800d824:	2d09      	cmp	r5, #9
 800d826:	4682      	mov	sl, r0
 800d828:	468b      	mov	fp, r1
 800d82a:	dd13      	ble.n	800d854 <_strtod_l+0x3dc>
 800d82c:	4b7b      	ldr	r3, [pc, #492]	; (800da1c <_strtod_l+0x5a4>)
 800d82e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d832:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d836:	f7f2 fee7 	bl	8000608 <__aeabi_dmul>
 800d83a:	4682      	mov	sl, r0
 800d83c:	4648      	mov	r0, r9
 800d83e:	468b      	mov	fp, r1
 800d840:	f7f2 fe68 	bl	8000514 <__aeabi_ui2d>
 800d844:	4602      	mov	r2, r0
 800d846:	460b      	mov	r3, r1
 800d848:	4650      	mov	r0, sl
 800d84a:	4659      	mov	r1, fp
 800d84c:	f7f2 fd26 	bl	800029c <__adddf3>
 800d850:	4682      	mov	sl, r0
 800d852:	468b      	mov	fp, r1
 800d854:	2d0f      	cmp	r5, #15
 800d856:	dc38      	bgt.n	800d8ca <_strtod_l+0x452>
 800d858:	9b06      	ldr	r3, [sp, #24]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	f43f ae50 	beq.w	800d500 <_strtod_l+0x88>
 800d860:	dd24      	ble.n	800d8ac <_strtod_l+0x434>
 800d862:	2b16      	cmp	r3, #22
 800d864:	dc0b      	bgt.n	800d87e <_strtod_l+0x406>
 800d866:	496d      	ldr	r1, [pc, #436]	; (800da1c <_strtod_l+0x5a4>)
 800d868:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d86c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d870:	4652      	mov	r2, sl
 800d872:	465b      	mov	r3, fp
 800d874:	f7f2 fec8 	bl	8000608 <__aeabi_dmul>
 800d878:	4682      	mov	sl, r0
 800d87a:	468b      	mov	fp, r1
 800d87c:	e640      	b.n	800d500 <_strtod_l+0x88>
 800d87e:	9a06      	ldr	r2, [sp, #24]
 800d880:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d884:	4293      	cmp	r3, r2
 800d886:	db20      	blt.n	800d8ca <_strtod_l+0x452>
 800d888:	4c64      	ldr	r4, [pc, #400]	; (800da1c <_strtod_l+0x5a4>)
 800d88a:	f1c5 050f 	rsb	r5, r5, #15
 800d88e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d892:	4652      	mov	r2, sl
 800d894:	465b      	mov	r3, fp
 800d896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d89a:	f7f2 feb5 	bl	8000608 <__aeabi_dmul>
 800d89e:	9b06      	ldr	r3, [sp, #24]
 800d8a0:	1b5d      	subs	r5, r3, r5
 800d8a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d8a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d8aa:	e7e3      	b.n	800d874 <_strtod_l+0x3fc>
 800d8ac:	9b06      	ldr	r3, [sp, #24]
 800d8ae:	3316      	adds	r3, #22
 800d8b0:	db0b      	blt.n	800d8ca <_strtod_l+0x452>
 800d8b2:	9b05      	ldr	r3, [sp, #20]
 800d8b4:	1b9e      	subs	r6, r3, r6
 800d8b6:	4b59      	ldr	r3, [pc, #356]	; (800da1c <_strtod_l+0x5a4>)
 800d8b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d8bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d8c0:	4650      	mov	r0, sl
 800d8c2:	4659      	mov	r1, fp
 800d8c4:	f7f2 ffca 	bl	800085c <__aeabi_ddiv>
 800d8c8:	e7d6      	b.n	800d878 <_strtod_l+0x400>
 800d8ca:	9b06      	ldr	r3, [sp, #24]
 800d8cc:	eba5 0808 	sub.w	r8, r5, r8
 800d8d0:	4498      	add	r8, r3
 800d8d2:	f1b8 0f00 	cmp.w	r8, #0
 800d8d6:	dd74      	ble.n	800d9c2 <_strtod_l+0x54a>
 800d8d8:	f018 030f 	ands.w	r3, r8, #15
 800d8dc:	d00a      	beq.n	800d8f4 <_strtod_l+0x47c>
 800d8de:	494f      	ldr	r1, [pc, #316]	; (800da1c <_strtod_l+0x5a4>)
 800d8e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d8e4:	4652      	mov	r2, sl
 800d8e6:	465b      	mov	r3, fp
 800d8e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8ec:	f7f2 fe8c 	bl	8000608 <__aeabi_dmul>
 800d8f0:	4682      	mov	sl, r0
 800d8f2:	468b      	mov	fp, r1
 800d8f4:	f038 080f 	bics.w	r8, r8, #15
 800d8f8:	d04f      	beq.n	800d99a <_strtod_l+0x522>
 800d8fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d8fe:	dd22      	ble.n	800d946 <_strtod_l+0x4ce>
 800d900:	2500      	movs	r5, #0
 800d902:	462e      	mov	r6, r5
 800d904:	9507      	str	r5, [sp, #28]
 800d906:	9505      	str	r5, [sp, #20]
 800d908:	2322      	movs	r3, #34	; 0x22
 800d90a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800da24 <_strtod_l+0x5ac>
 800d90e:	6023      	str	r3, [r4, #0]
 800d910:	f04f 0a00 	mov.w	sl, #0
 800d914:	9b07      	ldr	r3, [sp, #28]
 800d916:	2b00      	cmp	r3, #0
 800d918:	f43f adf2 	beq.w	800d500 <_strtod_l+0x88>
 800d91c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d91e:	4620      	mov	r0, r4
 800d920:	f001 fe82 	bl	800f628 <_Bfree>
 800d924:	9905      	ldr	r1, [sp, #20]
 800d926:	4620      	mov	r0, r4
 800d928:	f001 fe7e 	bl	800f628 <_Bfree>
 800d92c:	4631      	mov	r1, r6
 800d92e:	4620      	mov	r0, r4
 800d930:	f001 fe7a 	bl	800f628 <_Bfree>
 800d934:	9907      	ldr	r1, [sp, #28]
 800d936:	4620      	mov	r0, r4
 800d938:	f001 fe76 	bl	800f628 <_Bfree>
 800d93c:	4629      	mov	r1, r5
 800d93e:	4620      	mov	r0, r4
 800d940:	f001 fe72 	bl	800f628 <_Bfree>
 800d944:	e5dc      	b.n	800d500 <_strtod_l+0x88>
 800d946:	4b36      	ldr	r3, [pc, #216]	; (800da20 <_strtod_l+0x5a8>)
 800d948:	9304      	str	r3, [sp, #16]
 800d94a:	2300      	movs	r3, #0
 800d94c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d950:	4650      	mov	r0, sl
 800d952:	4659      	mov	r1, fp
 800d954:	4699      	mov	r9, r3
 800d956:	f1b8 0f01 	cmp.w	r8, #1
 800d95a:	dc21      	bgt.n	800d9a0 <_strtod_l+0x528>
 800d95c:	b10b      	cbz	r3, 800d962 <_strtod_l+0x4ea>
 800d95e:	4682      	mov	sl, r0
 800d960:	468b      	mov	fp, r1
 800d962:	4b2f      	ldr	r3, [pc, #188]	; (800da20 <_strtod_l+0x5a8>)
 800d964:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d968:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d96c:	4652      	mov	r2, sl
 800d96e:	465b      	mov	r3, fp
 800d970:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d974:	f7f2 fe48 	bl	8000608 <__aeabi_dmul>
 800d978:	4b2a      	ldr	r3, [pc, #168]	; (800da24 <_strtod_l+0x5ac>)
 800d97a:	460a      	mov	r2, r1
 800d97c:	400b      	ands	r3, r1
 800d97e:	492a      	ldr	r1, [pc, #168]	; (800da28 <_strtod_l+0x5b0>)
 800d980:	428b      	cmp	r3, r1
 800d982:	4682      	mov	sl, r0
 800d984:	d8bc      	bhi.n	800d900 <_strtod_l+0x488>
 800d986:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d98a:	428b      	cmp	r3, r1
 800d98c:	bf86      	itte	hi
 800d98e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800da2c <_strtod_l+0x5b4>
 800d992:	f04f 3aff 	movhi.w	sl, #4294967295
 800d996:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d99a:	2300      	movs	r3, #0
 800d99c:	9304      	str	r3, [sp, #16]
 800d99e:	e084      	b.n	800daaa <_strtod_l+0x632>
 800d9a0:	f018 0f01 	tst.w	r8, #1
 800d9a4:	d005      	beq.n	800d9b2 <_strtod_l+0x53a>
 800d9a6:	9b04      	ldr	r3, [sp, #16]
 800d9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ac:	f7f2 fe2c 	bl	8000608 <__aeabi_dmul>
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	9a04      	ldr	r2, [sp, #16]
 800d9b4:	3208      	adds	r2, #8
 800d9b6:	f109 0901 	add.w	r9, r9, #1
 800d9ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d9be:	9204      	str	r2, [sp, #16]
 800d9c0:	e7c9      	b.n	800d956 <_strtod_l+0x4de>
 800d9c2:	d0ea      	beq.n	800d99a <_strtod_l+0x522>
 800d9c4:	f1c8 0800 	rsb	r8, r8, #0
 800d9c8:	f018 020f 	ands.w	r2, r8, #15
 800d9cc:	d00a      	beq.n	800d9e4 <_strtod_l+0x56c>
 800d9ce:	4b13      	ldr	r3, [pc, #76]	; (800da1c <_strtod_l+0x5a4>)
 800d9d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9d4:	4650      	mov	r0, sl
 800d9d6:	4659      	mov	r1, fp
 800d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9dc:	f7f2 ff3e 	bl	800085c <__aeabi_ddiv>
 800d9e0:	4682      	mov	sl, r0
 800d9e2:	468b      	mov	fp, r1
 800d9e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d9e8:	d0d7      	beq.n	800d99a <_strtod_l+0x522>
 800d9ea:	f1b8 0f1f 	cmp.w	r8, #31
 800d9ee:	dd1f      	ble.n	800da30 <_strtod_l+0x5b8>
 800d9f0:	2500      	movs	r5, #0
 800d9f2:	462e      	mov	r6, r5
 800d9f4:	9507      	str	r5, [sp, #28]
 800d9f6:	9505      	str	r5, [sp, #20]
 800d9f8:	2322      	movs	r3, #34	; 0x22
 800d9fa:	f04f 0a00 	mov.w	sl, #0
 800d9fe:	f04f 0b00 	mov.w	fp, #0
 800da02:	6023      	str	r3, [r4, #0]
 800da04:	e786      	b.n	800d914 <_strtod_l+0x49c>
 800da06:	bf00      	nop
 800da08:	080112b1 	.word	0x080112b1
 800da0c:	080112f4 	.word	0x080112f4
 800da10:	080112a9 	.word	0x080112a9
 800da14:	08011434 	.word	0x08011434
 800da18:	080116e0 	.word	0x080116e0
 800da1c:	080115c0 	.word	0x080115c0
 800da20:	08011598 	.word	0x08011598
 800da24:	7ff00000 	.word	0x7ff00000
 800da28:	7ca00000 	.word	0x7ca00000
 800da2c:	7fefffff 	.word	0x7fefffff
 800da30:	f018 0310 	ands.w	r3, r8, #16
 800da34:	bf18      	it	ne
 800da36:	236a      	movne	r3, #106	; 0x6a
 800da38:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800dde8 <_strtod_l+0x970>
 800da3c:	9304      	str	r3, [sp, #16]
 800da3e:	4650      	mov	r0, sl
 800da40:	4659      	mov	r1, fp
 800da42:	2300      	movs	r3, #0
 800da44:	f018 0f01 	tst.w	r8, #1
 800da48:	d004      	beq.n	800da54 <_strtod_l+0x5dc>
 800da4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800da4e:	f7f2 fddb 	bl	8000608 <__aeabi_dmul>
 800da52:	2301      	movs	r3, #1
 800da54:	ea5f 0868 	movs.w	r8, r8, asr #1
 800da58:	f109 0908 	add.w	r9, r9, #8
 800da5c:	d1f2      	bne.n	800da44 <_strtod_l+0x5cc>
 800da5e:	b10b      	cbz	r3, 800da64 <_strtod_l+0x5ec>
 800da60:	4682      	mov	sl, r0
 800da62:	468b      	mov	fp, r1
 800da64:	9b04      	ldr	r3, [sp, #16]
 800da66:	b1c3      	cbz	r3, 800da9a <_strtod_l+0x622>
 800da68:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800da6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800da70:	2b00      	cmp	r3, #0
 800da72:	4659      	mov	r1, fp
 800da74:	dd11      	ble.n	800da9a <_strtod_l+0x622>
 800da76:	2b1f      	cmp	r3, #31
 800da78:	f340 8124 	ble.w	800dcc4 <_strtod_l+0x84c>
 800da7c:	2b34      	cmp	r3, #52	; 0x34
 800da7e:	bfde      	ittt	le
 800da80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800da84:	f04f 33ff 	movle.w	r3, #4294967295
 800da88:	fa03 f202 	lslle.w	r2, r3, r2
 800da8c:	f04f 0a00 	mov.w	sl, #0
 800da90:	bfcc      	ite	gt
 800da92:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800da96:	ea02 0b01 	andle.w	fp, r2, r1
 800da9a:	2200      	movs	r2, #0
 800da9c:	2300      	movs	r3, #0
 800da9e:	4650      	mov	r0, sl
 800daa0:	4659      	mov	r1, fp
 800daa2:	f7f3 f819 	bl	8000ad8 <__aeabi_dcmpeq>
 800daa6:	2800      	cmp	r0, #0
 800daa8:	d1a2      	bne.n	800d9f0 <_strtod_l+0x578>
 800daaa:	9b07      	ldr	r3, [sp, #28]
 800daac:	9300      	str	r3, [sp, #0]
 800daae:	9908      	ldr	r1, [sp, #32]
 800dab0:	462b      	mov	r3, r5
 800dab2:	463a      	mov	r2, r7
 800dab4:	4620      	mov	r0, r4
 800dab6:	f001 fe1f 	bl	800f6f8 <__s2b>
 800daba:	9007      	str	r0, [sp, #28]
 800dabc:	2800      	cmp	r0, #0
 800dabe:	f43f af1f 	beq.w	800d900 <_strtod_l+0x488>
 800dac2:	9b05      	ldr	r3, [sp, #20]
 800dac4:	1b9e      	subs	r6, r3, r6
 800dac6:	9b06      	ldr	r3, [sp, #24]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	bfb4      	ite	lt
 800dacc:	4633      	movlt	r3, r6
 800dace:	2300      	movge	r3, #0
 800dad0:	930c      	str	r3, [sp, #48]	; 0x30
 800dad2:	9b06      	ldr	r3, [sp, #24]
 800dad4:	2500      	movs	r5, #0
 800dad6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dada:	9312      	str	r3, [sp, #72]	; 0x48
 800dadc:	462e      	mov	r6, r5
 800dade:	9b07      	ldr	r3, [sp, #28]
 800dae0:	4620      	mov	r0, r4
 800dae2:	6859      	ldr	r1, [r3, #4]
 800dae4:	f001 fd60 	bl	800f5a8 <_Balloc>
 800dae8:	9005      	str	r0, [sp, #20]
 800daea:	2800      	cmp	r0, #0
 800daec:	f43f af0c 	beq.w	800d908 <_strtod_l+0x490>
 800daf0:	9b07      	ldr	r3, [sp, #28]
 800daf2:	691a      	ldr	r2, [r3, #16]
 800daf4:	3202      	adds	r2, #2
 800daf6:	f103 010c 	add.w	r1, r3, #12
 800dafa:	0092      	lsls	r2, r2, #2
 800dafc:	300c      	adds	r0, #12
 800dafe:	f7fe fde9 	bl	800c6d4 <memcpy>
 800db02:	ec4b ab10 	vmov	d0, sl, fp
 800db06:	aa1a      	add	r2, sp, #104	; 0x68
 800db08:	a919      	add	r1, sp, #100	; 0x64
 800db0a:	4620      	mov	r0, r4
 800db0c:	f002 f93a 	bl	800fd84 <__d2b>
 800db10:	ec4b ab18 	vmov	d8, sl, fp
 800db14:	9018      	str	r0, [sp, #96]	; 0x60
 800db16:	2800      	cmp	r0, #0
 800db18:	f43f aef6 	beq.w	800d908 <_strtod_l+0x490>
 800db1c:	2101      	movs	r1, #1
 800db1e:	4620      	mov	r0, r4
 800db20:	f001 fe84 	bl	800f82c <__i2b>
 800db24:	4606      	mov	r6, r0
 800db26:	2800      	cmp	r0, #0
 800db28:	f43f aeee 	beq.w	800d908 <_strtod_l+0x490>
 800db2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800db2e:	9904      	ldr	r1, [sp, #16]
 800db30:	2b00      	cmp	r3, #0
 800db32:	bfab      	itete	ge
 800db34:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800db36:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800db38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800db3a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800db3e:	bfac      	ite	ge
 800db40:	eb03 0902 	addge.w	r9, r3, r2
 800db44:	1ad7      	sublt	r7, r2, r3
 800db46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800db48:	eba3 0801 	sub.w	r8, r3, r1
 800db4c:	4490      	add	r8, r2
 800db4e:	4ba1      	ldr	r3, [pc, #644]	; (800ddd4 <_strtod_l+0x95c>)
 800db50:	f108 38ff 	add.w	r8, r8, #4294967295
 800db54:	4598      	cmp	r8, r3
 800db56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800db5a:	f280 80c7 	bge.w	800dcec <_strtod_l+0x874>
 800db5e:	eba3 0308 	sub.w	r3, r3, r8
 800db62:	2b1f      	cmp	r3, #31
 800db64:	eba2 0203 	sub.w	r2, r2, r3
 800db68:	f04f 0101 	mov.w	r1, #1
 800db6c:	f300 80b1 	bgt.w	800dcd2 <_strtod_l+0x85a>
 800db70:	fa01 f303 	lsl.w	r3, r1, r3
 800db74:	930d      	str	r3, [sp, #52]	; 0x34
 800db76:	2300      	movs	r3, #0
 800db78:	9308      	str	r3, [sp, #32]
 800db7a:	eb09 0802 	add.w	r8, r9, r2
 800db7e:	9b04      	ldr	r3, [sp, #16]
 800db80:	45c1      	cmp	r9, r8
 800db82:	4417      	add	r7, r2
 800db84:	441f      	add	r7, r3
 800db86:	464b      	mov	r3, r9
 800db88:	bfa8      	it	ge
 800db8a:	4643      	movge	r3, r8
 800db8c:	42bb      	cmp	r3, r7
 800db8e:	bfa8      	it	ge
 800db90:	463b      	movge	r3, r7
 800db92:	2b00      	cmp	r3, #0
 800db94:	bfc2      	ittt	gt
 800db96:	eba8 0803 	subgt.w	r8, r8, r3
 800db9a:	1aff      	subgt	r7, r7, r3
 800db9c:	eba9 0903 	subgt.w	r9, r9, r3
 800dba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	dd17      	ble.n	800dbd6 <_strtod_l+0x75e>
 800dba6:	4631      	mov	r1, r6
 800dba8:	461a      	mov	r2, r3
 800dbaa:	4620      	mov	r0, r4
 800dbac:	f001 fefe 	bl	800f9ac <__pow5mult>
 800dbb0:	4606      	mov	r6, r0
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	f43f aea8 	beq.w	800d908 <_strtod_l+0x490>
 800dbb8:	4601      	mov	r1, r0
 800dbba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	f001 fe4b 	bl	800f858 <__multiply>
 800dbc2:	900b      	str	r0, [sp, #44]	; 0x2c
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	f43f ae9f 	beq.w	800d908 <_strtod_l+0x490>
 800dbca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dbcc:	4620      	mov	r0, r4
 800dbce:	f001 fd2b 	bl	800f628 <_Bfree>
 800dbd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbd4:	9318      	str	r3, [sp, #96]	; 0x60
 800dbd6:	f1b8 0f00 	cmp.w	r8, #0
 800dbda:	f300 808c 	bgt.w	800dcf6 <_strtod_l+0x87e>
 800dbde:	9b06      	ldr	r3, [sp, #24]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	dd08      	ble.n	800dbf6 <_strtod_l+0x77e>
 800dbe4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dbe6:	9905      	ldr	r1, [sp, #20]
 800dbe8:	4620      	mov	r0, r4
 800dbea:	f001 fedf 	bl	800f9ac <__pow5mult>
 800dbee:	9005      	str	r0, [sp, #20]
 800dbf0:	2800      	cmp	r0, #0
 800dbf2:	f43f ae89 	beq.w	800d908 <_strtod_l+0x490>
 800dbf6:	2f00      	cmp	r7, #0
 800dbf8:	dd08      	ble.n	800dc0c <_strtod_l+0x794>
 800dbfa:	9905      	ldr	r1, [sp, #20]
 800dbfc:	463a      	mov	r2, r7
 800dbfe:	4620      	mov	r0, r4
 800dc00:	f001 ff2e 	bl	800fa60 <__lshift>
 800dc04:	9005      	str	r0, [sp, #20]
 800dc06:	2800      	cmp	r0, #0
 800dc08:	f43f ae7e 	beq.w	800d908 <_strtod_l+0x490>
 800dc0c:	f1b9 0f00 	cmp.w	r9, #0
 800dc10:	dd08      	ble.n	800dc24 <_strtod_l+0x7ac>
 800dc12:	4631      	mov	r1, r6
 800dc14:	464a      	mov	r2, r9
 800dc16:	4620      	mov	r0, r4
 800dc18:	f001 ff22 	bl	800fa60 <__lshift>
 800dc1c:	4606      	mov	r6, r0
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	f43f ae72 	beq.w	800d908 <_strtod_l+0x490>
 800dc24:	9a05      	ldr	r2, [sp, #20]
 800dc26:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dc28:	4620      	mov	r0, r4
 800dc2a:	f001 ffa5 	bl	800fb78 <__mdiff>
 800dc2e:	4605      	mov	r5, r0
 800dc30:	2800      	cmp	r0, #0
 800dc32:	f43f ae69 	beq.w	800d908 <_strtod_l+0x490>
 800dc36:	68c3      	ldr	r3, [r0, #12]
 800dc38:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	60c3      	str	r3, [r0, #12]
 800dc3e:	4631      	mov	r1, r6
 800dc40:	f001 ff7e 	bl	800fb40 <__mcmp>
 800dc44:	2800      	cmp	r0, #0
 800dc46:	da60      	bge.n	800dd0a <_strtod_l+0x892>
 800dc48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc4a:	ea53 030a 	orrs.w	r3, r3, sl
 800dc4e:	f040 8082 	bne.w	800dd56 <_strtod_l+0x8de>
 800dc52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d17d      	bne.n	800dd56 <_strtod_l+0x8de>
 800dc5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc5e:	0d1b      	lsrs	r3, r3, #20
 800dc60:	051b      	lsls	r3, r3, #20
 800dc62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dc66:	d976      	bls.n	800dd56 <_strtod_l+0x8de>
 800dc68:	696b      	ldr	r3, [r5, #20]
 800dc6a:	b913      	cbnz	r3, 800dc72 <_strtod_l+0x7fa>
 800dc6c:	692b      	ldr	r3, [r5, #16]
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	dd71      	ble.n	800dd56 <_strtod_l+0x8de>
 800dc72:	4629      	mov	r1, r5
 800dc74:	2201      	movs	r2, #1
 800dc76:	4620      	mov	r0, r4
 800dc78:	f001 fef2 	bl	800fa60 <__lshift>
 800dc7c:	4631      	mov	r1, r6
 800dc7e:	4605      	mov	r5, r0
 800dc80:	f001 ff5e 	bl	800fb40 <__mcmp>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	dd66      	ble.n	800dd56 <_strtod_l+0x8de>
 800dc88:	9904      	ldr	r1, [sp, #16]
 800dc8a:	4a53      	ldr	r2, [pc, #332]	; (800ddd8 <_strtod_l+0x960>)
 800dc8c:	465b      	mov	r3, fp
 800dc8e:	2900      	cmp	r1, #0
 800dc90:	f000 8081 	beq.w	800dd96 <_strtod_l+0x91e>
 800dc94:	ea02 010b 	and.w	r1, r2, fp
 800dc98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dc9c:	dc7b      	bgt.n	800dd96 <_strtod_l+0x91e>
 800dc9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dca2:	f77f aea9 	ble.w	800d9f8 <_strtod_l+0x580>
 800dca6:	4b4d      	ldr	r3, [pc, #308]	; (800dddc <_strtod_l+0x964>)
 800dca8:	4650      	mov	r0, sl
 800dcaa:	4659      	mov	r1, fp
 800dcac:	2200      	movs	r2, #0
 800dcae:	f7f2 fcab 	bl	8000608 <__aeabi_dmul>
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	4303      	orrs	r3, r0
 800dcb6:	bf08      	it	eq
 800dcb8:	2322      	moveq	r3, #34	; 0x22
 800dcba:	4682      	mov	sl, r0
 800dcbc:	468b      	mov	fp, r1
 800dcbe:	bf08      	it	eq
 800dcc0:	6023      	streq	r3, [r4, #0]
 800dcc2:	e62b      	b.n	800d91c <_strtod_l+0x4a4>
 800dcc4:	f04f 32ff 	mov.w	r2, #4294967295
 800dcc8:	fa02 f303 	lsl.w	r3, r2, r3
 800dccc:	ea03 0a0a 	and.w	sl, r3, sl
 800dcd0:	e6e3      	b.n	800da9a <_strtod_l+0x622>
 800dcd2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800dcd6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800dcda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800dcde:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800dce2:	fa01 f308 	lsl.w	r3, r1, r8
 800dce6:	9308      	str	r3, [sp, #32]
 800dce8:	910d      	str	r1, [sp, #52]	; 0x34
 800dcea:	e746      	b.n	800db7a <_strtod_l+0x702>
 800dcec:	2300      	movs	r3, #0
 800dcee:	9308      	str	r3, [sp, #32]
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	930d      	str	r3, [sp, #52]	; 0x34
 800dcf4:	e741      	b.n	800db7a <_strtod_l+0x702>
 800dcf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dcf8:	4642      	mov	r2, r8
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	f001 feb0 	bl	800fa60 <__lshift>
 800dd00:	9018      	str	r0, [sp, #96]	; 0x60
 800dd02:	2800      	cmp	r0, #0
 800dd04:	f47f af6b 	bne.w	800dbde <_strtod_l+0x766>
 800dd08:	e5fe      	b.n	800d908 <_strtod_l+0x490>
 800dd0a:	465f      	mov	r7, fp
 800dd0c:	d16e      	bne.n	800ddec <_strtod_l+0x974>
 800dd0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dd10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd14:	b342      	cbz	r2, 800dd68 <_strtod_l+0x8f0>
 800dd16:	4a32      	ldr	r2, [pc, #200]	; (800dde0 <_strtod_l+0x968>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d128      	bne.n	800dd6e <_strtod_l+0x8f6>
 800dd1c:	9b04      	ldr	r3, [sp, #16]
 800dd1e:	4651      	mov	r1, sl
 800dd20:	b1eb      	cbz	r3, 800dd5e <_strtod_l+0x8e6>
 800dd22:	4b2d      	ldr	r3, [pc, #180]	; (800ddd8 <_strtod_l+0x960>)
 800dd24:	403b      	ands	r3, r7
 800dd26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dd2a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd2e:	d819      	bhi.n	800dd64 <_strtod_l+0x8ec>
 800dd30:	0d1b      	lsrs	r3, r3, #20
 800dd32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dd36:	fa02 f303 	lsl.w	r3, r2, r3
 800dd3a:	4299      	cmp	r1, r3
 800dd3c:	d117      	bne.n	800dd6e <_strtod_l+0x8f6>
 800dd3e:	4b29      	ldr	r3, [pc, #164]	; (800dde4 <_strtod_l+0x96c>)
 800dd40:	429f      	cmp	r7, r3
 800dd42:	d102      	bne.n	800dd4a <_strtod_l+0x8d2>
 800dd44:	3101      	adds	r1, #1
 800dd46:	f43f addf 	beq.w	800d908 <_strtod_l+0x490>
 800dd4a:	4b23      	ldr	r3, [pc, #140]	; (800ddd8 <_strtod_l+0x960>)
 800dd4c:	403b      	ands	r3, r7
 800dd4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dd52:	f04f 0a00 	mov.w	sl, #0
 800dd56:	9b04      	ldr	r3, [sp, #16]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d1a4      	bne.n	800dca6 <_strtod_l+0x82e>
 800dd5c:	e5de      	b.n	800d91c <_strtod_l+0x4a4>
 800dd5e:	f04f 33ff 	mov.w	r3, #4294967295
 800dd62:	e7ea      	b.n	800dd3a <_strtod_l+0x8c2>
 800dd64:	4613      	mov	r3, r2
 800dd66:	e7e8      	b.n	800dd3a <_strtod_l+0x8c2>
 800dd68:	ea53 030a 	orrs.w	r3, r3, sl
 800dd6c:	d08c      	beq.n	800dc88 <_strtod_l+0x810>
 800dd6e:	9b08      	ldr	r3, [sp, #32]
 800dd70:	b1db      	cbz	r3, 800ddaa <_strtod_l+0x932>
 800dd72:	423b      	tst	r3, r7
 800dd74:	d0ef      	beq.n	800dd56 <_strtod_l+0x8de>
 800dd76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd78:	9a04      	ldr	r2, [sp, #16]
 800dd7a:	4650      	mov	r0, sl
 800dd7c:	4659      	mov	r1, fp
 800dd7e:	b1c3      	cbz	r3, 800ddb2 <_strtod_l+0x93a>
 800dd80:	f7ff fb5e 	bl	800d440 <sulp>
 800dd84:	4602      	mov	r2, r0
 800dd86:	460b      	mov	r3, r1
 800dd88:	ec51 0b18 	vmov	r0, r1, d8
 800dd8c:	f7f2 fa86 	bl	800029c <__adddf3>
 800dd90:	4682      	mov	sl, r0
 800dd92:	468b      	mov	fp, r1
 800dd94:	e7df      	b.n	800dd56 <_strtod_l+0x8de>
 800dd96:	4013      	ands	r3, r2
 800dd98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dd9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dda0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dda4:	f04f 3aff 	mov.w	sl, #4294967295
 800dda8:	e7d5      	b.n	800dd56 <_strtod_l+0x8de>
 800ddaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ddac:	ea13 0f0a 	tst.w	r3, sl
 800ddb0:	e7e0      	b.n	800dd74 <_strtod_l+0x8fc>
 800ddb2:	f7ff fb45 	bl	800d440 <sulp>
 800ddb6:	4602      	mov	r2, r0
 800ddb8:	460b      	mov	r3, r1
 800ddba:	ec51 0b18 	vmov	r0, r1, d8
 800ddbe:	f7f2 fa6b 	bl	8000298 <__aeabi_dsub>
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	4682      	mov	sl, r0
 800ddc8:	468b      	mov	fp, r1
 800ddca:	f7f2 fe85 	bl	8000ad8 <__aeabi_dcmpeq>
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	d0c1      	beq.n	800dd56 <_strtod_l+0x8de>
 800ddd2:	e611      	b.n	800d9f8 <_strtod_l+0x580>
 800ddd4:	fffffc02 	.word	0xfffffc02
 800ddd8:	7ff00000 	.word	0x7ff00000
 800dddc:	39500000 	.word	0x39500000
 800dde0:	000fffff 	.word	0x000fffff
 800dde4:	7fefffff 	.word	0x7fefffff
 800dde8:	08011308 	.word	0x08011308
 800ddec:	4631      	mov	r1, r6
 800ddee:	4628      	mov	r0, r5
 800ddf0:	f002 f824 	bl	800fe3c <__ratio>
 800ddf4:	ec59 8b10 	vmov	r8, r9, d0
 800ddf8:	ee10 0a10 	vmov	r0, s0
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800de02:	4649      	mov	r1, r9
 800de04:	f7f2 fe7c 	bl	8000b00 <__aeabi_dcmple>
 800de08:	2800      	cmp	r0, #0
 800de0a:	d07a      	beq.n	800df02 <_strtod_l+0xa8a>
 800de0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d04a      	beq.n	800dea8 <_strtod_l+0xa30>
 800de12:	4b95      	ldr	r3, [pc, #596]	; (800e068 <_strtod_l+0xbf0>)
 800de14:	2200      	movs	r2, #0
 800de16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800de1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e068 <_strtod_l+0xbf0>
 800de1e:	f04f 0800 	mov.w	r8, #0
 800de22:	4b92      	ldr	r3, [pc, #584]	; (800e06c <_strtod_l+0xbf4>)
 800de24:	403b      	ands	r3, r7
 800de26:	930d      	str	r3, [sp, #52]	; 0x34
 800de28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de2a:	4b91      	ldr	r3, [pc, #580]	; (800e070 <_strtod_l+0xbf8>)
 800de2c:	429a      	cmp	r2, r3
 800de2e:	f040 80b0 	bne.w	800df92 <_strtod_l+0xb1a>
 800de32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800de36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800de3a:	ec4b ab10 	vmov	d0, sl, fp
 800de3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800de42:	f001 ff23 	bl	800fc8c <__ulp>
 800de46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800de4a:	ec53 2b10 	vmov	r2, r3, d0
 800de4e:	f7f2 fbdb 	bl	8000608 <__aeabi_dmul>
 800de52:	4652      	mov	r2, sl
 800de54:	465b      	mov	r3, fp
 800de56:	f7f2 fa21 	bl	800029c <__adddf3>
 800de5a:	460b      	mov	r3, r1
 800de5c:	4983      	ldr	r1, [pc, #524]	; (800e06c <_strtod_l+0xbf4>)
 800de5e:	4a85      	ldr	r2, [pc, #532]	; (800e074 <_strtod_l+0xbfc>)
 800de60:	4019      	ands	r1, r3
 800de62:	4291      	cmp	r1, r2
 800de64:	4682      	mov	sl, r0
 800de66:	d960      	bls.n	800df2a <_strtod_l+0xab2>
 800de68:	ee18 3a90 	vmov	r3, s17
 800de6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800de70:	4293      	cmp	r3, r2
 800de72:	d104      	bne.n	800de7e <_strtod_l+0xa06>
 800de74:	ee18 3a10 	vmov	r3, s16
 800de78:	3301      	adds	r3, #1
 800de7a:	f43f ad45 	beq.w	800d908 <_strtod_l+0x490>
 800de7e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800e080 <_strtod_l+0xc08>
 800de82:	f04f 3aff 	mov.w	sl, #4294967295
 800de86:	9918      	ldr	r1, [sp, #96]	; 0x60
 800de88:	4620      	mov	r0, r4
 800de8a:	f001 fbcd 	bl	800f628 <_Bfree>
 800de8e:	9905      	ldr	r1, [sp, #20]
 800de90:	4620      	mov	r0, r4
 800de92:	f001 fbc9 	bl	800f628 <_Bfree>
 800de96:	4631      	mov	r1, r6
 800de98:	4620      	mov	r0, r4
 800de9a:	f001 fbc5 	bl	800f628 <_Bfree>
 800de9e:	4629      	mov	r1, r5
 800dea0:	4620      	mov	r0, r4
 800dea2:	f001 fbc1 	bl	800f628 <_Bfree>
 800dea6:	e61a      	b.n	800dade <_strtod_l+0x666>
 800dea8:	f1ba 0f00 	cmp.w	sl, #0
 800deac:	d11b      	bne.n	800dee6 <_strtod_l+0xa6e>
 800deae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800deb2:	b9f3      	cbnz	r3, 800def2 <_strtod_l+0xa7a>
 800deb4:	4b6c      	ldr	r3, [pc, #432]	; (800e068 <_strtod_l+0xbf0>)
 800deb6:	2200      	movs	r2, #0
 800deb8:	4640      	mov	r0, r8
 800deba:	4649      	mov	r1, r9
 800debc:	f7f2 fe16 	bl	8000aec <__aeabi_dcmplt>
 800dec0:	b9d0      	cbnz	r0, 800def8 <_strtod_l+0xa80>
 800dec2:	4640      	mov	r0, r8
 800dec4:	4649      	mov	r1, r9
 800dec6:	4b6c      	ldr	r3, [pc, #432]	; (800e078 <_strtod_l+0xc00>)
 800dec8:	2200      	movs	r2, #0
 800deca:	f7f2 fb9d 	bl	8000608 <__aeabi_dmul>
 800dece:	4680      	mov	r8, r0
 800ded0:	4689      	mov	r9, r1
 800ded2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ded6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800deda:	9315      	str	r3, [sp, #84]	; 0x54
 800dedc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dee0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dee4:	e79d      	b.n	800de22 <_strtod_l+0x9aa>
 800dee6:	f1ba 0f01 	cmp.w	sl, #1
 800deea:	d102      	bne.n	800def2 <_strtod_l+0xa7a>
 800deec:	2f00      	cmp	r7, #0
 800deee:	f43f ad83 	beq.w	800d9f8 <_strtod_l+0x580>
 800def2:	4b62      	ldr	r3, [pc, #392]	; (800e07c <_strtod_l+0xc04>)
 800def4:	2200      	movs	r2, #0
 800def6:	e78e      	b.n	800de16 <_strtod_l+0x99e>
 800def8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800e078 <_strtod_l+0xc00>
 800defc:	f04f 0800 	mov.w	r8, #0
 800df00:	e7e7      	b.n	800ded2 <_strtod_l+0xa5a>
 800df02:	4b5d      	ldr	r3, [pc, #372]	; (800e078 <_strtod_l+0xc00>)
 800df04:	4640      	mov	r0, r8
 800df06:	4649      	mov	r1, r9
 800df08:	2200      	movs	r2, #0
 800df0a:	f7f2 fb7d 	bl	8000608 <__aeabi_dmul>
 800df0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df10:	4680      	mov	r8, r0
 800df12:	4689      	mov	r9, r1
 800df14:	b933      	cbnz	r3, 800df24 <_strtod_l+0xaac>
 800df16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df1a:	900e      	str	r0, [sp, #56]	; 0x38
 800df1c:	930f      	str	r3, [sp, #60]	; 0x3c
 800df1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800df22:	e7dd      	b.n	800dee0 <_strtod_l+0xa68>
 800df24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800df28:	e7f9      	b.n	800df1e <_strtod_l+0xaa6>
 800df2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800df2e:	9b04      	ldr	r3, [sp, #16]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d1a8      	bne.n	800de86 <_strtod_l+0xa0e>
 800df34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800df38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df3a:	0d1b      	lsrs	r3, r3, #20
 800df3c:	051b      	lsls	r3, r3, #20
 800df3e:	429a      	cmp	r2, r3
 800df40:	d1a1      	bne.n	800de86 <_strtod_l+0xa0e>
 800df42:	4640      	mov	r0, r8
 800df44:	4649      	mov	r1, r9
 800df46:	f7f2 febf 	bl	8000cc8 <__aeabi_d2lz>
 800df4a:	f7f2 fb2f 	bl	80005ac <__aeabi_l2d>
 800df4e:	4602      	mov	r2, r0
 800df50:	460b      	mov	r3, r1
 800df52:	4640      	mov	r0, r8
 800df54:	4649      	mov	r1, r9
 800df56:	f7f2 f99f 	bl	8000298 <__aeabi_dsub>
 800df5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df60:	ea43 030a 	orr.w	r3, r3, sl
 800df64:	4313      	orrs	r3, r2
 800df66:	4680      	mov	r8, r0
 800df68:	4689      	mov	r9, r1
 800df6a:	d055      	beq.n	800e018 <_strtod_l+0xba0>
 800df6c:	a336      	add	r3, pc, #216	; (adr r3, 800e048 <_strtod_l+0xbd0>)
 800df6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df72:	f7f2 fdbb 	bl	8000aec <__aeabi_dcmplt>
 800df76:	2800      	cmp	r0, #0
 800df78:	f47f acd0 	bne.w	800d91c <_strtod_l+0x4a4>
 800df7c:	a334      	add	r3, pc, #208	; (adr r3, 800e050 <_strtod_l+0xbd8>)
 800df7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df82:	4640      	mov	r0, r8
 800df84:	4649      	mov	r1, r9
 800df86:	f7f2 fdcf 	bl	8000b28 <__aeabi_dcmpgt>
 800df8a:	2800      	cmp	r0, #0
 800df8c:	f43f af7b 	beq.w	800de86 <_strtod_l+0xa0e>
 800df90:	e4c4      	b.n	800d91c <_strtod_l+0x4a4>
 800df92:	9b04      	ldr	r3, [sp, #16]
 800df94:	b333      	cbz	r3, 800dfe4 <_strtod_l+0xb6c>
 800df96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800df9c:	d822      	bhi.n	800dfe4 <_strtod_l+0xb6c>
 800df9e:	a32e      	add	r3, pc, #184	; (adr r3, 800e058 <_strtod_l+0xbe0>)
 800dfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa4:	4640      	mov	r0, r8
 800dfa6:	4649      	mov	r1, r9
 800dfa8:	f7f2 fdaa 	bl	8000b00 <__aeabi_dcmple>
 800dfac:	b1a0      	cbz	r0, 800dfd8 <_strtod_l+0xb60>
 800dfae:	4649      	mov	r1, r9
 800dfb0:	4640      	mov	r0, r8
 800dfb2:	f7f2 fe01 	bl	8000bb8 <__aeabi_d2uiz>
 800dfb6:	2801      	cmp	r0, #1
 800dfb8:	bf38      	it	cc
 800dfba:	2001      	movcc	r0, #1
 800dfbc:	f7f2 faaa 	bl	8000514 <__aeabi_ui2d>
 800dfc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfc2:	4680      	mov	r8, r0
 800dfc4:	4689      	mov	r9, r1
 800dfc6:	bb23      	cbnz	r3, 800e012 <_strtod_l+0xb9a>
 800dfc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dfcc:	9010      	str	r0, [sp, #64]	; 0x40
 800dfce:	9311      	str	r3, [sp, #68]	; 0x44
 800dfd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dfd4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dfd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dfdc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dfe0:	1a9b      	subs	r3, r3, r2
 800dfe2:	9309      	str	r3, [sp, #36]	; 0x24
 800dfe4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dfe8:	eeb0 0a48 	vmov.f32	s0, s16
 800dfec:	eef0 0a68 	vmov.f32	s1, s17
 800dff0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dff4:	f001 fe4a 	bl	800fc8c <__ulp>
 800dff8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dffc:	ec53 2b10 	vmov	r2, r3, d0
 800e000:	f7f2 fb02 	bl	8000608 <__aeabi_dmul>
 800e004:	ec53 2b18 	vmov	r2, r3, d8
 800e008:	f7f2 f948 	bl	800029c <__adddf3>
 800e00c:	4682      	mov	sl, r0
 800e00e:	468b      	mov	fp, r1
 800e010:	e78d      	b.n	800df2e <_strtod_l+0xab6>
 800e012:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800e016:	e7db      	b.n	800dfd0 <_strtod_l+0xb58>
 800e018:	a311      	add	r3, pc, #68	; (adr r3, 800e060 <_strtod_l+0xbe8>)
 800e01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01e:	f7f2 fd65 	bl	8000aec <__aeabi_dcmplt>
 800e022:	e7b2      	b.n	800df8a <_strtod_l+0xb12>
 800e024:	2300      	movs	r3, #0
 800e026:	930a      	str	r3, [sp, #40]	; 0x28
 800e028:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e02a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e02c:	6013      	str	r3, [r2, #0]
 800e02e:	f7ff ba6b 	b.w	800d508 <_strtod_l+0x90>
 800e032:	2a65      	cmp	r2, #101	; 0x65
 800e034:	f43f ab5f 	beq.w	800d6f6 <_strtod_l+0x27e>
 800e038:	2a45      	cmp	r2, #69	; 0x45
 800e03a:	f43f ab5c 	beq.w	800d6f6 <_strtod_l+0x27e>
 800e03e:	2301      	movs	r3, #1
 800e040:	f7ff bb94 	b.w	800d76c <_strtod_l+0x2f4>
 800e044:	f3af 8000 	nop.w
 800e048:	94a03595 	.word	0x94a03595
 800e04c:	3fdfffff 	.word	0x3fdfffff
 800e050:	35afe535 	.word	0x35afe535
 800e054:	3fe00000 	.word	0x3fe00000
 800e058:	ffc00000 	.word	0xffc00000
 800e05c:	41dfffff 	.word	0x41dfffff
 800e060:	94a03595 	.word	0x94a03595
 800e064:	3fcfffff 	.word	0x3fcfffff
 800e068:	3ff00000 	.word	0x3ff00000
 800e06c:	7ff00000 	.word	0x7ff00000
 800e070:	7fe00000 	.word	0x7fe00000
 800e074:	7c9fffff 	.word	0x7c9fffff
 800e078:	3fe00000 	.word	0x3fe00000
 800e07c:	bff00000 	.word	0xbff00000
 800e080:	7fefffff 	.word	0x7fefffff

0800e084 <_strtod_r>:
 800e084:	4b01      	ldr	r3, [pc, #4]	; (800e08c <_strtod_r+0x8>)
 800e086:	f7ff b9f7 	b.w	800d478 <_strtod_l>
 800e08a:	bf00      	nop
 800e08c:	200002bc 	.word	0x200002bc

0800e090 <_strtol_l.constprop.0>:
 800e090:	2b01      	cmp	r3, #1
 800e092:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e096:	d001      	beq.n	800e09c <_strtol_l.constprop.0+0xc>
 800e098:	2b24      	cmp	r3, #36	; 0x24
 800e09a:	d906      	bls.n	800e0aa <_strtol_l.constprop.0+0x1a>
 800e09c:	f7fe faf0 	bl	800c680 <__errno>
 800e0a0:	2316      	movs	r3, #22
 800e0a2:	6003      	str	r3, [r0, #0]
 800e0a4:	2000      	movs	r0, #0
 800e0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e190 <_strtol_l.constprop.0+0x100>
 800e0ae:	460d      	mov	r5, r1
 800e0b0:	462e      	mov	r6, r5
 800e0b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e0b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e0ba:	f017 0708 	ands.w	r7, r7, #8
 800e0be:	d1f7      	bne.n	800e0b0 <_strtol_l.constprop.0+0x20>
 800e0c0:	2c2d      	cmp	r4, #45	; 0x2d
 800e0c2:	d132      	bne.n	800e12a <_strtol_l.constprop.0+0x9a>
 800e0c4:	782c      	ldrb	r4, [r5, #0]
 800e0c6:	2701      	movs	r7, #1
 800e0c8:	1cb5      	adds	r5, r6, #2
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d05b      	beq.n	800e186 <_strtol_l.constprop.0+0xf6>
 800e0ce:	2b10      	cmp	r3, #16
 800e0d0:	d109      	bne.n	800e0e6 <_strtol_l.constprop.0+0x56>
 800e0d2:	2c30      	cmp	r4, #48	; 0x30
 800e0d4:	d107      	bne.n	800e0e6 <_strtol_l.constprop.0+0x56>
 800e0d6:	782c      	ldrb	r4, [r5, #0]
 800e0d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e0dc:	2c58      	cmp	r4, #88	; 0x58
 800e0de:	d14d      	bne.n	800e17c <_strtol_l.constprop.0+0xec>
 800e0e0:	786c      	ldrb	r4, [r5, #1]
 800e0e2:	2310      	movs	r3, #16
 800e0e4:	3502      	adds	r5, #2
 800e0e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e0ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800e0ee:	f04f 0c00 	mov.w	ip, #0
 800e0f2:	fbb8 f9f3 	udiv	r9, r8, r3
 800e0f6:	4666      	mov	r6, ip
 800e0f8:	fb03 8a19 	mls	sl, r3, r9, r8
 800e0fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e100:	f1be 0f09 	cmp.w	lr, #9
 800e104:	d816      	bhi.n	800e134 <_strtol_l.constprop.0+0xa4>
 800e106:	4674      	mov	r4, lr
 800e108:	42a3      	cmp	r3, r4
 800e10a:	dd24      	ble.n	800e156 <_strtol_l.constprop.0+0xc6>
 800e10c:	f1bc 0f00 	cmp.w	ip, #0
 800e110:	db1e      	blt.n	800e150 <_strtol_l.constprop.0+0xc0>
 800e112:	45b1      	cmp	r9, r6
 800e114:	d31c      	bcc.n	800e150 <_strtol_l.constprop.0+0xc0>
 800e116:	d101      	bne.n	800e11c <_strtol_l.constprop.0+0x8c>
 800e118:	45a2      	cmp	sl, r4
 800e11a:	db19      	blt.n	800e150 <_strtol_l.constprop.0+0xc0>
 800e11c:	fb06 4603 	mla	r6, r6, r3, r4
 800e120:	f04f 0c01 	mov.w	ip, #1
 800e124:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e128:	e7e8      	b.n	800e0fc <_strtol_l.constprop.0+0x6c>
 800e12a:	2c2b      	cmp	r4, #43	; 0x2b
 800e12c:	bf04      	itt	eq
 800e12e:	782c      	ldrbeq	r4, [r5, #0]
 800e130:	1cb5      	addeq	r5, r6, #2
 800e132:	e7ca      	b.n	800e0ca <_strtol_l.constprop.0+0x3a>
 800e134:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e138:	f1be 0f19 	cmp.w	lr, #25
 800e13c:	d801      	bhi.n	800e142 <_strtol_l.constprop.0+0xb2>
 800e13e:	3c37      	subs	r4, #55	; 0x37
 800e140:	e7e2      	b.n	800e108 <_strtol_l.constprop.0+0x78>
 800e142:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e146:	f1be 0f19 	cmp.w	lr, #25
 800e14a:	d804      	bhi.n	800e156 <_strtol_l.constprop.0+0xc6>
 800e14c:	3c57      	subs	r4, #87	; 0x57
 800e14e:	e7db      	b.n	800e108 <_strtol_l.constprop.0+0x78>
 800e150:	f04f 3cff 	mov.w	ip, #4294967295
 800e154:	e7e6      	b.n	800e124 <_strtol_l.constprop.0+0x94>
 800e156:	f1bc 0f00 	cmp.w	ip, #0
 800e15a:	da05      	bge.n	800e168 <_strtol_l.constprop.0+0xd8>
 800e15c:	2322      	movs	r3, #34	; 0x22
 800e15e:	6003      	str	r3, [r0, #0]
 800e160:	4646      	mov	r6, r8
 800e162:	b942      	cbnz	r2, 800e176 <_strtol_l.constprop.0+0xe6>
 800e164:	4630      	mov	r0, r6
 800e166:	e79e      	b.n	800e0a6 <_strtol_l.constprop.0+0x16>
 800e168:	b107      	cbz	r7, 800e16c <_strtol_l.constprop.0+0xdc>
 800e16a:	4276      	negs	r6, r6
 800e16c:	2a00      	cmp	r2, #0
 800e16e:	d0f9      	beq.n	800e164 <_strtol_l.constprop.0+0xd4>
 800e170:	f1bc 0f00 	cmp.w	ip, #0
 800e174:	d000      	beq.n	800e178 <_strtol_l.constprop.0+0xe8>
 800e176:	1e69      	subs	r1, r5, #1
 800e178:	6011      	str	r1, [r2, #0]
 800e17a:	e7f3      	b.n	800e164 <_strtol_l.constprop.0+0xd4>
 800e17c:	2430      	movs	r4, #48	; 0x30
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d1b1      	bne.n	800e0e6 <_strtol_l.constprop.0+0x56>
 800e182:	2308      	movs	r3, #8
 800e184:	e7af      	b.n	800e0e6 <_strtol_l.constprop.0+0x56>
 800e186:	2c30      	cmp	r4, #48	; 0x30
 800e188:	d0a5      	beq.n	800e0d6 <_strtol_l.constprop.0+0x46>
 800e18a:	230a      	movs	r3, #10
 800e18c:	e7ab      	b.n	800e0e6 <_strtol_l.constprop.0+0x56>
 800e18e:	bf00      	nop
 800e190:	08011331 	.word	0x08011331

0800e194 <_strtol_r>:
 800e194:	f7ff bf7c 	b.w	800e090 <_strtol_l.constprop.0>

0800e198 <quorem>:
 800e198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e19c:	6903      	ldr	r3, [r0, #16]
 800e19e:	690c      	ldr	r4, [r1, #16]
 800e1a0:	42a3      	cmp	r3, r4
 800e1a2:	4607      	mov	r7, r0
 800e1a4:	f2c0 8081 	blt.w	800e2aa <quorem+0x112>
 800e1a8:	3c01      	subs	r4, #1
 800e1aa:	f101 0814 	add.w	r8, r1, #20
 800e1ae:	f100 0514 	add.w	r5, r0, #20
 800e1b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e1b6:	9301      	str	r3, [sp, #4]
 800e1b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e1bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e1c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e1cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800e1d0:	d331      	bcc.n	800e236 <quorem+0x9e>
 800e1d2:	f04f 0e00 	mov.w	lr, #0
 800e1d6:	4640      	mov	r0, r8
 800e1d8:	46ac      	mov	ip, r5
 800e1da:	46f2      	mov	sl, lr
 800e1dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800e1e0:	b293      	uxth	r3, r2
 800e1e2:	fb06 e303 	mla	r3, r6, r3, lr
 800e1e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	ebaa 0303 	sub.w	r3, sl, r3
 800e1f0:	f8dc a000 	ldr.w	sl, [ip]
 800e1f4:	0c12      	lsrs	r2, r2, #16
 800e1f6:	fa13 f38a 	uxtah	r3, r3, sl
 800e1fa:	fb06 e202 	mla	r2, r6, r2, lr
 800e1fe:	9300      	str	r3, [sp, #0]
 800e200:	9b00      	ldr	r3, [sp, #0]
 800e202:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e206:	b292      	uxth	r2, r2
 800e208:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e20c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e210:	f8bd 3000 	ldrh.w	r3, [sp]
 800e214:	4581      	cmp	r9, r0
 800e216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e21a:	f84c 3b04 	str.w	r3, [ip], #4
 800e21e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e222:	d2db      	bcs.n	800e1dc <quorem+0x44>
 800e224:	f855 300b 	ldr.w	r3, [r5, fp]
 800e228:	b92b      	cbnz	r3, 800e236 <quorem+0x9e>
 800e22a:	9b01      	ldr	r3, [sp, #4]
 800e22c:	3b04      	subs	r3, #4
 800e22e:	429d      	cmp	r5, r3
 800e230:	461a      	mov	r2, r3
 800e232:	d32e      	bcc.n	800e292 <quorem+0xfa>
 800e234:	613c      	str	r4, [r7, #16]
 800e236:	4638      	mov	r0, r7
 800e238:	f001 fc82 	bl	800fb40 <__mcmp>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	db24      	blt.n	800e28a <quorem+0xf2>
 800e240:	3601      	adds	r6, #1
 800e242:	4628      	mov	r0, r5
 800e244:	f04f 0c00 	mov.w	ip, #0
 800e248:	f858 2b04 	ldr.w	r2, [r8], #4
 800e24c:	f8d0 e000 	ldr.w	lr, [r0]
 800e250:	b293      	uxth	r3, r2
 800e252:	ebac 0303 	sub.w	r3, ip, r3
 800e256:	0c12      	lsrs	r2, r2, #16
 800e258:	fa13 f38e 	uxtah	r3, r3, lr
 800e25c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e260:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e264:	b29b      	uxth	r3, r3
 800e266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e26a:	45c1      	cmp	r9, r8
 800e26c:	f840 3b04 	str.w	r3, [r0], #4
 800e270:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e274:	d2e8      	bcs.n	800e248 <quorem+0xb0>
 800e276:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e27a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e27e:	b922      	cbnz	r2, 800e28a <quorem+0xf2>
 800e280:	3b04      	subs	r3, #4
 800e282:	429d      	cmp	r5, r3
 800e284:	461a      	mov	r2, r3
 800e286:	d30a      	bcc.n	800e29e <quorem+0x106>
 800e288:	613c      	str	r4, [r7, #16]
 800e28a:	4630      	mov	r0, r6
 800e28c:	b003      	add	sp, #12
 800e28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e292:	6812      	ldr	r2, [r2, #0]
 800e294:	3b04      	subs	r3, #4
 800e296:	2a00      	cmp	r2, #0
 800e298:	d1cc      	bne.n	800e234 <quorem+0x9c>
 800e29a:	3c01      	subs	r4, #1
 800e29c:	e7c7      	b.n	800e22e <quorem+0x96>
 800e29e:	6812      	ldr	r2, [r2, #0]
 800e2a0:	3b04      	subs	r3, #4
 800e2a2:	2a00      	cmp	r2, #0
 800e2a4:	d1f0      	bne.n	800e288 <quorem+0xf0>
 800e2a6:	3c01      	subs	r4, #1
 800e2a8:	e7eb      	b.n	800e282 <quorem+0xea>
 800e2aa:	2000      	movs	r0, #0
 800e2ac:	e7ee      	b.n	800e28c <quorem+0xf4>
	...

0800e2b0 <_dtoa_r>:
 800e2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b4:	ed2d 8b04 	vpush	{d8-d9}
 800e2b8:	ec57 6b10 	vmov	r6, r7, d0
 800e2bc:	b093      	sub	sp, #76	; 0x4c
 800e2be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e2c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e2c4:	9106      	str	r1, [sp, #24]
 800e2c6:	ee10 aa10 	vmov	sl, s0
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	9209      	str	r2, [sp, #36]	; 0x24
 800e2ce:	930c      	str	r3, [sp, #48]	; 0x30
 800e2d0:	46bb      	mov	fp, r7
 800e2d2:	b975      	cbnz	r5, 800e2f2 <_dtoa_r+0x42>
 800e2d4:	2010      	movs	r0, #16
 800e2d6:	f001 f94d 	bl	800f574 <malloc>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	6260      	str	r0, [r4, #36]	; 0x24
 800e2de:	b920      	cbnz	r0, 800e2ea <_dtoa_r+0x3a>
 800e2e0:	4ba7      	ldr	r3, [pc, #668]	; (800e580 <_dtoa_r+0x2d0>)
 800e2e2:	21ea      	movs	r1, #234	; 0xea
 800e2e4:	48a7      	ldr	r0, [pc, #668]	; (800e584 <_dtoa_r+0x2d4>)
 800e2e6:	f002 f8ad 	bl	8010444 <__assert_func>
 800e2ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e2ee:	6005      	str	r5, [r0, #0]
 800e2f0:	60c5      	str	r5, [r0, #12]
 800e2f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2f4:	6819      	ldr	r1, [r3, #0]
 800e2f6:	b151      	cbz	r1, 800e30e <_dtoa_r+0x5e>
 800e2f8:	685a      	ldr	r2, [r3, #4]
 800e2fa:	604a      	str	r2, [r1, #4]
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	4093      	lsls	r3, r2
 800e300:	608b      	str	r3, [r1, #8]
 800e302:	4620      	mov	r0, r4
 800e304:	f001 f990 	bl	800f628 <_Bfree>
 800e308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e30a:	2200      	movs	r2, #0
 800e30c:	601a      	str	r2, [r3, #0]
 800e30e:	1e3b      	subs	r3, r7, #0
 800e310:	bfaa      	itet	ge
 800e312:	2300      	movge	r3, #0
 800e314:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e318:	f8c8 3000 	strge.w	r3, [r8]
 800e31c:	4b9a      	ldr	r3, [pc, #616]	; (800e588 <_dtoa_r+0x2d8>)
 800e31e:	bfbc      	itt	lt
 800e320:	2201      	movlt	r2, #1
 800e322:	f8c8 2000 	strlt.w	r2, [r8]
 800e326:	ea33 030b 	bics.w	r3, r3, fp
 800e32a:	d11b      	bne.n	800e364 <_dtoa_r+0xb4>
 800e32c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e32e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e332:	6013      	str	r3, [r2, #0]
 800e334:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e338:	4333      	orrs	r3, r6
 800e33a:	f000 8592 	beq.w	800ee62 <_dtoa_r+0xbb2>
 800e33e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e340:	b963      	cbnz	r3, 800e35c <_dtoa_r+0xac>
 800e342:	4b92      	ldr	r3, [pc, #584]	; (800e58c <_dtoa_r+0x2dc>)
 800e344:	e022      	b.n	800e38c <_dtoa_r+0xdc>
 800e346:	4b92      	ldr	r3, [pc, #584]	; (800e590 <_dtoa_r+0x2e0>)
 800e348:	9301      	str	r3, [sp, #4]
 800e34a:	3308      	adds	r3, #8
 800e34c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e34e:	6013      	str	r3, [r2, #0]
 800e350:	9801      	ldr	r0, [sp, #4]
 800e352:	b013      	add	sp, #76	; 0x4c
 800e354:	ecbd 8b04 	vpop	{d8-d9}
 800e358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e35c:	4b8b      	ldr	r3, [pc, #556]	; (800e58c <_dtoa_r+0x2dc>)
 800e35e:	9301      	str	r3, [sp, #4]
 800e360:	3303      	adds	r3, #3
 800e362:	e7f3      	b.n	800e34c <_dtoa_r+0x9c>
 800e364:	2200      	movs	r2, #0
 800e366:	2300      	movs	r3, #0
 800e368:	4650      	mov	r0, sl
 800e36a:	4659      	mov	r1, fp
 800e36c:	f7f2 fbb4 	bl	8000ad8 <__aeabi_dcmpeq>
 800e370:	ec4b ab19 	vmov	d9, sl, fp
 800e374:	4680      	mov	r8, r0
 800e376:	b158      	cbz	r0, 800e390 <_dtoa_r+0xe0>
 800e378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e37a:	2301      	movs	r3, #1
 800e37c:	6013      	str	r3, [r2, #0]
 800e37e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e380:	2b00      	cmp	r3, #0
 800e382:	f000 856b 	beq.w	800ee5c <_dtoa_r+0xbac>
 800e386:	4883      	ldr	r0, [pc, #524]	; (800e594 <_dtoa_r+0x2e4>)
 800e388:	6018      	str	r0, [r3, #0]
 800e38a:	1e43      	subs	r3, r0, #1
 800e38c:	9301      	str	r3, [sp, #4]
 800e38e:	e7df      	b.n	800e350 <_dtoa_r+0xa0>
 800e390:	ec4b ab10 	vmov	d0, sl, fp
 800e394:	aa10      	add	r2, sp, #64	; 0x40
 800e396:	a911      	add	r1, sp, #68	; 0x44
 800e398:	4620      	mov	r0, r4
 800e39a:	f001 fcf3 	bl	800fd84 <__d2b>
 800e39e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e3a2:	ee08 0a10 	vmov	s16, r0
 800e3a6:	2d00      	cmp	r5, #0
 800e3a8:	f000 8084 	beq.w	800e4b4 <_dtoa_r+0x204>
 800e3ac:	ee19 3a90 	vmov	r3, s19
 800e3b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e3b8:	4656      	mov	r6, sl
 800e3ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e3be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e3c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e3c6:	4b74      	ldr	r3, [pc, #464]	; (800e598 <_dtoa_r+0x2e8>)
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	4639      	mov	r1, r7
 800e3ce:	f7f1 ff63 	bl	8000298 <__aeabi_dsub>
 800e3d2:	a365      	add	r3, pc, #404	; (adr r3, 800e568 <_dtoa_r+0x2b8>)
 800e3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d8:	f7f2 f916 	bl	8000608 <__aeabi_dmul>
 800e3dc:	a364      	add	r3, pc, #400	; (adr r3, 800e570 <_dtoa_r+0x2c0>)
 800e3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e2:	f7f1 ff5b 	bl	800029c <__adddf3>
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	460f      	mov	r7, r1
 800e3ec:	f7f2 f8a2 	bl	8000534 <__aeabi_i2d>
 800e3f0:	a361      	add	r3, pc, #388	; (adr r3, 800e578 <_dtoa_r+0x2c8>)
 800e3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f6:	f7f2 f907 	bl	8000608 <__aeabi_dmul>
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	460b      	mov	r3, r1
 800e3fe:	4630      	mov	r0, r6
 800e400:	4639      	mov	r1, r7
 800e402:	f7f1 ff4b 	bl	800029c <__adddf3>
 800e406:	4606      	mov	r6, r0
 800e408:	460f      	mov	r7, r1
 800e40a:	f7f2 fbad 	bl	8000b68 <__aeabi_d2iz>
 800e40e:	2200      	movs	r2, #0
 800e410:	9000      	str	r0, [sp, #0]
 800e412:	2300      	movs	r3, #0
 800e414:	4630      	mov	r0, r6
 800e416:	4639      	mov	r1, r7
 800e418:	f7f2 fb68 	bl	8000aec <__aeabi_dcmplt>
 800e41c:	b150      	cbz	r0, 800e434 <_dtoa_r+0x184>
 800e41e:	9800      	ldr	r0, [sp, #0]
 800e420:	f7f2 f888 	bl	8000534 <__aeabi_i2d>
 800e424:	4632      	mov	r2, r6
 800e426:	463b      	mov	r3, r7
 800e428:	f7f2 fb56 	bl	8000ad8 <__aeabi_dcmpeq>
 800e42c:	b910      	cbnz	r0, 800e434 <_dtoa_r+0x184>
 800e42e:	9b00      	ldr	r3, [sp, #0]
 800e430:	3b01      	subs	r3, #1
 800e432:	9300      	str	r3, [sp, #0]
 800e434:	9b00      	ldr	r3, [sp, #0]
 800e436:	2b16      	cmp	r3, #22
 800e438:	d85a      	bhi.n	800e4f0 <_dtoa_r+0x240>
 800e43a:	9a00      	ldr	r2, [sp, #0]
 800e43c:	4b57      	ldr	r3, [pc, #348]	; (800e59c <_dtoa_r+0x2ec>)
 800e43e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e446:	ec51 0b19 	vmov	r0, r1, d9
 800e44a:	f7f2 fb4f 	bl	8000aec <__aeabi_dcmplt>
 800e44e:	2800      	cmp	r0, #0
 800e450:	d050      	beq.n	800e4f4 <_dtoa_r+0x244>
 800e452:	9b00      	ldr	r3, [sp, #0]
 800e454:	3b01      	subs	r3, #1
 800e456:	9300      	str	r3, [sp, #0]
 800e458:	2300      	movs	r3, #0
 800e45a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e45c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e45e:	1b5d      	subs	r5, r3, r5
 800e460:	1e6b      	subs	r3, r5, #1
 800e462:	9305      	str	r3, [sp, #20]
 800e464:	bf45      	ittet	mi
 800e466:	f1c5 0301 	rsbmi	r3, r5, #1
 800e46a:	9304      	strmi	r3, [sp, #16]
 800e46c:	2300      	movpl	r3, #0
 800e46e:	2300      	movmi	r3, #0
 800e470:	bf4c      	ite	mi
 800e472:	9305      	strmi	r3, [sp, #20]
 800e474:	9304      	strpl	r3, [sp, #16]
 800e476:	9b00      	ldr	r3, [sp, #0]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	db3d      	blt.n	800e4f8 <_dtoa_r+0x248>
 800e47c:	9b05      	ldr	r3, [sp, #20]
 800e47e:	9a00      	ldr	r2, [sp, #0]
 800e480:	920a      	str	r2, [sp, #40]	; 0x28
 800e482:	4413      	add	r3, r2
 800e484:	9305      	str	r3, [sp, #20]
 800e486:	2300      	movs	r3, #0
 800e488:	9307      	str	r3, [sp, #28]
 800e48a:	9b06      	ldr	r3, [sp, #24]
 800e48c:	2b09      	cmp	r3, #9
 800e48e:	f200 8089 	bhi.w	800e5a4 <_dtoa_r+0x2f4>
 800e492:	2b05      	cmp	r3, #5
 800e494:	bfc4      	itt	gt
 800e496:	3b04      	subgt	r3, #4
 800e498:	9306      	strgt	r3, [sp, #24]
 800e49a:	9b06      	ldr	r3, [sp, #24]
 800e49c:	f1a3 0302 	sub.w	r3, r3, #2
 800e4a0:	bfcc      	ite	gt
 800e4a2:	2500      	movgt	r5, #0
 800e4a4:	2501      	movle	r5, #1
 800e4a6:	2b03      	cmp	r3, #3
 800e4a8:	f200 8087 	bhi.w	800e5ba <_dtoa_r+0x30a>
 800e4ac:	e8df f003 	tbb	[pc, r3]
 800e4b0:	59383a2d 	.word	0x59383a2d
 800e4b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e4b8:	441d      	add	r5, r3
 800e4ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e4be:	2b20      	cmp	r3, #32
 800e4c0:	bfc1      	itttt	gt
 800e4c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e4c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e4ca:	fa0b f303 	lslgt.w	r3, fp, r3
 800e4ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e4d2:	bfda      	itte	le
 800e4d4:	f1c3 0320 	rsble	r3, r3, #32
 800e4d8:	fa06 f003 	lslle.w	r0, r6, r3
 800e4dc:	4318      	orrgt	r0, r3
 800e4de:	f7f2 f819 	bl	8000514 <__aeabi_ui2d>
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	4606      	mov	r6, r0
 800e4e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e4ea:	3d01      	subs	r5, #1
 800e4ec:	930e      	str	r3, [sp, #56]	; 0x38
 800e4ee:	e76a      	b.n	800e3c6 <_dtoa_r+0x116>
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	e7b2      	b.n	800e45a <_dtoa_r+0x1aa>
 800e4f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800e4f6:	e7b1      	b.n	800e45c <_dtoa_r+0x1ac>
 800e4f8:	9b04      	ldr	r3, [sp, #16]
 800e4fa:	9a00      	ldr	r2, [sp, #0]
 800e4fc:	1a9b      	subs	r3, r3, r2
 800e4fe:	9304      	str	r3, [sp, #16]
 800e500:	4253      	negs	r3, r2
 800e502:	9307      	str	r3, [sp, #28]
 800e504:	2300      	movs	r3, #0
 800e506:	930a      	str	r3, [sp, #40]	; 0x28
 800e508:	e7bf      	b.n	800e48a <_dtoa_r+0x1da>
 800e50a:	2300      	movs	r3, #0
 800e50c:	9308      	str	r3, [sp, #32]
 800e50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e510:	2b00      	cmp	r3, #0
 800e512:	dc55      	bgt.n	800e5c0 <_dtoa_r+0x310>
 800e514:	2301      	movs	r3, #1
 800e516:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e51a:	461a      	mov	r2, r3
 800e51c:	9209      	str	r2, [sp, #36]	; 0x24
 800e51e:	e00c      	b.n	800e53a <_dtoa_r+0x28a>
 800e520:	2301      	movs	r3, #1
 800e522:	e7f3      	b.n	800e50c <_dtoa_r+0x25c>
 800e524:	2300      	movs	r3, #0
 800e526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e528:	9308      	str	r3, [sp, #32]
 800e52a:	9b00      	ldr	r3, [sp, #0]
 800e52c:	4413      	add	r3, r2
 800e52e:	9302      	str	r3, [sp, #8]
 800e530:	3301      	adds	r3, #1
 800e532:	2b01      	cmp	r3, #1
 800e534:	9303      	str	r3, [sp, #12]
 800e536:	bfb8      	it	lt
 800e538:	2301      	movlt	r3, #1
 800e53a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e53c:	2200      	movs	r2, #0
 800e53e:	6042      	str	r2, [r0, #4]
 800e540:	2204      	movs	r2, #4
 800e542:	f102 0614 	add.w	r6, r2, #20
 800e546:	429e      	cmp	r6, r3
 800e548:	6841      	ldr	r1, [r0, #4]
 800e54a:	d93d      	bls.n	800e5c8 <_dtoa_r+0x318>
 800e54c:	4620      	mov	r0, r4
 800e54e:	f001 f82b 	bl	800f5a8 <_Balloc>
 800e552:	9001      	str	r0, [sp, #4]
 800e554:	2800      	cmp	r0, #0
 800e556:	d13b      	bne.n	800e5d0 <_dtoa_r+0x320>
 800e558:	4b11      	ldr	r3, [pc, #68]	; (800e5a0 <_dtoa_r+0x2f0>)
 800e55a:	4602      	mov	r2, r0
 800e55c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e560:	e6c0      	b.n	800e2e4 <_dtoa_r+0x34>
 800e562:	2301      	movs	r3, #1
 800e564:	e7df      	b.n	800e526 <_dtoa_r+0x276>
 800e566:	bf00      	nop
 800e568:	636f4361 	.word	0x636f4361
 800e56c:	3fd287a7 	.word	0x3fd287a7
 800e570:	8b60c8b3 	.word	0x8b60c8b3
 800e574:	3fc68a28 	.word	0x3fc68a28
 800e578:	509f79fb 	.word	0x509f79fb
 800e57c:	3fd34413 	.word	0x3fd34413
 800e580:	0801143e 	.word	0x0801143e
 800e584:	08011455 	.word	0x08011455
 800e588:	7ff00000 	.word	0x7ff00000
 800e58c:	0801143a 	.word	0x0801143a
 800e590:	08011431 	.word	0x08011431
 800e594:	080112b5 	.word	0x080112b5
 800e598:	3ff80000 	.word	0x3ff80000
 800e59c:	080115c0 	.word	0x080115c0
 800e5a0:	080114b0 	.word	0x080114b0
 800e5a4:	2501      	movs	r5, #1
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	9306      	str	r3, [sp, #24]
 800e5aa:	9508      	str	r5, [sp, #32]
 800e5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e5b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	2312      	movs	r3, #18
 800e5b8:	e7b0      	b.n	800e51c <_dtoa_r+0x26c>
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	9308      	str	r3, [sp, #32]
 800e5be:	e7f5      	b.n	800e5ac <_dtoa_r+0x2fc>
 800e5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e5c6:	e7b8      	b.n	800e53a <_dtoa_r+0x28a>
 800e5c8:	3101      	adds	r1, #1
 800e5ca:	6041      	str	r1, [r0, #4]
 800e5cc:	0052      	lsls	r2, r2, #1
 800e5ce:	e7b8      	b.n	800e542 <_dtoa_r+0x292>
 800e5d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5d2:	9a01      	ldr	r2, [sp, #4]
 800e5d4:	601a      	str	r2, [r3, #0]
 800e5d6:	9b03      	ldr	r3, [sp, #12]
 800e5d8:	2b0e      	cmp	r3, #14
 800e5da:	f200 809d 	bhi.w	800e718 <_dtoa_r+0x468>
 800e5de:	2d00      	cmp	r5, #0
 800e5e0:	f000 809a 	beq.w	800e718 <_dtoa_r+0x468>
 800e5e4:	9b00      	ldr	r3, [sp, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	dd32      	ble.n	800e650 <_dtoa_r+0x3a0>
 800e5ea:	4ab7      	ldr	r2, [pc, #732]	; (800e8c8 <_dtoa_r+0x618>)
 800e5ec:	f003 030f 	and.w	r3, r3, #15
 800e5f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e5f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e5f8:	9b00      	ldr	r3, [sp, #0]
 800e5fa:	05d8      	lsls	r0, r3, #23
 800e5fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e600:	d516      	bpl.n	800e630 <_dtoa_r+0x380>
 800e602:	4bb2      	ldr	r3, [pc, #712]	; (800e8cc <_dtoa_r+0x61c>)
 800e604:	ec51 0b19 	vmov	r0, r1, d9
 800e608:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e60c:	f7f2 f926 	bl	800085c <__aeabi_ddiv>
 800e610:	f007 070f 	and.w	r7, r7, #15
 800e614:	4682      	mov	sl, r0
 800e616:	468b      	mov	fp, r1
 800e618:	2503      	movs	r5, #3
 800e61a:	4eac      	ldr	r6, [pc, #688]	; (800e8cc <_dtoa_r+0x61c>)
 800e61c:	b957      	cbnz	r7, 800e634 <_dtoa_r+0x384>
 800e61e:	4642      	mov	r2, r8
 800e620:	464b      	mov	r3, r9
 800e622:	4650      	mov	r0, sl
 800e624:	4659      	mov	r1, fp
 800e626:	f7f2 f919 	bl	800085c <__aeabi_ddiv>
 800e62a:	4682      	mov	sl, r0
 800e62c:	468b      	mov	fp, r1
 800e62e:	e028      	b.n	800e682 <_dtoa_r+0x3d2>
 800e630:	2502      	movs	r5, #2
 800e632:	e7f2      	b.n	800e61a <_dtoa_r+0x36a>
 800e634:	07f9      	lsls	r1, r7, #31
 800e636:	d508      	bpl.n	800e64a <_dtoa_r+0x39a>
 800e638:	4640      	mov	r0, r8
 800e63a:	4649      	mov	r1, r9
 800e63c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e640:	f7f1 ffe2 	bl	8000608 <__aeabi_dmul>
 800e644:	3501      	adds	r5, #1
 800e646:	4680      	mov	r8, r0
 800e648:	4689      	mov	r9, r1
 800e64a:	107f      	asrs	r7, r7, #1
 800e64c:	3608      	adds	r6, #8
 800e64e:	e7e5      	b.n	800e61c <_dtoa_r+0x36c>
 800e650:	f000 809b 	beq.w	800e78a <_dtoa_r+0x4da>
 800e654:	9b00      	ldr	r3, [sp, #0]
 800e656:	4f9d      	ldr	r7, [pc, #628]	; (800e8cc <_dtoa_r+0x61c>)
 800e658:	425e      	negs	r6, r3
 800e65a:	4b9b      	ldr	r3, [pc, #620]	; (800e8c8 <_dtoa_r+0x618>)
 800e65c:	f006 020f 	and.w	r2, r6, #15
 800e660:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e668:	ec51 0b19 	vmov	r0, r1, d9
 800e66c:	f7f1 ffcc 	bl	8000608 <__aeabi_dmul>
 800e670:	1136      	asrs	r6, r6, #4
 800e672:	4682      	mov	sl, r0
 800e674:	468b      	mov	fp, r1
 800e676:	2300      	movs	r3, #0
 800e678:	2502      	movs	r5, #2
 800e67a:	2e00      	cmp	r6, #0
 800e67c:	d17a      	bne.n	800e774 <_dtoa_r+0x4c4>
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1d3      	bne.n	800e62a <_dtoa_r+0x37a>
 800e682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e684:	2b00      	cmp	r3, #0
 800e686:	f000 8082 	beq.w	800e78e <_dtoa_r+0x4de>
 800e68a:	4b91      	ldr	r3, [pc, #580]	; (800e8d0 <_dtoa_r+0x620>)
 800e68c:	2200      	movs	r2, #0
 800e68e:	4650      	mov	r0, sl
 800e690:	4659      	mov	r1, fp
 800e692:	f7f2 fa2b 	bl	8000aec <__aeabi_dcmplt>
 800e696:	2800      	cmp	r0, #0
 800e698:	d079      	beq.n	800e78e <_dtoa_r+0x4de>
 800e69a:	9b03      	ldr	r3, [sp, #12]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d076      	beq.n	800e78e <_dtoa_r+0x4de>
 800e6a0:	9b02      	ldr	r3, [sp, #8]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	dd36      	ble.n	800e714 <_dtoa_r+0x464>
 800e6a6:	9b00      	ldr	r3, [sp, #0]
 800e6a8:	4650      	mov	r0, sl
 800e6aa:	4659      	mov	r1, fp
 800e6ac:	1e5f      	subs	r7, r3, #1
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	4b88      	ldr	r3, [pc, #544]	; (800e8d4 <_dtoa_r+0x624>)
 800e6b2:	f7f1 ffa9 	bl	8000608 <__aeabi_dmul>
 800e6b6:	9e02      	ldr	r6, [sp, #8]
 800e6b8:	4682      	mov	sl, r0
 800e6ba:	468b      	mov	fp, r1
 800e6bc:	3501      	adds	r5, #1
 800e6be:	4628      	mov	r0, r5
 800e6c0:	f7f1 ff38 	bl	8000534 <__aeabi_i2d>
 800e6c4:	4652      	mov	r2, sl
 800e6c6:	465b      	mov	r3, fp
 800e6c8:	f7f1 ff9e 	bl	8000608 <__aeabi_dmul>
 800e6cc:	4b82      	ldr	r3, [pc, #520]	; (800e8d8 <_dtoa_r+0x628>)
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	f7f1 fde4 	bl	800029c <__adddf3>
 800e6d4:	46d0      	mov	r8, sl
 800e6d6:	46d9      	mov	r9, fp
 800e6d8:	4682      	mov	sl, r0
 800e6da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e6de:	2e00      	cmp	r6, #0
 800e6e0:	d158      	bne.n	800e794 <_dtoa_r+0x4e4>
 800e6e2:	4b7e      	ldr	r3, [pc, #504]	; (800e8dc <_dtoa_r+0x62c>)
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	4640      	mov	r0, r8
 800e6e8:	4649      	mov	r1, r9
 800e6ea:	f7f1 fdd5 	bl	8000298 <__aeabi_dsub>
 800e6ee:	4652      	mov	r2, sl
 800e6f0:	465b      	mov	r3, fp
 800e6f2:	4680      	mov	r8, r0
 800e6f4:	4689      	mov	r9, r1
 800e6f6:	f7f2 fa17 	bl	8000b28 <__aeabi_dcmpgt>
 800e6fa:	2800      	cmp	r0, #0
 800e6fc:	f040 8295 	bne.w	800ec2a <_dtoa_r+0x97a>
 800e700:	4652      	mov	r2, sl
 800e702:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e706:	4640      	mov	r0, r8
 800e708:	4649      	mov	r1, r9
 800e70a:	f7f2 f9ef 	bl	8000aec <__aeabi_dcmplt>
 800e70e:	2800      	cmp	r0, #0
 800e710:	f040 8289 	bne.w	800ec26 <_dtoa_r+0x976>
 800e714:	ec5b ab19 	vmov	sl, fp, d9
 800e718:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f2c0 8148 	blt.w	800e9b0 <_dtoa_r+0x700>
 800e720:	9a00      	ldr	r2, [sp, #0]
 800e722:	2a0e      	cmp	r2, #14
 800e724:	f300 8144 	bgt.w	800e9b0 <_dtoa_r+0x700>
 800e728:	4b67      	ldr	r3, [pc, #412]	; (800e8c8 <_dtoa_r+0x618>)
 800e72a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e72e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e734:	2b00      	cmp	r3, #0
 800e736:	f280 80d5 	bge.w	800e8e4 <_dtoa_r+0x634>
 800e73a:	9b03      	ldr	r3, [sp, #12]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f300 80d1 	bgt.w	800e8e4 <_dtoa_r+0x634>
 800e742:	f040 826f 	bne.w	800ec24 <_dtoa_r+0x974>
 800e746:	4b65      	ldr	r3, [pc, #404]	; (800e8dc <_dtoa_r+0x62c>)
 800e748:	2200      	movs	r2, #0
 800e74a:	4640      	mov	r0, r8
 800e74c:	4649      	mov	r1, r9
 800e74e:	f7f1 ff5b 	bl	8000608 <__aeabi_dmul>
 800e752:	4652      	mov	r2, sl
 800e754:	465b      	mov	r3, fp
 800e756:	f7f2 f9dd 	bl	8000b14 <__aeabi_dcmpge>
 800e75a:	9e03      	ldr	r6, [sp, #12]
 800e75c:	4637      	mov	r7, r6
 800e75e:	2800      	cmp	r0, #0
 800e760:	f040 8245 	bne.w	800ebee <_dtoa_r+0x93e>
 800e764:	9d01      	ldr	r5, [sp, #4]
 800e766:	2331      	movs	r3, #49	; 0x31
 800e768:	f805 3b01 	strb.w	r3, [r5], #1
 800e76c:	9b00      	ldr	r3, [sp, #0]
 800e76e:	3301      	adds	r3, #1
 800e770:	9300      	str	r3, [sp, #0]
 800e772:	e240      	b.n	800ebf6 <_dtoa_r+0x946>
 800e774:	07f2      	lsls	r2, r6, #31
 800e776:	d505      	bpl.n	800e784 <_dtoa_r+0x4d4>
 800e778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e77c:	f7f1 ff44 	bl	8000608 <__aeabi_dmul>
 800e780:	3501      	adds	r5, #1
 800e782:	2301      	movs	r3, #1
 800e784:	1076      	asrs	r6, r6, #1
 800e786:	3708      	adds	r7, #8
 800e788:	e777      	b.n	800e67a <_dtoa_r+0x3ca>
 800e78a:	2502      	movs	r5, #2
 800e78c:	e779      	b.n	800e682 <_dtoa_r+0x3d2>
 800e78e:	9f00      	ldr	r7, [sp, #0]
 800e790:	9e03      	ldr	r6, [sp, #12]
 800e792:	e794      	b.n	800e6be <_dtoa_r+0x40e>
 800e794:	9901      	ldr	r1, [sp, #4]
 800e796:	4b4c      	ldr	r3, [pc, #304]	; (800e8c8 <_dtoa_r+0x618>)
 800e798:	4431      	add	r1, r6
 800e79a:	910d      	str	r1, [sp, #52]	; 0x34
 800e79c:	9908      	ldr	r1, [sp, #32]
 800e79e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e7a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e7a6:	2900      	cmp	r1, #0
 800e7a8:	d043      	beq.n	800e832 <_dtoa_r+0x582>
 800e7aa:	494d      	ldr	r1, [pc, #308]	; (800e8e0 <_dtoa_r+0x630>)
 800e7ac:	2000      	movs	r0, #0
 800e7ae:	f7f2 f855 	bl	800085c <__aeabi_ddiv>
 800e7b2:	4652      	mov	r2, sl
 800e7b4:	465b      	mov	r3, fp
 800e7b6:	f7f1 fd6f 	bl	8000298 <__aeabi_dsub>
 800e7ba:	9d01      	ldr	r5, [sp, #4]
 800e7bc:	4682      	mov	sl, r0
 800e7be:	468b      	mov	fp, r1
 800e7c0:	4649      	mov	r1, r9
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	f7f2 f9d0 	bl	8000b68 <__aeabi_d2iz>
 800e7c8:	4606      	mov	r6, r0
 800e7ca:	f7f1 feb3 	bl	8000534 <__aeabi_i2d>
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	4640      	mov	r0, r8
 800e7d4:	4649      	mov	r1, r9
 800e7d6:	f7f1 fd5f 	bl	8000298 <__aeabi_dsub>
 800e7da:	3630      	adds	r6, #48	; 0x30
 800e7dc:	f805 6b01 	strb.w	r6, [r5], #1
 800e7e0:	4652      	mov	r2, sl
 800e7e2:	465b      	mov	r3, fp
 800e7e4:	4680      	mov	r8, r0
 800e7e6:	4689      	mov	r9, r1
 800e7e8:	f7f2 f980 	bl	8000aec <__aeabi_dcmplt>
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	d163      	bne.n	800e8b8 <_dtoa_r+0x608>
 800e7f0:	4642      	mov	r2, r8
 800e7f2:	464b      	mov	r3, r9
 800e7f4:	4936      	ldr	r1, [pc, #216]	; (800e8d0 <_dtoa_r+0x620>)
 800e7f6:	2000      	movs	r0, #0
 800e7f8:	f7f1 fd4e 	bl	8000298 <__aeabi_dsub>
 800e7fc:	4652      	mov	r2, sl
 800e7fe:	465b      	mov	r3, fp
 800e800:	f7f2 f974 	bl	8000aec <__aeabi_dcmplt>
 800e804:	2800      	cmp	r0, #0
 800e806:	f040 80b5 	bne.w	800e974 <_dtoa_r+0x6c4>
 800e80a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e80c:	429d      	cmp	r5, r3
 800e80e:	d081      	beq.n	800e714 <_dtoa_r+0x464>
 800e810:	4b30      	ldr	r3, [pc, #192]	; (800e8d4 <_dtoa_r+0x624>)
 800e812:	2200      	movs	r2, #0
 800e814:	4650      	mov	r0, sl
 800e816:	4659      	mov	r1, fp
 800e818:	f7f1 fef6 	bl	8000608 <__aeabi_dmul>
 800e81c:	4b2d      	ldr	r3, [pc, #180]	; (800e8d4 <_dtoa_r+0x624>)
 800e81e:	4682      	mov	sl, r0
 800e820:	468b      	mov	fp, r1
 800e822:	4640      	mov	r0, r8
 800e824:	4649      	mov	r1, r9
 800e826:	2200      	movs	r2, #0
 800e828:	f7f1 feee 	bl	8000608 <__aeabi_dmul>
 800e82c:	4680      	mov	r8, r0
 800e82e:	4689      	mov	r9, r1
 800e830:	e7c6      	b.n	800e7c0 <_dtoa_r+0x510>
 800e832:	4650      	mov	r0, sl
 800e834:	4659      	mov	r1, fp
 800e836:	f7f1 fee7 	bl	8000608 <__aeabi_dmul>
 800e83a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e83c:	9d01      	ldr	r5, [sp, #4]
 800e83e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e840:	4682      	mov	sl, r0
 800e842:	468b      	mov	fp, r1
 800e844:	4649      	mov	r1, r9
 800e846:	4640      	mov	r0, r8
 800e848:	f7f2 f98e 	bl	8000b68 <__aeabi_d2iz>
 800e84c:	4606      	mov	r6, r0
 800e84e:	f7f1 fe71 	bl	8000534 <__aeabi_i2d>
 800e852:	3630      	adds	r6, #48	; 0x30
 800e854:	4602      	mov	r2, r0
 800e856:	460b      	mov	r3, r1
 800e858:	4640      	mov	r0, r8
 800e85a:	4649      	mov	r1, r9
 800e85c:	f7f1 fd1c 	bl	8000298 <__aeabi_dsub>
 800e860:	f805 6b01 	strb.w	r6, [r5], #1
 800e864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e866:	429d      	cmp	r5, r3
 800e868:	4680      	mov	r8, r0
 800e86a:	4689      	mov	r9, r1
 800e86c:	f04f 0200 	mov.w	r2, #0
 800e870:	d124      	bne.n	800e8bc <_dtoa_r+0x60c>
 800e872:	4b1b      	ldr	r3, [pc, #108]	; (800e8e0 <_dtoa_r+0x630>)
 800e874:	4650      	mov	r0, sl
 800e876:	4659      	mov	r1, fp
 800e878:	f7f1 fd10 	bl	800029c <__adddf3>
 800e87c:	4602      	mov	r2, r0
 800e87e:	460b      	mov	r3, r1
 800e880:	4640      	mov	r0, r8
 800e882:	4649      	mov	r1, r9
 800e884:	f7f2 f950 	bl	8000b28 <__aeabi_dcmpgt>
 800e888:	2800      	cmp	r0, #0
 800e88a:	d173      	bne.n	800e974 <_dtoa_r+0x6c4>
 800e88c:	4652      	mov	r2, sl
 800e88e:	465b      	mov	r3, fp
 800e890:	4913      	ldr	r1, [pc, #76]	; (800e8e0 <_dtoa_r+0x630>)
 800e892:	2000      	movs	r0, #0
 800e894:	f7f1 fd00 	bl	8000298 <__aeabi_dsub>
 800e898:	4602      	mov	r2, r0
 800e89a:	460b      	mov	r3, r1
 800e89c:	4640      	mov	r0, r8
 800e89e:	4649      	mov	r1, r9
 800e8a0:	f7f2 f924 	bl	8000aec <__aeabi_dcmplt>
 800e8a4:	2800      	cmp	r0, #0
 800e8a6:	f43f af35 	beq.w	800e714 <_dtoa_r+0x464>
 800e8aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e8ac:	1e6b      	subs	r3, r5, #1
 800e8ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800e8b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e8b4:	2b30      	cmp	r3, #48	; 0x30
 800e8b6:	d0f8      	beq.n	800e8aa <_dtoa_r+0x5fa>
 800e8b8:	9700      	str	r7, [sp, #0]
 800e8ba:	e049      	b.n	800e950 <_dtoa_r+0x6a0>
 800e8bc:	4b05      	ldr	r3, [pc, #20]	; (800e8d4 <_dtoa_r+0x624>)
 800e8be:	f7f1 fea3 	bl	8000608 <__aeabi_dmul>
 800e8c2:	4680      	mov	r8, r0
 800e8c4:	4689      	mov	r9, r1
 800e8c6:	e7bd      	b.n	800e844 <_dtoa_r+0x594>
 800e8c8:	080115c0 	.word	0x080115c0
 800e8cc:	08011598 	.word	0x08011598
 800e8d0:	3ff00000 	.word	0x3ff00000
 800e8d4:	40240000 	.word	0x40240000
 800e8d8:	401c0000 	.word	0x401c0000
 800e8dc:	40140000 	.word	0x40140000
 800e8e0:	3fe00000 	.word	0x3fe00000
 800e8e4:	9d01      	ldr	r5, [sp, #4]
 800e8e6:	4656      	mov	r6, sl
 800e8e8:	465f      	mov	r7, fp
 800e8ea:	4642      	mov	r2, r8
 800e8ec:	464b      	mov	r3, r9
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	4639      	mov	r1, r7
 800e8f2:	f7f1 ffb3 	bl	800085c <__aeabi_ddiv>
 800e8f6:	f7f2 f937 	bl	8000b68 <__aeabi_d2iz>
 800e8fa:	4682      	mov	sl, r0
 800e8fc:	f7f1 fe1a 	bl	8000534 <__aeabi_i2d>
 800e900:	4642      	mov	r2, r8
 800e902:	464b      	mov	r3, r9
 800e904:	f7f1 fe80 	bl	8000608 <__aeabi_dmul>
 800e908:	4602      	mov	r2, r0
 800e90a:	460b      	mov	r3, r1
 800e90c:	4630      	mov	r0, r6
 800e90e:	4639      	mov	r1, r7
 800e910:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e914:	f7f1 fcc0 	bl	8000298 <__aeabi_dsub>
 800e918:	f805 6b01 	strb.w	r6, [r5], #1
 800e91c:	9e01      	ldr	r6, [sp, #4]
 800e91e:	9f03      	ldr	r7, [sp, #12]
 800e920:	1bae      	subs	r6, r5, r6
 800e922:	42b7      	cmp	r7, r6
 800e924:	4602      	mov	r2, r0
 800e926:	460b      	mov	r3, r1
 800e928:	d135      	bne.n	800e996 <_dtoa_r+0x6e6>
 800e92a:	f7f1 fcb7 	bl	800029c <__adddf3>
 800e92e:	4642      	mov	r2, r8
 800e930:	464b      	mov	r3, r9
 800e932:	4606      	mov	r6, r0
 800e934:	460f      	mov	r7, r1
 800e936:	f7f2 f8f7 	bl	8000b28 <__aeabi_dcmpgt>
 800e93a:	b9d0      	cbnz	r0, 800e972 <_dtoa_r+0x6c2>
 800e93c:	4642      	mov	r2, r8
 800e93e:	464b      	mov	r3, r9
 800e940:	4630      	mov	r0, r6
 800e942:	4639      	mov	r1, r7
 800e944:	f7f2 f8c8 	bl	8000ad8 <__aeabi_dcmpeq>
 800e948:	b110      	cbz	r0, 800e950 <_dtoa_r+0x6a0>
 800e94a:	f01a 0f01 	tst.w	sl, #1
 800e94e:	d110      	bne.n	800e972 <_dtoa_r+0x6c2>
 800e950:	4620      	mov	r0, r4
 800e952:	ee18 1a10 	vmov	r1, s16
 800e956:	f000 fe67 	bl	800f628 <_Bfree>
 800e95a:	2300      	movs	r3, #0
 800e95c:	9800      	ldr	r0, [sp, #0]
 800e95e:	702b      	strb	r3, [r5, #0]
 800e960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e962:	3001      	adds	r0, #1
 800e964:	6018      	str	r0, [r3, #0]
 800e966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e968:	2b00      	cmp	r3, #0
 800e96a:	f43f acf1 	beq.w	800e350 <_dtoa_r+0xa0>
 800e96e:	601d      	str	r5, [r3, #0]
 800e970:	e4ee      	b.n	800e350 <_dtoa_r+0xa0>
 800e972:	9f00      	ldr	r7, [sp, #0]
 800e974:	462b      	mov	r3, r5
 800e976:	461d      	mov	r5, r3
 800e978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e97c:	2a39      	cmp	r2, #57	; 0x39
 800e97e:	d106      	bne.n	800e98e <_dtoa_r+0x6de>
 800e980:	9a01      	ldr	r2, [sp, #4]
 800e982:	429a      	cmp	r2, r3
 800e984:	d1f7      	bne.n	800e976 <_dtoa_r+0x6c6>
 800e986:	9901      	ldr	r1, [sp, #4]
 800e988:	2230      	movs	r2, #48	; 0x30
 800e98a:	3701      	adds	r7, #1
 800e98c:	700a      	strb	r2, [r1, #0]
 800e98e:	781a      	ldrb	r2, [r3, #0]
 800e990:	3201      	adds	r2, #1
 800e992:	701a      	strb	r2, [r3, #0]
 800e994:	e790      	b.n	800e8b8 <_dtoa_r+0x608>
 800e996:	4ba6      	ldr	r3, [pc, #664]	; (800ec30 <_dtoa_r+0x980>)
 800e998:	2200      	movs	r2, #0
 800e99a:	f7f1 fe35 	bl	8000608 <__aeabi_dmul>
 800e99e:	2200      	movs	r2, #0
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	4606      	mov	r6, r0
 800e9a4:	460f      	mov	r7, r1
 800e9a6:	f7f2 f897 	bl	8000ad8 <__aeabi_dcmpeq>
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	d09d      	beq.n	800e8ea <_dtoa_r+0x63a>
 800e9ae:	e7cf      	b.n	800e950 <_dtoa_r+0x6a0>
 800e9b0:	9a08      	ldr	r2, [sp, #32]
 800e9b2:	2a00      	cmp	r2, #0
 800e9b4:	f000 80d7 	beq.w	800eb66 <_dtoa_r+0x8b6>
 800e9b8:	9a06      	ldr	r2, [sp, #24]
 800e9ba:	2a01      	cmp	r2, #1
 800e9bc:	f300 80ba 	bgt.w	800eb34 <_dtoa_r+0x884>
 800e9c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9c2:	2a00      	cmp	r2, #0
 800e9c4:	f000 80b2 	beq.w	800eb2c <_dtoa_r+0x87c>
 800e9c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e9cc:	9e07      	ldr	r6, [sp, #28]
 800e9ce:	9d04      	ldr	r5, [sp, #16]
 800e9d0:	9a04      	ldr	r2, [sp, #16]
 800e9d2:	441a      	add	r2, r3
 800e9d4:	9204      	str	r2, [sp, #16]
 800e9d6:	9a05      	ldr	r2, [sp, #20]
 800e9d8:	2101      	movs	r1, #1
 800e9da:	441a      	add	r2, r3
 800e9dc:	4620      	mov	r0, r4
 800e9de:	9205      	str	r2, [sp, #20]
 800e9e0:	f000 ff24 	bl	800f82c <__i2b>
 800e9e4:	4607      	mov	r7, r0
 800e9e6:	2d00      	cmp	r5, #0
 800e9e8:	dd0c      	ble.n	800ea04 <_dtoa_r+0x754>
 800e9ea:	9b05      	ldr	r3, [sp, #20]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	dd09      	ble.n	800ea04 <_dtoa_r+0x754>
 800e9f0:	42ab      	cmp	r3, r5
 800e9f2:	9a04      	ldr	r2, [sp, #16]
 800e9f4:	bfa8      	it	ge
 800e9f6:	462b      	movge	r3, r5
 800e9f8:	1ad2      	subs	r2, r2, r3
 800e9fa:	9204      	str	r2, [sp, #16]
 800e9fc:	9a05      	ldr	r2, [sp, #20]
 800e9fe:	1aed      	subs	r5, r5, r3
 800ea00:	1ad3      	subs	r3, r2, r3
 800ea02:	9305      	str	r3, [sp, #20]
 800ea04:	9b07      	ldr	r3, [sp, #28]
 800ea06:	b31b      	cbz	r3, 800ea50 <_dtoa_r+0x7a0>
 800ea08:	9b08      	ldr	r3, [sp, #32]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	f000 80af 	beq.w	800eb6e <_dtoa_r+0x8be>
 800ea10:	2e00      	cmp	r6, #0
 800ea12:	dd13      	ble.n	800ea3c <_dtoa_r+0x78c>
 800ea14:	4639      	mov	r1, r7
 800ea16:	4632      	mov	r2, r6
 800ea18:	4620      	mov	r0, r4
 800ea1a:	f000 ffc7 	bl	800f9ac <__pow5mult>
 800ea1e:	ee18 2a10 	vmov	r2, s16
 800ea22:	4601      	mov	r1, r0
 800ea24:	4607      	mov	r7, r0
 800ea26:	4620      	mov	r0, r4
 800ea28:	f000 ff16 	bl	800f858 <__multiply>
 800ea2c:	ee18 1a10 	vmov	r1, s16
 800ea30:	4680      	mov	r8, r0
 800ea32:	4620      	mov	r0, r4
 800ea34:	f000 fdf8 	bl	800f628 <_Bfree>
 800ea38:	ee08 8a10 	vmov	s16, r8
 800ea3c:	9b07      	ldr	r3, [sp, #28]
 800ea3e:	1b9a      	subs	r2, r3, r6
 800ea40:	d006      	beq.n	800ea50 <_dtoa_r+0x7a0>
 800ea42:	ee18 1a10 	vmov	r1, s16
 800ea46:	4620      	mov	r0, r4
 800ea48:	f000 ffb0 	bl	800f9ac <__pow5mult>
 800ea4c:	ee08 0a10 	vmov	s16, r0
 800ea50:	2101      	movs	r1, #1
 800ea52:	4620      	mov	r0, r4
 800ea54:	f000 feea 	bl	800f82c <__i2b>
 800ea58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	4606      	mov	r6, r0
 800ea5e:	f340 8088 	ble.w	800eb72 <_dtoa_r+0x8c2>
 800ea62:	461a      	mov	r2, r3
 800ea64:	4601      	mov	r1, r0
 800ea66:	4620      	mov	r0, r4
 800ea68:	f000 ffa0 	bl	800f9ac <__pow5mult>
 800ea6c:	9b06      	ldr	r3, [sp, #24]
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	4606      	mov	r6, r0
 800ea72:	f340 8081 	ble.w	800eb78 <_dtoa_r+0x8c8>
 800ea76:	f04f 0800 	mov.w	r8, #0
 800ea7a:	6933      	ldr	r3, [r6, #16]
 800ea7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ea80:	6918      	ldr	r0, [r3, #16]
 800ea82:	f000 fe83 	bl	800f78c <__hi0bits>
 800ea86:	f1c0 0020 	rsb	r0, r0, #32
 800ea8a:	9b05      	ldr	r3, [sp, #20]
 800ea8c:	4418      	add	r0, r3
 800ea8e:	f010 001f 	ands.w	r0, r0, #31
 800ea92:	f000 8092 	beq.w	800ebba <_dtoa_r+0x90a>
 800ea96:	f1c0 0320 	rsb	r3, r0, #32
 800ea9a:	2b04      	cmp	r3, #4
 800ea9c:	f340 808a 	ble.w	800ebb4 <_dtoa_r+0x904>
 800eaa0:	f1c0 001c 	rsb	r0, r0, #28
 800eaa4:	9b04      	ldr	r3, [sp, #16]
 800eaa6:	4403      	add	r3, r0
 800eaa8:	9304      	str	r3, [sp, #16]
 800eaaa:	9b05      	ldr	r3, [sp, #20]
 800eaac:	4403      	add	r3, r0
 800eaae:	4405      	add	r5, r0
 800eab0:	9305      	str	r3, [sp, #20]
 800eab2:	9b04      	ldr	r3, [sp, #16]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	dd07      	ble.n	800eac8 <_dtoa_r+0x818>
 800eab8:	ee18 1a10 	vmov	r1, s16
 800eabc:	461a      	mov	r2, r3
 800eabe:	4620      	mov	r0, r4
 800eac0:	f000 ffce 	bl	800fa60 <__lshift>
 800eac4:	ee08 0a10 	vmov	s16, r0
 800eac8:	9b05      	ldr	r3, [sp, #20]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	dd05      	ble.n	800eada <_dtoa_r+0x82a>
 800eace:	4631      	mov	r1, r6
 800ead0:	461a      	mov	r2, r3
 800ead2:	4620      	mov	r0, r4
 800ead4:	f000 ffc4 	bl	800fa60 <__lshift>
 800ead8:	4606      	mov	r6, r0
 800eada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d06e      	beq.n	800ebbe <_dtoa_r+0x90e>
 800eae0:	ee18 0a10 	vmov	r0, s16
 800eae4:	4631      	mov	r1, r6
 800eae6:	f001 f82b 	bl	800fb40 <__mcmp>
 800eaea:	2800      	cmp	r0, #0
 800eaec:	da67      	bge.n	800ebbe <_dtoa_r+0x90e>
 800eaee:	9b00      	ldr	r3, [sp, #0]
 800eaf0:	3b01      	subs	r3, #1
 800eaf2:	ee18 1a10 	vmov	r1, s16
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	220a      	movs	r2, #10
 800eafa:	2300      	movs	r3, #0
 800eafc:	4620      	mov	r0, r4
 800eafe:	f000 fdb5 	bl	800f66c <__multadd>
 800eb02:	9b08      	ldr	r3, [sp, #32]
 800eb04:	ee08 0a10 	vmov	s16, r0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	f000 81b1 	beq.w	800ee70 <_dtoa_r+0xbc0>
 800eb0e:	2300      	movs	r3, #0
 800eb10:	4639      	mov	r1, r7
 800eb12:	220a      	movs	r2, #10
 800eb14:	4620      	mov	r0, r4
 800eb16:	f000 fda9 	bl	800f66c <__multadd>
 800eb1a:	9b02      	ldr	r3, [sp, #8]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	4607      	mov	r7, r0
 800eb20:	f300 808e 	bgt.w	800ec40 <_dtoa_r+0x990>
 800eb24:	9b06      	ldr	r3, [sp, #24]
 800eb26:	2b02      	cmp	r3, #2
 800eb28:	dc51      	bgt.n	800ebce <_dtoa_r+0x91e>
 800eb2a:	e089      	b.n	800ec40 <_dtoa_r+0x990>
 800eb2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eb32:	e74b      	b.n	800e9cc <_dtoa_r+0x71c>
 800eb34:	9b03      	ldr	r3, [sp, #12]
 800eb36:	1e5e      	subs	r6, r3, #1
 800eb38:	9b07      	ldr	r3, [sp, #28]
 800eb3a:	42b3      	cmp	r3, r6
 800eb3c:	bfbf      	itttt	lt
 800eb3e:	9b07      	ldrlt	r3, [sp, #28]
 800eb40:	9607      	strlt	r6, [sp, #28]
 800eb42:	1af2      	sublt	r2, r6, r3
 800eb44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800eb46:	bfb6      	itet	lt
 800eb48:	189b      	addlt	r3, r3, r2
 800eb4a:	1b9e      	subge	r6, r3, r6
 800eb4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800eb4e:	9b03      	ldr	r3, [sp, #12]
 800eb50:	bfb8      	it	lt
 800eb52:	2600      	movlt	r6, #0
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	bfb7      	itett	lt
 800eb58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800eb5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800eb60:	1a9d      	sublt	r5, r3, r2
 800eb62:	2300      	movlt	r3, #0
 800eb64:	e734      	b.n	800e9d0 <_dtoa_r+0x720>
 800eb66:	9e07      	ldr	r6, [sp, #28]
 800eb68:	9d04      	ldr	r5, [sp, #16]
 800eb6a:	9f08      	ldr	r7, [sp, #32]
 800eb6c:	e73b      	b.n	800e9e6 <_dtoa_r+0x736>
 800eb6e:	9a07      	ldr	r2, [sp, #28]
 800eb70:	e767      	b.n	800ea42 <_dtoa_r+0x792>
 800eb72:	9b06      	ldr	r3, [sp, #24]
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	dc18      	bgt.n	800ebaa <_dtoa_r+0x8fa>
 800eb78:	f1ba 0f00 	cmp.w	sl, #0
 800eb7c:	d115      	bne.n	800ebaa <_dtoa_r+0x8fa>
 800eb7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eb82:	b993      	cbnz	r3, 800ebaa <_dtoa_r+0x8fa>
 800eb84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eb88:	0d1b      	lsrs	r3, r3, #20
 800eb8a:	051b      	lsls	r3, r3, #20
 800eb8c:	b183      	cbz	r3, 800ebb0 <_dtoa_r+0x900>
 800eb8e:	9b04      	ldr	r3, [sp, #16]
 800eb90:	3301      	adds	r3, #1
 800eb92:	9304      	str	r3, [sp, #16]
 800eb94:	9b05      	ldr	r3, [sp, #20]
 800eb96:	3301      	adds	r3, #1
 800eb98:	9305      	str	r3, [sp, #20]
 800eb9a:	f04f 0801 	mov.w	r8, #1
 800eb9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	f47f af6a 	bne.w	800ea7a <_dtoa_r+0x7ca>
 800eba6:	2001      	movs	r0, #1
 800eba8:	e76f      	b.n	800ea8a <_dtoa_r+0x7da>
 800ebaa:	f04f 0800 	mov.w	r8, #0
 800ebae:	e7f6      	b.n	800eb9e <_dtoa_r+0x8ee>
 800ebb0:	4698      	mov	r8, r3
 800ebb2:	e7f4      	b.n	800eb9e <_dtoa_r+0x8ee>
 800ebb4:	f43f af7d 	beq.w	800eab2 <_dtoa_r+0x802>
 800ebb8:	4618      	mov	r0, r3
 800ebba:	301c      	adds	r0, #28
 800ebbc:	e772      	b.n	800eaa4 <_dtoa_r+0x7f4>
 800ebbe:	9b03      	ldr	r3, [sp, #12]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	dc37      	bgt.n	800ec34 <_dtoa_r+0x984>
 800ebc4:	9b06      	ldr	r3, [sp, #24]
 800ebc6:	2b02      	cmp	r3, #2
 800ebc8:	dd34      	ble.n	800ec34 <_dtoa_r+0x984>
 800ebca:	9b03      	ldr	r3, [sp, #12]
 800ebcc:	9302      	str	r3, [sp, #8]
 800ebce:	9b02      	ldr	r3, [sp, #8]
 800ebd0:	b96b      	cbnz	r3, 800ebee <_dtoa_r+0x93e>
 800ebd2:	4631      	mov	r1, r6
 800ebd4:	2205      	movs	r2, #5
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	f000 fd48 	bl	800f66c <__multadd>
 800ebdc:	4601      	mov	r1, r0
 800ebde:	4606      	mov	r6, r0
 800ebe0:	ee18 0a10 	vmov	r0, s16
 800ebe4:	f000 ffac 	bl	800fb40 <__mcmp>
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	f73f adbb 	bgt.w	800e764 <_dtoa_r+0x4b4>
 800ebee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebf0:	9d01      	ldr	r5, [sp, #4]
 800ebf2:	43db      	mvns	r3, r3
 800ebf4:	9300      	str	r3, [sp, #0]
 800ebf6:	f04f 0800 	mov.w	r8, #0
 800ebfa:	4631      	mov	r1, r6
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f000 fd13 	bl	800f628 <_Bfree>
 800ec02:	2f00      	cmp	r7, #0
 800ec04:	f43f aea4 	beq.w	800e950 <_dtoa_r+0x6a0>
 800ec08:	f1b8 0f00 	cmp.w	r8, #0
 800ec0c:	d005      	beq.n	800ec1a <_dtoa_r+0x96a>
 800ec0e:	45b8      	cmp	r8, r7
 800ec10:	d003      	beq.n	800ec1a <_dtoa_r+0x96a>
 800ec12:	4641      	mov	r1, r8
 800ec14:	4620      	mov	r0, r4
 800ec16:	f000 fd07 	bl	800f628 <_Bfree>
 800ec1a:	4639      	mov	r1, r7
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	f000 fd03 	bl	800f628 <_Bfree>
 800ec22:	e695      	b.n	800e950 <_dtoa_r+0x6a0>
 800ec24:	2600      	movs	r6, #0
 800ec26:	4637      	mov	r7, r6
 800ec28:	e7e1      	b.n	800ebee <_dtoa_r+0x93e>
 800ec2a:	9700      	str	r7, [sp, #0]
 800ec2c:	4637      	mov	r7, r6
 800ec2e:	e599      	b.n	800e764 <_dtoa_r+0x4b4>
 800ec30:	40240000 	.word	0x40240000
 800ec34:	9b08      	ldr	r3, [sp, #32]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	f000 80ca 	beq.w	800edd0 <_dtoa_r+0xb20>
 800ec3c:	9b03      	ldr	r3, [sp, #12]
 800ec3e:	9302      	str	r3, [sp, #8]
 800ec40:	2d00      	cmp	r5, #0
 800ec42:	dd05      	ble.n	800ec50 <_dtoa_r+0x9a0>
 800ec44:	4639      	mov	r1, r7
 800ec46:	462a      	mov	r2, r5
 800ec48:	4620      	mov	r0, r4
 800ec4a:	f000 ff09 	bl	800fa60 <__lshift>
 800ec4e:	4607      	mov	r7, r0
 800ec50:	f1b8 0f00 	cmp.w	r8, #0
 800ec54:	d05b      	beq.n	800ed0e <_dtoa_r+0xa5e>
 800ec56:	6879      	ldr	r1, [r7, #4]
 800ec58:	4620      	mov	r0, r4
 800ec5a:	f000 fca5 	bl	800f5a8 <_Balloc>
 800ec5e:	4605      	mov	r5, r0
 800ec60:	b928      	cbnz	r0, 800ec6e <_dtoa_r+0x9be>
 800ec62:	4b87      	ldr	r3, [pc, #540]	; (800ee80 <_dtoa_r+0xbd0>)
 800ec64:	4602      	mov	r2, r0
 800ec66:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ec6a:	f7ff bb3b 	b.w	800e2e4 <_dtoa_r+0x34>
 800ec6e:	693a      	ldr	r2, [r7, #16]
 800ec70:	3202      	adds	r2, #2
 800ec72:	0092      	lsls	r2, r2, #2
 800ec74:	f107 010c 	add.w	r1, r7, #12
 800ec78:	300c      	adds	r0, #12
 800ec7a:	f7fd fd2b 	bl	800c6d4 <memcpy>
 800ec7e:	2201      	movs	r2, #1
 800ec80:	4629      	mov	r1, r5
 800ec82:	4620      	mov	r0, r4
 800ec84:	f000 feec 	bl	800fa60 <__lshift>
 800ec88:	9b01      	ldr	r3, [sp, #4]
 800ec8a:	f103 0901 	add.w	r9, r3, #1
 800ec8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ec92:	4413      	add	r3, r2
 800ec94:	9305      	str	r3, [sp, #20]
 800ec96:	f00a 0301 	and.w	r3, sl, #1
 800ec9a:	46b8      	mov	r8, r7
 800ec9c:	9304      	str	r3, [sp, #16]
 800ec9e:	4607      	mov	r7, r0
 800eca0:	4631      	mov	r1, r6
 800eca2:	ee18 0a10 	vmov	r0, s16
 800eca6:	f7ff fa77 	bl	800e198 <quorem>
 800ecaa:	4641      	mov	r1, r8
 800ecac:	9002      	str	r0, [sp, #8]
 800ecae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ecb2:	ee18 0a10 	vmov	r0, s16
 800ecb6:	f000 ff43 	bl	800fb40 <__mcmp>
 800ecba:	463a      	mov	r2, r7
 800ecbc:	9003      	str	r0, [sp, #12]
 800ecbe:	4631      	mov	r1, r6
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	f000 ff59 	bl	800fb78 <__mdiff>
 800ecc6:	68c2      	ldr	r2, [r0, #12]
 800ecc8:	f109 3bff 	add.w	fp, r9, #4294967295
 800eccc:	4605      	mov	r5, r0
 800ecce:	bb02      	cbnz	r2, 800ed12 <_dtoa_r+0xa62>
 800ecd0:	4601      	mov	r1, r0
 800ecd2:	ee18 0a10 	vmov	r0, s16
 800ecd6:	f000 ff33 	bl	800fb40 <__mcmp>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	4629      	mov	r1, r5
 800ecde:	4620      	mov	r0, r4
 800ece0:	9207      	str	r2, [sp, #28]
 800ece2:	f000 fca1 	bl	800f628 <_Bfree>
 800ece6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ecea:	ea43 0102 	orr.w	r1, r3, r2
 800ecee:	9b04      	ldr	r3, [sp, #16]
 800ecf0:	430b      	orrs	r3, r1
 800ecf2:	464d      	mov	r5, r9
 800ecf4:	d10f      	bne.n	800ed16 <_dtoa_r+0xa66>
 800ecf6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ecfa:	d02a      	beq.n	800ed52 <_dtoa_r+0xaa2>
 800ecfc:	9b03      	ldr	r3, [sp, #12]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	dd02      	ble.n	800ed08 <_dtoa_r+0xa58>
 800ed02:	9b02      	ldr	r3, [sp, #8]
 800ed04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ed08:	f88b a000 	strb.w	sl, [fp]
 800ed0c:	e775      	b.n	800ebfa <_dtoa_r+0x94a>
 800ed0e:	4638      	mov	r0, r7
 800ed10:	e7ba      	b.n	800ec88 <_dtoa_r+0x9d8>
 800ed12:	2201      	movs	r2, #1
 800ed14:	e7e2      	b.n	800ecdc <_dtoa_r+0xa2c>
 800ed16:	9b03      	ldr	r3, [sp, #12]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	db04      	blt.n	800ed26 <_dtoa_r+0xa76>
 800ed1c:	9906      	ldr	r1, [sp, #24]
 800ed1e:	430b      	orrs	r3, r1
 800ed20:	9904      	ldr	r1, [sp, #16]
 800ed22:	430b      	orrs	r3, r1
 800ed24:	d122      	bne.n	800ed6c <_dtoa_r+0xabc>
 800ed26:	2a00      	cmp	r2, #0
 800ed28:	ddee      	ble.n	800ed08 <_dtoa_r+0xa58>
 800ed2a:	ee18 1a10 	vmov	r1, s16
 800ed2e:	2201      	movs	r2, #1
 800ed30:	4620      	mov	r0, r4
 800ed32:	f000 fe95 	bl	800fa60 <__lshift>
 800ed36:	4631      	mov	r1, r6
 800ed38:	ee08 0a10 	vmov	s16, r0
 800ed3c:	f000 ff00 	bl	800fb40 <__mcmp>
 800ed40:	2800      	cmp	r0, #0
 800ed42:	dc03      	bgt.n	800ed4c <_dtoa_r+0xa9c>
 800ed44:	d1e0      	bne.n	800ed08 <_dtoa_r+0xa58>
 800ed46:	f01a 0f01 	tst.w	sl, #1
 800ed4a:	d0dd      	beq.n	800ed08 <_dtoa_r+0xa58>
 800ed4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ed50:	d1d7      	bne.n	800ed02 <_dtoa_r+0xa52>
 800ed52:	2339      	movs	r3, #57	; 0x39
 800ed54:	f88b 3000 	strb.w	r3, [fp]
 800ed58:	462b      	mov	r3, r5
 800ed5a:	461d      	mov	r5, r3
 800ed5c:	3b01      	subs	r3, #1
 800ed5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ed62:	2a39      	cmp	r2, #57	; 0x39
 800ed64:	d071      	beq.n	800ee4a <_dtoa_r+0xb9a>
 800ed66:	3201      	adds	r2, #1
 800ed68:	701a      	strb	r2, [r3, #0]
 800ed6a:	e746      	b.n	800ebfa <_dtoa_r+0x94a>
 800ed6c:	2a00      	cmp	r2, #0
 800ed6e:	dd07      	ble.n	800ed80 <_dtoa_r+0xad0>
 800ed70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ed74:	d0ed      	beq.n	800ed52 <_dtoa_r+0xaa2>
 800ed76:	f10a 0301 	add.w	r3, sl, #1
 800ed7a:	f88b 3000 	strb.w	r3, [fp]
 800ed7e:	e73c      	b.n	800ebfa <_dtoa_r+0x94a>
 800ed80:	9b05      	ldr	r3, [sp, #20]
 800ed82:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ed86:	4599      	cmp	r9, r3
 800ed88:	d047      	beq.n	800ee1a <_dtoa_r+0xb6a>
 800ed8a:	ee18 1a10 	vmov	r1, s16
 800ed8e:	2300      	movs	r3, #0
 800ed90:	220a      	movs	r2, #10
 800ed92:	4620      	mov	r0, r4
 800ed94:	f000 fc6a 	bl	800f66c <__multadd>
 800ed98:	45b8      	cmp	r8, r7
 800ed9a:	ee08 0a10 	vmov	s16, r0
 800ed9e:	f04f 0300 	mov.w	r3, #0
 800eda2:	f04f 020a 	mov.w	r2, #10
 800eda6:	4641      	mov	r1, r8
 800eda8:	4620      	mov	r0, r4
 800edaa:	d106      	bne.n	800edba <_dtoa_r+0xb0a>
 800edac:	f000 fc5e 	bl	800f66c <__multadd>
 800edb0:	4680      	mov	r8, r0
 800edb2:	4607      	mov	r7, r0
 800edb4:	f109 0901 	add.w	r9, r9, #1
 800edb8:	e772      	b.n	800eca0 <_dtoa_r+0x9f0>
 800edba:	f000 fc57 	bl	800f66c <__multadd>
 800edbe:	4639      	mov	r1, r7
 800edc0:	4680      	mov	r8, r0
 800edc2:	2300      	movs	r3, #0
 800edc4:	220a      	movs	r2, #10
 800edc6:	4620      	mov	r0, r4
 800edc8:	f000 fc50 	bl	800f66c <__multadd>
 800edcc:	4607      	mov	r7, r0
 800edce:	e7f1      	b.n	800edb4 <_dtoa_r+0xb04>
 800edd0:	9b03      	ldr	r3, [sp, #12]
 800edd2:	9302      	str	r3, [sp, #8]
 800edd4:	9d01      	ldr	r5, [sp, #4]
 800edd6:	ee18 0a10 	vmov	r0, s16
 800edda:	4631      	mov	r1, r6
 800eddc:	f7ff f9dc 	bl	800e198 <quorem>
 800ede0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ede4:	9b01      	ldr	r3, [sp, #4]
 800ede6:	f805 ab01 	strb.w	sl, [r5], #1
 800edea:	1aea      	subs	r2, r5, r3
 800edec:	9b02      	ldr	r3, [sp, #8]
 800edee:	4293      	cmp	r3, r2
 800edf0:	dd09      	ble.n	800ee06 <_dtoa_r+0xb56>
 800edf2:	ee18 1a10 	vmov	r1, s16
 800edf6:	2300      	movs	r3, #0
 800edf8:	220a      	movs	r2, #10
 800edfa:	4620      	mov	r0, r4
 800edfc:	f000 fc36 	bl	800f66c <__multadd>
 800ee00:	ee08 0a10 	vmov	s16, r0
 800ee04:	e7e7      	b.n	800edd6 <_dtoa_r+0xb26>
 800ee06:	9b02      	ldr	r3, [sp, #8]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	bfc8      	it	gt
 800ee0c:	461d      	movgt	r5, r3
 800ee0e:	9b01      	ldr	r3, [sp, #4]
 800ee10:	bfd8      	it	le
 800ee12:	2501      	movle	r5, #1
 800ee14:	441d      	add	r5, r3
 800ee16:	f04f 0800 	mov.w	r8, #0
 800ee1a:	ee18 1a10 	vmov	r1, s16
 800ee1e:	2201      	movs	r2, #1
 800ee20:	4620      	mov	r0, r4
 800ee22:	f000 fe1d 	bl	800fa60 <__lshift>
 800ee26:	4631      	mov	r1, r6
 800ee28:	ee08 0a10 	vmov	s16, r0
 800ee2c:	f000 fe88 	bl	800fb40 <__mcmp>
 800ee30:	2800      	cmp	r0, #0
 800ee32:	dc91      	bgt.n	800ed58 <_dtoa_r+0xaa8>
 800ee34:	d102      	bne.n	800ee3c <_dtoa_r+0xb8c>
 800ee36:	f01a 0f01 	tst.w	sl, #1
 800ee3a:	d18d      	bne.n	800ed58 <_dtoa_r+0xaa8>
 800ee3c:	462b      	mov	r3, r5
 800ee3e:	461d      	mov	r5, r3
 800ee40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee44:	2a30      	cmp	r2, #48	; 0x30
 800ee46:	d0fa      	beq.n	800ee3e <_dtoa_r+0xb8e>
 800ee48:	e6d7      	b.n	800ebfa <_dtoa_r+0x94a>
 800ee4a:	9a01      	ldr	r2, [sp, #4]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d184      	bne.n	800ed5a <_dtoa_r+0xaaa>
 800ee50:	9b00      	ldr	r3, [sp, #0]
 800ee52:	3301      	adds	r3, #1
 800ee54:	9300      	str	r3, [sp, #0]
 800ee56:	2331      	movs	r3, #49	; 0x31
 800ee58:	7013      	strb	r3, [r2, #0]
 800ee5a:	e6ce      	b.n	800ebfa <_dtoa_r+0x94a>
 800ee5c:	4b09      	ldr	r3, [pc, #36]	; (800ee84 <_dtoa_r+0xbd4>)
 800ee5e:	f7ff ba95 	b.w	800e38c <_dtoa_r+0xdc>
 800ee62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	f47f aa6e 	bne.w	800e346 <_dtoa_r+0x96>
 800ee6a:	4b07      	ldr	r3, [pc, #28]	; (800ee88 <_dtoa_r+0xbd8>)
 800ee6c:	f7ff ba8e 	b.w	800e38c <_dtoa_r+0xdc>
 800ee70:	9b02      	ldr	r3, [sp, #8]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	dcae      	bgt.n	800edd4 <_dtoa_r+0xb24>
 800ee76:	9b06      	ldr	r3, [sp, #24]
 800ee78:	2b02      	cmp	r3, #2
 800ee7a:	f73f aea8 	bgt.w	800ebce <_dtoa_r+0x91e>
 800ee7e:	e7a9      	b.n	800edd4 <_dtoa_r+0xb24>
 800ee80:	080114b0 	.word	0x080114b0
 800ee84:	080112b4 	.word	0x080112b4
 800ee88:	08011431 	.word	0x08011431

0800ee8c <rshift>:
 800ee8c:	6903      	ldr	r3, [r0, #16]
 800ee8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ee92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee96:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ee9a:	f100 0414 	add.w	r4, r0, #20
 800ee9e:	dd45      	ble.n	800ef2c <rshift+0xa0>
 800eea0:	f011 011f 	ands.w	r1, r1, #31
 800eea4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eea8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eeac:	d10c      	bne.n	800eec8 <rshift+0x3c>
 800eeae:	f100 0710 	add.w	r7, r0, #16
 800eeb2:	4629      	mov	r1, r5
 800eeb4:	42b1      	cmp	r1, r6
 800eeb6:	d334      	bcc.n	800ef22 <rshift+0x96>
 800eeb8:	1a9b      	subs	r3, r3, r2
 800eeba:	009b      	lsls	r3, r3, #2
 800eebc:	1eea      	subs	r2, r5, #3
 800eebe:	4296      	cmp	r6, r2
 800eec0:	bf38      	it	cc
 800eec2:	2300      	movcc	r3, #0
 800eec4:	4423      	add	r3, r4
 800eec6:	e015      	b.n	800eef4 <rshift+0x68>
 800eec8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800eecc:	f1c1 0820 	rsb	r8, r1, #32
 800eed0:	40cf      	lsrs	r7, r1
 800eed2:	f105 0e04 	add.w	lr, r5, #4
 800eed6:	46a1      	mov	r9, r4
 800eed8:	4576      	cmp	r6, lr
 800eeda:	46f4      	mov	ip, lr
 800eedc:	d815      	bhi.n	800ef0a <rshift+0x7e>
 800eede:	1a9a      	subs	r2, r3, r2
 800eee0:	0092      	lsls	r2, r2, #2
 800eee2:	3a04      	subs	r2, #4
 800eee4:	3501      	adds	r5, #1
 800eee6:	42ae      	cmp	r6, r5
 800eee8:	bf38      	it	cc
 800eeea:	2200      	movcc	r2, #0
 800eeec:	18a3      	adds	r3, r4, r2
 800eeee:	50a7      	str	r7, [r4, r2]
 800eef0:	b107      	cbz	r7, 800eef4 <rshift+0x68>
 800eef2:	3304      	adds	r3, #4
 800eef4:	1b1a      	subs	r2, r3, r4
 800eef6:	42a3      	cmp	r3, r4
 800eef8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eefc:	bf08      	it	eq
 800eefe:	2300      	moveq	r3, #0
 800ef00:	6102      	str	r2, [r0, #16]
 800ef02:	bf08      	it	eq
 800ef04:	6143      	streq	r3, [r0, #20]
 800ef06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef0a:	f8dc c000 	ldr.w	ip, [ip]
 800ef0e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ef12:	ea4c 0707 	orr.w	r7, ip, r7
 800ef16:	f849 7b04 	str.w	r7, [r9], #4
 800ef1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ef1e:	40cf      	lsrs	r7, r1
 800ef20:	e7da      	b.n	800eed8 <rshift+0x4c>
 800ef22:	f851 cb04 	ldr.w	ip, [r1], #4
 800ef26:	f847 cf04 	str.w	ip, [r7, #4]!
 800ef2a:	e7c3      	b.n	800eeb4 <rshift+0x28>
 800ef2c:	4623      	mov	r3, r4
 800ef2e:	e7e1      	b.n	800eef4 <rshift+0x68>

0800ef30 <__hexdig_fun>:
 800ef30:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ef34:	2b09      	cmp	r3, #9
 800ef36:	d802      	bhi.n	800ef3e <__hexdig_fun+0xe>
 800ef38:	3820      	subs	r0, #32
 800ef3a:	b2c0      	uxtb	r0, r0
 800ef3c:	4770      	bx	lr
 800ef3e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ef42:	2b05      	cmp	r3, #5
 800ef44:	d801      	bhi.n	800ef4a <__hexdig_fun+0x1a>
 800ef46:	3847      	subs	r0, #71	; 0x47
 800ef48:	e7f7      	b.n	800ef3a <__hexdig_fun+0xa>
 800ef4a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ef4e:	2b05      	cmp	r3, #5
 800ef50:	d801      	bhi.n	800ef56 <__hexdig_fun+0x26>
 800ef52:	3827      	subs	r0, #39	; 0x27
 800ef54:	e7f1      	b.n	800ef3a <__hexdig_fun+0xa>
 800ef56:	2000      	movs	r0, #0
 800ef58:	4770      	bx	lr
	...

0800ef5c <__gethex>:
 800ef5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef60:	ed2d 8b02 	vpush	{d8}
 800ef64:	b089      	sub	sp, #36	; 0x24
 800ef66:	ee08 0a10 	vmov	s16, r0
 800ef6a:	9304      	str	r3, [sp, #16]
 800ef6c:	4bb4      	ldr	r3, [pc, #720]	; (800f240 <__gethex+0x2e4>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	9301      	str	r3, [sp, #4]
 800ef72:	4618      	mov	r0, r3
 800ef74:	468b      	mov	fp, r1
 800ef76:	4690      	mov	r8, r2
 800ef78:	f7f1 f932 	bl	80001e0 <strlen>
 800ef7c:	9b01      	ldr	r3, [sp, #4]
 800ef7e:	f8db 2000 	ldr.w	r2, [fp]
 800ef82:	4403      	add	r3, r0
 800ef84:	4682      	mov	sl, r0
 800ef86:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ef8a:	9305      	str	r3, [sp, #20]
 800ef8c:	1c93      	adds	r3, r2, #2
 800ef8e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ef92:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ef96:	32fe      	adds	r2, #254	; 0xfe
 800ef98:	18d1      	adds	r1, r2, r3
 800ef9a:	461f      	mov	r7, r3
 800ef9c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800efa0:	9100      	str	r1, [sp, #0]
 800efa2:	2830      	cmp	r0, #48	; 0x30
 800efa4:	d0f8      	beq.n	800ef98 <__gethex+0x3c>
 800efa6:	f7ff ffc3 	bl	800ef30 <__hexdig_fun>
 800efaa:	4604      	mov	r4, r0
 800efac:	2800      	cmp	r0, #0
 800efae:	d13a      	bne.n	800f026 <__gethex+0xca>
 800efb0:	9901      	ldr	r1, [sp, #4]
 800efb2:	4652      	mov	r2, sl
 800efb4:	4638      	mov	r0, r7
 800efb6:	f001 fa23 	bl	8010400 <strncmp>
 800efba:	4605      	mov	r5, r0
 800efbc:	2800      	cmp	r0, #0
 800efbe:	d168      	bne.n	800f092 <__gethex+0x136>
 800efc0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800efc4:	eb07 060a 	add.w	r6, r7, sl
 800efc8:	f7ff ffb2 	bl	800ef30 <__hexdig_fun>
 800efcc:	2800      	cmp	r0, #0
 800efce:	d062      	beq.n	800f096 <__gethex+0x13a>
 800efd0:	4633      	mov	r3, r6
 800efd2:	7818      	ldrb	r0, [r3, #0]
 800efd4:	2830      	cmp	r0, #48	; 0x30
 800efd6:	461f      	mov	r7, r3
 800efd8:	f103 0301 	add.w	r3, r3, #1
 800efdc:	d0f9      	beq.n	800efd2 <__gethex+0x76>
 800efde:	f7ff ffa7 	bl	800ef30 <__hexdig_fun>
 800efe2:	2301      	movs	r3, #1
 800efe4:	fab0 f480 	clz	r4, r0
 800efe8:	0964      	lsrs	r4, r4, #5
 800efea:	4635      	mov	r5, r6
 800efec:	9300      	str	r3, [sp, #0]
 800efee:	463a      	mov	r2, r7
 800eff0:	4616      	mov	r6, r2
 800eff2:	3201      	adds	r2, #1
 800eff4:	7830      	ldrb	r0, [r6, #0]
 800eff6:	f7ff ff9b 	bl	800ef30 <__hexdig_fun>
 800effa:	2800      	cmp	r0, #0
 800effc:	d1f8      	bne.n	800eff0 <__gethex+0x94>
 800effe:	9901      	ldr	r1, [sp, #4]
 800f000:	4652      	mov	r2, sl
 800f002:	4630      	mov	r0, r6
 800f004:	f001 f9fc 	bl	8010400 <strncmp>
 800f008:	b980      	cbnz	r0, 800f02c <__gethex+0xd0>
 800f00a:	b94d      	cbnz	r5, 800f020 <__gethex+0xc4>
 800f00c:	eb06 050a 	add.w	r5, r6, sl
 800f010:	462a      	mov	r2, r5
 800f012:	4616      	mov	r6, r2
 800f014:	3201      	adds	r2, #1
 800f016:	7830      	ldrb	r0, [r6, #0]
 800f018:	f7ff ff8a 	bl	800ef30 <__hexdig_fun>
 800f01c:	2800      	cmp	r0, #0
 800f01e:	d1f8      	bne.n	800f012 <__gethex+0xb6>
 800f020:	1bad      	subs	r5, r5, r6
 800f022:	00ad      	lsls	r5, r5, #2
 800f024:	e004      	b.n	800f030 <__gethex+0xd4>
 800f026:	2400      	movs	r4, #0
 800f028:	4625      	mov	r5, r4
 800f02a:	e7e0      	b.n	800efee <__gethex+0x92>
 800f02c:	2d00      	cmp	r5, #0
 800f02e:	d1f7      	bne.n	800f020 <__gethex+0xc4>
 800f030:	7833      	ldrb	r3, [r6, #0]
 800f032:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f036:	2b50      	cmp	r3, #80	; 0x50
 800f038:	d13b      	bne.n	800f0b2 <__gethex+0x156>
 800f03a:	7873      	ldrb	r3, [r6, #1]
 800f03c:	2b2b      	cmp	r3, #43	; 0x2b
 800f03e:	d02c      	beq.n	800f09a <__gethex+0x13e>
 800f040:	2b2d      	cmp	r3, #45	; 0x2d
 800f042:	d02e      	beq.n	800f0a2 <__gethex+0x146>
 800f044:	1c71      	adds	r1, r6, #1
 800f046:	f04f 0900 	mov.w	r9, #0
 800f04a:	7808      	ldrb	r0, [r1, #0]
 800f04c:	f7ff ff70 	bl	800ef30 <__hexdig_fun>
 800f050:	1e43      	subs	r3, r0, #1
 800f052:	b2db      	uxtb	r3, r3
 800f054:	2b18      	cmp	r3, #24
 800f056:	d82c      	bhi.n	800f0b2 <__gethex+0x156>
 800f058:	f1a0 0210 	sub.w	r2, r0, #16
 800f05c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f060:	f7ff ff66 	bl	800ef30 <__hexdig_fun>
 800f064:	1e43      	subs	r3, r0, #1
 800f066:	b2db      	uxtb	r3, r3
 800f068:	2b18      	cmp	r3, #24
 800f06a:	d91d      	bls.n	800f0a8 <__gethex+0x14c>
 800f06c:	f1b9 0f00 	cmp.w	r9, #0
 800f070:	d000      	beq.n	800f074 <__gethex+0x118>
 800f072:	4252      	negs	r2, r2
 800f074:	4415      	add	r5, r2
 800f076:	f8cb 1000 	str.w	r1, [fp]
 800f07a:	b1e4      	cbz	r4, 800f0b6 <__gethex+0x15a>
 800f07c:	9b00      	ldr	r3, [sp, #0]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	bf14      	ite	ne
 800f082:	2700      	movne	r7, #0
 800f084:	2706      	moveq	r7, #6
 800f086:	4638      	mov	r0, r7
 800f088:	b009      	add	sp, #36	; 0x24
 800f08a:	ecbd 8b02 	vpop	{d8}
 800f08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f092:	463e      	mov	r6, r7
 800f094:	4625      	mov	r5, r4
 800f096:	2401      	movs	r4, #1
 800f098:	e7ca      	b.n	800f030 <__gethex+0xd4>
 800f09a:	f04f 0900 	mov.w	r9, #0
 800f09e:	1cb1      	adds	r1, r6, #2
 800f0a0:	e7d3      	b.n	800f04a <__gethex+0xee>
 800f0a2:	f04f 0901 	mov.w	r9, #1
 800f0a6:	e7fa      	b.n	800f09e <__gethex+0x142>
 800f0a8:	230a      	movs	r3, #10
 800f0aa:	fb03 0202 	mla	r2, r3, r2, r0
 800f0ae:	3a10      	subs	r2, #16
 800f0b0:	e7d4      	b.n	800f05c <__gethex+0x100>
 800f0b2:	4631      	mov	r1, r6
 800f0b4:	e7df      	b.n	800f076 <__gethex+0x11a>
 800f0b6:	1bf3      	subs	r3, r6, r7
 800f0b8:	3b01      	subs	r3, #1
 800f0ba:	4621      	mov	r1, r4
 800f0bc:	2b07      	cmp	r3, #7
 800f0be:	dc0b      	bgt.n	800f0d8 <__gethex+0x17c>
 800f0c0:	ee18 0a10 	vmov	r0, s16
 800f0c4:	f000 fa70 	bl	800f5a8 <_Balloc>
 800f0c8:	4604      	mov	r4, r0
 800f0ca:	b940      	cbnz	r0, 800f0de <__gethex+0x182>
 800f0cc:	4b5d      	ldr	r3, [pc, #372]	; (800f244 <__gethex+0x2e8>)
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	21de      	movs	r1, #222	; 0xde
 800f0d2:	485d      	ldr	r0, [pc, #372]	; (800f248 <__gethex+0x2ec>)
 800f0d4:	f001 f9b6 	bl	8010444 <__assert_func>
 800f0d8:	3101      	adds	r1, #1
 800f0da:	105b      	asrs	r3, r3, #1
 800f0dc:	e7ee      	b.n	800f0bc <__gethex+0x160>
 800f0de:	f100 0914 	add.w	r9, r0, #20
 800f0e2:	f04f 0b00 	mov.w	fp, #0
 800f0e6:	f1ca 0301 	rsb	r3, sl, #1
 800f0ea:	f8cd 9008 	str.w	r9, [sp, #8]
 800f0ee:	f8cd b000 	str.w	fp, [sp]
 800f0f2:	9306      	str	r3, [sp, #24]
 800f0f4:	42b7      	cmp	r7, r6
 800f0f6:	d340      	bcc.n	800f17a <__gethex+0x21e>
 800f0f8:	9802      	ldr	r0, [sp, #8]
 800f0fa:	9b00      	ldr	r3, [sp, #0]
 800f0fc:	f840 3b04 	str.w	r3, [r0], #4
 800f100:	eba0 0009 	sub.w	r0, r0, r9
 800f104:	1080      	asrs	r0, r0, #2
 800f106:	0146      	lsls	r6, r0, #5
 800f108:	6120      	str	r0, [r4, #16]
 800f10a:	4618      	mov	r0, r3
 800f10c:	f000 fb3e 	bl	800f78c <__hi0bits>
 800f110:	1a30      	subs	r0, r6, r0
 800f112:	f8d8 6000 	ldr.w	r6, [r8]
 800f116:	42b0      	cmp	r0, r6
 800f118:	dd63      	ble.n	800f1e2 <__gethex+0x286>
 800f11a:	1b87      	subs	r7, r0, r6
 800f11c:	4639      	mov	r1, r7
 800f11e:	4620      	mov	r0, r4
 800f120:	f000 fee2 	bl	800fee8 <__any_on>
 800f124:	4682      	mov	sl, r0
 800f126:	b1a8      	cbz	r0, 800f154 <__gethex+0x1f8>
 800f128:	1e7b      	subs	r3, r7, #1
 800f12a:	1159      	asrs	r1, r3, #5
 800f12c:	f003 021f 	and.w	r2, r3, #31
 800f130:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f134:	f04f 0a01 	mov.w	sl, #1
 800f138:	fa0a f202 	lsl.w	r2, sl, r2
 800f13c:	420a      	tst	r2, r1
 800f13e:	d009      	beq.n	800f154 <__gethex+0x1f8>
 800f140:	4553      	cmp	r3, sl
 800f142:	dd05      	ble.n	800f150 <__gethex+0x1f4>
 800f144:	1eb9      	subs	r1, r7, #2
 800f146:	4620      	mov	r0, r4
 800f148:	f000 fece 	bl	800fee8 <__any_on>
 800f14c:	2800      	cmp	r0, #0
 800f14e:	d145      	bne.n	800f1dc <__gethex+0x280>
 800f150:	f04f 0a02 	mov.w	sl, #2
 800f154:	4639      	mov	r1, r7
 800f156:	4620      	mov	r0, r4
 800f158:	f7ff fe98 	bl	800ee8c <rshift>
 800f15c:	443d      	add	r5, r7
 800f15e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f162:	42ab      	cmp	r3, r5
 800f164:	da4c      	bge.n	800f200 <__gethex+0x2a4>
 800f166:	ee18 0a10 	vmov	r0, s16
 800f16a:	4621      	mov	r1, r4
 800f16c:	f000 fa5c 	bl	800f628 <_Bfree>
 800f170:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f172:	2300      	movs	r3, #0
 800f174:	6013      	str	r3, [r2, #0]
 800f176:	27a3      	movs	r7, #163	; 0xa3
 800f178:	e785      	b.n	800f086 <__gethex+0x12a>
 800f17a:	1e73      	subs	r3, r6, #1
 800f17c:	9a05      	ldr	r2, [sp, #20]
 800f17e:	9303      	str	r3, [sp, #12]
 800f180:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f184:	4293      	cmp	r3, r2
 800f186:	d019      	beq.n	800f1bc <__gethex+0x260>
 800f188:	f1bb 0f20 	cmp.w	fp, #32
 800f18c:	d107      	bne.n	800f19e <__gethex+0x242>
 800f18e:	9b02      	ldr	r3, [sp, #8]
 800f190:	9a00      	ldr	r2, [sp, #0]
 800f192:	f843 2b04 	str.w	r2, [r3], #4
 800f196:	9302      	str	r3, [sp, #8]
 800f198:	2300      	movs	r3, #0
 800f19a:	9300      	str	r3, [sp, #0]
 800f19c:	469b      	mov	fp, r3
 800f19e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f1a2:	f7ff fec5 	bl	800ef30 <__hexdig_fun>
 800f1a6:	9b00      	ldr	r3, [sp, #0]
 800f1a8:	f000 000f 	and.w	r0, r0, #15
 800f1ac:	fa00 f00b 	lsl.w	r0, r0, fp
 800f1b0:	4303      	orrs	r3, r0
 800f1b2:	9300      	str	r3, [sp, #0]
 800f1b4:	f10b 0b04 	add.w	fp, fp, #4
 800f1b8:	9b03      	ldr	r3, [sp, #12]
 800f1ba:	e00d      	b.n	800f1d8 <__gethex+0x27c>
 800f1bc:	9b03      	ldr	r3, [sp, #12]
 800f1be:	9a06      	ldr	r2, [sp, #24]
 800f1c0:	4413      	add	r3, r2
 800f1c2:	42bb      	cmp	r3, r7
 800f1c4:	d3e0      	bcc.n	800f188 <__gethex+0x22c>
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	9901      	ldr	r1, [sp, #4]
 800f1ca:	9307      	str	r3, [sp, #28]
 800f1cc:	4652      	mov	r2, sl
 800f1ce:	f001 f917 	bl	8010400 <strncmp>
 800f1d2:	9b07      	ldr	r3, [sp, #28]
 800f1d4:	2800      	cmp	r0, #0
 800f1d6:	d1d7      	bne.n	800f188 <__gethex+0x22c>
 800f1d8:	461e      	mov	r6, r3
 800f1da:	e78b      	b.n	800f0f4 <__gethex+0x198>
 800f1dc:	f04f 0a03 	mov.w	sl, #3
 800f1e0:	e7b8      	b.n	800f154 <__gethex+0x1f8>
 800f1e2:	da0a      	bge.n	800f1fa <__gethex+0x29e>
 800f1e4:	1a37      	subs	r7, r6, r0
 800f1e6:	4621      	mov	r1, r4
 800f1e8:	ee18 0a10 	vmov	r0, s16
 800f1ec:	463a      	mov	r2, r7
 800f1ee:	f000 fc37 	bl	800fa60 <__lshift>
 800f1f2:	1bed      	subs	r5, r5, r7
 800f1f4:	4604      	mov	r4, r0
 800f1f6:	f100 0914 	add.w	r9, r0, #20
 800f1fa:	f04f 0a00 	mov.w	sl, #0
 800f1fe:	e7ae      	b.n	800f15e <__gethex+0x202>
 800f200:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f204:	42a8      	cmp	r0, r5
 800f206:	dd72      	ble.n	800f2ee <__gethex+0x392>
 800f208:	1b45      	subs	r5, r0, r5
 800f20a:	42ae      	cmp	r6, r5
 800f20c:	dc36      	bgt.n	800f27c <__gethex+0x320>
 800f20e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f212:	2b02      	cmp	r3, #2
 800f214:	d02a      	beq.n	800f26c <__gethex+0x310>
 800f216:	2b03      	cmp	r3, #3
 800f218:	d02c      	beq.n	800f274 <__gethex+0x318>
 800f21a:	2b01      	cmp	r3, #1
 800f21c:	d11c      	bne.n	800f258 <__gethex+0x2fc>
 800f21e:	42ae      	cmp	r6, r5
 800f220:	d11a      	bne.n	800f258 <__gethex+0x2fc>
 800f222:	2e01      	cmp	r6, #1
 800f224:	d112      	bne.n	800f24c <__gethex+0x2f0>
 800f226:	9a04      	ldr	r2, [sp, #16]
 800f228:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f22c:	6013      	str	r3, [r2, #0]
 800f22e:	2301      	movs	r3, #1
 800f230:	6123      	str	r3, [r4, #16]
 800f232:	f8c9 3000 	str.w	r3, [r9]
 800f236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f238:	2762      	movs	r7, #98	; 0x62
 800f23a:	601c      	str	r4, [r3, #0]
 800f23c:	e723      	b.n	800f086 <__gethex+0x12a>
 800f23e:	bf00      	nop
 800f240:	08011528 	.word	0x08011528
 800f244:	080114b0 	.word	0x080114b0
 800f248:	080114c1 	.word	0x080114c1
 800f24c:	1e71      	subs	r1, r6, #1
 800f24e:	4620      	mov	r0, r4
 800f250:	f000 fe4a 	bl	800fee8 <__any_on>
 800f254:	2800      	cmp	r0, #0
 800f256:	d1e6      	bne.n	800f226 <__gethex+0x2ca>
 800f258:	ee18 0a10 	vmov	r0, s16
 800f25c:	4621      	mov	r1, r4
 800f25e:	f000 f9e3 	bl	800f628 <_Bfree>
 800f262:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f264:	2300      	movs	r3, #0
 800f266:	6013      	str	r3, [r2, #0]
 800f268:	2750      	movs	r7, #80	; 0x50
 800f26a:	e70c      	b.n	800f086 <__gethex+0x12a>
 800f26c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d1f2      	bne.n	800f258 <__gethex+0x2fc>
 800f272:	e7d8      	b.n	800f226 <__gethex+0x2ca>
 800f274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f276:	2b00      	cmp	r3, #0
 800f278:	d1d5      	bne.n	800f226 <__gethex+0x2ca>
 800f27a:	e7ed      	b.n	800f258 <__gethex+0x2fc>
 800f27c:	1e6f      	subs	r7, r5, #1
 800f27e:	f1ba 0f00 	cmp.w	sl, #0
 800f282:	d131      	bne.n	800f2e8 <__gethex+0x38c>
 800f284:	b127      	cbz	r7, 800f290 <__gethex+0x334>
 800f286:	4639      	mov	r1, r7
 800f288:	4620      	mov	r0, r4
 800f28a:	f000 fe2d 	bl	800fee8 <__any_on>
 800f28e:	4682      	mov	sl, r0
 800f290:	117b      	asrs	r3, r7, #5
 800f292:	2101      	movs	r1, #1
 800f294:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f298:	f007 071f 	and.w	r7, r7, #31
 800f29c:	fa01 f707 	lsl.w	r7, r1, r7
 800f2a0:	421f      	tst	r7, r3
 800f2a2:	4629      	mov	r1, r5
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	bf18      	it	ne
 800f2a8:	f04a 0a02 	orrne.w	sl, sl, #2
 800f2ac:	1b76      	subs	r6, r6, r5
 800f2ae:	f7ff fded 	bl	800ee8c <rshift>
 800f2b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f2b6:	2702      	movs	r7, #2
 800f2b8:	f1ba 0f00 	cmp.w	sl, #0
 800f2bc:	d048      	beq.n	800f350 <__gethex+0x3f4>
 800f2be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f2c2:	2b02      	cmp	r3, #2
 800f2c4:	d015      	beq.n	800f2f2 <__gethex+0x396>
 800f2c6:	2b03      	cmp	r3, #3
 800f2c8:	d017      	beq.n	800f2fa <__gethex+0x39e>
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d109      	bne.n	800f2e2 <__gethex+0x386>
 800f2ce:	f01a 0f02 	tst.w	sl, #2
 800f2d2:	d006      	beq.n	800f2e2 <__gethex+0x386>
 800f2d4:	f8d9 0000 	ldr.w	r0, [r9]
 800f2d8:	ea4a 0a00 	orr.w	sl, sl, r0
 800f2dc:	f01a 0f01 	tst.w	sl, #1
 800f2e0:	d10e      	bne.n	800f300 <__gethex+0x3a4>
 800f2e2:	f047 0710 	orr.w	r7, r7, #16
 800f2e6:	e033      	b.n	800f350 <__gethex+0x3f4>
 800f2e8:	f04f 0a01 	mov.w	sl, #1
 800f2ec:	e7d0      	b.n	800f290 <__gethex+0x334>
 800f2ee:	2701      	movs	r7, #1
 800f2f0:	e7e2      	b.n	800f2b8 <__gethex+0x35c>
 800f2f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f2f4:	f1c3 0301 	rsb	r3, r3, #1
 800f2f8:	9315      	str	r3, [sp, #84]	; 0x54
 800f2fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d0f0      	beq.n	800f2e2 <__gethex+0x386>
 800f300:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f304:	f104 0314 	add.w	r3, r4, #20
 800f308:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f30c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f310:	f04f 0c00 	mov.w	ip, #0
 800f314:	4618      	mov	r0, r3
 800f316:	f853 2b04 	ldr.w	r2, [r3], #4
 800f31a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f31e:	d01c      	beq.n	800f35a <__gethex+0x3fe>
 800f320:	3201      	adds	r2, #1
 800f322:	6002      	str	r2, [r0, #0]
 800f324:	2f02      	cmp	r7, #2
 800f326:	f104 0314 	add.w	r3, r4, #20
 800f32a:	d13f      	bne.n	800f3ac <__gethex+0x450>
 800f32c:	f8d8 2000 	ldr.w	r2, [r8]
 800f330:	3a01      	subs	r2, #1
 800f332:	42b2      	cmp	r2, r6
 800f334:	d10a      	bne.n	800f34c <__gethex+0x3f0>
 800f336:	1171      	asrs	r1, r6, #5
 800f338:	2201      	movs	r2, #1
 800f33a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f33e:	f006 061f 	and.w	r6, r6, #31
 800f342:	fa02 f606 	lsl.w	r6, r2, r6
 800f346:	421e      	tst	r6, r3
 800f348:	bf18      	it	ne
 800f34a:	4617      	movne	r7, r2
 800f34c:	f047 0720 	orr.w	r7, r7, #32
 800f350:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f352:	601c      	str	r4, [r3, #0]
 800f354:	9b04      	ldr	r3, [sp, #16]
 800f356:	601d      	str	r5, [r3, #0]
 800f358:	e695      	b.n	800f086 <__gethex+0x12a>
 800f35a:	4299      	cmp	r1, r3
 800f35c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f360:	d8d8      	bhi.n	800f314 <__gethex+0x3b8>
 800f362:	68a3      	ldr	r3, [r4, #8]
 800f364:	459b      	cmp	fp, r3
 800f366:	db19      	blt.n	800f39c <__gethex+0x440>
 800f368:	6861      	ldr	r1, [r4, #4]
 800f36a:	ee18 0a10 	vmov	r0, s16
 800f36e:	3101      	adds	r1, #1
 800f370:	f000 f91a 	bl	800f5a8 <_Balloc>
 800f374:	4681      	mov	r9, r0
 800f376:	b918      	cbnz	r0, 800f380 <__gethex+0x424>
 800f378:	4b1a      	ldr	r3, [pc, #104]	; (800f3e4 <__gethex+0x488>)
 800f37a:	4602      	mov	r2, r0
 800f37c:	2184      	movs	r1, #132	; 0x84
 800f37e:	e6a8      	b.n	800f0d2 <__gethex+0x176>
 800f380:	6922      	ldr	r2, [r4, #16]
 800f382:	3202      	adds	r2, #2
 800f384:	f104 010c 	add.w	r1, r4, #12
 800f388:	0092      	lsls	r2, r2, #2
 800f38a:	300c      	adds	r0, #12
 800f38c:	f7fd f9a2 	bl	800c6d4 <memcpy>
 800f390:	4621      	mov	r1, r4
 800f392:	ee18 0a10 	vmov	r0, s16
 800f396:	f000 f947 	bl	800f628 <_Bfree>
 800f39a:	464c      	mov	r4, r9
 800f39c:	6923      	ldr	r3, [r4, #16]
 800f39e:	1c5a      	adds	r2, r3, #1
 800f3a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f3a4:	6122      	str	r2, [r4, #16]
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	615a      	str	r2, [r3, #20]
 800f3aa:	e7bb      	b.n	800f324 <__gethex+0x3c8>
 800f3ac:	6922      	ldr	r2, [r4, #16]
 800f3ae:	455a      	cmp	r2, fp
 800f3b0:	dd0b      	ble.n	800f3ca <__gethex+0x46e>
 800f3b2:	2101      	movs	r1, #1
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f7ff fd69 	bl	800ee8c <rshift>
 800f3ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f3be:	3501      	adds	r5, #1
 800f3c0:	42ab      	cmp	r3, r5
 800f3c2:	f6ff aed0 	blt.w	800f166 <__gethex+0x20a>
 800f3c6:	2701      	movs	r7, #1
 800f3c8:	e7c0      	b.n	800f34c <__gethex+0x3f0>
 800f3ca:	f016 061f 	ands.w	r6, r6, #31
 800f3ce:	d0fa      	beq.n	800f3c6 <__gethex+0x46a>
 800f3d0:	4453      	add	r3, sl
 800f3d2:	f1c6 0620 	rsb	r6, r6, #32
 800f3d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f3da:	f000 f9d7 	bl	800f78c <__hi0bits>
 800f3de:	42b0      	cmp	r0, r6
 800f3e0:	dbe7      	blt.n	800f3b2 <__gethex+0x456>
 800f3e2:	e7f0      	b.n	800f3c6 <__gethex+0x46a>
 800f3e4:	080114b0 	.word	0x080114b0

0800f3e8 <L_shift>:
 800f3e8:	f1c2 0208 	rsb	r2, r2, #8
 800f3ec:	0092      	lsls	r2, r2, #2
 800f3ee:	b570      	push	{r4, r5, r6, lr}
 800f3f0:	f1c2 0620 	rsb	r6, r2, #32
 800f3f4:	6843      	ldr	r3, [r0, #4]
 800f3f6:	6804      	ldr	r4, [r0, #0]
 800f3f8:	fa03 f506 	lsl.w	r5, r3, r6
 800f3fc:	432c      	orrs	r4, r5
 800f3fe:	40d3      	lsrs	r3, r2
 800f400:	6004      	str	r4, [r0, #0]
 800f402:	f840 3f04 	str.w	r3, [r0, #4]!
 800f406:	4288      	cmp	r0, r1
 800f408:	d3f4      	bcc.n	800f3f4 <L_shift+0xc>
 800f40a:	bd70      	pop	{r4, r5, r6, pc}

0800f40c <__match>:
 800f40c:	b530      	push	{r4, r5, lr}
 800f40e:	6803      	ldr	r3, [r0, #0]
 800f410:	3301      	adds	r3, #1
 800f412:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f416:	b914      	cbnz	r4, 800f41e <__match+0x12>
 800f418:	6003      	str	r3, [r0, #0]
 800f41a:	2001      	movs	r0, #1
 800f41c:	bd30      	pop	{r4, r5, pc}
 800f41e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f422:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f426:	2d19      	cmp	r5, #25
 800f428:	bf98      	it	ls
 800f42a:	3220      	addls	r2, #32
 800f42c:	42a2      	cmp	r2, r4
 800f42e:	d0f0      	beq.n	800f412 <__match+0x6>
 800f430:	2000      	movs	r0, #0
 800f432:	e7f3      	b.n	800f41c <__match+0x10>

0800f434 <__hexnan>:
 800f434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f438:	680b      	ldr	r3, [r1, #0]
 800f43a:	115e      	asrs	r6, r3, #5
 800f43c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f440:	f013 031f 	ands.w	r3, r3, #31
 800f444:	b087      	sub	sp, #28
 800f446:	bf18      	it	ne
 800f448:	3604      	addne	r6, #4
 800f44a:	2500      	movs	r5, #0
 800f44c:	1f37      	subs	r7, r6, #4
 800f44e:	4690      	mov	r8, r2
 800f450:	6802      	ldr	r2, [r0, #0]
 800f452:	9301      	str	r3, [sp, #4]
 800f454:	4682      	mov	sl, r0
 800f456:	f846 5c04 	str.w	r5, [r6, #-4]
 800f45a:	46b9      	mov	r9, r7
 800f45c:	463c      	mov	r4, r7
 800f45e:	9502      	str	r5, [sp, #8]
 800f460:	46ab      	mov	fp, r5
 800f462:	7851      	ldrb	r1, [r2, #1]
 800f464:	1c53      	adds	r3, r2, #1
 800f466:	9303      	str	r3, [sp, #12]
 800f468:	b341      	cbz	r1, 800f4bc <__hexnan+0x88>
 800f46a:	4608      	mov	r0, r1
 800f46c:	9205      	str	r2, [sp, #20]
 800f46e:	9104      	str	r1, [sp, #16]
 800f470:	f7ff fd5e 	bl	800ef30 <__hexdig_fun>
 800f474:	2800      	cmp	r0, #0
 800f476:	d14f      	bne.n	800f518 <__hexnan+0xe4>
 800f478:	9904      	ldr	r1, [sp, #16]
 800f47a:	9a05      	ldr	r2, [sp, #20]
 800f47c:	2920      	cmp	r1, #32
 800f47e:	d818      	bhi.n	800f4b2 <__hexnan+0x7e>
 800f480:	9b02      	ldr	r3, [sp, #8]
 800f482:	459b      	cmp	fp, r3
 800f484:	dd13      	ble.n	800f4ae <__hexnan+0x7a>
 800f486:	454c      	cmp	r4, r9
 800f488:	d206      	bcs.n	800f498 <__hexnan+0x64>
 800f48a:	2d07      	cmp	r5, #7
 800f48c:	dc04      	bgt.n	800f498 <__hexnan+0x64>
 800f48e:	462a      	mov	r2, r5
 800f490:	4649      	mov	r1, r9
 800f492:	4620      	mov	r0, r4
 800f494:	f7ff ffa8 	bl	800f3e8 <L_shift>
 800f498:	4544      	cmp	r4, r8
 800f49a:	d950      	bls.n	800f53e <__hexnan+0x10a>
 800f49c:	2300      	movs	r3, #0
 800f49e:	f1a4 0904 	sub.w	r9, r4, #4
 800f4a2:	f844 3c04 	str.w	r3, [r4, #-4]
 800f4a6:	f8cd b008 	str.w	fp, [sp, #8]
 800f4aa:	464c      	mov	r4, r9
 800f4ac:	461d      	mov	r5, r3
 800f4ae:	9a03      	ldr	r2, [sp, #12]
 800f4b0:	e7d7      	b.n	800f462 <__hexnan+0x2e>
 800f4b2:	2929      	cmp	r1, #41	; 0x29
 800f4b4:	d156      	bne.n	800f564 <__hexnan+0x130>
 800f4b6:	3202      	adds	r2, #2
 800f4b8:	f8ca 2000 	str.w	r2, [sl]
 800f4bc:	f1bb 0f00 	cmp.w	fp, #0
 800f4c0:	d050      	beq.n	800f564 <__hexnan+0x130>
 800f4c2:	454c      	cmp	r4, r9
 800f4c4:	d206      	bcs.n	800f4d4 <__hexnan+0xa0>
 800f4c6:	2d07      	cmp	r5, #7
 800f4c8:	dc04      	bgt.n	800f4d4 <__hexnan+0xa0>
 800f4ca:	462a      	mov	r2, r5
 800f4cc:	4649      	mov	r1, r9
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	f7ff ff8a 	bl	800f3e8 <L_shift>
 800f4d4:	4544      	cmp	r4, r8
 800f4d6:	d934      	bls.n	800f542 <__hexnan+0x10e>
 800f4d8:	f1a8 0204 	sub.w	r2, r8, #4
 800f4dc:	4623      	mov	r3, r4
 800f4de:	f853 1b04 	ldr.w	r1, [r3], #4
 800f4e2:	f842 1f04 	str.w	r1, [r2, #4]!
 800f4e6:	429f      	cmp	r7, r3
 800f4e8:	d2f9      	bcs.n	800f4de <__hexnan+0xaa>
 800f4ea:	1b3b      	subs	r3, r7, r4
 800f4ec:	f023 0303 	bic.w	r3, r3, #3
 800f4f0:	3304      	adds	r3, #4
 800f4f2:	3401      	adds	r4, #1
 800f4f4:	3e03      	subs	r6, #3
 800f4f6:	42b4      	cmp	r4, r6
 800f4f8:	bf88      	it	hi
 800f4fa:	2304      	movhi	r3, #4
 800f4fc:	4443      	add	r3, r8
 800f4fe:	2200      	movs	r2, #0
 800f500:	f843 2b04 	str.w	r2, [r3], #4
 800f504:	429f      	cmp	r7, r3
 800f506:	d2fb      	bcs.n	800f500 <__hexnan+0xcc>
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	b91b      	cbnz	r3, 800f514 <__hexnan+0xe0>
 800f50c:	4547      	cmp	r7, r8
 800f50e:	d127      	bne.n	800f560 <__hexnan+0x12c>
 800f510:	2301      	movs	r3, #1
 800f512:	603b      	str	r3, [r7, #0]
 800f514:	2005      	movs	r0, #5
 800f516:	e026      	b.n	800f566 <__hexnan+0x132>
 800f518:	3501      	adds	r5, #1
 800f51a:	2d08      	cmp	r5, #8
 800f51c:	f10b 0b01 	add.w	fp, fp, #1
 800f520:	dd06      	ble.n	800f530 <__hexnan+0xfc>
 800f522:	4544      	cmp	r4, r8
 800f524:	d9c3      	bls.n	800f4ae <__hexnan+0x7a>
 800f526:	2300      	movs	r3, #0
 800f528:	f844 3c04 	str.w	r3, [r4, #-4]
 800f52c:	2501      	movs	r5, #1
 800f52e:	3c04      	subs	r4, #4
 800f530:	6822      	ldr	r2, [r4, #0]
 800f532:	f000 000f 	and.w	r0, r0, #15
 800f536:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f53a:	6022      	str	r2, [r4, #0]
 800f53c:	e7b7      	b.n	800f4ae <__hexnan+0x7a>
 800f53e:	2508      	movs	r5, #8
 800f540:	e7b5      	b.n	800f4ae <__hexnan+0x7a>
 800f542:	9b01      	ldr	r3, [sp, #4]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d0df      	beq.n	800f508 <__hexnan+0xd4>
 800f548:	f04f 32ff 	mov.w	r2, #4294967295
 800f54c:	f1c3 0320 	rsb	r3, r3, #32
 800f550:	fa22 f303 	lsr.w	r3, r2, r3
 800f554:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f558:	401a      	ands	r2, r3
 800f55a:	f846 2c04 	str.w	r2, [r6, #-4]
 800f55e:	e7d3      	b.n	800f508 <__hexnan+0xd4>
 800f560:	3f04      	subs	r7, #4
 800f562:	e7d1      	b.n	800f508 <__hexnan+0xd4>
 800f564:	2004      	movs	r0, #4
 800f566:	b007      	add	sp, #28
 800f568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f56c <_localeconv_r>:
 800f56c:	4800      	ldr	r0, [pc, #0]	; (800f570 <_localeconv_r+0x4>)
 800f56e:	4770      	bx	lr
 800f570:	200003ac 	.word	0x200003ac

0800f574 <malloc>:
 800f574:	4b02      	ldr	r3, [pc, #8]	; (800f580 <malloc+0xc>)
 800f576:	4601      	mov	r1, r0
 800f578:	6818      	ldr	r0, [r3, #0]
 800f57a:	f000 bd59 	b.w	8010030 <_malloc_r>
 800f57e:	bf00      	nop
 800f580:	20000254 	.word	0x20000254

0800f584 <__ascii_mbtowc>:
 800f584:	b082      	sub	sp, #8
 800f586:	b901      	cbnz	r1, 800f58a <__ascii_mbtowc+0x6>
 800f588:	a901      	add	r1, sp, #4
 800f58a:	b142      	cbz	r2, 800f59e <__ascii_mbtowc+0x1a>
 800f58c:	b14b      	cbz	r3, 800f5a2 <__ascii_mbtowc+0x1e>
 800f58e:	7813      	ldrb	r3, [r2, #0]
 800f590:	600b      	str	r3, [r1, #0]
 800f592:	7812      	ldrb	r2, [r2, #0]
 800f594:	1e10      	subs	r0, r2, #0
 800f596:	bf18      	it	ne
 800f598:	2001      	movne	r0, #1
 800f59a:	b002      	add	sp, #8
 800f59c:	4770      	bx	lr
 800f59e:	4610      	mov	r0, r2
 800f5a0:	e7fb      	b.n	800f59a <__ascii_mbtowc+0x16>
 800f5a2:	f06f 0001 	mvn.w	r0, #1
 800f5a6:	e7f8      	b.n	800f59a <__ascii_mbtowc+0x16>

0800f5a8 <_Balloc>:
 800f5a8:	b570      	push	{r4, r5, r6, lr}
 800f5aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f5ac:	4604      	mov	r4, r0
 800f5ae:	460d      	mov	r5, r1
 800f5b0:	b976      	cbnz	r6, 800f5d0 <_Balloc+0x28>
 800f5b2:	2010      	movs	r0, #16
 800f5b4:	f7ff ffde 	bl	800f574 <malloc>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	6260      	str	r0, [r4, #36]	; 0x24
 800f5bc:	b920      	cbnz	r0, 800f5c8 <_Balloc+0x20>
 800f5be:	4b18      	ldr	r3, [pc, #96]	; (800f620 <_Balloc+0x78>)
 800f5c0:	4818      	ldr	r0, [pc, #96]	; (800f624 <_Balloc+0x7c>)
 800f5c2:	2166      	movs	r1, #102	; 0x66
 800f5c4:	f000 ff3e 	bl	8010444 <__assert_func>
 800f5c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f5cc:	6006      	str	r6, [r0, #0]
 800f5ce:	60c6      	str	r6, [r0, #12]
 800f5d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f5d2:	68f3      	ldr	r3, [r6, #12]
 800f5d4:	b183      	cbz	r3, 800f5f8 <_Balloc+0x50>
 800f5d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5d8:	68db      	ldr	r3, [r3, #12]
 800f5da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f5de:	b9b8      	cbnz	r0, 800f610 <_Balloc+0x68>
 800f5e0:	2101      	movs	r1, #1
 800f5e2:	fa01 f605 	lsl.w	r6, r1, r5
 800f5e6:	1d72      	adds	r2, r6, #5
 800f5e8:	0092      	lsls	r2, r2, #2
 800f5ea:	4620      	mov	r0, r4
 800f5ec:	f000 fc9d 	bl	800ff2a <_calloc_r>
 800f5f0:	b160      	cbz	r0, 800f60c <_Balloc+0x64>
 800f5f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f5f6:	e00e      	b.n	800f616 <_Balloc+0x6e>
 800f5f8:	2221      	movs	r2, #33	; 0x21
 800f5fa:	2104      	movs	r1, #4
 800f5fc:	4620      	mov	r0, r4
 800f5fe:	f000 fc94 	bl	800ff2a <_calloc_r>
 800f602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f604:	60f0      	str	r0, [r6, #12]
 800f606:	68db      	ldr	r3, [r3, #12]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d1e4      	bne.n	800f5d6 <_Balloc+0x2e>
 800f60c:	2000      	movs	r0, #0
 800f60e:	bd70      	pop	{r4, r5, r6, pc}
 800f610:	6802      	ldr	r2, [r0, #0]
 800f612:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f616:	2300      	movs	r3, #0
 800f618:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f61c:	e7f7      	b.n	800f60e <_Balloc+0x66>
 800f61e:	bf00      	nop
 800f620:	0801143e 	.word	0x0801143e
 800f624:	0801153c 	.word	0x0801153c

0800f628 <_Bfree>:
 800f628:	b570      	push	{r4, r5, r6, lr}
 800f62a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f62c:	4605      	mov	r5, r0
 800f62e:	460c      	mov	r4, r1
 800f630:	b976      	cbnz	r6, 800f650 <_Bfree+0x28>
 800f632:	2010      	movs	r0, #16
 800f634:	f7ff ff9e 	bl	800f574 <malloc>
 800f638:	4602      	mov	r2, r0
 800f63a:	6268      	str	r0, [r5, #36]	; 0x24
 800f63c:	b920      	cbnz	r0, 800f648 <_Bfree+0x20>
 800f63e:	4b09      	ldr	r3, [pc, #36]	; (800f664 <_Bfree+0x3c>)
 800f640:	4809      	ldr	r0, [pc, #36]	; (800f668 <_Bfree+0x40>)
 800f642:	218a      	movs	r1, #138	; 0x8a
 800f644:	f000 fefe 	bl	8010444 <__assert_func>
 800f648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f64c:	6006      	str	r6, [r0, #0]
 800f64e:	60c6      	str	r6, [r0, #12]
 800f650:	b13c      	cbz	r4, 800f662 <_Bfree+0x3a>
 800f652:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f654:	6862      	ldr	r2, [r4, #4]
 800f656:	68db      	ldr	r3, [r3, #12]
 800f658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f65c:	6021      	str	r1, [r4, #0]
 800f65e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f662:	bd70      	pop	{r4, r5, r6, pc}
 800f664:	0801143e 	.word	0x0801143e
 800f668:	0801153c 	.word	0x0801153c

0800f66c <__multadd>:
 800f66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f670:	690d      	ldr	r5, [r1, #16]
 800f672:	4607      	mov	r7, r0
 800f674:	460c      	mov	r4, r1
 800f676:	461e      	mov	r6, r3
 800f678:	f101 0c14 	add.w	ip, r1, #20
 800f67c:	2000      	movs	r0, #0
 800f67e:	f8dc 3000 	ldr.w	r3, [ip]
 800f682:	b299      	uxth	r1, r3
 800f684:	fb02 6101 	mla	r1, r2, r1, r6
 800f688:	0c1e      	lsrs	r6, r3, #16
 800f68a:	0c0b      	lsrs	r3, r1, #16
 800f68c:	fb02 3306 	mla	r3, r2, r6, r3
 800f690:	b289      	uxth	r1, r1
 800f692:	3001      	adds	r0, #1
 800f694:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f698:	4285      	cmp	r5, r0
 800f69a:	f84c 1b04 	str.w	r1, [ip], #4
 800f69e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f6a2:	dcec      	bgt.n	800f67e <__multadd+0x12>
 800f6a4:	b30e      	cbz	r6, 800f6ea <__multadd+0x7e>
 800f6a6:	68a3      	ldr	r3, [r4, #8]
 800f6a8:	42ab      	cmp	r3, r5
 800f6aa:	dc19      	bgt.n	800f6e0 <__multadd+0x74>
 800f6ac:	6861      	ldr	r1, [r4, #4]
 800f6ae:	4638      	mov	r0, r7
 800f6b0:	3101      	adds	r1, #1
 800f6b2:	f7ff ff79 	bl	800f5a8 <_Balloc>
 800f6b6:	4680      	mov	r8, r0
 800f6b8:	b928      	cbnz	r0, 800f6c6 <__multadd+0x5a>
 800f6ba:	4602      	mov	r2, r0
 800f6bc:	4b0c      	ldr	r3, [pc, #48]	; (800f6f0 <__multadd+0x84>)
 800f6be:	480d      	ldr	r0, [pc, #52]	; (800f6f4 <__multadd+0x88>)
 800f6c0:	21b5      	movs	r1, #181	; 0xb5
 800f6c2:	f000 febf 	bl	8010444 <__assert_func>
 800f6c6:	6922      	ldr	r2, [r4, #16]
 800f6c8:	3202      	adds	r2, #2
 800f6ca:	f104 010c 	add.w	r1, r4, #12
 800f6ce:	0092      	lsls	r2, r2, #2
 800f6d0:	300c      	adds	r0, #12
 800f6d2:	f7fc ffff 	bl	800c6d4 <memcpy>
 800f6d6:	4621      	mov	r1, r4
 800f6d8:	4638      	mov	r0, r7
 800f6da:	f7ff ffa5 	bl	800f628 <_Bfree>
 800f6de:	4644      	mov	r4, r8
 800f6e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f6e4:	3501      	adds	r5, #1
 800f6e6:	615e      	str	r6, [r3, #20]
 800f6e8:	6125      	str	r5, [r4, #16]
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6f0:	080114b0 	.word	0x080114b0
 800f6f4:	0801153c 	.word	0x0801153c

0800f6f8 <__s2b>:
 800f6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6fc:	460c      	mov	r4, r1
 800f6fe:	4615      	mov	r5, r2
 800f700:	461f      	mov	r7, r3
 800f702:	2209      	movs	r2, #9
 800f704:	3308      	adds	r3, #8
 800f706:	4606      	mov	r6, r0
 800f708:	fb93 f3f2 	sdiv	r3, r3, r2
 800f70c:	2100      	movs	r1, #0
 800f70e:	2201      	movs	r2, #1
 800f710:	429a      	cmp	r2, r3
 800f712:	db09      	blt.n	800f728 <__s2b+0x30>
 800f714:	4630      	mov	r0, r6
 800f716:	f7ff ff47 	bl	800f5a8 <_Balloc>
 800f71a:	b940      	cbnz	r0, 800f72e <__s2b+0x36>
 800f71c:	4602      	mov	r2, r0
 800f71e:	4b19      	ldr	r3, [pc, #100]	; (800f784 <__s2b+0x8c>)
 800f720:	4819      	ldr	r0, [pc, #100]	; (800f788 <__s2b+0x90>)
 800f722:	21ce      	movs	r1, #206	; 0xce
 800f724:	f000 fe8e 	bl	8010444 <__assert_func>
 800f728:	0052      	lsls	r2, r2, #1
 800f72a:	3101      	adds	r1, #1
 800f72c:	e7f0      	b.n	800f710 <__s2b+0x18>
 800f72e:	9b08      	ldr	r3, [sp, #32]
 800f730:	6143      	str	r3, [r0, #20]
 800f732:	2d09      	cmp	r5, #9
 800f734:	f04f 0301 	mov.w	r3, #1
 800f738:	6103      	str	r3, [r0, #16]
 800f73a:	dd16      	ble.n	800f76a <__s2b+0x72>
 800f73c:	f104 0909 	add.w	r9, r4, #9
 800f740:	46c8      	mov	r8, r9
 800f742:	442c      	add	r4, r5
 800f744:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f748:	4601      	mov	r1, r0
 800f74a:	3b30      	subs	r3, #48	; 0x30
 800f74c:	220a      	movs	r2, #10
 800f74e:	4630      	mov	r0, r6
 800f750:	f7ff ff8c 	bl	800f66c <__multadd>
 800f754:	45a0      	cmp	r8, r4
 800f756:	d1f5      	bne.n	800f744 <__s2b+0x4c>
 800f758:	f1a5 0408 	sub.w	r4, r5, #8
 800f75c:	444c      	add	r4, r9
 800f75e:	1b2d      	subs	r5, r5, r4
 800f760:	1963      	adds	r3, r4, r5
 800f762:	42bb      	cmp	r3, r7
 800f764:	db04      	blt.n	800f770 <__s2b+0x78>
 800f766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f76a:	340a      	adds	r4, #10
 800f76c:	2509      	movs	r5, #9
 800f76e:	e7f6      	b.n	800f75e <__s2b+0x66>
 800f770:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f774:	4601      	mov	r1, r0
 800f776:	3b30      	subs	r3, #48	; 0x30
 800f778:	220a      	movs	r2, #10
 800f77a:	4630      	mov	r0, r6
 800f77c:	f7ff ff76 	bl	800f66c <__multadd>
 800f780:	e7ee      	b.n	800f760 <__s2b+0x68>
 800f782:	bf00      	nop
 800f784:	080114b0 	.word	0x080114b0
 800f788:	0801153c 	.word	0x0801153c

0800f78c <__hi0bits>:
 800f78c:	0c03      	lsrs	r3, r0, #16
 800f78e:	041b      	lsls	r3, r3, #16
 800f790:	b9d3      	cbnz	r3, 800f7c8 <__hi0bits+0x3c>
 800f792:	0400      	lsls	r0, r0, #16
 800f794:	2310      	movs	r3, #16
 800f796:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f79a:	bf04      	itt	eq
 800f79c:	0200      	lsleq	r0, r0, #8
 800f79e:	3308      	addeq	r3, #8
 800f7a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f7a4:	bf04      	itt	eq
 800f7a6:	0100      	lsleq	r0, r0, #4
 800f7a8:	3304      	addeq	r3, #4
 800f7aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f7ae:	bf04      	itt	eq
 800f7b0:	0080      	lsleq	r0, r0, #2
 800f7b2:	3302      	addeq	r3, #2
 800f7b4:	2800      	cmp	r0, #0
 800f7b6:	db05      	blt.n	800f7c4 <__hi0bits+0x38>
 800f7b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f7bc:	f103 0301 	add.w	r3, r3, #1
 800f7c0:	bf08      	it	eq
 800f7c2:	2320      	moveq	r3, #32
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	4770      	bx	lr
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	e7e4      	b.n	800f796 <__hi0bits+0xa>

0800f7cc <__lo0bits>:
 800f7cc:	6803      	ldr	r3, [r0, #0]
 800f7ce:	f013 0207 	ands.w	r2, r3, #7
 800f7d2:	4601      	mov	r1, r0
 800f7d4:	d00b      	beq.n	800f7ee <__lo0bits+0x22>
 800f7d6:	07da      	lsls	r2, r3, #31
 800f7d8:	d423      	bmi.n	800f822 <__lo0bits+0x56>
 800f7da:	0798      	lsls	r0, r3, #30
 800f7dc:	bf49      	itett	mi
 800f7de:	085b      	lsrmi	r3, r3, #1
 800f7e0:	089b      	lsrpl	r3, r3, #2
 800f7e2:	2001      	movmi	r0, #1
 800f7e4:	600b      	strmi	r3, [r1, #0]
 800f7e6:	bf5c      	itt	pl
 800f7e8:	600b      	strpl	r3, [r1, #0]
 800f7ea:	2002      	movpl	r0, #2
 800f7ec:	4770      	bx	lr
 800f7ee:	b298      	uxth	r0, r3
 800f7f0:	b9a8      	cbnz	r0, 800f81e <__lo0bits+0x52>
 800f7f2:	0c1b      	lsrs	r3, r3, #16
 800f7f4:	2010      	movs	r0, #16
 800f7f6:	b2da      	uxtb	r2, r3
 800f7f8:	b90a      	cbnz	r2, 800f7fe <__lo0bits+0x32>
 800f7fa:	3008      	adds	r0, #8
 800f7fc:	0a1b      	lsrs	r3, r3, #8
 800f7fe:	071a      	lsls	r2, r3, #28
 800f800:	bf04      	itt	eq
 800f802:	091b      	lsreq	r3, r3, #4
 800f804:	3004      	addeq	r0, #4
 800f806:	079a      	lsls	r2, r3, #30
 800f808:	bf04      	itt	eq
 800f80a:	089b      	lsreq	r3, r3, #2
 800f80c:	3002      	addeq	r0, #2
 800f80e:	07da      	lsls	r2, r3, #31
 800f810:	d403      	bmi.n	800f81a <__lo0bits+0x4e>
 800f812:	085b      	lsrs	r3, r3, #1
 800f814:	f100 0001 	add.w	r0, r0, #1
 800f818:	d005      	beq.n	800f826 <__lo0bits+0x5a>
 800f81a:	600b      	str	r3, [r1, #0]
 800f81c:	4770      	bx	lr
 800f81e:	4610      	mov	r0, r2
 800f820:	e7e9      	b.n	800f7f6 <__lo0bits+0x2a>
 800f822:	2000      	movs	r0, #0
 800f824:	4770      	bx	lr
 800f826:	2020      	movs	r0, #32
 800f828:	4770      	bx	lr
	...

0800f82c <__i2b>:
 800f82c:	b510      	push	{r4, lr}
 800f82e:	460c      	mov	r4, r1
 800f830:	2101      	movs	r1, #1
 800f832:	f7ff feb9 	bl	800f5a8 <_Balloc>
 800f836:	4602      	mov	r2, r0
 800f838:	b928      	cbnz	r0, 800f846 <__i2b+0x1a>
 800f83a:	4b05      	ldr	r3, [pc, #20]	; (800f850 <__i2b+0x24>)
 800f83c:	4805      	ldr	r0, [pc, #20]	; (800f854 <__i2b+0x28>)
 800f83e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f842:	f000 fdff 	bl	8010444 <__assert_func>
 800f846:	2301      	movs	r3, #1
 800f848:	6144      	str	r4, [r0, #20]
 800f84a:	6103      	str	r3, [r0, #16]
 800f84c:	bd10      	pop	{r4, pc}
 800f84e:	bf00      	nop
 800f850:	080114b0 	.word	0x080114b0
 800f854:	0801153c 	.word	0x0801153c

0800f858 <__multiply>:
 800f858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f85c:	4691      	mov	r9, r2
 800f85e:	690a      	ldr	r2, [r1, #16]
 800f860:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f864:	429a      	cmp	r2, r3
 800f866:	bfb8      	it	lt
 800f868:	460b      	movlt	r3, r1
 800f86a:	460c      	mov	r4, r1
 800f86c:	bfbc      	itt	lt
 800f86e:	464c      	movlt	r4, r9
 800f870:	4699      	movlt	r9, r3
 800f872:	6927      	ldr	r7, [r4, #16]
 800f874:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f878:	68a3      	ldr	r3, [r4, #8]
 800f87a:	6861      	ldr	r1, [r4, #4]
 800f87c:	eb07 060a 	add.w	r6, r7, sl
 800f880:	42b3      	cmp	r3, r6
 800f882:	b085      	sub	sp, #20
 800f884:	bfb8      	it	lt
 800f886:	3101      	addlt	r1, #1
 800f888:	f7ff fe8e 	bl	800f5a8 <_Balloc>
 800f88c:	b930      	cbnz	r0, 800f89c <__multiply+0x44>
 800f88e:	4602      	mov	r2, r0
 800f890:	4b44      	ldr	r3, [pc, #272]	; (800f9a4 <__multiply+0x14c>)
 800f892:	4845      	ldr	r0, [pc, #276]	; (800f9a8 <__multiply+0x150>)
 800f894:	f240 115d 	movw	r1, #349	; 0x15d
 800f898:	f000 fdd4 	bl	8010444 <__assert_func>
 800f89c:	f100 0514 	add.w	r5, r0, #20
 800f8a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f8a4:	462b      	mov	r3, r5
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	4543      	cmp	r3, r8
 800f8aa:	d321      	bcc.n	800f8f0 <__multiply+0x98>
 800f8ac:	f104 0314 	add.w	r3, r4, #20
 800f8b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f8b4:	f109 0314 	add.w	r3, r9, #20
 800f8b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f8bc:	9202      	str	r2, [sp, #8]
 800f8be:	1b3a      	subs	r2, r7, r4
 800f8c0:	3a15      	subs	r2, #21
 800f8c2:	f022 0203 	bic.w	r2, r2, #3
 800f8c6:	3204      	adds	r2, #4
 800f8c8:	f104 0115 	add.w	r1, r4, #21
 800f8cc:	428f      	cmp	r7, r1
 800f8ce:	bf38      	it	cc
 800f8d0:	2204      	movcc	r2, #4
 800f8d2:	9201      	str	r2, [sp, #4]
 800f8d4:	9a02      	ldr	r2, [sp, #8]
 800f8d6:	9303      	str	r3, [sp, #12]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d80c      	bhi.n	800f8f6 <__multiply+0x9e>
 800f8dc:	2e00      	cmp	r6, #0
 800f8de:	dd03      	ble.n	800f8e8 <__multiply+0x90>
 800f8e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d05a      	beq.n	800f99e <__multiply+0x146>
 800f8e8:	6106      	str	r6, [r0, #16]
 800f8ea:	b005      	add	sp, #20
 800f8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8f0:	f843 2b04 	str.w	r2, [r3], #4
 800f8f4:	e7d8      	b.n	800f8a8 <__multiply+0x50>
 800f8f6:	f8b3 a000 	ldrh.w	sl, [r3]
 800f8fa:	f1ba 0f00 	cmp.w	sl, #0
 800f8fe:	d024      	beq.n	800f94a <__multiply+0xf2>
 800f900:	f104 0e14 	add.w	lr, r4, #20
 800f904:	46a9      	mov	r9, r5
 800f906:	f04f 0c00 	mov.w	ip, #0
 800f90a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f90e:	f8d9 1000 	ldr.w	r1, [r9]
 800f912:	fa1f fb82 	uxth.w	fp, r2
 800f916:	b289      	uxth	r1, r1
 800f918:	fb0a 110b 	mla	r1, sl, fp, r1
 800f91c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f920:	f8d9 2000 	ldr.w	r2, [r9]
 800f924:	4461      	add	r1, ip
 800f926:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f92a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f92e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f932:	b289      	uxth	r1, r1
 800f934:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f938:	4577      	cmp	r7, lr
 800f93a:	f849 1b04 	str.w	r1, [r9], #4
 800f93e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f942:	d8e2      	bhi.n	800f90a <__multiply+0xb2>
 800f944:	9a01      	ldr	r2, [sp, #4]
 800f946:	f845 c002 	str.w	ip, [r5, r2]
 800f94a:	9a03      	ldr	r2, [sp, #12]
 800f94c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f950:	3304      	adds	r3, #4
 800f952:	f1b9 0f00 	cmp.w	r9, #0
 800f956:	d020      	beq.n	800f99a <__multiply+0x142>
 800f958:	6829      	ldr	r1, [r5, #0]
 800f95a:	f104 0c14 	add.w	ip, r4, #20
 800f95e:	46ae      	mov	lr, r5
 800f960:	f04f 0a00 	mov.w	sl, #0
 800f964:	f8bc b000 	ldrh.w	fp, [ip]
 800f968:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f96c:	fb09 220b 	mla	r2, r9, fp, r2
 800f970:	4492      	add	sl, r2
 800f972:	b289      	uxth	r1, r1
 800f974:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f978:	f84e 1b04 	str.w	r1, [lr], #4
 800f97c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f980:	f8be 1000 	ldrh.w	r1, [lr]
 800f984:	0c12      	lsrs	r2, r2, #16
 800f986:	fb09 1102 	mla	r1, r9, r2, r1
 800f98a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f98e:	4567      	cmp	r7, ip
 800f990:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f994:	d8e6      	bhi.n	800f964 <__multiply+0x10c>
 800f996:	9a01      	ldr	r2, [sp, #4]
 800f998:	50a9      	str	r1, [r5, r2]
 800f99a:	3504      	adds	r5, #4
 800f99c:	e79a      	b.n	800f8d4 <__multiply+0x7c>
 800f99e:	3e01      	subs	r6, #1
 800f9a0:	e79c      	b.n	800f8dc <__multiply+0x84>
 800f9a2:	bf00      	nop
 800f9a4:	080114b0 	.word	0x080114b0
 800f9a8:	0801153c 	.word	0x0801153c

0800f9ac <__pow5mult>:
 800f9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9b0:	4615      	mov	r5, r2
 800f9b2:	f012 0203 	ands.w	r2, r2, #3
 800f9b6:	4606      	mov	r6, r0
 800f9b8:	460f      	mov	r7, r1
 800f9ba:	d007      	beq.n	800f9cc <__pow5mult+0x20>
 800f9bc:	4c25      	ldr	r4, [pc, #148]	; (800fa54 <__pow5mult+0xa8>)
 800f9be:	3a01      	subs	r2, #1
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f9c6:	f7ff fe51 	bl	800f66c <__multadd>
 800f9ca:	4607      	mov	r7, r0
 800f9cc:	10ad      	asrs	r5, r5, #2
 800f9ce:	d03d      	beq.n	800fa4c <__pow5mult+0xa0>
 800f9d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f9d2:	b97c      	cbnz	r4, 800f9f4 <__pow5mult+0x48>
 800f9d4:	2010      	movs	r0, #16
 800f9d6:	f7ff fdcd 	bl	800f574 <malloc>
 800f9da:	4602      	mov	r2, r0
 800f9dc:	6270      	str	r0, [r6, #36]	; 0x24
 800f9de:	b928      	cbnz	r0, 800f9ec <__pow5mult+0x40>
 800f9e0:	4b1d      	ldr	r3, [pc, #116]	; (800fa58 <__pow5mult+0xac>)
 800f9e2:	481e      	ldr	r0, [pc, #120]	; (800fa5c <__pow5mult+0xb0>)
 800f9e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f9e8:	f000 fd2c 	bl	8010444 <__assert_func>
 800f9ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f9f0:	6004      	str	r4, [r0, #0]
 800f9f2:	60c4      	str	r4, [r0, #12]
 800f9f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f9f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f9fc:	b94c      	cbnz	r4, 800fa12 <__pow5mult+0x66>
 800f9fe:	f240 2171 	movw	r1, #625	; 0x271
 800fa02:	4630      	mov	r0, r6
 800fa04:	f7ff ff12 	bl	800f82c <__i2b>
 800fa08:	2300      	movs	r3, #0
 800fa0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa0e:	4604      	mov	r4, r0
 800fa10:	6003      	str	r3, [r0, #0]
 800fa12:	f04f 0900 	mov.w	r9, #0
 800fa16:	07eb      	lsls	r3, r5, #31
 800fa18:	d50a      	bpl.n	800fa30 <__pow5mult+0x84>
 800fa1a:	4639      	mov	r1, r7
 800fa1c:	4622      	mov	r2, r4
 800fa1e:	4630      	mov	r0, r6
 800fa20:	f7ff ff1a 	bl	800f858 <__multiply>
 800fa24:	4639      	mov	r1, r7
 800fa26:	4680      	mov	r8, r0
 800fa28:	4630      	mov	r0, r6
 800fa2a:	f7ff fdfd 	bl	800f628 <_Bfree>
 800fa2e:	4647      	mov	r7, r8
 800fa30:	106d      	asrs	r5, r5, #1
 800fa32:	d00b      	beq.n	800fa4c <__pow5mult+0xa0>
 800fa34:	6820      	ldr	r0, [r4, #0]
 800fa36:	b938      	cbnz	r0, 800fa48 <__pow5mult+0x9c>
 800fa38:	4622      	mov	r2, r4
 800fa3a:	4621      	mov	r1, r4
 800fa3c:	4630      	mov	r0, r6
 800fa3e:	f7ff ff0b 	bl	800f858 <__multiply>
 800fa42:	6020      	str	r0, [r4, #0]
 800fa44:	f8c0 9000 	str.w	r9, [r0]
 800fa48:	4604      	mov	r4, r0
 800fa4a:	e7e4      	b.n	800fa16 <__pow5mult+0x6a>
 800fa4c:	4638      	mov	r0, r7
 800fa4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa52:	bf00      	nop
 800fa54:	08011688 	.word	0x08011688
 800fa58:	0801143e 	.word	0x0801143e
 800fa5c:	0801153c 	.word	0x0801153c

0800fa60 <__lshift>:
 800fa60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa64:	460c      	mov	r4, r1
 800fa66:	6849      	ldr	r1, [r1, #4]
 800fa68:	6923      	ldr	r3, [r4, #16]
 800fa6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fa6e:	68a3      	ldr	r3, [r4, #8]
 800fa70:	4607      	mov	r7, r0
 800fa72:	4691      	mov	r9, r2
 800fa74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa78:	f108 0601 	add.w	r6, r8, #1
 800fa7c:	42b3      	cmp	r3, r6
 800fa7e:	db0b      	blt.n	800fa98 <__lshift+0x38>
 800fa80:	4638      	mov	r0, r7
 800fa82:	f7ff fd91 	bl	800f5a8 <_Balloc>
 800fa86:	4605      	mov	r5, r0
 800fa88:	b948      	cbnz	r0, 800fa9e <__lshift+0x3e>
 800fa8a:	4602      	mov	r2, r0
 800fa8c:	4b2a      	ldr	r3, [pc, #168]	; (800fb38 <__lshift+0xd8>)
 800fa8e:	482b      	ldr	r0, [pc, #172]	; (800fb3c <__lshift+0xdc>)
 800fa90:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fa94:	f000 fcd6 	bl	8010444 <__assert_func>
 800fa98:	3101      	adds	r1, #1
 800fa9a:	005b      	lsls	r3, r3, #1
 800fa9c:	e7ee      	b.n	800fa7c <__lshift+0x1c>
 800fa9e:	2300      	movs	r3, #0
 800faa0:	f100 0114 	add.w	r1, r0, #20
 800faa4:	f100 0210 	add.w	r2, r0, #16
 800faa8:	4618      	mov	r0, r3
 800faaa:	4553      	cmp	r3, sl
 800faac:	db37      	blt.n	800fb1e <__lshift+0xbe>
 800faae:	6920      	ldr	r0, [r4, #16]
 800fab0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fab4:	f104 0314 	add.w	r3, r4, #20
 800fab8:	f019 091f 	ands.w	r9, r9, #31
 800fabc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fac0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fac4:	d02f      	beq.n	800fb26 <__lshift+0xc6>
 800fac6:	f1c9 0e20 	rsb	lr, r9, #32
 800faca:	468a      	mov	sl, r1
 800facc:	f04f 0c00 	mov.w	ip, #0
 800fad0:	681a      	ldr	r2, [r3, #0]
 800fad2:	fa02 f209 	lsl.w	r2, r2, r9
 800fad6:	ea42 020c 	orr.w	r2, r2, ip
 800fada:	f84a 2b04 	str.w	r2, [sl], #4
 800fade:	f853 2b04 	ldr.w	r2, [r3], #4
 800fae2:	4298      	cmp	r0, r3
 800fae4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fae8:	d8f2      	bhi.n	800fad0 <__lshift+0x70>
 800faea:	1b03      	subs	r3, r0, r4
 800faec:	3b15      	subs	r3, #21
 800faee:	f023 0303 	bic.w	r3, r3, #3
 800faf2:	3304      	adds	r3, #4
 800faf4:	f104 0215 	add.w	r2, r4, #21
 800faf8:	4290      	cmp	r0, r2
 800fafa:	bf38      	it	cc
 800fafc:	2304      	movcc	r3, #4
 800fafe:	f841 c003 	str.w	ip, [r1, r3]
 800fb02:	f1bc 0f00 	cmp.w	ip, #0
 800fb06:	d001      	beq.n	800fb0c <__lshift+0xac>
 800fb08:	f108 0602 	add.w	r6, r8, #2
 800fb0c:	3e01      	subs	r6, #1
 800fb0e:	4638      	mov	r0, r7
 800fb10:	612e      	str	r6, [r5, #16]
 800fb12:	4621      	mov	r1, r4
 800fb14:	f7ff fd88 	bl	800f628 <_Bfree>
 800fb18:	4628      	mov	r0, r5
 800fb1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800fb22:	3301      	adds	r3, #1
 800fb24:	e7c1      	b.n	800faaa <__lshift+0x4a>
 800fb26:	3904      	subs	r1, #4
 800fb28:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb2c:	f841 2f04 	str.w	r2, [r1, #4]!
 800fb30:	4298      	cmp	r0, r3
 800fb32:	d8f9      	bhi.n	800fb28 <__lshift+0xc8>
 800fb34:	e7ea      	b.n	800fb0c <__lshift+0xac>
 800fb36:	bf00      	nop
 800fb38:	080114b0 	.word	0x080114b0
 800fb3c:	0801153c 	.word	0x0801153c

0800fb40 <__mcmp>:
 800fb40:	b530      	push	{r4, r5, lr}
 800fb42:	6902      	ldr	r2, [r0, #16]
 800fb44:	690c      	ldr	r4, [r1, #16]
 800fb46:	1b12      	subs	r2, r2, r4
 800fb48:	d10e      	bne.n	800fb68 <__mcmp+0x28>
 800fb4a:	f100 0314 	add.w	r3, r0, #20
 800fb4e:	3114      	adds	r1, #20
 800fb50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fb54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fb58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fb5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fb60:	42a5      	cmp	r5, r4
 800fb62:	d003      	beq.n	800fb6c <__mcmp+0x2c>
 800fb64:	d305      	bcc.n	800fb72 <__mcmp+0x32>
 800fb66:	2201      	movs	r2, #1
 800fb68:	4610      	mov	r0, r2
 800fb6a:	bd30      	pop	{r4, r5, pc}
 800fb6c:	4283      	cmp	r3, r0
 800fb6e:	d3f3      	bcc.n	800fb58 <__mcmp+0x18>
 800fb70:	e7fa      	b.n	800fb68 <__mcmp+0x28>
 800fb72:	f04f 32ff 	mov.w	r2, #4294967295
 800fb76:	e7f7      	b.n	800fb68 <__mcmp+0x28>

0800fb78 <__mdiff>:
 800fb78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb7c:	460c      	mov	r4, r1
 800fb7e:	4606      	mov	r6, r0
 800fb80:	4611      	mov	r1, r2
 800fb82:	4620      	mov	r0, r4
 800fb84:	4690      	mov	r8, r2
 800fb86:	f7ff ffdb 	bl	800fb40 <__mcmp>
 800fb8a:	1e05      	subs	r5, r0, #0
 800fb8c:	d110      	bne.n	800fbb0 <__mdiff+0x38>
 800fb8e:	4629      	mov	r1, r5
 800fb90:	4630      	mov	r0, r6
 800fb92:	f7ff fd09 	bl	800f5a8 <_Balloc>
 800fb96:	b930      	cbnz	r0, 800fba6 <__mdiff+0x2e>
 800fb98:	4b3a      	ldr	r3, [pc, #232]	; (800fc84 <__mdiff+0x10c>)
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	f240 2132 	movw	r1, #562	; 0x232
 800fba0:	4839      	ldr	r0, [pc, #228]	; (800fc88 <__mdiff+0x110>)
 800fba2:	f000 fc4f 	bl	8010444 <__assert_func>
 800fba6:	2301      	movs	r3, #1
 800fba8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fbac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbb0:	bfa4      	itt	ge
 800fbb2:	4643      	movge	r3, r8
 800fbb4:	46a0      	movge	r8, r4
 800fbb6:	4630      	mov	r0, r6
 800fbb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fbbc:	bfa6      	itte	ge
 800fbbe:	461c      	movge	r4, r3
 800fbc0:	2500      	movge	r5, #0
 800fbc2:	2501      	movlt	r5, #1
 800fbc4:	f7ff fcf0 	bl	800f5a8 <_Balloc>
 800fbc8:	b920      	cbnz	r0, 800fbd4 <__mdiff+0x5c>
 800fbca:	4b2e      	ldr	r3, [pc, #184]	; (800fc84 <__mdiff+0x10c>)
 800fbcc:	4602      	mov	r2, r0
 800fbce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fbd2:	e7e5      	b.n	800fba0 <__mdiff+0x28>
 800fbd4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fbd8:	6926      	ldr	r6, [r4, #16]
 800fbda:	60c5      	str	r5, [r0, #12]
 800fbdc:	f104 0914 	add.w	r9, r4, #20
 800fbe0:	f108 0514 	add.w	r5, r8, #20
 800fbe4:	f100 0e14 	add.w	lr, r0, #20
 800fbe8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fbec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fbf0:	f108 0210 	add.w	r2, r8, #16
 800fbf4:	46f2      	mov	sl, lr
 800fbf6:	2100      	movs	r1, #0
 800fbf8:	f859 3b04 	ldr.w	r3, [r9], #4
 800fbfc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fc00:	fa1f f883 	uxth.w	r8, r3
 800fc04:	fa11 f18b 	uxtah	r1, r1, fp
 800fc08:	0c1b      	lsrs	r3, r3, #16
 800fc0a:	eba1 0808 	sub.w	r8, r1, r8
 800fc0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fc12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fc16:	fa1f f888 	uxth.w	r8, r8
 800fc1a:	1419      	asrs	r1, r3, #16
 800fc1c:	454e      	cmp	r6, r9
 800fc1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fc22:	f84a 3b04 	str.w	r3, [sl], #4
 800fc26:	d8e7      	bhi.n	800fbf8 <__mdiff+0x80>
 800fc28:	1b33      	subs	r3, r6, r4
 800fc2a:	3b15      	subs	r3, #21
 800fc2c:	f023 0303 	bic.w	r3, r3, #3
 800fc30:	3304      	adds	r3, #4
 800fc32:	3415      	adds	r4, #21
 800fc34:	42a6      	cmp	r6, r4
 800fc36:	bf38      	it	cc
 800fc38:	2304      	movcc	r3, #4
 800fc3a:	441d      	add	r5, r3
 800fc3c:	4473      	add	r3, lr
 800fc3e:	469e      	mov	lr, r3
 800fc40:	462e      	mov	r6, r5
 800fc42:	4566      	cmp	r6, ip
 800fc44:	d30e      	bcc.n	800fc64 <__mdiff+0xec>
 800fc46:	f10c 0203 	add.w	r2, ip, #3
 800fc4a:	1b52      	subs	r2, r2, r5
 800fc4c:	f022 0203 	bic.w	r2, r2, #3
 800fc50:	3d03      	subs	r5, #3
 800fc52:	45ac      	cmp	ip, r5
 800fc54:	bf38      	it	cc
 800fc56:	2200      	movcc	r2, #0
 800fc58:	441a      	add	r2, r3
 800fc5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fc5e:	b17b      	cbz	r3, 800fc80 <__mdiff+0x108>
 800fc60:	6107      	str	r7, [r0, #16]
 800fc62:	e7a3      	b.n	800fbac <__mdiff+0x34>
 800fc64:	f856 8b04 	ldr.w	r8, [r6], #4
 800fc68:	fa11 f288 	uxtah	r2, r1, r8
 800fc6c:	1414      	asrs	r4, r2, #16
 800fc6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fc72:	b292      	uxth	r2, r2
 800fc74:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fc78:	f84e 2b04 	str.w	r2, [lr], #4
 800fc7c:	1421      	asrs	r1, r4, #16
 800fc7e:	e7e0      	b.n	800fc42 <__mdiff+0xca>
 800fc80:	3f01      	subs	r7, #1
 800fc82:	e7ea      	b.n	800fc5a <__mdiff+0xe2>
 800fc84:	080114b0 	.word	0x080114b0
 800fc88:	0801153c 	.word	0x0801153c

0800fc8c <__ulp>:
 800fc8c:	b082      	sub	sp, #8
 800fc8e:	ed8d 0b00 	vstr	d0, [sp]
 800fc92:	9b01      	ldr	r3, [sp, #4]
 800fc94:	4912      	ldr	r1, [pc, #72]	; (800fce0 <__ulp+0x54>)
 800fc96:	4019      	ands	r1, r3
 800fc98:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fc9c:	2900      	cmp	r1, #0
 800fc9e:	dd05      	ble.n	800fcac <__ulp+0x20>
 800fca0:	2200      	movs	r2, #0
 800fca2:	460b      	mov	r3, r1
 800fca4:	ec43 2b10 	vmov	d0, r2, r3
 800fca8:	b002      	add	sp, #8
 800fcaa:	4770      	bx	lr
 800fcac:	4249      	negs	r1, r1
 800fcae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fcb2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fcb6:	f04f 0200 	mov.w	r2, #0
 800fcba:	f04f 0300 	mov.w	r3, #0
 800fcbe:	da04      	bge.n	800fcca <__ulp+0x3e>
 800fcc0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fcc4:	fa41 f300 	asr.w	r3, r1, r0
 800fcc8:	e7ec      	b.n	800fca4 <__ulp+0x18>
 800fcca:	f1a0 0114 	sub.w	r1, r0, #20
 800fcce:	291e      	cmp	r1, #30
 800fcd0:	bfda      	itte	le
 800fcd2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fcd6:	fa20 f101 	lsrle.w	r1, r0, r1
 800fcda:	2101      	movgt	r1, #1
 800fcdc:	460a      	mov	r2, r1
 800fcde:	e7e1      	b.n	800fca4 <__ulp+0x18>
 800fce0:	7ff00000 	.word	0x7ff00000

0800fce4 <__b2d>:
 800fce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fce6:	6905      	ldr	r5, [r0, #16]
 800fce8:	f100 0714 	add.w	r7, r0, #20
 800fcec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fcf0:	1f2e      	subs	r6, r5, #4
 800fcf2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	f7ff fd48 	bl	800f78c <__hi0bits>
 800fcfc:	f1c0 0320 	rsb	r3, r0, #32
 800fd00:	280a      	cmp	r0, #10
 800fd02:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fd80 <__b2d+0x9c>
 800fd06:	600b      	str	r3, [r1, #0]
 800fd08:	dc14      	bgt.n	800fd34 <__b2d+0x50>
 800fd0a:	f1c0 0e0b 	rsb	lr, r0, #11
 800fd0e:	fa24 f10e 	lsr.w	r1, r4, lr
 800fd12:	42b7      	cmp	r7, r6
 800fd14:	ea41 030c 	orr.w	r3, r1, ip
 800fd18:	bf34      	ite	cc
 800fd1a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fd1e:	2100      	movcs	r1, #0
 800fd20:	3015      	adds	r0, #21
 800fd22:	fa04 f000 	lsl.w	r0, r4, r0
 800fd26:	fa21 f10e 	lsr.w	r1, r1, lr
 800fd2a:	ea40 0201 	orr.w	r2, r0, r1
 800fd2e:	ec43 2b10 	vmov	d0, r2, r3
 800fd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd34:	42b7      	cmp	r7, r6
 800fd36:	bf3a      	itte	cc
 800fd38:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fd3c:	f1a5 0608 	subcc.w	r6, r5, #8
 800fd40:	2100      	movcs	r1, #0
 800fd42:	380b      	subs	r0, #11
 800fd44:	d017      	beq.n	800fd76 <__b2d+0x92>
 800fd46:	f1c0 0c20 	rsb	ip, r0, #32
 800fd4a:	fa04 f500 	lsl.w	r5, r4, r0
 800fd4e:	42be      	cmp	r6, r7
 800fd50:	fa21 f40c 	lsr.w	r4, r1, ip
 800fd54:	ea45 0504 	orr.w	r5, r5, r4
 800fd58:	bf8c      	ite	hi
 800fd5a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fd5e:	2400      	movls	r4, #0
 800fd60:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fd64:	fa01 f000 	lsl.w	r0, r1, r0
 800fd68:	fa24 f40c 	lsr.w	r4, r4, ip
 800fd6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fd70:	ea40 0204 	orr.w	r2, r0, r4
 800fd74:	e7db      	b.n	800fd2e <__b2d+0x4a>
 800fd76:	ea44 030c 	orr.w	r3, r4, ip
 800fd7a:	460a      	mov	r2, r1
 800fd7c:	e7d7      	b.n	800fd2e <__b2d+0x4a>
 800fd7e:	bf00      	nop
 800fd80:	3ff00000 	.word	0x3ff00000

0800fd84 <__d2b>:
 800fd84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd88:	4689      	mov	r9, r1
 800fd8a:	2101      	movs	r1, #1
 800fd8c:	ec57 6b10 	vmov	r6, r7, d0
 800fd90:	4690      	mov	r8, r2
 800fd92:	f7ff fc09 	bl	800f5a8 <_Balloc>
 800fd96:	4604      	mov	r4, r0
 800fd98:	b930      	cbnz	r0, 800fda8 <__d2b+0x24>
 800fd9a:	4602      	mov	r2, r0
 800fd9c:	4b25      	ldr	r3, [pc, #148]	; (800fe34 <__d2b+0xb0>)
 800fd9e:	4826      	ldr	r0, [pc, #152]	; (800fe38 <__d2b+0xb4>)
 800fda0:	f240 310a 	movw	r1, #778	; 0x30a
 800fda4:	f000 fb4e 	bl	8010444 <__assert_func>
 800fda8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fdac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fdb0:	bb35      	cbnz	r5, 800fe00 <__d2b+0x7c>
 800fdb2:	2e00      	cmp	r6, #0
 800fdb4:	9301      	str	r3, [sp, #4]
 800fdb6:	d028      	beq.n	800fe0a <__d2b+0x86>
 800fdb8:	4668      	mov	r0, sp
 800fdba:	9600      	str	r6, [sp, #0]
 800fdbc:	f7ff fd06 	bl	800f7cc <__lo0bits>
 800fdc0:	9900      	ldr	r1, [sp, #0]
 800fdc2:	b300      	cbz	r0, 800fe06 <__d2b+0x82>
 800fdc4:	9a01      	ldr	r2, [sp, #4]
 800fdc6:	f1c0 0320 	rsb	r3, r0, #32
 800fdca:	fa02 f303 	lsl.w	r3, r2, r3
 800fdce:	430b      	orrs	r3, r1
 800fdd0:	40c2      	lsrs	r2, r0
 800fdd2:	6163      	str	r3, [r4, #20]
 800fdd4:	9201      	str	r2, [sp, #4]
 800fdd6:	9b01      	ldr	r3, [sp, #4]
 800fdd8:	61a3      	str	r3, [r4, #24]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	bf14      	ite	ne
 800fdde:	2202      	movne	r2, #2
 800fde0:	2201      	moveq	r2, #1
 800fde2:	6122      	str	r2, [r4, #16]
 800fde4:	b1d5      	cbz	r5, 800fe1c <__d2b+0x98>
 800fde6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fdea:	4405      	add	r5, r0
 800fdec:	f8c9 5000 	str.w	r5, [r9]
 800fdf0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fdf4:	f8c8 0000 	str.w	r0, [r8]
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	b003      	add	sp, #12
 800fdfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fe04:	e7d5      	b.n	800fdb2 <__d2b+0x2e>
 800fe06:	6161      	str	r1, [r4, #20]
 800fe08:	e7e5      	b.n	800fdd6 <__d2b+0x52>
 800fe0a:	a801      	add	r0, sp, #4
 800fe0c:	f7ff fcde 	bl	800f7cc <__lo0bits>
 800fe10:	9b01      	ldr	r3, [sp, #4]
 800fe12:	6163      	str	r3, [r4, #20]
 800fe14:	2201      	movs	r2, #1
 800fe16:	6122      	str	r2, [r4, #16]
 800fe18:	3020      	adds	r0, #32
 800fe1a:	e7e3      	b.n	800fde4 <__d2b+0x60>
 800fe1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fe20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fe24:	f8c9 0000 	str.w	r0, [r9]
 800fe28:	6918      	ldr	r0, [r3, #16]
 800fe2a:	f7ff fcaf 	bl	800f78c <__hi0bits>
 800fe2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fe32:	e7df      	b.n	800fdf4 <__d2b+0x70>
 800fe34:	080114b0 	.word	0x080114b0
 800fe38:	0801153c 	.word	0x0801153c

0800fe3c <__ratio>:
 800fe3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe40:	4688      	mov	r8, r1
 800fe42:	4669      	mov	r1, sp
 800fe44:	4681      	mov	r9, r0
 800fe46:	f7ff ff4d 	bl	800fce4 <__b2d>
 800fe4a:	a901      	add	r1, sp, #4
 800fe4c:	4640      	mov	r0, r8
 800fe4e:	ec55 4b10 	vmov	r4, r5, d0
 800fe52:	f7ff ff47 	bl	800fce4 <__b2d>
 800fe56:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fe5a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fe5e:	eba3 0c02 	sub.w	ip, r3, r2
 800fe62:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fe66:	1a9b      	subs	r3, r3, r2
 800fe68:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fe6c:	ec51 0b10 	vmov	r0, r1, d0
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	bfd6      	itet	le
 800fe74:	460a      	movle	r2, r1
 800fe76:	462a      	movgt	r2, r5
 800fe78:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fe7c:	468b      	mov	fp, r1
 800fe7e:	462f      	mov	r7, r5
 800fe80:	bfd4      	ite	le
 800fe82:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fe86:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	ee10 2a10 	vmov	r2, s0
 800fe90:	465b      	mov	r3, fp
 800fe92:	4639      	mov	r1, r7
 800fe94:	f7f0 fce2 	bl	800085c <__aeabi_ddiv>
 800fe98:	ec41 0b10 	vmov	d0, r0, r1
 800fe9c:	b003      	add	sp, #12
 800fe9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fea2 <__copybits>:
 800fea2:	3901      	subs	r1, #1
 800fea4:	b570      	push	{r4, r5, r6, lr}
 800fea6:	1149      	asrs	r1, r1, #5
 800fea8:	6914      	ldr	r4, [r2, #16]
 800feaa:	3101      	adds	r1, #1
 800feac:	f102 0314 	add.w	r3, r2, #20
 800feb0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800feb4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800feb8:	1f05      	subs	r5, r0, #4
 800feba:	42a3      	cmp	r3, r4
 800febc:	d30c      	bcc.n	800fed8 <__copybits+0x36>
 800febe:	1aa3      	subs	r3, r4, r2
 800fec0:	3b11      	subs	r3, #17
 800fec2:	f023 0303 	bic.w	r3, r3, #3
 800fec6:	3211      	adds	r2, #17
 800fec8:	42a2      	cmp	r2, r4
 800feca:	bf88      	it	hi
 800fecc:	2300      	movhi	r3, #0
 800fece:	4418      	add	r0, r3
 800fed0:	2300      	movs	r3, #0
 800fed2:	4288      	cmp	r0, r1
 800fed4:	d305      	bcc.n	800fee2 <__copybits+0x40>
 800fed6:	bd70      	pop	{r4, r5, r6, pc}
 800fed8:	f853 6b04 	ldr.w	r6, [r3], #4
 800fedc:	f845 6f04 	str.w	r6, [r5, #4]!
 800fee0:	e7eb      	b.n	800feba <__copybits+0x18>
 800fee2:	f840 3b04 	str.w	r3, [r0], #4
 800fee6:	e7f4      	b.n	800fed2 <__copybits+0x30>

0800fee8 <__any_on>:
 800fee8:	f100 0214 	add.w	r2, r0, #20
 800feec:	6900      	ldr	r0, [r0, #16]
 800feee:	114b      	asrs	r3, r1, #5
 800fef0:	4298      	cmp	r0, r3
 800fef2:	b510      	push	{r4, lr}
 800fef4:	db11      	blt.n	800ff1a <__any_on+0x32>
 800fef6:	dd0a      	ble.n	800ff0e <__any_on+0x26>
 800fef8:	f011 011f 	ands.w	r1, r1, #31
 800fefc:	d007      	beq.n	800ff0e <__any_on+0x26>
 800fefe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ff02:	fa24 f001 	lsr.w	r0, r4, r1
 800ff06:	fa00 f101 	lsl.w	r1, r0, r1
 800ff0a:	428c      	cmp	r4, r1
 800ff0c:	d10b      	bne.n	800ff26 <__any_on+0x3e>
 800ff0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d803      	bhi.n	800ff1e <__any_on+0x36>
 800ff16:	2000      	movs	r0, #0
 800ff18:	bd10      	pop	{r4, pc}
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	e7f7      	b.n	800ff0e <__any_on+0x26>
 800ff1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ff22:	2900      	cmp	r1, #0
 800ff24:	d0f5      	beq.n	800ff12 <__any_on+0x2a>
 800ff26:	2001      	movs	r0, #1
 800ff28:	e7f6      	b.n	800ff18 <__any_on+0x30>

0800ff2a <_calloc_r>:
 800ff2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff2c:	fba1 2402 	umull	r2, r4, r1, r2
 800ff30:	b94c      	cbnz	r4, 800ff46 <_calloc_r+0x1c>
 800ff32:	4611      	mov	r1, r2
 800ff34:	9201      	str	r2, [sp, #4]
 800ff36:	f000 f87b 	bl	8010030 <_malloc_r>
 800ff3a:	9a01      	ldr	r2, [sp, #4]
 800ff3c:	4605      	mov	r5, r0
 800ff3e:	b930      	cbnz	r0, 800ff4e <_calloc_r+0x24>
 800ff40:	4628      	mov	r0, r5
 800ff42:	b003      	add	sp, #12
 800ff44:	bd30      	pop	{r4, r5, pc}
 800ff46:	220c      	movs	r2, #12
 800ff48:	6002      	str	r2, [r0, #0]
 800ff4a:	2500      	movs	r5, #0
 800ff4c:	e7f8      	b.n	800ff40 <_calloc_r+0x16>
 800ff4e:	4621      	mov	r1, r4
 800ff50:	f7fc fbce 	bl	800c6f0 <memset>
 800ff54:	e7f4      	b.n	800ff40 <_calloc_r+0x16>
	...

0800ff58 <_free_r>:
 800ff58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff5a:	2900      	cmp	r1, #0
 800ff5c:	d044      	beq.n	800ffe8 <_free_r+0x90>
 800ff5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff62:	9001      	str	r0, [sp, #4]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	f1a1 0404 	sub.w	r4, r1, #4
 800ff6a:	bfb8      	it	lt
 800ff6c:	18e4      	addlt	r4, r4, r3
 800ff6e:	f000 fab3 	bl	80104d8 <__malloc_lock>
 800ff72:	4a1e      	ldr	r2, [pc, #120]	; (800ffec <_free_r+0x94>)
 800ff74:	9801      	ldr	r0, [sp, #4]
 800ff76:	6813      	ldr	r3, [r2, #0]
 800ff78:	b933      	cbnz	r3, 800ff88 <_free_r+0x30>
 800ff7a:	6063      	str	r3, [r4, #4]
 800ff7c:	6014      	str	r4, [r2, #0]
 800ff7e:	b003      	add	sp, #12
 800ff80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff84:	f000 baae 	b.w	80104e4 <__malloc_unlock>
 800ff88:	42a3      	cmp	r3, r4
 800ff8a:	d908      	bls.n	800ff9e <_free_r+0x46>
 800ff8c:	6825      	ldr	r5, [r4, #0]
 800ff8e:	1961      	adds	r1, r4, r5
 800ff90:	428b      	cmp	r3, r1
 800ff92:	bf01      	itttt	eq
 800ff94:	6819      	ldreq	r1, [r3, #0]
 800ff96:	685b      	ldreq	r3, [r3, #4]
 800ff98:	1949      	addeq	r1, r1, r5
 800ff9a:	6021      	streq	r1, [r4, #0]
 800ff9c:	e7ed      	b.n	800ff7a <_free_r+0x22>
 800ff9e:	461a      	mov	r2, r3
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	b10b      	cbz	r3, 800ffa8 <_free_r+0x50>
 800ffa4:	42a3      	cmp	r3, r4
 800ffa6:	d9fa      	bls.n	800ff9e <_free_r+0x46>
 800ffa8:	6811      	ldr	r1, [r2, #0]
 800ffaa:	1855      	adds	r5, r2, r1
 800ffac:	42a5      	cmp	r5, r4
 800ffae:	d10b      	bne.n	800ffc8 <_free_r+0x70>
 800ffb0:	6824      	ldr	r4, [r4, #0]
 800ffb2:	4421      	add	r1, r4
 800ffb4:	1854      	adds	r4, r2, r1
 800ffb6:	42a3      	cmp	r3, r4
 800ffb8:	6011      	str	r1, [r2, #0]
 800ffba:	d1e0      	bne.n	800ff7e <_free_r+0x26>
 800ffbc:	681c      	ldr	r4, [r3, #0]
 800ffbe:	685b      	ldr	r3, [r3, #4]
 800ffc0:	6053      	str	r3, [r2, #4]
 800ffc2:	4421      	add	r1, r4
 800ffc4:	6011      	str	r1, [r2, #0]
 800ffc6:	e7da      	b.n	800ff7e <_free_r+0x26>
 800ffc8:	d902      	bls.n	800ffd0 <_free_r+0x78>
 800ffca:	230c      	movs	r3, #12
 800ffcc:	6003      	str	r3, [r0, #0]
 800ffce:	e7d6      	b.n	800ff7e <_free_r+0x26>
 800ffd0:	6825      	ldr	r5, [r4, #0]
 800ffd2:	1961      	adds	r1, r4, r5
 800ffd4:	428b      	cmp	r3, r1
 800ffd6:	bf04      	itt	eq
 800ffd8:	6819      	ldreq	r1, [r3, #0]
 800ffda:	685b      	ldreq	r3, [r3, #4]
 800ffdc:	6063      	str	r3, [r4, #4]
 800ffde:	bf04      	itt	eq
 800ffe0:	1949      	addeq	r1, r1, r5
 800ffe2:	6021      	streq	r1, [r4, #0]
 800ffe4:	6054      	str	r4, [r2, #4]
 800ffe6:	e7ca      	b.n	800ff7e <_free_r+0x26>
 800ffe8:	b003      	add	sp, #12
 800ffea:	bd30      	pop	{r4, r5, pc}
 800ffec:	20001198 	.word	0x20001198

0800fff0 <sbrk_aligned>:
 800fff0:	b570      	push	{r4, r5, r6, lr}
 800fff2:	4e0e      	ldr	r6, [pc, #56]	; (801002c <sbrk_aligned+0x3c>)
 800fff4:	460c      	mov	r4, r1
 800fff6:	6831      	ldr	r1, [r6, #0]
 800fff8:	4605      	mov	r5, r0
 800fffa:	b911      	cbnz	r1, 8010002 <sbrk_aligned+0x12>
 800fffc:	f000 f9f0 	bl	80103e0 <_sbrk_r>
 8010000:	6030      	str	r0, [r6, #0]
 8010002:	4621      	mov	r1, r4
 8010004:	4628      	mov	r0, r5
 8010006:	f000 f9eb 	bl	80103e0 <_sbrk_r>
 801000a:	1c43      	adds	r3, r0, #1
 801000c:	d00a      	beq.n	8010024 <sbrk_aligned+0x34>
 801000e:	1cc4      	adds	r4, r0, #3
 8010010:	f024 0403 	bic.w	r4, r4, #3
 8010014:	42a0      	cmp	r0, r4
 8010016:	d007      	beq.n	8010028 <sbrk_aligned+0x38>
 8010018:	1a21      	subs	r1, r4, r0
 801001a:	4628      	mov	r0, r5
 801001c:	f000 f9e0 	bl	80103e0 <_sbrk_r>
 8010020:	3001      	adds	r0, #1
 8010022:	d101      	bne.n	8010028 <sbrk_aligned+0x38>
 8010024:	f04f 34ff 	mov.w	r4, #4294967295
 8010028:	4620      	mov	r0, r4
 801002a:	bd70      	pop	{r4, r5, r6, pc}
 801002c:	2000119c 	.word	0x2000119c

08010030 <_malloc_r>:
 8010030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010034:	1ccd      	adds	r5, r1, #3
 8010036:	f025 0503 	bic.w	r5, r5, #3
 801003a:	3508      	adds	r5, #8
 801003c:	2d0c      	cmp	r5, #12
 801003e:	bf38      	it	cc
 8010040:	250c      	movcc	r5, #12
 8010042:	2d00      	cmp	r5, #0
 8010044:	4607      	mov	r7, r0
 8010046:	db01      	blt.n	801004c <_malloc_r+0x1c>
 8010048:	42a9      	cmp	r1, r5
 801004a:	d905      	bls.n	8010058 <_malloc_r+0x28>
 801004c:	230c      	movs	r3, #12
 801004e:	603b      	str	r3, [r7, #0]
 8010050:	2600      	movs	r6, #0
 8010052:	4630      	mov	r0, r6
 8010054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010058:	4e2e      	ldr	r6, [pc, #184]	; (8010114 <_malloc_r+0xe4>)
 801005a:	f000 fa3d 	bl	80104d8 <__malloc_lock>
 801005e:	6833      	ldr	r3, [r6, #0]
 8010060:	461c      	mov	r4, r3
 8010062:	bb34      	cbnz	r4, 80100b2 <_malloc_r+0x82>
 8010064:	4629      	mov	r1, r5
 8010066:	4638      	mov	r0, r7
 8010068:	f7ff ffc2 	bl	800fff0 <sbrk_aligned>
 801006c:	1c43      	adds	r3, r0, #1
 801006e:	4604      	mov	r4, r0
 8010070:	d14d      	bne.n	801010e <_malloc_r+0xde>
 8010072:	6834      	ldr	r4, [r6, #0]
 8010074:	4626      	mov	r6, r4
 8010076:	2e00      	cmp	r6, #0
 8010078:	d140      	bne.n	80100fc <_malloc_r+0xcc>
 801007a:	6823      	ldr	r3, [r4, #0]
 801007c:	4631      	mov	r1, r6
 801007e:	4638      	mov	r0, r7
 8010080:	eb04 0803 	add.w	r8, r4, r3
 8010084:	f000 f9ac 	bl	80103e0 <_sbrk_r>
 8010088:	4580      	cmp	r8, r0
 801008a:	d13a      	bne.n	8010102 <_malloc_r+0xd2>
 801008c:	6821      	ldr	r1, [r4, #0]
 801008e:	3503      	adds	r5, #3
 8010090:	1a6d      	subs	r5, r5, r1
 8010092:	f025 0503 	bic.w	r5, r5, #3
 8010096:	3508      	adds	r5, #8
 8010098:	2d0c      	cmp	r5, #12
 801009a:	bf38      	it	cc
 801009c:	250c      	movcc	r5, #12
 801009e:	4629      	mov	r1, r5
 80100a0:	4638      	mov	r0, r7
 80100a2:	f7ff ffa5 	bl	800fff0 <sbrk_aligned>
 80100a6:	3001      	adds	r0, #1
 80100a8:	d02b      	beq.n	8010102 <_malloc_r+0xd2>
 80100aa:	6823      	ldr	r3, [r4, #0]
 80100ac:	442b      	add	r3, r5
 80100ae:	6023      	str	r3, [r4, #0]
 80100b0:	e00e      	b.n	80100d0 <_malloc_r+0xa0>
 80100b2:	6822      	ldr	r2, [r4, #0]
 80100b4:	1b52      	subs	r2, r2, r5
 80100b6:	d41e      	bmi.n	80100f6 <_malloc_r+0xc6>
 80100b8:	2a0b      	cmp	r2, #11
 80100ba:	d916      	bls.n	80100ea <_malloc_r+0xba>
 80100bc:	1961      	adds	r1, r4, r5
 80100be:	42a3      	cmp	r3, r4
 80100c0:	6025      	str	r5, [r4, #0]
 80100c2:	bf18      	it	ne
 80100c4:	6059      	strne	r1, [r3, #4]
 80100c6:	6863      	ldr	r3, [r4, #4]
 80100c8:	bf08      	it	eq
 80100ca:	6031      	streq	r1, [r6, #0]
 80100cc:	5162      	str	r2, [r4, r5]
 80100ce:	604b      	str	r3, [r1, #4]
 80100d0:	4638      	mov	r0, r7
 80100d2:	f104 060b 	add.w	r6, r4, #11
 80100d6:	f000 fa05 	bl	80104e4 <__malloc_unlock>
 80100da:	f026 0607 	bic.w	r6, r6, #7
 80100de:	1d23      	adds	r3, r4, #4
 80100e0:	1af2      	subs	r2, r6, r3
 80100e2:	d0b6      	beq.n	8010052 <_malloc_r+0x22>
 80100e4:	1b9b      	subs	r3, r3, r6
 80100e6:	50a3      	str	r3, [r4, r2]
 80100e8:	e7b3      	b.n	8010052 <_malloc_r+0x22>
 80100ea:	6862      	ldr	r2, [r4, #4]
 80100ec:	42a3      	cmp	r3, r4
 80100ee:	bf0c      	ite	eq
 80100f0:	6032      	streq	r2, [r6, #0]
 80100f2:	605a      	strne	r2, [r3, #4]
 80100f4:	e7ec      	b.n	80100d0 <_malloc_r+0xa0>
 80100f6:	4623      	mov	r3, r4
 80100f8:	6864      	ldr	r4, [r4, #4]
 80100fa:	e7b2      	b.n	8010062 <_malloc_r+0x32>
 80100fc:	4634      	mov	r4, r6
 80100fe:	6876      	ldr	r6, [r6, #4]
 8010100:	e7b9      	b.n	8010076 <_malloc_r+0x46>
 8010102:	230c      	movs	r3, #12
 8010104:	603b      	str	r3, [r7, #0]
 8010106:	4638      	mov	r0, r7
 8010108:	f000 f9ec 	bl	80104e4 <__malloc_unlock>
 801010c:	e7a1      	b.n	8010052 <_malloc_r+0x22>
 801010e:	6025      	str	r5, [r4, #0]
 8010110:	e7de      	b.n	80100d0 <_malloc_r+0xa0>
 8010112:	bf00      	nop
 8010114:	20001198 	.word	0x20001198

08010118 <__ssputs_r>:
 8010118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801011c:	688e      	ldr	r6, [r1, #8]
 801011e:	429e      	cmp	r6, r3
 8010120:	4682      	mov	sl, r0
 8010122:	460c      	mov	r4, r1
 8010124:	4690      	mov	r8, r2
 8010126:	461f      	mov	r7, r3
 8010128:	d838      	bhi.n	801019c <__ssputs_r+0x84>
 801012a:	898a      	ldrh	r2, [r1, #12]
 801012c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010130:	d032      	beq.n	8010198 <__ssputs_r+0x80>
 8010132:	6825      	ldr	r5, [r4, #0]
 8010134:	6909      	ldr	r1, [r1, #16]
 8010136:	eba5 0901 	sub.w	r9, r5, r1
 801013a:	6965      	ldr	r5, [r4, #20]
 801013c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010144:	3301      	adds	r3, #1
 8010146:	444b      	add	r3, r9
 8010148:	106d      	asrs	r5, r5, #1
 801014a:	429d      	cmp	r5, r3
 801014c:	bf38      	it	cc
 801014e:	461d      	movcc	r5, r3
 8010150:	0553      	lsls	r3, r2, #21
 8010152:	d531      	bpl.n	80101b8 <__ssputs_r+0xa0>
 8010154:	4629      	mov	r1, r5
 8010156:	f7ff ff6b 	bl	8010030 <_malloc_r>
 801015a:	4606      	mov	r6, r0
 801015c:	b950      	cbnz	r0, 8010174 <__ssputs_r+0x5c>
 801015e:	230c      	movs	r3, #12
 8010160:	f8ca 3000 	str.w	r3, [sl]
 8010164:	89a3      	ldrh	r3, [r4, #12]
 8010166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801016a:	81a3      	strh	r3, [r4, #12]
 801016c:	f04f 30ff 	mov.w	r0, #4294967295
 8010170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010174:	6921      	ldr	r1, [r4, #16]
 8010176:	464a      	mov	r2, r9
 8010178:	f7fc faac 	bl	800c6d4 <memcpy>
 801017c:	89a3      	ldrh	r3, [r4, #12]
 801017e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010186:	81a3      	strh	r3, [r4, #12]
 8010188:	6126      	str	r6, [r4, #16]
 801018a:	6165      	str	r5, [r4, #20]
 801018c:	444e      	add	r6, r9
 801018e:	eba5 0509 	sub.w	r5, r5, r9
 8010192:	6026      	str	r6, [r4, #0]
 8010194:	60a5      	str	r5, [r4, #8]
 8010196:	463e      	mov	r6, r7
 8010198:	42be      	cmp	r6, r7
 801019a:	d900      	bls.n	801019e <__ssputs_r+0x86>
 801019c:	463e      	mov	r6, r7
 801019e:	6820      	ldr	r0, [r4, #0]
 80101a0:	4632      	mov	r2, r6
 80101a2:	4641      	mov	r1, r8
 80101a4:	f000 f97e 	bl	80104a4 <memmove>
 80101a8:	68a3      	ldr	r3, [r4, #8]
 80101aa:	1b9b      	subs	r3, r3, r6
 80101ac:	60a3      	str	r3, [r4, #8]
 80101ae:	6823      	ldr	r3, [r4, #0]
 80101b0:	4433      	add	r3, r6
 80101b2:	6023      	str	r3, [r4, #0]
 80101b4:	2000      	movs	r0, #0
 80101b6:	e7db      	b.n	8010170 <__ssputs_r+0x58>
 80101b8:	462a      	mov	r2, r5
 80101ba:	f000 f999 	bl	80104f0 <_realloc_r>
 80101be:	4606      	mov	r6, r0
 80101c0:	2800      	cmp	r0, #0
 80101c2:	d1e1      	bne.n	8010188 <__ssputs_r+0x70>
 80101c4:	6921      	ldr	r1, [r4, #16]
 80101c6:	4650      	mov	r0, sl
 80101c8:	f7ff fec6 	bl	800ff58 <_free_r>
 80101cc:	e7c7      	b.n	801015e <__ssputs_r+0x46>
	...

080101d0 <_svfiprintf_r>:
 80101d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d4:	4698      	mov	r8, r3
 80101d6:	898b      	ldrh	r3, [r1, #12]
 80101d8:	061b      	lsls	r3, r3, #24
 80101da:	b09d      	sub	sp, #116	; 0x74
 80101dc:	4607      	mov	r7, r0
 80101de:	460d      	mov	r5, r1
 80101e0:	4614      	mov	r4, r2
 80101e2:	d50e      	bpl.n	8010202 <_svfiprintf_r+0x32>
 80101e4:	690b      	ldr	r3, [r1, #16]
 80101e6:	b963      	cbnz	r3, 8010202 <_svfiprintf_r+0x32>
 80101e8:	2140      	movs	r1, #64	; 0x40
 80101ea:	f7ff ff21 	bl	8010030 <_malloc_r>
 80101ee:	6028      	str	r0, [r5, #0]
 80101f0:	6128      	str	r0, [r5, #16]
 80101f2:	b920      	cbnz	r0, 80101fe <_svfiprintf_r+0x2e>
 80101f4:	230c      	movs	r3, #12
 80101f6:	603b      	str	r3, [r7, #0]
 80101f8:	f04f 30ff 	mov.w	r0, #4294967295
 80101fc:	e0d1      	b.n	80103a2 <_svfiprintf_r+0x1d2>
 80101fe:	2340      	movs	r3, #64	; 0x40
 8010200:	616b      	str	r3, [r5, #20]
 8010202:	2300      	movs	r3, #0
 8010204:	9309      	str	r3, [sp, #36]	; 0x24
 8010206:	2320      	movs	r3, #32
 8010208:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801020c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010210:	2330      	movs	r3, #48	; 0x30
 8010212:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80103bc <_svfiprintf_r+0x1ec>
 8010216:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801021a:	f04f 0901 	mov.w	r9, #1
 801021e:	4623      	mov	r3, r4
 8010220:	469a      	mov	sl, r3
 8010222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010226:	b10a      	cbz	r2, 801022c <_svfiprintf_r+0x5c>
 8010228:	2a25      	cmp	r2, #37	; 0x25
 801022a:	d1f9      	bne.n	8010220 <_svfiprintf_r+0x50>
 801022c:	ebba 0b04 	subs.w	fp, sl, r4
 8010230:	d00b      	beq.n	801024a <_svfiprintf_r+0x7a>
 8010232:	465b      	mov	r3, fp
 8010234:	4622      	mov	r2, r4
 8010236:	4629      	mov	r1, r5
 8010238:	4638      	mov	r0, r7
 801023a:	f7ff ff6d 	bl	8010118 <__ssputs_r>
 801023e:	3001      	adds	r0, #1
 8010240:	f000 80aa 	beq.w	8010398 <_svfiprintf_r+0x1c8>
 8010244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010246:	445a      	add	r2, fp
 8010248:	9209      	str	r2, [sp, #36]	; 0x24
 801024a:	f89a 3000 	ldrb.w	r3, [sl]
 801024e:	2b00      	cmp	r3, #0
 8010250:	f000 80a2 	beq.w	8010398 <_svfiprintf_r+0x1c8>
 8010254:	2300      	movs	r3, #0
 8010256:	f04f 32ff 	mov.w	r2, #4294967295
 801025a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801025e:	f10a 0a01 	add.w	sl, sl, #1
 8010262:	9304      	str	r3, [sp, #16]
 8010264:	9307      	str	r3, [sp, #28]
 8010266:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801026a:	931a      	str	r3, [sp, #104]	; 0x68
 801026c:	4654      	mov	r4, sl
 801026e:	2205      	movs	r2, #5
 8010270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010274:	4851      	ldr	r0, [pc, #324]	; (80103bc <_svfiprintf_r+0x1ec>)
 8010276:	f7ef ffbb 	bl	80001f0 <memchr>
 801027a:	9a04      	ldr	r2, [sp, #16]
 801027c:	b9d8      	cbnz	r0, 80102b6 <_svfiprintf_r+0xe6>
 801027e:	06d0      	lsls	r0, r2, #27
 8010280:	bf44      	itt	mi
 8010282:	2320      	movmi	r3, #32
 8010284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010288:	0711      	lsls	r1, r2, #28
 801028a:	bf44      	itt	mi
 801028c:	232b      	movmi	r3, #43	; 0x2b
 801028e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010292:	f89a 3000 	ldrb.w	r3, [sl]
 8010296:	2b2a      	cmp	r3, #42	; 0x2a
 8010298:	d015      	beq.n	80102c6 <_svfiprintf_r+0xf6>
 801029a:	9a07      	ldr	r2, [sp, #28]
 801029c:	4654      	mov	r4, sl
 801029e:	2000      	movs	r0, #0
 80102a0:	f04f 0c0a 	mov.w	ip, #10
 80102a4:	4621      	mov	r1, r4
 80102a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102aa:	3b30      	subs	r3, #48	; 0x30
 80102ac:	2b09      	cmp	r3, #9
 80102ae:	d94e      	bls.n	801034e <_svfiprintf_r+0x17e>
 80102b0:	b1b0      	cbz	r0, 80102e0 <_svfiprintf_r+0x110>
 80102b2:	9207      	str	r2, [sp, #28]
 80102b4:	e014      	b.n	80102e0 <_svfiprintf_r+0x110>
 80102b6:	eba0 0308 	sub.w	r3, r0, r8
 80102ba:	fa09 f303 	lsl.w	r3, r9, r3
 80102be:	4313      	orrs	r3, r2
 80102c0:	9304      	str	r3, [sp, #16]
 80102c2:	46a2      	mov	sl, r4
 80102c4:	e7d2      	b.n	801026c <_svfiprintf_r+0x9c>
 80102c6:	9b03      	ldr	r3, [sp, #12]
 80102c8:	1d19      	adds	r1, r3, #4
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	9103      	str	r1, [sp, #12]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	bfbb      	ittet	lt
 80102d2:	425b      	neglt	r3, r3
 80102d4:	f042 0202 	orrlt.w	r2, r2, #2
 80102d8:	9307      	strge	r3, [sp, #28]
 80102da:	9307      	strlt	r3, [sp, #28]
 80102dc:	bfb8      	it	lt
 80102de:	9204      	strlt	r2, [sp, #16]
 80102e0:	7823      	ldrb	r3, [r4, #0]
 80102e2:	2b2e      	cmp	r3, #46	; 0x2e
 80102e4:	d10c      	bne.n	8010300 <_svfiprintf_r+0x130>
 80102e6:	7863      	ldrb	r3, [r4, #1]
 80102e8:	2b2a      	cmp	r3, #42	; 0x2a
 80102ea:	d135      	bne.n	8010358 <_svfiprintf_r+0x188>
 80102ec:	9b03      	ldr	r3, [sp, #12]
 80102ee:	1d1a      	adds	r2, r3, #4
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	9203      	str	r2, [sp, #12]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	bfb8      	it	lt
 80102f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80102fc:	3402      	adds	r4, #2
 80102fe:	9305      	str	r3, [sp, #20]
 8010300:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80103cc <_svfiprintf_r+0x1fc>
 8010304:	7821      	ldrb	r1, [r4, #0]
 8010306:	2203      	movs	r2, #3
 8010308:	4650      	mov	r0, sl
 801030a:	f7ef ff71 	bl	80001f0 <memchr>
 801030e:	b140      	cbz	r0, 8010322 <_svfiprintf_r+0x152>
 8010310:	2340      	movs	r3, #64	; 0x40
 8010312:	eba0 000a 	sub.w	r0, r0, sl
 8010316:	fa03 f000 	lsl.w	r0, r3, r0
 801031a:	9b04      	ldr	r3, [sp, #16]
 801031c:	4303      	orrs	r3, r0
 801031e:	3401      	adds	r4, #1
 8010320:	9304      	str	r3, [sp, #16]
 8010322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010326:	4826      	ldr	r0, [pc, #152]	; (80103c0 <_svfiprintf_r+0x1f0>)
 8010328:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801032c:	2206      	movs	r2, #6
 801032e:	f7ef ff5f 	bl	80001f0 <memchr>
 8010332:	2800      	cmp	r0, #0
 8010334:	d038      	beq.n	80103a8 <_svfiprintf_r+0x1d8>
 8010336:	4b23      	ldr	r3, [pc, #140]	; (80103c4 <_svfiprintf_r+0x1f4>)
 8010338:	bb1b      	cbnz	r3, 8010382 <_svfiprintf_r+0x1b2>
 801033a:	9b03      	ldr	r3, [sp, #12]
 801033c:	3307      	adds	r3, #7
 801033e:	f023 0307 	bic.w	r3, r3, #7
 8010342:	3308      	adds	r3, #8
 8010344:	9303      	str	r3, [sp, #12]
 8010346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010348:	4433      	add	r3, r6
 801034a:	9309      	str	r3, [sp, #36]	; 0x24
 801034c:	e767      	b.n	801021e <_svfiprintf_r+0x4e>
 801034e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010352:	460c      	mov	r4, r1
 8010354:	2001      	movs	r0, #1
 8010356:	e7a5      	b.n	80102a4 <_svfiprintf_r+0xd4>
 8010358:	2300      	movs	r3, #0
 801035a:	3401      	adds	r4, #1
 801035c:	9305      	str	r3, [sp, #20]
 801035e:	4619      	mov	r1, r3
 8010360:	f04f 0c0a 	mov.w	ip, #10
 8010364:	4620      	mov	r0, r4
 8010366:	f810 2b01 	ldrb.w	r2, [r0], #1
 801036a:	3a30      	subs	r2, #48	; 0x30
 801036c:	2a09      	cmp	r2, #9
 801036e:	d903      	bls.n	8010378 <_svfiprintf_r+0x1a8>
 8010370:	2b00      	cmp	r3, #0
 8010372:	d0c5      	beq.n	8010300 <_svfiprintf_r+0x130>
 8010374:	9105      	str	r1, [sp, #20]
 8010376:	e7c3      	b.n	8010300 <_svfiprintf_r+0x130>
 8010378:	fb0c 2101 	mla	r1, ip, r1, r2
 801037c:	4604      	mov	r4, r0
 801037e:	2301      	movs	r3, #1
 8010380:	e7f0      	b.n	8010364 <_svfiprintf_r+0x194>
 8010382:	ab03      	add	r3, sp, #12
 8010384:	9300      	str	r3, [sp, #0]
 8010386:	462a      	mov	r2, r5
 8010388:	4b0f      	ldr	r3, [pc, #60]	; (80103c8 <_svfiprintf_r+0x1f8>)
 801038a:	a904      	add	r1, sp, #16
 801038c:	4638      	mov	r0, r7
 801038e:	f7fc fa57 	bl	800c840 <_printf_float>
 8010392:	1c42      	adds	r2, r0, #1
 8010394:	4606      	mov	r6, r0
 8010396:	d1d6      	bne.n	8010346 <_svfiprintf_r+0x176>
 8010398:	89ab      	ldrh	r3, [r5, #12]
 801039a:	065b      	lsls	r3, r3, #25
 801039c:	f53f af2c 	bmi.w	80101f8 <_svfiprintf_r+0x28>
 80103a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103a2:	b01d      	add	sp, #116	; 0x74
 80103a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103a8:	ab03      	add	r3, sp, #12
 80103aa:	9300      	str	r3, [sp, #0]
 80103ac:	462a      	mov	r2, r5
 80103ae:	4b06      	ldr	r3, [pc, #24]	; (80103c8 <_svfiprintf_r+0x1f8>)
 80103b0:	a904      	add	r1, sp, #16
 80103b2:	4638      	mov	r0, r7
 80103b4:	f7fc fce8 	bl	800cd88 <_printf_i>
 80103b8:	e7eb      	b.n	8010392 <_svfiprintf_r+0x1c2>
 80103ba:	bf00      	nop
 80103bc:	08011694 	.word	0x08011694
 80103c0:	0801169e 	.word	0x0801169e
 80103c4:	0800c841 	.word	0x0800c841
 80103c8:	08010119 	.word	0x08010119
 80103cc:	0801169a 	.word	0x0801169a

080103d0 <nan>:
 80103d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80103d8 <nan+0x8>
 80103d4:	4770      	bx	lr
 80103d6:	bf00      	nop
 80103d8:	00000000 	.word	0x00000000
 80103dc:	7ff80000 	.word	0x7ff80000

080103e0 <_sbrk_r>:
 80103e0:	b538      	push	{r3, r4, r5, lr}
 80103e2:	4d06      	ldr	r5, [pc, #24]	; (80103fc <_sbrk_r+0x1c>)
 80103e4:	2300      	movs	r3, #0
 80103e6:	4604      	mov	r4, r0
 80103e8:	4608      	mov	r0, r1
 80103ea:	602b      	str	r3, [r5, #0]
 80103ec:	f7f4 fc0c 	bl	8004c08 <_sbrk>
 80103f0:	1c43      	adds	r3, r0, #1
 80103f2:	d102      	bne.n	80103fa <_sbrk_r+0x1a>
 80103f4:	682b      	ldr	r3, [r5, #0]
 80103f6:	b103      	cbz	r3, 80103fa <_sbrk_r+0x1a>
 80103f8:	6023      	str	r3, [r4, #0]
 80103fa:	bd38      	pop	{r3, r4, r5, pc}
 80103fc:	200011a0 	.word	0x200011a0

08010400 <strncmp>:
 8010400:	b510      	push	{r4, lr}
 8010402:	b17a      	cbz	r2, 8010424 <strncmp+0x24>
 8010404:	4603      	mov	r3, r0
 8010406:	3901      	subs	r1, #1
 8010408:	1884      	adds	r4, r0, r2
 801040a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801040e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010412:	4290      	cmp	r0, r2
 8010414:	d101      	bne.n	801041a <strncmp+0x1a>
 8010416:	42a3      	cmp	r3, r4
 8010418:	d101      	bne.n	801041e <strncmp+0x1e>
 801041a:	1a80      	subs	r0, r0, r2
 801041c:	bd10      	pop	{r4, pc}
 801041e:	2800      	cmp	r0, #0
 8010420:	d1f3      	bne.n	801040a <strncmp+0xa>
 8010422:	e7fa      	b.n	801041a <strncmp+0x1a>
 8010424:	4610      	mov	r0, r2
 8010426:	e7f9      	b.n	801041c <strncmp+0x1c>

08010428 <__ascii_wctomb>:
 8010428:	b149      	cbz	r1, 801043e <__ascii_wctomb+0x16>
 801042a:	2aff      	cmp	r2, #255	; 0xff
 801042c:	bf85      	ittet	hi
 801042e:	238a      	movhi	r3, #138	; 0x8a
 8010430:	6003      	strhi	r3, [r0, #0]
 8010432:	700a      	strbls	r2, [r1, #0]
 8010434:	f04f 30ff 	movhi.w	r0, #4294967295
 8010438:	bf98      	it	ls
 801043a:	2001      	movls	r0, #1
 801043c:	4770      	bx	lr
 801043e:	4608      	mov	r0, r1
 8010440:	4770      	bx	lr
	...

08010444 <__assert_func>:
 8010444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010446:	4614      	mov	r4, r2
 8010448:	461a      	mov	r2, r3
 801044a:	4b09      	ldr	r3, [pc, #36]	; (8010470 <__assert_func+0x2c>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	4605      	mov	r5, r0
 8010450:	68d8      	ldr	r0, [r3, #12]
 8010452:	b14c      	cbz	r4, 8010468 <__assert_func+0x24>
 8010454:	4b07      	ldr	r3, [pc, #28]	; (8010474 <__assert_func+0x30>)
 8010456:	9100      	str	r1, [sp, #0]
 8010458:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801045c:	4906      	ldr	r1, [pc, #24]	; (8010478 <__assert_func+0x34>)
 801045e:	462b      	mov	r3, r5
 8010460:	f000 f80e 	bl	8010480 <fiprintf>
 8010464:	f000 fa8c 	bl	8010980 <abort>
 8010468:	4b04      	ldr	r3, [pc, #16]	; (801047c <__assert_func+0x38>)
 801046a:	461c      	mov	r4, r3
 801046c:	e7f3      	b.n	8010456 <__assert_func+0x12>
 801046e:	bf00      	nop
 8010470:	20000254 	.word	0x20000254
 8010474:	080116a5 	.word	0x080116a5
 8010478:	080116b2 	.word	0x080116b2
 801047c:	080116e0 	.word	0x080116e0

08010480 <fiprintf>:
 8010480:	b40e      	push	{r1, r2, r3}
 8010482:	b503      	push	{r0, r1, lr}
 8010484:	4601      	mov	r1, r0
 8010486:	ab03      	add	r3, sp, #12
 8010488:	4805      	ldr	r0, [pc, #20]	; (80104a0 <fiprintf+0x20>)
 801048a:	f853 2b04 	ldr.w	r2, [r3], #4
 801048e:	6800      	ldr	r0, [r0, #0]
 8010490:	9301      	str	r3, [sp, #4]
 8010492:	f000 f885 	bl	80105a0 <_vfiprintf_r>
 8010496:	b002      	add	sp, #8
 8010498:	f85d eb04 	ldr.w	lr, [sp], #4
 801049c:	b003      	add	sp, #12
 801049e:	4770      	bx	lr
 80104a0:	20000254 	.word	0x20000254

080104a4 <memmove>:
 80104a4:	4288      	cmp	r0, r1
 80104a6:	b510      	push	{r4, lr}
 80104a8:	eb01 0402 	add.w	r4, r1, r2
 80104ac:	d902      	bls.n	80104b4 <memmove+0x10>
 80104ae:	4284      	cmp	r4, r0
 80104b0:	4623      	mov	r3, r4
 80104b2:	d807      	bhi.n	80104c4 <memmove+0x20>
 80104b4:	1e43      	subs	r3, r0, #1
 80104b6:	42a1      	cmp	r1, r4
 80104b8:	d008      	beq.n	80104cc <memmove+0x28>
 80104ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80104c2:	e7f8      	b.n	80104b6 <memmove+0x12>
 80104c4:	4402      	add	r2, r0
 80104c6:	4601      	mov	r1, r0
 80104c8:	428a      	cmp	r2, r1
 80104ca:	d100      	bne.n	80104ce <memmove+0x2a>
 80104cc:	bd10      	pop	{r4, pc}
 80104ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80104d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80104d6:	e7f7      	b.n	80104c8 <memmove+0x24>

080104d8 <__malloc_lock>:
 80104d8:	4801      	ldr	r0, [pc, #4]	; (80104e0 <__malloc_lock+0x8>)
 80104da:	f000 bc11 	b.w	8010d00 <__retarget_lock_acquire_recursive>
 80104de:	bf00      	nop
 80104e0:	200011a4 	.word	0x200011a4

080104e4 <__malloc_unlock>:
 80104e4:	4801      	ldr	r0, [pc, #4]	; (80104ec <__malloc_unlock+0x8>)
 80104e6:	f000 bc0c 	b.w	8010d02 <__retarget_lock_release_recursive>
 80104ea:	bf00      	nop
 80104ec:	200011a4 	.word	0x200011a4

080104f0 <_realloc_r>:
 80104f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104f4:	4680      	mov	r8, r0
 80104f6:	4614      	mov	r4, r2
 80104f8:	460e      	mov	r6, r1
 80104fa:	b921      	cbnz	r1, 8010506 <_realloc_r+0x16>
 80104fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010500:	4611      	mov	r1, r2
 8010502:	f7ff bd95 	b.w	8010030 <_malloc_r>
 8010506:	b92a      	cbnz	r2, 8010514 <_realloc_r+0x24>
 8010508:	f7ff fd26 	bl	800ff58 <_free_r>
 801050c:	4625      	mov	r5, r4
 801050e:	4628      	mov	r0, r5
 8010510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010514:	f000 fc5c 	bl	8010dd0 <_malloc_usable_size_r>
 8010518:	4284      	cmp	r4, r0
 801051a:	4607      	mov	r7, r0
 801051c:	d802      	bhi.n	8010524 <_realloc_r+0x34>
 801051e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010522:	d812      	bhi.n	801054a <_realloc_r+0x5a>
 8010524:	4621      	mov	r1, r4
 8010526:	4640      	mov	r0, r8
 8010528:	f7ff fd82 	bl	8010030 <_malloc_r>
 801052c:	4605      	mov	r5, r0
 801052e:	2800      	cmp	r0, #0
 8010530:	d0ed      	beq.n	801050e <_realloc_r+0x1e>
 8010532:	42bc      	cmp	r4, r7
 8010534:	4622      	mov	r2, r4
 8010536:	4631      	mov	r1, r6
 8010538:	bf28      	it	cs
 801053a:	463a      	movcs	r2, r7
 801053c:	f7fc f8ca 	bl	800c6d4 <memcpy>
 8010540:	4631      	mov	r1, r6
 8010542:	4640      	mov	r0, r8
 8010544:	f7ff fd08 	bl	800ff58 <_free_r>
 8010548:	e7e1      	b.n	801050e <_realloc_r+0x1e>
 801054a:	4635      	mov	r5, r6
 801054c:	e7df      	b.n	801050e <_realloc_r+0x1e>

0801054e <__sfputc_r>:
 801054e:	6893      	ldr	r3, [r2, #8]
 8010550:	3b01      	subs	r3, #1
 8010552:	2b00      	cmp	r3, #0
 8010554:	b410      	push	{r4}
 8010556:	6093      	str	r3, [r2, #8]
 8010558:	da08      	bge.n	801056c <__sfputc_r+0x1e>
 801055a:	6994      	ldr	r4, [r2, #24]
 801055c:	42a3      	cmp	r3, r4
 801055e:	db01      	blt.n	8010564 <__sfputc_r+0x16>
 8010560:	290a      	cmp	r1, #10
 8010562:	d103      	bne.n	801056c <__sfputc_r+0x1e>
 8010564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010568:	f000 b94a 	b.w	8010800 <__swbuf_r>
 801056c:	6813      	ldr	r3, [r2, #0]
 801056e:	1c58      	adds	r0, r3, #1
 8010570:	6010      	str	r0, [r2, #0]
 8010572:	7019      	strb	r1, [r3, #0]
 8010574:	4608      	mov	r0, r1
 8010576:	f85d 4b04 	ldr.w	r4, [sp], #4
 801057a:	4770      	bx	lr

0801057c <__sfputs_r>:
 801057c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801057e:	4606      	mov	r6, r0
 8010580:	460f      	mov	r7, r1
 8010582:	4614      	mov	r4, r2
 8010584:	18d5      	adds	r5, r2, r3
 8010586:	42ac      	cmp	r4, r5
 8010588:	d101      	bne.n	801058e <__sfputs_r+0x12>
 801058a:	2000      	movs	r0, #0
 801058c:	e007      	b.n	801059e <__sfputs_r+0x22>
 801058e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010592:	463a      	mov	r2, r7
 8010594:	4630      	mov	r0, r6
 8010596:	f7ff ffda 	bl	801054e <__sfputc_r>
 801059a:	1c43      	adds	r3, r0, #1
 801059c:	d1f3      	bne.n	8010586 <__sfputs_r+0xa>
 801059e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080105a0 <_vfiprintf_r>:
 80105a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a4:	460d      	mov	r5, r1
 80105a6:	b09d      	sub	sp, #116	; 0x74
 80105a8:	4614      	mov	r4, r2
 80105aa:	4698      	mov	r8, r3
 80105ac:	4606      	mov	r6, r0
 80105ae:	b118      	cbz	r0, 80105b8 <_vfiprintf_r+0x18>
 80105b0:	6983      	ldr	r3, [r0, #24]
 80105b2:	b90b      	cbnz	r3, 80105b8 <_vfiprintf_r+0x18>
 80105b4:	f000 fb06 	bl	8010bc4 <__sinit>
 80105b8:	4b89      	ldr	r3, [pc, #548]	; (80107e0 <_vfiprintf_r+0x240>)
 80105ba:	429d      	cmp	r5, r3
 80105bc:	d11b      	bne.n	80105f6 <_vfiprintf_r+0x56>
 80105be:	6875      	ldr	r5, [r6, #4]
 80105c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80105c2:	07d9      	lsls	r1, r3, #31
 80105c4:	d405      	bmi.n	80105d2 <_vfiprintf_r+0x32>
 80105c6:	89ab      	ldrh	r3, [r5, #12]
 80105c8:	059a      	lsls	r2, r3, #22
 80105ca:	d402      	bmi.n	80105d2 <_vfiprintf_r+0x32>
 80105cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80105ce:	f000 fb97 	bl	8010d00 <__retarget_lock_acquire_recursive>
 80105d2:	89ab      	ldrh	r3, [r5, #12]
 80105d4:	071b      	lsls	r3, r3, #28
 80105d6:	d501      	bpl.n	80105dc <_vfiprintf_r+0x3c>
 80105d8:	692b      	ldr	r3, [r5, #16]
 80105da:	b9eb      	cbnz	r3, 8010618 <_vfiprintf_r+0x78>
 80105dc:	4629      	mov	r1, r5
 80105de:	4630      	mov	r0, r6
 80105e0:	f000 f960 	bl	80108a4 <__swsetup_r>
 80105e4:	b1c0      	cbz	r0, 8010618 <_vfiprintf_r+0x78>
 80105e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80105e8:	07dc      	lsls	r4, r3, #31
 80105ea:	d50e      	bpl.n	801060a <_vfiprintf_r+0x6a>
 80105ec:	f04f 30ff 	mov.w	r0, #4294967295
 80105f0:	b01d      	add	sp, #116	; 0x74
 80105f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105f6:	4b7b      	ldr	r3, [pc, #492]	; (80107e4 <_vfiprintf_r+0x244>)
 80105f8:	429d      	cmp	r5, r3
 80105fa:	d101      	bne.n	8010600 <_vfiprintf_r+0x60>
 80105fc:	68b5      	ldr	r5, [r6, #8]
 80105fe:	e7df      	b.n	80105c0 <_vfiprintf_r+0x20>
 8010600:	4b79      	ldr	r3, [pc, #484]	; (80107e8 <_vfiprintf_r+0x248>)
 8010602:	429d      	cmp	r5, r3
 8010604:	bf08      	it	eq
 8010606:	68f5      	ldreq	r5, [r6, #12]
 8010608:	e7da      	b.n	80105c0 <_vfiprintf_r+0x20>
 801060a:	89ab      	ldrh	r3, [r5, #12]
 801060c:	0598      	lsls	r0, r3, #22
 801060e:	d4ed      	bmi.n	80105ec <_vfiprintf_r+0x4c>
 8010610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010612:	f000 fb76 	bl	8010d02 <__retarget_lock_release_recursive>
 8010616:	e7e9      	b.n	80105ec <_vfiprintf_r+0x4c>
 8010618:	2300      	movs	r3, #0
 801061a:	9309      	str	r3, [sp, #36]	; 0x24
 801061c:	2320      	movs	r3, #32
 801061e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010622:	f8cd 800c 	str.w	r8, [sp, #12]
 8010626:	2330      	movs	r3, #48	; 0x30
 8010628:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80107ec <_vfiprintf_r+0x24c>
 801062c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010630:	f04f 0901 	mov.w	r9, #1
 8010634:	4623      	mov	r3, r4
 8010636:	469a      	mov	sl, r3
 8010638:	f813 2b01 	ldrb.w	r2, [r3], #1
 801063c:	b10a      	cbz	r2, 8010642 <_vfiprintf_r+0xa2>
 801063e:	2a25      	cmp	r2, #37	; 0x25
 8010640:	d1f9      	bne.n	8010636 <_vfiprintf_r+0x96>
 8010642:	ebba 0b04 	subs.w	fp, sl, r4
 8010646:	d00b      	beq.n	8010660 <_vfiprintf_r+0xc0>
 8010648:	465b      	mov	r3, fp
 801064a:	4622      	mov	r2, r4
 801064c:	4629      	mov	r1, r5
 801064e:	4630      	mov	r0, r6
 8010650:	f7ff ff94 	bl	801057c <__sfputs_r>
 8010654:	3001      	adds	r0, #1
 8010656:	f000 80aa 	beq.w	80107ae <_vfiprintf_r+0x20e>
 801065a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801065c:	445a      	add	r2, fp
 801065e:	9209      	str	r2, [sp, #36]	; 0x24
 8010660:	f89a 3000 	ldrb.w	r3, [sl]
 8010664:	2b00      	cmp	r3, #0
 8010666:	f000 80a2 	beq.w	80107ae <_vfiprintf_r+0x20e>
 801066a:	2300      	movs	r3, #0
 801066c:	f04f 32ff 	mov.w	r2, #4294967295
 8010670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010674:	f10a 0a01 	add.w	sl, sl, #1
 8010678:	9304      	str	r3, [sp, #16]
 801067a:	9307      	str	r3, [sp, #28]
 801067c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010680:	931a      	str	r3, [sp, #104]	; 0x68
 8010682:	4654      	mov	r4, sl
 8010684:	2205      	movs	r2, #5
 8010686:	f814 1b01 	ldrb.w	r1, [r4], #1
 801068a:	4858      	ldr	r0, [pc, #352]	; (80107ec <_vfiprintf_r+0x24c>)
 801068c:	f7ef fdb0 	bl	80001f0 <memchr>
 8010690:	9a04      	ldr	r2, [sp, #16]
 8010692:	b9d8      	cbnz	r0, 80106cc <_vfiprintf_r+0x12c>
 8010694:	06d1      	lsls	r1, r2, #27
 8010696:	bf44      	itt	mi
 8010698:	2320      	movmi	r3, #32
 801069a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801069e:	0713      	lsls	r3, r2, #28
 80106a0:	bf44      	itt	mi
 80106a2:	232b      	movmi	r3, #43	; 0x2b
 80106a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106a8:	f89a 3000 	ldrb.w	r3, [sl]
 80106ac:	2b2a      	cmp	r3, #42	; 0x2a
 80106ae:	d015      	beq.n	80106dc <_vfiprintf_r+0x13c>
 80106b0:	9a07      	ldr	r2, [sp, #28]
 80106b2:	4654      	mov	r4, sl
 80106b4:	2000      	movs	r0, #0
 80106b6:	f04f 0c0a 	mov.w	ip, #10
 80106ba:	4621      	mov	r1, r4
 80106bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106c0:	3b30      	subs	r3, #48	; 0x30
 80106c2:	2b09      	cmp	r3, #9
 80106c4:	d94e      	bls.n	8010764 <_vfiprintf_r+0x1c4>
 80106c6:	b1b0      	cbz	r0, 80106f6 <_vfiprintf_r+0x156>
 80106c8:	9207      	str	r2, [sp, #28]
 80106ca:	e014      	b.n	80106f6 <_vfiprintf_r+0x156>
 80106cc:	eba0 0308 	sub.w	r3, r0, r8
 80106d0:	fa09 f303 	lsl.w	r3, r9, r3
 80106d4:	4313      	orrs	r3, r2
 80106d6:	9304      	str	r3, [sp, #16]
 80106d8:	46a2      	mov	sl, r4
 80106da:	e7d2      	b.n	8010682 <_vfiprintf_r+0xe2>
 80106dc:	9b03      	ldr	r3, [sp, #12]
 80106de:	1d19      	adds	r1, r3, #4
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	9103      	str	r1, [sp, #12]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	bfbb      	ittet	lt
 80106e8:	425b      	neglt	r3, r3
 80106ea:	f042 0202 	orrlt.w	r2, r2, #2
 80106ee:	9307      	strge	r3, [sp, #28]
 80106f0:	9307      	strlt	r3, [sp, #28]
 80106f2:	bfb8      	it	lt
 80106f4:	9204      	strlt	r2, [sp, #16]
 80106f6:	7823      	ldrb	r3, [r4, #0]
 80106f8:	2b2e      	cmp	r3, #46	; 0x2e
 80106fa:	d10c      	bne.n	8010716 <_vfiprintf_r+0x176>
 80106fc:	7863      	ldrb	r3, [r4, #1]
 80106fe:	2b2a      	cmp	r3, #42	; 0x2a
 8010700:	d135      	bne.n	801076e <_vfiprintf_r+0x1ce>
 8010702:	9b03      	ldr	r3, [sp, #12]
 8010704:	1d1a      	adds	r2, r3, #4
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	9203      	str	r2, [sp, #12]
 801070a:	2b00      	cmp	r3, #0
 801070c:	bfb8      	it	lt
 801070e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010712:	3402      	adds	r4, #2
 8010714:	9305      	str	r3, [sp, #20]
 8010716:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80107fc <_vfiprintf_r+0x25c>
 801071a:	7821      	ldrb	r1, [r4, #0]
 801071c:	2203      	movs	r2, #3
 801071e:	4650      	mov	r0, sl
 8010720:	f7ef fd66 	bl	80001f0 <memchr>
 8010724:	b140      	cbz	r0, 8010738 <_vfiprintf_r+0x198>
 8010726:	2340      	movs	r3, #64	; 0x40
 8010728:	eba0 000a 	sub.w	r0, r0, sl
 801072c:	fa03 f000 	lsl.w	r0, r3, r0
 8010730:	9b04      	ldr	r3, [sp, #16]
 8010732:	4303      	orrs	r3, r0
 8010734:	3401      	adds	r4, #1
 8010736:	9304      	str	r3, [sp, #16]
 8010738:	f814 1b01 	ldrb.w	r1, [r4], #1
 801073c:	482c      	ldr	r0, [pc, #176]	; (80107f0 <_vfiprintf_r+0x250>)
 801073e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010742:	2206      	movs	r2, #6
 8010744:	f7ef fd54 	bl	80001f0 <memchr>
 8010748:	2800      	cmp	r0, #0
 801074a:	d03f      	beq.n	80107cc <_vfiprintf_r+0x22c>
 801074c:	4b29      	ldr	r3, [pc, #164]	; (80107f4 <_vfiprintf_r+0x254>)
 801074e:	bb1b      	cbnz	r3, 8010798 <_vfiprintf_r+0x1f8>
 8010750:	9b03      	ldr	r3, [sp, #12]
 8010752:	3307      	adds	r3, #7
 8010754:	f023 0307 	bic.w	r3, r3, #7
 8010758:	3308      	adds	r3, #8
 801075a:	9303      	str	r3, [sp, #12]
 801075c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801075e:	443b      	add	r3, r7
 8010760:	9309      	str	r3, [sp, #36]	; 0x24
 8010762:	e767      	b.n	8010634 <_vfiprintf_r+0x94>
 8010764:	fb0c 3202 	mla	r2, ip, r2, r3
 8010768:	460c      	mov	r4, r1
 801076a:	2001      	movs	r0, #1
 801076c:	e7a5      	b.n	80106ba <_vfiprintf_r+0x11a>
 801076e:	2300      	movs	r3, #0
 8010770:	3401      	adds	r4, #1
 8010772:	9305      	str	r3, [sp, #20]
 8010774:	4619      	mov	r1, r3
 8010776:	f04f 0c0a 	mov.w	ip, #10
 801077a:	4620      	mov	r0, r4
 801077c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010780:	3a30      	subs	r2, #48	; 0x30
 8010782:	2a09      	cmp	r2, #9
 8010784:	d903      	bls.n	801078e <_vfiprintf_r+0x1ee>
 8010786:	2b00      	cmp	r3, #0
 8010788:	d0c5      	beq.n	8010716 <_vfiprintf_r+0x176>
 801078a:	9105      	str	r1, [sp, #20]
 801078c:	e7c3      	b.n	8010716 <_vfiprintf_r+0x176>
 801078e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010792:	4604      	mov	r4, r0
 8010794:	2301      	movs	r3, #1
 8010796:	e7f0      	b.n	801077a <_vfiprintf_r+0x1da>
 8010798:	ab03      	add	r3, sp, #12
 801079a:	9300      	str	r3, [sp, #0]
 801079c:	462a      	mov	r2, r5
 801079e:	4b16      	ldr	r3, [pc, #88]	; (80107f8 <_vfiprintf_r+0x258>)
 80107a0:	a904      	add	r1, sp, #16
 80107a2:	4630      	mov	r0, r6
 80107a4:	f7fc f84c 	bl	800c840 <_printf_float>
 80107a8:	4607      	mov	r7, r0
 80107aa:	1c78      	adds	r0, r7, #1
 80107ac:	d1d6      	bne.n	801075c <_vfiprintf_r+0x1bc>
 80107ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80107b0:	07d9      	lsls	r1, r3, #31
 80107b2:	d405      	bmi.n	80107c0 <_vfiprintf_r+0x220>
 80107b4:	89ab      	ldrh	r3, [r5, #12]
 80107b6:	059a      	lsls	r2, r3, #22
 80107b8:	d402      	bmi.n	80107c0 <_vfiprintf_r+0x220>
 80107ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80107bc:	f000 faa1 	bl	8010d02 <__retarget_lock_release_recursive>
 80107c0:	89ab      	ldrh	r3, [r5, #12]
 80107c2:	065b      	lsls	r3, r3, #25
 80107c4:	f53f af12 	bmi.w	80105ec <_vfiprintf_r+0x4c>
 80107c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107ca:	e711      	b.n	80105f0 <_vfiprintf_r+0x50>
 80107cc:	ab03      	add	r3, sp, #12
 80107ce:	9300      	str	r3, [sp, #0]
 80107d0:	462a      	mov	r2, r5
 80107d2:	4b09      	ldr	r3, [pc, #36]	; (80107f8 <_vfiprintf_r+0x258>)
 80107d4:	a904      	add	r1, sp, #16
 80107d6:	4630      	mov	r0, r6
 80107d8:	f7fc fad6 	bl	800cd88 <_printf_i>
 80107dc:	e7e4      	b.n	80107a8 <_vfiprintf_r+0x208>
 80107de:	bf00      	nop
 80107e0:	08011704 	.word	0x08011704
 80107e4:	08011724 	.word	0x08011724
 80107e8:	080116e4 	.word	0x080116e4
 80107ec:	08011694 	.word	0x08011694
 80107f0:	0801169e 	.word	0x0801169e
 80107f4:	0800c841 	.word	0x0800c841
 80107f8:	0801057d 	.word	0x0801057d
 80107fc:	0801169a 	.word	0x0801169a

08010800 <__swbuf_r>:
 8010800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010802:	460e      	mov	r6, r1
 8010804:	4614      	mov	r4, r2
 8010806:	4605      	mov	r5, r0
 8010808:	b118      	cbz	r0, 8010812 <__swbuf_r+0x12>
 801080a:	6983      	ldr	r3, [r0, #24]
 801080c:	b90b      	cbnz	r3, 8010812 <__swbuf_r+0x12>
 801080e:	f000 f9d9 	bl	8010bc4 <__sinit>
 8010812:	4b21      	ldr	r3, [pc, #132]	; (8010898 <__swbuf_r+0x98>)
 8010814:	429c      	cmp	r4, r3
 8010816:	d12b      	bne.n	8010870 <__swbuf_r+0x70>
 8010818:	686c      	ldr	r4, [r5, #4]
 801081a:	69a3      	ldr	r3, [r4, #24]
 801081c:	60a3      	str	r3, [r4, #8]
 801081e:	89a3      	ldrh	r3, [r4, #12]
 8010820:	071a      	lsls	r2, r3, #28
 8010822:	d52f      	bpl.n	8010884 <__swbuf_r+0x84>
 8010824:	6923      	ldr	r3, [r4, #16]
 8010826:	b36b      	cbz	r3, 8010884 <__swbuf_r+0x84>
 8010828:	6923      	ldr	r3, [r4, #16]
 801082a:	6820      	ldr	r0, [r4, #0]
 801082c:	1ac0      	subs	r0, r0, r3
 801082e:	6963      	ldr	r3, [r4, #20]
 8010830:	b2f6      	uxtb	r6, r6
 8010832:	4283      	cmp	r3, r0
 8010834:	4637      	mov	r7, r6
 8010836:	dc04      	bgt.n	8010842 <__swbuf_r+0x42>
 8010838:	4621      	mov	r1, r4
 801083a:	4628      	mov	r0, r5
 801083c:	f000 f92e 	bl	8010a9c <_fflush_r>
 8010840:	bb30      	cbnz	r0, 8010890 <__swbuf_r+0x90>
 8010842:	68a3      	ldr	r3, [r4, #8]
 8010844:	3b01      	subs	r3, #1
 8010846:	60a3      	str	r3, [r4, #8]
 8010848:	6823      	ldr	r3, [r4, #0]
 801084a:	1c5a      	adds	r2, r3, #1
 801084c:	6022      	str	r2, [r4, #0]
 801084e:	701e      	strb	r6, [r3, #0]
 8010850:	6963      	ldr	r3, [r4, #20]
 8010852:	3001      	adds	r0, #1
 8010854:	4283      	cmp	r3, r0
 8010856:	d004      	beq.n	8010862 <__swbuf_r+0x62>
 8010858:	89a3      	ldrh	r3, [r4, #12]
 801085a:	07db      	lsls	r3, r3, #31
 801085c:	d506      	bpl.n	801086c <__swbuf_r+0x6c>
 801085e:	2e0a      	cmp	r6, #10
 8010860:	d104      	bne.n	801086c <__swbuf_r+0x6c>
 8010862:	4621      	mov	r1, r4
 8010864:	4628      	mov	r0, r5
 8010866:	f000 f919 	bl	8010a9c <_fflush_r>
 801086a:	b988      	cbnz	r0, 8010890 <__swbuf_r+0x90>
 801086c:	4638      	mov	r0, r7
 801086e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010870:	4b0a      	ldr	r3, [pc, #40]	; (801089c <__swbuf_r+0x9c>)
 8010872:	429c      	cmp	r4, r3
 8010874:	d101      	bne.n	801087a <__swbuf_r+0x7a>
 8010876:	68ac      	ldr	r4, [r5, #8]
 8010878:	e7cf      	b.n	801081a <__swbuf_r+0x1a>
 801087a:	4b09      	ldr	r3, [pc, #36]	; (80108a0 <__swbuf_r+0xa0>)
 801087c:	429c      	cmp	r4, r3
 801087e:	bf08      	it	eq
 8010880:	68ec      	ldreq	r4, [r5, #12]
 8010882:	e7ca      	b.n	801081a <__swbuf_r+0x1a>
 8010884:	4621      	mov	r1, r4
 8010886:	4628      	mov	r0, r5
 8010888:	f000 f80c 	bl	80108a4 <__swsetup_r>
 801088c:	2800      	cmp	r0, #0
 801088e:	d0cb      	beq.n	8010828 <__swbuf_r+0x28>
 8010890:	f04f 37ff 	mov.w	r7, #4294967295
 8010894:	e7ea      	b.n	801086c <__swbuf_r+0x6c>
 8010896:	bf00      	nop
 8010898:	08011704 	.word	0x08011704
 801089c:	08011724 	.word	0x08011724
 80108a0:	080116e4 	.word	0x080116e4

080108a4 <__swsetup_r>:
 80108a4:	4b32      	ldr	r3, [pc, #200]	; (8010970 <__swsetup_r+0xcc>)
 80108a6:	b570      	push	{r4, r5, r6, lr}
 80108a8:	681d      	ldr	r5, [r3, #0]
 80108aa:	4606      	mov	r6, r0
 80108ac:	460c      	mov	r4, r1
 80108ae:	b125      	cbz	r5, 80108ba <__swsetup_r+0x16>
 80108b0:	69ab      	ldr	r3, [r5, #24]
 80108b2:	b913      	cbnz	r3, 80108ba <__swsetup_r+0x16>
 80108b4:	4628      	mov	r0, r5
 80108b6:	f000 f985 	bl	8010bc4 <__sinit>
 80108ba:	4b2e      	ldr	r3, [pc, #184]	; (8010974 <__swsetup_r+0xd0>)
 80108bc:	429c      	cmp	r4, r3
 80108be:	d10f      	bne.n	80108e0 <__swsetup_r+0x3c>
 80108c0:	686c      	ldr	r4, [r5, #4]
 80108c2:	89a3      	ldrh	r3, [r4, #12]
 80108c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80108c8:	0719      	lsls	r1, r3, #28
 80108ca:	d42c      	bmi.n	8010926 <__swsetup_r+0x82>
 80108cc:	06dd      	lsls	r5, r3, #27
 80108ce:	d411      	bmi.n	80108f4 <__swsetup_r+0x50>
 80108d0:	2309      	movs	r3, #9
 80108d2:	6033      	str	r3, [r6, #0]
 80108d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80108d8:	81a3      	strh	r3, [r4, #12]
 80108da:	f04f 30ff 	mov.w	r0, #4294967295
 80108de:	e03e      	b.n	801095e <__swsetup_r+0xba>
 80108e0:	4b25      	ldr	r3, [pc, #148]	; (8010978 <__swsetup_r+0xd4>)
 80108e2:	429c      	cmp	r4, r3
 80108e4:	d101      	bne.n	80108ea <__swsetup_r+0x46>
 80108e6:	68ac      	ldr	r4, [r5, #8]
 80108e8:	e7eb      	b.n	80108c2 <__swsetup_r+0x1e>
 80108ea:	4b24      	ldr	r3, [pc, #144]	; (801097c <__swsetup_r+0xd8>)
 80108ec:	429c      	cmp	r4, r3
 80108ee:	bf08      	it	eq
 80108f0:	68ec      	ldreq	r4, [r5, #12]
 80108f2:	e7e6      	b.n	80108c2 <__swsetup_r+0x1e>
 80108f4:	0758      	lsls	r0, r3, #29
 80108f6:	d512      	bpl.n	801091e <__swsetup_r+0x7a>
 80108f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108fa:	b141      	cbz	r1, 801090e <__swsetup_r+0x6a>
 80108fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010900:	4299      	cmp	r1, r3
 8010902:	d002      	beq.n	801090a <__swsetup_r+0x66>
 8010904:	4630      	mov	r0, r6
 8010906:	f7ff fb27 	bl	800ff58 <_free_r>
 801090a:	2300      	movs	r3, #0
 801090c:	6363      	str	r3, [r4, #52]	; 0x34
 801090e:	89a3      	ldrh	r3, [r4, #12]
 8010910:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010914:	81a3      	strh	r3, [r4, #12]
 8010916:	2300      	movs	r3, #0
 8010918:	6063      	str	r3, [r4, #4]
 801091a:	6923      	ldr	r3, [r4, #16]
 801091c:	6023      	str	r3, [r4, #0]
 801091e:	89a3      	ldrh	r3, [r4, #12]
 8010920:	f043 0308 	orr.w	r3, r3, #8
 8010924:	81a3      	strh	r3, [r4, #12]
 8010926:	6923      	ldr	r3, [r4, #16]
 8010928:	b94b      	cbnz	r3, 801093e <__swsetup_r+0x9a>
 801092a:	89a3      	ldrh	r3, [r4, #12]
 801092c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010934:	d003      	beq.n	801093e <__swsetup_r+0x9a>
 8010936:	4621      	mov	r1, r4
 8010938:	4630      	mov	r0, r6
 801093a:	f000 fa09 	bl	8010d50 <__smakebuf_r>
 801093e:	89a0      	ldrh	r0, [r4, #12]
 8010940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010944:	f010 0301 	ands.w	r3, r0, #1
 8010948:	d00a      	beq.n	8010960 <__swsetup_r+0xbc>
 801094a:	2300      	movs	r3, #0
 801094c:	60a3      	str	r3, [r4, #8]
 801094e:	6963      	ldr	r3, [r4, #20]
 8010950:	425b      	negs	r3, r3
 8010952:	61a3      	str	r3, [r4, #24]
 8010954:	6923      	ldr	r3, [r4, #16]
 8010956:	b943      	cbnz	r3, 801096a <__swsetup_r+0xc6>
 8010958:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801095c:	d1ba      	bne.n	80108d4 <__swsetup_r+0x30>
 801095e:	bd70      	pop	{r4, r5, r6, pc}
 8010960:	0781      	lsls	r1, r0, #30
 8010962:	bf58      	it	pl
 8010964:	6963      	ldrpl	r3, [r4, #20]
 8010966:	60a3      	str	r3, [r4, #8]
 8010968:	e7f4      	b.n	8010954 <__swsetup_r+0xb0>
 801096a:	2000      	movs	r0, #0
 801096c:	e7f7      	b.n	801095e <__swsetup_r+0xba>
 801096e:	bf00      	nop
 8010970:	20000254 	.word	0x20000254
 8010974:	08011704 	.word	0x08011704
 8010978:	08011724 	.word	0x08011724
 801097c:	080116e4 	.word	0x080116e4

08010980 <abort>:
 8010980:	b508      	push	{r3, lr}
 8010982:	2006      	movs	r0, #6
 8010984:	f000 fa54 	bl	8010e30 <raise>
 8010988:	2001      	movs	r0, #1
 801098a:	f7f4 f8c5 	bl	8004b18 <_exit>
	...

08010990 <__sflush_r>:
 8010990:	898a      	ldrh	r2, [r1, #12]
 8010992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010996:	4605      	mov	r5, r0
 8010998:	0710      	lsls	r0, r2, #28
 801099a:	460c      	mov	r4, r1
 801099c:	d458      	bmi.n	8010a50 <__sflush_r+0xc0>
 801099e:	684b      	ldr	r3, [r1, #4]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	dc05      	bgt.n	80109b0 <__sflush_r+0x20>
 80109a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	dc02      	bgt.n	80109b0 <__sflush_r+0x20>
 80109aa:	2000      	movs	r0, #0
 80109ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80109b2:	2e00      	cmp	r6, #0
 80109b4:	d0f9      	beq.n	80109aa <__sflush_r+0x1a>
 80109b6:	2300      	movs	r3, #0
 80109b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80109bc:	682f      	ldr	r7, [r5, #0]
 80109be:	602b      	str	r3, [r5, #0]
 80109c0:	d032      	beq.n	8010a28 <__sflush_r+0x98>
 80109c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80109c4:	89a3      	ldrh	r3, [r4, #12]
 80109c6:	075a      	lsls	r2, r3, #29
 80109c8:	d505      	bpl.n	80109d6 <__sflush_r+0x46>
 80109ca:	6863      	ldr	r3, [r4, #4]
 80109cc:	1ac0      	subs	r0, r0, r3
 80109ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80109d0:	b10b      	cbz	r3, 80109d6 <__sflush_r+0x46>
 80109d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80109d4:	1ac0      	subs	r0, r0, r3
 80109d6:	2300      	movs	r3, #0
 80109d8:	4602      	mov	r2, r0
 80109da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80109dc:	6a21      	ldr	r1, [r4, #32]
 80109de:	4628      	mov	r0, r5
 80109e0:	47b0      	blx	r6
 80109e2:	1c43      	adds	r3, r0, #1
 80109e4:	89a3      	ldrh	r3, [r4, #12]
 80109e6:	d106      	bne.n	80109f6 <__sflush_r+0x66>
 80109e8:	6829      	ldr	r1, [r5, #0]
 80109ea:	291d      	cmp	r1, #29
 80109ec:	d82c      	bhi.n	8010a48 <__sflush_r+0xb8>
 80109ee:	4a2a      	ldr	r2, [pc, #168]	; (8010a98 <__sflush_r+0x108>)
 80109f0:	40ca      	lsrs	r2, r1
 80109f2:	07d6      	lsls	r6, r2, #31
 80109f4:	d528      	bpl.n	8010a48 <__sflush_r+0xb8>
 80109f6:	2200      	movs	r2, #0
 80109f8:	6062      	str	r2, [r4, #4]
 80109fa:	04d9      	lsls	r1, r3, #19
 80109fc:	6922      	ldr	r2, [r4, #16]
 80109fe:	6022      	str	r2, [r4, #0]
 8010a00:	d504      	bpl.n	8010a0c <__sflush_r+0x7c>
 8010a02:	1c42      	adds	r2, r0, #1
 8010a04:	d101      	bne.n	8010a0a <__sflush_r+0x7a>
 8010a06:	682b      	ldr	r3, [r5, #0]
 8010a08:	b903      	cbnz	r3, 8010a0c <__sflush_r+0x7c>
 8010a0a:	6560      	str	r0, [r4, #84]	; 0x54
 8010a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a0e:	602f      	str	r7, [r5, #0]
 8010a10:	2900      	cmp	r1, #0
 8010a12:	d0ca      	beq.n	80109aa <__sflush_r+0x1a>
 8010a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a18:	4299      	cmp	r1, r3
 8010a1a:	d002      	beq.n	8010a22 <__sflush_r+0x92>
 8010a1c:	4628      	mov	r0, r5
 8010a1e:	f7ff fa9b 	bl	800ff58 <_free_r>
 8010a22:	2000      	movs	r0, #0
 8010a24:	6360      	str	r0, [r4, #52]	; 0x34
 8010a26:	e7c1      	b.n	80109ac <__sflush_r+0x1c>
 8010a28:	6a21      	ldr	r1, [r4, #32]
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	4628      	mov	r0, r5
 8010a2e:	47b0      	blx	r6
 8010a30:	1c41      	adds	r1, r0, #1
 8010a32:	d1c7      	bne.n	80109c4 <__sflush_r+0x34>
 8010a34:	682b      	ldr	r3, [r5, #0]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d0c4      	beq.n	80109c4 <__sflush_r+0x34>
 8010a3a:	2b1d      	cmp	r3, #29
 8010a3c:	d001      	beq.n	8010a42 <__sflush_r+0xb2>
 8010a3e:	2b16      	cmp	r3, #22
 8010a40:	d101      	bne.n	8010a46 <__sflush_r+0xb6>
 8010a42:	602f      	str	r7, [r5, #0]
 8010a44:	e7b1      	b.n	80109aa <__sflush_r+0x1a>
 8010a46:	89a3      	ldrh	r3, [r4, #12]
 8010a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a4c:	81a3      	strh	r3, [r4, #12]
 8010a4e:	e7ad      	b.n	80109ac <__sflush_r+0x1c>
 8010a50:	690f      	ldr	r7, [r1, #16]
 8010a52:	2f00      	cmp	r7, #0
 8010a54:	d0a9      	beq.n	80109aa <__sflush_r+0x1a>
 8010a56:	0793      	lsls	r3, r2, #30
 8010a58:	680e      	ldr	r6, [r1, #0]
 8010a5a:	bf08      	it	eq
 8010a5c:	694b      	ldreq	r3, [r1, #20]
 8010a5e:	600f      	str	r7, [r1, #0]
 8010a60:	bf18      	it	ne
 8010a62:	2300      	movne	r3, #0
 8010a64:	eba6 0807 	sub.w	r8, r6, r7
 8010a68:	608b      	str	r3, [r1, #8]
 8010a6a:	f1b8 0f00 	cmp.w	r8, #0
 8010a6e:	dd9c      	ble.n	80109aa <__sflush_r+0x1a>
 8010a70:	6a21      	ldr	r1, [r4, #32]
 8010a72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010a74:	4643      	mov	r3, r8
 8010a76:	463a      	mov	r2, r7
 8010a78:	4628      	mov	r0, r5
 8010a7a:	47b0      	blx	r6
 8010a7c:	2800      	cmp	r0, #0
 8010a7e:	dc06      	bgt.n	8010a8e <__sflush_r+0xfe>
 8010a80:	89a3      	ldrh	r3, [r4, #12]
 8010a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a86:	81a3      	strh	r3, [r4, #12]
 8010a88:	f04f 30ff 	mov.w	r0, #4294967295
 8010a8c:	e78e      	b.n	80109ac <__sflush_r+0x1c>
 8010a8e:	4407      	add	r7, r0
 8010a90:	eba8 0800 	sub.w	r8, r8, r0
 8010a94:	e7e9      	b.n	8010a6a <__sflush_r+0xda>
 8010a96:	bf00      	nop
 8010a98:	20400001 	.word	0x20400001

08010a9c <_fflush_r>:
 8010a9c:	b538      	push	{r3, r4, r5, lr}
 8010a9e:	690b      	ldr	r3, [r1, #16]
 8010aa0:	4605      	mov	r5, r0
 8010aa2:	460c      	mov	r4, r1
 8010aa4:	b913      	cbnz	r3, 8010aac <_fflush_r+0x10>
 8010aa6:	2500      	movs	r5, #0
 8010aa8:	4628      	mov	r0, r5
 8010aaa:	bd38      	pop	{r3, r4, r5, pc}
 8010aac:	b118      	cbz	r0, 8010ab6 <_fflush_r+0x1a>
 8010aae:	6983      	ldr	r3, [r0, #24]
 8010ab0:	b90b      	cbnz	r3, 8010ab6 <_fflush_r+0x1a>
 8010ab2:	f000 f887 	bl	8010bc4 <__sinit>
 8010ab6:	4b14      	ldr	r3, [pc, #80]	; (8010b08 <_fflush_r+0x6c>)
 8010ab8:	429c      	cmp	r4, r3
 8010aba:	d11b      	bne.n	8010af4 <_fflush_r+0x58>
 8010abc:	686c      	ldr	r4, [r5, #4]
 8010abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d0ef      	beq.n	8010aa6 <_fflush_r+0xa>
 8010ac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010ac8:	07d0      	lsls	r0, r2, #31
 8010aca:	d404      	bmi.n	8010ad6 <_fflush_r+0x3a>
 8010acc:	0599      	lsls	r1, r3, #22
 8010ace:	d402      	bmi.n	8010ad6 <_fflush_r+0x3a>
 8010ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ad2:	f000 f915 	bl	8010d00 <__retarget_lock_acquire_recursive>
 8010ad6:	4628      	mov	r0, r5
 8010ad8:	4621      	mov	r1, r4
 8010ada:	f7ff ff59 	bl	8010990 <__sflush_r>
 8010ade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ae0:	07da      	lsls	r2, r3, #31
 8010ae2:	4605      	mov	r5, r0
 8010ae4:	d4e0      	bmi.n	8010aa8 <_fflush_r+0xc>
 8010ae6:	89a3      	ldrh	r3, [r4, #12]
 8010ae8:	059b      	lsls	r3, r3, #22
 8010aea:	d4dd      	bmi.n	8010aa8 <_fflush_r+0xc>
 8010aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010aee:	f000 f908 	bl	8010d02 <__retarget_lock_release_recursive>
 8010af2:	e7d9      	b.n	8010aa8 <_fflush_r+0xc>
 8010af4:	4b05      	ldr	r3, [pc, #20]	; (8010b0c <_fflush_r+0x70>)
 8010af6:	429c      	cmp	r4, r3
 8010af8:	d101      	bne.n	8010afe <_fflush_r+0x62>
 8010afa:	68ac      	ldr	r4, [r5, #8]
 8010afc:	e7df      	b.n	8010abe <_fflush_r+0x22>
 8010afe:	4b04      	ldr	r3, [pc, #16]	; (8010b10 <_fflush_r+0x74>)
 8010b00:	429c      	cmp	r4, r3
 8010b02:	bf08      	it	eq
 8010b04:	68ec      	ldreq	r4, [r5, #12]
 8010b06:	e7da      	b.n	8010abe <_fflush_r+0x22>
 8010b08:	08011704 	.word	0x08011704
 8010b0c:	08011724 	.word	0x08011724
 8010b10:	080116e4 	.word	0x080116e4

08010b14 <std>:
 8010b14:	2300      	movs	r3, #0
 8010b16:	b510      	push	{r4, lr}
 8010b18:	4604      	mov	r4, r0
 8010b1a:	e9c0 3300 	strd	r3, r3, [r0]
 8010b1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010b22:	6083      	str	r3, [r0, #8]
 8010b24:	8181      	strh	r1, [r0, #12]
 8010b26:	6643      	str	r3, [r0, #100]	; 0x64
 8010b28:	81c2      	strh	r2, [r0, #14]
 8010b2a:	6183      	str	r3, [r0, #24]
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	2208      	movs	r2, #8
 8010b30:	305c      	adds	r0, #92	; 0x5c
 8010b32:	f7fb fddd 	bl	800c6f0 <memset>
 8010b36:	4b05      	ldr	r3, [pc, #20]	; (8010b4c <std+0x38>)
 8010b38:	6263      	str	r3, [r4, #36]	; 0x24
 8010b3a:	4b05      	ldr	r3, [pc, #20]	; (8010b50 <std+0x3c>)
 8010b3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8010b3e:	4b05      	ldr	r3, [pc, #20]	; (8010b54 <std+0x40>)
 8010b40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010b42:	4b05      	ldr	r3, [pc, #20]	; (8010b58 <std+0x44>)
 8010b44:	6224      	str	r4, [r4, #32]
 8010b46:	6323      	str	r3, [r4, #48]	; 0x30
 8010b48:	bd10      	pop	{r4, pc}
 8010b4a:	bf00      	nop
 8010b4c:	08010e69 	.word	0x08010e69
 8010b50:	08010e8b 	.word	0x08010e8b
 8010b54:	08010ec3 	.word	0x08010ec3
 8010b58:	08010ee7 	.word	0x08010ee7

08010b5c <_cleanup_r>:
 8010b5c:	4901      	ldr	r1, [pc, #4]	; (8010b64 <_cleanup_r+0x8>)
 8010b5e:	f000 b8af 	b.w	8010cc0 <_fwalk_reent>
 8010b62:	bf00      	nop
 8010b64:	08010a9d 	.word	0x08010a9d

08010b68 <__sfmoreglue>:
 8010b68:	b570      	push	{r4, r5, r6, lr}
 8010b6a:	2268      	movs	r2, #104	; 0x68
 8010b6c:	1e4d      	subs	r5, r1, #1
 8010b6e:	4355      	muls	r5, r2
 8010b70:	460e      	mov	r6, r1
 8010b72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010b76:	f7ff fa5b 	bl	8010030 <_malloc_r>
 8010b7a:	4604      	mov	r4, r0
 8010b7c:	b140      	cbz	r0, 8010b90 <__sfmoreglue+0x28>
 8010b7e:	2100      	movs	r1, #0
 8010b80:	e9c0 1600 	strd	r1, r6, [r0]
 8010b84:	300c      	adds	r0, #12
 8010b86:	60a0      	str	r0, [r4, #8]
 8010b88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010b8c:	f7fb fdb0 	bl	800c6f0 <memset>
 8010b90:	4620      	mov	r0, r4
 8010b92:	bd70      	pop	{r4, r5, r6, pc}

08010b94 <__sfp_lock_acquire>:
 8010b94:	4801      	ldr	r0, [pc, #4]	; (8010b9c <__sfp_lock_acquire+0x8>)
 8010b96:	f000 b8b3 	b.w	8010d00 <__retarget_lock_acquire_recursive>
 8010b9a:	bf00      	nop
 8010b9c:	200011a5 	.word	0x200011a5

08010ba0 <__sfp_lock_release>:
 8010ba0:	4801      	ldr	r0, [pc, #4]	; (8010ba8 <__sfp_lock_release+0x8>)
 8010ba2:	f000 b8ae 	b.w	8010d02 <__retarget_lock_release_recursive>
 8010ba6:	bf00      	nop
 8010ba8:	200011a5 	.word	0x200011a5

08010bac <__sinit_lock_acquire>:
 8010bac:	4801      	ldr	r0, [pc, #4]	; (8010bb4 <__sinit_lock_acquire+0x8>)
 8010bae:	f000 b8a7 	b.w	8010d00 <__retarget_lock_acquire_recursive>
 8010bb2:	bf00      	nop
 8010bb4:	200011a6 	.word	0x200011a6

08010bb8 <__sinit_lock_release>:
 8010bb8:	4801      	ldr	r0, [pc, #4]	; (8010bc0 <__sinit_lock_release+0x8>)
 8010bba:	f000 b8a2 	b.w	8010d02 <__retarget_lock_release_recursive>
 8010bbe:	bf00      	nop
 8010bc0:	200011a6 	.word	0x200011a6

08010bc4 <__sinit>:
 8010bc4:	b510      	push	{r4, lr}
 8010bc6:	4604      	mov	r4, r0
 8010bc8:	f7ff fff0 	bl	8010bac <__sinit_lock_acquire>
 8010bcc:	69a3      	ldr	r3, [r4, #24]
 8010bce:	b11b      	cbz	r3, 8010bd8 <__sinit+0x14>
 8010bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bd4:	f7ff bff0 	b.w	8010bb8 <__sinit_lock_release>
 8010bd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010bdc:	6523      	str	r3, [r4, #80]	; 0x50
 8010bde:	4b13      	ldr	r3, [pc, #76]	; (8010c2c <__sinit+0x68>)
 8010be0:	4a13      	ldr	r2, [pc, #76]	; (8010c30 <__sinit+0x6c>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	62a2      	str	r2, [r4, #40]	; 0x28
 8010be6:	42a3      	cmp	r3, r4
 8010be8:	bf04      	itt	eq
 8010bea:	2301      	moveq	r3, #1
 8010bec:	61a3      	streq	r3, [r4, #24]
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f000 f820 	bl	8010c34 <__sfp>
 8010bf4:	6060      	str	r0, [r4, #4]
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	f000 f81c 	bl	8010c34 <__sfp>
 8010bfc:	60a0      	str	r0, [r4, #8]
 8010bfe:	4620      	mov	r0, r4
 8010c00:	f000 f818 	bl	8010c34 <__sfp>
 8010c04:	2200      	movs	r2, #0
 8010c06:	60e0      	str	r0, [r4, #12]
 8010c08:	2104      	movs	r1, #4
 8010c0a:	6860      	ldr	r0, [r4, #4]
 8010c0c:	f7ff ff82 	bl	8010b14 <std>
 8010c10:	68a0      	ldr	r0, [r4, #8]
 8010c12:	2201      	movs	r2, #1
 8010c14:	2109      	movs	r1, #9
 8010c16:	f7ff ff7d 	bl	8010b14 <std>
 8010c1a:	68e0      	ldr	r0, [r4, #12]
 8010c1c:	2202      	movs	r2, #2
 8010c1e:	2112      	movs	r1, #18
 8010c20:	f7ff ff78 	bl	8010b14 <std>
 8010c24:	2301      	movs	r3, #1
 8010c26:	61a3      	str	r3, [r4, #24]
 8010c28:	e7d2      	b.n	8010bd0 <__sinit+0xc>
 8010c2a:	bf00      	nop
 8010c2c:	080112a0 	.word	0x080112a0
 8010c30:	08010b5d 	.word	0x08010b5d

08010c34 <__sfp>:
 8010c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c36:	4607      	mov	r7, r0
 8010c38:	f7ff ffac 	bl	8010b94 <__sfp_lock_acquire>
 8010c3c:	4b1e      	ldr	r3, [pc, #120]	; (8010cb8 <__sfp+0x84>)
 8010c3e:	681e      	ldr	r6, [r3, #0]
 8010c40:	69b3      	ldr	r3, [r6, #24]
 8010c42:	b913      	cbnz	r3, 8010c4a <__sfp+0x16>
 8010c44:	4630      	mov	r0, r6
 8010c46:	f7ff ffbd 	bl	8010bc4 <__sinit>
 8010c4a:	3648      	adds	r6, #72	; 0x48
 8010c4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010c50:	3b01      	subs	r3, #1
 8010c52:	d503      	bpl.n	8010c5c <__sfp+0x28>
 8010c54:	6833      	ldr	r3, [r6, #0]
 8010c56:	b30b      	cbz	r3, 8010c9c <__sfp+0x68>
 8010c58:	6836      	ldr	r6, [r6, #0]
 8010c5a:	e7f7      	b.n	8010c4c <__sfp+0x18>
 8010c5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010c60:	b9d5      	cbnz	r5, 8010c98 <__sfp+0x64>
 8010c62:	4b16      	ldr	r3, [pc, #88]	; (8010cbc <__sfp+0x88>)
 8010c64:	60e3      	str	r3, [r4, #12]
 8010c66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010c6a:	6665      	str	r5, [r4, #100]	; 0x64
 8010c6c:	f000 f847 	bl	8010cfe <__retarget_lock_init_recursive>
 8010c70:	f7ff ff96 	bl	8010ba0 <__sfp_lock_release>
 8010c74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010c78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010c7c:	6025      	str	r5, [r4, #0]
 8010c7e:	61a5      	str	r5, [r4, #24]
 8010c80:	2208      	movs	r2, #8
 8010c82:	4629      	mov	r1, r5
 8010c84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010c88:	f7fb fd32 	bl	800c6f0 <memset>
 8010c8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010c90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010c94:	4620      	mov	r0, r4
 8010c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c98:	3468      	adds	r4, #104	; 0x68
 8010c9a:	e7d9      	b.n	8010c50 <__sfp+0x1c>
 8010c9c:	2104      	movs	r1, #4
 8010c9e:	4638      	mov	r0, r7
 8010ca0:	f7ff ff62 	bl	8010b68 <__sfmoreglue>
 8010ca4:	4604      	mov	r4, r0
 8010ca6:	6030      	str	r0, [r6, #0]
 8010ca8:	2800      	cmp	r0, #0
 8010caa:	d1d5      	bne.n	8010c58 <__sfp+0x24>
 8010cac:	f7ff ff78 	bl	8010ba0 <__sfp_lock_release>
 8010cb0:	230c      	movs	r3, #12
 8010cb2:	603b      	str	r3, [r7, #0]
 8010cb4:	e7ee      	b.n	8010c94 <__sfp+0x60>
 8010cb6:	bf00      	nop
 8010cb8:	080112a0 	.word	0x080112a0
 8010cbc:	ffff0001 	.word	0xffff0001

08010cc0 <_fwalk_reent>:
 8010cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cc4:	4606      	mov	r6, r0
 8010cc6:	4688      	mov	r8, r1
 8010cc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010ccc:	2700      	movs	r7, #0
 8010cce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010cd2:	f1b9 0901 	subs.w	r9, r9, #1
 8010cd6:	d505      	bpl.n	8010ce4 <_fwalk_reent+0x24>
 8010cd8:	6824      	ldr	r4, [r4, #0]
 8010cda:	2c00      	cmp	r4, #0
 8010cdc:	d1f7      	bne.n	8010cce <_fwalk_reent+0xe>
 8010cde:	4638      	mov	r0, r7
 8010ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ce4:	89ab      	ldrh	r3, [r5, #12]
 8010ce6:	2b01      	cmp	r3, #1
 8010ce8:	d907      	bls.n	8010cfa <_fwalk_reent+0x3a>
 8010cea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010cee:	3301      	adds	r3, #1
 8010cf0:	d003      	beq.n	8010cfa <_fwalk_reent+0x3a>
 8010cf2:	4629      	mov	r1, r5
 8010cf4:	4630      	mov	r0, r6
 8010cf6:	47c0      	blx	r8
 8010cf8:	4307      	orrs	r7, r0
 8010cfa:	3568      	adds	r5, #104	; 0x68
 8010cfc:	e7e9      	b.n	8010cd2 <_fwalk_reent+0x12>

08010cfe <__retarget_lock_init_recursive>:
 8010cfe:	4770      	bx	lr

08010d00 <__retarget_lock_acquire_recursive>:
 8010d00:	4770      	bx	lr

08010d02 <__retarget_lock_release_recursive>:
 8010d02:	4770      	bx	lr

08010d04 <__swhatbuf_r>:
 8010d04:	b570      	push	{r4, r5, r6, lr}
 8010d06:	460e      	mov	r6, r1
 8010d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d0c:	2900      	cmp	r1, #0
 8010d0e:	b096      	sub	sp, #88	; 0x58
 8010d10:	4614      	mov	r4, r2
 8010d12:	461d      	mov	r5, r3
 8010d14:	da08      	bge.n	8010d28 <__swhatbuf_r+0x24>
 8010d16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	602a      	str	r2, [r5, #0]
 8010d1e:	061a      	lsls	r2, r3, #24
 8010d20:	d410      	bmi.n	8010d44 <__swhatbuf_r+0x40>
 8010d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d26:	e00e      	b.n	8010d46 <__swhatbuf_r+0x42>
 8010d28:	466a      	mov	r2, sp
 8010d2a:	f000 f903 	bl	8010f34 <_fstat_r>
 8010d2e:	2800      	cmp	r0, #0
 8010d30:	dbf1      	blt.n	8010d16 <__swhatbuf_r+0x12>
 8010d32:	9a01      	ldr	r2, [sp, #4]
 8010d34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010d38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010d3c:	425a      	negs	r2, r3
 8010d3e:	415a      	adcs	r2, r3
 8010d40:	602a      	str	r2, [r5, #0]
 8010d42:	e7ee      	b.n	8010d22 <__swhatbuf_r+0x1e>
 8010d44:	2340      	movs	r3, #64	; 0x40
 8010d46:	2000      	movs	r0, #0
 8010d48:	6023      	str	r3, [r4, #0]
 8010d4a:	b016      	add	sp, #88	; 0x58
 8010d4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010d50 <__smakebuf_r>:
 8010d50:	898b      	ldrh	r3, [r1, #12]
 8010d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010d54:	079d      	lsls	r5, r3, #30
 8010d56:	4606      	mov	r6, r0
 8010d58:	460c      	mov	r4, r1
 8010d5a:	d507      	bpl.n	8010d6c <__smakebuf_r+0x1c>
 8010d5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010d60:	6023      	str	r3, [r4, #0]
 8010d62:	6123      	str	r3, [r4, #16]
 8010d64:	2301      	movs	r3, #1
 8010d66:	6163      	str	r3, [r4, #20]
 8010d68:	b002      	add	sp, #8
 8010d6a:	bd70      	pop	{r4, r5, r6, pc}
 8010d6c:	ab01      	add	r3, sp, #4
 8010d6e:	466a      	mov	r2, sp
 8010d70:	f7ff ffc8 	bl	8010d04 <__swhatbuf_r>
 8010d74:	9900      	ldr	r1, [sp, #0]
 8010d76:	4605      	mov	r5, r0
 8010d78:	4630      	mov	r0, r6
 8010d7a:	f7ff f959 	bl	8010030 <_malloc_r>
 8010d7e:	b948      	cbnz	r0, 8010d94 <__smakebuf_r+0x44>
 8010d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d84:	059a      	lsls	r2, r3, #22
 8010d86:	d4ef      	bmi.n	8010d68 <__smakebuf_r+0x18>
 8010d88:	f023 0303 	bic.w	r3, r3, #3
 8010d8c:	f043 0302 	orr.w	r3, r3, #2
 8010d90:	81a3      	strh	r3, [r4, #12]
 8010d92:	e7e3      	b.n	8010d5c <__smakebuf_r+0xc>
 8010d94:	4b0d      	ldr	r3, [pc, #52]	; (8010dcc <__smakebuf_r+0x7c>)
 8010d96:	62b3      	str	r3, [r6, #40]	; 0x28
 8010d98:	89a3      	ldrh	r3, [r4, #12]
 8010d9a:	6020      	str	r0, [r4, #0]
 8010d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010da0:	81a3      	strh	r3, [r4, #12]
 8010da2:	9b00      	ldr	r3, [sp, #0]
 8010da4:	6163      	str	r3, [r4, #20]
 8010da6:	9b01      	ldr	r3, [sp, #4]
 8010da8:	6120      	str	r0, [r4, #16]
 8010daa:	b15b      	cbz	r3, 8010dc4 <__smakebuf_r+0x74>
 8010dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010db0:	4630      	mov	r0, r6
 8010db2:	f000 f8d1 	bl	8010f58 <_isatty_r>
 8010db6:	b128      	cbz	r0, 8010dc4 <__smakebuf_r+0x74>
 8010db8:	89a3      	ldrh	r3, [r4, #12]
 8010dba:	f023 0303 	bic.w	r3, r3, #3
 8010dbe:	f043 0301 	orr.w	r3, r3, #1
 8010dc2:	81a3      	strh	r3, [r4, #12]
 8010dc4:	89a0      	ldrh	r0, [r4, #12]
 8010dc6:	4305      	orrs	r5, r0
 8010dc8:	81a5      	strh	r5, [r4, #12]
 8010dca:	e7cd      	b.n	8010d68 <__smakebuf_r+0x18>
 8010dcc:	08010b5d 	.word	0x08010b5d

08010dd0 <_malloc_usable_size_r>:
 8010dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010dd4:	1f18      	subs	r0, r3, #4
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	bfbc      	itt	lt
 8010dda:	580b      	ldrlt	r3, [r1, r0]
 8010ddc:	18c0      	addlt	r0, r0, r3
 8010dde:	4770      	bx	lr

08010de0 <_raise_r>:
 8010de0:	291f      	cmp	r1, #31
 8010de2:	b538      	push	{r3, r4, r5, lr}
 8010de4:	4604      	mov	r4, r0
 8010de6:	460d      	mov	r5, r1
 8010de8:	d904      	bls.n	8010df4 <_raise_r+0x14>
 8010dea:	2316      	movs	r3, #22
 8010dec:	6003      	str	r3, [r0, #0]
 8010dee:	f04f 30ff 	mov.w	r0, #4294967295
 8010df2:	bd38      	pop	{r3, r4, r5, pc}
 8010df4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010df6:	b112      	cbz	r2, 8010dfe <_raise_r+0x1e>
 8010df8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010dfc:	b94b      	cbnz	r3, 8010e12 <_raise_r+0x32>
 8010dfe:	4620      	mov	r0, r4
 8010e00:	f000 f830 	bl	8010e64 <_getpid_r>
 8010e04:	462a      	mov	r2, r5
 8010e06:	4601      	mov	r1, r0
 8010e08:	4620      	mov	r0, r4
 8010e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e0e:	f000 b817 	b.w	8010e40 <_kill_r>
 8010e12:	2b01      	cmp	r3, #1
 8010e14:	d00a      	beq.n	8010e2c <_raise_r+0x4c>
 8010e16:	1c59      	adds	r1, r3, #1
 8010e18:	d103      	bne.n	8010e22 <_raise_r+0x42>
 8010e1a:	2316      	movs	r3, #22
 8010e1c:	6003      	str	r3, [r0, #0]
 8010e1e:	2001      	movs	r0, #1
 8010e20:	e7e7      	b.n	8010df2 <_raise_r+0x12>
 8010e22:	2400      	movs	r4, #0
 8010e24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010e28:	4628      	mov	r0, r5
 8010e2a:	4798      	blx	r3
 8010e2c:	2000      	movs	r0, #0
 8010e2e:	e7e0      	b.n	8010df2 <_raise_r+0x12>

08010e30 <raise>:
 8010e30:	4b02      	ldr	r3, [pc, #8]	; (8010e3c <raise+0xc>)
 8010e32:	4601      	mov	r1, r0
 8010e34:	6818      	ldr	r0, [r3, #0]
 8010e36:	f7ff bfd3 	b.w	8010de0 <_raise_r>
 8010e3a:	bf00      	nop
 8010e3c:	20000254 	.word	0x20000254

08010e40 <_kill_r>:
 8010e40:	b538      	push	{r3, r4, r5, lr}
 8010e42:	4d07      	ldr	r5, [pc, #28]	; (8010e60 <_kill_r+0x20>)
 8010e44:	2300      	movs	r3, #0
 8010e46:	4604      	mov	r4, r0
 8010e48:	4608      	mov	r0, r1
 8010e4a:	4611      	mov	r1, r2
 8010e4c:	602b      	str	r3, [r5, #0]
 8010e4e:	f7f3 fe53 	bl	8004af8 <_kill>
 8010e52:	1c43      	adds	r3, r0, #1
 8010e54:	d102      	bne.n	8010e5c <_kill_r+0x1c>
 8010e56:	682b      	ldr	r3, [r5, #0]
 8010e58:	b103      	cbz	r3, 8010e5c <_kill_r+0x1c>
 8010e5a:	6023      	str	r3, [r4, #0]
 8010e5c:	bd38      	pop	{r3, r4, r5, pc}
 8010e5e:	bf00      	nop
 8010e60:	200011a0 	.word	0x200011a0

08010e64 <_getpid_r>:
 8010e64:	f7f3 be40 	b.w	8004ae8 <_getpid>

08010e68 <__sread>:
 8010e68:	b510      	push	{r4, lr}
 8010e6a:	460c      	mov	r4, r1
 8010e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e70:	f000 f894 	bl	8010f9c <_read_r>
 8010e74:	2800      	cmp	r0, #0
 8010e76:	bfab      	itete	ge
 8010e78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e7a:	89a3      	ldrhlt	r3, [r4, #12]
 8010e7c:	181b      	addge	r3, r3, r0
 8010e7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e82:	bfac      	ite	ge
 8010e84:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e86:	81a3      	strhlt	r3, [r4, #12]
 8010e88:	bd10      	pop	{r4, pc}

08010e8a <__swrite>:
 8010e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e8e:	461f      	mov	r7, r3
 8010e90:	898b      	ldrh	r3, [r1, #12]
 8010e92:	05db      	lsls	r3, r3, #23
 8010e94:	4605      	mov	r5, r0
 8010e96:	460c      	mov	r4, r1
 8010e98:	4616      	mov	r6, r2
 8010e9a:	d505      	bpl.n	8010ea8 <__swrite+0x1e>
 8010e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ea0:	2302      	movs	r3, #2
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	f000 f868 	bl	8010f78 <_lseek_r>
 8010ea8:	89a3      	ldrh	r3, [r4, #12]
 8010eaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010eae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010eb2:	81a3      	strh	r3, [r4, #12]
 8010eb4:	4632      	mov	r2, r6
 8010eb6:	463b      	mov	r3, r7
 8010eb8:	4628      	mov	r0, r5
 8010eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ebe:	f000 b817 	b.w	8010ef0 <_write_r>

08010ec2 <__sseek>:
 8010ec2:	b510      	push	{r4, lr}
 8010ec4:	460c      	mov	r4, r1
 8010ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010eca:	f000 f855 	bl	8010f78 <_lseek_r>
 8010ece:	1c43      	adds	r3, r0, #1
 8010ed0:	89a3      	ldrh	r3, [r4, #12]
 8010ed2:	bf15      	itete	ne
 8010ed4:	6560      	strne	r0, [r4, #84]	; 0x54
 8010ed6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010eda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010ede:	81a3      	strheq	r3, [r4, #12]
 8010ee0:	bf18      	it	ne
 8010ee2:	81a3      	strhne	r3, [r4, #12]
 8010ee4:	bd10      	pop	{r4, pc}

08010ee6 <__sclose>:
 8010ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010eea:	f000 b813 	b.w	8010f14 <_close_r>
	...

08010ef0 <_write_r>:
 8010ef0:	b538      	push	{r3, r4, r5, lr}
 8010ef2:	4d07      	ldr	r5, [pc, #28]	; (8010f10 <_write_r+0x20>)
 8010ef4:	4604      	mov	r4, r0
 8010ef6:	4608      	mov	r0, r1
 8010ef8:	4611      	mov	r1, r2
 8010efa:	2200      	movs	r2, #0
 8010efc:	602a      	str	r2, [r5, #0]
 8010efe:	461a      	mov	r2, r3
 8010f00:	f7f3 fe31 	bl	8004b66 <_write>
 8010f04:	1c43      	adds	r3, r0, #1
 8010f06:	d102      	bne.n	8010f0e <_write_r+0x1e>
 8010f08:	682b      	ldr	r3, [r5, #0]
 8010f0a:	b103      	cbz	r3, 8010f0e <_write_r+0x1e>
 8010f0c:	6023      	str	r3, [r4, #0]
 8010f0e:	bd38      	pop	{r3, r4, r5, pc}
 8010f10:	200011a0 	.word	0x200011a0

08010f14 <_close_r>:
 8010f14:	b538      	push	{r3, r4, r5, lr}
 8010f16:	4d06      	ldr	r5, [pc, #24]	; (8010f30 <_close_r+0x1c>)
 8010f18:	2300      	movs	r3, #0
 8010f1a:	4604      	mov	r4, r0
 8010f1c:	4608      	mov	r0, r1
 8010f1e:	602b      	str	r3, [r5, #0]
 8010f20:	f7f3 fe3d 	bl	8004b9e <_close>
 8010f24:	1c43      	adds	r3, r0, #1
 8010f26:	d102      	bne.n	8010f2e <_close_r+0x1a>
 8010f28:	682b      	ldr	r3, [r5, #0]
 8010f2a:	b103      	cbz	r3, 8010f2e <_close_r+0x1a>
 8010f2c:	6023      	str	r3, [r4, #0]
 8010f2e:	bd38      	pop	{r3, r4, r5, pc}
 8010f30:	200011a0 	.word	0x200011a0

08010f34 <_fstat_r>:
 8010f34:	b538      	push	{r3, r4, r5, lr}
 8010f36:	4d07      	ldr	r5, [pc, #28]	; (8010f54 <_fstat_r+0x20>)
 8010f38:	2300      	movs	r3, #0
 8010f3a:	4604      	mov	r4, r0
 8010f3c:	4608      	mov	r0, r1
 8010f3e:	4611      	mov	r1, r2
 8010f40:	602b      	str	r3, [r5, #0]
 8010f42:	f7f3 fe38 	bl	8004bb6 <_fstat>
 8010f46:	1c43      	adds	r3, r0, #1
 8010f48:	d102      	bne.n	8010f50 <_fstat_r+0x1c>
 8010f4a:	682b      	ldr	r3, [r5, #0]
 8010f4c:	b103      	cbz	r3, 8010f50 <_fstat_r+0x1c>
 8010f4e:	6023      	str	r3, [r4, #0]
 8010f50:	bd38      	pop	{r3, r4, r5, pc}
 8010f52:	bf00      	nop
 8010f54:	200011a0 	.word	0x200011a0

08010f58 <_isatty_r>:
 8010f58:	b538      	push	{r3, r4, r5, lr}
 8010f5a:	4d06      	ldr	r5, [pc, #24]	; (8010f74 <_isatty_r+0x1c>)
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	4604      	mov	r4, r0
 8010f60:	4608      	mov	r0, r1
 8010f62:	602b      	str	r3, [r5, #0]
 8010f64:	f7f3 fe37 	bl	8004bd6 <_isatty>
 8010f68:	1c43      	adds	r3, r0, #1
 8010f6a:	d102      	bne.n	8010f72 <_isatty_r+0x1a>
 8010f6c:	682b      	ldr	r3, [r5, #0]
 8010f6e:	b103      	cbz	r3, 8010f72 <_isatty_r+0x1a>
 8010f70:	6023      	str	r3, [r4, #0]
 8010f72:	bd38      	pop	{r3, r4, r5, pc}
 8010f74:	200011a0 	.word	0x200011a0

08010f78 <_lseek_r>:
 8010f78:	b538      	push	{r3, r4, r5, lr}
 8010f7a:	4d07      	ldr	r5, [pc, #28]	; (8010f98 <_lseek_r+0x20>)
 8010f7c:	4604      	mov	r4, r0
 8010f7e:	4608      	mov	r0, r1
 8010f80:	4611      	mov	r1, r2
 8010f82:	2200      	movs	r2, #0
 8010f84:	602a      	str	r2, [r5, #0]
 8010f86:	461a      	mov	r2, r3
 8010f88:	f7f3 fe30 	bl	8004bec <_lseek>
 8010f8c:	1c43      	adds	r3, r0, #1
 8010f8e:	d102      	bne.n	8010f96 <_lseek_r+0x1e>
 8010f90:	682b      	ldr	r3, [r5, #0]
 8010f92:	b103      	cbz	r3, 8010f96 <_lseek_r+0x1e>
 8010f94:	6023      	str	r3, [r4, #0]
 8010f96:	bd38      	pop	{r3, r4, r5, pc}
 8010f98:	200011a0 	.word	0x200011a0

08010f9c <_read_r>:
 8010f9c:	b538      	push	{r3, r4, r5, lr}
 8010f9e:	4d07      	ldr	r5, [pc, #28]	; (8010fbc <_read_r+0x20>)
 8010fa0:	4604      	mov	r4, r0
 8010fa2:	4608      	mov	r0, r1
 8010fa4:	4611      	mov	r1, r2
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	602a      	str	r2, [r5, #0]
 8010faa:	461a      	mov	r2, r3
 8010fac:	f7f3 fdbe 	bl	8004b2c <_read>
 8010fb0:	1c43      	adds	r3, r0, #1
 8010fb2:	d102      	bne.n	8010fba <_read_r+0x1e>
 8010fb4:	682b      	ldr	r3, [r5, #0]
 8010fb6:	b103      	cbz	r3, 8010fba <_read_r+0x1e>
 8010fb8:	6023      	str	r3, [r4, #0]
 8010fba:	bd38      	pop	{r3, r4, r5, pc}
 8010fbc:	200011a0 	.word	0x200011a0

08010fc0 <acosf>:
 8010fc0:	b508      	push	{r3, lr}
 8010fc2:	ed2d 8b02 	vpush	{d8}
 8010fc6:	eeb0 8a40 	vmov.f32	s16, s0
 8010fca:	f000 f843 	bl	8011054 <__ieee754_acosf>
 8010fce:	eeb4 8a48 	vcmp.f32	s16, s16
 8010fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fd6:	eef0 8a40 	vmov.f32	s17, s0
 8010fda:	d615      	bvs.n	8011008 <acosf+0x48>
 8010fdc:	eeb0 0a48 	vmov.f32	s0, s16
 8010fe0:	f000 f933 	bl	801124a <fabsf>
 8010fe4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010fe8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ff0:	dd0a      	ble.n	8011008 <acosf+0x48>
 8010ff2:	f7fb fb45 	bl	800c680 <__errno>
 8010ff6:	ecbd 8b02 	vpop	{d8}
 8010ffa:	2321      	movs	r3, #33	; 0x21
 8010ffc:	6003      	str	r3, [r0, #0]
 8010ffe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011002:	4804      	ldr	r0, [pc, #16]	; (8011014 <acosf+0x54>)
 8011004:	f7fc b9f6 	b.w	800d3f4 <nanf>
 8011008:	eeb0 0a68 	vmov.f32	s0, s17
 801100c:	ecbd 8b02 	vpop	{d8}
 8011010:	bd08      	pop	{r3, pc}
 8011012:	bf00      	nop
 8011014:	080116e0 	.word	0x080116e0

08011018 <sqrtf>:
 8011018:	b508      	push	{r3, lr}
 801101a:	ed2d 8b02 	vpush	{d8}
 801101e:	eeb0 8a40 	vmov.f32	s16, s0
 8011022:	f000 f90f 	bl	8011244 <__ieee754_sqrtf>
 8011026:	eeb4 8a48 	vcmp.f32	s16, s16
 801102a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801102e:	d60c      	bvs.n	801104a <sqrtf+0x32>
 8011030:	eddf 8a07 	vldr	s17, [pc, #28]	; 8011050 <sqrtf+0x38>
 8011034:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801103c:	d505      	bpl.n	801104a <sqrtf+0x32>
 801103e:	f7fb fb1f 	bl	800c680 <__errno>
 8011042:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011046:	2321      	movs	r3, #33	; 0x21
 8011048:	6003      	str	r3, [r0, #0]
 801104a:	ecbd 8b02 	vpop	{d8}
 801104e:	bd08      	pop	{r3, pc}
 8011050:	00000000 	.word	0x00000000

08011054 <__ieee754_acosf>:
 8011054:	b508      	push	{r3, lr}
 8011056:	ee10 3a10 	vmov	r3, s0
 801105a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801105e:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8011062:	ed2d 8b0c 	vpush	{d8-d13}
 8011066:	d10a      	bne.n	801107e <__ieee754_acosf+0x2a>
 8011068:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8011200 <__ieee754_acosf+0x1ac>
 801106c:	ed9f 8a65 	vldr	s16, [pc, #404]	; 8011204 <__ieee754_acosf+0x1b0>
 8011070:	2b00      	cmp	r3, #0
 8011072:	bfd8      	it	le
 8011074:	eeb0 0a48 	vmovle.f32	s0, s16
 8011078:	ecbd 8b0c 	vpop	{d8-d13}
 801107c:	bd08      	pop	{r3, pc}
 801107e:	dd04      	ble.n	801108a <__ieee754_acosf+0x36>
 8011080:	ee30 8a40 	vsub.f32	s16, s0, s0
 8011084:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8011088:	e7f6      	b.n	8011078 <__ieee754_acosf+0x24>
 801108a:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 801108e:	da3c      	bge.n	801110a <__ieee754_acosf+0xb6>
 8011090:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8011094:	f340 80b1 	ble.w	80111fa <__ieee754_acosf+0x1a6>
 8011098:	ee60 7a00 	vmul.f32	s15, s0, s0
 801109c:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8011208 <__ieee754_acosf+0x1b4>
 80110a0:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 801120c <__ieee754_acosf+0x1b8>
 80110a4:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8011210 <__ieee754_acosf+0x1bc>
 80110a8:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8011214 <__ieee754_acosf+0x1c0>
 80110ac:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80110b0:	eddf 6a59 	vldr	s13, [pc, #356]	; 8011218 <__ieee754_acosf+0x1c4>
 80110b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80110b8:	ed9f 7a58 	vldr	s14, [pc, #352]	; 801121c <__ieee754_acosf+0x1c8>
 80110bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80110c0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8011220 <__ieee754_acosf+0x1cc>
 80110c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80110c8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8011224 <__ieee754_acosf+0x1d0>
 80110cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80110d0:	eddf 6a55 	vldr	s13, [pc, #340]	; 8011228 <__ieee754_acosf+0x1d4>
 80110d4:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80110d8:	eddf 6a54 	vldr	s13, [pc, #336]	; 801122c <__ieee754_acosf+0x1d8>
 80110dc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80110e0:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8011230 <__ieee754_acosf+0x1dc>
 80110e4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80110e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80110ec:	eee6 6a27 	vfma.f32	s13, s12, s15
 80110f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80110f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80110f8:	eea0 8a67 	vfms.f32	s16, s0, s15
 80110fc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8011234 <__ieee754_acosf+0x1e0>
 8011100:	ee30 0a48 	vsub.f32	s0, s0, s16
 8011104:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011108:	e7b6      	b.n	8011078 <__ieee754_acosf+0x24>
 801110a:	2b00      	cmp	r3, #0
 801110c:	eddf da3e 	vldr	s27, [pc, #248]	; 8011208 <__ieee754_acosf+0x1b4>
 8011110:	eddf ca3e 	vldr	s25, [pc, #248]	; 801120c <__ieee754_acosf+0x1b8>
 8011114:	ed9f ca40 	vldr	s24, [pc, #256]	; 8011218 <__ieee754_acosf+0x1c4>
 8011118:	eddf ba40 	vldr	s23, [pc, #256]	; 801121c <__ieee754_acosf+0x1c8>
 801111c:	ed9f ba40 	vldr	s22, [pc, #256]	; 8011220 <__ieee754_acosf+0x1cc>
 8011120:	eddf 8a40 	vldr	s17, [pc, #256]	; 8011224 <__ieee754_acosf+0x1d0>
 8011124:	ed9f da40 	vldr	s26, [pc, #256]	; 8011228 <__ieee754_acosf+0x1d4>
 8011128:	eddf aa39 	vldr	s21, [pc, #228]	; 8011210 <__ieee754_acosf+0x1bc>
 801112c:	ed9f aa3f 	vldr	s20, [pc, #252]	; 801122c <__ieee754_acosf+0x1d8>
 8011130:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8011230 <__ieee754_acosf+0x1dc>
 8011134:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8011138:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801113c:	da28      	bge.n	8011190 <__ieee754_acosf+0x13c>
 801113e:	ee30 0a09 	vadd.f32	s0, s0, s18
 8011142:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011146:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801114a:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801114e:	eeac ca80 	vfma.f32	s24, s25, s0
 8011152:	eeaa aa80 	vfma.f32	s20, s21, s0
 8011156:	eeec ba00 	vfma.f32	s23, s24, s0
 801115a:	eeea 9a00 	vfma.f32	s19, s20, s0
 801115e:	eeab ba80 	vfma.f32	s22, s23, s0
 8011162:	eea9 9a80 	vfma.f32	s18, s19, s0
 8011166:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801116a:	ee68 8a80 	vmul.f32	s17, s17, s0
 801116e:	f000 f869 	bl	8011244 <__ieee754_sqrtf>
 8011172:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8011176:	eddf 7a30 	vldr	s15, [pc, #192]	; 8011238 <__ieee754_acosf+0x1e4>
 801117a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801117e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011182:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011186:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 801123c <__ieee754_acosf+0x1e8>
 801118a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801118e:	e773      	b.n	8011078 <__ieee754_acosf+0x24>
 8011190:	ee39 8a40 	vsub.f32	s16, s18, s0
 8011194:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011198:	eeb0 0a48 	vmov.f32	s0, s16
 801119c:	f000 f852 	bl	8011244 <__ieee754_sqrtf>
 80111a0:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80111a4:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80111a8:	eeac ca88 	vfma.f32	s24, s25, s16
 80111ac:	eeaa aa88 	vfma.f32	s20, s21, s16
 80111b0:	eeec ba08 	vfma.f32	s23, s24, s16
 80111b4:	ee10 3a10 	vmov	r3, s0
 80111b8:	eeab ba88 	vfma.f32	s22, s23, s16
 80111bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80111c0:	f023 030f 	bic.w	r3, r3, #15
 80111c4:	eeea 9a08 	vfma.f32	s19, s20, s16
 80111c8:	ee07 3a90 	vmov	s15, r3
 80111cc:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80111d0:	eeb0 6a48 	vmov.f32	s12, s16
 80111d4:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80111d8:	eea9 9a88 	vfma.f32	s18, s19, s16
 80111dc:	ee70 6a27 	vadd.f32	s13, s0, s15
 80111e0:	ee68 8a88 	vmul.f32	s17, s17, s16
 80111e4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80111e8:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80111ec:	eea0 7a26 	vfma.f32	s14, s0, s13
 80111f0:	ee37 0a87 	vadd.f32	s0, s15, s14
 80111f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80111f8:	e73e      	b.n	8011078 <__ieee754_acosf+0x24>
 80111fa:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8011240 <__ieee754_acosf+0x1ec>
 80111fe:	e73b      	b.n	8011078 <__ieee754_acosf+0x24>
 8011200:	00000000 	.word	0x00000000
 8011204:	40490fdb 	.word	0x40490fdb
 8011208:	3811ef08 	.word	0x3811ef08
 801120c:	3a4f7f04 	.word	0x3a4f7f04
 8011210:	bf303361 	.word	0xbf303361
 8011214:	33a22168 	.word	0x33a22168
 8011218:	bd241146 	.word	0xbd241146
 801121c:	3e4e0aa8 	.word	0x3e4e0aa8
 8011220:	bea6b090 	.word	0xbea6b090
 8011224:	3e2aaaab 	.word	0x3e2aaaab
 8011228:	3d9dc62e 	.word	0x3d9dc62e
 801122c:	4001572d 	.word	0x4001572d
 8011230:	c019d139 	.word	0xc019d139
 8011234:	3fc90fda 	.word	0x3fc90fda
 8011238:	b3a22168 	.word	0xb3a22168
 801123c:	40490fda 	.word	0x40490fda
 8011240:	3fc90fdb 	.word	0x3fc90fdb

08011244 <__ieee754_sqrtf>:
 8011244:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011248:	4770      	bx	lr

0801124a <fabsf>:
 801124a:	ee10 3a10 	vmov	r3, s0
 801124e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011252:	ee00 3a10 	vmov	s0, r3
 8011256:	4770      	bx	lr

08011258 <_init>:
 8011258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801125a:	bf00      	nop
 801125c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801125e:	bc08      	pop	{r3}
 8011260:	469e      	mov	lr, r3
 8011262:	4770      	bx	lr

08011264 <_fini>:
 8011264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011266:	bf00      	nop
 8011268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801126a:	bc08      	pop	{r3}
 801126c:	469e      	mov	lr, r3
 801126e:	4770      	bx	lr
