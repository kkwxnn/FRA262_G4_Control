
FRA262_G4_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ac4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006c5c  08006c5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c7c  08006c7c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08006c7c  08006c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c84  08006c84  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c88  08006c88  00016c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000084  08006d10  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08006d10  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f448  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e42  00000000  00000000  0002f4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00031340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  000320e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017792  00000000  00000000  00032de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6f3  00000000  00000000  0004a57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a26b  00000000  00000000  00059c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3ed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d0c  00000000  00000000  000f3f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000084 	.word	0x20000084
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006c44 	.word	0x08006c44

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000088 	.word	0x20000088
 80001d4:	08006c44 	.word	0x08006c44

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	0000      	movs	r0, r0
	...

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f002 fa40 	bl	8003320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f92a 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 fb98 	bl	80015d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea8:	f000 fb76 	bl	8001598 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000eac:	f000 fb4a 	bl	8001544 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8000eb0:	f000 fad0 	bl	8001454 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000eb4:	f000 fa7a 	bl	80013ac <MX_TIM3_Init>
  MX_TIM1_Init();
 8000eb8:	f000 f9e8 	bl	800128c <MX_TIM1_Init>
  MX_ADC1_Init();
 8000ebc:	f000 f986 	bl	80011cc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000ec0:	f000 fb16 	bl	80014f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	487c      	ldr	r0, [pc, #496]	; (80010b8 <main+0x220>)
 8000ec8:	f004 fbd6 	bl	8005678 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Start Timer1
 8000ecc:	487b      	ldr	r0, [pc, #492]	; (80010bc <main+0x224>)
 8000ece:	f004 f9d3 	bl	8005278 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4879      	ldr	r0, [pc, #484]	; (80010bc <main+0x224>)
 8000ed6:	f004 fa79 	bl	80053cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000eda:	2104      	movs	r1, #4
 8000edc:	4877      	ldr	r0, [pc, #476]	; (80010bc <main+0x224>)
 8000ede:	f004 fa75 	bl	80053cc <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, L_EN);
 8000ee2:	4b77      	ldr	r3, [pc, #476]	; (80010c0 <main+0x228>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	461a      	mov	r2, r3
 8000eea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eee:	4875      	ldr	r0, [pc, #468]	; (80010c4 <main+0x22c>)
 8000ef0:	f003 fca8 	bl	8004844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, R_EN);
 8000ef4:	4b74      	ldr	r3, [pc, #464]	; (80010c8 <main+0x230>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	461a      	mov	r2, r3
 8000efc:	2110      	movs	r1, #16
 8000efe:	4871      	ldr	r0, [pc, #452]	; (80010c4 <main+0x22c>)
 8000f00:	f003 fca0 	bl	8004844 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start(&htim5); //Start Timer5
 8000f04:	4871      	ldr	r0, [pc, #452]	; (80010cc <main+0x234>)
 8000f06:	f004 f9b7 	bl	8005278 <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, XYSwitch, 2);
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	4970      	ldr	r1, [pc, #448]	; (80010d0 <main+0x238>)
 8000f0e:	4871      	ldr	r0, [pc, #452]	; (80010d4 <main+0x23c>)
 8000f10:	f002 fabc 	bl	800348c <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  JoystickPinUpdate(); //Check Pin Flag
 8000f14:	f000 fcc6 	bl	80018a4 <JoystickPinUpdate>

	  switch(scheduler)
 8000f18:	4b6f      	ldr	r3, [pc, #444]	; (80010d8 <main+0x240>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d8f9      	bhi.n	8000f14 <main+0x7c>
 8000f20:	a201      	add	r2, pc, #4	; (adr r2, 8000f28 <main+0x90>)
 8000f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f26:	bf00      	nop
 8000f28:	08000f39 	.word	0x08000f39
 8000f2c:	08000f4f 	.word	0x08000f4f
 8000f30:	08001087 	.word	0x08001087
 8000f34:	0800108d 	.word	0x0800108d
	  {
	  //Joystick
	  case 0:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8000f38:	4b5f      	ldr	r3, [pc, #380]	; (80010b8 <main+0x220>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	4b66      	ldr	r3, [pc, #408]	; (80010dc <main+0x244>)
 8000f42:	801a      	strh	r2, [r3, #0]
		  JoystickControl(); //Read Pin form Joystick
 8000f44:	f000 fd2c 	bl	80019a0 <JoystickControl>
		  JoystickLocationState();
 8000f48:	f000 fda6 	bl	8001a98 <JoystickLocationState>
		  break;
 8000f4c:	e0ac      	b.n	80010a8 <main+0x210>
	  //Trajectory
	  case 1:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8000f4e:	4b5a      	ldr	r3, [pc, #360]	; (80010b8 <main+0x220>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	4b61      	ldr	r3, [pc, #388]	; (80010dc <main+0x244>)
 8000f58:	801a      	strh	r2, [r3, #0]
		  static uint32_t timestamp0 = 0;
		  if(HAL_GetTick() > timestamp0)
 8000f5a:	f002 fa47 	bl	80033ec <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	4b5f      	ldr	r3, [pc, #380]	; (80010e0 <main+0x248>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d915      	bls.n	8000f94 <main+0xfc>
		  {
			  timestamp0 = HAL_GetTick() + 0.1;
 8000f68:	f002 fa40 	bl	80033ec <HAL_GetTick>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fa74 	bl	800045c <__aeabi_ui2d>
 8000f74:	a34e      	add	r3, pc, #312	; (adr r3, 80010b0 <main+0x218>)
 8000f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7a:	f7ff f933 	bl	80001e4 <__adddf3>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4610      	mov	r0, r2
 8000f84:	4619      	mov	r1, r3
 8000f86:	f7ff fd93 	bl	8000ab0 <__aeabi_d2uiz>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a54      	ldr	r2, [pc, #336]	; (80010e0 <main+0x248>)
 8000f8e:	6013      	str	r3, [r2, #0]
			  VelocityApprox();
 8000f90:	f000 fbf2 	bl	8001778 <VelocityApprox>
		  }

		  static uint32_t timestamp1 = 0;
		  if(HAL_GetTick() > timestamp1)
 8000f94:	f002 fa2a 	bl	80033ec <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	4b52      	ldr	r3, [pc, #328]	; (80010e4 <main+0x24c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d915      	bls.n	8000fce <main+0x136>
		  {
			  timestamp1 = HAL_GetTick() + 0.5;
 8000fa2:	f002 fa23 	bl	80033ec <HAL_GetTick>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fa57 	bl	800045c <__aeabi_ui2d>
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	4b4d      	ldr	r3, [pc, #308]	; (80010e8 <main+0x250>)
 8000fb4:	f7ff f916 	bl	80001e4 <__adddf3>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f7ff fd76 	bl	8000ab0 <__aeabi_d2uiz>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	4a47      	ldr	r2, [pc, #284]	; (80010e4 <main+0x24c>)
 8000fc8:	6013      	str	r3, [r2, #0]
			  TrajectoryGenerator();
 8000fca:	f001 f9f9 	bl	80023c0 <TrajectoryGenerator>
		  }

		  //PWM & Motor drive & PID
		  static uint32_t timestamp2 = 0;
		  if (HAL_GetTick()>= timestamp2)
 8000fce:	f002 fa0d 	bl	80033ec <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	4b45      	ldr	r3, [pc, #276]	; (80010ec <main+0x254>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d349      	bcc.n	8001070 <main+0x1d8>
		  {
			  timestamp2 = HAL_GetTick() + 0.5;
 8000fdc:	f002 fa06 	bl	80033ec <HAL_GetTick>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fa3a 	bl	800045c <__aeabi_ui2d>
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	4b3e      	ldr	r3, [pc, #248]	; (80010e8 <main+0x250>)
 8000fee:	f7ff f8f9 	bl	80001e4 <__adddf3>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fd59 	bl	8000ab0 <__aeabi_d2uiz>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a3a      	ldr	r2, [pc, #232]	; (80010ec <main+0x254>)
 8001002:	6013      	str	r3, [r2, #0]
			  duty = PIDcal();
 8001004:	f000 fbe6 	bl	80017d4 <PIDcal>
 8001008:	eef0 7a40 	vmov.f32	s15, s0
 800100c:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <main+0x258>)
 800100e:	edc3 7a00 	vstr	s15, [r3]
			  if (duty >= 0)
 8001012:	4b37      	ldr	r3, [pc, #220]	; (80010f0 <main+0x258>)
 8001014:	edd3 7a00 	vldr	s15, [r3]
 8001018:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	db0e      	blt.n	8001040 <main+0x1a8>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <main+0x224>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2200      	movs	r2, #0
 8001028:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 800102a:	4b31      	ldr	r3, [pc, #196]	; (80010f0 <main+0x258>)
 800102c:	edd3 7a00 	vldr	s15, [r3]
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <main+0x224>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001038:	ee17 2a90 	vmov	r2, s15
 800103c:	635a      	str	r2, [r3, #52]	; 0x34
 800103e:	e017      	b.n	8001070 <main+0x1d8>
			  }
			  else if (duty < 0)
 8001040:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <main+0x258>)
 8001042:	edd3 7a00 	vldr	s15, [r3]
 8001046:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800104a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104e:	d50f      	bpl.n	8001070 <main+0x1d8>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001050:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <main+0x224>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2200      	movs	r2, #0
 8001056:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <main+0x258>)
 800105a:	edd3 7a00 	vldr	s15, [r3]
 800105e:	eef1 7a67 	vneg.f32	s15, s15
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <main+0x224>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800106a:	ee17 2a90 	vmov	r2, s15
 800106e:	639a      	str	r2, [r3, #56]	; 0x38
			  }
		  }

		  if (ResetButton.flag == 1)
 8001070:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <main+0x25c>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d114      	bne.n	80010a2 <main+0x20a>
		  {
			  ResetButton.flag = 0;
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <main+0x25c>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
			  scheduler = 0;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <main+0x240>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8001084:	e00d      	b.n	80010a2 <main+0x20a>

	  //Proximity
	  case 2:
		  Homing();
 8001086:	f000 fb57 	bl	8001738 <Homing>
		  break;
 800108a:	e00d      	b.n	80010a8 <main+0x210>

	  //Home
	  case 3:
		  if (ResetButton.flag == 1)
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <main+0x25c>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d108      	bne.n	80010a6 <main+0x20e>
		  {
				ResetButton.flag = 0;
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <main+0x25c>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
				scheduler = 0;
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <main+0x240>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
		  }
		  break;
 80010a0:	e001      	b.n	80010a6 <main+0x20e>
		  break;
 80010a2:	bf00      	nop
 80010a4:	e736      	b.n	8000f14 <main+0x7c>
		  break;
 80010a6:	bf00      	nop
	  JoystickPinUpdate(); //Check Pin Flag
 80010a8:	e734      	b.n	8000f14 <main+0x7c>
 80010aa:	bf00      	nop
 80010ac:	f3af 8000 	nop.w
 80010b0:	9999999a 	.word	0x9999999a
 80010b4:	3fb99999 	.word	0x3fb99999
 80010b8:	20000190 	.word	0x20000190
 80010bc:	20000148 	.word	0x20000148
 80010c0:	20000004 	.word	0x20000004
 80010c4:	40020400 	.word	0x40020400
 80010c8:	20000000 	.word	0x20000000
 80010cc:	200001d8 	.word	0x200001d8
 80010d0:	2000040c 	.word	0x2000040c
 80010d4:	200000a0 	.word	0x200000a0
 80010d8:	200002a8 	.word	0x200002a8
 80010dc:	200002f0 	.word	0x200002f0
 80010e0:	20000414 	.word	0x20000414
 80010e4:	20000418 	.word	0x20000418
 80010e8:	3fe00000 	.word	0x3fe00000
 80010ec:	2000041c 	.word	0x2000041c
 80010f0:	200002ac 	.word	0x200002ac
 80010f4:	200003e8 	.word	0x200003e8

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b094      	sub	sp, #80	; 0x50
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	2230      	movs	r2, #48	; 0x30
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f005 fc94 	bl	8006a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <SystemClock_Config+0xcc>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	4a27      	ldr	r2, [pc, #156]	; (80011c4 <SystemClock_Config+0xcc>)
 8001126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112a:	6413      	str	r3, [r2, #64]	; 0x40
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <SystemClock_Config+0xcc>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <SystemClock_Config+0xd0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a21      	ldr	r2, [pc, #132]	; (80011c8 <SystemClock_Config+0xd0>)
 8001142:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <SystemClock_Config+0xd0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001154:	2302      	movs	r3, #2
 8001156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001158:	2301      	movs	r3, #1
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800115c:	2310      	movs	r3, #16
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001160:	2302      	movs	r3, #2
 8001162:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001164:	2300      	movs	r3, #0
 8001166:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001168:	2310      	movs	r3, #16
 800116a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800116c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001170:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001172:	2304      	movs	r3, #4
 8001174:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001176:	2304      	movs	r3, #4
 8001178:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	4618      	mov	r0, r3
 8001180:	f003 fb92 	bl	80048a8 <HAL_RCC_OscConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800118a:	f001 fe33 	bl	8002df4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118e:	230f      	movs	r3, #15
 8001190:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001192:	2302      	movs	r3, #2
 8001194:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2102      	movs	r1, #2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 fdf4 	bl	8004d98 <HAL_RCC_ClockConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011b6:	f001 fe1d 	bl	8002df4 <Error_Handler>
  }
}
 80011ba:	bf00      	nop
 80011bc:	3750      	adds	r7, #80	; 0x50
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40007000 	.word	0x40007000

080011cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011d2:	463b      	mov	r3, r7
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011de:	4b28      	ldr	r3, [pc, #160]	; (8001280 <MX_ADC1_Init+0xb4>)
 80011e0:	4a28      	ldr	r2, [pc, #160]	; (8001284 <MX_ADC1_Init+0xb8>)
 80011e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <MX_ADC1_Init+0xb4>)
 80011e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <MX_ADC1_Init+0xb4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <MX_ADC1_Init+0xb4>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_ADC1_Init+0xb4>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <MX_ADC1_Init+0xb4>)
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <MX_ADC1_Init+0xb4>)
 8001208:	2200      	movs	r2, #0
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_ADC1_Init+0xb4>)
 800120e:	4a1e      	ldr	r2, [pc, #120]	; (8001288 <MX_ADC1_Init+0xbc>)
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <MX_ADC1_Init+0xb4>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_ADC1_Init+0xb4>)
 800121a:	2202      	movs	r2, #2
 800121c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <MX_ADC1_Init+0xb4>)
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_ADC1_Init+0xb4>)
 8001228:	2201      	movs	r2, #1
 800122a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800122c:	4814      	ldr	r0, [pc, #80]	; (8001280 <MX_ADC1_Init+0xb4>)
 800122e:	f002 f8e9 	bl	8003404 <HAL_ADC_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001238:	f001 fddc 	bl	8002df4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800123c:	2300      	movs	r3, #0
 800123e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001244:	2303      	movs	r3, #3
 8001246:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	480c      	ldr	r0, [pc, #48]	; (8001280 <MX_ADC1_Init+0xb4>)
 800124e:	f002 fa2b 	bl	80036a8 <HAL_ADC_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001258:	f001 fdcc 	bl	8002df4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800125c:	2301      	movs	r3, #1
 800125e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001260:	2302      	movs	r3, #2
 8001262:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_ADC1_Init+0xb4>)
 800126a:	f002 fa1d 	bl	80036a8 <HAL_ADC_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001274:	f001 fdbe 	bl	8002df4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200000a0 	.word	0x200000a0
 8001284:	40012000 	.word	0x40012000
 8001288:	0f000001 	.word	0x0f000001

0800128c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b092      	sub	sp, #72	; 0x48
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001292:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	615a      	str	r2, [r3, #20]
 80012ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2220      	movs	r2, #32
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f005 fbbc 	bl	8006a34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012bc:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <MX_TIM1_Init+0x118>)
 80012be:	4a3a      	ldr	r2, [pc, #232]	; (80013a8 <MX_TIM1_Init+0x11c>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80012c2:	4b38      	ldr	r3, [pc, #224]	; (80013a4 <MX_TIM1_Init+0x118>)
 80012c4:	2253      	movs	r2, #83	; 0x53
 80012c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <MX_TIM1_Init+0x118>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80012ce:	4b35      	ldr	r3, [pc, #212]	; (80013a4 <MX_TIM1_Init+0x118>)
 80012d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d6:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <MX_TIM1_Init+0x118>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012dc:	4b31      	ldr	r3, [pc, #196]	; (80013a4 <MX_TIM1_Init+0x118>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e2:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <MX_TIM1_Init+0x118>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012e8:	482e      	ldr	r0, [pc, #184]	; (80013a4 <MX_TIM1_Init+0x118>)
 80012ea:	f004 f81f 	bl	800532c <HAL_TIM_PWM_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80012f4:	f001 fd7e 	bl	8002df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001300:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001304:	4619      	mov	r1, r3
 8001306:	4827      	ldr	r0, [pc, #156]	; (80013a4 <MX_TIM1_Init+0x118>)
 8001308:	f004 ffd4 	bl	80062b4 <HAL_TIMEx_MasterConfigSynchronization>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001312:	f001 fd6f 	bl	8002df4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001316:	2360      	movs	r3, #96	; 0x60
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001322:	2300      	movs	r3, #0
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001336:	2200      	movs	r2, #0
 8001338:	4619      	mov	r1, r3
 800133a:	481a      	ldr	r0, [pc, #104]	; (80013a4 <MX_TIM1_Init+0x118>)
 800133c:	f004 fb32 	bl	80059a4 <HAL_TIM_PWM_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001346:	f001 fd55 	bl	8002df4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	2204      	movs	r2, #4
 8001350:	4619      	mov	r1, r3
 8001352:	4814      	ldr	r0, [pc, #80]	; (80013a4 <MX_TIM1_Init+0x118>)
 8001354:	f004 fb26 	bl	80059a4 <HAL_TIM_PWM_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800135e:	f001 fd49 	bl	8002df4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001376:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4619      	mov	r1, r3
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <MX_TIM1_Init+0x118>)
 8001386:	f005 f803 	bl	8006390 <HAL_TIMEx_ConfigBreakDeadTime>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001390:	f001 fd30 	bl	8002df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001394:	4803      	ldr	r0, [pc, #12]	; (80013a4 <MX_TIM1_Init+0x118>)
 8001396:	f001 fe65 	bl	8003064 <HAL_TIM_MspPostInit>

}
 800139a:	bf00      	nop
 800139c:	3748      	adds	r7, #72	; 0x48
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000148 	.word	0x20000148
 80013a8:	40010000 	.word	0x40010000

080013ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08c      	sub	sp, #48	; 0x30
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	2224      	movs	r2, #36	; 0x24
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f005 fb3a 	bl	8006a34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c8:	4b20      	ldr	r3, [pc, #128]	; (800144c <MX_TIM3_Init+0xa0>)
 80013ca:	4a21      	ldr	r2, [pc, #132]	; (8001450 <MX_TIM3_Init+0xa4>)
 80013cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <MX_TIM3_Init+0xa0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <MX_TIM3_Init+0xa0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD-1;
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_TIM3_Init+0xa0>)
 80013dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_TIM3_Init+0xa0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_TIM3_Init+0xa0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013ee:	2303      	movs	r3, #3
 80013f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013f6:	2301      	movs	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001406:	2301      	movs	r3, #1
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	4619      	mov	r1, r3
 8001418:	480c      	ldr	r0, [pc, #48]	; (800144c <MX_TIM3_Init+0xa0>)
 800141a:	f004 f887 	bl	800552c <HAL_TIM_Encoder_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001424:	f001 fce6 	bl	8002df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_TIM3_Init+0xa0>)
 8001436:	f004 ff3d 	bl	80062b4 <HAL_TIMEx_MasterConfigSynchronization>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001440:	f001 fcd8 	bl	8002df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	3730      	adds	r7, #48	; 0x30
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000190 	.word	0x20000190
 8001450:	40000400 	.word	0x40000400

08001454 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001468:	463b      	mov	r3, r7
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_TIM5_Init+0x94>)
 8001472:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <MX_TIM5_Init+0x98>)
 8001474:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_TIM5_Init+0x94>)
 8001478:	2253      	movs	r2, #83	; 0x53
 800147a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_TIM5_Init+0x94>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <MX_TIM5_Init+0x94>)
 8001484:	f04f 32ff 	mov.w	r2, #4294967295
 8001488:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <MX_TIM5_Init+0x94>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <MX_TIM5_Init+0x94>)
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001496:	4814      	ldr	r0, [pc, #80]	; (80014e8 <MX_TIM5_Init+0x94>)
 8001498:	f003 fe9e 	bl	80051d8 <HAL_TIM_Base_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80014a2:	f001 fca7 	bl	8002df4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	4619      	mov	r1, r3
 80014b2:	480d      	ldr	r0, [pc, #52]	; (80014e8 <MX_TIM5_Init+0x94>)
 80014b4:	f004 fb38 	bl	8005b28 <HAL_TIM_ConfigClockSource>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80014be:	f001 fc99 	bl	8002df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014ca:	463b      	mov	r3, r7
 80014cc:	4619      	mov	r1, r3
 80014ce:	4806      	ldr	r0, [pc, #24]	; (80014e8 <MX_TIM5_Init+0x94>)
 80014d0:	f004 fef0 	bl	80062b4 <HAL_TIMEx_MasterConfigSynchronization>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80014da:	f001 fc8b 	bl	8002df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200001d8 	.word	0x200001d8
 80014ec:	40000c00 	.word	0x40000c00

080014f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_USART1_UART_Init+0x4c>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <MX_USART1_UART_Init+0x50>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <MX_USART1_UART_Init+0x4c>)
 80014fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001500:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_USART1_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_USART1_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <MX_USART1_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_USART1_UART_Init+0x4c>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <MX_USART1_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_USART1_UART_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_USART1_UART_Init+0x4c>)
 8001528:	f004 ff98 	bl	800645c <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001532:	f001 fc5f 	bl	8002df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000220 	.word	0x20000220
 8001540:	40011000 	.word	0x40011000

08001544 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 800154a:	4a12      	ldr	r2, [pc, #72]	; (8001594 <MX_USART2_UART_Init+0x50>)
 800154c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 8001550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001554:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 800156a:	220c      	movs	r2, #12
 800156c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 800157c:	f004 ff6e 	bl	800645c <HAL_UART_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001586:	f001 fc35 	bl	8002df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000264 	.word	0x20000264
 8001594:	40004400 	.word	0x40004400

08001598 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_DMA_Init+0x3c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <MX_DMA_Init+0x3c>)
 80015a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_DMA_Init+0x3c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2038      	movs	r0, #56	; 0x38
 80015c0:	f002 fbfd 	bl	8003dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015c4:	2038      	movs	r0, #56	; 0x38
 80015c6:	f002 fc16 	bl	8003df6 <HAL_NVIC_EnableIRQ>

}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b42      	ldr	r3, [pc, #264]	; (80016fc <MX_GPIO_Init+0x124>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a41      	ldr	r2, [pc, #260]	; (80016fc <MX_GPIO_Init+0x124>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b3f      	ldr	r3, [pc, #252]	; (80016fc <MX_GPIO_Init+0x124>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <MX_GPIO_Init+0x124>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a3a      	ldr	r2, [pc, #232]	; (80016fc <MX_GPIO_Init+0x124>)
 8001614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b38      	ldr	r3, [pc, #224]	; (80016fc <MX_GPIO_Init+0x124>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	4b34      	ldr	r3, [pc, #208]	; (80016fc <MX_GPIO_Init+0x124>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a33      	ldr	r2, [pc, #204]	; (80016fc <MX_GPIO_Init+0x124>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b31      	ldr	r3, [pc, #196]	; (80016fc <MX_GPIO_Init+0x124>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <MX_GPIO_Init+0x124>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a2c      	ldr	r2, [pc, #176]	; (80016fc <MX_GPIO_Init+0x124>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <MX_GPIO_Init+0x124>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001664:	4826      	ldr	r0, [pc, #152]	; (8001700 <MX_GPIO_Init+0x128>)
 8001666:	f003 f8ed 	bl	8004844 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800166a:	230c      	movs	r3, #12
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800166e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	4821      	ldr	r0, [pc, #132]	; (8001704 <MX_GPIO_Init+0x12c>)
 8001680:	f002 ff44 	bl	800450c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
 8001684:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	481b      	ldr	r0, [pc, #108]	; (8001708 <MX_GPIO_Init+0x130>)
 800169a:	f002 ff37 	bl	800450c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 800169e:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80016a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	4812      	ldr	r0, [pc, #72]	; (8001700 <MX_GPIO_Init+0x128>)
 80016b8:	f002 ff28 	bl	800450c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80016bc:	2360      	movs	r3, #96	; 0x60
 80016be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	480c      	ldr	r0, [pc, #48]	; (8001700 <MX_GPIO_Init+0x128>)
 80016d0:	f002 ff1c 	bl	800450c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2100      	movs	r1, #0
 80016d8:	2008      	movs	r0, #8
 80016da:	f002 fb70 	bl	8003dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80016de:	2008      	movs	r0, #8
 80016e0:	f002 fb89 	bl	8003df6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2100      	movs	r1, #0
 80016e8:	2009      	movs	r0, #9
 80016ea:	f002 fb68 	bl	8003dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016ee:	2009      	movs	r0, #9
 80016f0:	f002 fb81 	bl	8003df6 <HAL_NVIC_EnableIRQ>

}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	; 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020400 	.word	0x40020400
 8001704:	40020800 	.word	0x40020800
 8001708:	40020000 	.word	0x40020000

0800170c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2 || GPIO_Pin == GPIO_PIN_3)
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	2b04      	cmp	r3, #4
 800171a:	d002      	beq.n	8001722 <HAL_GPIO_EXTI_Callback+0x16>
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	2b08      	cmp	r3, #8
 8001720:	d102      	bne.n	8001728 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		scheduler = 2;
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <HAL_GPIO_EXTI_Callback+0x28>)
 8001724:	2202      	movs	r2, #2
 8001726:	601a      	str	r2, [r3, #0]
	}
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	200002a8 	.word	0x200002a8

08001738 <Homing>:


void Homing()
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <Homing+0x34>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2200      	movs	r2, #0
 8001742:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <Homing+0x34>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2200      	movs	r2, #0
 800174a:	635a      	str	r2, [r3, #52]	; 0x34

	if (ResetButton.flag == 1)
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <Homing+0x38>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d105      	bne.n	8001760 <Homing+0x28>
	{
		ResetButton.flag = 0;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <Homing+0x38>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
		scheduler = 0;
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <Homing+0x3c>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
	}

}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000148 	.word	0x20000148
 8001770:	200003e8 	.word	0x200003e8
 8001774:	200002a8 	.word	0x200002a8

08001778 <VelocityApprox>:
	QEIData.data[1] = QEIData.data[0];
	QEIData.timestamp[1] = QEIData.timestamp[0];
}

void VelocityApprox()
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	static int16_t lastposition = 0;
	velocity = (position - lastposition)/0.001; //pulse/s
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <VelocityApprox+0x50>)
 800177e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001782:	461a      	mov	r2, r3
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <VelocityApprox+0x54>)
 8001786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fe75 	bl	800047c <__aeabi_i2d>
 8001792:	a30b      	add	r3, pc, #44	; (adr r3, 80017c0 <VelocityApprox+0x48>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7ff f804 	bl	80007a4 <__aeabi_ddiv>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f7ff f9a4 	bl	8000af0 <__aeabi_d2f>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <VelocityApprox+0x58>)
 80017ac:	6013      	str	r3, [r2, #0]
	lastposition = position;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <VelocityApprox+0x50>)
 80017b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <VelocityApprox+0x54>)
 80017b6:	801a      	strh	r2, [r3, #0]
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	f3af 8000 	nop.w
 80017c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80017c4:	3f50624d 	.word	0x3f50624d
 80017c8:	200002f0 	.word	0x200002f0
 80017cc:	20000420 	.word	0x20000420
 80017d0:	2000030c 	.word	0x2000030c

080017d4 <PIDcal>:

float PIDcal()
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
	//position control
	errorposition = setposition - position;
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <PIDcal+0xa8>)
 80017da:	ed93 7a00 	vldr	s14, [r3]
 80017de:	4b28      	ldr	r3, [pc, #160]	; (8001880 <PIDcal+0xac>)
 80017e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e4:	ee07 3a90 	vmov	s15, r3
 80017e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f0:	4b24      	ldr	r3, [pc, #144]	; (8001884 <PIDcal+0xb0>)
 80017f2:	edc3 7a00 	vstr	s15, [r3]

	integral_p = integral_p + errorposition;
 80017f6:	4b24      	ldr	r3, [pc, #144]	; (8001888 <PIDcal+0xb4>)
 80017f8:	ed93 7a00 	vldr	s14, [r3]
 80017fc:	4b21      	ldr	r3, [pc, #132]	; (8001884 <PIDcal+0xb0>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <PIDcal+0xb4>)
 8001808:	edc3 7a00 	vstr	s15, [r3]
	derivative_p = errorposition - pre_errorposition;
 800180c:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <PIDcal+0xb0>)
 800180e:	ed93 7a00 	vldr	s14, [r3]
 8001812:	4b1e      	ldr	r3, [pc, #120]	; (800188c <PIDcal+0xb8>)
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181c:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <PIDcal+0xbc>)
 800181e:	edc3 7a00 	vstr	s15, [r3]
	u_position = Kp_p*errorposition + Ki_p*integral_p + Kd_p*derivative_p;
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <PIDcal+0xc0>)
 8001824:	ed93 7a00 	vldr	s14, [r3]
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <PIDcal+0xb0>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <PIDcal+0xc4>)
 8001834:	edd3 6a00 	vldr	s13, [r3]
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <PIDcal+0xb4>)
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001842:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <PIDcal+0xc8>)
 8001848:	edd3 6a00 	vldr	s13, [r3]
 800184c:	4b10      	ldr	r3, [pc, #64]	; (8001890 <PIDcal+0xbc>)
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <PIDcal+0xcc>)
 800185c:	edc3 7a00 	vstr	s15, [r3]

	pre_errorposition = errorposition;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <PIDcal+0xb0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a09      	ldr	r2, [pc, #36]	; (800188c <PIDcal+0xb8>)
 8001866:	6013      	str	r3, [r2, #0]
//	duty = Kp_v*errorvelocity + Ki_v*integral_v + Kd_v*derivative_v;
//
//	pre_errorvelocity = errorvelocity;

//	return duty;
	return u_position;
 8001868:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <PIDcal+0xcc>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	ee07 3a90 	vmov	s15, r3
}
 8001870:	eeb0 0a67 	vmov.f32	s0, s15
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	200002f4 	.word	0x200002f4
 8001880:	200002f0 	.word	0x200002f0
 8001884:	200002f8 	.word	0x200002f8
 8001888:	20000304 	.word	0x20000304
 800188c:	20000300 	.word	0x20000300
 8001890:	20000308 	.word	0x20000308
 8001894:	20000010 	.word	0x20000010
 8001898:	20000318 	.word	0x20000318
 800189c:	2000031c 	.word	0x2000031c
 80018a0:	200002fc 	.word	0x200002fc

080018a4 <JoystickPinUpdate>:

void JoystickPinUpdate()
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	  GetPositionButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 80018a8:	2140      	movs	r1, #64	; 0x40
 80018aa:	4837      	ldr	r0, [pc, #220]	; (8001988 <JoystickPinUpdate+0xe4>)
 80018ac:	f002 ffb2 	bl	8004814 <HAL_GPIO_ReadPin>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b35      	ldr	r3, [pc, #212]	; (800198c <JoystickPinUpdate+0xe8>)
 80018b6:	605a      	str	r2, [r3, #4]
	  if (GetPositionButton.last == 1 && GetPositionButton.current == 0)
 80018b8:	4b34      	ldr	r3, [pc, #208]	; (800198c <JoystickPinUpdate+0xe8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d107      	bne.n	80018d0 <JoystickPinUpdate+0x2c>
 80018c0:	4b32      	ldr	r3, [pc, #200]	; (800198c <JoystickPinUpdate+0xe8>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d103      	bne.n	80018d0 <JoystickPinUpdate+0x2c>
	  {
		  GetPositionButton.flag = 1;
 80018c8:	4b30      	ldr	r3, [pc, #192]	; (800198c <JoystickPinUpdate+0xe8>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	e002      	b.n	80018d6 <JoystickPinUpdate+0x32>
	  }
	  else
	  {
		  GetPositionButton.flag = 0;
 80018d0:	4b2e      	ldr	r3, [pc, #184]	; (800198c <JoystickPinUpdate+0xe8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
	  }
	  GetPositionButton.last = GetPositionButton.current;
 80018d6:	4b2d      	ldr	r3, [pc, #180]	; (800198c <JoystickPinUpdate+0xe8>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4a2c      	ldr	r2, [pc, #176]	; (800198c <JoystickPinUpdate+0xe8>)
 80018dc:	6013      	str	r3, [r2, #0]

	  ResetButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80018de:	2120      	movs	r1, #32
 80018e0:	482b      	ldr	r0, [pc, #172]	; (8001990 <JoystickPinUpdate+0xec>)
 80018e2:	f002 ff97 	bl	8004814 <HAL_GPIO_ReadPin>
 80018e6:	4603      	mov	r3, r0
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <JoystickPinUpdate+0xf0>)
 80018ec:	605a      	str	r2, [r3, #4]
	  if (ResetButton.last == 1 && ResetButton.current == 0)
 80018ee:	4b29      	ldr	r3, [pc, #164]	; (8001994 <JoystickPinUpdate+0xf0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d107      	bne.n	8001906 <JoystickPinUpdate+0x62>
 80018f6:	4b27      	ldr	r3, [pc, #156]	; (8001994 <JoystickPinUpdate+0xf0>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d103      	bne.n	8001906 <JoystickPinUpdate+0x62>
	  {
		ResetButton.flag = 1;
 80018fe:	4b25      	ldr	r3, [pc, #148]	; (8001994 <JoystickPinUpdate+0xf0>)
 8001900:	2201      	movs	r2, #1
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	e002      	b.n	800190c <JoystickPinUpdate+0x68>
	  }
	  else
	  {
		  ResetButton.flag = 0;
 8001906:	4b23      	ldr	r3, [pc, #140]	; (8001994 <JoystickPinUpdate+0xf0>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
	  }
	  ResetButton.last = ResetButton.current;
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <JoystickPinUpdate+0xf0>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	4a20      	ldr	r2, [pc, #128]	; (8001994 <JoystickPinUpdate+0xf0>)
 8001912:	6013      	str	r3, [r2, #0]

	  FineButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001914:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001918:	481d      	ldr	r0, [pc, #116]	; (8001990 <JoystickPinUpdate+0xec>)
 800191a:	f002 ff7b 	bl	8004814 <HAL_GPIO_ReadPin>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <JoystickPinUpdate+0xf4>)
 8001924:	605a      	str	r2, [r3, #4]
	  if (FineButton.last == 1 && FineButton.current == 0)
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <JoystickPinUpdate+0xf4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d107      	bne.n	800193e <JoystickPinUpdate+0x9a>
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <JoystickPinUpdate+0xf4>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <JoystickPinUpdate+0x9a>
	  {
		  FineButton.flag = 1;
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <JoystickPinUpdate+0xf4>)
 8001938:	2201      	movs	r2, #1
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	e002      	b.n	8001944 <JoystickPinUpdate+0xa0>
	  }
	  else
	  {
		  FineButton.flag = 0;
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <JoystickPinUpdate+0xf4>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
	  }
	  FineButton.last = FineButton.current;
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <JoystickPinUpdate+0xf4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a13      	ldr	r2, [pc, #76]	; (8001998 <JoystickPinUpdate+0xf4>)
 800194a:	6013      	str	r3, [r2, #0]

	  RoughButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 800194c:	2120      	movs	r1, #32
 800194e:	480e      	ldr	r0, [pc, #56]	; (8001988 <JoystickPinUpdate+0xe4>)
 8001950:	f002 ff60 	bl	8004814 <HAL_GPIO_ReadPin>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	4b10      	ldr	r3, [pc, #64]	; (800199c <JoystickPinUpdate+0xf8>)
 800195a:	605a      	str	r2, [r3, #4]
	  if (RoughButton.last == 1 && RoughButton.current == 0)
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <JoystickPinUpdate+0xf8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d107      	bne.n	8001974 <JoystickPinUpdate+0xd0>
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <JoystickPinUpdate+0xf8>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d103      	bne.n	8001974 <JoystickPinUpdate+0xd0>
	  {
		  RoughButton.flag = 1;
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <JoystickPinUpdate+0xf8>)
 800196e:	2201      	movs	r2, #1
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	e002      	b.n	800197a <JoystickPinUpdate+0xd6>
	  }
	  else
	  {
		  RoughButton.flag = 0;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <JoystickPinUpdate+0xf8>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
	  }
	  RoughButton.last = RoughButton.current;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <JoystickPinUpdate+0xf8>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4a07      	ldr	r2, [pc, #28]	; (800199c <JoystickPinUpdate+0xf8>)
 8001980:	6013      	str	r3, [r2, #0]
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40020400 	.word	0x40020400
 800198c:	200003dc 	.word	0x200003dc
 8001990:	40020000 	.word	0x40020000
 8001994:	200003e8 	.word	0x200003e8
 8001998:	200003f4 	.word	0x200003f4
 800199c:	20000400 	.word	0x20000400

080019a0 <JoystickControl>:

void JoystickControl()
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
	static int JoySpeed = 0;

	if(RoughButton.flag == 1)
 80019a4:	4b37      	ldr	r3, [pc, #220]	; (8001a84 <JoystickControl+0xe4>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d106      	bne.n	80019ba <JoystickControl+0x1a>
	{
		JoySpeed = 0;
 80019ac:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <JoystickControl+0xe8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
		RoughButton.flag = 0;
 80019b2:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <JoystickControl+0xe4>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	e009      	b.n	80019ce <JoystickControl+0x2e>
	}
	else if(FineButton.flag == 1)
 80019ba:	4b34      	ldr	r3, [pc, #208]	; (8001a8c <JoystickControl+0xec>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d105      	bne.n	80019ce <JoystickControl+0x2e>
	{
		JoySpeed = 1;
 80019c2:	4b31      	ldr	r3, [pc, #196]	; (8001a88 <JoystickControl+0xe8>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
		FineButton.flag = 0;
 80019c8:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <JoystickControl+0xec>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
	}

	switch(JoySpeed)
 80019ce:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <JoystickControl+0xe8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <JoystickControl+0x3c>
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d028      	beq.n	8001a2c <JoystickControl+0x8c>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
		}
		break;
	}
}
 80019da:	e04d      	b.n	8001a78 <JoystickControl+0xd8>
		if(XYSwitch[1] > 2150)
 80019dc:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <JoystickControl+0xf0>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f640 0266 	movw	r2, #2150	; 0x866
 80019e4:	4293      	cmp	r3, r2
 80019e6:	dd09      	ble.n	80019fc <JoystickControl+0x5c>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80019e8:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <JoystickControl+0xf4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2200      	movs	r2, #0
 80019ee:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,400);
 80019f0:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <JoystickControl+0xf4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80019f8:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80019fa:	e03d      	b.n	8001a78 <JoystickControl+0xd8>
		else if(XYSwitch[1] < 2000)
 80019fc:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <JoystickControl+0xf0>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a04:	da09      	bge.n	8001a1a <JoystickControl+0x7a>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,400);
 8001a06:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <JoystickControl+0xf4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001a0e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001a10:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <JoystickControl+0xf4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2200      	movs	r2, #0
 8001a16:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001a18:	e02e      	b.n	8001a78 <JoystickControl+0xd8>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <JoystickControl+0xf4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001a22:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <JoystickControl+0xf4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2200      	movs	r2, #0
 8001a28:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001a2a:	e025      	b.n	8001a78 <JoystickControl+0xd8>
		if(XYSwitch[1] > 2150)
 8001a2c:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <JoystickControl+0xf0>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f640 0266 	movw	r2, #2150	; 0x866
 8001a34:	4293      	cmp	r3, r2
 8001a36:	dd08      	ble.n	8001a4a <JoystickControl+0xaa>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <JoystickControl+0xf4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,200);
 8001a40:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <JoystickControl+0xf4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	22c8      	movs	r2, #200	; 0xc8
 8001a46:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001a48:	e015      	b.n	8001a76 <JoystickControl+0xd6>
		else if(XYSwitch[1] < 2000)
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <JoystickControl+0xf0>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a52:	da08      	bge.n	8001a66 <JoystickControl+0xc6>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,200);
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <JoystickControl+0xf4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	22c8      	movs	r2, #200	; 0xc8
 8001a5a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <JoystickControl+0xf4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2200      	movs	r2, #0
 8001a62:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001a64:	e007      	b.n	8001a76 <JoystickControl+0xd6>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <JoystickControl+0xf4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <JoystickControl+0xf4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2200      	movs	r2, #0
 8001a74:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001a76:	bf00      	nop
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000400 	.word	0x20000400
 8001a88:	20000424 	.word	0x20000424
 8001a8c:	200003f4 	.word	0x200003f4
 8001a90:	2000040c 	.word	0x2000040c
 8001a94:	20000148 	.word	0x20000148

08001a98 <JoystickLocationState>:

void JoystickLocationState()
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	ed2d 8b02 	vpush	{d8}
 8001a9e:	af00      	add	r7, sp, #0
	switch(state)
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <JoystickLocationState+0x7c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	f200 8471 	bhi.w	800238c <JoystickLocationState+0x8f4>
 8001aaa:	a201      	add	r2, pc, #4	; (adr r2, 8001ab0 <JoystickLocationState+0x18>)
 8001aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab0:	08001ac5 	.word	0x08001ac5
 8001ab4:	08001b29 	.word	0x08001b29
 8001ab8:	08001f0b 	.word	0x08001f0b
 8001abc:	08001f79 	.word	0x08001f79
 8001ac0:	08002359 	.word	0x08002359
	{
	case 0:
		PickTray.L1[1] = 0;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <JoystickLocationState+0x80>)
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	605a      	str	r2, [r3, #4]
		PickTray.L2[1] = 0;
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <JoystickLocationState+0x80>)
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	60da      	str	r2, [r3, #12]
		PlaceTray.L1[1] = 0;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <JoystickLocationState+0x84>)
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	605a      	str	r2, [r3, #4]
		PlaceTray.L2[1] = 0;
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <JoystickLocationState+0x84>)
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <JoystickLocationState+0x88>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	f040 8446 	bne.w	800237a <JoystickLocationState+0x8e2>
		{
			PickTray.L1[1] = position;
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <JoystickLocationState+0x8c>)
 8001af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <JoystickLocationState+0x80>)
 8001afe:	edc3 7a01 	vstr	s15, [r3, #4]
			GetPositionButton.flag = 0;
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <JoystickLocationState+0x88>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
			state = 1;
 8001b08:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <JoystickLocationState+0x7c>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
		}
		break;
 8001b0e:	f000 bc34 	b.w	800237a <JoystickLocationState+0x8e2>
 8001b12:	bf00      	nop
 8001b14:	20000320 	.word	0x20000320
 8001b18:	20000324 	.word	0x20000324
 8001b1c:	2000037c 	.word	0x2000037c
 8001b20:	200003dc 	.word	0x200003dc
 8001b24:	200002f0 	.word	0x200002f0
	case 1:
		if (GetPositionButton.flag == 1)
 8001b28:	4bd6      	ldr	r3, [pc, #856]	; (8001e84 <JoystickLocationState+0x3ec>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	f040 81e0 	bne.w	8001ef2 <JoystickLocationState+0x45a>
		{
			PickTray.L2[1] = position;
 8001b32:	4bd5      	ldr	r3, [pc, #852]	; (8001e88 <JoystickLocationState+0x3f0>)
 8001b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b38:	ee07 3a90 	vmov	s15, r3
 8001b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b40:	4bd2      	ldr	r3, [pc, #840]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001b42:	edc3 7a03 	vstr	s15, [r3, #12]
			GetPositionButton.flag = 0;
 8001b46:	4bcf      	ldr	r3, [pc, #828]	; (8001e84 <JoystickLocationState+0x3ec>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
			cos_Theta = PickTray.L2[0]/(sqrtf(((PickTray.L2[0]-PickTray.L1[0])*(PickTray.L2[0]-PickTray.L1[0]))+((PickTray.L2[1]-PickTray.L1[1])*(PickTray.L2[1]-PickTray.L1[1]))));
 8001b4c:	4bcf      	ldr	r3, [pc, #828]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001b4e:	ed93 8a02 	vldr	s16, [r3, #8]
 8001b52:	4bce      	ldr	r3, [pc, #824]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001b54:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b58:	4bcc      	ldr	r3, [pc, #816]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b62:	4bca      	ldr	r3, [pc, #808]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001b64:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b68:	4bc8      	ldr	r3, [pc, #800]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b76:	4bc5      	ldr	r3, [pc, #788]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001b78:	edd3 6a03 	vldr	s13, [r3, #12]
 8001b7c:	4bc3      	ldr	r3, [pc, #780]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001b7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b82:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b86:	4bc1      	ldr	r3, [pc, #772]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001b88:	ed93 6a03 	vldr	s12, [r3, #12]
 8001b8c:	4bbf      	ldr	r3, [pc, #764]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001b8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b92:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba2:	f004 ff7b 	bl	8006a9c <sqrtf>
 8001ba6:	eeb0 7a40 	vmov.f32	s14, s0
 8001baa:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001bae:	4bb8      	ldr	r3, [pc, #736]	; (8001e90 <JoystickLocationState+0x3f8>)
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = PickTray.L2[1]/(sqrtf(((PickTray.L2[0]-PickTray.L1[0])*(PickTray.L2[0]-PickTray.L1[0]))+((PickTray.L2[1]-PickTray.L1[1])*(PickTray.L2[1]-PickTray.L1[1]))));
 8001bb4:	4bb5      	ldr	r3, [pc, #724]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001bb6:	ed93 8a03 	vldr	s16, [r3, #12]
 8001bba:	4bb4      	ldr	r3, [pc, #720]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001bbc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bc0:	4bb2      	ldr	r3, [pc, #712]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001bc2:	edd3 7a00 	vldr	s15, [r3]
 8001bc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bca:	4bb0      	ldr	r3, [pc, #704]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001bcc:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bd0:	4bae      	ldr	r3, [pc, #696]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001bda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bde:	4bab      	ldr	r3, [pc, #684]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001be0:	edd3 6a03 	vldr	s13, [r3, #12]
 8001be4:	4ba9      	ldr	r3, [pc, #676]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001be6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bee:	4ba7      	ldr	r3, [pc, #668]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001bf0:	ed93 6a03 	vldr	s12, [r3, #12]
 8001bf4:	4ba5      	ldr	r3, [pc, #660]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001bf6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bfa:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c06:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0a:	f004 ff47 	bl	8006a9c <sqrtf>
 8001c0e:	eeb0 7a40 	vmov.f32	s14, s0
 8001c12:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001c16:	4b9f      	ldr	r3, [pc, #636]	; (8001e94 <JoystickLocationState+0x3fc>)
 8001c18:	edc3 7a00 	vstr	s15, [r3]

			PickTray.hole_1[0] = (cos_Theta*10)+(-sin_Theta*-10);
 8001c1c:	4b9c      	ldr	r3, [pc, #624]	; (8001e90 <JoystickLocationState+0x3f8>)
 8001c1e:	edd3 7a00 	vldr	s15, [r3]
 8001c22:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c2a:	4b9a      	ldr	r3, [pc, #616]	; (8001e94 <JoystickLocationState+0x3fc>)
 8001c2c:	edd3 7a00 	vldr	s15, [r3]
 8001c30:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c3c:	4b93      	ldr	r3, [pc, #588]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001c3e:	edc3 7a04 	vstr	s15, [r3, #16]
			PickTray.hole_1[1] = (sin_Theta*10)+(cos_Theta*-10);
 8001c42:	4b94      	ldr	r3, [pc, #592]	; (8001e94 <JoystickLocationState+0x3fc>)
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c50:	4b8f      	ldr	r3, [pc, #572]	; (8001e90 <JoystickLocationState+0x3f8>)
 8001c52:	edd3 7a00 	vldr	s15, [r3]
 8001c56:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8001c5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c62:	4b8a      	ldr	r3, [pc, #552]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001c64:	edc3 7a05 	vstr	s15, [r3, #20]

			PickTray.hole_2[0] = (cos_Theta*30)+(-sin_Theta*-10);
 8001c68:	4b89      	ldr	r3, [pc, #548]	; (8001e90 <JoystickLocationState+0x3f8>)
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001c72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c76:	4b87      	ldr	r3, [pc, #540]	; (8001e94 <JoystickLocationState+0x3fc>)
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c88:	4b80      	ldr	r3, [pc, #512]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001c8a:	edc3 7a06 	vstr	s15, [r3, #24]
			PickTray.hole_2[1] = (sin_Theta*30)+(cos_Theta*-10);
 8001c8e:	4b81      	ldr	r3, [pc, #516]	; (8001e94 <JoystickLocationState+0x3fc>)
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001c98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c9c:	4b7c      	ldr	r3, [pc, #496]	; (8001e90 <JoystickLocationState+0x3f8>)
 8001c9e:	edd3 7a00 	vldr	s15, [r3]
 8001ca2:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8001ca6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cae:	4b77      	ldr	r3, [pc, #476]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001cb0:	edc3 7a07 	vstr	s15, [r3, #28]

			PickTray.hole_3[0] = (cos_Theta*50)+(-sin_Theta*-10);
 8001cb4:	4b76      	ldr	r3, [pc, #472]	; (8001e90 <JoystickLocationState+0x3f8>)
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001ea0 <JoystickLocationState+0x408>
 8001cbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cc2:	4b74      	ldr	r3, [pc, #464]	; (8001e94 <JoystickLocationState+0x3fc>)
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001ccc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd4:	4b6d      	ldr	r3, [pc, #436]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001cd6:	edc3 7a08 	vstr	s15, [r3, #32]
			PickTray.hole_3[1] = (sin_Theta*50)+(cos_Theta*-10);
 8001cda:	4b6e      	ldr	r3, [pc, #440]	; (8001e94 <JoystickLocationState+0x3fc>)
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001ea0 <JoystickLocationState+0x408>
 8001ce4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ce8:	4b69      	ldr	r3, [pc, #420]	; (8001e90 <JoystickLocationState+0x3f8>)
 8001cea:	edd3 7a00 	vldr	s15, [r3]
 8001cee:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8001cf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfa:	4b64      	ldr	r3, [pc, #400]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001cfc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

			PickTray.hole_4[0] = (cos_Theta*10)+(-sin_Theta*-25);
 8001d00:	4b63      	ldr	r3, [pc, #396]	; (8001e90 <JoystickLocationState+0x3f8>)
 8001d02:	edd3 7a00 	vldr	s15, [r3]
 8001d06:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d0e:	4b61      	ldr	r3, [pc, #388]	; (8001e94 <JoystickLocationState+0x3fc>)
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001d18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d20:	4b5a      	ldr	r3, [pc, #360]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001d22:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PickTray.hole_4[1] = (sin_Theta*10)+(cos_Theta*-25);
 8001d26:	4b5b      	ldr	r3, [pc, #364]	; (8001e94 <JoystickLocationState+0x3fc>)
 8001d28:	edd3 7a00 	vldr	s15, [r3]
 8001d2c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d34:	4b56      	ldr	r3, [pc, #344]	; (8001e90 <JoystickLocationState+0x3f8>)
 8001d36:	edd3 7a00 	vldr	s15, [r3]
 8001d3a:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8001d3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d46:	4b51      	ldr	r3, [pc, #324]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001d48:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

			PickTray.hole_5[0] = (cos_Theta*30)+(-sin_Theta*-25);
 8001d4c:	4b50      	ldr	r3, [pc, #320]	; (8001e90 <JoystickLocationState+0x3f8>)
 8001d4e:	edd3 7a00 	vldr	s15, [r3]
 8001d52:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001d56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d5a:	4b4e      	ldr	r3, [pc, #312]	; (8001e94 <JoystickLocationState+0x3fc>)
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001d64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6c:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001d6e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PickTray.hole_5[1] = (sin_Theta*30)+(cos_Theta*-25);
 8001d72:	4b48      	ldr	r3, [pc, #288]	; (8001e94 <JoystickLocationState+0x3fc>)
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001d7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d80:	4b43      	ldr	r3, [pc, #268]	; (8001e90 <JoystickLocationState+0x3f8>)
 8001d82:	edd3 7a00 	vldr	s15, [r3]
 8001d86:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8001d8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d92:	4b3e      	ldr	r3, [pc, #248]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001d94:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PickTray.hole_6[0] = (cos_Theta*50)+(-sin_Theta*-25);
 8001d98:	4b3d      	ldr	r3, [pc, #244]	; (8001e90 <JoystickLocationState+0x3f8>)
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001ea0 <JoystickLocationState+0x408>
 8001da2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001da6:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <JoystickLocationState+0x3fc>)
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001db0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db8:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001dba:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			PickTray.hole_6[1] = (sin_Theta*50)+(cos_Theta*-25);
 8001dbe:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <JoystickLocationState+0x3fc>)
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001ea0 <JoystickLocationState+0x408>
 8001dc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dcc:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <JoystickLocationState+0x3f8>)
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8001dd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dde:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001de0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PickTray.hole_7[0] = (cos_Theta*10)+(-sin_Theta*-40);
 8001de4:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <JoystickLocationState+0x3f8>)
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001df2:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <JoystickLocationState+0x3fc>)
 8001df4:	edd3 7a00 	vldr	s15, [r3]
 8001df8:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001e98 <JoystickLocationState+0x400>
 8001dfc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e04:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001e06:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			PickTray.hole_7[1] = (sin_Theta*10)+(cos_Theta*-40);
 8001e0a:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <JoystickLocationState+0x3fc>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e18:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <JoystickLocationState+0x3f8>)
 8001e1a:	edd3 7a00 	vldr	s15, [r3]
 8001e1e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001e9c <JoystickLocationState+0x404>
 8001e22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001e2c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PickTray.hole_8[0] = (cos_Theta*30)+(-sin_Theta*-40);
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <JoystickLocationState+0x3f8>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001e3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <JoystickLocationState+0x3fc>)
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001e98 <JoystickLocationState+0x400>
 8001e48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e50:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001e52:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			PickTray.hole_8[1] = (sin_Theta*30)+(cos_Theta*-40);
 8001e56:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <JoystickLocationState+0x3fc>)
 8001e58:	edd3 7a00 	vldr	s15, [r3]
 8001e5c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001e60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <JoystickLocationState+0x3f8>)
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001e9c <JoystickLocationState+0x404>
 8001e6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <JoystickLocationState+0x3f4>)
 8001e78:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PickTray.hole_9[0] = (cos_Theta*50)+(-sin_Theta*-40);
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <JoystickLocationState+0x3f8>)
 8001e7e:	edd3 7a00 	vldr	s15, [r3]
 8001e82:	e00f      	b.n	8001ea4 <JoystickLocationState+0x40c>
 8001e84:	200003dc 	.word	0x200003dc
 8001e88:	200002f0 	.word	0x200002f0
 8001e8c:	20000324 	.word	0x20000324
 8001e90:	200003d4 	.word	0x200003d4
 8001e94:	200003d8 	.word	0x200003d8
 8001e98:	42200000 	.word	0x42200000
 8001e9c:	c2200000 	.word	0xc2200000
 8001ea0:	42480000 	.word	0x42480000
 8001ea4:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8001ea0 <JoystickLocationState+0x408>
 8001ea8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001eac:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <JoystickLocationState+0x4b4>)
 8001eae:	edd3 7a00 	vldr	s15, [r3]
 8001eb2:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001f50 <JoystickLocationState+0x4b8>
 8001eb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ebe:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <JoystickLocationState+0x4bc>)
 8001ec0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			PickTray.hole_9[1] = (sin_Theta*50)+(cos_Theta*-40);
 8001ec4:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <JoystickLocationState+0x4b4>)
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001f58 <JoystickLocationState+0x4c0>
 8001ece:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ed2:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <JoystickLocationState+0x4c4>)
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001f60 <JoystickLocationState+0x4c8>
 8001edc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <JoystickLocationState+0x4bc>)
 8001ee6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			state = 2;
 8001eea:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <JoystickLocationState+0x4cc>)
 8001eec:	2202      	movs	r2, #2
 8001eee:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 0;
		}
		break;
 8001ef0:	e245      	b.n	800237e <JoystickLocationState+0x8e6>
		else if (ResetButton.flag == 1)
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <JoystickLocationState+0x4d0>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	f040 8241 	bne.w	800237e <JoystickLocationState+0x8e6>
			ResetButton.flag = 0;
 8001efc:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <JoystickLocationState+0x4d0>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
			state = 0;
 8001f02:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <JoystickLocationState+0x4cc>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
		break;
 8001f08:	e239      	b.n	800237e <JoystickLocationState+0x8e6>
	case 2:
		if (GetPositionButton.flag == 1)
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <JoystickLocationState+0x4d4>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d110      	bne.n	8001f34 <JoystickLocationState+0x49c>
		{
			PlaceTray.L1[1] = position;
 8001f12:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <JoystickLocationState+0x4d8>)
 8001f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f18:	ee07 3a90 	vmov	s15, r3
 8001f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <JoystickLocationState+0x4dc>)
 8001f22:	edc3 7a01 	vstr	s15, [r3, #4]
			GetPositionButton.flag = 0;
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <JoystickLocationState+0x4d4>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
			state = 3;
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <JoystickLocationState+0x4cc>)
 8001f2e:	2203      	movs	r2, #3
 8001f30:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 0;
		}
		break;
 8001f32:	e226      	b.n	8002382 <JoystickLocationState+0x8ea>
		else if (ResetButton.flag == 1)
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <JoystickLocationState+0x4d0>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	f040 8222 	bne.w	8002382 <JoystickLocationState+0x8ea>
			ResetButton.flag = 0;
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <JoystickLocationState+0x4d0>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
			state = 0;
 8001f44:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <JoystickLocationState+0x4cc>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
		break;
 8001f4a:	e21a      	b.n	8002382 <JoystickLocationState+0x8ea>
 8001f4c:	200003d8 	.word	0x200003d8
 8001f50:	42200000 	.word	0x42200000
 8001f54:	20000324 	.word	0x20000324
 8001f58:	42480000 	.word	0x42480000
 8001f5c:	200003d4 	.word	0x200003d4
 8001f60:	c2200000 	.word	0xc2200000
 8001f64:	20000320 	.word	0x20000320
 8001f68:	200003e8 	.word	0x200003e8
 8001f6c:	200003dc 	.word	0x200003dc
 8001f70:	200002f0 	.word	0x200002f0
 8001f74:	2000037c 	.word	0x2000037c
	case 3:
		if (GetPositionButton.flag == 1)
 8001f78:	4bd6      	ldr	r3, [pc, #856]	; (80022d4 <JoystickLocationState+0x83c>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	f040 81e0 	bne.w	8002342 <JoystickLocationState+0x8aa>
		{
			PlaceTray.L2[1] = position;
 8001f82:	4bd5      	ldr	r3, [pc, #852]	; (80022d8 <JoystickLocationState+0x840>)
 8001f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f90:	4bd2      	ldr	r3, [pc, #840]	; (80022dc <JoystickLocationState+0x844>)
 8001f92:	edc3 7a03 	vstr	s15, [r3, #12]
			GetPositionButton.flag = 0;
 8001f96:	4bcf      	ldr	r3, [pc, #828]	; (80022d4 <JoystickLocationState+0x83c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
			cos_Theta = PlaceTray.L2[0]/(sqrtf(((PlaceTray.L2[0]-PlaceTray.L1[0])*(PlaceTray.L2[0]-PlaceTray.L1[0]))+((PlaceTray.L2[1]-PlaceTray.L1[1])*(PlaceTray.L2[1]-PlaceTray.L1[1]))));
 8001f9c:	4bcf      	ldr	r3, [pc, #828]	; (80022dc <JoystickLocationState+0x844>)
 8001f9e:	ed93 8a02 	vldr	s16, [r3, #8]
 8001fa2:	4bce      	ldr	r3, [pc, #824]	; (80022dc <JoystickLocationState+0x844>)
 8001fa4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fa8:	4bcc      	ldr	r3, [pc, #816]	; (80022dc <JoystickLocationState+0x844>)
 8001faa:	edd3 7a00 	vldr	s15, [r3]
 8001fae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fb2:	4bca      	ldr	r3, [pc, #808]	; (80022dc <JoystickLocationState+0x844>)
 8001fb4:	edd3 6a02 	vldr	s13, [r3, #8]
 8001fb8:	4bc8      	ldr	r3, [pc, #800]	; (80022dc <JoystickLocationState+0x844>)
 8001fba:	edd3 7a00 	vldr	s15, [r3]
 8001fbe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc6:	4bc5      	ldr	r3, [pc, #788]	; (80022dc <JoystickLocationState+0x844>)
 8001fc8:	edd3 6a03 	vldr	s13, [r3, #12]
 8001fcc:	4bc3      	ldr	r3, [pc, #780]	; (80022dc <JoystickLocationState+0x844>)
 8001fce:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fd2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001fd6:	4bc1      	ldr	r3, [pc, #772]	; (80022dc <JoystickLocationState+0x844>)
 8001fd8:	ed93 6a03 	vldr	s12, [r3, #12]
 8001fdc:	4bbf      	ldr	r3, [pc, #764]	; (80022dc <JoystickLocationState+0x844>)
 8001fde:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fe2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001fe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff2:	f004 fd53 	bl	8006a9c <sqrtf>
 8001ff6:	eeb0 7a40 	vmov.f32	s14, s0
 8001ffa:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001ffe:	4bb8      	ldr	r3, [pc, #736]	; (80022e0 <JoystickLocationState+0x848>)
 8002000:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = PlaceTray.L2[1]/(sqrtf(((PlaceTray.L2[0]-PlaceTray.L1[0])*(PlaceTray.L2[0]-PlaceTray.L1[0]))+((PlaceTray.L2[1]-PlaceTray.L1[1])*(PlaceTray.L2[1]-PlaceTray.L1[1]))));
 8002004:	4bb5      	ldr	r3, [pc, #724]	; (80022dc <JoystickLocationState+0x844>)
 8002006:	ed93 8a03 	vldr	s16, [r3, #12]
 800200a:	4bb4      	ldr	r3, [pc, #720]	; (80022dc <JoystickLocationState+0x844>)
 800200c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002010:	4bb2      	ldr	r3, [pc, #712]	; (80022dc <JoystickLocationState+0x844>)
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	ee37 7a67 	vsub.f32	s14, s14, s15
 800201a:	4bb0      	ldr	r3, [pc, #704]	; (80022dc <JoystickLocationState+0x844>)
 800201c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002020:	4bae      	ldr	r3, [pc, #696]	; (80022dc <JoystickLocationState+0x844>)
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800202a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800202e:	4bab      	ldr	r3, [pc, #684]	; (80022dc <JoystickLocationState+0x844>)
 8002030:	edd3 6a03 	vldr	s13, [r3, #12]
 8002034:	4ba9      	ldr	r3, [pc, #676]	; (80022dc <JoystickLocationState+0x844>)
 8002036:	edd3 7a01 	vldr	s15, [r3, #4]
 800203a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800203e:	4ba7      	ldr	r3, [pc, #668]	; (80022dc <JoystickLocationState+0x844>)
 8002040:	ed93 6a03 	vldr	s12, [r3, #12]
 8002044:	4ba5      	ldr	r3, [pc, #660]	; (80022dc <JoystickLocationState+0x844>)
 8002046:	edd3 7a01 	vldr	s15, [r3, #4]
 800204a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800204e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002056:	eeb0 0a67 	vmov.f32	s0, s15
 800205a:	f004 fd1f 	bl	8006a9c <sqrtf>
 800205e:	eeb0 7a40 	vmov.f32	s14, s0
 8002062:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002066:	4b9f      	ldr	r3, [pc, #636]	; (80022e4 <JoystickLocationState+0x84c>)
 8002068:	edc3 7a00 	vstr	s15, [r3]

			PlaceTray.hole_1[0] = (cos_Theta*10)+(-sin_Theta*-10);
 800206c:	4b9c      	ldr	r3, [pc, #624]	; (80022e0 <JoystickLocationState+0x848>)
 800206e:	edd3 7a00 	vldr	s15, [r3]
 8002072:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002076:	ee27 7a87 	vmul.f32	s14, s15, s14
 800207a:	4b9a      	ldr	r3, [pc, #616]	; (80022e4 <JoystickLocationState+0x84c>)
 800207c:	edd3 7a00 	vldr	s15, [r3]
 8002080:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002084:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800208c:	4b93      	ldr	r3, [pc, #588]	; (80022dc <JoystickLocationState+0x844>)
 800208e:	edc3 7a04 	vstr	s15, [r3, #16]
			PlaceTray.hole_1[1] = (sin_Theta*10)+(cos_Theta*-10);
 8002092:	4b94      	ldr	r3, [pc, #592]	; (80022e4 <JoystickLocationState+0x84c>)
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800209c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020a0:	4b8f      	ldr	r3, [pc, #572]	; (80022e0 <JoystickLocationState+0x848>)
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80020aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b2:	4b8a      	ldr	r3, [pc, #552]	; (80022dc <JoystickLocationState+0x844>)
 80020b4:	edc3 7a05 	vstr	s15, [r3, #20]

			PlaceTray.hole_2[0] = (cos_Theta*30)+(-sin_Theta*-10);
 80020b8:	4b89      	ldr	r3, [pc, #548]	; (80022e0 <JoystickLocationState+0x848>)
 80020ba:	edd3 7a00 	vldr	s15, [r3]
 80020be:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80020c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020c6:	4b87      	ldr	r3, [pc, #540]	; (80022e4 <JoystickLocationState+0x84c>)
 80020c8:	edd3 7a00 	vldr	s15, [r3]
 80020cc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80020d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d8:	4b80      	ldr	r3, [pc, #512]	; (80022dc <JoystickLocationState+0x844>)
 80020da:	edc3 7a06 	vstr	s15, [r3, #24]
			PlaceTray.hole_2[1] = (sin_Theta*30)+(cos_Theta*-10);
 80020de:	4b81      	ldr	r3, [pc, #516]	; (80022e4 <JoystickLocationState+0x84c>)
 80020e0:	edd3 7a00 	vldr	s15, [r3]
 80020e4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80020e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020ec:	4b7c      	ldr	r3, [pc, #496]	; (80022e0 <JoystickLocationState+0x848>)
 80020ee:	edd3 7a00 	vldr	s15, [r3]
 80020f2:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80020f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fe:	4b77      	ldr	r3, [pc, #476]	; (80022dc <JoystickLocationState+0x844>)
 8002100:	edc3 7a07 	vstr	s15, [r3, #28]

			PlaceTray.hole_3[0] = (cos_Theta*50)+(-sin_Theta*-10);
 8002104:	4b76      	ldr	r3, [pc, #472]	; (80022e0 <JoystickLocationState+0x848>)
 8002106:	edd3 7a00 	vldr	s15, [r3]
 800210a:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80022f0 <JoystickLocationState+0x858>
 800210e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002112:	4b74      	ldr	r3, [pc, #464]	; (80022e4 <JoystickLocationState+0x84c>)
 8002114:	edd3 7a00 	vldr	s15, [r3]
 8002118:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800211c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002124:	4b6d      	ldr	r3, [pc, #436]	; (80022dc <JoystickLocationState+0x844>)
 8002126:	edc3 7a08 	vstr	s15, [r3, #32]
			PlaceTray.hole_3[1] = (sin_Theta*50)+(cos_Theta*-10);
 800212a:	4b6e      	ldr	r3, [pc, #440]	; (80022e4 <JoystickLocationState+0x84c>)
 800212c:	edd3 7a00 	vldr	s15, [r3]
 8002130:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80022f0 <JoystickLocationState+0x858>
 8002134:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002138:	4b69      	ldr	r3, [pc, #420]	; (80022e0 <JoystickLocationState+0x848>)
 800213a:	edd3 7a00 	vldr	s15, [r3]
 800213e:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002142:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214a:	4b64      	ldr	r3, [pc, #400]	; (80022dc <JoystickLocationState+0x844>)
 800214c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

			PlaceTray.hole_4[0] = (cos_Theta*10)+(-sin_Theta*-25);
 8002150:	4b63      	ldr	r3, [pc, #396]	; (80022e0 <JoystickLocationState+0x848>)
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800215a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800215e:	4b61      	ldr	r3, [pc, #388]	; (80022e4 <JoystickLocationState+0x84c>)
 8002160:	edd3 7a00 	vldr	s15, [r3]
 8002164:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002168:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800216c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002170:	4b5a      	ldr	r3, [pc, #360]	; (80022dc <JoystickLocationState+0x844>)
 8002172:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PlaceTray.hole_4[1] = (sin_Theta*10)+(cos_Theta*-25);
 8002176:	4b5b      	ldr	r3, [pc, #364]	; (80022e4 <JoystickLocationState+0x84c>)
 8002178:	edd3 7a00 	vldr	s15, [r3]
 800217c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002180:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002184:	4b56      	ldr	r3, [pc, #344]	; (80022e0 <JoystickLocationState+0x848>)
 8002186:	edd3 7a00 	vldr	s15, [r3]
 800218a:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 800218e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002196:	4b51      	ldr	r3, [pc, #324]	; (80022dc <JoystickLocationState+0x844>)
 8002198:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

			PlaceTray.hole_5[0] = (cos_Theta*30)+(-sin_Theta*-25);
 800219c:	4b50      	ldr	r3, [pc, #320]	; (80022e0 <JoystickLocationState+0x848>)
 800219e:	edd3 7a00 	vldr	s15, [r3]
 80021a2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80021a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021aa:	4b4e      	ldr	r3, [pc, #312]	; (80022e4 <JoystickLocationState+0x84c>)
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80021b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021bc:	4b47      	ldr	r3, [pc, #284]	; (80022dc <JoystickLocationState+0x844>)
 80021be:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PlaceTray.hole_5[1] = (sin_Theta*30)+(cos_Theta*-25);
 80021c2:	4b48      	ldr	r3, [pc, #288]	; (80022e4 <JoystickLocationState+0x84c>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80021cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021d0:	4b43      	ldr	r3, [pc, #268]	; (80022e0 <JoystickLocationState+0x848>)
 80021d2:	edd3 7a00 	vldr	s15, [r3]
 80021d6:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 80021da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e2:	4b3e      	ldr	r3, [pc, #248]	; (80022dc <JoystickLocationState+0x844>)
 80021e4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PlaceTray.hole_6[0] = (cos_Theta*50)+(-sin_Theta*-25);
 80021e8:	4b3d      	ldr	r3, [pc, #244]	; (80022e0 <JoystickLocationState+0x848>)
 80021ea:	edd3 7a00 	vldr	s15, [r3]
 80021ee:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80022f0 <JoystickLocationState+0x858>
 80021f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021f6:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <JoystickLocationState+0x84c>)
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002200:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002208:	4b34      	ldr	r3, [pc, #208]	; (80022dc <JoystickLocationState+0x844>)
 800220a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			PlaceTray.hole_6[1] = (sin_Theta*50)+(cos_Theta*-25);
 800220e:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <JoystickLocationState+0x84c>)
 8002210:	edd3 7a00 	vldr	s15, [r3]
 8002214:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80022f0 <JoystickLocationState+0x858>
 8002218:	ee27 7a87 	vmul.f32	s14, s15, s14
 800221c:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <JoystickLocationState+0x848>)
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002226:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800222a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222e:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <JoystickLocationState+0x844>)
 8002230:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PlaceTray.hole_7[0] = (cos_Theta*10)+(-sin_Theta*-40);
 8002234:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <JoystickLocationState+0x848>)
 8002236:	edd3 7a00 	vldr	s15, [r3]
 800223a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800223e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <JoystickLocationState+0x84c>)
 8002244:	edd3 7a00 	vldr	s15, [r3]
 8002248:	eddf 6a27 	vldr	s13, [pc, #156]	; 80022e8 <JoystickLocationState+0x850>
 800224c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002254:	4b21      	ldr	r3, [pc, #132]	; (80022dc <JoystickLocationState+0x844>)
 8002256:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			PlaceTray.hole_7[1] = (sin_Theta*10)+(cos_Theta*-40);
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <JoystickLocationState+0x84c>)
 800225c:	edd3 7a00 	vldr	s15, [r3]
 8002260:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002264:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002268:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <JoystickLocationState+0x848>)
 800226a:	edd3 7a00 	vldr	s15, [r3]
 800226e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80022ec <JoystickLocationState+0x854>
 8002272:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <JoystickLocationState+0x844>)
 800227c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PlaceTray.hole_8[0] = (cos_Theta*30)+(-sin_Theta*-40);
 8002280:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <JoystickLocationState+0x848>)
 8002282:	edd3 7a00 	vldr	s15, [r3]
 8002286:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800228a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <JoystickLocationState+0x84c>)
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	eddf 6a14 	vldr	s13, [pc, #80]	; 80022e8 <JoystickLocationState+0x850>
 8002298:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800229c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a0:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <JoystickLocationState+0x844>)
 80022a2:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			PlaceTray.hole_8[1] = (sin_Theta*30)+(cos_Theta*-40);
 80022a6:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <JoystickLocationState+0x84c>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80022b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022b4:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <JoystickLocationState+0x848>)
 80022b6:	edd3 7a00 	vldr	s15, [r3]
 80022ba:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80022ec <JoystickLocationState+0x854>
 80022be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <JoystickLocationState+0x844>)
 80022c8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PlaceTray.hole_9[0] = (cos_Theta*50)+(-sin_Theta*-40);
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <JoystickLocationState+0x848>)
 80022ce:	edd3 7a00 	vldr	s15, [r3]
 80022d2:	e00f      	b.n	80022f4 <JoystickLocationState+0x85c>
 80022d4:	200003dc 	.word	0x200003dc
 80022d8:	200002f0 	.word	0x200002f0
 80022dc:	2000037c 	.word	0x2000037c
 80022e0:	200003d4 	.word	0x200003d4
 80022e4:	200003d8 	.word	0x200003d8
 80022e8:	42200000 	.word	0x42200000
 80022ec:	c2200000 	.word	0xc2200000
 80022f0:	42480000 	.word	0x42480000
 80022f4:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 80022f0 <JoystickLocationState+0x858>
 80022f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022fc:	4b26      	ldr	r3, [pc, #152]	; (8002398 <JoystickLocationState+0x900>)
 80022fe:	edd3 7a00 	vldr	s15, [r3]
 8002302:	eddf 6a26 	vldr	s13, [pc, #152]	; 800239c <JoystickLocationState+0x904>
 8002306:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800230a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800230e:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <JoystickLocationState+0x908>)
 8002310:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			PlaceTray.hole_9[1] = (sin_Theta*50)+(cos_Theta*-40);
 8002314:	4b20      	ldr	r3, [pc, #128]	; (8002398 <JoystickLocationState+0x900>)
 8002316:	edd3 7a00 	vldr	s15, [r3]
 800231a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80023a4 <JoystickLocationState+0x90c>
 800231e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002322:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <JoystickLocationState+0x910>)
 8002324:	edd3 7a00 	vldr	s15, [r3]
 8002328:	eddf 6a20 	vldr	s13, [pc, #128]	; 80023ac <JoystickLocationState+0x914>
 800232c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002330:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002334:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <JoystickLocationState+0x908>)
 8002336:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			state = 4;
 800233a:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <JoystickLocationState+0x918>)
 800233c:	2204      	movs	r2, #4
 800233e:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 0;
		}
		break;
 8002340:	e021      	b.n	8002386 <JoystickLocationState+0x8ee>
		else if (ResetButton.flag == 1)
 8002342:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <JoystickLocationState+0x91c>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d11d      	bne.n	8002386 <JoystickLocationState+0x8ee>
			ResetButton.flag = 0;
 800234a:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <JoystickLocationState+0x91c>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
			state = 0;
 8002350:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <JoystickLocationState+0x918>)
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
		break;
 8002356:	e016      	b.n	8002386 <JoystickLocationState+0x8ee>
	case 4:
		state = 0;
 8002358:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <JoystickLocationState+0x918>)
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
		scheduler = 1;
 800235e:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <JoystickLocationState+0x920>)
 8002360:	2201      	movs	r2, #1
 8002362:	601a      	str	r2, [r3, #0]
		if (ResetButton.flag == 1)
 8002364:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <JoystickLocationState+0x91c>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d10e      	bne.n	800238a <JoystickLocationState+0x8f2>
		{
			ResetButton.flag = 0;
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <JoystickLocationState+0x91c>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
			state = 0;
 8002372:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <JoystickLocationState+0x918>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
		}
		break;
 8002378:	e007      	b.n	800238a <JoystickLocationState+0x8f2>
		break;
 800237a:	bf00      	nop
 800237c:	e006      	b.n	800238c <JoystickLocationState+0x8f4>
		break;
 800237e:	bf00      	nop
 8002380:	e004      	b.n	800238c <JoystickLocationState+0x8f4>
		break;
 8002382:	bf00      	nop
 8002384:	e002      	b.n	800238c <JoystickLocationState+0x8f4>
		break;
 8002386:	bf00      	nop
 8002388:	e000      	b.n	800238c <JoystickLocationState+0x8f4>
		break;
 800238a:	bf00      	nop
	}
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	ecbd 8b02 	vpop	{d8}
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200003d8 	.word	0x200003d8
 800239c:	42200000 	.word	0x42200000
 80023a0:	2000037c 	.word	0x2000037c
 80023a4:	42480000 	.word	0x42480000
 80023a8:	200003d4 	.word	0x200003d4
 80023ac:	c2200000 	.word	0xc2200000
 80023b0:	20000320 	.word	0x20000320
 80023b4:	200003e8 	.word	0x200003e8
 80023b8:	200002a8 	.word	0x200002a8
 80023bc:	00000000 	.word	0x00000000

080023c0 <TrajectoryGenerator>:

void TrajectoryGenerator()
{
 80023c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023c4:	af00      	add	r7, sp, #0
	switch(Trajectstate)
 80023c6:	4b9c      	ldr	r3, [pc, #624]	; (8002638 <TrajectoryGenerator+0x278>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	f000 82e0 	beq.w	8002990 <TrajectoryGenerator+0x5d0>
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	f300 84f1 	bgt.w	8002db8 <TrajectoryGenerator+0x9f8>
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d004      	beq.n	80023e4 <TrajectoryGenerator+0x24>
 80023da:	2b01      	cmp	r3, #1
 80023dc:	f000 8152 	beq.w	8002684 <TrajectoryGenerator+0x2c4>
//	 else if(time > initime+tacc+tconst+tdec){
//		 Trajectstate = 3;
//	 }
	 break;
	}
}
 80023e0:	f000 bcea 	b.w	8002db8 <TrajectoryGenerator+0x9f8>
		qi = position;
 80023e4:	4b95      	ldr	r3, [pc, #596]	; (800263c <TrajectoryGenerator+0x27c>)
 80023e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ea:	ee07 3a90 	vmov	s15, r3
 80023ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f2:	4b93      	ldr	r3, [pc, #588]	; (8002640 <TrajectoryGenerator+0x280>)
 80023f4:	edc3 7a00 	vstr	s15, [r3]
		qf = 5000; //nonny
 80023f8:	4b92      	ldr	r3, [pc, #584]	; (8002644 <TrajectoryGenerator+0x284>)
 80023fa:	4a93      	ldr	r2, [pc, #588]	; (8002648 <TrajectoryGenerator+0x288>)
 80023fc:	601a      	str	r2, [r3, #0]
		qdi = 0;
 80023fe:	4b93      	ldr	r3, [pc, #588]	; (800264c <TrajectoryGenerator+0x28c>)
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
		qd_max = 13333.33; //pDulse/s
 8002406:	4b92      	ldr	r3, [pc, #584]	; (8002650 <TrajectoryGenerator+0x290>)
 8002408:	4a92      	ldr	r2, [pc, #584]	; (8002654 <TrajectoryGenerator+0x294>)
 800240a:	601a      	str	r2, [r3, #0]
		qdd_max = 11111.11; //pulse/s
 800240c:	4b92      	ldr	r3, [pc, #584]	; (8002658 <TrajectoryGenerator+0x298>)
 800240e:	4a93      	ldr	r2, [pc, #588]	; (800265c <TrajectoryGenerator+0x29c>)
 8002410:	601a      	str	r2, [r3, #0]
	  if(qf > qi)
 8002412:	4b8c      	ldr	r3, [pc, #560]	; (8002644 <TrajectoryGenerator+0x284>)
 8002414:	ed93 7a00 	vldr	s14, [r3]
 8002418:	4b89      	ldr	r3, [pc, #548]	; (8002640 <TrajectoryGenerator+0x280>)
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002426:	dd20      	ble.n	800246a <TrajectoryGenerator+0xaa>
		  t_half = sqrt((qf-qi)/qdd_max);
 8002428:	4b86      	ldr	r3, [pc, #536]	; (8002644 <TrajectoryGenerator+0x284>)
 800242a:	ed93 7a00 	vldr	s14, [r3]
 800242e:	4b84      	ldr	r3, [pc, #528]	; (8002640 <TrajectoryGenerator+0x280>)
 8002430:	edd3 7a00 	vldr	s15, [r3]
 8002434:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002438:	4b87      	ldr	r3, [pc, #540]	; (8002658 <TrajectoryGenerator+0x298>)
 800243a:	edd3 7a00 	vldr	s15, [r3]
 800243e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002442:	ee16 0a90 	vmov	r0, s13
 8002446:	f7fe f82b 	bl	80004a0 <__aeabi_f2d>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	ec43 2b10 	vmov	d0, r2, r3
 8002452:	f004 faf7 	bl	8006a44 <sqrt>
 8002456:	ec53 2b10 	vmov	r2, r3, d0
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	f7fe fb47 	bl	8000af0 <__aeabi_d2f>
 8002462:	4603      	mov	r3, r0
 8002464:	4a7e      	ldr	r2, [pc, #504]	; (8002660 <TrajectoryGenerator+0x2a0>)
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	e02c      	b.n	80024c4 <TrajectoryGenerator+0x104>
	  else if(qf < qi)
 800246a:	4b76      	ldr	r3, [pc, #472]	; (8002644 <TrajectoryGenerator+0x284>)
 800246c:	ed93 7a00 	vldr	s14, [r3]
 8002470:	4b73      	ldr	r3, [pc, #460]	; (8002640 <TrajectoryGenerator+0x280>)
 8002472:	edd3 7a00 	vldr	s15, [r3]
 8002476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800247a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247e:	d521      	bpl.n	80024c4 <TrajectoryGenerator+0x104>
		  t_half = sqrt(-1*(qf-qi)/qdd_max);
 8002480:	4b70      	ldr	r3, [pc, #448]	; (8002644 <TrajectoryGenerator+0x284>)
 8002482:	ed93 7a00 	vldr	s14, [r3]
 8002486:	4b6e      	ldr	r3, [pc, #440]	; (8002640 <TrajectoryGenerator+0x280>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002490:	eeb1 7a67 	vneg.f32	s14, s15
 8002494:	4b70      	ldr	r3, [pc, #448]	; (8002658 <TrajectoryGenerator+0x298>)
 8002496:	edd3 7a00 	vldr	s15, [r3]
 800249a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800249e:	ee16 0a90 	vmov	r0, s13
 80024a2:	f7fd fffd 	bl	80004a0 <__aeabi_f2d>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	ec43 2b10 	vmov	d0, r2, r3
 80024ae:	f004 fac9 	bl	8006a44 <sqrt>
 80024b2:	ec53 2b10 	vmov	r2, r3, d0
 80024b6:	4610      	mov	r0, r2
 80024b8:	4619      	mov	r1, r3
 80024ba:	f7fe fb19 	bl	8000af0 <__aeabi_d2f>
 80024be:	4603      	mov	r3, r0
 80024c0:	4a67      	ldr	r2, [pc, #412]	; (8002660 <TrajectoryGenerator+0x2a0>)
 80024c2:	6013      	str	r3, [r2, #0]
	  if(qf-qi < 0)
 80024c4:	4b5f      	ldr	r3, [pc, #380]	; (8002644 <TrajectoryGenerator+0x284>)
 80024c6:	ed93 7a00 	vldr	s14, [r3]
 80024ca:	4b5d      	ldr	r3, [pc, #372]	; (8002640 <TrajectoryGenerator+0x280>)
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024dc:	d50f      	bpl.n	80024fe <TrajectoryGenerator+0x13e>
		  qd_max = -1*qd_max;
 80024de:	4b5c      	ldr	r3, [pc, #368]	; (8002650 <TrajectoryGenerator+0x290>)
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	eef1 7a67 	vneg.f32	s15, s15
 80024e8:	4b59      	ldr	r3, [pc, #356]	; (8002650 <TrajectoryGenerator+0x290>)
 80024ea:	edc3 7a00 	vstr	s15, [r3]
		  qdd_max = -1*qdd_max;
 80024ee:	4b5a      	ldr	r3, [pc, #360]	; (8002658 <TrajectoryGenerator+0x298>)
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	eef1 7a67 	vneg.f32	s15, s15
 80024f8:	4b57      	ldr	r3, [pc, #348]	; (8002658 <TrajectoryGenerator+0x298>)
 80024fa:	edc3 7a00 	vstr	s15, [r3]
	  tacc = (qd_max-qdi)/qdd_max;
 80024fe:	4b54      	ldr	r3, [pc, #336]	; (8002650 <TrajectoryGenerator+0x290>)
 8002500:	ed93 7a00 	vldr	s14, [r3]
 8002504:	4b51      	ldr	r3, [pc, #324]	; (800264c <TrajectoryGenerator+0x28c>)
 8002506:	edd3 7a00 	vldr	s15, [r3]
 800250a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800250e:	4b52      	ldr	r3, [pc, #328]	; (8002658 <TrajectoryGenerator+0x298>)
 8002510:	ed93 7a00 	vldr	s14, [r3]
 8002514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002518:	4b52      	ldr	r3, [pc, #328]	; (8002664 <TrajectoryGenerator+0x2a4>)
 800251a:	edc3 7a00 	vstr	s15, [r3]
	  qacc = qdi*tacc + 0.5*qdd_max*tacc*tacc;
 800251e:	4b4b      	ldr	r3, [pc, #300]	; (800264c <TrajectoryGenerator+0x28c>)
 8002520:	ed93 7a00 	vldr	s14, [r3]
 8002524:	4b4f      	ldr	r3, [pc, #316]	; (8002664 <TrajectoryGenerator+0x2a4>)
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252e:	ee17 0a90 	vmov	r0, s15
 8002532:	f7fd ffb5 	bl	80004a0 <__aeabi_f2d>
 8002536:	4604      	mov	r4, r0
 8002538:	460d      	mov	r5, r1
 800253a:	4b47      	ldr	r3, [pc, #284]	; (8002658 <TrajectoryGenerator+0x298>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fd ffae 	bl	80004a0 <__aeabi_f2d>
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	4b47      	ldr	r3, [pc, #284]	; (8002668 <TrajectoryGenerator+0x2a8>)
 800254a:	f7fe f801 	bl	8000550 <__aeabi_dmul>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4690      	mov	r8, r2
 8002554:	4699      	mov	r9, r3
 8002556:	4b43      	ldr	r3, [pc, #268]	; (8002664 <TrajectoryGenerator+0x2a4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fd ffa0 	bl	80004a0 <__aeabi_f2d>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4640      	mov	r0, r8
 8002566:	4649      	mov	r1, r9
 8002568:	f7fd fff2 	bl	8000550 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4690      	mov	r8, r2
 8002572:	4699      	mov	r9, r3
 8002574:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <TrajectoryGenerator+0x2a4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd ff91 	bl	80004a0 <__aeabi_f2d>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4640      	mov	r0, r8
 8002584:	4649      	mov	r1, r9
 8002586:	f7fd ffe3 	bl	8000550 <__aeabi_dmul>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4620      	mov	r0, r4
 8002590:	4629      	mov	r1, r5
 8002592:	f7fd fe27 	bl	80001e4 <__adddf3>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	f7fe faa7 	bl	8000af0 <__aeabi_d2f>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4a31      	ldr	r2, [pc, #196]	; (800266c <TrajectoryGenerator+0x2ac>)
 80025a6:	6013      	str	r3, [r2, #0]
	  qdec = qacc;
 80025a8:	4b30      	ldr	r3, [pc, #192]	; (800266c <TrajectoryGenerator+0x2ac>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a30      	ldr	r2, [pc, #192]	; (8002670 <TrajectoryGenerator+0x2b0>)
 80025ae:	6013      	str	r3, [r2, #0]
	  tconst = ((qf-qi)-qacc-qdec)/qd_max;
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <TrajectoryGenerator+0x284>)
 80025b2:	ed93 7a00 	vldr	s14, [r3]
 80025b6:	4b22      	ldr	r3, [pc, #136]	; (8002640 <TrajectoryGenerator+0x280>)
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025c0:	4b2a      	ldr	r3, [pc, #168]	; (800266c <TrajectoryGenerator+0x2ac>)
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025ca:	4b29      	ldr	r3, [pc, #164]	; (8002670 <TrajectoryGenerator+0x2b0>)
 80025cc:	edd3 7a00 	vldr	s15, [r3]
 80025d0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025d4:	4b1e      	ldr	r3, [pc, #120]	; (8002650 <TrajectoryGenerator+0x290>)
 80025d6:	ed93 7a00 	vldr	s14, [r3]
 80025da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025de:	4b25      	ldr	r3, [pc, #148]	; (8002674 <TrajectoryGenerator+0x2b4>)
 80025e0:	edc3 7a00 	vstr	s15, [r3]
	  tdec = tacc;
 80025e4:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <TrajectoryGenerator+0x2a4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a23      	ldr	r2, [pc, #140]	; (8002678 <TrajectoryGenerator+0x2b8>)
 80025ea:	6013      	str	r3, [r2, #0]
	  if(qdi+qdd_max*t_half >= qd_max)
 80025ec:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <TrajectoryGenerator+0x298>)
 80025ee:	ed93 7a00 	vldr	s14, [r3]
 80025f2:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <TrajectoryGenerator+0x2a0>)
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <TrajectoryGenerator+0x28c>)
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <TrajectoryGenerator+0x290>)
 8002608:	edd3 7a00 	vldr	s15, [r3]
 800260c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002614:	db07      	blt.n	8002626 <TrajectoryGenerator+0x266>
		  initime = time;
 8002616:	4b19      	ldr	r3, [pc, #100]	; (800267c <TrajectoryGenerator+0x2bc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a19      	ldr	r2, [pc, #100]	; (8002680 <TrajectoryGenerator+0x2c0>)
 800261c:	6013      	str	r3, [r2, #0]
		  Trajectstate = 2;
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <TrajectoryGenerator+0x278>)
 8002620:	2202      	movs	r2, #2
 8002622:	601a      	str	r2, [r3, #0]
	  break;
 8002624:	e3c8      	b.n	8002db8 <TrajectoryGenerator+0x9f8>
		  initime = time;
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <TrajectoryGenerator+0x2bc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a15      	ldr	r2, [pc, #84]	; (8002680 <TrajectoryGenerator+0x2c0>)
 800262c:	6013      	str	r3, [r2, #0]
		  Trajectstate = 1;
 800262e:	4b02      	ldr	r3, [pc, #8]	; (8002638 <TrajectoryGenerator+0x278>)
 8002630:	2201      	movs	r2, #1
 8002632:	601a      	str	r2, [r3, #0]
	  break;
 8002634:	e3c0      	b.n	8002db8 <TrajectoryGenerator+0x9f8>
 8002636:	bf00      	nop
 8002638:	200002b0 	.word	0x200002b0
 800263c:	200002f0 	.word	0x200002f0
 8002640:	200002bc 	.word	0x200002bc
 8002644:	200002b8 	.word	0x200002b8
 8002648:	459c4000 	.word	0x459c4000
 800264c:	200002c0 	.word	0x200002c0
 8002650:	20000008 	.word	0x20000008
 8002654:	46505552 	.word	0x46505552
 8002658:	2000000c 	.word	0x2000000c
 800265c:	462d9c71 	.word	0x462d9c71
 8002660:	200002c8 	.word	0x200002c8
 8002664:	200002dc 	.word	0x200002dc
 8002668:	3fe00000 	.word	0x3fe00000
 800266c:	200002e0 	.word	0x200002e0
 8002670:	200002e4 	.word	0x200002e4
 8002674:	200002e8 	.word	0x200002e8
 8002678:	200002ec 	.word	0x200002ec
 800267c:	200002b4 	.word	0x200002b4
 8002680:	200002c4 	.word	0x200002c4
	  if(time <= t_half + initime)
 8002684:	4bb6      	ldr	r3, [pc, #728]	; (8002960 <TrajectoryGenerator+0x5a0>)
 8002686:	ed93 7a00 	vldr	s14, [r3]
 800268a:	4bb6      	ldr	r3, [pc, #728]	; (8002964 <TrajectoryGenerator+0x5a4>)
 800268c:	edd3 7a00 	vldr	s15, [r3]
 8002690:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002694:	4bb4      	ldr	r3, [pc, #720]	; (8002968 <TrajectoryGenerator+0x5a8>)
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800269e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a2:	f2c0 8092 	blt.w	80027ca <TrajectoryGenerator+0x40a>
		  setacc = qdd_max;
 80026a6:	4bb1      	ldr	r3, [pc, #708]	; (800296c <TrajectoryGenerator+0x5ac>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4ab1      	ldr	r2, [pc, #708]	; (8002970 <TrajectoryGenerator+0x5b0>)
 80026ac:	6013      	str	r3, [r2, #0]
		  setvelocity = qdi + setacc*(time-initime);
 80026ae:	4bae      	ldr	r3, [pc, #696]	; (8002968 <TrajectoryGenerator+0x5a8>)
 80026b0:	ed93 7a00 	vldr	s14, [r3]
 80026b4:	4bab      	ldr	r3, [pc, #684]	; (8002964 <TrajectoryGenerator+0x5a4>)
 80026b6:	edd3 7a00 	vldr	s15, [r3]
 80026ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026be:	4bac      	ldr	r3, [pc, #688]	; (8002970 <TrajectoryGenerator+0x5b0>)
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026c8:	4baa      	ldr	r3, [pc, #680]	; (8002974 <TrajectoryGenerator+0x5b4>)
 80026ca:	edd3 7a00 	vldr	s15, [r3]
 80026ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d2:	4ba9      	ldr	r3, [pc, #676]	; (8002978 <TrajectoryGenerator+0x5b8>)
 80026d4:	edc3 7a00 	vstr	s15, [r3]
		  setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 80026d8:	4ba3      	ldr	r3, [pc, #652]	; (8002968 <TrajectoryGenerator+0x5a8>)
 80026da:	ed93 7a00 	vldr	s14, [r3]
 80026de:	4ba1      	ldr	r3, [pc, #644]	; (8002964 <TrajectoryGenerator+0x5a4>)
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026e8:	4ba2      	ldr	r3, [pc, #648]	; (8002974 <TrajectoryGenerator+0x5b4>)
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026f2:	4ba2      	ldr	r3, [pc, #648]	; (800297c <TrajectoryGenerator+0x5bc>)
 80026f4:	edd3 7a00 	vldr	s15, [r3]
 80026f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fc:	ee17 0a90 	vmov	r0, s15
 8002700:	f7fd fece 	bl	80004a0 <__aeabi_f2d>
 8002704:	4604      	mov	r4, r0
 8002706:	460d      	mov	r5, r1
 8002708:	4b99      	ldr	r3, [pc, #612]	; (8002970 <TrajectoryGenerator+0x5b0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd fec7 	bl	80004a0 <__aeabi_f2d>
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	4b9a      	ldr	r3, [pc, #616]	; (8002980 <TrajectoryGenerator+0x5c0>)
 8002718:	f7fd ff1a 	bl	8000550 <__aeabi_dmul>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4690      	mov	r8, r2
 8002722:	4699      	mov	r9, r3
 8002724:	4b90      	ldr	r3, [pc, #576]	; (8002968 <TrajectoryGenerator+0x5a8>)
 8002726:	ed93 7a00 	vldr	s14, [r3]
 800272a:	4b8e      	ldr	r3, [pc, #568]	; (8002964 <TrajectoryGenerator+0x5a4>)
 800272c:	edd3 7a00 	vldr	s15, [r3]
 8002730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002734:	ee17 0a90 	vmov	r0, s15
 8002738:	f7fd feb2 	bl	80004a0 <__aeabi_f2d>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4640      	mov	r0, r8
 8002742:	4649      	mov	r1, r9
 8002744:	f7fd ff04 	bl	8000550 <__aeabi_dmul>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4690      	mov	r8, r2
 800274e:	4699      	mov	r9, r3
 8002750:	4b85      	ldr	r3, [pc, #532]	; (8002968 <TrajectoryGenerator+0x5a8>)
 8002752:	ed93 7a00 	vldr	s14, [r3]
 8002756:	4b83      	ldr	r3, [pc, #524]	; (8002964 <TrajectoryGenerator+0x5a4>)
 8002758:	edd3 7a00 	vldr	s15, [r3]
 800275c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002760:	ee17 0a90 	vmov	r0, s15
 8002764:	f7fd fe9c 	bl	80004a0 <__aeabi_f2d>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4640      	mov	r0, r8
 800276e:	4649      	mov	r1, r9
 8002770:	f7fd feee 	bl	8000550 <__aeabi_dmul>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fd fd32 	bl	80001e4 <__adddf3>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	f7fe f9b2 	bl	8000af0 <__aeabi_d2f>
 800278c:	4603      	mov	r3, r0
 800278e:	4a7d      	ldr	r2, [pc, #500]	; (8002984 <TrajectoryGenerator+0x5c4>)
 8002790:	6013      	str	r3, [r2, #0]
		  qi_1 = setposition;
 8002792:	4b7c      	ldr	r3, [pc, #496]	; (8002984 <TrajectoryGenerator+0x5c4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a7c      	ldr	r2, [pc, #496]	; (8002988 <TrajectoryGenerator+0x5c8>)
 8002798:	6013      	str	r3, [r2, #0]
		  qdi_1 = setvelocity;
 800279a:	4b77      	ldr	r3, [pc, #476]	; (8002978 <TrajectoryGenerator+0x5b8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a7b      	ldr	r2, [pc, #492]	; (800298c <TrajectoryGenerator+0x5cc>)
 80027a0:	6013      	str	r3, [r2, #0]
		  time += 0.001;
 80027a2:	4b71      	ldr	r3, [pc, #452]	; (8002968 <TrajectoryGenerator+0x5a8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fd fe7a 	bl	80004a0 <__aeabi_f2d>
 80027ac:	a36a      	add	r3, pc, #424	; (adr r3, 8002958 <TrajectoryGenerator+0x598>)
 80027ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b2:	f7fd fd17 	bl	80001e4 <__adddf3>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	f7fe f997 	bl	8000af0 <__aeabi_d2f>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4a68      	ldr	r2, [pc, #416]	; (8002968 <TrajectoryGenerator+0x5a8>)
 80027c6:	6013      	str	r3, [r2, #0]
	break;
 80027c8:	e2f6      	b.n	8002db8 <TrajectoryGenerator+0x9f8>
	  else if(t_half + initime < time && time <= (2*t_half) + initime)
 80027ca:	4b65      	ldr	r3, [pc, #404]	; (8002960 <TrajectoryGenerator+0x5a0>)
 80027cc:	ed93 7a00 	vldr	s14, [r3]
 80027d0:	4b64      	ldr	r3, [pc, #400]	; (8002964 <TrajectoryGenerator+0x5a4>)
 80027d2:	edd3 7a00 	vldr	s15, [r3]
 80027d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027da:	4b63      	ldr	r3, [pc, #396]	; (8002968 <TrajectoryGenerator+0x5a8>)
 80027dc:	edd3 7a00 	vldr	s15, [r3]
 80027e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e8:	d400      	bmi.n	80027ec <TrajectoryGenerator+0x42c>
	break;
 80027ea:	e2e5      	b.n	8002db8 <TrajectoryGenerator+0x9f8>
	  else if(t_half + initime < time && time <= (2*t_half) + initime)
 80027ec:	4b5c      	ldr	r3, [pc, #368]	; (8002960 <TrajectoryGenerator+0x5a0>)
 80027ee:	edd3 7a00 	vldr	s15, [r3]
 80027f2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80027f6:	4b5b      	ldr	r3, [pc, #364]	; (8002964 <TrajectoryGenerator+0x5a4>)
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002800:	4b59      	ldr	r3, [pc, #356]	; (8002968 <TrajectoryGenerator+0x5a8>)
 8002802:	edd3 7a00 	vldr	s15, [r3]
 8002806:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800280a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280e:	da00      	bge.n	8002812 <TrajectoryGenerator+0x452>
	break;
 8002810:	e2d2      	b.n	8002db8 <TrajectoryGenerator+0x9f8>
		  setacc = -qdd_max;
 8002812:	4b56      	ldr	r3, [pc, #344]	; (800296c <TrajectoryGenerator+0x5ac>)
 8002814:	edd3 7a00 	vldr	s15, [r3]
 8002818:	eef1 7a67 	vneg.f32	s15, s15
 800281c:	4b54      	ldr	r3, [pc, #336]	; (8002970 <TrajectoryGenerator+0x5b0>)
 800281e:	edc3 7a00 	vstr	s15, [r3]
		  setvelocity = qdi_1 + setacc*(time-initime-t_half);
 8002822:	4b51      	ldr	r3, [pc, #324]	; (8002968 <TrajectoryGenerator+0x5a8>)
 8002824:	ed93 7a00 	vldr	s14, [r3]
 8002828:	4b4e      	ldr	r3, [pc, #312]	; (8002964 <TrajectoryGenerator+0x5a4>)
 800282a:	edd3 7a00 	vldr	s15, [r3]
 800282e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002832:	4b4b      	ldr	r3, [pc, #300]	; (8002960 <TrajectoryGenerator+0x5a0>)
 8002834:	edd3 7a00 	vldr	s15, [r3]
 8002838:	ee37 7a67 	vsub.f32	s14, s14, s15
 800283c:	4b4c      	ldr	r3, [pc, #304]	; (8002970 <TrajectoryGenerator+0x5b0>)
 800283e:	edd3 7a00 	vldr	s15, [r3]
 8002842:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002846:	4b51      	ldr	r3, [pc, #324]	; (800298c <TrajectoryGenerator+0x5cc>)
 8002848:	edd3 7a00 	vldr	s15, [r3]
 800284c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002850:	4b49      	ldr	r3, [pc, #292]	; (8002978 <TrajectoryGenerator+0x5b8>)
 8002852:	edc3 7a00 	vstr	s15, [r3]
		  setposition = qi_1 + qdi_1*(time-initime-t_half)+0.5*setacc*(time-initime-t_half)*(time-initime-t_half);
 8002856:	4b44      	ldr	r3, [pc, #272]	; (8002968 <TrajectoryGenerator+0x5a8>)
 8002858:	ed93 7a00 	vldr	s14, [r3]
 800285c:	4b41      	ldr	r3, [pc, #260]	; (8002964 <TrajectoryGenerator+0x5a4>)
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002866:	4b3e      	ldr	r3, [pc, #248]	; (8002960 <TrajectoryGenerator+0x5a0>)
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002870:	4b46      	ldr	r3, [pc, #280]	; (800298c <TrajectoryGenerator+0x5cc>)
 8002872:	edd3 7a00 	vldr	s15, [r3]
 8002876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800287a:	4b43      	ldr	r3, [pc, #268]	; (8002988 <TrajectoryGenerator+0x5c8>)
 800287c:	edd3 7a00 	vldr	s15, [r3]
 8002880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002884:	ee17 0a90 	vmov	r0, s15
 8002888:	f7fd fe0a 	bl	80004a0 <__aeabi_f2d>
 800288c:	4604      	mov	r4, r0
 800288e:	460d      	mov	r5, r1
 8002890:	4b37      	ldr	r3, [pc, #220]	; (8002970 <TrajectoryGenerator+0x5b0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7fd fe03 	bl	80004a0 <__aeabi_f2d>
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	4b38      	ldr	r3, [pc, #224]	; (8002980 <TrajectoryGenerator+0x5c0>)
 80028a0:	f7fd fe56 	bl	8000550 <__aeabi_dmul>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4690      	mov	r8, r2
 80028aa:	4699      	mov	r9, r3
 80028ac:	4b2e      	ldr	r3, [pc, #184]	; (8002968 <TrajectoryGenerator+0x5a8>)
 80028ae:	ed93 7a00 	vldr	s14, [r3]
 80028b2:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <TrajectoryGenerator+0x5a4>)
 80028b4:	edd3 7a00 	vldr	s15, [r3]
 80028b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028bc:	4b28      	ldr	r3, [pc, #160]	; (8002960 <TrajectoryGenerator+0x5a0>)
 80028be:	edd3 7a00 	vldr	s15, [r3]
 80028c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c6:	ee17 0a90 	vmov	r0, s15
 80028ca:	f7fd fde9 	bl	80004a0 <__aeabi_f2d>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4640      	mov	r0, r8
 80028d4:	4649      	mov	r1, r9
 80028d6:	f7fd fe3b 	bl	8000550 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4690      	mov	r8, r2
 80028e0:	4699      	mov	r9, r3
 80028e2:	4b21      	ldr	r3, [pc, #132]	; (8002968 <TrajectoryGenerator+0x5a8>)
 80028e4:	ed93 7a00 	vldr	s14, [r3]
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <TrajectoryGenerator+0x5a4>)
 80028ea:	edd3 7a00 	vldr	s15, [r3]
 80028ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028f2:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <TrajectoryGenerator+0x5a0>)
 80028f4:	edd3 7a00 	vldr	s15, [r3]
 80028f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028fc:	ee17 0a90 	vmov	r0, s15
 8002900:	f7fd fdce 	bl	80004a0 <__aeabi_f2d>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4640      	mov	r0, r8
 800290a:	4649      	mov	r1, r9
 800290c:	f7fd fe20 	bl	8000550 <__aeabi_dmul>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4620      	mov	r0, r4
 8002916:	4629      	mov	r1, r5
 8002918:	f7fd fc64 	bl	80001e4 <__adddf3>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4610      	mov	r0, r2
 8002922:	4619      	mov	r1, r3
 8002924:	f7fe f8e4 	bl	8000af0 <__aeabi_d2f>
 8002928:	4603      	mov	r3, r0
 800292a:	4a16      	ldr	r2, [pc, #88]	; (8002984 <TrajectoryGenerator+0x5c4>)
 800292c:	6013      	str	r3, [r2, #0]
		  time += 0.001;
 800292e:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <TrajectoryGenerator+0x5a8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd fdb4 	bl	80004a0 <__aeabi_f2d>
 8002938:	a307      	add	r3, pc, #28	; (adr r3, 8002958 <TrajectoryGenerator+0x598>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	f7fd fc51 	bl	80001e4 <__adddf3>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	f7fe f8d1 	bl	8000af0 <__aeabi_d2f>
 800294e:	4603      	mov	r3, r0
 8002950:	4a05      	ldr	r2, [pc, #20]	; (8002968 <TrajectoryGenerator+0x5a8>)
 8002952:	6013      	str	r3, [r2, #0]
	break;
 8002954:	e230      	b.n	8002db8 <TrajectoryGenerator+0x9f8>
 8002956:	bf00      	nop
 8002958:	d2f1a9fc 	.word	0xd2f1a9fc
 800295c:	3f50624d 	.word	0x3f50624d
 8002960:	200002c8 	.word	0x200002c8
 8002964:	200002c4 	.word	0x200002c4
 8002968:	200002b4 	.word	0x200002b4
 800296c:	2000000c 	.word	0x2000000c
 8002970:	20000314 	.word	0x20000314
 8002974:	200002c0 	.word	0x200002c0
 8002978:	20000310 	.word	0x20000310
 800297c:	200002bc 	.word	0x200002bc
 8002980:	3fe00000 	.word	0x3fe00000
 8002984:	200002f4 	.word	0x200002f4
 8002988:	200002d4 	.word	0x200002d4
 800298c:	200002cc 	.word	0x200002cc
	 if(time <= tacc + initime)
 8002990:	4b9d      	ldr	r3, [pc, #628]	; (8002c08 <TrajectoryGenerator+0x848>)
 8002992:	ed93 7a00 	vldr	s14, [r3]
 8002996:	4b9d      	ldr	r3, [pc, #628]	; (8002c0c <TrajectoryGenerator+0x84c>)
 8002998:	edd3 7a00 	vldr	s15, [r3]
 800299c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029a0:	4b9b      	ldr	r3, [pc, #620]	; (8002c10 <TrajectoryGenerator+0x850>)
 80029a2:	edd3 7a00 	vldr	s15, [r3]
 80029a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ae:	f2c0 8092 	blt.w	8002ad6 <TrajectoryGenerator+0x716>
		 setacc = qdd_max;
 80029b2:	4b98      	ldr	r3, [pc, #608]	; (8002c14 <TrajectoryGenerator+0x854>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a98      	ldr	r2, [pc, #608]	; (8002c18 <TrajectoryGenerator+0x858>)
 80029b8:	6013      	str	r3, [r2, #0]
		 setvelocity = qdi + setacc*(time-initime);
 80029ba:	4b95      	ldr	r3, [pc, #596]	; (8002c10 <TrajectoryGenerator+0x850>)
 80029bc:	ed93 7a00 	vldr	s14, [r3]
 80029c0:	4b92      	ldr	r3, [pc, #584]	; (8002c0c <TrajectoryGenerator+0x84c>)
 80029c2:	edd3 7a00 	vldr	s15, [r3]
 80029c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029ca:	4b93      	ldr	r3, [pc, #588]	; (8002c18 <TrajectoryGenerator+0x858>)
 80029cc:	edd3 7a00 	vldr	s15, [r3]
 80029d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d4:	4b91      	ldr	r3, [pc, #580]	; (8002c1c <TrajectoryGenerator+0x85c>)
 80029d6:	edd3 7a00 	vldr	s15, [r3]
 80029da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029de:	4b90      	ldr	r3, [pc, #576]	; (8002c20 <TrajectoryGenerator+0x860>)
 80029e0:	edc3 7a00 	vstr	s15, [r3]
		 setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 80029e4:	4b8a      	ldr	r3, [pc, #552]	; (8002c10 <TrajectoryGenerator+0x850>)
 80029e6:	ed93 7a00 	vldr	s14, [r3]
 80029ea:	4b88      	ldr	r3, [pc, #544]	; (8002c0c <TrajectoryGenerator+0x84c>)
 80029ec:	edd3 7a00 	vldr	s15, [r3]
 80029f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029f4:	4b89      	ldr	r3, [pc, #548]	; (8002c1c <TrajectoryGenerator+0x85c>)
 80029f6:	edd3 7a00 	vldr	s15, [r3]
 80029fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029fe:	4b89      	ldr	r3, [pc, #548]	; (8002c24 <TrajectoryGenerator+0x864>)
 8002a00:	edd3 7a00 	vldr	s15, [r3]
 8002a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a08:	ee17 0a90 	vmov	r0, s15
 8002a0c:	f7fd fd48 	bl	80004a0 <__aeabi_f2d>
 8002a10:	4604      	mov	r4, r0
 8002a12:	460d      	mov	r5, r1
 8002a14:	4b80      	ldr	r3, [pc, #512]	; (8002c18 <TrajectoryGenerator+0x858>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fd41 	bl	80004a0 <__aeabi_f2d>
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	4b81      	ldr	r3, [pc, #516]	; (8002c28 <TrajectoryGenerator+0x868>)
 8002a24:	f7fd fd94 	bl	8000550 <__aeabi_dmul>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4690      	mov	r8, r2
 8002a2e:	4699      	mov	r9, r3
 8002a30:	4b77      	ldr	r3, [pc, #476]	; (8002c10 <TrajectoryGenerator+0x850>)
 8002a32:	ed93 7a00 	vldr	s14, [r3]
 8002a36:	4b75      	ldr	r3, [pc, #468]	; (8002c0c <TrajectoryGenerator+0x84c>)
 8002a38:	edd3 7a00 	vldr	s15, [r3]
 8002a3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a40:	ee17 0a90 	vmov	r0, s15
 8002a44:	f7fd fd2c 	bl	80004a0 <__aeabi_f2d>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4640      	mov	r0, r8
 8002a4e:	4649      	mov	r1, r9
 8002a50:	f7fd fd7e 	bl	8000550 <__aeabi_dmul>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4690      	mov	r8, r2
 8002a5a:	4699      	mov	r9, r3
 8002a5c:	4b6c      	ldr	r3, [pc, #432]	; (8002c10 <TrajectoryGenerator+0x850>)
 8002a5e:	ed93 7a00 	vldr	s14, [r3]
 8002a62:	4b6a      	ldr	r3, [pc, #424]	; (8002c0c <TrajectoryGenerator+0x84c>)
 8002a64:	edd3 7a00 	vldr	s15, [r3]
 8002a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a6c:	ee17 0a90 	vmov	r0, s15
 8002a70:	f7fd fd16 	bl	80004a0 <__aeabi_f2d>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4640      	mov	r0, r8
 8002a7a:	4649      	mov	r1, r9
 8002a7c:	f7fd fd68 	bl	8000550 <__aeabi_dmul>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4620      	mov	r0, r4
 8002a86:	4629      	mov	r1, r5
 8002a88:	f7fd fbac 	bl	80001e4 <__adddf3>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	f7fe f82c 	bl	8000af0 <__aeabi_d2f>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4a64      	ldr	r2, [pc, #400]	; (8002c2c <TrajectoryGenerator+0x86c>)
 8002a9c:	6013      	str	r3, [r2, #0]
		 qi_1 = setposition;
 8002a9e:	4b63      	ldr	r3, [pc, #396]	; (8002c2c <TrajectoryGenerator+0x86c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a63      	ldr	r2, [pc, #396]	; (8002c30 <TrajectoryGenerator+0x870>)
 8002aa4:	6013      	str	r3, [r2, #0]
		 qdi_1 = setvelocity;
 8002aa6:	4b5e      	ldr	r3, [pc, #376]	; (8002c20 <TrajectoryGenerator+0x860>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a62      	ldr	r2, [pc, #392]	; (8002c34 <TrajectoryGenerator+0x874>)
 8002aac:	6013      	str	r3, [r2, #0]
		 time += 0.001;
 8002aae:	4b58      	ldr	r3, [pc, #352]	; (8002c10 <TrajectoryGenerator+0x850>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fd fcf4 	bl	80004a0 <__aeabi_f2d>
 8002ab8:	a351      	add	r3, pc, #324	; (adr r3, 8002c00 <TrajectoryGenerator+0x840>)
 8002aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abe:	f7fd fb91 	bl	80001e4 <__adddf3>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f7fe f811 	bl	8000af0 <__aeabi_d2f>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4a4f      	ldr	r2, [pc, #316]	; (8002c10 <TrajectoryGenerator+0x850>)
 8002ad2:	6013      	str	r3, [r2, #0]
	 break;
 8002ad4:	e16f      	b.n	8002db6 <TrajectoryGenerator+0x9f6>
	 else if(tacc+initime < time && time <= initime+tacc+tconst)
 8002ad6:	4b4c      	ldr	r3, [pc, #304]	; (8002c08 <TrajectoryGenerator+0x848>)
 8002ad8:	ed93 7a00 	vldr	s14, [r3]
 8002adc:	4b4b      	ldr	r3, [pc, #300]	; (8002c0c <TrajectoryGenerator+0x84c>)
 8002ade:	edd3 7a00 	vldr	s15, [r3]
 8002ae2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae6:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <TrajectoryGenerator+0x850>)
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af4:	d552      	bpl.n	8002b9c <TrajectoryGenerator+0x7dc>
 8002af6:	4b45      	ldr	r3, [pc, #276]	; (8002c0c <TrajectoryGenerator+0x84c>)
 8002af8:	ed93 7a00 	vldr	s14, [r3]
 8002afc:	4b42      	ldr	r3, [pc, #264]	; (8002c08 <TrajectoryGenerator+0x848>)
 8002afe:	edd3 7a00 	vldr	s15, [r3]
 8002b02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b06:	4b4c      	ldr	r3, [pc, #304]	; (8002c38 <TrajectoryGenerator+0x878>)
 8002b08:	edd3 7a00 	vldr	s15, [r3]
 8002b0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b10:	4b3f      	ldr	r3, [pc, #252]	; (8002c10 <TrajectoryGenerator+0x850>)
 8002b12:	edd3 7a00 	vldr	s15, [r3]
 8002b16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1e:	db3d      	blt.n	8002b9c <TrajectoryGenerator+0x7dc>
		 setacc = 0;
 8002b20:	4b3d      	ldr	r3, [pc, #244]	; (8002c18 <TrajectoryGenerator+0x858>)
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
		 setvelocity = qd_max;
 8002b28:	4b44      	ldr	r3, [pc, #272]	; (8002c3c <TrajectoryGenerator+0x87c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a3c      	ldr	r2, [pc, #240]	; (8002c20 <TrajectoryGenerator+0x860>)
 8002b2e:	6013      	str	r3, [r2, #0]
		 setposition = qi_1 + qd_max*(time-initime-tacc);
 8002b30:	4b37      	ldr	r3, [pc, #220]	; (8002c10 <TrajectoryGenerator+0x850>)
 8002b32:	ed93 7a00 	vldr	s14, [r3]
 8002b36:	4b35      	ldr	r3, [pc, #212]	; (8002c0c <TrajectoryGenerator+0x84c>)
 8002b38:	edd3 7a00 	vldr	s15, [r3]
 8002b3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b40:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <TrajectoryGenerator+0x848>)
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b4a:	4b3c      	ldr	r3, [pc, #240]	; (8002c3c <TrajectoryGenerator+0x87c>)
 8002b4c:	edd3 7a00 	vldr	s15, [r3]
 8002b50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b54:	4b36      	ldr	r3, [pc, #216]	; (8002c30 <TrajectoryGenerator+0x870>)
 8002b56:	edd3 7a00 	vldr	s15, [r3]
 8002b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b5e:	4b33      	ldr	r3, [pc, #204]	; (8002c2c <TrajectoryGenerator+0x86c>)
 8002b60:	edc3 7a00 	vstr	s15, [r3]
		 qi_2 = setposition;
 8002b64:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <TrajectoryGenerator+0x86c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a35      	ldr	r2, [pc, #212]	; (8002c40 <TrajectoryGenerator+0x880>)
 8002b6a:	6013      	str	r3, [r2, #0]
		 qdi_2 = setvelocity;
 8002b6c:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <TrajectoryGenerator+0x860>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a34      	ldr	r2, [pc, #208]	; (8002c44 <TrajectoryGenerator+0x884>)
 8002b72:	6013      	str	r3, [r2, #0]
		 time += 0.001;
 8002b74:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <TrajectoryGenerator+0x850>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fd fc91 	bl	80004a0 <__aeabi_f2d>
 8002b7e:	a320      	add	r3, pc, #128	; (adr r3, 8002c00 <TrajectoryGenerator+0x840>)
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	f7fd fb2e 	bl	80001e4 <__adddf3>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f7fd ffae 	bl	8000af0 <__aeabi_d2f>
 8002b94:	4603      	mov	r3, r0
 8002b96:	4a1e      	ldr	r2, [pc, #120]	; (8002c10 <TrajectoryGenerator+0x850>)
 8002b98:	6013      	str	r3, [r2, #0]
	 break;
 8002b9a:	e10c      	b.n	8002db6 <TrajectoryGenerator+0x9f6>
	 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <TrajectoryGenerator+0x848>)
 8002b9e:	ed93 7a00 	vldr	s14, [r3]
 8002ba2:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <TrajectoryGenerator+0x878>)
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bac:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <TrajectoryGenerator+0x84c>)
 8002bae:	edd3 7a00 	vldr	s15, [r3]
 8002bb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bb6:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <TrajectoryGenerator+0x850>)
 8002bb8:	edd3 7a00 	vldr	s15, [r3]
 8002bbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc4:	d400      	bmi.n	8002bc8 <TrajectoryGenerator+0x808>
	 break;
 8002bc6:	e0f6      	b.n	8002db6 <TrajectoryGenerator+0x9f6>
	 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <TrajectoryGenerator+0x848>)
 8002bca:	ed93 7a00 	vldr	s14, [r3]
 8002bce:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <TrajectoryGenerator+0x878>)
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <TrajectoryGenerator+0x888>)
 8002bda:	edd3 7a00 	vldr	s15, [r3]
 8002bde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002be2:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <TrajectoryGenerator+0x84c>)
 8002be4:	edd3 7a00 	vldr	s15, [r3]
 8002be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bec:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <TrajectoryGenerator+0x850>)
 8002bee:	edd3 7a00 	vldr	s15, [r3]
 8002bf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfa:	da27      	bge.n	8002c4c <TrajectoryGenerator+0x88c>
	 break;
 8002bfc:	e0db      	b.n	8002db6 <TrajectoryGenerator+0x9f6>
 8002bfe:	bf00      	nop
 8002c00:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c04:	3f50624d 	.word	0x3f50624d
 8002c08:	200002dc 	.word	0x200002dc
 8002c0c:	200002c4 	.word	0x200002c4
 8002c10:	200002b4 	.word	0x200002b4
 8002c14:	2000000c 	.word	0x2000000c
 8002c18:	20000314 	.word	0x20000314
 8002c1c:	200002c0 	.word	0x200002c0
 8002c20:	20000310 	.word	0x20000310
 8002c24:	200002bc 	.word	0x200002bc
 8002c28:	3fe00000 	.word	0x3fe00000
 8002c2c:	200002f4 	.word	0x200002f4
 8002c30:	200002d4 	.word	0x200002d4
 8002c34:	200002cc 	.word	0x200002cc
 8002c38:	200002e8 	.word	0x200002e8
 8002c3c:	20000008 	.word	0x20000008
 8002c40:	200002d8 	.word	0x200002d8
 8002c44:	200002d0 	.word	0x200002d0
 8002c48:	200002ec 	.word	0x200002ec
		 setacc = -qdd_max;
 8002c4c:	4b5e      	ldr	r3, [pc, #376]	; (8002dc8 <TrajectoryGenerator+0xa08>)
 8002c4e:	edd3 7a00 	vldr	s15, [r3]
 8002c52:	eef1 7a67 	vneg.f32	s15, s15
 8002c56:	4b5d      	ldr	r3, [pc, #372]	; (8002dcc <TrajectoryGenerator+0xa0c>)
 8002c58:	edc3 7a00 	vstr	s15, [r3]
		 setvelocity = qdi_2 + setacc*(time-initime-tacc-tconst);
 8002c5c:	4b5c      	ldr	r3, [pc, #368]	; (8002dd0 <TrajectoryGenerator+0xa10>)
 8002c5e:	ed93 7a00 	vldr	s14, [r3]
 8002c62:	4b5c      	ldr	r3, [pc, #368]	; (8002dd4 <TrajectoryGenerator+0xa14>)
 8002c64:	edd3 7a00 	vldr	s15, [r3]
 8002c68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c6c:	4b5a      	ldr	r3, [pc, #360]	; (8002dd8 <TrajectoryGenerator+0xa18>)
 8002c6e:	edd3 7a00 	vldr	s15, [r3]
 8002c72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c76:	4b59      	ldr	r3, [pc, #356]	; (8002ddc <TrajectoryGenerator+0xa1c>)
 8002c78:	edd3 7a00 	vldr	s15, [r3]
 8002c7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c80:	4b52      	ldr	r3, [pc, #328]	; (8002dcc <TrajectoryGenerator+0xa0c>)
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c8a:	4b55      	ldr	r3, [pc, #340]	; (8002de0 <TrajectoryGenerator+0xa20>)
 8002c8c:	edd3 7a00 	vldr	s15, [r3]
 8002c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c94:	4b53      	ldr	r3, [pc, #332]	; (8002de4 <TrajectoryGenerator+0xa24>)
 8002c96:	edc3 7a00 	vstr	s15, [r3]
		 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
 8002c9a:	4b4d      	ldr	r3, [pc, #308]	; (8002dd0 <TrajectoryGenerator+0xa10>)
 8002c9c:	ed93 7a00 	vldr	s14, [r3]
 8002ca0:	4b4c      	ldr	r3, [pc, #304]	; (8002dd4 <TrajectoryGenerator+0xa14>)
 8002ca2:	edd3 7a00 	vldr	s15, [r3]
 8002ca6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002caa:	4b4b      	ldr	r3, [pc, #300]	; (8002dd8 <TrajectoryGenerator+0xa18>)
 8002cac:	edd3 7a00 	vldr	s15, [r3]
 8002cb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cb4:	4b49      	ldr	r3, [pc, #292]	; (8002ddc <TrajectoryGenerator+0xa1c>)
 8002cb6:	edd3 7a00 	vldr	s15, [r3]
 8002cba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cbe:	4b48      	ldr	r3, [pc, #288]	; (8002de0 <TrajectoryGenerator+0xa20>)
 8002cc0:	edd3 7a00 	vldr	s15, [r3]
 8002cc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cc8:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <TrajectoryGenerator+0xa28>)
 8002cca:	edd3 7a00 	vldr	s15, [r3]
 8002cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd2:	ee17 0a90 	vmov	r0, s15
 8002cd6:	f7fd fbe3 	bl	80004a0 <__aeabi_f2d>
 8002cda:	4604      	mov	r4, r0
 8002cdc:	460d      	mov	r5, r1
 8002cde:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <TrajectoryGenerator+0xa0c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fd fbdc 	bl	80004a0 <__aeabi_f2d>
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	4b3f      	ldr	r3, [pc, #252]	; (8002dec <TrajectoryGenerator+0xa2c>)
 8002cee:	f7fd fc2f 	bl	8000550 <__aeabi_dmul>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4690      	mov	r8, r2
 8002cf8:	4699      	mov	r9, r3
 8002cfa:	4b35      	ldr	r3, [pc, #212]	; (8002dd0 <TrajectoryGenerator+0xa10>)
 8002cfc:	ed93 7a00 	vldr	s14, [r3]
 8002d00:	4b34      	ldr	r3, [pc, #208]	; (8002dd4 <TrajectoryGenerator+0xa14>)
 8002d02:	edd3 7a00 	vldr	s15, [r3]
 8002d06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d0a:	4b33      	ldr	r3, [pc, #204]	; (8002dd8 <TrajectoryGenerator+0xa18>)
 8002d0c:	edd3 7a00 	vldr	s15, [r3]
 8002d10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d14:	4b31      	ldr	r3, [pc, #196]	; (8002ddc <TrajectoryGenerator+0xa1c>)
 8002d16:	edd3 7a00 	vldr	s15, [r3]
 8002d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d1e:	ee17 0a90 	vmov	r0, s15
 8002d22:	f7fd fbbd 	bl	80004a0 <__aeabi_f2d>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4640      	mov	r0, r8
 8002d2c:	4649      	mov	r1, r9
 8002d2e:	f7fd fc0f 	bl	8000550 <__aeabi_dmul>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4690      	mov	r8, r2
 8002d38:	4699      	mov	r9, r3
 8002d3a:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <TrajectoryGenerator+0xa10>)
 8002d3c:	ed93 7a00 	vldr	s14, [r3]
 8002d40:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <TrajectoryGenerator+0xa14>)
 8002d42:	edd3 7a00 	vldr	s15, [r3]
 8002d46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d4a:	4b23      	ldr	r3, [pc, #140]	; (8002dd8 <TrajectoryGenerator+0xa18>)
 8002d4c:	edd3 7a00 	vldr	s15, [r3]
 8002d50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d54:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <TrajectoryGenerator+0xa1c>)
 8002d56:	edd3 7a00 	vldr	s15, [r3]
 8002d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d5e:	ee17 0a90 	vmov	r0, s15
 8002d62:	f7fd fb9d 	bl	80004a0 <__aeabi_f2d>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4640      	mov	r0, r8
 8002d6c:	4649      	mov	r1, r9
 8002d6e:	f7fd fbef 	bl	8000550 <__aeabi_dmul>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4620      	mov	r0, r4
 8002d78:	4629      	mov	r1, r5
 8002d7a:	f7fd fa33 	bl	80001e4 <__adddf3>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	f7fd feb3 	bl	8000af0 <__aeabi_d2f>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4a18      	ldr	r2, [pc, #96]	; (8002df0 <TrajectoryGenerator+0xa30>)
 8002d8e:	6013      	str	r3, [r2, #0]
		 time += 0.001;
 8002d90:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <TrajectoryGenerator+0xa10>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd fb83 	bl	80004a0 <__aeabi_f2d>
 8002d9a:	a309      	add	r3, pc, #36	; (adr r3, 8002dc0 <TrajectoryGenerator+0xa00>)
 8002d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da0:	f7fd fa20 	bl	80001e4 <__adddf3>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4610      	mov	r0, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	f7fd fea0 	bl	8000af0 <__aeabi_d2f>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <TrajectoryGenerator+0xa10>)
 8002db4:	6013      	str	r3, [r2, #0]
	 break;
 8002db6:	bf00      	nop
}
 8002db8:	bf00      	nop
 8002dba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dbe:	bf00      	nop
 8002dc0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002dc4:	3f50624d 	.word	0x3f50624d
 8002dc8:	2000000c 	.word	0x2000000c
 8002dcc:	20000314 	.word	0x20000314
 8002dd0:	200002b4 	.word	0x200002b4
 8002dd4:	200002c4 	.word	0x200002c4
 8002dd8:	200002dc 	.word	0x200002dc
 8002ddc:	200002e8 	.word	0x200002e8
 8002de0:	200002d0 	.word	0x200002d0
 8002de4:	20000310 	.word	0x20000310
 8002de8:	200002d8 	.word	0x200002d8
 8002dec:	3fe00000 	.word	0x3fe00000
 8002df0:	200002f4 	.word	0x200002f4

08002df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002df8:	b672      	cpsid	i
}
 8002dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dfc:	e7fe      	b.n	8002dfc <Error_Handler+0x8>
	...

08002e00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <HAL_MspInit+0x4c>)
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	4a0f      	ldr	r2, [pc, #60]	; (8002e4c <HAL_MspInit+0x4c>)
 8002e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e14:	6453      	str	r3, [r2, #68]	; 0x44
 8002e16:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <HAL_MspInit+0x4c>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1e:	607b      	str	r3, [r7, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	603b      	str	r3, [r7, #0]
 8002e26:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <HAL_MspInit+0x4c>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <HAL_MspInit+0x4c>)
 8002e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e30:	6413      	str	r3, [r2, #64]	; 0x40
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_MspInit+0x4c>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e3e:	2007      	movs	r0, #7
 8002e40:	f000 ffb2 	bl	8003da8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40023800 	.word	0x40023800

08002e50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	; 0x28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2f      	ldr	r2, [pc, #188]	; (8002f2c <HAL_ADC_MspInit+0xdc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d157      	bne.n	8002f22 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	4b2e      	ldr	r3, [pc, #184]	; (8002f30 <HAL_ADC_MspInit+0xe0>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	4a2d      	ldr	r2, [pc, #180]	; (8002f30 <HAL_ADC_MspInit+0xe0>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	6453      	str	r3, [r2, #68]	; 0x44
 8002e82:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <HAL_ADC_MspInit+0xe0>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <HAL_ADC_MspInit+0xe0>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	4a26      	ldr	r2, [pc, #152]	; (8002f30 <HAL_ADC_MspInit+0xe0>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <HAL_ADC_MspInit+0xe0>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb6:	f107 0314 	add.w	r3, r7, #20
 8002eba:	4619      	mov	r1, r3
 8002ebc:	481d      	ldr	r0, [pc, #116]	; (8002f34 <HAL_ADC_MspInit+0xe4>)
 8002ebe:	f001 fb25 	bl	800450c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_ADC_MspInit+0xe8>)
 8002ec4:	4a1d      	ldr	r2, [pc, #116]	; (8002f3c <HAL_ADC_MspInit+0xec>)
 8002ec6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <HAL_ADC_MspInit+0xe8>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ece:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <HAL_ADC_MspInit+0xe8>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed4:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <HAL_ADC_MspInit+0xe8>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002eda:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <HAL_ADC_MspInit+0xe8>)
 8002edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ee0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <HAL_ADC_MspInit+0xe8>)
 8002ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ee8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002eea:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <HAL_ADC_MspInit+0xe8>)
 8002eec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ef0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ef2:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <HAL_ADC_MspInit+0xe8>)
 8002ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ef8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002efa:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <HAL_ADC_MspInit+0xe8>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f00:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <HAL_ADC_MspInit+0xe8>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f06:	480c      	ldr	r0, [pc, #48]	; (8002f38 <HAL_ADC_MspInit+0xe8>)
 8002f08:	f000 ff90 	bl	8003e2c <HAL_DMA_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002f12:	f7ff ff6f 	bl	8002df4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a07      	ldr	r2, [pc, #28]	; (8002f38 <HAL_ADC_MspInit+0xe8>)
 8002f1a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f1c:	4a06      	ldr	r2, [pc, #24]	; (8002f38 <HAL_ADC_MspInit+0xe8>)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f22:	bf00      	nop
 8002f24:	3728      	adds	r7, #40	; 0x28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40012000 	.word	0x40012000
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40020000 	.word	0x40020000
 8002f38:	200000e8 	.word	0x200000e8
 8002f3c:	40026410 	.word	0x40026410

08002f40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a0b      	ldr	r2, [pc, #44]	; (8002f7c <HAL_TIM_PWM_MspInit+0x3c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d10d      	bne.n	8002f6e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <HAL_TIM_PWM_MspInit+0x40>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	4a09      	ldr	r2, [pc, #36]	; (8002f80 <HAL_TIM_PWM_MspInit+0x40>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	6453      	str	r3, [r2, #68]	; 0x44
 8002f62:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <HAL_TIM_PWM_MspInit+0x40>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002f6e:	bf00      	nop
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	40023800 	.word	0x40023800

08002f84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 0314 	add.w	r3, r7, #20
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a19      	ldr	r2, [pc, #100]	; (8003008 <HAL_TIM_Encoder_MspInit+0x84>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d12b      	bne.n	8002ffe <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	4b18      	ldr	r3, [pc, #96]	; (800300c <HAL_TIM_Encoder_MspInit+0x88>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a17      	ldr	r2, [pc, #92]	; (800300c <HAL_TIM_Encoder_MspInit+0x88>)
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <HAL_TIM_Encoder_MspInit+0x88>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	4b11      	ldr	r3, [pc, #68]	; (800300c <HAL_TIM_Encoder_MspInit+0x88>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	4a10      	ldr	r2, [pc, #64]	; (800300c <HAL_TIM_Encoder_MspInit+0x88>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	; (800300c <HAL_TIM_Encoder_MspInit+0x88>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fde:	23c0      	movs	r3, #192	; 0xc0
 8002fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fea:	2300      	movs	r3, #0
 8002fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff2:	f107 0314 	add.w	r3, r7, #20
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4805      	ldr	r0, [pc, #20]	; (8003010 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002ffa:	f001 fa87 	bl	800450c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002ffe:	bf00      	nop
 8003000:	3728      	adds	r7, #40	; 0x28
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40000400 	.word	0x40000400
 800300c:	40023800 	.word	0x40023800
 8003010:	40020000 	.word	0x40020000

08003014 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a0e      	ldr	r2, [pc, #56]	; (800305c <HAL_TIM_Base_MspInit+0x48>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d115      	bne.n	8003052 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <HAL_TIM_Base_MspInit+0x4c>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	4a0c      	ldr	r2, [pc, #48]	; (8003060 <HAL_TIM_Base_MspInit+0x4c>)
 8003030:	f043 0308 	orr.w	r3, r3, #8
 8003034:	6413      	str	r3, [r2, #64]	; 0x40
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <HAL_TIM_Base_MspInit+0x4c>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003042:	2200      	movs	r2, #0
 8003044:	2100      	movs	r1, #0
 8003046:	2032      	movs	r0, #50	; 0x32
 8003048:	f000 feb9 	bl	8003dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800304c:	2032      	movs	r0, #50	; 0x32
 800304e:	f000 fed2 	bl	8003df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40000c00 	.word	0x40000c00
 8003060:	40023800 	.word	0x40023800

08003064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	f107 030c 	add.w	r3, r7, #12
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a12      	ldr	r2, [pc, #72]	; (80030cc <HAL_TIM_MspPostInit+0x68>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d11e      	bne.n	80030c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_TIM_MspPostInit+0x6c>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	4a10      	ldr	r2, [pc, #64]	; (80030d0 <HAL_TIM_MspPostInit+0x6c>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	6313      	str	r3, [r2, #48]	; 0x30
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <HAL_TIM_MspPostInit+0x6c>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a8:	2302      	movs	r3, #2
 80030aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030b4:	2301      	movs	r3, #1
 80030b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b8:	f107 030c 	add.w	r3, r7, #12
 80030bc:	4619      	mov	r1, r3
 80030be:	4805      	ldr	r0, [pc, #20]	; (80030d4 <HAL_TIM_MspPostInit+0x70>)
 80030c0:	f001 fa24 	bl	800450c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80030c4:	bf00      	nop
 80030c6:	3720      	adds	r7, #32
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40020000 	.word	0x40020000

080030d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08c      	sub	sp, #48	; 0x30
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	f107 031c 	add.w	r3, r7, #28
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a41      	ldr	r2, [pc, #260]	; (80031fc <HAL_UART_MspInit+0x124>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d14b      	bne.n	8003192 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	4b40      	ldr	r3, [pc, #256]	; (8003200 <HAL_UART_MspInit+0x128>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	4a3f      	ldr	r2, [pc, #252]	; (8003200 <HAL_UART_MspInit+0x128>)
 8003104:	f043 0310 	orr.w	r3, r3, #16
 8003108:	6453      	str	r3, [r2, #68]	; 0x44
 800310a:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <HAL_UART_MspInit+0x128>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	4b39      	ldr	r3, [pc, #228]	; (8003200 <HAL_UART_MspInit+0x128>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	4a38      	ldr	r2, [pc, #224]	; (8003200 <HAL_UART_MspInit+0x128>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6313      	str	r3, [r2, #48]	; 0x30
 8003126:	4b36      	ldr	r3, [pc, #216]	; (8003200 <HAL_UART_MspInit+0x128>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	4b32      	ldr	r3, [pc, #200]	; (8003200 <HAL_UART_MspInit+0x128>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	4a31      	ldr	r2, [pc, #196]	; (8003200 <HAL_UART_MspInit+0x128>)
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	6313      	str	r3, [r2, #48]	; 0x30
 8003142:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <HAL_UART_MspInit+0x128>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800314e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003154:	2302      	movs	r3, #2
 8003156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800315c:	2303      	movs	r3, #3
 800315e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003160:	2307      	movs	r3, #7
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003164:	f107 031c 	add.w	r3, r7, #28
 8003168:	4619      	mov	r1, r3
 800316a:	4826      	ldr	r0, [pc, #152]	; (8003204 <HAL_UART_MspInit+0x12c>)
 800316c:	f001 f9ce 	bl	800450c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003174:	2302      	movs	r3, #2
 8003176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003178:	2300      	movs	r3, #0
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800317c:	2303      	movs	r3, #3
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003180:	2307      	movs	r3, #7
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003184:	f107 031c 	add.w	r3, r7, #28
 8003188:	4619      	mov	r1, r3
 800318a:	481f      	ldr	r0, [pc, #124]	; (8003208 <HAL_UART_MspInit+0x130>)
 800318c:	f001 f9be 	bl	800450c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003190:	e030      	b.n	80031f4 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1d      	ldr	r2, [pc, #116]	; (800320c <HAL_UART_MspInit+0x134>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d12b      	bne.n	80031f4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	4b17      	ldr	r3, [pc, #92]	; (8003200 <HAL_UART_MspInit+0x128>)
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	4a16      	ldr	r2, [pc, #88]	; (8003200 <HAL_UART_MspInit+0x128>)
 80031a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031aa:	6413      	str	r3, [r2, #64]	; 0x40
 80031ac:	4b14      	ldr	r3, [pc, #80]	; (8003200 <HAL_UART_MspInit+0x128>)
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b8:	2300      	movs	r3, #0
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	4b10      	ldr	r3, [pc, #64]	; (8003200 <HAL_UART_MspInit+0x128>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <HAL_UART_MspInit+0x128>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6313      	str	r3, [r2, #48]	; 0x30
 80031c8:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <HAL_UART_MspInit+0x128>)
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80031d4:	230c      	movs	r3, #12
 80031d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d8:	2302      	movs	r3, #2
 80031da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e0:	2303      	movs	r3, #3
 80031e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031e4:	2307      	movs	r3, #7
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e8:	f107 031c 	add.w	r3, r7, #28
 80031ec:	4619      	mov	r1, r3
 80031ee:	4805      	ldr	r0, [pc, #20]	; (8003204 <HAL_UART_MspInit+0x12c>)
 80031f0:	f001 f98c 	bl	800450c <HAL_GPIO_Init>
}
 80031f4:	bf00      	nop
 80031f6:	3730      	adds	r7, #48	; 0x30
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40011000 	.word	0x40011000
 8003200:	40023800 	.word	0x40023800
 8003204:	40020000 	.word	0x40020000
 8003208:	40020400 	.word	0x40020400
 800320c:	40004400 	.word	0x40004400

08003210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003214:	e7fe      	b.n	8003214 <NMI_Handler+0x4>

08003216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003216:	b480      	push	{r7}
 8003218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800321a:	e7fe      	b.n	800321a <HardFault_Handler+0x4>

0800321c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003220:	e7fe      	b.n	8003220 <MemManage_Handler+0x4>

08003222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003226:	e7fe      	b.n	8003226 <BusFault_Handler+0x4>

08003228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800322c:	e7fe      	b.n	800322c <UsageFault_Handler+0x4>

0800322e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800322e:	b480      	push	{r7}
 8003230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800324a:	b480      	push	{r7}
 800324c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800325c:	f000 f8b2 	bl	80033c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003260:	bf00      	nop
 8003262:	bd80      	pop	{r7, pc}

08003264 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003268:	2004      	movs	r0, #4
 800326a:	f001 fb05 	bl	8004878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}

08003272 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003276:	2008      	movs	r0, #8
 8003278:	f001 fafe 	bl	8004878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800327c:	bf00      	nop
 800327e:	bd80      	pop	{r7, pc}

08003280 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003284:	4802      	ldr	r0, [pc, #8]	; (8003290 <TIM5_IRQHandler+0x10>)
 8003286:	f002 fa85 	bl	8005794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	200001d8 	.word	0x200001d8

08003294 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003298:	4802      	ldr	r0, [pc, #8]	; (80032a4 <DMA2_Stream0_IRQHandler+0x10>)
 800329a:	f000 fecd 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	200000e8 	.word	0x200000e8

080032a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032ac:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <SystemInit+0x20>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <SystemInit+0x20>)
 80032b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032bc:	bf00      	nop
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 80032cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003304 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032d0:	480d      	ldr	r0, [pc, #52]	; (8003308 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032d2:	490e      	ldr	r1, [pc, #56]	; (800330c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032d4:	4a0e      	ldr	r2, [pc, #56]	; (8003310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032d8:	e002      	b.n	80032e0 <LoopCopyDataInit>

080032da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032de:	3304      	adds	r3, #4

080032e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e4:	d3f9      	bcc.n	80032da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032e6:	4a0b      	ldr	r2, [pc, #44]	; (8003314 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032e8:	4c0b      	ldr	r4, [pc, #44]	; (8003318 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032ec:	e001      	b.n	80032f2 <LoopFillZerobss>

080032ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032f0:	3204      	adds	r2, #4

080032f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f4:	d3fb      	bcc.n	80032ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032f6:	f7ff ffd7 	bl	80032a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032fa:	f003 fb77 	bl	80069ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032fe:	f7fd fdcb 	bl	8000e98 <main>
  bx  lr    
 8003302:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 8003304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800330c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8003310:	08006c8c 	.word	0x08006c8c
  ldr r2, =_sbss
 8003314:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8003318:	2000042c 	.word	0x2000042c

0800331c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800331c:	e7fe      	b.n	800331c <ADC_IRQHandler>
	...

08003320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <HAL_Init+0x40>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a0d      	ldr	r2, [pc, #52]	; (8003360 <HAL_Init+0x40>)
 800332a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800332e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_Init+0x40>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <HAL_Init+0x40>)
 8003336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800333a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_Init+0x40>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a07      	ldr	r2, [pc, #28]	; (8003360 <HAL_Init+0x40>)
 8003342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003348:	2003      	movs	r0, #3
 800334a:	f000 fd2d 	bl	8003da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800334e:	2000      	movs	r0, #0
 8003350:	f000 f808 	bl	8003364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003354:	f7ff fd54 	bl	8002e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40023c00 	.word	0x40023c00

08003364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800336c:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <HAL_InitTick+0x54>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_InitTick+0x58>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	4619      	mov	r1, r3
 8003376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800337a:	fbb3 f3f1 	udiv	r3, r3, r1
 800337e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fd45 	bl	8003e12 <HAL_SYSTICK_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e00e      	b.n	80033b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b0f      	cmp	r3, #15
 8003396:	d80a      	bhi.n	80033ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003398:	2200      	movs	r2, #0
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	f04f 30ff 	mov.w	r0, #4294967295
 80033a0:	f000 fd0d 	bl	8003dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033a4:	4a06      	ldr	r2, [pc, #24]	; (80033c0 <HAL_InitTick+0x5c>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	e000      	b.n	80033b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000014 	.word	0x20000014
 80033bc:	2000001c 	.word	0x2000001c
 80033c0:	20000018 	.word	0x20000018

080033c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_IncTick+0x20>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_IncTick+0x24>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4413      	add	r3, r2
 80033d4:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <HAL_IncTick+0x24>)
 80033d6:	6013      	str	r3, [r2, #0]
}
 80033d8:	bf00      	nop
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	2000001c 	.word	0x2000001c
 80033e8:	20000428 	.word	0x20000428

080033ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return uwTick;
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <HAL_GetTick+0x14>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20000428 	.word	0x20000428

08003404 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e033      	b.n	8003482 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d109      	bne.n	8003436 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff fd14 	bl	8002e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b00      	cmp	r3, #0
 8003440:	d118      	bne.n	8003474 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800344a:	f023 0302 	bic.w	r3, r3, #2
 800344e:	f043 0202 	orr.w	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa58 	bl	800390c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f023 0303 	bic.w	r3, r3, #3
 800346a:	f043 0201 	orr.w	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
 8003472:	e001      	b.n	8003478 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_ADC_Start_DMA+0x1e>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e0ce      	b.n	8003648 <HAL_ADC_Start_DMA+0x1bc>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d018      	beq.n	80034f2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034d0:	4b5f      	ldr	r3, [pc, #380]	; (8003650 <HAL_ADC_Start_DMA+0x1c4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a5f      	ldr	r2, [pc, #380]	; (8003654 <HAL_ADC_Start_DMA+0x1c8>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	0c9a      	lsrs	r2, r3, #18
 80034dc:	4613      	mov	r3, r2
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4413      	add	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034e4:	e002      	b.n	80034ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f9      	bne.n	80034e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003500:	d107      	bne.n	8003512 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003510:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	f040 8086 	bne.w	800362e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800352a:	f023 0301 	bic.w	r3, r3, #1
 800352e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800354c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800355c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003560:	d106      	bne.n	8003570 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f023 0206 	bic.w	r2, r3, #6
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	645a      	str	r2, [r3, #68]	; 0x44
 800356e:	e002      	b.n	8003576 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800357e:	4b36      	ldr	r3, [pc, #216]	; (8003658 <HAL_ADC_Start_DMA+0x1cc>)
 8003580:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	4a35      	ldr	r2, [pc, #212]	; (800365c <HAL_ADC_Start_DMA+0x1d0>)
 8003588:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	4a34      	ldr	r2, [pc, #208]	; (8003660 <HAL_ADC_Start_DMA+0x1d4>)
 8003590:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	4a33      	ldr	r2, [pc, #204]	; (8003664 <HAL_ADC_Start_DMA+0x1d8>)
 8003598:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80035a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80035b2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	334c      	adds	r3, #76	; 0x4c
 80035ce:	4619      	mov	r1, r3
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f000 fcd8 	bl	8003f88 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10f      	bne.n	8003604 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d129      	bne.n	8003646 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003600:	609a      	str	r2, [r3, #8]
 8003602:	e020      	b.n	8003646 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a17      	ldr	r2, [pc, #92]	; (8003668 <HAL_ADC_Start_DMA+0x1dc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d11b      	bne.n	8003646 <HAL_ADC_Start_DMA+0x1ba>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d114      	bne.n	8003646 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	e00b      	b.n	8003646 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f043 0210 	orr.w	r2, r3, #16
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	f043 0201 	orr.w	r2, r3, #1
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000014 	.word	0x20000014
 8003654:	431bde83 	.word	0x431bde83
 8003658:	40012300 	.word	0x40012300
 800365c:	08003b05 	.word	0x08003b05
 8003660:	08003bbf 	.word	0x08003bbf
 8003664:	08003bdb 	.word	0x08003bdb
 8003668:	40012000 	.word	0x40012000

0800366c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x1c>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e113      	b.n	80038ec <HAL_ADC_ConfigChannel+0x244>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b09      	cmp	r3, #9
 80036d2:	d925      	bls.n	8003720 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68d9      	ldr	r1, [r3, #12]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	b29b      	uxth	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	4613      	mov	r3, r2
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	4413      	add	r3, r2
 80036e8:	3b1e      	subs	r3, #30
 80036ea:	2207      	movs	r2, #7
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43da      	mvns	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	400a      	ands	r2, r1
 80036f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68d9      	ldr	r1, [r3, #12]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	b29b      	uxth	r3, r3
 800370a:	4618      	mov	r0, r3
 800370c:	4603      	mov	r3, r0
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	4403      	add	r3, r0
 8003712:	3b1e      	subs	r3, #30
 8003714:	409a      	lsls	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	e022      	b.n	8003766 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6919      	ldr	r1, [r3, #16]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	b29b      	uxth	r3, r3
 800372c:	461a      	mov	r2, r3
 800372e:	4613      	mov	r3, r2
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4413      	add	r3, r2
 8003734:	2207      	movs	r2, #7
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43da      	mvns	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	400a      	ands	r2, r1
 8003742:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6919      	ldr	r1, [r3, #16]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	4618      	mov	r0, r3
 8003756:	4603      	mov	r3, r0
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4403      	add	r3, r0
 800375c:	409a      	lsls	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b06      	cmp	r3, #6
 800376c:	d824      	bhi.n	80037b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	3b05      	subs	r3, #5
 8003780:	221f      	movs	r2, #31
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43da      	mvns	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	400a      	ands	r2, r1
 800378e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	b29b      	uxth	r3, r3
 800379c:	4618      	mov	r0, r3
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	3b05      	subs	r3, #5
 80037aa:	fa00 f203 	lsl.w	r2, r0, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	635a      	str	r2, [r3, #52]	; 0x34
 80037b6:	e04c      	b.n	8003852 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b0c      	cmp	r3, #12
 80037be:	d824      	bhi.n	800380a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	3b23      	subs	r3, #35	; 0x23
 80037d2:	221f      	movs	r2, #31
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43da      	mvns	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	400a      	ands	r2, r1
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	4618      	mov	r0, r3
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	3b23      	subs	r3, #35	; 0x23
 80037fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
 8003808:	e023      	b.n	8003852 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	3b41      	subs	r3, #65	; 0x41
 800381c:	221f      	movs	r2, #31
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43da      	mvns	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	400a      	ands	r2, r1
 800382a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	b29b      	uxth	r3, r3
 8003838:	4618      	mov	r0, r3
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	3b41      	subs	r3, #65	; 0x41
 8003846:	fa00 f203 	lsl.w	r2, r0, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003852:	4b29      	ldr	r3, [pc, #164]	; (80038f8 <HAL_ADC_ConfigChannel+0x250>)
 8003854:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a28      	ldr	r2, [pc, #160]	; (80038fc <HAL_ADC_ConfigChannel+0x254>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d10f      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x1d8>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b12      	cmp	r3, #18
 8003866:	d10b      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a1d      	ldr	r2, [pc, #116]	; (80038fc <HAL_ADC_ConfigChannel+0x254>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d12b      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x23a>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1c      	ldr	r2, [pc, #112]	; (8003900 <HAL_ADC_ConfigChannel+0x258>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d003      	beq.n	800389c <HAL_ADC_ConfigChannel+0x1f4>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b11      	cmp	r3, #17
 800389a:	d122      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a11      	ldr	r2, [pc, #68]	; (8003900 <HAL_ADC_ConfigChannel+0x258>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d111      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038be:	4b11      	ldr	r3, [pc, #68]	; (8003904 <HAL_ADC_ConfigChannel+0x25c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a11      	ldr	r2, [pc, #68]	; (8003908 <HAL_ADC_ConfigChannel+0x260>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	0c9a      	lsrs	r2, r3, #18
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038d4:	e002      	b.n	80038dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	3b01      	subs	r3, #1
 80038da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f9      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	40012300 	.word	0x40012300
 80038fc:	40012000 	.word	0x40012000
 8003900:	10000012 	.word	0x10000012
 8003904:	20000014 	.word	0x20000014
 8003908:	431bde83 	.word	0x431bde83

0800390c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003914:	4b79      	ldr	r3, [pc, #484]	; (8003afc <ADC_Init+0x1f0>)
 8003916:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	431a      	orrs	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003940:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6859      	ldr	r1, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	021a      	lsls	r2, r3, #8
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003964:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6899      	ldr	r1, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	4a58      	ldr	r2, [pc, #352]	; (8003b00 <ADC_Init+0x1f4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d022      	beq.n	80039ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6899      	ldr	r1, [r3, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6899      	ldr	r1, [r3, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	e00f      	b.n	8003a0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0202 	bic.w	r2, r2, #2
 8003a18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6899      	ldr	r1, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	7e1b      	ldrb	r3, [r3, #24]
 8003a24:	005a      	lsls	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01b      	beq.n	8003a70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6859      	ldr	r1, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	3b01      	subs	r3, #1
 8003a64:	035a      	lsls	r2, r3, #13
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	e007      	b.n	8003a80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	051a      	lsls	r2, r3, #20
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ab4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6899      	ldr	r1, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ac2:	025a      	lsls	r2, r3, #9
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ada:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6899      	ldr	r1, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	029a      	lsls	r2, r3, #10
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	609a      	str	r2, [r3, #8]
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	40012300 	.word	0x40012300
 8003b00:	0f000001 	.word	0x0f000001

08003b04 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b10:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d13c      	bne.n	8003b98 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d12b      	bne.n	8003b90 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d127      	bne.n	8003b90 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d006      	beq.n	8003b5c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d119      	bne.n	8003b90 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0220 	bic.w	r2, r2, #32
 8003b6a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d105      	bne.n	8003b90 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f043 0201 	orr.w	r2, r3, #1
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7ff fd6b 	bl	800366c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b96:	e00e      	b.n	8003bb6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7ff fd75 	bl	8003694 <HAL_ADC_ErrorCallback>
}
 8003baa:	e004      	b.n	8003bb6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
}
 8003bb6:	bf00      	nop
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f7ff fd57 	bl	8003680 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2240      	movs	r2, #64	; 0x40
 8003bec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	f043 0204 	orr.w	r2, r3, #4
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f7ff fd4a 	bl	8003694 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c18:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <__NVIC_SetPriorityGrouping+0x44>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c24:	4013      	ands	r3, r2
 8003c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c3a:	4a04      	ldr	r2, [pc, #16]	; (8003c4c <__NVIC_SetPriorityGrouping+0x44>)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	60d3      	str	r3, [r2, #12]
}
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c54:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <__NVIC_GetPriorityGrouping+0x18>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	0a1b      	lsrs	r3, r3, #8
 8003c5a:	f003 0307 	and.w	r3, r3, #7
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	e000ed00 	.word	0xe000ed00

08003c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	db0b      	blt.n	8003c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	f003 021f 	and.w	r2, r3, #31
 8003c84:	4907      	ldr	r1, [pc, #28]	; (8003ca4 <__NVIC_EnableIRQ+0x38>)
 8003c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	e000e100 	.word	0xe000e100

08003ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	6039      	str	r1, [r7, #0]
 8003cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	db0a      	blt.n	8003cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	490c      	ldr	r1, [pc, #48]	; (8003cf4 <__NVIC_SetPriority+0x4c>)
 8003cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc6:	0112      	lsls	r2, r2, #4
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	440b      	add	r3, r1
 8003ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cd0:	e00a      	b.n	8003ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4908      	ldr	r1, [pc, #32]	; (8003cf8 <__NVIC_SetPriority+0x50>)
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	3b04      	subs	r3, #4
 8003ce0:	0112      	lsls	r2, r2, #4
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	761a      	strb	r2, [r3, #24]
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	e000e100 	.word	0xe000e100
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b089      	sub	sp, #36	; 0x24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f1c3 0307 	rsb	r3, r3, #7
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	bf28      	it	cs
 8003d1a:	2304      	movcs	r3, #4
 8003d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	3304      	adds	r3, #4
 8003d22:	2b06      	cmp	r3, #6
 8003d24:	d902      	bls.n	8003d2c <NVIC_EncodePriority+0x30>
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	3b03      	subs	r3, #3
 8003d2a:	e000      	b.n	8003d2e <NVIC_EncodePriority+0x32>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d30:	f04f 32ff 	mov.w	r2, #4294967295
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43da      	mvns	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	401a      	ands	r2, r3
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d44:	f04f 31ff 	mov.w	r1, #4294967295
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4e:	43d9      	mvns	r1, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d54:	4313      	orrs	r3, r2
         );
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3724      	adds	r7, #36	; 0x24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d74:	d301      	bcc.n	8003d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d76:	2301      	movs	r3, #1
 8003d78:	e00f      	b.n	8003d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d7a:	4a0a      	ldr	r2, [pc, #40]	; (8003da4 <SysTick_Config+0x40>)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d82:	210f      	movs	r1, #15
 8003d84:	f04f 30ff 	mov.w	r0, #4294967295
 8003d88:	f7ff ff8e 	bl	8003ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <SysTick_Config+0x40>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d92:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <SysTick_Config+0x40>)
 8003d94:	2207      	movs	r2, #7
 8003d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	e000e010 	.word	0xe000e010

08003da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff ff29 	bl	8003c08 <__NVIC_SetPriorityGrouping>
}
 8003db6:	bf00      	nop
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b086      	sub	sp, #24
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	607a      	str	r2, [r7, #4]
 8003dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dd0:	f7ff ff3e 	bl	8003c50 <__NVIC_GetPriorityGrouping>
 8003dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	6978      	ldr	r0, [r7, #20]
 8003ddc:	f7ff ff8e 	bl	8003cfc <NVIC_EncodePriority>
 8003de0:	4602      	mov	r2, r0
 8003de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff ff5d 	bl	8003ca8 <__NVIC_SetPriority>
}
 8003dee:	bf00      	nop
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b082      	sub	sp, #8
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff ff31 	bl	8003c6c <__NVIC_EnableIRQ>
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b082      	sub	sp, #8
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff ffa2 	bl	8003d64 <SysTick_Config>
 8003e20:	4603      	mov	r3, r0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e38:	f7ff fad8 	bl	80033ec <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e099      	b.n	8003f7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e68:	e00f      	b.n	8003e8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e6a:	f7ff fabf 	bl	80033ec <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b05      	cmp	r3, #5
 8003e76:	d908      	bls.n	8003e8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2203      	movs	r2, #3
 8003e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e078      	b.n	8003f7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e8      	bne.n	8003e6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4b38      	ldr	r3, [pc, #224]	; (8003f84 <HAL_DMA_Init+0x158>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ece:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d107      	bne.n	8003ef4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	4313      	orrs	r3, r2
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f023 0307 	bic.w	r3, r3, #7
 8003f0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d117      	bne.n	8003f4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00e      	beq.n	8003f4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fa6f 	bl	8004414 <DMA_CheckFifoParam>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2240      	movs	r2, #64	; 0x40
 8003f40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e016      	b.n	8003f7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fa26 	bl	80043a8 <DMA_CalcBaseAndBitshift>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f64:	223f      	movs	r2, #63	; 0x3f
 8003f66:	409a      	lsls	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	f010803f 	.word	0xf010803f

08003f88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_DMA_Start_IT+0x26>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e040      	b.n	8004030 <HAL_DMA_Start_IT+0xa8>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d12f      	bne.n	8004022 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f9b8 	bl	800434c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe0:	223f      	movs	r2, #63	; 0x3f
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0216 	orr.w	r2, r2, #22
 8003ff6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d007      	beq.n	8004010 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0208 	orr.w	r2, r2, #8
 800400e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	e005      	b.n	800402e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800402a:	2302      	movs	r3, #2
 800402c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800402e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004044:	4b8e      	ldr	r3, [pc, #568]	; (8004280 <HAL_DMA_IRQHandler+0x248>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a8e      	ldr	r2, [pc, #568]	; (8004284 <HAL_DMA_IRQHandler+0x24c>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	0a9b      	lsrs	r3, r3, #10
 8004050:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004056:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004062:	2208      	movs	r2, #8
 8004064:	409a      	lsls	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4013      	ands	r3, r2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d01a      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d013      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0204 	bic.w	r2, r2, #4
 800408a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004090:	2208      	movs	r2, #8
 8004092:	409a      	lsls	r2, r3
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	f043 0201 	orr.w	r2, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a8:	2201      	movs	r2, #1
 80040aa:	409a      	lsls	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d012      	beq.n	80040da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00b      	beq.n	80040da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c6:	2201      	movs	r2, #1
 80040c8:	409a      	lsls	r2, r3
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	f043 0202 	orr.w	r2, r3, #2
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040de:	2204      	movs	r2, #4
 80040e0:	409a      	lsls	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d012      	beq.n	8004110 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00b      	beq.n	8004110 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fc:	2204      	movs	r2, #4
 80040fe:	409a      	lsls	r2, r3
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004108:	f043 0204 	orr.w	r2, r3, #4
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004114:	2210      	movs	r2, #16
 8004116:	409a      	lsls	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d043      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d03c      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004132:	2210      	movs	r2, #16
 8004134:	409a      	lsls	r2, r3
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d018      	beq.n	800417a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d108      	bne.n	8004168 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d024      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	4798      	blx	r3
 8004166:	e01f      	b.n	80041a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01b      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	4798      	blx	r3
 8004178:	e016      	b.n	80041a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004184:	2b00      	cmp	r3, #0
 8004186:	d107      	bne.n	8004198 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0208 	bic.w	r2, r2, #8
 8004196:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ac:	2220      	movs	r2, #32
 80041ae:	409a      	lsls	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 808f 	beq.w	80042d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8087 	beq.w	80042d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ce:	2220      	movs	r2, #32
 80041d0:	409a      	lsls	r2, r3
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b05      	cmp	r3, #5
 80041e0:	d136      	bne.n	8004250 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0216 	bic.w	r2, r2, #22
 80041f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695a      	ldr	r2, [r3, #20]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004200:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	2b00      	cmp	r3, #0
 8004208:	d103      	bne.n	8004212 <HAL_DMA_IRQHandler+0x1da>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420e:	2b00      	cmp	r3, #0
 8004210:	d007      	beq.n	8004222 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0208 	bic.w	r2, r2, #8
 8004220:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004226:	223f      	movs	r2, #63	; 0x3f
 8004228:	409a      	lsls	r2, r3
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004242:	2b00      	cmp	r3, #0
 8004244:	d07e      	beq.n	8004344 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	4798      	blx	r3
        }
        return;
 800424e:	e079      	b.n	8004344 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01d      	beq.n	800429a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10d      	bne.n	8004288 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004270:	2b00      	cmp	r3, #0
 8004272:	d031      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	4798      	blx	r3
 800427c:	e02c      	b.n	80042d8 <HAL_DMA_IRQHandler+0x2a0>
 800427e:	bf00      	nop
 8004280:	20000014 	.word	0x20000014
 8004284:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d023      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4798      	blx	r3
 8004298:	e01e      	b.n	80042d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10f      	bne.n	80042c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0210 	bic.w	r2, r2, #16
 80042b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d032      	beq.n	8004346 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d022      	beq.n	8004332 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2205      	movs	r2, #5
 80042f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	3301      	adds	r3, #1
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	429a      	cmp	r2, r3
 800430e:	d307      	bcc.n	8004320 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f2      	bne.n	8004304 <HAL_DMA_IRQHandler+0x2cc>
 800431e:	e000      	b.n	8004322 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004320:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	4798      	blx	r3
 8004342:	e000      	b.n	8004346 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004344:	bf00      	nop
    }
  }
}
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004368:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b40      	cmp	r3, #64	; 0x40
 8004378:	d108      	bne.n	800438c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800438a:	e007      	b.n	800439c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	60da      	str	r2, [r3, #12]
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	3b10      	subs	r3, #16
 80043b8:	4a14      	ldr	r2, [pc, #80]	; (800440c <DMA_CalcBaseAndBitshift+0x64>)
 80043ba:	fba2 2303 	umull	r2, r3, r2, r3
 80043be:	091b      	lsrs	r3, r3, #4
 80043c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043c2:	4a13      	ldr	r2, [pc, #76]	; (8004410 <DMA_CalcBaseAndBitshift+0x68>)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	d909      	bls.n	80043ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043de:	f023 0303 	bic.w	r3, r3, #3
 80043e2:	1d1a      	adds	r2, r3, #4
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	659a      	str	r2, [r3, #88]	; 0x58
 80043e8:	e007      	b.n	80043fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	aaaaaaab 	.word	0xaaaaaaab
 8004410:	08006c74 	.word	0x08006c74

08004414 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d11f      	bne.n	800446e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b03      	cmp	r3, #3
 8004432:	d856      	bhi.n	80044e2 <DMA_CheckFifoParam+0xce>
 8004434:	a201      	add	r2, pc, #4	; (adr r2, 800443c <DMA_CheckFifoParam+0x28>)
 8004436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443a:	bf00      	nop
 800443c:	0800444d 	.word	0x0800444d
 8004440:	0800445f 	.word	0x0800445f
 8004444:	0800444d 	.word	0x0800444d
 8004448:	080044e3 	.word	0x080044e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d046      	beq.n	80044e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800445c:	e043      	b.n	80044e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004466:	d140      	bne.n	80044ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800446c:	e03d      	b.n	80044ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004476:	d121      	bne.n	80044bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b03      	cmp	r3, #3
 800447c:	d837      	bhi.n	80044ee <DMA_CheckFifoParam+0xda>
 800447e:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <DMA_CheckFifoParam+0x70>)
 8004480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004484:	08004495 	.word	0x08004495
 8004488:	0800449b 	.word	0x0800449b
 800448c:	08004495 	.word	0x08004495
 8004490:	080044ad 	.word	0x080044ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
      break;
 8004498:	e030      	b.n	80044fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d025      	beq.n	80044f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044aa:	e022      	b.n	80044f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044b4:	d11f      	bne.n	80044f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044ba:	e01c      	b.n	80044f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d903      	bls.n	80044ca <DMA_CheckFifoParam+0xb6>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	d003      	beq.n	80044d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044c8:	e018      	b.n	80044fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	73fb      	strb	r3, [r7, #15]
      break;
 80044ce:	e015      	b.n	80044fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00e      	beq.n	80044fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	73fb      	strb	r3, [r7, #15]
      break;
 80044e0:	e00b      	b.n	80044fa <DMA_CheckFifoParam+0xe6>
      break;
 80044e2:	bf00      	nop
 80044e4:	e00a      	b.n	80044fc <DMA_CheckFifoParam+0xe8>
      break;
 80044e6:	bf00      	nop
 80044e8:	e008      	b.n	80044fc <DMA_CheckFifoParam+0xe8>
      break;
 80044ea:	bf00      	nop
 80044ec:	e006      	b.n	80044fc <DMA_CheckFifoParam+0xe8>
      break;
 80044ee:	bf00      	nop
 80044f0:	e004      	b.n	80044fc <DMA_CheckFifoParam+0xe8>
      break;
 80044f2:	bf00      	nop
 80044f4:	e002      	b.n	80044fc <DMA_CheckFifoParam+0xe8>
      break;   
 80044f6:	bf00      	nop
 80044f8:	e000      	b.n	80044fc <DMA_CheckFifoParam+0xe8>
      break;
 80044fa:	bf00      	nop
    }
  } 
  
  return status; 
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop

0800450c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800450c:	b480      	push	{r7}
 800450e:	b089      	sub	sp, #36	; 0x24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800451a:	2300      	movs	r3, #0
 800451c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800451e:	2300      	movs	r3, #0
 8004520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004522:	2300      	movs	r3, #0
 8004524:	61fb      	str	r3, [r7, #28]
 8004526:	e159      	b.n	80047dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004528:	2201      	movs	r2, #1
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4013      	ands	r3, r2
 800453a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	429a      	cmp	r2, r3
 8004542:	f040 8148 	bne.w	80047d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b01      	cmp	r3, #1
 8004550:	d005      	beq.n	800455e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800455a:	2b02      	cmp	r3, #2
 800455c:	d130      	bne.n	80045c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	2203      	movs	r2, #3
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43db      	mvns	r3, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4013      	ands	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004594:	2201      	movs	r2, #1
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	43db      	mvns	r3, r3
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4013      	ands	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	091b      	lsrs	r3, r3, #4
 80045aa:	f003 0201 	and.w	r2, r3, #1
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d017      	beq.n	80045fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	2203      	movs	r2, #3
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	43db      	mvns	r3, r3
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4013      	ands	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 0303 	and.w	r3, r3, #3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d123      	bne.n	8004650 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	08da      	lsrs	r2, r3, #3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3208      	adds	r2, #8
 8004610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004614:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	220f      	movs	r2, #15
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	43db      	mvns	r3, r3
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4013      	ands	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4313      	orrs	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	08da      	lsrs	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3208      	adds	r2, #8
 800464a:	69b9      	ldr	r1, [r7, #24]
 800464c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	2203      	movs	r2, #3
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	43db      	mvns	r3, r3
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	4013      	ands	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f003 0203 	and.w	r2, r3, #3
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4313      	orrs	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 80a2 	beq.w	80047d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	4b57      	ldr	r3, [pc, #348]	; (80047f4 <HAL_GPIO_Init+0x2e8>)
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	4a56      	ldr	r2, [pc, #344]	; (80047f4 <HAL_GPIO_Init+0x2e8>)
 800469c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046a0:	6453      	str	r3, [r2, #68]	; 0x44
 80046a2:	4b54      	ldr	r3, [pc, #336]	; (80047f4 <HAL_GPIO_Init+0x2e8>)
 80046a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046ae:	4a52      	ldr	r2, [pc, #328]	; (80047f8 <HAL_GPIO_Init+0x2ec>)
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	089b      	lsrs	r3, r3, #2
 80046b4:	3302      	adds	r3, #2
 80046b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	220f      	movs	r2, #15
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43db      	mvns	r3, r3
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4013      	ands	r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a49      	ldr	r2, [pc, #292]	; (80047fc <HAL_GPIO_Init+0x2f0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d019      	beq.n	800470e <HAL_GPIO_Init+0x202>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a48      	ldr	r2, [pc, #288]	; (8004800 <HAL_GPIO_Init+0x2f4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d013      	beq.n	800470a <HAL_GPIO_Init+0x1fe>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a47      	ldr	r2, [pc, #284]	; (8004804 <HAL_GPIO_Init+0x2f8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00d      	beq.n	8004706 <HAL_GPIO_Init+0x1fa>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a46      	ldr	r2, [pc, #280]	; (8004808 <HAL_GPIO_Init+0x2fc>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d007      	beq.n	8004702 <HAL_GPIO_Init+0x1f6>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a45      	ldr	r2, [pc, #276]	; (800480c <HAL_GPIO_Init+0x300>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d101      	bne.n	80046fe <HAL_GPIO_Init+0x1f2>
 80046fa:	2304      	movs	r3, #4
 80046fc:	e008      	b.n	8004710 <HAL_GPIO_Init+0x204>
 80046fe:	2307      	movs	r3, #7
 8004700:	e006      	b.n	8004710 <HAL_GPIO_Init+0x204>
 8004702:	2303      	movs	r3, #3
 8004704:	e004      	b.n	8004710 <HAL_GPIO_Init+0x204>
 8004706:	2302      	movs	r3, #2
 8004708:	e002      	b.n	8004710 <HAL_GPIO_Init+0x204>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <HAL_GPIO_Init+0x204>
 800470e:	2300      	movs	r3, #0
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	f002 0203 	and.w	r2, r2, #3
 8004716:	0092      	lsls	r2, r2, #2
 8004718:	4093      	lsls	r3, r2
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4313      	orrs	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004720:	4935      	ldr	r1, [pc, #212]	; (80047f8 <HAL_GPIO_Init+0x2ec>)
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	089b      	lsrs	r3, r3, #2
 8004726:	3302      	adds	r3, #2
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800472e:	4b38      	ldr	r3, [pc, #224]	; (8004810 <HAL_GPIO_Init+0x304>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	43db      	mvns	r3, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4013      	ands	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004752:	4a2f      	ldr	r2, [pc, #188]	; (8004810 <HAL_GPIO_Init+0x304>)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004758:	4b2d      	ldr	r3, [pc, #180]	; (8004810 <HAL_GPIO_Init+0x304>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800477c:	4a24      	ldr	r2, [pc, #144]	; (8004810 <HAL_GPIO_Init+0x304>)
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004782:	4b23      	ldr	r3, [pc, #140]	; (8004810 <HAL_GPIO_Init+0x304>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	43db      	mvns	r3, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4013      	ands	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047a6:	4a1a      	ldr	r2, [pc, #104]	; (8004810 <HAL_GPIO_Init+0x304>)
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047ac:	4b18      	ldr	r3, [pc, #96]	; (8004810 <HAL_GPIO_Init+0x304>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	43db      	mvns	r3, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4013      	ands	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047d0:	4a0f      	ldr	r2, [pc, #60]	; (8004810 <HAL_GPIO_Init+0x304>)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	3301      	adds	r3, #1
 80047da:	61fb      	str	r3, [r7, #28]
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	2b0f      	cmp	r3, #15
 80047e0:	f67f aea2 	bls.w	8004528 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
 80047e8:	3724      	adds	r7, #36	; 0x24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800
 80047f8:	40013800 	.word	0x40013800
 80047fc:	40020000 	.word	0x40020000
 8004800:	40020400 	.word	0x40020400
 8004804:	40020800 	.word	0x40020800
 8004808:	40020c00 	.word	0x40020c00
 800480c:	40021000 	.word	0x40021000
 8004810:	40013c00 	.word	0x40013c00

08004814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	887b      	ldrh	r3, [r7, #2]
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
 8004830:	e001      	b.n	8004836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004832:	2300      	movs	r3, #0
 8004834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004836:	7bfb      	ldrb	r3, [r7, #15]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	807b      	strh	r3, [r7, #2]
 8004850:	4613      	mov	r3, r2
 8004852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004854:	787b      	ldrb	r3, [r7, #1]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800485a:	887a      	ldrh	r2, [r7, #2]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004860:	e003      	b.n	800486a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004862:	887b      	ldrh	r3, [r7, #2]
 8004864:	041a      	lsls	r2, r3, #16
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	619a      	str	r2, [r3, #24]
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
	...

08004878 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004882:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004884:	695a      	ldr	r2, [r3, #20]
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	4013      	ands	r3, r2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d006      	beq.n	800489c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800488e:	4a05      	ldr	r2, [pc, #20]	; (80048a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004890:	88fb      	ldrh	r3, [r7, #6]
 8004892:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004894:	88fb      	ldrh	r3, [r7, #6]
 8004896:	4618      	mov	r0, r3
 8004898:	f7fc ff38 	bl	800170c <HAL_GPIO_EXTI_Callback>
  }
}
 800489c:	bf00      	nop
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40013c00 	.word	0x40013c00

080048a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e267      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d075      	beq.n	80049b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048c6:	4b88      	ldr	r3, [pc, #544]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d00c      	beq.n	80048ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048d2:	4b85      	ldr	r3, [pc, #532]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d112      	bne.n	8004904 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048de:	4b82      	ldr	r3, [pc, #520]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ea:	d10b      	bne.n	8004904 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ec:	4b7e      	ldr	r3, [pc, #504]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d05b      	beq.n	80049b0 <HAL_RCC_OscConfig+0x108>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d157      	bne.n	80049b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e242      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490c:	d106      	bne.n	800491c <HAL_RCC_OscConfig+0x74>
 800490e:	4b76      	ldr	r3, [pc, #472]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a75      	ldr	r2, [pc, #468]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	e01d      	b.n	8004958 <HAL_RCC_OscConfig+0xb0>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004924:	d10c      	bne.n	8004940 <HAL_RCC_OscConfig+0x98>
 8004926:	4b70      	ldr	r3, [pc, #448]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a6f      	ldr	r2, [pc, #444]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 800492c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	4b6d      	ldr	r3, [pc, #436]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6c      	ldr	r2, [pc, #432]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	e00b      	b.n	8004958 <HAL_RCC_OscConfig+0xb0>
 8004940:	4b69      	ldr	r3, [pc, #420]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a68      	ldr	r2, [pc, #416]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	4b66      	ldr	r3, [pc, #408]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a65      	ldr	r2, [pc, #404]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d013      	beq.n	8004988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004960:	f7fe fd44 	bl	80033ec <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004968:	f7fe fd40 	bl	80033ec <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b64      	cmp	r3, #100	; 0x64
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e207      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497a:	4b5b      	ldr	r3, [pc, #364]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0xc0>
 8004986:	e014      	b.n	80049b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004988:	f7fe fd30 	bl	80033ec <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004990:	f7fe fd2c 	bl	80033ec <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b64      	cmp	r3, #100	; 0x64
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e1f3      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a2:	4b51      	ldr	r3, [pc, #324]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCC_OscConfig+0xe8>
 80049ae:	e000      	b.n	80049b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d063      	beq.n	8004a86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049be:	4b4a      	ldr	r3, [pc, #296]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00b      	beq.n	80049e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ca:	4b47      	ldr	r3, [pc, #284]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d11c      	bne.n	8004a10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d6:	4b44      	ldr	r3, [pc, #272]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d116      	bne.n	8004a10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e2:	4b41      	ldr	r3, [pc, #260]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d005      	beq.n	80049fa <HAL_RCC_OscConfig+0x152>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d001      	beq.n	80049fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e1c7      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049fa:	4b3b      	ldr	r3, [pc, #236]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	4937      	ldr	r1, [pc, #220]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a0e:	e03a      	b.n	8004a86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d020      	beq.n	8004a5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a18:	4b34      	ldr	r3, [pc, #208]	; (8004aec <HAL_RCC_OscConfig+0x244>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1e:	f7fe fce5 	bl	80033ec <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a26:	f7fe fce1 	bl	80033ec <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e1a8      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a38:	4b2b      	ldr	r3, [pc, #172]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f0      	beq.n	8004a26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a44:	4b28      	ldr	r3, [pc, #160]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	4925      	ldr	r1, [pc, #148]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	600b      	str	r3, [r1, #0]
 8004a58:	e015      	b.n	8004a86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a5a:	4b24      	ldr	r3, [pc, #144]	; (8004aec <HAL_RCC_OscConfig+0x244>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7fe fcc4 	bl	80033ec <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a68:	f7fe fcc0 	bl	80033ec <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e187      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d036      	beq.n	8004b00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d016      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a9a:	4b15      	ldr	r3, [pc, #84]	; (8004af0 <HAL_RCC_OscConfig+0x248>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa0:	f7fe fca4 	bl	80033ec <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aa8:	f7fe fca0 	bl	80033ec <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e167      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aba:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <HAL_RCC_OscConfig+0x240>)
 8004abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x200>
 8004ac6:	e01b      	b.n	8004b00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac8:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <HAL_RCC_OscConfig+0x248>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ace:	f7fe fc8d 	bl	80033ec <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad4:	e00e      	b.n	8004af4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ad6:	f7fe fc89 	bl	80033ec <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d907      	bls.n	8004af4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e150      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	42470000 	.word	0x42470000
 8004af0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af4:	4b88      	ldr	r3, [pc, #544]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1ea      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8097 	beq.w	8004c3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b12:	4b81      	ldr	r3, [pc, #516]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10f      	bne.n	8004b3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	4b7d      	ldr	r3, [pc, #500]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	4a7c      	ldr	r2, [pc, #496]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b2e:	4b7a      	ldr	r3, [pc, #488]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b36:	60bb      	str	r3, [r7, #8]
 8004b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3e:	4b77      	ldr	r3, [pc, #476]	; (8004d1c <HAL_RCC_OscConfig+0x474>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d118      	bne.n	8004b7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b4a:	4b74      	ldr	r3, [pc, #464]	; (8004d1c <HAL_RCC_OscConfig+0x474>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a73      	ldr	r2, [pc, #460]	; (8004d1c <HAL_RCC_OscConfig+0x474>)
 8004b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b56:	f7fe fc49 	bl	80033ec <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5e:	f7fe fc45 	bl	80033ec <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e10c      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b70:	4b6a      	ldr	r3, [pc, #424]	; (8004d1c <HAL_RCC_OscConfig+0x474>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d106      	bne.n	8004b92 <HAL_RCC_OscConfig+0x2ea>
 8004b84:	4b64      	ldr	r3, [pc, #400]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b88:	4a63      	ldr	r2, [pc, #396]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b90:	e01c      	b.n	8004bcc <HAL_RCC_OscConfig+0x324>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	2b05      	cmp	r3, #5
 8004b98:	d10c      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x30c>
 8004b9a:	4b5f      	ldr	r3, [pc, #380]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9e:	4a5e      	ldr	r2, [pc, #376]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004ba0:	f043 0304 	orr.w	r3, r3, #4
 8004ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba6:	4b5c      	ldr	r3, [pc, #368]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004baa:	4a5b      	ldr	r2, [pc, #364]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb2:	e00b      	b.n	8004bcc <HAL_RCC_OscConfig+0x324>
 8004bb4:	4b58      	ldr	r3, [pc, #352]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	4a57      	ldr	r2, [pc, #348]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc0:	4b55      	ldr	r3, [pc, #340]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	4a54      	ldr	r2, [pc, #336]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bc6:	f023 0304 	bic.w	r3, r3, #4
 8004bca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d015      	beq.n	8004c00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd4:	f7fe fc0a 	bl	80033ec <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bda:	e00a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bdc:	f7fe fc06 	bl	80033ec <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e0cb      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf2:	4b49      	ldr	r3, [pc, #292]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0ee      	beq.n	8004bdc <HAL_RCC_OscConfig+0x334>
 8004bfe:	e014      	b.n	8004c2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c00:	f7fe fbf4 	bl	80033ec <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c06:	e00a      	b.n	8004c1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c08:	f7fe fbf0 	bl	80033ec <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e0b5      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c1e:	4b3e      	ldr	r3, [pc, #248]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1ee      	bne.n	8004c08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d105      	bne.n	8004c3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c30:	4b39      	ldr	r3, [pc, #228]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	4a38      	ldr	r2, [pc, #224]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 80a1 	beq.w	8004d88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c46:	4b34      	ldr	r3, [pc, #208]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d05c      	beq.n	8004d0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d141      	bne.n	8004cde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5a:	4b31      	ldr	r3, [pc, #196]	; (8004d20 <HAL_RCC_OscConfig+0x478>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c60:	f7fe fbc4 	bl	80033ec <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c68:	f7fe fbc0 	bl	80033ec <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e087      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7a:	4b27      	ldr	r3, [pc, #156]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f0      	bne.n	8004c68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69da      	ldr	r2, [r3, #28]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	019b      	lsls	r3, r3, #6
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	041b      	lsls	r3, r3, #16
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	061b      	lsls	r3, r3, #24
 8004caa:	491b      	ldr	r1, [pc, #108]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cb0:	4b1b      	ldr	r3, [pc, #108]	; (8004d20 <HAL_RCC_OscConfig+0x478>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb6:	f7fe fb99 	bl	80033ec <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cbe:	f7fe fb95 	bl	80033ec <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e05c      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd0:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0f0      	beq.n	8004cbe <HAL_RCC_OscConfig+0x416>
 8004cdc:	e054      	b.n	8004d88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cde:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <HAL_RCC_OscConfig+0x478>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7fe fb82 	bl	80033ec <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cec:	f7fe fb7e 	bl	80033ec <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e045      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfe:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <HAL_RCC_OscConfig+0x470>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0x444>
 8004d0a:	e03d      	b.n	8004d88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d107      	bne.n	8004d24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e038      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	40007000 	.word	0x40007000
 8004d20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d24:	4b1b      	ldr	r3, [pc, #108]	; (8004d94 <HAL_RCC_OscConfig+0x4ec>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d028      	beq.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d121      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d11a      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d54:	4013      	ands	r3, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d111      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	085b      	lsrs	r3, r3, #1
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d107      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d001      	beq.n	8004d88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40023800 	.word	0x40023800

08004d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e0cc      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dac:	4b68      	ldr	r3, [pc, #416]	; (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d90c      	bls.n	8004dd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dba:	4b65      	ldr	r3, [pc, #404]	; (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc2:	4b63      	ldr	r3, [pc, #396]	; (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d001      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e0b8      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d020      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dec:	4b59      	ldr	r3, [pc, #356]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4a58      	ldr	r2, [pc, #352]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004df6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e04:	4b53      	ldr	r3, [pc, #332]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	4a52      	ldr	r2, [pc, #328]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e10:	4b50      	ldr	r3, [pc, #320]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	494d      	ldr	r1, [pc, #308]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d044      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d107      	bne.n	8004e46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e36:	4b47      	ldr	r3, [pc, #284]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d119      	bne.n	8004e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e07f      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d003      	beq.n	8004e56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d107      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e56:	4b3f      	ldr	r3, [pc, #252]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d109      	bne.n	8004e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e06f      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e66:	4b3b      	ldr	r3, [pc, #236]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e067      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e76:	4b37      	ldr	r3, [pc, #220]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f023 0203 	bic.w	r2, r3, #3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	4934      	ldr	r1, [pc, #208]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e88:	f7fe fab0 	bl	80033ec <HAL_GetTick>
 8004e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8e:	e00a      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e90:	f7fe faac 	bl	80033ec <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e04f      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea6:	4b2b      	ldr	r3, [pc, #172]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 020c 	and.w	r2, r3, #12
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d1eb      	bne.n	8004e90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eb8:	4b25      	ldr	r3, [pc, #148]	; (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d20c      	bcs.n	8004ee0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec6:	4b22      	ldr	r3, [pc, #136]	; (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e032      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eec:	4b19      	ldr	r3, [pc, #100]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4916      	ldr	r1, [pc, #88]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d009      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f0a:	4b12      	ldr	r3, [pc, #72]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	490e      	ldr	r1, [pc, #56]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f1e:	f000 f821 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 8004f22:	4602      	mov	r2, r0
 8004f24:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	091b      	lsrs	r3, r3, #4
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	490a      	ldr	r1, [pc, #40]	; (8004f58 <HAL_RCC_ClockConfig+0x1c0>)
 8004f30:	5ccb      	ldrb	r3, [r1, r3]
 8004f32:	fa22 f303 	lsr.w	r3, r2, r3
 8004f36:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <HAL_RCC_ClockConfig+0x1c4>)
 8004f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f3a:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fe fa10 	bl	8003364 <HAL_InitTick>

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40023c00 	.word	0x40023c00
 8004f54:	40023800 	.word	0x40023800
 8004f58:	08006c5c 	.word	0x08006c5c
 8004f5c:	20000014 	.word	0x20000014
 8004f60:	20000018 	.word	0x20000018

08004f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f68:	b094      	sub	sp, #80	; 0x50
 8004f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f70:	2300      	movs	r3, #0
 8004f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f74:	2300      	movs	r3, #0
 8004f76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f7c:	4b79      	ldr	r3, [pc, #484]	; (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 030c 	and.w	r3, r3, #12
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d00d      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	f200 80e1 	bhi.w	8005150 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x34>
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d003      	beq.n	8004f9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f96:	e0db      	b.n	8005150 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f98:	4b73      	ldr	r3, [pc, #460]	; (8005168 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004f9c:	e0db      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f9e:	4b73      	ldr	r3, [pc, #460]	; (800516c <HAL_RCC_GetSysClockFreq+0x208>)
 8004fa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fa2:	e0d8      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fa4:	4b6f      	ldr	r3, [pc, #444]	; (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fae:	4b6d      	ldr	r3, [pc, #436]	; (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d063      	beq.n	8005082 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fba:	4b6a      	ldr	r3, [pc, #424]	; (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	099b      	lsrs	r3, r3, #6
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8004fce:	2300      	movs	r3, #0
 8004fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	462b      	mov	r3, r5
 8004fda:	f04f 0000 	mov.w	r0, #0
 8004fde:	f04f 0100 	mov.w	r1, #0
 8004fe2:	0159      	lsls	r1, r3, #5
 8004fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fe8:	0150      	lsls	r0, r2, #5
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4621      	mov	r1, r4
 8004ff0:	1a51      	subs	r1, r2, r1
 8004ff2:	6139      	str	r1, [r7, #16]
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005008:	4659      	mov	r1, fp
 800500a:	018b      	lsls	r3, r1, #6
 800500c:	4651      	mov	r1, sl
 800500e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005012:	4651      	mov	r1, sl
 8005014:	018a      	lsls	r2, r1, #6
 8005016:	4651      	mov	r1, sl
 8005018:	ebb2 0801 	subs.w	r8, r2, r1
 800501c:	4659      	mov	r1, fp
 800501e:	eb63 0901 	sbc.w	r9, r3, r1
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800502e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005036:	4690      	mov	r8, r2
 8005038:	4699      	mov	r9, r3
 800503a:	4623      	mov	r3, r4
 800503c:	eb18 0303 	adds.w	r3, r8, r3
 8005040:	60bb      	str	r3, [r7, #8]
 8005042:	462b      	mov	r3, r5
 8005044:	eb49 0303 	adc.w	r3, r9, r3
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005056:	4629      	mov	r1, r5
 8005058:	024b      	lsls	r3, r1, #9
 800505a:	4621      	mov	r1, r4
 800505c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005060:	4621      	mov	r1, r4
 8005062:	024a      	lsls	r2, r1, #9
 8005064:	4610      	mov	r0, r2
 8005066:	4619      	mov	r1, r3
 8005068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800506a:	2200      	movs	r2, #0
 800506c:	62bb      	str	r3, [r7, #40]	; 0x28
 800506e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005070:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005074:	f7fb fd8c 	bl	8000b90 <__aeabi_uldivmod>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4613      	mov	r3, r2
 800507e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005080:	e058      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005082:	4b38      	ldr	r3, [pc, #224]	; (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	2200      	movs	r2, #0
 800508a:	4618      	mov	r0, r3
 800508c:	4611      	mov	r1, r2
 800508e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005092:	623b      	str	r3, [r7, #32]
 8005094:	2300      	movs	r3, #0
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
 8005098:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800509c:	4642      	mov	r2, r8
 800509e:	464b      	mov	r3, r9
 80050a0:	f04f 0000 	mov.w	r0, #0
 80050a4:	f04f 0100 	mov.w	r1, #0
 80050a8:	0159      	lsls	r1, r3, #5
 80050aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050ae:	0150      	lsls	r0, r2, #5
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4641      	mov	r1, r8
 80050b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80050ba:	4649      	mov	r1, r9
 80050bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050d4:	ebb2 040a 	subs.w	r4, r2, sl
 80050d8:	eb63 050b 	sbc.w	r5, r3, fp
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	00eb      	lsls	r3, r5, #3
 80050e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050ea:	00e2      	lsls	r2, r4, #3
 80050ec:	4614      	mov	r4, r2
 80050ee:	461d      	mov	r5, r3
 80050f0:	4643      	mov	r3, r8
 80050f2:	18e3      	adds	r3, r4, r3
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	464b      	mov	r3, r9
 80050f8:	eb45 0303 	adc.w	r3, r5, r3
 80050fc:	607b      	str	r3, [r7, #4]
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800510a:	4629      	mov	r1, r5
 800510c:	028b      	lsls	r3, r1, #10
 800510e:	4621      	mov	r1, r4
 8005110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005114:	4621      	mov	r1, r4
 8005116:	028a      	lsls	r2, r1, #10
 8005118:	4610      	mov	r0, r2
 800511a:	4619      	mov	r1, r3
 800511c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800511e:	2200      	movs	r2, #0
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	61fa      	str	r2, [r7, #28]
 8005124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005128:	f7fb fd32 	bl	8000b90 <__aeabi_uldivmod>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4613      	mov	r3, r2
 8005132:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005134:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <HAL_RCC_GetSysClockFreq+0x200>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	0c1b      	lsrs	r3, r3, #16
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	3301      	adds	r3, #1
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005144:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800514e:	e002      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005150:	4b05      	ldr	r3, [pc, #20]	; (8005168 <HAL_RCC_GetSysClockFreq+0x204>)
 8005152:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005158:	4618      	mov	r0, r3
 800515a:	3750      	adds	r7, #80	; 0x50
 800515c:	46bd      	mov	sp, r7
 800515e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005162:	bf00      	nop
 8005164:	40023800 	.word	0x40023800
 8005168:	00f42400 	.word	0x00f42400
 800516c:	007a1200 	.word	0x007a1200

08005170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005174:	4b03      	ldr	r3, [pc, #12]	; (8005184 <HAL_RCC_GetHCLKFreq+0x14>)
 8005176:	681b      	ldr	r3, [r3, #0]
}
 8005178:	4618      	mov	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	20000014 	.word	0x20000014

08005188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800518c:	f7ff fff0 	bl	8005170 <HAL_RCC_GetHCLKFreq>
 8005190:	4602      	mov	r2, r0
 8005192:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	0a9b      	lsrs	r3, r3, #10
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	4903      	ldr	r1, [pc, #12]	; (80051ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800519e:	5ccb      	ldrb	r3, [r1, r3]
 80051a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40023800 	.word	0x40023800
 80051ac:	08006c6c 	.word	0x08006c6c

080051b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051b4:	f7ff ffdc 	bl	8005170 <HAL_RCC_GetHCLKFreq>
 80051b8:	4602      	mov	r2, r0
 80051ba:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	0b5b      	lsrs	r3, r3, #13
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	4903      	ldr	r1, [pc, #12]	; (80051d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051c6:	5ccb      	ldrb	r3, [r1, r3]
 80051c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40023800 	.word	0x40023800
 80051d4:	08006c6c 	.word	0x08006c6c

080051d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e041      	b.n	800526e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fd ff08 	bl	8003014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	4610      	mov	r0, r2
 8005218:	f000 fd80 	bl	8005d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
	...

08005278 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b01      	cmp	r3, #1
 800528a:	d001      	beq.n	8005290 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e03c      	b.n	800530a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <HAL_TIM_Base_Start+0xa0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d018      	beq.n	80052d4 <HAL_TIM_Base_Start+0x5c>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052aa:	d013      	beq.n	80052d4 <HAL_TIM_Base_Start+0x5c>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a1a      	ldr	r2, [pc, #104]	; (800531c <HAL_TIM_Base_Start+0xa4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d00e      	beq.n	80052d4 <HAL_TIM_Base_Start+0x5c>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a19      	ldr	r2, [pc, #100]	; (8005320 <HAL_TIM_Base_Start+0xa8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d009      	beq.n	80052d4 <HAL_TIM_Base_Start+0x5c>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a17      	ldr	r2, [pc, #92]	; (8005324 <HAL_TIM_Base_Start+0xac>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d004      	beq.n	80052d4 <HAL_TIM_Base_Start+0x5c>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a16      	ldr	r2, [pc, #88]	; (8005328 <HAL_TIM_Base_Start+0xb0>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d111      	bne.n	80052f8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b06      	cmp	r3, #6
 80052e4:	d010      	beq.n	8005308 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0201 	orr.w	r2, r2, #1
 80052f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f6:	e007      	b.n	8005308 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40010000 	.word	0x40010000
 800531c:	40000400 	.word	0x40000400
 8005320:	40000800 	.word	0x40000800
 8005324:	40000c00 	.word	0x40000c00
 8005328:	40014000 	.word	0x40014000

0800532c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e041      	b.n	80053c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fd fdf4 	bl	8002f40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3304      	adds	r3, #4
 8005368:	4619      	mov	r1, r3
 800536a:	4610      	mov	r0, r2
 800536c:	f000 fcd6 	bl	8005d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d109      	bne.n	80053f0 <HAL_TIM_PWM_Start+0x24>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	bf14      	ite	ne
 80053e8:	2301      	movne	r3, #1
 80053ea:	2300      	moveq	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	e022      	b.n	8005436 <HAL_TIM_PWM_Start+0x6a>
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d109      	bne.n	800540a <HAL_TIM_PWM_Start+0x3e>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b01      	cmp	r3, #1
 8005400:	bf14      	ite	ne
 8005402:	2301      	movne	r3, #1
 8005404:	2300      	moveq	r3, #0
 8005406:	b2db      	uxtb	r3, r3
 8005408:	e015      	b.n	8005436 <HAL_TIM_PWM_Start+0x6a>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b08      	cmp	r3, #8
 800540e:	d109      	bne.n	8005424 <HAL_TIM_PWM_Start+0x58>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	bf14      	ite	ne
 800541c:	2301      	movne	r3, #1
 800541e:	2300      	moveq	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	e008      	b.n	8005436 <HAL_TIM_PWM_Start+0x6a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	bf14      	ite	ne
 8005430:	2301      	movne	r3, #1
 8005432:	2300      	moveq	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e068      	b.n	8005510 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d104      	bne.n	800544e <HAL_TIM_PWM_Start+0x82>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800544c:	e013      	b.n	8005476 <HAL_TIM_PWM_Start+0xaa>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b04      	cmp	r3, #4
 8005452:	d104      	bne.n	800545e <HAL_TIM_PWM_Start+0x92>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800545c:	e00b      	b.n	8005476 <HAL_TIM_PWM_Start+0xaa>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b08      	cmp	r3, #8
 8005462:	d104      	bne.n	800546e <HAL_TIM_PWM_Start+0xa2>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800546c:	e003      	b.n	8005476 <HAL_TIM_PWM_Start+0xaa>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2202      	movs	r2, #2
 8005472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2201      	movs	r2, #1
 800547c:	6839      	ldr	r1, [r7, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fef2 	bl	8006268 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a23      	ldr	r2, [pc, #140]	; (8005518 <HAL_TIM_PWM_Start+0x14c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d107      	bne.n	800549e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800549c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <HAL_TIM_PWM_Start+0x14c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d018      	beq.n	80054da <HAL_TIM_PWM_Start+0x10e>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b0:	d013      	beq.n	80054da <HAL_TIM_PWM_Start+0x10e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a19      	ldr	r2, [pc, #100]	; (800551c <HAL_TIM_PWM_Start+0x150>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00e      	beq.n	80054da <HAL_TIM_PWM_Start+0x10e>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a17      	ldr	r2, [pc, #92]	; (8005520 <HAL_TIM_PWM_Start+0x154>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d009      	beq.n	80054da <HAL_TIM_PWM_Start+0x10e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a16      	ldr	r2, [pc, #88]	; (8005524 <HAL_TIM_PWM_Start+0x158>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d004      	beq.n	80054da <HAL_TIM_PWM_Start+0x10e>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a14      	ldr	r2, [pc, #80]	; (8005528 <HAL_TIM_PWM_Start+0x15c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d111      	bne.n	80054fe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b06      	cmp	r3, #6
 80054ea:	d010      	beq.n	800550e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fc:	e007      	b.n	800550e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0201 	orr.w	r2, r2, #1
 800550c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40010000 	.word	0x40010000
 800551c:	40000400 	.word	0x40000400
 8005520:	40000800 	.word	0x40000800
 8005524:	40000c00 	.word	0x40000c00
 8005528:	40014000 	.word	0x40014000

0800552c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e097      	b.n	8005670 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	d106      	bne.n	800555a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7fd fd15 	bl	8002f84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2202      	movs	r2, #2
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005570:	f023 0307 	bic.w	r3, r3, #7
 8005574:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3304      	adds	r3, #4
 800557e:	4619      	mov	r1, r3
 8005580:	4610      	mov	r0, r2
 8005582:	f000 fbcb 	bl	8005d1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ae:	f023 0303 	bic.w	r3, r3, #3
 80055b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	4313      	orrs	r3, r2
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80055cc:	f023 030c 	bic.w	r3, r3, #12
 80055d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	021b      	lsls	r3, r3, #8
 80055e8:	4313      	orrs	r3, r2
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	011a      	lsls	r2, r3, #4
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	031b      	lsls	r3, r3, #12
 80055fc:	4313      	orrs	r3, r2
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800560a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005612:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	4313      	orrs	r3, r2
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005688:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005690:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005698:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d110      	bne.n	80056ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d102      	bne.n	80056b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80056ae:	7b7b      	ldrb	r3, [r7, #13]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d001      	beq.n	80056b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e069      	b.n	800578c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c8:	e031      	b.n	800572e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d110      	bne.n	80056f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056d0:	7bbb      	ldrb	r3, [r7, #14]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d102      	bne.n	80056dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056d6:	7b3b      	ldrb	r3, [r7, #12]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d001      	beq.n	80056e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e055      	b.n	800578c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056f0:	e01d      	b.n	800572e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d108      	bne.n	800570a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056f8:	7bbb      	ldrb	r3, [r7, #14]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d105      	bne.n	800570a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056fe:	7b7b      	ldrb	r3, [r7, #13]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d102      	bne.n	800570a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005704:	7b3b      	ldrb	r3, [r7, #12]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d001      	beq.n	800570e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e03e      	b.n	800578c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2202      	movs	r2, #2
 8005712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2202      	movs	r2, #2
 800571a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2202      	movs	r2, #2
 8005722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2202      	movs	r2, #2
 800572a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <HAL_TIM_Encoder_Start+0xc4>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b04      	cmp	r3, #4
 8005738:	d008      	beq.n	800574c <HAL_TIM_Encoder_Start+0xd4>
 800573a:	e00f      	b.n	800575c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2201      	movs	r2, #1
 8005742:	2100      	movs	r1, #0
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fd8f 	bl	8006268 <TIM_CCxChannelCmd>
      break;
 800574a:	e016      	b.n	800577a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2201      	movs	r2, #1
 8005752:	2104      	movs	r1, #4
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fd87 	bl	8006268 <TIM_CCxChannelCmd>
      break;
 800575a:	e00e      	b.n	800577a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2201      	movs	r2, #1
 8005762:	2100      	movs	r1, #0
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fd7f 	bl	8006268 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2201      	movs	r2, #1
 8005770:	2104      	movs	r1, #4
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fd78 	bl	8006268 <TIM_CCxChannelCmd>
      break;
 8005778:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0201 	orr.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d122      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d11b      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0202 	mvn.w	r2, #2
 80057c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fa81 	bl	8005cde <HAL_TIM_IC_CaptureCallback>
 80057dc:	e005      	b.n	80057ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fa73 	bl	8005cca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fa84 	bl	8005cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d122      	bne.n	8005844 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b04      	cmp	r3, #4
 800580a:	d11b      	bne.n	8005844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0204 	mvn.w	r2, #4
 8005814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2202      	movs	r2, #2
 800581a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fa57 	bl	8005cde <HAL_TIM_IC_CaptureCallback>
 8005830:	e005      	b.n	800583e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fa49 	bl	8005cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fa5a 	bl	8005cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	2b08      	cmp	r3, #8
 8005850:	d122      	bne.n	8005898 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b08      	cmp	r3, #8
 800585e:	d11b      	bne.n	8005898 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0208 	mvn.w	r2, #8
 8005868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2204      	movs	r2, #4
 800586e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fa2d 	bl	8005cde <HAL_TIM_IC_CaptureCallback>
 8005884:	e005      	b.n	8005892 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fa1f 	bl	8005cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fa30 	bl	8005cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	2b10      	cmp	r3, #16
 80058a4:	d122      	bne.n	80058ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d11b      	bne.n	80058ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0210 	mvn.w	r2, #16
 80058bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2208      	movs	r2, #8
 80058c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fa03 	bl	8005cde <HAL_TIM_IC_CaptureCallback>
 80058d8:	e005      	b.n	80058e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f9f5 	bl	8005cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fa06 	bl	8005cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d10e      	bne.n	8005918 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b01      	cmp	r3, #1
 8005906:	d107      	bne.n	8005918 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0201 	mvn.w	r2, #1
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f9cf 	bl	8005cb6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005922:	2b80      	cmp	r3, #128	; 0x80
 8005924:	d10e      	bne.n	8005944 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005930:	2b80      	cmp	r3, #128	; 0x80
 8005932:	d107      	bne.n	8005944 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800593c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fd82 	bl	8006448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594e:	2b40      	cmp	r3, #64	; 0x40
 8005950:	d10e      	bne.n	8005970 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595c:	2b40      	cmp	r3, #64	; 0x40
 800595e:	d107      	bne.n	8005970 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f9cb 	bl	8005d06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	2b20      	cmp	r3, #32
 800597c:	d10e      	bne.n	800599c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f003 0320 	and.w	r3, r3, #32
 8005988:	2b20      	cmp	r3, #32
 800598a:	d107      	bne.n	800599c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0220 	mvn.w	r2, #32
 8005994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fd4c 	bl	8006434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059be:	2302      	movs	r3, #2
 80059c0:	e0ae      	b.n	8005b20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b0c      	cmp	r3, #12
 80059ce:	f200 809f 	bhi.w	8005b10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059d2:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d8:	08005a0d 	.word	0x08005a0d
 80059dc:	08005b11 	.word	0x08005b11
 80059e0:	08005b11 	.word	0x08005b11
 80059e4:	08005b11 	.word	0x08005b11
 80059e8:	08005a4d 	.word	0x08005a4d
 80059ec:	08005b11 	.word	0x08005b11
 80059f0:	08005b11 	.word	0x08005b11
 80059f4:	08005b11 	.word	0x08005b11
 80059f8:	08005a8f 	.word	0x08005a8f
 80059fc:	08005b11 	.word	0x08005b11
 8005a00:	08005b11 	.word	0x08005b11
 8005a04:	08005b11 	.word	0x08005b11
 8005a08:	08005acf 	.word	0x08005acf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68b9      	ldr	r1, [r7, #8]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fa02 	bl	8005e1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0208 	orr.w	r2, r2, #8
 8005a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699a      	ldr	r2, [r3, #24]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0204 	bic.w	r2, r2, #4
 8005a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6999      	ldr	r1, [r3, #24]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	691a      	ldr	r2, [r3, #16]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	619a      	str	r2, [r3, #24]
      break;
 8005a4a:	e064      	b.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fa48 	bl	8005ee8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699a      	ldr	r2, [r3, #24]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6999      	ldr	r1, [r3, #24]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	021a      	lsls	r2, r3, #8
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	619a      	str	r2, [r3, #24]
      break;
 8005a8c:	e043      	b.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 fa93 	bl	8005fc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69da      	ldr	r2, [r3, #28]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f042 0208 	orr.w	r2, r2, #8
 8005aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69da      	ldr	r2, [r3, #28]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0204 	bic.w	r2, r2, #4
 8005ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69d9      	ldr	r1, [r3, #28]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	61da      	str	r2, [r3, #28]
      break;
 8005acc:	e023      	b.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 fadd 	bl	8006094 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69d9      	ldr	r1, [r3, #28]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	021a      	lsls	r2, r3, #8
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	61da      	str	r2, [r3, #28]
      break;
 8005b0e:	e002      	b.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	75fb      	strb	r3, [r7, #23]
      break;
 8005b14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_TIM_ConfigClockSource+0x1c>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e0b4      	b.n	8005cae <HAL_TIM_ConfigClockSource+0x186>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b7c:	d03e      	beq.n	8005bfc <HAL_TIM_ConfigClockSource+0xd4>
 8005b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b82:	f200 8087 	bhi.w	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8a:	f000 8086 	beq.w	8005c9a <HAL_TIM_ConfigClockSource+0x172>
 8005b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b92:	d87f      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005b94:	2b70      	cmp	r3, #112	; 0x70
 8005b96:	d01a      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0xa6>
 8005b98:	2b70      	cmp	r3, #112	; 0x70
 8005b9a:	d87b      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005b9c:	2b60      	cmp	r3, #96	; 0x60
 8005b9e:	d050      	beq.n	8005c42 <HAL_TIM_ConfigClockSource+0x11a>
 8005ba0:	2b60      	cmp	r3, #96	; 0x60
 8005ba2:	d877      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba4:	2b50      	cmp	r3, #80	; 0x50
 8005ba6:	d03c      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0xfa>
 8005ba8:	2b50      	cmp	r3, #80	; 0x50
 8005baa:	d873      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005bac:	2b40      	cmp	r3, #64	; 0x40
 8005bae:	d058      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0x13a>
 8005bb0:	2b40      	cmp	r3, #64	; 0x40
 8005bb2:	d86f      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb4:	2b30      	cmp	r3, #48	; 0x30
 8005bb6:	d064      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x15a>
 8005bb8:	2b30      	cmp	r3, #48	; 0x30
 8005bba:	d86b      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	d060      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x15a>
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d867      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d05c      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x15a>
 8005bc8:	2b10      	cmp	r3, #16
 8005bca:	d05a      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x15a>
 8005bcc:	e062      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	6899      	ldr	r1, [r3, #8]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f000 fb23 	bl	8006228 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	609a      	str	r2, [r3, #8]
      break;
 8005bfa:	e04f      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	6899      	ldr	r1, [r3, #8]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f000 fb0c 	bl	8006228 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c1e:	609a      	str	r2, [r3, #8]
      break;
 8005c20:	e03c      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6818      	ldr	r0, [r3, #0]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	6859      	ldr	r1, [r3, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f000 fa80 	bl	8006134 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2150      	movs	r1, #80	; 0x50
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 fad9 	bl	80061f2 <TIM_ITRx_SetConfig>
      break;
 8005c40:	e02c      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6818      	ldr	r0, [r3, #0]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	6859      	ldr	r1, [r3, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f000 fa9f 	bl	8006192 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2160      	movs	r1, #96	; 0x60
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fac9 	bl	80061f2 <TIM_ITRx_SetConfig>
      break;
 8005c60:	e01c      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	6859      	ldr	r1, [r3, #4]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f000 fa60 	bl	8006134 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2140      	movs	r1, #64	; 0x40
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 fab9 	bl	80061f2 <TIM_ITRx_SetConfig>
      break;
 8005c80:	e00c      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	f000 fab0 	bl	80061f2 <TIM_ITRx_SetConfig>
      break;
 8005c92:	e003      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	73fb      	strb	r3, [r7, #15]
      break;
 8005c98:	e000      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
	...

08005d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a34      	ldr	r2, [pc, #208]	; (8005e00 <TIM_Base_SetConfig+0xe4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d00f      	beq.n	8005d54 <TIM_Base_SetConfig+0x38>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3a:	d00b      	beq.n	8005d54 <TIM_Base_SetConfig+0x38>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a31      	ldr	r2, [pc, #196]	; (8005e04 <TIM_Base_SetConfig+0xe8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d007      	beq.n	8005d54 <TIM_Base_SetConfig+0x38>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a30      	ldr	r2, [pc, #192]	; (8005e08 <TIM_Base_SetConfig+0xec>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d003      	beq.n	8005d54 <TIM_Base_SetConfig+0x38>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a2f      	ldr	r2, [pc, #188]	; (8005e0c <TIM_Base_SetConfig+0xf0>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d108      	bne.n	8005d66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a25      	ldr	r2, [pc, #148]	; (8005e00 <TIM_Base_SetConfig+0xe4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d01b      	beq.n	8005da6 <TIM_Base_SetConfig+0x8a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d74:	d017      	beq.n	8005da6 <TIM_Base_SetConfig+0x8a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a22      	ldr	r2, [pc, #136]	; (8005e04 <TIM_Base_SetConfig+0xe8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d013      	beq.n	8005da6 <TIM_Base_SetConfig+0x8a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a21      	ldr	r2, [pc, #132]	; (8005e08 <TIM_Base_SetConfig+0xec>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00f      	beq.n	8005da6 <TIM_Base_SetConfig+0x8a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a20      	ldr	r2, [pc, #128]	; (8005e0c <TIM_Base_SetConfig+0xf0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00b      	beq.n	8005da6 <TIM_Base_SetConfig+0x8a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a1f      	ldr	r2, [pc, #124]	; (8005e10 <TIM_Base_SetConfig+0xf4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d007      	beq.n	8005da6 <TIM_Base_SetConfig+0x8a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a1e      	ldr	r2, [pc, #120]	; (8005e14 <TIM_Base_SetConfig+0xf8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d003      	beq.n	8005da6 <TIM_Base_SetConfig+0x8a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a1d      	ldr	r2, [pc, #116]	; (8005e18 <TIM_Base_SetConfig+0xfc>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d108      	bne.n	8005db8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a08      	ldr	r2, [pc, #32]	; (8005e00 <TIM_Base_SetConfig+0xe4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d103      	bne.n	8005dec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	615a      	str	r2, [r3, #20]
}
 8005df2:	bf00      	nop
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40010000 	.word	0x40010000
 8005e04:	40000400 	.word	0x40000400
 8005e08:	40000800 	.word	0x40000800
 8005e0c:	40000c00 	.word	0x40000c00
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40014400 	.word	0x40014400
 8005e18:	40014800 	.word	0x40014800

08005e1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	f023 0201 	bic.w	r2, r3, #1
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0303 	bic.w	r3, r3, #3
 8005e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f023 0302 	bic.w	r3, r3, #2
 8005e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a1c      	ldr	r2, [pc, #112]	; (8005ee4 <TIM_OC1_SetConfig+0xc8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d10c      	bne.n	8005e92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f023 0308 	bic.w	r3, r3, #8
 8005e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f023 0304 	bic.w	r3, r3, #4
 8005e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a13      	ldr	r2, [pc, #76]	; (8005ee4 <TIM_OC1_SetConfig+0xc8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d111      	bne.n	8005ebe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	621a      	str	r2, [r3, #32]
}
 8005ed8:	bf00      	nop
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	40010000 	.word	0x40010000

08005ee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	f023 0210 	bic.w	r2, r3, #16
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f023 0320 	bic.w	r3, r3, #32
 8005f32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a1e      	ldr	r2, [pc, #120]	; (8005fbc <TIM_OC2_SetConfig+0xd4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d10d      	bne.n	8005f64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a15      	ldr	r2, [pc, #84]	; (8005fbc <TIM_OC2_SetConfig+0xd4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d113      	bne.n	8005f94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	621a      	str	r2, [r3, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	40010000 	.word	0x40010000

08005fc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0303 	bic.w	r3, r3, #3
 8005ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a1d      	ldr	r2, [pc, #116]	; (8006090 <TIM_OC3_SetConfig+0xd0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d10d      	bne.n	800603a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006024:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	021b      	lsls	r3, r3, #8
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a14      	ldr	r2, [pc, #80]	; (8006090 <TIM_OC3_SetConfig+0xd0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d113      	bne.n	800606a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	4313      	orrs	r3, r2
 800605c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	621a      	str	r2, [r3, #32]
}
 8006084:	bf00      	nop
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	40010000 	.word	0x40010000

08006094 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	021b      	lsls	r3, r3, #8
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	031b      	lsls	r3, r3, #12
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a10      	ldr	r2, [pc, #64]	; (8006130 <TIM_OC4_SetConfig+0x9c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d109      	bne.n	8006108 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	019b      	lsls	r3, r3, #6
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	4313      	orrs	r3, r2
 8006106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	621a      	str	r2, [r3, #32]
}
 8006122:	bf00      	nop
 8006124:	371c      	adds	r7, #28
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	40010000 	.word	0x40010000

08006134 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	f023 0201 	bic.w	r2, r3, #1
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800615e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f023 030a 	bic.w	r3, r3, #10
 8006170:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	4313      	orrs	r3, r2
 8006178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	621a      	str	r2, [r3, #32]
}
 8006186:	bf00      	nop
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006192:	b480      	push	{r7}
 8006194:	b087      	sub	sp, #28
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	f023 0210 	bic.w	r2, r3, #16
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	031b      	lsls	r3, r3, #12
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	011b      	lsls	r3, r3, #4
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	621a      	str	r2, [r3, #32]
}
 80061e6:	bf00      	nop
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b085      	sub	sp, #20
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4313      	orrs	r3, r2
 8006210:	f043 0307 	orr.w	r3, r3, #7
 8006214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	609a      	str	r2, [r3, #8]
}
 800621c:	bf00      	nop
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006242:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	021a      	lsls	r2, r3, #8
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	431a      	orrs	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4313      	orrs	r3, r2
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	609a      	str	r2, [r3, #8]
}
 800625c:	bf00      	nop
 800625e:	371c      	adds	r7, #28
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f003 031f 	and.w	r3, r3, #31
 800627a:	2201      	movs	r2, #1
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a1a      	ldr	r2, [r3, #32]
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	43db      	mvns	r3, r3
 800628a:	401a      	ands	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a1a      	ldr	r2, [r3, #32]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 031f 	and.w	r3, r3, #31
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	fa01 f303 	lsl.w	r3, r1, r3
 80062a0:	431a      	orrs	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	621a      	str	r2, [r3, #32]
}
 80062a6:	bf00      	nop
 80062a8:	371c      	adds	r7, #28
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
	...

080062b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e050      	b.n	800636e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1c      	ldr	r2, [pc, #112]	; (800637c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d018      	beq.n	8006342 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006318:	d013      	beq.n	8006342 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a18      	ldr	r2, [pc, #96]	; (8006380 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00e      	beq.n	8006342 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a16      	ldr	r2, [pc, #88]	; (8006384 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d009      	beq.n	8006342 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a15      	ldr	r2, [pc, #84]	; (8006388 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d004      	beq.n	8006342 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a13      	ldr	r2, [pc, #76]	; (800638c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d10c      	bne.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006348:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	4313      	orrs	r3, r2
 8006352:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40010000 	.word	0x40010000
 8006380:	40000400 	.word	0x40000400
 8006384:	40000800 	.word	0x40000800
 8006388:	40000c00 	.word	0x40000c00
 800638c:	40014000 	.word	0x40014000

08006390 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e03d      	b.n	8006428 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e03f      	b.n	80064ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fc fe28 	bl	80030d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2224      	movs	r2, #36	; 0x24
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800649e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f829 	bl	80064f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	691a      	ldr	r2, [r3, #16]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	695a      	ldr	r2, [r3, #20]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064fc:	b0c0      	sub	sp, #256	; 0x100
 80064fe:	af00      	add	r7, sp, #0
 8006500:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006514:	68d9      	ldr	r1, [r3, #12]
 8006516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	ea40 0301 	orr.w	r3, r0, r1
 8006520:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	431a      	orrs	r2, r3
 8006530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	431a      	orrs	r2, r3
 8006538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	4313      	orrs	r3, r2
 8006540:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006550:	f021 010c 	bic.w	r1, r1, #12
 8006554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800655e:	430b      	orrs	r3, r1
 8006560:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800656e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006572:	6999      	ldr	r1, [r3, #24]
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	ea40 0301 	orr.w	r3, r0, r1
 800657e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	4b8f      	ldr	r3, [pc, #572]	; (80067c4 <UART_SetConfig+0x2cc>)
 8006588:	429a      	cmp	r2, r3
 800658a:	d005      	beq.n	8006598 <UART_SetConfig+0xa0>
 800658c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4b8d      	ldr	r3, [pc, #564]	; (80067c8 <UART_SetConfig+0x2d0>)
 8006594:	429a      	cmp	r2, r3
 8006596:	d104      	bne.n	80065a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006598:	f7fe fe0a 	bl	80051b0 <HAL_RCC_GetPCLK2Freq>
 800659c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80065a0:	e003      	b.n	80065aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065a2:	f7fe fdf1 	bl	8005188 <HAL_RCC_GetPCLK1Freq>
 80065a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b4:	f040 810c 	bne.w	80067d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065bc:	2200      	movs	r2, #0
 80065be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80065c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80065ca:	4622      	mov	r2, r4
 80065cc:	462b      	mov	r3, r5
 80065ce:	1891      	adds	r1, r2, r2
 80065d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80065d2:	415b      	adcs	r3, r3
 80065d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80065da:	4621      	mov	r1, r4
 80065dc:	eb12 0801 	adds.w	r8, r2, r1
 80065e0:	4629      	mov	r1, r5
 80065e2:	eb43 0901 	adc.w	r9, r3, r1
 80065e6:	f04f 0200 	mov.w	r2, #0
 80065ea:	f04f 0300 	mov.w	r3, #0
 80065ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065fa:	4690      	mov	r8, r2
 80065fc:	4699      	mov	r9, r3
 80065fe:	4623      	mov	r3, r4
 8006600:	eb18 0303 	adds.w	r3, r8, r3
 8006604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006608:	462b      	mov	r3, r5
 800660a:	eb49 0303 	adc.w	r3, r9, r3
 800660e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800661e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006622:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006626:	460b      	mov	r3, r1
 8006628:	18db      	adds	r3, r3, r3
 800662a:	653b      	str	r3, [r7, #80]	; 0x50
 800662c:	4613      	mov	r3, r2
 800662e:	eb42 0303 	adc.w	r3, r2, r3
 8006632:	657b      	str	r3, [r7, #84]	; 0x54
 8006634:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006638:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800663c:	f7fa faa8 	bl	8000b90 <__aeabi_uldivmod>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4b61      	ldr	r3, [pc, #388]	; (80067cc <UART_SetConfig+0x2d4>)
 8006646:	fba3 2302 	umull	r2, r3, r3, r2
 800664a:	095b      	lsrs	r3, r3, #5
 800664c:	011c      	lsls	r4, r3, #4
 800664e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006652:	2200      	movs	r2, #0
 8006654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006658:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800665c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006660:	4642      	mov	r2, r8
 8006662:	464b      	mov	r3, r9
 8006664:	1891      	adds	r1, r2, r2
 8006666:	64b9      	str	r1, [r7, #72]	; 0x48
 8006668:	415b      	adcs	r3, r3
 800666a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800666c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006670:	4641      	mov	r1, r8
 8006672:	eb12 0a01 	adds.w	sl, r2, r1
 8006676:	4649      	mov	r1, r9
 8006678:	eb43 0b01 	adc.w	fp, r3, r1
 800667c:	f04f 0200 	mov.w	r2, #0
 8006680:	f04f 0300 	mov.w	r3, #0
 8006684:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006688:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800668c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006690:	4692      	mov	sl, r2
 8006692:	469b      	mov	fp, r3
 8006694:	4643      	mov	r3, r8
 8006696:	eb1a 0303 	adds.w	r3, sl, r3
 800669a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800669e:	464b      	mov	r3, r9
 80066a0:	eb4b 0303 	adc.w	r3, fp, r3
 80066a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80066b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80066bc:	460b      	mov	r3, r1
 80066be:	18db      	adds	r3, r3, r3
 80066c0:	643b      	str	r3, [r7, #64]	; 0x40
 80066c2:	4613      	mov	r3, r2
 80066c4:	eb42 0303 	adc.w	r3, r2, r3
 80066c8:	647b      	str	r3, [r7, #68]	; 0x44
 80066ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80066d2:	f7fa fa5d 	bl	8000b90 <__aeabi_uldivmod>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4611      	mov	r1, r2
 80066dc:	4b3b      	ldr	r3, [pc, #236]	; (80067cc <UART_SetConfig+0x2d4>)
 80066de:	fba3 2301 	umull	r2, r3, r3, r1
 80066e2:	095b      	lsrs	r3, r3, #5
 80066e4:	2264      	movs	r2, #100	; 0x64
 80066e6:	fb02 f303 	mul.w	r3, r2, r3
 80066ea:	1acb      	subs	r3, r1, r3
 80066ec:	00db      	lsls	r3, r3, #3
 80066ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80066f2:	4b36      	ldr	r3, [pc, #216]	; (80067cc <UART_SetConfig+0x2d4>)
 80066f4:	fba3 2302 	umull	r2, r3, r3, r2
 80066f8:	095b      	lsrs	r3, r3, #5
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006700:	441c      	add	r4, r3
 8006702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006706:	2200      	movs	r2, #0
 8006708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800670c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006710:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006714:	4642      	mov	r2, r8
 8006716:	464b      	mov	r3, r9
 8006718:	1891      	adds	r1, r2, r2
 800671a:	63b9      	str	r1, [r7, #56]	; 0x38
 800671c:	415b      	adcs	r3, r3
 800671e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006720:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006724:	4641      	mov	r1, r8
 8006726:	1851      	adds	r1, r2, r1
 8006728:	6339      	str	r1, [r7, #48]	; 0x30
 800672a:	4649      	mov	r1, r9
 800672c:	414b      	adcs	r3, r1
 800672e:	637b      	str	r3, [r7, #52]	; 0x34
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800673c:	4659      	mov	r1, fp
 800673e:	00cb      	lsls	r3, r1, #3
 8006740:	4651      	mov	r1, sl
 8006742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006746:	4651      	mov	r1, sl
 8006748:	00ca      	lsls	r2, r1, #3
 800674a:	4610      	mov	r0, r2
 800674c:	4619      	mov	r1, r3
 800674e:	4603      	mov	r3, r0
 8006750:	4642      	mov	r2, r8
 8006752:	189b      	adds	r3, r3, r2
 8006754:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006758:	464b      	mov	r3, r9
 800675a:	460a      	mov	r2, r1
 800675c:	eb42 0303 	adc.w	r3, r2, r3
 8006760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006770:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006774:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006778:	460b      	mov	r3, r1
 800677a:	18db      	adds	r3, r3, r3
 800677c:	62bb      	str	r3, [r7, #40]	; 0x28
 800677e:	4613      	mov	r3, r2
 8006780:	eb42 0303 	adc.w	r3, r2, r3
 8006784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006786:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800678a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800678e:	f7fa f9ff 	bl	8000b90 <__aeabi_uldivmod>
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	4b0d      	ldr	r3, [pc, #52]	; (80067cc <UART_SetConfig+0x2d4>)
 8006798:	fba3 1302 	umull	r1, r3, r3, r2
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	2164      	movs	r1, #100	; 0x64
 80067a0:	fb01 f303 	mul.w	r3, r1, r3
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	3332      	adds	r3, #50	; 0x32
 80067aa:	4a08      	ldr	r2, [pc, #32]	; (80067cc <UART_SetConfig+0x2d4>)
 80067ac:	fba2 2303 	umull	r2, r3, r2, r3
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	f003 0207 	and.w	r2, r3, #7
 80067b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4422      	add	r2, r4
 80067be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067c0:	e105      	b.n	80069ce <UART_SetConfig+0x4d6>
 80067c2:	bf00      	nop
 80067c4:	40011000 	.word	0x40011000
 80067c8:	40011400 	.word	0x40011400
 80067cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80067de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80067e2:	4642      	mov	r2, r8
 80067e4:	464b      	mov	r3, r9
 80067e6:	1891      	adds	r1, r2, r2
 80067e8:	6239      	str	r1, [r7, #32]
 80067ea:	415b      	adcs	r3, r3
 80067ec:	627b      	str	r3, [r7, #36]	; 0x24
 80067ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067f2:	4641      	mov	r1, r8
 80067f4:	1854      	adds	r4, r2, r1
 80067f6:	4649      	mov	r1, r9
 80067f8:	eb43 0501 	adc.w	r5, r3, r1
 80067fc:	f04f 0200 	mov.w	r2, #0
 8006800:	f04f 0300 	mov.w	r3, #0
 8006804:	00eb      	lsls	r3, r5, #3
 8006806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800680a:	00e2      	lsls	r2, r4, #3
 800680c:	4614      	mov	r4, r2
 800680e:	461d      	mov	r5, r3
 8006810:	4643      	mov	r3, r8
 8006812:	18e3      	adds	r3, r4, r3
 8006814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006818:	464b      	mov	r3, r9
 800681a:	eb45 0303 	adc.w	r3, r5, r3
 800681e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800682e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006832:	f04f 0200 	mov.w	r2, #0
 8006836:	f04f 0300 	mov.w	r3, #0
 800683a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800683e:	4629      	mov	r1, r5
 8006840:	008b      	lsls	r3, r1, #2
 8006842:	4621      	mov	r1, r4
 8006844:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006848:	4621      	mov	r1, r4
 800684a:	008a      	lsls	r2, r1, #2
 800684c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006850:	f7fa f99e 	bl	8000b90 <__aeabi_uldivmod>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4b60      	ldr	r3, [pc, #384]	; (80069dc <UART_SetConfig+0x4e4>)
 800685a:	fba3 2302 	umull	r2, r3, r3, r2
 800685e:	095b      	lsrs	r3, r3, #5
 8006860:	011c      	lsls	r4, r3, #4
 8006862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006866:	2200      	movs	r2, #0
 8006868:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800686c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006870:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006874:	4642      	mov	r2, r8
 8006876:	464b      	mov	r3, r9
 8006878:	1891      	adds	r1, r2, r2
 800687a:	61b9      	str	r1, [r7, #24]
 800687c:	415b      	adcs	r3, r3
 800687e:	61fb      	str	r3, [r7, #28]
 8006880:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006884:	4641      	mov	r1, r8
 8006886:	1851      	adds	r1, r2, r1
 8006888:	6139      	str	r1, [r7, #16]
 800688a:	4649      	mov	r1, r9
 800688c:	414b      	adcs	r3, r1
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	f04f 0200 	mov.w	r2, #0
 8006894:	f04f 0300 	mov.w	r3, #0
 8006898:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800689c:	4659      	mov	r1, fp
 800689e:	00cb      	lsls	r3, r1, #3
 80068a0:	4651      	mov	r1, sl
 80068a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068a6:	4651      	mov	r1, sl
 80068a8:	00ca      	lsls	r2, r1, #3
 80068aa:	4610      	mov	r0, r2
 80068ac:	4619      	mov	r1, r3
 80068ae:	4603      	mov	r3, r0
 80068b0:	4642      	mov	r2, r8
 80068b2:	189b      	adds	r3, r3, r2
 80068b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068b8:	464b      	mov	r3, r9
 80068ba:	460a      	mov	r2, r1
 80068bc:	eb42 0303 	adc.w	r3, r2, r3
 80068c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80068ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80068dc:	4649      	mov	r1, r9
 80068de:	008b      	lsls	r3, r1, #2
 80068e0:	4641      	mov	r1, r8
 80068e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068e6:	4641      	mov	r1, r8
 80068e8:	008a      	lsls	r2, r1, #2
 80068ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80068ee:	f7fa f94f 	bl	8000b90 <__aeabi_uldivmod>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4b39      	ldr	r3, [pc, #228]	; (80069dc <UART_SetConfig+0x4e4>)
 80068f8:	fba3 1302 	umull	r1, r3, r3, r2
 80068fc:	095b      	lsrs	r3, r3, #5
 80068fe:	2164      	movs	r1, #100	; 0x64
 8006900:	fb01 f303 	mul.w	r3, r1, r3
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	3332      	adds	r3, #50	; 0x32
 800690a:	4a34      	ldr	r2, [pc, #208]	; (80069dc <UART_SetConfig+0x4e4>)
 800690c:	fba2 2303 	umull	r2, r3, r2, r3
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006916:	441c      	add	r4, r3
 8006918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800691c:	2200      	movs	r2, #0
 800691e:	673b      	str	r3, [r7, #112]	; 0x70
 8006920:	677a      	str	r2, [r7, #116]	; 0x74
 8006922:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006926:	4642      	mov	r2, r8
 8006928:	464b      	mov	r3, r9
 800692a:	1891      	adds	r1, r2, r2
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	415b      	adcs	r3, r3
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006936:	4641      	mov	r1, r8
 8006938:	1851      	adds	r1, r2, r1
 800693a:	6039      	str	r1, [r7, #0]
 800693c:	4649      	mov	r1, r9
 800693e:	414b      	adcs	r3, r1
 8006940:	607b      	str	r3, [r7, #4]
 8006942:	f04f 0200 	mov.w	r2, #0
 8006946:	f04f 0300 	mov.w	r3, #0
 800694a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800694e:	4659      	mov	r1, fp
 8006950:	00cb      	lsls	r3, r1, #3
 8006952:	4651      	mov	r1, sl
 8006954:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006958:	4651      	mov	r1, sl
 800695a:	00ca      	lsls	r2, r1, #3
 800695c:	4610      	mov	r0, r2
 800695e:	4619      	mov	r1, r3
 8006960:	4603      	mov	r3, r0
 8006962:	4642      	mov	r2, r8
 8006964:	189b      	adds	r3, r3, r2
 8006966:	66bb      	str	r3, [r7, #104]	; 0x68
 8006968:	464b      	mov	r3, r9
 800696a:	460a      	mov	r2, r1
 800696c:	eb42 0303 	adc.w	r3, r2, r3
 8006970:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	663b      	str	r3, [r7, #96]	; 0x60
 800697c:	667a      	str	r2, [r7, #100]	; 0x64
 800697e:	f04f 0200 	mov.w	r2, #0
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800698a:	4649      	mov	r1, r9
 800698c:	008b      	lsls	r3, r1, #2
 800698e:	4641      	mov	r1, r8
 8006990:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006994:	4641      	mov	r1, r8
 8006996:	008a      	lsls	r2, r1, #2
 8006998:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800699c:	f7fa f8f8 	bl	8000b90 <__aeabi_uldivmod>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4b0d      	ldr	r3, [pc, #52]	; (80069dc <UART_SetConfig+0x4e4>)
 80069a6:	fba3 1302 	umull	r1, r3, r3, r2
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	2164      	movs	r1, #100	; 0x64
 80069ae:	fb01 f303 	mul.w	r3, r1, r3
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	011b      	lsls	r3, r3, #4
 80069b6:	3332      	adds	r3, #50	; 0x32
 80069b8:	4a08      	ldr	r2, [pc, #32]	; (80069dc <UART_SetConfig+0x4e4>)
 80069ba:	fba2 2303 	umull	r2, r3, r2, r3
 80069be:	095b      	lsrs	r3, r3, #5
 80069c0:	f003 020f 	and.w	r2, r3, #15
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4422      	add	r2, r4
 80069cc:	609a      	str	r2, [r3, #8]
}
 80069ce:	bf00      	nop
 80069d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80069d4:	46bd      	mov	sp, r7
 80069d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069da:	bf00      	nop
 80069dc:	51eb851f 	.word	0x51eb851f

080069e0 <__errno>:
 80069e0:	4b01      	ldr	r3, [pc, #4]	; (80069e8 <__errno+0x8>)
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	20000020 	.word	0x20000020

080069ec <__libc_init_array>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	4d0d      	ldr	r5, [pc, #52]	; (8006a24 <__libc_init_array+0x38>)
 80069f0:	4c0d      	ldr	r4, [pc, #52]	; (8006a28 <__libc_init_array+0x3c>)
 80069f2:	1b64      	subs	r4, r4, r5
 80069f4:	10a4      	asrs	r4, r4, #2
 80069f6:	2600      	movs	r6, #0
 80069f8:	42a6      	cmp	r6, r4
 80069fa:	d109      	bne.n	8006a10 <__libc_init_array+0x24>
 80069fc:	4d0b      	ldr	r5, [pc, #44]	; (8006a2c <__libc_init_array+0x40>)
 80069fe:	4c0c      	ldr	r4, [pc, #48]	; (8006a30 <__libc_init_array+0x44>)
 8006a00:	f000 f920 	bl	8006c44 <_init>
 8006a04:	1b64      	subs	r4, r4, r5
 8006a06:	10a4      	asrs	r4, r4, #2
 8006a08:	2600      	movs	r6, #0
 8006a0a:	42a6      	cmp	r6, r4
 8006a0c:	d105      	bne.n	8006a1a <__libc_init_array+0x2e>
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
 8006a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a14:	4798      	blx	r3
 8006a16:	3601      	adds	r6, #1
 8006a18:	e7ee      	b.n	80069f8 <__libc_init_array+0xc>
 8006a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a1e:	4798      	blx	r3
 8006a20:	3601      	adds	r6, #1
 8006a22:	e7f2      	b.n	8006a0a <__libc_init_array+0x1e>
 8006a24:	08006c84 	.word	0x08006c84
 8006a28:	08006c84 	.word	0x08006c84
 8006a2c:	08006c84 	.word	0x08006c84
 8006a30:	08006c88 	.word	0x08006c88

08006a34 <memset>:
 8006a34:	4402      	add	r2, r0
 8006a36:	4603      	mov	r3, r0
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d100      	bne.n	8006a3e <memset+0xa>
 8006a3c:	4770      	bx	lr
 8006a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a42:	e7f9      	b.n	8006a38 <memset+0x4>

08006a44 <sqrt>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	ed2d 8b02 	vpush	{d8}
 8006a4a:	ec55 4b10 	vmov	r4, r5, d0
 8006a4e:	f000 f843 	bl	8006ad8 <__ieee754_sqrt>
 8006a52:	4622      	mov	r2, r4
 8006a54:	462b      	mov	r3, r5
 8006a56:	4620      	mov	r0, r4
 8006a58:	4629      	mov	r1, r5
 8006a5a:	eeb0 8a40 	vmov.f32	s16, s0
 8006a5e:	eef0 8a60 	vmov.f32	s17, s1
 8006a62:	f7fa f80f 	bl	8000a84 <__aeabi_dcmpun>
 8006a66:	b990      	cbnz	r0, 8006a8e <sqrt+0x4a>
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	4629      	mov	r1, r5
 8006a70:	f7f9 ffe0 	bl	8000a34 <__aeabi_dcmplt>
 8006a74:	b158      	cbz	r0, 8006a8e <sqrt+0x4a>
 8006a76:	f7ff ffb3 	bl	80069e0 <__errno>
 8006a7a:	2321      	movs	r3, #33	; 0x21
 8006a7c:	6003      	str	r3, [r0, #0]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2300      	movs	r3, #0
 8006a82:	4610      	mov	r0, r2
 8006a84:	4619      	mov	r1, r3
 8006a86:	f7f9 fe8d 	bl	80007a4 <__aeabi_ddiv>
 8006a8a:	ec41 0b18 	vmov	d8, r0, r1
 8006a8e:	eeb0 0a48 	vmov.f32	s0, s16
 8006a92:	eef0 0a68 	vmov.f32	s1, s17
 8006a96:	ecbd 8b02 	vpop	{d8}
 8006a9a:	bd38      	pop	{r3, r4, r5, pc}

08006a9c <sqrtf>:
 8006a9c:	b508      	push	{r3, lr}
 8006a9e:	ed2d 8b02 	vpush	{d8}
 8006aa2:	eeb0 8a40 	vmov.f32	s16, s0
 8006aa6:	f000 f8c9 	bl	8006c3c <__ieee754_sqrtf>
 8006aaa:	eeb4 8a48 	vcmp.f32	s16, s16
 8006aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab2:	d60c      	bvs.n	8006ace <sqrtf+0x32>
 8006ab4:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006ad4 <sqrtf+0x38>
 8006ab8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac0:	d505      	bpl.n	8006ace <sqrtf+0x32>
 8006ac2:	f7ff ff8d 	bl	80069e0 <__errno>
 8006ac6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006aca:	2321      	movs	r3, #33	; 0x21
 8006acc:	6003      	str	r3, [r0, #0]
 8006ace:	ecbd 8b02 	vpop	{d8}
 8006ad2:	bd08      	pop	{r3, pc}
 8006ad4:	00000000 	.word	0x00000000

08006ad8 <__ieee754_sqrt>:
 8006ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006adc:	ec55 4b10 	vmov	r4, r5, d0
 8006ae0:	4e55      	ldr	r6, [pc, #340]	; (8006c38 <__ieee754_sqrt+0x160>)
 8006ae2:	43ae      	bics	r6, r5
 8006ae4:	ee10 0a10 	vmov	r0, s0
 8006ae8:	ee10 3a10 	vmov	r3, s0
 8006aec:	462a      	mov	r2, r5
 8006aee:	4629      	mov	r1, r5
 8006af0:	d110      	bne.n	8006b14 <__ieee754_sqrt+0x3c>
 8006af2:	ee10 2a10 	vmov	r2, s0
 8006af6:	462b      	mov	r3, r5
 8006af8:	f7f9 fd2a 	bl	8000550 <__aeabi_dmul>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4620      	mov	r0, r4
 8006b02:	4629      	mov	r1, r5
 8006b04:	f7f9 fb6e 	bl	80001e4 <__adddf3>
 8006b08:	4604      	mov	r4, r0
 8006b0a:	460d      	mov	r5, r1
 8006b0c:	ec45 4b10 	vmov	d0, r4, r5
 8006b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b14:	2d00      	cmp	r5, #0
 8006b16:	dc10      	bgt.n	8006b3a <__ieee754_sqrt+0x62>
 8006b18:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006b1c:	4330      	orrs	r0, r6
 8006b1e:	d0f5      	beq.n	8006b0c <__ieee754_sqrt+0x34>
 8006b20:	b15d      	cbz	r5, 8006b3a <__ieee754_sqrt+0x62>
 8006b22:	ee10 2a10 	vmov	r2, s0
 8006b26:	462b      	mov	r3, r5
 8006b28:	ee10 0a10 	vmov	r0, s0
 8006b2c:	f7f9 fb58 	bl	80001e0 <__aeabi_dsub>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	f7f9 fe36 	bl	80007a4 <__aeabi_ddiv>
 8006b38:	e7e6      	b.n	8006b08 <__ieee754_sqrt+0x30>
 8006b3a:	1512      	asrs	r2, r2, #20
 8006b3c:	d074      	beq.n	8006c28 <__ieee754_sqrt+0x150>
 8006b3e:	07d4      	lsls	r4, r2, #31
 8006b40:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006b44:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006b48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006b4c:	bf5e      	ittt	pl
 8006b4e:	0fda      	lsrpl	r2, r3, #31
 8006b50:	005b      	lslpl	r3, r3, #1
 8006b52:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006b56:	2400      	movs	r4, #0
 8006b58:	0fda      	lsrs	r2, r3, #31
 8006b5a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006b5e:	107f      	asrs	r7, r7, #1
 8006b60:	005b      	lsls	r3, r3, #1
 8006b62:	2516      	movs	r5, #22
 8006b64:	4620      	mov	r0, r4
 8006b66:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006b6a:	1886      	adds	r6, r0, r2
 8006b6c:	428e      	cmp	r6, r1
 8006b6e:	bfde      	ittt	le
 8006b70:	1b89      	suble	r1, r1, r6
 8006b72:	18b0      	addle	r0, r6, r2
 8006b74:	18a4      	addle	r4, r4, r2
 8006b76:	0049      	lsls	r1, r1, #1
 8006b78:	3d01      	subs	r5, #1
 8006b7a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006b7e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006b82:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006b86:	d1f0      	bne.n	8006b6a <__ieee754_sqrt+0x92>
 8006b88:	462a      	mov	r2, r5
 8006b8a:	f04f 0e20 	mov.w	lr, #32
 8006b8e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006b92:	4281      	cmp	r1, r0
 8006b94:	eb06 0c05 	add.w	ip, r6, r5
 8006b98:	dc02      	bgt.n	8006ba0 <__ieee754_sqrt+0xc8>
 8006b9a:	d113      	bne.n	8006bc4 <__ieee754_sqrt+0xec>
 8006b9c:	459c      	cmp	ip, r3
 8006b9e:	d811      	bhi.n	8006bc4 <__ieee754_sqrt+0xec>
 8006ba0:	f1bc 0f00 	cmp.w	ip, #0
 8006ba4:	eb0c 0506 	add.w	r5, ip, r6
 8006ba8:	da43      	bge.n	8006c32 <__ieee754_sqrt+0x15a>
 8006baa:	2d00      	cmp	r5, #0
 8006bac:	db41      	blt.n	8006c32 <__ieee754_sqrt+0x15a>
 8006bae:	f100 0801 	add.w	r8, r0, #1
 8006bb2:	1a09      	subs	r1, r1, r0
 8006bb4:	459c      	cmp	ip, r3
 8006bb6:	bf88      	it	hi
 8006bb8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006bbc:	eba3 030c 	sub.w	r3, r3, ip
 8006bc0:	4432      	add	r2, r6
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006bc8:	f1be 0e01 	subs.w	lr, lr, #1
 8006bcc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006bd4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006bd8:	d1db      	bne.n	8006b92 <__ieee754_sqrt+0xba>
 8006bda:	430b      	orrs	r3, r1
 8006bdc:	d006      	beq.n	8006bec <__ieee754_sqrt+0x114>
 8006bde:	1c50      	adds	r0, r2, #1
 8006be0:	bf13      	iteet	ne
 8006be2:	3201      	addne	r2, #1
 8006be4:	3401      	addeq	r4, #1
 8006be6:	4672      	moveq	r2, lr
 8006be8:	f022 0201 	bicne.w	r2, r2, #1
 8006bec:	1063      	asrs	r3, r4, #1
 8006bee:	0852      	lsrs	r2, r2, #1
 8006bf0:	07e1      	lsls	r1, r4, #31
 8006bf2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006bf6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006bfa:	bf48      	it	mi
 8006bfc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006c00:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006c04:	4614      	mov	r4, r2
 8006c06:	e781      	b.n	8006b0c <__ieee754_sqrt+0x34>
 8006c08:	0ad9      	lsrs	r1, r3, #11
 8006c0a:	3815      	subs	r0, #21
 8006c0c:	055b      	lsls	r3, r3, #21
 8006c0e:	2900      	cmp	r1, #0
 8006c10:	d0fa      	beq.n	8006c08 <__ieee754_sqrt+0x130>
 8006c12:	02cd      	lsls	r5, r1, #11
 8006c14:	d50a      	bpl.n	8006c2c <__ieee754_sqrt+0x154>
 8006c16:	f1c2 0420 	rsb	r4, r2, #32
 8006c1a:	fa23 f404 	lsr.w	r4, r3, r4
 8006c1e:	1e55      	subs	r5, r2, #1
 8006c20:	4093      	lsls	r3, r2
 8006c22:	4321      	orrs	r1, r4
 8006c24:	1b42      	subs	r2, r0, r5
 8006c26:	e78a      	b.n	8006b3e <__ieee754_sqrt+0x66>
 8006c28:	4610      	mov	r0, r2
 8006c2a:	e7f0      	b.n	8006c0e <__ieee754_sqrt+0x136>
 8006c2c:	0049      	lsls	r1, r1, #1
 8006c2e:	3201      	adds	r2, #1
 8006c30:	e7ef      	b.n	8006c12 <__ieee754_sqrt+0x13a>
 8006c32:	4680      	mov	r8, r0
 8006c34:	e7bd      	b.n	8006bb2 <__ieee754_sqrt+0xda>
 8006c36:	bf00      	nop
 8006c38:	7ff00000 	.word	0x7ff00000

08006c3c <__ieee754_sqrtf>:
 8006c3c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006c40:	4770      	bx	lr
	...

08006c44 <_init>:
 8006c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c46:	bf00      	nop
 8006c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4a:	bc08      	pop	{r3}
 8006c4c:	469e      	mov	lr, r3
 8006c4e:	4770      	bx	lr

08006c50 <_fini>:
 8006c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c52:	bf00      	nop
 8006c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c56:	bc08      	pop	{r3}
 8006c58:	469e      	mov	lr, r3
 8006c5a:	4770      	bx	lr
