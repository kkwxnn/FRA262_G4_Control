
FRA262_G4_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c000  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800c198  0800c198  0001c198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1bc  0800c1bc  000202b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1bc  0800c1bc  0001c1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1c4  0800c1c4  000202b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1c4  0800c1c4  0001c1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1c8  0800c1c8  0001c1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  0800c1cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bb8  200002b0  0800c47c  000202b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e68  0800c47c  00020e68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b74  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d2  00000000  00000000  00034e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00037328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  00038448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180f3  00000000  00000000  000394b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014add  00000000  00000000  000515ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009da83  00000000  00000000  00066088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103b0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc0  00000000  00000000  00103b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002b0 	.word	0x200002b0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c180 	.word	0x0800c180

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002b4 	.word	0x200002b4
 80001d4:	0800c180 	.word	0x0800c180

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b974 	b.w	8000ee0 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9d08      	ldr	r5, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	468e      	mov	lr, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14d      	bne.n	8000cba <__udivmoddi4+0xaa>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4694      	mov	ip, r2
 8000c22:	d969      	bls.n	8000cf8 <__udivmoddi4+0xe8>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b152      	cbz	r2, 8000c40 <__udivmoddi4+0x30>
 8000c2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2e:	f1c2 0120 	rsb	r1, r2, #32
 8000c32:	fa20 f101 	lsr.w	r1, r0, r1
 8000c36:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c3e:	4094      	lsls	r4, r2
 8000c40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c44:	0c21      	lsrs	r1, r4, #16
 8000c46:	fbbe f6f8 	udiv	r6, lr, r8
 8000c4a:	fa1f f78c 	uxth.w	r7, ip
 8000c4e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c56:	fb06 f107 	mul.w	r1, r6, r7
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x64>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c66:	f080 811f 	bcs.w	8000ea8 <__udivmoddi4+0x298>
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	f240 811c 	bls.w	8000ea8 <__udivmoddi4+0x298>
 8000c70:	3e02      	subs	r6, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1a5b      	subs	r3, r3, r1
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c84:	fb00 f707 	mul.w	r7, r0, r7
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x92>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c94:	f080 810a 	bcs.w	8000eac <__udivmoddi4+0x29c>
 8000c98:	42a7      	cmp	r7, r4
 8000c9a:	f240 8107 	bls.w	8000eac <__udivmoddi4+0x29c>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca6:	1be4      	subs	r4, r4, r7
 8000ca8:	2600      	movs	r6, #0
 8000caa:	b11d      	cbz	r5, 8000cb4 <__udivmoddi4+0xa4>
 8000cac:	40d4      	lsrs	r4, r2
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d909      	bls.n	8000cd2 <__udivmoddi4+0xc2>
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	f000 80ef 	beq.w	8000ea2 <__udivmoddi4+0x292>
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cca:	4630      	mov	r0, r6
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	fab3 f683 	clz	r6, r3
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d14a      	bne.n	8000d70 <__udivmoddi4+0x160>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xd4>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80f9 	bhi.w	8000ed6 <__udivmoddi4+0x2c6>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	469e      	mov	lr, r3
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	d0e0      	beq.n	8000cb4 <__udivmoddi4+0xa4>
 8000cf2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cf6:	e7dd      	b.n	8000cb4 <__udivmoddi4+0xa4>
 8000cf8:	b902      	cbnz	r2, 8000cfc <__udivmoddi4+0xec>
 8000cfa:	deff      	udf	#255	; 0xff
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f040 8092 	bne.w	8000e2a <__udivmoddi4+0x21a>
 8000d06:	eba1 010c 	sub.w	r1, r1, ip
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2601      	movs	r6, #1
 8000d14:	0c20      	lsrs	r0, r4, #16
 8000d16:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d1a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d1e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d22:	fb0e f003 	mul.w	r0, lr, r3
 8000d26:	4288      	cmp	r0, r1
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x12c>
 8000d2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x12a>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2c0>
 8000d3a:	4643      	mov	r3, r8
 8000d3c:	1a09      	subs	r1, r1, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d44:	fb07 1110 	mls	r1, r7, r0, r1
 8000d48:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x156>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x154>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000d64:	4608      	mov	r0, r1
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d6e:	e79c      	b.n	8000caa <__udivmoddi4+0x9a>
 8000d70:	f1c6 0720 	rsb	r7, r6, #32
 8000d74:	40b3      	lsls	r3, r6
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d82:	fa01 f306 	lsl.w	r3, r1, r6
 8000d86:	431c      	orrs	r4, r3
 8000d88:	40f9      	lsrs	r1, r7
 8000d8a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d92:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d96:	0c20      	lsrs	r0, r4, #16
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fb09 1118 	mls	r1, r9, r8, r1
 8000da0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da4:	fb08 f00e 	mul.w	r0, r8, lr
 8000da8:	4288      	cmp	r0, r1
 8000daa:	fa02 f206 	lsl.w	r2, r2, r6
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b8>
 8000db0:	eb1c 0101 	adds.w	r1, ip, r1
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2bc>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2bc>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4461      	add	r1, ip
 8000dc8:	1a09      	subs	r1, r1, r0
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ddc:	458e      	cmp	lr, r1
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1e2>
 8000de0:	eb1c 0101 	adds.w	r1, ip, r1
 8000de4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2b4>
 8000dea:	458e      	cmp	lr, r1
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2b4>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4461      	add	r1, ip
 8000df2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dfa:	eba1 010e 	sub.w	r1, r1, lr
 8000dfe:	42a1      	cmp	r1, r4
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46a6      	mov	lr, r4
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x2a4>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x2a0>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x212>
 8000e0a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e0e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e12:	fa01 f707 	lsl.w	r7, r1, r7
 8000e16:	fa22 f306 	lsr.w	r3, r2, r6
 8000e1a:	40f1      	lsrs	r1, r6
 8000e1c:	431f      	orrs	r7, r3
 8000e1e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e22:	2600      	movs	r6, #0
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	f1c2 0320 	rsb	r3, r2, #32
 8000e2e:	40d8      	lsrs	r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa21 f303 	lsr.w	r3, r1, r3
 8000e38:	4091      	lsls	r1, r2
 8000e3a:	4301      	orrs	r1, r0
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e48:	fb07 3610 	mls	r6, r7, r0, r3
 8000e4c:	0c0b      	lsrs	r3, r1, #16
 8000e4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e52:	fb00 f60e 	mul.w	r6, r0, lr
 8000e56:	429e      	cmp	r6, r3
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x260>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b8>
 8000e68:	429e      	cmp	r6, r3
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b8>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1b9b      	subs	r3, r3, r6
 8000e72:	b289      	uxth	r1, r1
 8000e74:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e78:	fb07 3316 	mls	r3, r7, r6, r3
 8000e7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e80:	fb06 f30e 	mul.w	r3, r6, lr
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x28a>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e96:	3e02      	subs	r6, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	1ac9      	subs	r1, r1, r3
 8000e9c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0x104>
 8000ea2:	462e      	mov	r6, r5
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	e705      	b.n	8000cb4 <__udivmoddi4+0xa4>
 8000ea8:	4606      	mov	r6, r0
 8000eaa:	e6e3      	b.n	8000c74 <__udivmoddi4+0x64>
 8000eac:	4618      	mov	r0, r3
 8000eae:	e6f8      	b.n	8000ca2 <__udivmoddi4+0x92>
 8000eb0:	454b      	cmp	r3, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f8>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ebc:	3801      	subs	r0, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f8>
 8000ec0:	4646      	mov	r6, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x28a>
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1e2>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x260>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b8>
 8000ed0:	3b02      	subs	r3, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x12c>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e709      	b.n	8000cee <__udivmoddi4+0xde>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x156>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <modbus_1t5_Timeout+0x1c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	751a      	strb	r2, [r3, #20]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	200002cc 	.word	0x200002cc

08000f04 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <modbus_3t5_Timeout+0x1c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2201      	movs	r2, #1
 8000f12:	755a      	strb	r2, [r3, #21]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	200002cc 	.word	0x200002cc

08000f24 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <modbus_UART_Recived+0x60>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2201      	movs	r2, #1
 8000f34:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <modbus_UART_Recived+0x60>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000f3e:	1c59      	adds	r1, r3, #1
 8000f40:	b289      	uxth	r1, r1
 8000f42:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000f46:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f4a:	d210      	bcs.n	8000f6e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <modbus_UART_Recived+0x60>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68d8      	ldr	r0, [r3, #12]
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <modbus_UART_Recived+0x60>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <modbus_UART_Recived+0x60>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f5e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f62:	4413      	add	r3, r2
 8000f64:	3302      	adds	r3, #2
 8000f66:	2201      	movs	r2, #1
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f009 fd1f 	bl	800a9ac <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <modbus_UART_Recived+0x60>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200002cc 	.word	0x200002cc

08000f88 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f92:	4a24      	ldr	r2, [pc, #144]	; (8001024 <Modbus_init+0x9c>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <Modbus_init+0x9c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000fa0:	4b20      	ldr	r3, [pc, #128]	; (8001024 <Modbus_init+0x9c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	4a20      	ldr	r2, [pc, #128]	; (8001028 <Modbus_init+0xa0>)
 8000fa8:	2114      	movs	r1, #20
 8000faa:	4618      	mov	r0, r3
 8000fac:	f008 ff4a 	bl	8009e44 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <Modbus_init+0x9c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	4a1d      	ldr	r2, [pc, #116]	; (800102c <Modbus_init+0xa4>)
 8000fb8:	210e      	movs	r1, #14
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f008 ff42 	bl	8009e44 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <Modbus_init+0x9c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	4a1a      	ldr	r2, [pc, #104]	; (8001030 <Modbus_init+0xa8>)
 8000fc8:	2103      	movs	r1, #3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f009 fc46 	bl	800a85c <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <Modbus_init+0x9c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68d8      	ldr	r0, [r3, #12]
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <Modbus_init+0x9c>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <Modbus_init+0x9c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000fe2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000fe6:	4413      	add	r3, r2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	2201      	movs	r2, #1
 8000fec:	4619      	mov	r1, r3
 8000fee:	f009 fcdd 	bl	800a9ac <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <Modbus_init+0x9c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d10c      	bne.n	800101c <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <Modbus_init+0x9c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	4618      	mov	r0, r3
 800100a:	f008 f88d 	bl	8009128 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <Modbus_init+0x9c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f008 fac2 	bl	80095a0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200002cc 	.word	0x200002cc
 8001028:	08000ee5 	.word	0x08000ee5
 800102c:	08000f05 	.word	0x08000f05
 8001030:	08000f25 	.word	0x08000f25

08001034 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001040:	23ff      	movs	r3, #255	; 0xff
 8001042:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001044:	23ff      	movs	r3, #255	; 0xff
 8001046:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001048:	e013      	b.n	8001072 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	781a      	ldrb	r2, [r3, #0]
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	4053      	eors	r3, r2
 8001056:	b2db      	uxtb	r3, r3
 8001058:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800105a:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <CRC16+0x64>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	4413      	add	r3, r2
 8001060:	781a      	ldrb	r2, [r3, #0]
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	4053      	eors	r3, r2
 8001066:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001068:	4a0c      	ldr	r2, [pc, #48]	; (800109c <CRC16+0x68>)
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	4413      	add	r3, r2
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001072:	883b      	ldrh	r3, [r7, #0]
 8001074:	1e5a      	subs	r2, r3, #1
 8001076:	803a      	strh	r2, [r7, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1e6      	bne.n	800104a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21b      	sxth	r3, r3
 800108a:	b29b      	uxth	r3, r3
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	20000100 	.word	0x20000100
 800109c:	20000000 	.word	0x20000000

080010a0 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80010a6:	4b81      	ldr	r3, [pc, #516]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	7e1b      	ldrb	r3, [r3, #24]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d80a      	bhi.n	80010c8 <Modbus_Protocal_Worker+0x28>
 80010b2:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <Modbus_Protocal_Worker+0x18>)
 80010b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b8:	080010d3 	.word	0x080010d3
 80010bc:	08001273 	.word	0x08001273
 80010c0:	0800115f 	.word	0x0800115f
 80010c4:	08001185 	.word	0x08001185
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80010c8:	4b78      	ldr	r3, [pc, #480]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2201      	movs	r2, #1
 80010ce:	761a      	strb	r2, [r3, #24]
		break;
 80010d0:	e0e8      	b.n	80012a4 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80010d2:	4b76      	ldr	r3, [pc, #472]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 80010de:	f000 f9d7 	bl	8001490 <Modbus_Emission>
 80010e2:	e01c      	b.n	800111e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80010e4:	4b71      	ldr	r3, [pc, #452]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	7d9b      	ldrb	r3, [r3, #22]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d017      	beq.n	800111e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80010ee:	4b6f      	ldr	r3, [pc, #444]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2200      	movs	r2, #0
 80010f4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80010f6:	4b6d      	ldr	r3, [pc, #436]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2200      	movs	r2, #0
 80010fc:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80010fe:	4b6b      	ldr	r3, [pc, #428]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b68      	ldr	r3, [pc, #416]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f042 0201 	orr.w	r2, r2, #1
 8001114:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001116:	4b65      	ldr	r3, [pc, #404]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2203      	movs	r2, #3
 800111c:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800111e:	4b63      	ldr	r3, [pc, #396]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b20      	cmp	r3, #32
 800112c:	f040 80b3 	bne.w	8001296 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001130:	4b5e      	ldr	r3, [pc, #376]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2200      	movs	r2, #0
 8001136:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800113a:	4b5c      	ldr	r3, [pc, #368]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68d8      	ldr	r0, [r3, #12]
 8001140:	4b5a      	ldr	r3, [pc, #360]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b59      	ldr	r3, [pc, #356]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800114c:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001150:	4413      	add	r3, r2
 8001152:	3302      	adds	r3, #2
 8001154:	2201      	movs	r2, #1
 8001156:	4619      	mov	r1, r3
 8001158:	f009 fc28 	bl	800a9ac <HAL_UART_Receive_IT>
		}
		break;
 800115c:	e09b      	b.n	8001296 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800115e:	4b53      	ldr	r3, [pc, #332]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	7d1b      	ldrb	r3, [r3, #20]
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 8098 	beq.w	800129a <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800116a:	4b50      	ldr	r3, [pc, #320]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2200      	movs	r2, #0
 8001170:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001172:	4b4e      	ldr	r3, [pc, #312]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	22fe      	movs	r2, #254	; 0xfe
 8001178:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800117a:	4b4c      	ldr	r3, [pc, #304]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2204      	movs	r2, #4
 8001180:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001182:	e08a      	b.n	800129a <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001184:	4b49      	ldr	r3, [pc, #292]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	7d9b      	ldrb	r3, [r3, #22]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d009      	beq.n	80011a2 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 800118e:	4b47      	ldr	r3, [pc, #284]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d103      	bne.n	80011a2 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800119a:	4b44      	ldr	r3, [pc, #272]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	22ff      	movs	r2, #255	; 0xff
 80011a0:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80011a2:	4b42      	ldr	r3, [pc, #264]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80011aa:	f113 0f02 	cmn.w	r3, #2
 80011ae:	d150      	bne.n	8001252 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80011b0:	4b3e      	ldr	r3, [pc, #248]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2200      	movs	r2, #0
 80011b6:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80011b8:	4b3c      	ldr	r3, [pc, #240]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f203 2272 	addw	r2, r3, #626	; 0x272
 80011c0:	4b3a      	ldr	r3, [pc, #232]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011c8:	3b02      	subs	r3, #2
 80011ca:	4619      	mov	r1, r3
 80011cc:	4610      	mov	r0, r2
 80011ce:	f7ff ff31 	bl	8001034 <CRC16>
 80011d2:	4603      	mov	r3, r0
 80011d4:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011d6:	793a      	ldrb	r2, [r7, #4]
 80011d8:	4b34      	ldr	r3, [pc, #208]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80011da:	6819      	ldr	r1, [r3, #0]
 80011dc:	4b33      	ldr	r3, [pc, #204]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011e4:	3b02      	subs	r3, #2
 80011e6:	440b      	add	r3, r1
 80011e8:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d10c      	bne.n	800120a <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80011f0:	797a      	ldrb	r2, [r7, #5]
 80011f2:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80011f4:	6819      	ldr	r1, [r3, #0]
 80011f6:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011fe:	3b01      	subs	r3, #1
 8001200:	440b      	add	r3, r1
 8001202:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001206:	429a      	cmp	r2, r3
 8001208:	d004      	beq.n	8001214 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800120a:	4b28      	ldr	r3, [pc, #160]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	22ff      	movs	r2, #255	; 0xff
 8001210:	75da      	strb	r2, [r3, #23]
				break;
 8001212:	e047      	b.n	80012a4 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001214:	4b25      	ldr	r3, [pc, #148]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 800121c:	4b23      	ldr	r3, [pc, #140]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d113      	bne.n	800124e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8001236:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001240:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001242:	461a      	mov	r2, r3
 8001244:	f00a fd74 	bl	800bd30 <memcpy>

			//execute command
			Modbus_frame_response();
 8001248:	f000 f90a 	bl	8001460 <Modbus_frame_response>
 800124c:	e001      	b.n	8001252 <Modbus_Protocal_Worker+0x1b2>
				break;
 800124e:	bf00      	nop
					}
		break;


	}
}
 8001250:	e028      	b.n	80012a4 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	7d5b      	ldrb	r3, [r3, #21]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d020      	beq.n	800129e <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2201      	movs	r2, #1
 8001262:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	4618      	mov	r0, r3
 800126c:	f009 fc4c 	bl	800ab08 <HAL_UART_AbortReceive>
		break;
 8001270:	e015      	b.n	800129e <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b20      	cmp	r3, #32
 8001280:	d10f      	bne.n	80012a2 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <Modbus_Protocal_Worker+0x20c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2201      	movs	r2, #1
 8001292:	761a      	strb	r2, [r3, #24]
		break;
 8001294:	e005      	b.n	80012a2 <Modbus_Protocal_Worker+0x202>
		break;
 8001296:	bf00      	nop
 8001298:	e004      	b.n	80012a4 <Modbus_Protocal_Worker+0x204>
		break;
 800129a:	bf00      	nop
 800129c:	e002      	b.n	80012a4 <Modbus_Protocal_Worker+0x204>
		break;
 800129e:	bf00      	nop
 80012a0:	e000      	b.n	80012a4 <Modbus_Protocal_Worker+0x204>
		break;
 80012a2:	bf00      	nop
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200002cc 	.word	0x200002cc

080012b0 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <modbusWrite1Register+0x80>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	7e9b      	ldrb	r3, [r3, #26]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <modbusWrite1Register+0x80>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	7edb      	ldrb	r3, [r3, #27]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80012ce:	88fa      	ldrh	r2, [r7, #6]
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <modbusWrite1Register+0x80>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d903      	bls.n	80012e2 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80012da:	2002      	movs	r0, #2
 80012dc:	f000 f8a4 	bl	8001428 <ModbusErrorReply>
			 return;
 80012e0:	e023      	b.n	800132a <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <modbusWrite1Register+0x80>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <modbusWrite1Register+0x80>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6859      	ldr	r1, [r3, #4]
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	440b      	add	r3, r1
 80012f2:	7f12      	ldrb	r2, [r2, #28]
 80012f4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <modbusWrite1Register+0x80>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <modbusWrite1Register+0x80>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6859      	ldr	r1, [r3, #4]
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	440b      	add	r3, r1
 8001306:	7f52      	ldrb	r2, [r2, #29]
 8001308:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <modbusWrite1Register+0x80>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <modbusWrite1Register+0x80>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001318:	2208      	movs	r2, #8
 800131a:	4619      	mov	r1, r3
 800131c:	f00a fd08 	bl	800bd30 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <modbusWrite1Register+0x80>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2205      	movs	r2, #5
 8001326:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200002cc 	.word	0x200002cc

08001334 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800133a:	4b3a      	ldr	r3, [pc, #232]	; (8001424 <modbusRead1Register+0xf0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	7f1b      	ldrb	r3, [r3, #28]
 8001340:	b29b      	uxth	r3, r3
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	b29a      	uxth	r2, r3
 8001346:	4b37      	ldr	r3, [pc, #220]	; (8001424 <modbusRead1Register+0xf0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	7f5b      	ldrb	r3, [r3, #29]
 800134c:	b29b      	uxth	r3, r3
 800134e:	4413      	add	r3, r2
 8001350:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001352:	4b34      	ldr	r3, [pc, #208]	; (8001424 <modbusRead1Register+0xf0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	7e9b      	ldrb	r3, [r3, #26]
 8001358:	b29b      	uxth	r3, r3
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	b29a      	uxth	r2, r3
 800135e:	4b31      	ldr	r3, [pc, #196]	; (8001424 <modbusRead1Register+0xf0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	7edb      	ldrb	r3, [r3, #27]
 8001364:	b29b      	uxth	r3, r3
 8001366:	4413      	add	r3, r2
 8001368:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d002      	beq.n	8001376 <modbusRead1Register+0x42>
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	2b7d      	cmp	r3, #125	; 0x7d
 8001374:	d903      	bls.n	800137e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001376:	2003      	movs	r0, #3
 8001378:	f000 f856 	bl	8001428 <ModbusErrorReply>
		 return;
 800137c:	e04e      	b.n	800141c <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800137e:	88ba      	ldrh	r2, [r7, #4]
 8001380:	4b28      	ldr	r3, [pc, #160]	; (8001424 <modbusRead1Register+0xf0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	429a      	cmp	r2, r3
 8001388:	d808      	bhi.n	800139c <modbusRead1Register+0x68>
 800138a:	88ba      	ldrh	r2, [r7, #4]
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	4413      	add	r3, r2
 8001390:	461a      	mov	r2, r3
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <modbusRead1Register+0xf0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	429a      	cmp	r2, r3
 800139a:	d903      	bls.n	80013a4 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800139c:	2002      	movs	r0, #2
 800139e:	f000 f843 	bl	8001428 <ModbusErrorReply>
		 return;
 80013a2:	e03b      	b.n	800141c <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <modbusRead1Register+0xf0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2203      	movs	r2, #3
 80013aa:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <modbusRead1Register+0xf0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	0052      	lsls	r2, r2, #1
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80013be:	2400      	movs	r4, #0
 80013c0:	e020      	b.n	8001404 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <modbusRead1Register+0xf0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	88bb      	ldrh	r3, [r7, #4]
 80013ca:	4423      	add	r3, r4
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	18d1      	adds	r1, r2, r3
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <modbusRead1Register+0xf0>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	1c63      	adds	r3, r4, #1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	7849      	ldrb	r1, [r1, #1]
 80013da:	4413      	add	r3, r2
 80013dc:	460a      	mov	r2, r1
 80013de:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <modbusRead1Register+0xf0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	88bb      	ldrh	r3, [r7, #4]
 80013ea:	4423      	add	r3, r4
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	18d1      	adds	r1, r2, r3
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <modbusRead1Register+0xf0>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	0063      	lsls	r3, r4, #1
 80013f6:	3303      	adds	r3, #3
 80013f8:	7809      	ldrb	r1, [r1, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	460a      	mov	r2, r1
 80013fe:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001402:	3401      	adds	r4, #1
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	429c      	cmp	r4, r3
 8001408:	dbdb      	blt.n	80013c2 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	3301      	adds	r3, #1
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <modbusRead1Register+0xf0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	0052      	lsls	r2, r2, #1
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bd90      	pop	{r4, r7, pc}
 8001422:	bf00      	nop
 8001424:	200002cc 	.word	0x200002cc

08001428 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register | 0x80;
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <ModbusErrorReply+0x34>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2283      	movs	r2, #131	; 0x83
 8001438:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <ModbusErrorReply+0x34>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	79fa      	ldrb	r2, [r7, #7]
 8001442:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <ModbusErrorReply+0x34>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2202      	movs	r2, #2
 800144c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	200002cc 	.word	0x200002cc

08001460 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <Modbus_frame_response+0x2c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	7e5b      	ldrb	r3, [r3, #25]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d004      	beq.n	8001478 <Modbus_frame_response+0x18>
 800146e:	2b06      	cmp	r3, #6
 8001470:	d105      	bne.n	800147e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001472:	f7ff ff1d 	bl	80012b0 <modbusWrite1Register>
		break;
 8001476:	e006      	b.n	8001486 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001478:	f7ff ff5c 	bl	8001334 <modbusRead1Register>
		break;
 800147c:	e003      	b.n	8001486 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800147e:	2001      	movs	r0, #1
 8001480:	f7ff ffd2 	bl	8001428 <ModbusErrorReply>
		break;
 8001484:	bf00      	nop

	}
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200002cc 	.word	0x200002cc

08001490 <Modbus_Emission>:

void Modbus_Emission()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001496:	4b3d      	ldr	r3, [pc, #244]	; (800158c <Modbus_Emission+0xfc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b20      	cmp	r3, #32
 80014a4:	d15e      	bne.n	8001564 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80014a6:	4b39      	ldr	r3, [pc, #228]	; (800158c <Modbus_Emission+0xfc>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b38      	ldr	r3, [pc, #224]	; (800158c <Modbus_Emission+0xfc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	7812      	ldrb	r2, [r2, #0]
 80014b0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80014b4:	4b35      	ldr	r3, [pc, #212]	; (800158c <Modbus_Emission+0xfc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80014bc:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80014be:	4b33      	ldr	r3, [pc, #204]	; (800158c <Modbus_Emission+0xfc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80014c6:	4b31      	ldr	r3, [pc, #196]	; (800158c <Modbus_Emission+0xfc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 80014ce:	461a      	mov	r2, r3
 80014d0:	f00a fc2e 	bl	800bd30 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80014d4:	4b2d      	ldr	r3, [pc, #180]	; (800158c <Modbus_Emission+0xfc>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80014dc:	b29a      	uxth	r2, r3
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <Modbus_Emission+0xfc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3203      	adds	r2, #3
 80014e4:	b292      	uxth	r2, r2
 80014e6:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014ea:	4b28      	ldr	r3, [pc, #160]	; (800158c <Modbus_Emission+0xfc>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <Modbus_Emission+0xfc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014fa:	3b02      	subs	r3, #2
 80014fc:	4619      	mov	r1, r3
 80014fe:	4610      	mov	r0, r2
 8001500:	f7ff fd98 	bl	8001034 <CRC16>
 8001504:	4603      	mov	r3, r0
 8001506:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <Modbus_Emission+0xfc>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <Modbus_Emission+0xfc>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001514:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001516:	7939      	ldrb	r1, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	460a      	mov	r2, r1
 800151c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <Modbus_Emission+0xfc>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <Modbus_Emission+0xfc>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800152c:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800152e:	7979      	ldrb	r1, [r7, #5]
 8001530:	4413      	add	r3, r2
 8001532:	460a      	mov	r2, r1
 8001534:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <Modbus_Emission+0xfc>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b20      	cmp	r3, #32
 8001546:	d10d      	bne.n	8001564 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <Modbus_Emission+0xfc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <Modbus_Emission+0xfc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <Modbus_Emission+0xfc>)
 8001558:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800155a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800155e:	461a      	mov	r2, r3
 8001560:	f009 fa54 	bl	800aa0c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <Modbus_Emission+0xfc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2200      	movs	r2, #0
 800156a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <Modbus_Emission+0xfc>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2200      	movs	r2, #0
 8001572:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <Modbus_Emission+0xfc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2200      	movs	r2, #0
 800157a:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <Modbus_Emission+0xfc>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2202      	movs	r2, #2
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200002cc 	.word	0x200002cc

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001594:	f003 f88e 	bl	80046b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001598:	f000 fa4c 	bl	8001a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159c:	f000 fd04 	bl	8001fa8 <MX_GPIO_Init>
  MX_DMA_Init();
 80015a0:	f000 fccc 	bl	8001f3c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015a4:	f000 fc9e 	bl	8001ee4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80015a8:	f000 fbca 	bl	8001d40 <MX_TIM3_Init>
  MX_TIM1_Init();
 80015ac:	f000 fb38 	bl	8001c20 <MX_TIM1_Init>
  MX_ADC1_Init();
 80015b0:	f000 faa8 	bl	8001b04 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80015b4:	f000 fc6c 	bl	8001e90 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80015b8:	f000 fb04 	bl	8001bc4 <MX_I2C1_Init>
  MX_TIM11_Init();
 80015bc:	f000 fc14 	bl	8001de8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  hmodbus.huart = &huart2;
 80015c0:	4b7d      	ldr	r3, [pc, #500]	; (80017b8 <main+0x228>)
 80015c2:	4a7e      	ldr	r2, [pc, #504]	; (80017bc <main+0x22c>)
 80015c4:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 80015c6:	4b7c      	ldr	r3, [pc, #496]	; (80017b8 <main+0x228>)
 80015c8:	4a7d      	ldr	r2, [pc, #500]	; (80017c0 <main+0x230>)
 80015ca:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80015cc:	4b7a      	ldr	r3, [pc, #488]	; (80017b8 <main+0x228>)
 80015ce:	2215      	movs	r2, #21
 80015d0:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 70;
 80015d2:	4b79      	ldr	r3, [pc, #484]	; (80017b8 <main+0x228>)
 80015d4:	2246      	movs	r2, #70	; 0x46
 80015d6:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80015d8:	497a      	ldr	r1, [pc, #488]	; (80017c4 <main+0x234>)
 80015da:	4877      	ldr	r0, [pc, #476]	; (80017b8 <main+0x228>)
 80015dc:	f7ff fcd4 	bl	8000f88 <Modbus_init>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80015e0:	2104      	movs	r1, #4
 80015e2:	4879      	ldr	r0, [pc, #484]	; (80017c8 <main+0x238>)
 80015e4:	f008 f8f6 	bl	80097d4 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Start Timer1
 80015e8:	4878      	ldr	r0, [pc, #480]	; (80017cc <main+0x23c>)
 80015ea:	f007 fd43 	bl	8009074 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015ee:	2100      	movs	r1, #0
 80015f0:	4876      	ldr	r0, [pc, #472]	; (80017cc <main+0x23c>)
 80015f2:	f007 febd 	bl	8009370 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80015f6:	2104      	movs	r1, #4
 80015f8:	4874      	ldr	r0, [pc, #464]	; (80017cc <main+0x23c>)
 80015fa:	f007 feb9 	bl	8009370 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, L_EN);
 80015fe:	4b74      	ldr	r3, [pc, #464]	; (80017d0 <main+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	461a      	mov	r2, r3
 8001606:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800160a:	4872      	ldr	r0, [pc, #456]	; (80017d4 <main+0x244>)
 800160c:	f004 fbb4 	bl	8005d78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, R_EN);
 8001610:	4b71      	ldr	r3, [pc, #452]	; (80017d8 <main+0x248>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	461a      	mov	r2, r3
 8001618:	2110      	movs	r1, #16
 800161a:	486e      	ldr	r0, [pc, #440]	; (80017d4 <main+0x244>)
 800161c:	f004 fbac 	bl	8005d78 <HAL_GPIO_WritePin>


  HAL_ADC_Start_DMA(&hadc1, XYSwitch, 2);
 8001620:	2202      	movs	r2, #2
 8001622:	496e      	ldr	r1, [pc, #440]	; (80017dc <main+0x24c>)
 8001624:	486e      	ldr	r0, [pc, #440]	; (80017e0 <main+0x250>)
 8001626:	f003 f91f 	bl	8004868 <HAL_ADC_Start_DMA>

  EndEffectorState = 0;	//SoftReset
 800162a:	4b6e      	ldr	r3, [pc, #440]	; (80017e4 <main+0x254>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
  EndEffectorWriteFlag = 1;
 8001630:	4b6d      	ldr	r3, [pc, #436]	; (80017e8 <main+0x258>)
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Protocal_Worker();
 8001636:	f7ff fd33 	bl	80010a0 <Modbus_Protocal_Worker>
	  static uint32_t heartbeat = 0;
	  if(heartbeat < HAL_GetTick())
 800163a:	f003 f8a1 	bl	8004780 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	4b6a      	ldr	r3, [pc, #424]	; (80017ec <main+0x25c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d909      	bls.n	800165c <main+0xcc>
	  {
		  heartbeat = HAL_GetTick()+100;
 8001648:	f003 f89a 	bl	8004780 <HAL_GetTick>
 800164c:	4603      	mov	r3, r0
 800164e:	3364      	adds	r3, #100	; 0x64
 8001650:	4a66      	ldr	r2, [pc, #408]	; (80017ec <main+0x25c>)
 8001652:	6013      	str	r3, [r2, #0]
		  registerFrame[0].U16 = 22881;
 8001654:	4b5b      	ldr	r3, [pc, #364]	; (80017c4 <main+0x234>)
 8001656:	f645 1261 	movw	r2, #22881	; 0x5961
 800165a:	801a      	strh	r2, [r3, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  VelocityApprox();
 800165c:	f000 fee0 	bl	8002420 <VelocityApprox>
	  AccelerationApprox();
 8001660:	f000 ff0c 	bl	800247c <AccelerationApprox>
	  Routine(); //Sent Y Actual Position Velocity Acceleration to Base System
 8001664:	f000 ff28 	bl	80024b8 <Routine>

  	  EndEffectorWrite(); //I2C
 8001668:	f000 fd44 	bl	80020f4 <EndEffectorWrite>
	  JoystickPinUpdate(); //Check Pin Flag
 800166c:	f000 ffec 	bl	8002648 <JoystickPinUpdate>

	  switch(scheduler)
 8001670:	4b5f      	ldr	r3, [pc, #380]	; (80017f0 <main+0x260>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b05      	cmp	r3, #5
 8001676:	d8de      	bhi.n	8001636 <main+0xa6>
 8001678:	a201      	add	r2, pc, #4	; (adr r2, 8001680 <main+0xf0>)
 800167a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167e:	bf00      	nop
 8001680:	08001699 	.word	0x08001699
 8001684:	080016af 	.word	0x080016af
 8001688:	0800172f 	.word	0x0800172f
 800168c:	0800180d 	.word	0x0800180d
 8001690:	08001981 	.word	0x08001981
 8001694:	080019db 	.word	0x080019db
	  {
	  //JoyStick
	  case 0:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001698:	4b4b      	ldr	r3, [pc, #300]	; (80017c8 <main+0x238>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	b21a      	sxth	r2, r3
 80016a0:	4b54      	ldr	r3, [pc, #336]	; (80017f4 <main+0x264>)
 80016a2:	801a      	strh	r2, [r3, #0]
		  JoystickControl(); //Read Pin form JoyStick
 80016a4:	f001 f86c 	bl	8002780 <JoystickControl>
		  JoystickLocationState();
 80016a8:	f001 f936 	bl	8002918 <JoystickLocationState>
		  break;
 80016ac:	e19b      	b.n	80019e6 <main+0x456>

	  //Go Pick
	  case 1 :
		  registerFrame[16].U16 = 8; //Y Moving Status: Go Pick
 80016ae:	4b45      	ldr	r3, [pc, #276]	; (80017c4 <main+0x234>)
 80016b0:	2208      	movs	r2, #8
 80016b2:	841a      	strh	r2, [r3, #32]
		  qf = (PickTray.hole_y[HoleSequence])/0.045;
 80016b4:	4b50      	ldr	r3, [pc, #320]	; (80017f8 <main+0x268>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a50      	ldr	r2, [pc, #320]	; (80017fc <main+0x26c>)
 80016ba:	330c      	adds	r3, #12
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	3304      	adds	r3, #4
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe feeb 	bl	80004a0 <__aeabi_f2d>
 80016ca:	a339      	add	r3, pc, #228	; (adr r3, 80017b0 <main+0x220>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7ff f868 	bl	80007a4 <__aeabi_ddiv>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff fa30 	bl	8000b40 <__aeabi_d2f>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a47      	ldr	r2, [pc, #284]	; (8001800 <main+0x270>)
 80016e4:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PickTray.hole_x[HoleSequence]*10; //X-Axis Target Position Pick Tray
 80016e6:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <main+0x268>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a44      	ldr	r2, [pc, #272]	; (80017fc <main+0x26c>)
 80016ec:	3304      	adds	r3, #4
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001702:	ee17 3a90 	vmov	r3, s15
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <main+0x234>)
 800170a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 800170e:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <main+0x234>)
 8001710:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001714:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 3;
 8001718:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <main+0x234>)
 800171a:	2203      	movs	r2, #3
 800171c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  Trajectstate = 0;
 8001720:	4b38      	ldr	r3, [pc, #224]	; (8001804 <main+0x274>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
		  scheduler = 3;
 8001726:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <main+0x260>)
 8001728:	2203      	movs	r2, #3
 800172a:	601a      	str	r2, [r3, #0]
		  break;
 800172c:	e15b      	b.n	80019e6 <main+0x456>

	  //Go Place
	  case 2 :
		  registerFrame[16].U16 = 16; //Y Moving Status: Go Place
 800172e:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <main+0x234>)
 8001730:	2210      	movs	r2, #16
 8001732:	841a      	strh	r2, [r3, #32]
		  qf = (PlaceTray.hole_y[HoleSequence])/0.045;
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <main+0x268>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a33      	ldr	r2, [pc, #204]	; (8001808 <main+0x278>)
 800173a:	330c      	adds	r3, #12
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	3304      	adds	r3, #4
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe feab 	bl	80004a0 <__aeabi_f2d>
 800174a:	a319      	add	r3, pc, #100	; (adr r3, 80017b0 <main+0x220>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7ff f828 	bl	80007a4 <__aeabi_ddiv>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff f9f0 	bl	8000b40 <__aeabi_d2f>
 8001760:	4603      	mov	r3, r0
 8001762:	4a27      	ldr	r2, [pc, #156]	; (8001800 <main+0x270>)
 8001764:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PlaceTray.hole_x[HoleSequence]*10; //X-Axis Target Position Place Tray
 8001766:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <main+0x268>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a27      	ldr	r2, [pc, #156]	; (8001808 <main+0x278>)
 800176c:	3304      	adds	r3, #4
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800177a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800177e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001782:	ee17 3a90 	vmov	r3, s15
 8001786:	b29a      	uxth	r2, r3
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <main+0x234>)
 800178a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <main+0x234>)
 8001790:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001794:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 3;
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <main+0x234>)
 800179a:	2203      	movs	r2, #3
 800179c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  Trajectstate = 0;
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <main+0x274>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
		  scheduler = 3;
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <main+0x260>)
 80017a8:	2203      	movs	r2, #3
 80017aa:	601a      	str	r2, [r3, #0]
		  break;
 80017ac:	e11b      	b.n	80019e6 <main+0x456>
 80017ae:	bf00      	nop
 80017b0:	70a3d70a 	.word	0x70a3d70a
 80017b4:	3fa70a3d 	.word	0x3fa70a3d
 80017b8:	200008e0 	.word	0x200008e0
 80017bc:	2000065c 	.word	0x2000065c
 80017c0:	20000534 	.word	0x20000534
 80017c4:	20000db8 	.word	0x20000db8
 80017c8:	20000480 	.word	0x20000480
 80017cc:	200003cc 	.word	0x200003cc
 80017d0:	20000208 	.word	0x20000208
 80017d4:	40020400 	.word	0x40020400
 80017d8:	20000204 	.word	0x20000204
 80017dc:	200008c4 	.word	0x200008c4
 80017e0:	200002d0 	.word	0x200002d0
 80017e4:	200008d8 	.word	0x200008d8
 80017e8:	200008d0 	.word	0x200008d0
 80017ec:	20000e44 	.word	0x20000e44
 80017f0:	20000730 	.word	0x20000730
 80017f4:	2000077c 	.word	0x2000077c
 80017f8:	20000734 	.word	0x20000734
 80017fc:	200007b8 	.word	0x200007b8
 8001800:	20000744 	.word	0x20000744
 8001804:	2000073c 	.word	0x2000073c
 8001808:	2000081c 	.word	0x2000081c

	  //Trajectory
	  case 3:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 800180c:	4b78      	ldr	r3, [pc, #480]	; (80019f0 <main+0x460>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	b21a      	sxth	r2, r3
 8001814:	4b77      	ldr	r3, [pc, #476]	; (80019f4 <main+0x464>)
 8001816:	801a      	strh	r2, [r3, #0]
		  static uint32_t timestamp0 = 0;
		  if(HAL_GetTick() > timestamp0)
 8001818:	f002 ffb2 	bl	8004780 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	4b76      	ldr	r3, [pc, #472]	; (80019f8 <main+0x468>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d917      	bls.n	8001856 <main+0x2c6>
		  {
			  timestamp0 = HAL_GetTick() + 0.1;
 8001826:	f002 ffab 	bl	8004780 <HAL_GetTick>
 800182a:	4603      	mov	r3, r0
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fe15 	bl	800045c <__aeabi_ui2d>
 8001832:	a36d      	add	r3, pc, #436	; (adr r3, 80019e8 <main+0x458>)
 8001834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001838:	f7fe fcd4 	bl	80001e4 <__adddf3>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f7ff f95c 	bl	8000b00 <__aeabi_d2uiz>
 8001848:	4603      	mov	r3, r0
 800184a:	4a6b      	ldr	r2, [pc, #428]	; (80019f8 <main+0x468>)
 800184c:	6013      	str	r3, [r2, #0]
			  VelocityApprox();
 800184e:	f000 fde7 	bl	8002420 <VelocityApprox>
			  AccelerationApprox();
 8001852:	f000 fe13 	bl	800247c <AccelerationApprox>
		  }

		  static uint32_t timestamp1 = 0;
		  if(HAL_GetTick() > timestamp1)
 8001856:	f002 ff93 	bl	8004780 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <main+0x46c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d915      	bls.n	8001890 <main+0x300>
		  {
			  timestamp1 = HAL_GetTick() + 0.5;
 8001864:	f002 ff8c 	bl	8004780 <HAL_GetTick>
 8001868:	4603      	mov	r3, r0
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fdf6 	bl	800045c <__aeabi_ui2d>
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	4b62      	ldr	r3, [pc, #392]	; (8001a00 <main+0x470>)
 8001876:	f7fe fcb5 	bl	80001e4 <__adddf3>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	f7ff f93d 	bl	8000b00 <__aeabi_d2uiz>
 8001886:	4603      	mov	r3, r0
 8001888:	4a5c      	ldr	r2, [pc, #368]	; (80019fc <main+0x46c>)
 800188a:	6013      	str	r3, [r2, #0]
			  TrajectoryGenerator();
 800188c:	f001 feb0 	bl	80035f0 <TrajectoryGenerator>
		  }

		  //PWM & Motor drive & PID
		  static uint32_t timestamp2 = 0;
		  if (HAL_GetTick()>= timestamp2)
 8001890:	f002 ff76 	bl	8004780 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	4b5b      	ldr	r3, [pc, #364]	; (8001a04 <main+0x474>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d349      	bcc.n	8001932 <main+0x3a2>
		  {
			  timestamp2 = HAL_GetTick() + 0.5;
 800189e:	f002 ff6f 	bl	8004780 <HAL_GetTick>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fdd9 	bl	800045c <__aeabi_ui2d>
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	4b54      	ldr	r3, [pc, #336]	; (8001a00 <main+0x470>)
 80018b0:	f7fe fc98 	bl	80001e4 <__adddf3>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	f7ff f920 	bl	8000b00 <__aeabi_d2uiz>
 80018c0:	4603      	mov	r3, r0
 80018c2:	4a50      	ldr	r2, [pc, #320]	; (8001a04 <main+0x474>)
 80018c4:	6013      	str	r3, [r2, #0]
			  duty = PIDcal();
 80018c6:	f000 fe57 	bl	8002578 <PIDcal>
 80018ca:	eef0 7a40 	vmov.f32	s15, s0
 80018ce:	4b4e      	ldr	r3, [pc, #312]	; (8001a08 <main+0x478>)
 80018d0:	edc3 7a00 	vstr	s15, [r3]
			  if (duty >= 0)
 80018d4:	4b4c      	ldr	r3, [pc, #304]	; (8001a08 <main+0x478>)
 80018d6:	edd3 7a00 	vldr	s15, [r3]
 80018da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e2:	db0e      	blt.n	8001902 <main+0x372>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80018e4:	4b49      	ldr	r3, [pc, #292]	; (8001a0c <main+0x47c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2200      	movs	r2, #0
 80018ea:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 80018ec:	4b46      	ldr	r3, [pc, #280]	; (8001a08 <main+0x478>)
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	4b46      	ldr	r3, [pc, #280]	; (8001a0c <main+0x47c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018fa:	ee17 2a90 	vmov	r2, s15
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001900:	e017      	b.n	8001932 <main+0x3a2>
			  }
			  else if (duty < 0)
 8001902:	4b41      	ldr	r3, [pc, #260]	; (8001a08 <main+0x478>)
 8001904:	edd3 7a00 	vldr	s15, [r3]
 8001908:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800190c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001910:	d50f      	bpl.n	8001932 <main+0x3a2>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001912:	4b3e      	ldr	r3, [pc, #248]	; (8001a0c <main+0x47c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2200      	movs	r2, #0
 8001918:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
 800191a:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <main+0x478>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	eef1 7a67 	vneg.f32	s15, s15
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <main+0x47c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800192c:	ee17 2a90 	vmov	r2, s15
 8001930:	639a      	str	r2, [r3, #56]	; 0x38
			  }
		  }

		  // Check Final Position
		  if(position == qf){
 8001932:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <main+0x464>)
 8001934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001938:	ee07 3a90 	vmov	s15, r3
 800193c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001940:	4b33      	ldr	r3, [pc, #204]	; (8001a10 <main+0x480>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	eeb4 7a67 	vcmp.f32	s14, s15
 800194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194e:	d10c      	bne.n	800196a <main+0x3da>
			  static int FinalTime = 0;
			  FinalTime += 1;
 8001950:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <main+0x484>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	3301      	adds	r3, #1
 8001956:	4a2f      	ldr	r2, [pc, #188]	; (8001a14 <main+0x484>)
 8001958:	6013      	str	r3, [r2, #0]
			  if(FinalTime >= 50000000){
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <main+0x484>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a2e      	ldr	r2, [pc, #184]	; (8001a18 <main+0x488>)
 8001960:	4293      	cmp	r3, r2
 8001962:	dd02      	ble.n	800196a <main+0x3da>
				  // End Effector
				  scheduler = 4;
 8001964:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <main+0x48c>)
 8001966:	2204      	movs	r2, #4
 8001968:	601a      	str	r2, [r3, #0]
			  }
		  }

		  // Reset Button
		  if (ResetButton.flag == 1)
 800196a:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <main+0x490>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d136      	bne.n	80019e0 <main+0x450>
		  {
			  ResetButton.flag = 0;
 8001972:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <main+0x490>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
			  scheduler = 0;
 8001978:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <main+0x48c>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
		  }
		  break;
 800197e:	e02f      	b.n	80019e0 <main+0x450>

	  //Proximity
	  case 4 :
		  if (HoleSequence == 9)
 8001980:	4b28      	ldr	r3, [pc, #160]	; (8001a24 <main+0x494>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b09      	cmp	r3, #9
 8001986:	d103      	bne.n	8001990 <main+0x400>
		  {
			  scheduler = 0;
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <main+0x48c>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e019      	b.n	80019c4 <main+0x434>
		  }
		  else if (HoleSequence < 9)
 8001990:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <main+0x494>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b08      	cmp	r3, #8
 8001996:	dc15      	bgt.n	80019c4 <main+0x434>
		  {
			  if (TaskType == 1)
 8001998:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <main+0x498>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d106      	bne.n	80019ae <main+0x41e>
			  {
				  EndEffectorState = 4;			//Pick
 80019a0:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <main+0x49c>)
 80019a2:	2204      	movs	r2, #4
 80019a4:	601a      	str	r2, [r3, #0]
				  EndEffectorWriteFlag = 1;
 80019a6:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <main+0x4a0>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	e00a      	b.n	80019c4 <main+0x434>
			  }
			  else if (TaskType == -1)
 80019ae:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <main+0x498>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b6:	d105      	bne.n	80019c4 <main+0x434>
			  {
				  EndEffectorState = 5;			//Place
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <main+0x49c>)
 80019ba:	2205      	movs	r2, #5
 80019bc:	601a      	str	r2, [r3, #0]
				  EndEffectorWriteFlag = 1;
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <main+0x4a0>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  if (ResetButton.flag == 1)
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <main+0x490>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d10b      	bne.n	80019e4 <main+0x454>
			  {
				  ResetButton.flag = 0;
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <main+0x490>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
				  scheduler = 0;
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <main+0x48c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
			  }
		  break;
 80019d8:	e004      	b.n	80019e4 <main+0x454>

	  //Emergency
	  case 5:
		  Homing();
 80019da:	f000 fb61 	bl	80020a0 <Homing>
		  break;
 80019de:	e002      	b.n	80019e6 <main+0x456>
		  break;
 80019e0:	bf00      	nop
 80019e2:	e628      	b.n	8001636 <main+0xa6>
		  break;
 80019e4:	bf00      	nop
  {
 80019e6:	e626      	b.n	8001636 <main+0xa6>
 80019e8:	9999999a 	.word	0x9999999a
 80019ec:	3fb99999 	.word	0x3fb99999
 80019f0:	20000480 	.word	0x20000480
 80019f4:	2000077c 	.word	0x2000077c
 80019f8:	20000e48 	.word	0x20000e48
 80019fc:	20000e4c 	.word	0x20000e4c
 8001a00:	3fe00000 	.word	0x3fe00000
 8001a04:	20000e50 	.word	0x20000e50
 8001a08:	20000738 	.word	0x20000738
 8001a0c:	200003cc 	.word	0x200003cc
 8001a10:	20000744 	.word	0x20000744
 8001a14:	20000e54 	.word	0x20000e54
 8001a18:	02faf07f 	.word	0x02faf07f
 8001a1c:	20000730 	.word	0x20000730
 8001a20:	20000894 	.word	0x20000894
 8001a24:	20000734 	.word	0x20000734
 8001a28:	20000200 	.word	0x20000200
 8001a2c:	200008d8 	.word	0x200008d8
 8001a30:	200008d0 	.word	0x200008d0

08001a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b094      	sub	sp, #80	; 0x50
 8001a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3a:	f107 0320 	add.w	r3, r7, #32
 8001a3e:	2230      	movs	r2, #48	; 0x30
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f00a f982 	bl	800bd4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	4b27      	ldr	r3, [pc, #156]	; (8001afc <SystemClock_Config+0xc8>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	4a26      	ldr	r2, [pc, #152]	; (8001afc <SystemClock_Config+0xc8>)
 8001a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a66:	6413      	str	r3, [r2, #64]	; 0x40
 8001a68:	4b24      	ldr	r3, [pc, #144]	; (8001afc <SystemClock_Config+0xc8>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <SystemClock_Config+0xcc>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a20      	ldr	r2, [pc, #128]	; (8001b00 <SystemClock_Config+0xcc>)
 8001a7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <SystemClock_Config+0xcc>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a90:	2302      	movs	r3, #2
 8001a92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a94:	2301      	movs	r3, #1
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a98:	2310      	movs	r3, #16
 8001a9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001aa4:	2308      	movs	r3, #8
 8001aa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001aa8:	2364      	movs	r3, #100	; 0x64
 8001aaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aac:	2302      	movs	r3, #2
 8001aae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab4:	f107 0320 	add.w	r3, r7, #32
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f006 fde7 	bl	800868c <HAL_RCC_OscConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ac4:	f002 faaa 	bl	800401c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac8:	230f      	movs	r3, #15
 8001aca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001acc:	2302      	movs	r3, #2
 8001ace:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	2103      	movs	r1, #3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f007 f849 	bl	8008b7c <HAL_RCC_ClockConfig>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001af0:	f002 fa94 	bl	800401c <Error_Handler>
  }
}
 8001af4:	bf00      	nop
 8001af6:	3750      	adds	r7, #80	; 0x50
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40007000 	.word	0x40007000

08001b04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b16:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <MX_ADC1_Init+0xb4>)
 8001b18:	4a28      	ldr	r2, [pc, #160]	; (8001bbc <MX_ADC1_Init+0xb8>)
 8001b1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b1c:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <MX_ADC1_Init+0xb4>)
 8001b1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <MX_ADC1_Init+0xb4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b2a:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <MX_ADC1_Init+0xb4>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b30:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <MX_ADC1_Init+0xb4>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b36:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <MX_ADC1_Init+0xb4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <MX_ADC1_Init+0xb4>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b44:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <MX_ADC1_Init+0xb4>)
 8001b46:	4a1e      	ldr	r2, [pc, #120]	; (8001bc0 <MX_ADC1_Init+0xbc>)
 8001b48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <MX_ADC1_Init+0xb4>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <MX_ADC1_Init+0xb4>)
 8001b52:	2202      	movs	r2, #2
 8001b54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <MX_ADC1_Init+0xb4>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <MX_ADC1_Init+0xb4>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b64:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <MX_ADC1_Init+0xb4>)
 8001b66:	f002 fe3b 	bl	80047e0 <HAL_ADC_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b70:	f002 fa54 	bl	800401c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	4619      	mov	r1, r3
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <MX_ADC1_Init+0xb4>)
 8001b86:	f002 ff7d 	bl	8004a84 <HAL_ADC_ConfigChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b90:	f002 fa44 	bl	800401c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b94:	2301      	movs	r3, #1
 8001b96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_ADC1_Init+0xb4>)
 8001ba2:	f002 ff6f 	bl	8004a84 <HAL_ADC_ConfigChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001bac:	f002 fa36 	bl	800401c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	200002d0 	.word	0x200002d0
 8001bbc:	40012000 	.word	0x40012000
 8001bc0:	0f000001 	.word	0x0f000001

08001bc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001bca:	4a13      	ldr	r2, [pc, #76]	; (8001c18 <MX_I2C1_Init+0x54>)
 8001bcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001bd0:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <MX_I2C1_Init+0x58>)
 8001bd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001be2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001be6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bf4:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c00:	4804      	ldr	r0, [pc, #16]	; (8001c14 <MX_I2C1_Init+0x50>)
 8001c02:	f004 f8d3 	bl	8005dac <HAL_I2C_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c0c:	f002 fa06 	bl	800401c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000378 	.word	0x20000378
 8001c18:	40005400 	.word	0x40005400
 8001c1c:	000186a0 	.word	0x000186a0

08001c20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b092      	sub	sp, #72	; 0x48
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
 8001c40:	615a      	str	r2, [r3, #20]
 8001c42:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	2220      	movs	r2, #32
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f00a f87e 	bl	800bd4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c50:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001c52:	4a3a      	ldr	r2, [pc, #232]	; (8001d3c <MX_TIM1_Init+0x11c>)
 8001c54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8001c56:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001c58:	2263      	movs	r2, #99	; 0x63
 8001c5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5c:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001c62:	4b35      	ldr	r3, [pc, #212]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001c64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6a:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c70:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c76:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c7c:	482e      	ldr	r0, [pc, #184]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001c7e:	f007 fb1b 	bl	80092b8 <HAL_TIM_PWM_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001c88:	f002 f9c8 	bl	800401c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4827      	ldr	r0, [pc, #156]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001c9c:	f008 fca6 	bl	800a5ec <HAL_TIMEx_MasterConfigSynchronization>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001ca6:	f002 f9b9 	bl	800401c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001caa:	2360      	movs	r3, #96	; 0x60
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cca:	2200      	movs	r2, #0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	481a      	ldr	r0, [pc, #104]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001cd0:	f007 ff92 	bl	8009bf8 <HAL_TIM_PWM_ConfigChannel>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001cda:	f002 f99f 	bl	800401c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4814      	ldr	r0, [pc, #80]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001ce8:	f007 ff86 	bl	8009bf8 <HAL_TIM_PWM_ConfigChannel>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001cf2:	f002 f993 	bl	800401c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	4619      	mov	r1, r3
 8001d18:	4807      	ldr	r0, [pc, #28]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001d1a:	f008 fcd5 	bl	800a6c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001d24:	f002 f97a 	bl	800401c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d28:	4803      	ldr	r0, [pc, #12]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001d2a:	f002 fb0d 	bl	8004348 <HAL_TIM_MspPostInit>

}
 8001d2e:	bf00      	nop
 8001d30:	3748      	adds	r7, #72	; 0x48
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200003cc 	.word	0x200003cc
 8001d3c:	40010000 	.word	0x40010000

08001d40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08c      	sub	sp, #48	; 0x30
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	2224      	movs	r2, #36	; 0x24
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f009 fffc 	bl	800bd4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d5c:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <MX_TIM3_Init+0xa0>)
 8001d5e:	4a21      	ldr	r2, [pc, #132]	; (8001de4 <MX_TIM3_Init+0xa4>)
 8001d60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <MX_TIM3_Init+0xa0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <MX_TIM3_Init+0xa0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD-1;
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <MX_TIM3_Init+0xa0>)
 8001d70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <MX_TIM3_Init+0xa0>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7c:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <MX_TIM3_Init+0xa0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d82:	2303      	movs	r3, #3
 8001d84:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	4619      	mov	r1, r3
 8001dac:	480c      	ldr	r0, [pc, #48]	; (8001de0 <MX_TIM3_Init+0xa0>)
 8001dae:	f007 fc5d 	bl	800966c <HAL_TIM_Encoder_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001db8:	f002 f930 	bl	800401c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_TIM3_Init+0xa0>)
 8001dca:	f008 fc0f 	bl	800a5ec <HAL_TIMEx_MasterConfigSynchronization>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001dd4:	f002 f922 	bl	800401c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	3730      	adds	r7, #48	; 0x30
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000480 	.word	0x20000480
 8001de4:	40000400 	.word	0x40000400

08001de8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
 8001dfc:	615a      	str	r2, [r3, #20]
 8001dfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001e00:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <MX_TIM11_Init+0xa0>)
 8001e02:	4a22      	ldr	r2, [pc, #136]	; (8001e8c <MX_TIM11_Init+0xa4>)
 8001e04:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <MX_TIM11_Init+0xa0>)
 8001e08:	2263      	movs	r2, #99	; 0x63
 8001e0a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <MX_TIM11_Init+0xa0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <MX_TIM11_Init+0xa0>)
 8001e14:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8001e18:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <MX_TIM11_Init+0xa0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <MX_TIM11_Init+0xa0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001e26:	4818      	ldr	r0, [pc, #96]	; (8001e88 <MX_TIM11_Init+0xa0>)
 8001e28:	f007 f8c8 	bl	8008fbc <HAL_TIM_Base_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001e32:	f002 f8f3 	bl	800401c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8001e36:	4814      	ldr	r0, [pc, #80]	; (8001e88 <MX_TIM11_Init+0xa0>)
 8001e38:	f007 f9d8 	bl	80091ec <HAL_TIM_OC_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001e42:	f002 f8eb 	bl	800401c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8001e46:	2108      	movs	r1, #8
 8001e48:	480f      	ldr	r0, [pc, #60]	; (8001e88 <MX_TIM11_Init+0xa0>)
 8001e4a:	f007 fb41 	bl	80094d0 <HAL_TIM_OnePulse_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8001e54:	f002 f8e2 	bl	800401c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001e58:	2310      	movs	r3, #16
 8001e5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8001e5c:	f240 5399 	movw	r3, #1433	; 0x599
 8001e60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_TIM11_Init+0xa0>)
 8001e72:	f007 fe65 	bl	8009b40 <HAL_TIM_OC_ConfigChannel>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8001e7c:	f002 f8ce 	bl	800401c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001e80:	bf00      	nop
 8001e82:	3720      	adds	r7, #32
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000534 	.word	0x20000534
 8001e8c:	40014800 	.word	0x40014800

08001e90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <MX_USART1_UART_Init+0x4c>)
 8001e96:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <MX_USART1_UART_Init+0x50>)
 8001e98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <MX_USART1_UART_Init+0x4c>)
 8001e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ea0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <MX_USART1_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <MX_USART1_UART_Init+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <MX_USART1_UART_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <MX_USART1_UART_Init+0x4c>)
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <MX_USART1_UART_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <MX_USART1_UART_Init+0x4c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ec6:	4805      	ldr	r0, [pc, #20]	; (8001edc <MX_USART1_UART_Init+0x4c>)
 8001ec8:	f008 fc6e 	bl	800a7a8 <HAL_UART_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ed2:	f002 f8a3 	bl	800401c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200005e8 	.word	0x200005e8
 8001ee0:	40011000 	.word	0x40011000

08001ee4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <MX_USART2_UART_Init+0x50>)
 8001eea:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <MX_USART2_UART_Init+0x54>)
 8001eec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <MX_USART2_UART_Init+0x50>)
 8001ef0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001ef4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <MX_USART2_UART_Init+0x50>)
 8001ef8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001efc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <MX_USART2_UART_Init+0x50>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <MX_USART2_UART_Init+0x50>)
 8001f06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <MX_USART2_UART_Init+0x50>)
 8001f0e:	220c      	movs	r2, #12
 8001f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f12:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <MX_USART2_UART_Init+0x50>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <MX_USART2_UART_Init+0x50>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f1e:	4805      	ldr	r0, [pc, #20]	; (8001f34 <MX_USART2_UART_Init+0x50>)
 8001f20:	f008 fc42 	bl	800a7a8 <HAL_UART_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001f2a:	f002 f877 	bl	800401c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2000065c 	.word	0x2000065c
 8001f38:	40004400 	.word	0x40004400

08001f3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <MX_DMA_Init+0x68>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <MX_DMA_Init+0x68>)
 8001f4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <MX_DMA_Init+0x68>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	603b      	str	r3, [r7, #0]
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <MX_DMA_Init+0x68>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <MX_DMA_Init+0x68>)
 8001f68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <MX_DMA_Init+0x68>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2011      	movs	r0, #17
 8001f80:	f003 f90b 	bl	800519a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001f84:	2011      	movs	r0, #17
 8001f86:	f003 f924 	bl	80051d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2038      	movs	r0, #56	; 0x38
 8001f90:	f003 f903 	bl	800519a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f94:	2038      	movs	r0, #56	; 0x38
 8001f96:	f003 f91c 	bl	80051d2 <HAL_NVIC_EnableIRQ>

}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800

08001fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	4b34      	ldr	r3, [pc, #208]	; (8002094 <MX_GPIO_Init+0xec>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a33      	ldr	r2, [pc, #204]	; (8002094 <MX_GPIO_Init+0xec>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b31      	ldr	r3, [pc, #196]	; (8002094 <MX_GPIO_Init+0xec>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <MX_GPIO_Init+0xec>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a2c      	ldr	r2, [pc, #176]	; (8002094 <MX_GPIO_Init+0xec>)
 8001fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <MX_GPIO_Init+0xec>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	4b26      	ldr	r3, [pc, #152]	; (8002094 <MX_GPIO_Init+0xec>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a25      	ldr	r2, [pc, #148]	; (8002094 <MX_GPIO_Init+0xec>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b23      	ldr	r3, [pc, #140]	; (8002094 <MX_GPIO_Init+0xec>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <MX_GPIO_Init+0xec>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a1e      	ldr	r2, [pc, #120]	; (8002094 <MX_GPIO_Init+0xec>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <MX_GPIO_Init+0xec>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8002034:	4818      	ldr	r0, [pc, #96]	; (8002098 <MX_GPIO_Init+0xf0>)
 8002036:	f003 fe9f 	bl	8005d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800203a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800203e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002040:	2300      	movs	r3, #0
 8002042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4619      	mov	r1, r3
 800204e:	4813      	ldr	r0, [pc, #76]	; (800209c <MX_GPIO_Init+0xf4>)
 8002050:	f003 fcf6 	bl	8005a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8002054:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8002058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205a:	2301      	movs	r3, #1
 800205c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4619      	mov	r1, r3
 800206c:	480a      	ldr	r0, [pc, #40]	; (8002098 <MX_GPIO_Init+0xf0>)
 800206e:	f003 fce7 	bl	8005a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002072:	2360      	movs	r3, #96	; 0x60
 8002074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	4804      	ldr	r0, [pc, #16]	; (8002098 <MX_GPIO_Init+0xf0>)
 8002086:	f003 fcdb 	bl	8005a40 <HAL_GPIO_Init>

}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	; 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	40020400 	.word	0x40020400
 800209c:	40020000 	.word	0x40020000

080020a0 <Homing>:
		Proximity = 2;
	}
}

void Homing()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	if (Proximity == 1)
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <Homing+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b01      	cmp	r3, #1
//		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
//		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
	}

	//Proximity Home
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 1)
 80020aa:	2102      	movs	r1, #2
 80020ac:	480d      	ldr	r0, [pc, #52]	; (80020e4 <Homing+0x44>)
 80020ae:	f003 fe4b 	bl	8005d48 <HAL_GPIO_ReadPin>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d110      	bne.n	80020da <Homing+0x3a>
	{
		Proximity = 0;
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <Homing+0x40>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <Homing+0x48>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2200      	movs	r2, #0
 80020c4:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <Homing+0x48>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2200      	movs	r2, #0
 80020cc:	635a      	str	r2, [r3, #52]	; 0x34
		JoySpeed = 0;
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <Homing+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
		scheduler = 0;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <Homing+0x50>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
	}
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200008dc 	.word	0x200008dc
 80020e4:	40020800 	.word	0x40020800
 80020e8:	200003cc 	.word	0x200003cc
 80020ec:	200008cc 	.word	0x200008cc
 80020f0:	20000730 	.word	0x20000730

080020f4 <EndEffectorWrite>:

void EndEffectorWrite()
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af02      	add	r7, sp, #8
	static uint32_t Readstamp = 0;
	if(HAL_GetTick() >= Readstamp)
 80020fa:	f002 fb41 	bl	8004780 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	4bb3      	ldr	r3, [pc, #716]	; (80023d0 <EndEffectorWrite+0x2dc>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d30e      	bcc.n	8002126 <EndEffectorWrite+0x32>
	{
		Readstamp = HAL_GetTick() + 10;
 8002108:	f002 fb3a 	bl	8004780 <HAL_GetTick>
 800210c:	4603      	mov	r3, r0
 800210e:	330a      	adds	r3, #10
 8002110:	4aaf      	ldr	r2, [pc, #700]	; (80023d0 <EndEffectorWrite+0x2dc>)
 8002112:	6013      	str	r3, [r2, #0]
		HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 8002114:	f04f 33ff 	mov.w	r3, #4294967295
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2301      	movs	r3, #1
 800211c:	4aad      	ldr	r2, [pc, #692]	; (80023d4 <EndEffectorWrite+0x2e0>)
 800211e:	212a      	movs	r1, #42	; 0x2a
 8002120:	48ad      	ldr	r0, [pc, #692]	; (80023d8 <EndEffectorWrite+0x2e4>)
 8002122:	f004 f885 	bl	8006230 <HAL_I2C_Master_Receive>
	}
	switch(EndEffectorState)
 8002126:	4bad      	ldr	r3, [pc, #692]	; (80023dc <EndEffectorWrite+0x2e8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b08      	cmp	r3, #8
 800212c:	f200 8175 	bhi.w	800241a <EndEffectorWrite+0x326>
 8002130:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <EndEffectorWrite+0x44>)
 8002132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002136:	bf00      	nop
 8002138:	0800215d 	.word	0x0800215d
 800213c:	08002199 	.word	0x08002199
 8002140:	080021d5 	.word	0x080021d5
 8002144:	08002211 	.word	0x08002211
 8002148:	0800224d 	.word	0x0800224d
 800214c:	080022a3 	.word	0x080022a3
 8002150:	08002307 	.word	0x08002307
 8002154:	08002341 	.word	0x08002341
 8002158:	0800237b 	.word	0x0800237b
	{
	case 0:
		if(EndEffectorWriteFlag == 1)
 800215c:	4ba0      	ldr	r3, [pc, #640]	; (80023e0 <EndEffectorWrite+0x2ec>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b01      	cmp	r3, #1
 8002162:	f040 8127 	bne.w	80023b4 <EndEffectorWrite+0x2c0>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, SoftReset, 4, HAL_MAX_DELAY);
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2304      	movs	r3, #4
 800216e:	4a9d      	ldr	r2, [pc, #628]	; (80023e4 <EndEffectorWrite+0x2f0>)
 8002170:	212a      	movs	r1, #42	; 0x2a
 8002172:	4899      	ldr	r0, [pc, #612]	; (80023d8 <EndEffectorWrite+0x2e4>)
 8002174:	f003 ff5e 	bl	8006034 <HAL_I2C_Master_Transmit>
				HAL_Delay(5);
 8002178:	2005      	movs	r0, #5
 800217a:	f002 fb0d 	bl	8004798 <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2301      	movs	r3, #1
 8002186:	4a93      	ldr	r2, [pc, #588]	; (80023d4 <EndEffectorWrite+0x2e0>)
 8002188:	212a      	movs	r1, #42	; 0x2a
 800218a:	4893      	ldr	r0, [pc, #588]	; (80023d8 <EndEffectorWrite+0x2e4>)
 800218c:	f004 f850 	bl	8006230 <HAL_I2C_Master_Receive>
				EndEffectorWriteFlag = 0;
 8002190:	4b93      	ldr	r3, [pc, #588]	; (80023e0 <EndEffectorWrite+0x2ec>)
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002196:	e10d      	b.n	80023b4 <EndEffectorWrite+0x2c0>
	case 1:
		if(EndEffectorWriteFlag == 1)
 8002198:	4b91      	ldr	r3, [pc, #580]	; (80023e0 <EndEffectorWrite+0x2ec>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b01      	cmp	r3, #1
 800219e:	f040 810b 	bne.w	80023b8 <EndEffectorWrite+0x2c4>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, TestModeOn, 2, HAL_MAX_DELAY);
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	2302      	movs	r3, #2
 80021aa:	4a8f      	ldr	r2, [pc, #572]	; (80023e8 <EndEffectorWrite+0x2f4>)
 80021ac:	212a      	movs	r1, #42	; 0x2a
 80021ae:	488a      	ldr	r0, [pc, #552]	; (80023d8 <EndEffectorWrite+0x2e4>)
 80021b0:	f003 ff40 	bl	8006034 <HAL_I2C_Master_Transmit>
				HAL_Delay(5);
 80021b4:	2005      	movs	r0, #5
 80021b6:	f002 faef 	bl	8004798 <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2301      	movs	r3, #1
 80021c2:	4a84      	ldr	r2, [pc, #528]	; (80023d4 <EndEffectorWrite+0x2e0>)
 80021c4:	212a      	movs	r1, #42	; 0x2a
 80021c6:	4884      	ldr	r0, [pc, #528]	; (80023d8 <EndEffectorWrite+0x2e4>)
 80021c8:	f004 f832 	bl	8006230 <HAL_I2C_Master_Receive>
				EndEffectorWriteFlag = 0;
 80021cc:	4b84      	ldr	r3, [pc, #528]	; (80023e0 <EndEffectorWrite+0x2ec>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
			}
		break;
 80021d2:	e0f1      	b.n	80023b8 <EndEffectorWrite+0x2c4>
	case 2:
		if(EndEffectorWriteFlag == 1)
 80021d4:	4b82      	ldr	r3, [pc, #520]	; (80023e0 <EndEffectorWrite+0x2ec>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	f040 80ef 	bne.w	80023bc <EndEffectorWrite+0x2c8>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, TestModeOff, 2, HAL_MAX_DELAY);
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2302      	movs	r3, #2
 80021e6:	4a81      	ldr	r2, [pc, #516]	; (80023ec <EndEffectorWrite+0x2f8>)
 80021e8:	212a      	movs	r1, #42	; 0x2a
 80021ea:	487b      	ldr	r0, [pc, #492]	; (80023d8 <EndEffectorWrite+0x2e4>)
 80021ec:	f003 ff22 	bl	8006034 <HAL_I2C_Master_Transmit>
				HAL_Delay(5);
 80021f0:	2005      	movs	r0, #5
 80021f2:	f002 fad1 	bl	8004798 <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	2301      	movs	r3, #1
 80021fe:	4a75      	ldr	r2, [pc, #468]	; (80023d4 <EndEffectorWrite+0x2e0>)
 8002200:	212a      	movs	r1, #42	; 0x2a
 8002202:	4875      	ldr	r0, [pc, #468]	; (80023d8 <EndEffectorWrite+0x2e4>)
 8002204:	f004 f814 	bl	8006230 <HAL_I2C_Master_Receive>
				EndEffectorWriteFlag = 0;
 8002208:	4b75      	ldr	r3, [pc, #468]	; (80023e0 <EndEffectorWrite+0x2ec>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
			}
		break;
 800220e:	e0d5      	b.n	80023bc <EndEffectorWrite+0x2c8>
	case 3:
		if(EndEffectorWriteFlag == 1)
 8002210:	4b73      	ldr	r3, [pc, #460]	; (80023e0 <EndEffectorWrite+0x2ec>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b01      	cmp	r3, #1
 8002216:	f040 80d3 	bne.w	80023c0 <EndEffectorWrite+0x2cc>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, RunModeOn, 2, HAL_MAX_DELAY);
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	2302      	movs	r3, #2
 8002222:	4a73      	ldr	r2, [pc, #460]	; (80023f0 <EndEffectorWrite+0x2fc>)
 8002224:	212a      	movs	r1, #42	; 0x2a
 8002226:	486c      	ldr	r0, [pc, #432]	; (80023d8 <EndEffectorWrite+0x2e4>)
 8002228:	f003 ff04 	bl	8006034 <HAL_I2C_Master_Transmit>
				HAL_Delay(5);
 800222c:	2005      	movs	r0, #5
 800222e:	f002 fab3 	bl	8004798 <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	2301      	movs	r3, #1
 800223a:	4a66      	ldr	r2, [pc, #408]	; (80023d4 <EndEffectorWrite+0x2e0>)
 800223c:	212a      	movs	r1, #42	; 0x2a
 800223e:	4866      	ldr	r0, [pc, #408]	; (80023d8 <EndEffectorWrite+0x2e4>)
 8002240:	f003 fff6 	bl	8006230 <HAL_I2C_Master_Receive>
				EndEffectorWriteFlag = 0;
 8002244:	4b66      	ldr	r3, [pc, #408]	; (80023e0 <EndEffectorWrite+0x2ec>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
			}
		break;
 800224a:	e0b9      	b.n	80023c0 <EndEffectorWrite+0x2cc>
	case 4:
		if(EndEffectorWriteFlag == 1)
 800224c:	4b64      	ldr	r3, [pc, #400]	; (80023e0 <EndEffectorWrite+0x2ec>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b01      	cmp	r3, #1
 8002252:	f040 80b7 	bne.w	80023c4 <EndEffectorWrite+0x2d0>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, PickData, 2, HAL_MAX_DELAY);
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	2302      	movs	r3, #2
 800225e:	4a65      	ldr	r2, [pc, #404]	; (80023f4 <EndEffectorWrite+0x300>)
 8002260:	212a      	movs	r1, #42	; 0x2a
 8002262:	485d      	ldr	r0, [pc, #372]	; (80023d8 <EndEffectorWrite+0x2e4>)
 8002264:	f003 fee6 	bl	8006034 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 6; //End Effector Status: Piking
 8002268:	4b63      	ldr	r3, [pc, #396]	; (80023f8 <EndEffectorWrite+0x304>)
 800226a:	2206      	movs	r2, #6
 800226c:	809a      	strh	r2, [r3, #4]
				HAL_Delay(5);
 800226e:	2005      	movs	r0, #5
 8002270:	f002 fa92 	bl	8004798 <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2301      	movs	r3, #1
 800227c:	4a55      	ldr	r2, [pc, #340]	; (80023d4 <EndEffectorWrite+0x2e0>)
 800227e:	212a      	movs	r1, #42	; 0x2a
 8002280:	4855      	ldr	r0, [pc, #340]	; (80023d8 <EndEffectorWrite+0x2e4>)
 8002282:	f003 ffd5 	bl	8006230 <HAL_I2C_Master_Receive>
				EndEffectorWriteFlag = 0;
 8002286:	4b56      	ldr	r3, [pc, #344]	; (80023e0 <EndEffectorWrite+0x2ec>)
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
				if(EndEffectorDataReadBack[0] == 0b111)	//Picked
 800228c:	4b51      	ldr	r3, [pc, #324]	; (80023d4 <EndEffectorWrite+0x2e0>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b07      	cmp	r3, #7
 8002292:	f040 8097 	bne.w	80023c4 <EndEffectorWrite+0x2d0>
				{
					TaskType *= -1;
 8002296:	4b59      	ldr	r3, [pc, #356]	; (80023fc <EndEffectorWrite+0x308>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	425b      	negs	r3, r3
 800229c:	4a57      	ldr	r2, [pc, #348]	; (80023fc <EndEffectorWrite+0x308>)
 800229e:	6013      	str	r3, [r2, #0]
				}
			}
		break;
 80022a0:	e090      	b.n	80023c4 <EndEffectorWrite+0x2d0>
	case 5:
		if(EndEffectorWriteFlag == 1)
 80022a2:	4b4f      	ldr	r3, [pc, #316]	; (80023e0 <EndEffectorWrite+0x2ec>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	f040 808e 	bne.w	80023c8 <EndEffectorWrite+0x2d4>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, PlaceData, 2, HAL_MAX_DELAY);
 80022ac:	f04f 33ff 	mov.w	r3, #4294967295
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2302      	movs	r3, #2
 80022b4:	4a52      	ldr	r2, [pc, #328]	; (8002400 <EndEffectorWrite+0x30c>)
 80022b6:	212a      	movs	r1, #42	; 0x2a
 80022b8:	4847      	ldr	r0, [pc, #284]	; (80023d8 <EndEffectorWrite+0x2e4>)
 80022ba:	f003 febb 	bl	8006034 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 10; //End Effector Status: Placing
 80022be:	4b4e      	ldr	r3, [pc, #312]	; (80023f8 <EndEffectorWrite+0x304>)
 80022c0:	220a      	movs	r2, #10
 80022c2:	809a      	strh	r2, [r3, #4]
				HAL_Delay(5);
 80022c4:	2005      	movs	r0, #5
 80022c6:	f002 fa67 	bl	8004798 <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2301      	movs	r3, #1
 80022d2:	4a40      	ldr	r2, [pc, #256]	; (80023d4 <EndEffectorWrite+0x2e0>)
 80022d4:	212a      	movs	r1, #42	; 0x2a
 80022d6:	4840      	ldr	r0, [pc, #256]	; (80023d8 <EndEffectorWrite+0x2e4>)
 80022d8:	f003 ffaa 	bl	8006230 <HAL_I2C_Master_Receive>
				EndEffectorWriteFlag = 0;
 80022dc:	4b40      	ldr	r3, [pc, #256]	; (80023e0 <EndEffectorWrite+0x2ec>)
 80022de:	2200      	movs	r2, #0
 80022e0:	701a      	strb	r2, [r3, #0]
				if(EndEffectorDataReadBack[0] == 0b100)	//Placed
 80022e2:	4b3c      	ldr	r3, [pc, #240]	; (80023d4 <EndEffectorWrite+0x2e0>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d16e      	bne.n	80023c8 <EndEffectorWrite+0x2d4>
				{
					registerFrame[2].U16 = 2; //End Effector Status: Gripper Power
 80022ea:	4b43      	ldr	r3, [pc, #268]	; (80023f8 <EndEffectorWrite+0x304>)
 80022ec:	2202      	movs	r2, #2
 80022ee:	809a      	strh	r2, [r3, #4]
					TaskType *= -1;
 80022f0:	4b42      	ldr	r3, [pc, #264]	; (80023fc <EndEffectorWrite+0x308>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	425b      	negs	r3, r3
 80022f6:	4a41      	ldr	r2, [pc, #260]	; (80023fc <EndEffectorWrite+0x308>)
 80022f8:	6013      	str	r3, [r2, #0]
					HoleSequence += 1;
 80022fa:	4b42      	ldr	r3, [pc, #264]	; (8002404 <EndEffectorWrite+0x310>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3301      	adds	r3, #1
 8002300:	4a40      	ldr	r2, [pc, #256]	; (8002404 <EndEffectorWrite+0x310>)
 8002302:	6013      	str	r3, [r2, #0]
				}
			}
		break;
 8002304:	e060      	b.n	80023c8 <EndEffectorWrite+0x2d4>
	case 6:
		if(EndEffectorWriteFlag == 1)
 8002306:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <EndEffectorWrite+0x2ec>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d15e      	bne.n	80023cc <EndEffectorWrite+0x2d8>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, RunModeOff, 2, HAL_MAX_DELAY);
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	2302      	movs	r3, #2
 8002316:	4a3c      	ldr	r2, [pc, #240]	; (8002408 <EndEffectorWrite+0x314>)
 8002318:	212a      	movs	r1, #42	; 0x2a
 800231a:	482f      	ldr	r0, [pc, #188]	; (80023d8 <EndEffectorWrite+0x2e4>)
 800231c:	f003 fe8a 	bl	8006034 <HAL_I2C_Master_Transmit>
				HAL_Delay(5);
 8002320:	2005      	movs	r0, #5
 8002322:	f002 fa39 	bl	8004798 <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 8002326:	f04f 33ff 	mov.w	r3, #4294967295
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	2301      	movs	r3, #1
 800232e:	4a29      	ldr	r2, [pc, #164]	; (80023d4 <EndEffectorWrite+0x2e0>)
 8002330:	212a      	movs	r1, #42	; 0x2a
 8002332:	4829      	ldr	r0, [pc, #164]	; (80023d8 <EndEffectorWrite+0x2e4>)
 8002334:	f003 ff7c 	bl	8006230 <HAL_I2C_Master_Receive>
				EndEffectorWriteFlag = 0;
 8002338:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <EndEffectorWrite+0x2ec>)
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
			}
		break;
 800233e:	e045      	b.n	80023cc <EndEffectorWrite+0x2d8>
	case 7:
		if(EndEffectorWriteFlag == 1)
 8002340:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <EndEffectorWrite+0x2ec>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d165      	bne.n	8002414 <EndEffectorWrite+0x320>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, Emergency, 1, HAL_MAX_DELAY);
 8002348:	f04f 33ff 	mov.w	r3, #4294967295
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	2301      	movs	r3, #1
 8002350:	4a2e      	ldr	r2, [pc, #184]	; (800240c <EndEffectorWrite+0x318>)
 8002352:	212a      	movs	r1, #42	; 0x2a
 8002354:	4820      	ldr	r0, [pc, #128]	; (80023d8 <EndEffectorWrite+0x2e4>)
 8002356:	f003 fe6d 	bl	8006034 <HAL_I2C_Master_Transmit>
				HAL_Delay(5);
 800235a:	2005      	movs	r0, #5
 800235c:	f002 fa1c 	bl	8004798 <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 8002360:	f04f 33ff 	mov.w	r3, #4294967295
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2301      	movs	r3, #1
 8002368:	4a1a      	ldr	r2, [pc, #104]	; (80023d4 <EndEffectorWrite+0x2e0>)
 800236a:	212a      	movs	r1, #42	; 0x2a
 800236c:	481a      	ldr	r0, [pc, #104]	; (80023d8 <EndEffectorWrite+0x2e4>)
 800236e:	f003 ff5f 	bl	8006230 <HAL_I2C_Master_Receive>
				EndEffectorWriteFlag = 0;
 8002372:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <EndEffectorWrite+0x2ec>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002378:	e04c      	b.n	8002414 <EndEffectorWrite+0x320>
	case 8:
		if(EndEffectorWriteFlag == 1)
 800237a:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <EndEffectorWrite+0x2ec>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d14a      	bne.n	8002418 <EndEffectorWrite+0x324>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, QuitEmergency, 4, HAL_MAX_DELAY);
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	2304      	movs	r3, #4
 800238a:	4a21      	ldr	r2, [pc, #132]	; (8002410 <EndEffectorWrite+0x31c>)
 800238c:	212a      	movs	r1, #42	; 0x2a
 800238e:	4812      	ldr	r0, [pc, #72]	; (80023d8 <EndEffectorWrite+0x2e4>)
 8002390:	f003 fe50 	bl	8006034 <HAL_I2C_Master_Transmit>
				HAL_Delay(5);
 8002394:	2005      	movs	r0, #5
 8002396:	f002 f9ff 	bl	8004798 <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 800239a:	f04f 33ff 	mov.w	r3, #4294967295
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	2301      	movs	r3, #1
 80023a2:	4a0c      	ldr	r2, [pc, #48]	; (80023d4 <EndEffectorWrite+0x2e0>)
 80023a4:	212a      	movs	r1, #42	; 0x2a
 80023a6:	480c      	ldr	r0, [pc, #48]	; (80023d8 <EndEffectorWrite+0x2e4>)
 80023a8:	f003 ff42 	bl	8006230 <HAL_I2C_Master_Receive>
				EndEffectorWriteFlag = 0;
 80023ac:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <EndEffectorWrite+0x2ec>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
			}
		break;
 80023b2:	e031      	b.n	8002418 <EndEffectorWrite+0x324>
		break;
 80023b4:	bf00      	nop
 80023b6:	e030      	b.n	800241a <EndEffectorWrite+0x326>
		break;
 80023b8:	bf00      	nop
 80023ba:	e02e      	b.n	800241a <EndEffectorWrite+0x326>
		break;
 80023bc:	bf00      	nop
 80023be:	e02c      	b.n	800241a <EndEffectorWrite+0x326>
		break;
 80023c0:	bf00      	nop
 80023c2:	e02a      	b.n	800241a <EndEffectorWrite+0x326>
		break;
 80023c4:	bf00      	nop
 80023c6:	e028      	b.n	800241a <EndEffectorWrite+0x326>
		break;
 80023c8:	bf00      	nop
 80023ca:	e026      	b.n	800241a <EndEffectorWrite+0x326>
		break;
 80023cc:	bf00      	nop
 80023ce:	e024      	b.n	800241a <EndEffectorWrite+0x326>
 80023d0:	20000e58 	.word	0x20000e58
 80023d4:	200008d4 	.word	0x200008d4
 80023d8:	20000378 	.word	0x20000378
 80023dc:	200008d8 	.word	0x200008d8
 80023e0:	200008d0 	.word	0x200008d0
 80023e4:	2000021c 	.word	0x2000021c
 80023e8:	20000228 	.word	0x20000228
 80023ec:	2000022c 	.word	0x2000022c
 80023f0:	20000230 	.word	0x20000230
 80023f4:	20000238 	.word	0x20000238
 80023f8:	20000db8 	.word	0x20000db8
 80023fc:	20000200 	.word	0x20000200
 8002400:	2000023c 	.word	0x2000023c
 8002404:	20000734 	.word	0x20000734
 8002408:	20000234 	.word	0x20000234
 800240c:	20000220 	.word	0x20000220
 8002410:	20000224 	.word	0x20000224
		break;
 8002414:	bf00      	nop
 8002416:	e000      	b.n	800241a <EndEffectorWrite+0x326>
		break;
 8002418:	bf00      	nop
	}
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <VelocityApprox>:

void VelocityApprox()
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	static int16_t lastposition = 0;
	velocity = (position - lastposition)/0.001; //pulse/s
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <VelocityApprox+0x50>)
 8002426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800242a:	461a      	mov	r2, r3
 800242c:	4b11      	ldr	r3, [pc, #68]	; (8002474 <VelocityApprox+0x54>)
 800242e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f821 	bl	800047c <__aeabi_i2d>
 800243a:	a30b      	add	r3, pc, #44	; (adr r3, 8002468 <VelocityApprox+0x48>)
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	f7fe f9b0 	bl	80007a4 <__aeabi_ddiv>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4610      	mov	r0, r2
 800244a:	4619      	mov	r1, r3
 800244c:	f7fe fb78 	bl	8000b40 <__aeabi_d2f>
 8002450:	4603      	mov	r3, r0
 8002452:	4a09      	ldr	r2, [pc, #36]	; (8002478 <VelocityApprox+0x58>)
 8002454:	6013      	str	r3, [r2, #0]
	lastposition = position;
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <VelocityApprox+0x50>)
 8002458:	f9b3 2000 	ldrsh.w	r2, [r3]
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <VelocityApprox+0x54>)
 800245e:	801a      	strh	r2, [r3, #0]
}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}
 8002464:	f3af 8000 	nop.w
 8002468:	d2f1a9fc 	.word	0xd2f1a9fc
 800246c:	3f50624d 	.word	0x3f50624d
 8002470:	2000077c 	.word	0x2000077c
 8002474:	20000e5c 	.word	0x20000e5c
 8002478:	200007a0 	.word	0x200007a0

0800247c <AccelerationApprox>:

void AccelerationApprox()
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
	static float LastVelo = 0;
	Accel = (velocity - LastVelo);	//pulse/s^2
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <AccelerationApprox+0x2c>)
 8002482:	ed93 7a00 	vldr	s14, [r3]
 8002486:	4b09      	ldr	r3, [pc, #36]	; (80024ac <AccelerationApprox+0x30>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <AccelerationApprox+0x34>)
 8002492:	edc3 7a00 	vstr	s15, [r3]
	LastVelo = velocity;
 8002496:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <AccelerationApprox+0x2c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a04      	ldr	r2, [pc, #16]	; (80024ac <AccelerationApprox+0x30>)
 800249c:	6013      	str	r3, [r2, #0]

}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	200007a0 	.word	0x200007a0
 80024ac:	20000e60 	.word	0x20000e60
 80024b0:	200007a4 	.word	0x200007a4
 80024b4:	00000000 	.word	0x00000000

080024b8 <Routine>:

void Routine()
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	position_f = position;
 80024bc:	4b28      	ldr	r3, [pc, #160]	; (8002560 <Routine+0xa8>)
 80024be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c2:	ee07 3a90 	vmov	s15, r3
 80024c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ca:	4b26      	ldr	r3, [pc, #152]	; (8002564 <Routine+0xac>)
 80024cc:	edc3 7a00 	vstr	s15, [r3]
	Yactualposition = position_f*0.45;	//mm*10
 80024d0:	4b24      	ldr	r3, [pc, #144]	; (8002564 <Routine+0xac>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fd ffe3 	bl	80004a0 <__aeabi_f2d>
 80024da:	a31f      	add	r3, pc, #124	; (adr r3, 8002558 <Routine+0xa0>)
 80024dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e0:	f7fe f836 	bl	8000550 <__aeabi_dmul>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4610      	mov	r0, r2
 80024ea:	4619      	mov	r1, r3
 80024ec:	f7fe fae0 	bl	8000ab0 <__aeabi_d2iz>
 80024f0:	4603      	mov	r3, r0
 80024f2:	b21a      	sxth	r2, r3
 80024f4:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <Routine+0xb0>)
 80024f6:	801a      	strh	r2, [r3, #0]
	registerFrame[17].U16 = Yactualposition;	//mm*10		//Y Actual Position
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <Routine+0xb0>)
 80024fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024fe:	b29a      	uxth	r2, r3
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <Routine+0xb4>)
 8002502:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[18].U16 = velocity*0.45; //mm/s*10		//Y Actual Speed
 8002504:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <Routine+0xb8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7fd ffc9 	bl	80004a0 <__aeabi_f2d>
 800250e:	a312      	add	r3, pc, #72	; (adr r3, 8002558 <Routine+0xa0>)
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	f7fe f81c 	bl	8000550 <__aeabi_dmul>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	f7fe faee 	bl	8000b00 <__aeabi_d2uiz>
 8002524:	4603      	mov	r3, r0
 8002526:	b29a      	uxth	r2, r3
 8002528:	4b10      	ldr	r3, [pc, #64]	; (800256c <Routine+0xb4>)
 800252a:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[19].U16 = Accel*0.45; 	//mm/s^2*10		//Y Actual Acceleration
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <Routine+0xbc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fd ffb5 	bl	80004a0 <__aeabi_f2d>
 8002536:	a308      	add	r3, pc, #32	; (adr r3, 8002558 <Routine+0xa0>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe f808 	bl	8000550 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f7fe fada 	bl	8000b00 <__aeabi_d2uiz>
 800254c:	4603      	mov	r3, r0
 800254e:	b29a      	uxth	r2, r3
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <Routine+0xb4>)
 8002552:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}
 8002558:	cccccccd 	.word	0xcccccccd
 800255c:	3fdccccc 	.word	0x3fdccccc
 8002560:	2000077c 	.word	0x2000077c
 8002564:	20000780 	.word	0x20000780
 8002568:	20000784 	.word	0x20000784
 800256c:	20000db8 	.word	0x20000db8
 8002570:	200007a0 	.word	0x200007a0
 8002574:	200007a4 	.word	0x200007a4

08002578 <PIDcal>:

float PIDcal()
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
	//position control
	errorposition = setposition - position;
 800257c:	4b28      	ldr	r3, [pc, #160]	; (8002620 <PIDcal+0xa8>)
 800257e:	ed93 7a00 	vldr	s14, [r3]
 8002582:	4b28      	ldr	r3, [pc, #160]	; (8002624 <PIDcal+0xac>)
 8002584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002594:	4b24      	ldr	r3, [pc, #144]	; (8002628 <PIDcal+0xb0>)
 8002596:	edc3 7a00 	vstr	s15, [r3]

	integral_p = integral_p + errorposition;
 800259a:	4b24      	ldr	r3, [pc, #144]	; (800262c <PIDcal+0xb4>)
 800259c:	ed93 7a00 	vldr	s14, [r3]
 80025a0:	4b21      	ldr	r3, [pc, #132]	; (8002628 <PIDcal+0xb0>)
 80025a2:	edd3 7a00 	vldr	s15, [r3]
 80025a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025aa:	4b20      	ldr	r3, [pc, #128]	; (800262c <PIDcal+0xb4>)
 80025ac:	edc3 7a00 	vstr	s15, [r3]
	derivative_p = errorposition - pre_errorposition;
 80025b0:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <PIDcal+0xb0>)
 80025b2:	ed93 7a00 	vldr	s14, [r3]
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <PIDcal+0xb8>)
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c0:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <PIDcal+0xbc>)
 80025c2:	edc3 7a00 	vstr	s15, [r3]
	u_position = Kp_p*errorposition + Ki_p*integral_p + Kd_p*derivative_p;
 80025c6:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <PIDcal+0xc0>)
 80025c8:	ed93 7a00 	vldr	s14, [r3]
 80025cc:	4b16      	ldr	r3, [pc, #88]	; (8002628 <PIDcal+0xb0>)
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d6:	4b19      	ldr	r3, [pc, #100]	; (800263c <PIDcal+0xc4>)
 80025d8:	edd3 6a00 	vldr	s13, [r3]
 80025dc:	4b13      	ldr	r3, [pc, #76]	; (800262c <PIDcal+0xb4>)
 80025de:	edd3 7a00 	vldr	s15, [r3]
 80025e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <PIDcal+0xc8>)
 80025ec:	edd3 6a00 	vldr	s13, [r3]
 80025f0:	4b10      	ldr	r3, [pc, #64]	; (8002634 <PIDcal+0xbc>)
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <PIDcal+0xcc>)
 8002600:	edc3 7a00 	vstr	s15, [r3]

	pre_errorposition = errorposition;
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <PIDcal+0xb0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a09      	ldr	r2, [pc, #36]	; (8002630 <PIDcal+0xb8>)
 800260a:	6013      	str	r3, [r2, #0]
//	duty = Kp_v*errorvelocity + Ki_v*integral_v + Kd_v*derivative_v;
//
//	pre_errorvelocity = errorvelocity;

//	return duty;
	return u_position;
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <PIDcal+0xcc>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	ee07 3a90 	vmov	s15, r3
}
 8002614:	eeb0 0a67 	vmov.f32	s0, s15
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	20000788 	.word	0x20000788
 8002624:	2000077c 	.word	0x2000077c
 8002628:	2000078c 	.word	0x2000078c
 800262c:	20000798 	.word	0x20000798
 8002630:	20000794 	.word	0x20000794
 8002634:	2000079c 	.word	0x2000079c
 8002638:	20000214 	.word	0x20000214
 800263c:	200007b0 	.word	0x200007b0
 8002640:	200007b4 	.word	0x200007b4
 8002644:	20000790 	.word	0x20000790

08002648 <JoystickPinUpdate>:

void JoystickPinUpdate()
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
	  GetPositionButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 800264c:	2140      	movs	r1, #64	; 0x40
 800264e:	4845      	ldr	r0, [pc, #276]	; (8002764 <JoystickPinUpdate+0x11c>)
 8002650:	f003 fb7a 	bl	8005d48 <HAL_GPIO_ReadPin>
 8002654:	4603      	mov	r3, r0
 8002656:	461a      	mov	r2, r3
 8002658:	4b43      	ldr	r3, [pc, #268]	; (8002768 <JoystickPinUpdate+0x120>)
 800265a:	605a      	str	r2, [r3, #4]
	  if (GetPositionButton.last == 1 && GetPositionButton.current == 0)
 800265c:	4b42      	ldr	r3, [pc, #264]	; (8002768 <JoystickPinUpdate+0x120>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d107      	bne.n	8002674 <JoystickPinUpdate+0x2c>
 8002664:	4b40      	ldr	r3, [pc, #256]	; (8002768 <JoystickPinUpdate+0x120>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d103      	bne.n	8002674 <JoystickPinUpdate+0x2c>
	  {
		  GetPositionButton.flag = 1;
 800266c:	4b3e      	ldr	r3, [pc, #248]	; (8002768 <JoystickPinUpdate+0x120>)
 800266e:	2201      	movs	r2, #1
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	e002      	b.n	800267a <JoystickPinUpdate+0x32>
	  }
	  else
	  {
		  GetPositionButton.flag = 0;
 8002674:	4b3c      	ldr	r3, [pc, #240]	; (8002768 <JoystickPinUpdate+0x120>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
	  }
	  GetPositionButton.last = GetPositionButton.current;
 800267a:	4b3b      	ldr	r3, [pc, #236]	; (8002768 <JoystickPinUpdate+0x120>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4a3a      	ldr	r2, [pc, #232]	; (8002768 <JoystickPinUpdate+0x120>)
 8002680:	6013      	str	r3, [r2, #0]

	  ResetButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8002682:	2120      	movs	r1, #32
 8002684:	4839      	ldr	r0, [pc, #228]	; (800276c <JoystickPinUpdate+0x124>)
 8002686:	f003 fb5f 	bl	8005d48 <HAL_GPIO_ReadPin>
 800268a:	4603      	mov	r3, r0
 800268c:	461a      	mov	r2, r3
 800268e:	4b38      	ldr	r3, [pc, #224]	; (8002770 <JoystickPinUpdate+0x128>)
 8002690:	605a      	str	r2, [r3, #4]
	  if (ResetButton.last == 1 && ResetButton.current == 0)
 8002692:	4b37      	ldr	r3, [pc, #220]	; (8002770 <JoystickPinUpdate+0x128>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d107      	bne.n	80026aa <JoystickPinUpdate+0x62>
 800269a:	4b35      	ldr	r3, [pc, #212]	; (8002770 <JoystickPinUpdate+0x128>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d103      	bne.n	80026aa <JoystickPinUpdate+0x62>
	  {
		ResetButton.flag = 1;
 80026a2:	4b33      	ldr	r3, [pc, #204]	; (8002770 <JoystickPinUpdate+0x128>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	e002      	b.n	80026b0 <JoystickPinUpdate+0x68>
	  }
	  else
	  {
		  ResetButton.flag = 0;
 80026aa:	4b31      	ldr	r3, [pc, #196]	; (8002770 <JoystickPinUpdate+0x128>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
	  }
	  ResetButton.last = ResetButton.current;
 80026b0:	4b2f      	ldr	r3, [pc, #188]	; (8002770 <JoystickPinUpdate+0x128>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a2e      	ldr	r2, [pc, #184]	; (8002770 <JoystickPinUpdate+0x128>)
 80026b6:	6013      	str	r3, [r2, #0]

	  FineButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 80026b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026bc:	482b      	ldr	r0, [pc, #172]	; (800276c <JoystickPinUpdate+0x124>)
 80026be:	f003 fb43 	bl	8005d48 <HAL_GPIO_ReadPin>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <JoystickPinUpdate+0x12c>)
 80026c8:	605a      	str	r2, [r3, #4]
	  if (FineButton.last == 1 && FineButton.current == 0)
 80026ca:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <JoystickPinUpdate+0x12c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d107      	bne.n	80026e2 <JoystickPinUpdate+0x9a>
 80026d2:	4b28      	ldr	r3, [pc, #160]	; (8002774 <JoystickPinUpdate+0x12c>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d103      	bne.n	80026e2 <JoystickPinUpdate+0x9a>
	  {
		  FineButton.flag = 1;
 80026da:	4b26      	ldr	r3, [pc, #152]	; (8002774 <JoystickPinUpdate+0x12c>)
 80026dc:	2201      	movs	r2, #1
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	e002      	b.n	80026e8 <JoystickPinUpdate+0xa0>
	  }
	  else
	  {
		  FineButton.flag = 0;
 80026e2:	4b24      	ldr	r3, [pc, #144]	; (8002774 <JoystickPinUpdate+0x12c>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
	  }
	  FineButton.last = FineButton.current;
 80026e8:	4b22      	ldr	r3, [pc, #136]	; (8002774 <JoystickPinUpdate+0x12c>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4a21      	ldr	r2, [pc, #132]	; (8002774 <JoystickPinUpdate+0x12c>)
 80026ee:	6013      	str	r3, [r2, #0]

	  RoughButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80026f0:	2120      	movs	r1, #32
 80026f2:	481c      	ldr	r0, [pc, #112]	; (8002764 <JoystickPinUpdate+0x11c>)
 80026f4:	f003 fb28 	bl	8005d48 <HAL_GPIO_ReadPin>
 80026f8:	4603      	mov	r3, r0
 80026fa:	461a      	mov	r2, r3
 80026fc:	4b1e      	ldr	r3, [pc, #120]	; (8002778 <JoystickPinUpdate+0x130>)
 80026fe:	605a      	str	r2, [r3, #4]
	  if (RoughButton.last == 1 && RoughButton.current == 0)
 8002700:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <JoystickPinUpdate+0x130>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d107      	bne.n	8002718 <JoystickPinUpdate+0xd0>
 8002708:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <JoystickPinUpdate+0x130>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d103      	bne.n	8002718 <JoystickPinUpdate+0xd0>
	  {
		  RoughButton.flag = 1;
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <JoystickPinUpdate+0x130>)
 8002712:	2201      	movs	r2, #1
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	e002      	b.n	800271e <JoystickPinUpdate+0xd6>
	  }
	  else
	  {
		  RoughButton.flag = 0;
 8002718:	4b17      	ldr	r3, [pc, #92]	; (8002778 <JoystickPinUpdate+0x130>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
	  }
	  RoughButton.last = RoughButton.current;
 800271e:	4b16      	ldr	r3, [pc, #88]	; (8002778 <JoystickPinUpdate+0x130>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4a15      	ldr	r2, [pc, #84]	; (8002778 <JoystickPinUpdate+0x130>)
 8002724:	6013      	str	r3, [r2, #0]

	  HomingButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8002726:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800272a:	480e      	ldr	r0, [pc, #56]	; (8002764 <JoystickPinUpdate+0x11c>)
 800272c:	f003 fb0c 	bl	8005d48 <HAL_GPIO_ReadPin>
 8002730:	4603      	mov	r3, r0
 8002732:	461a      	mov	r2, r3
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <JoystickPinUpdate+0x134>)
 8002736:	605a      	str	r2, [r3, #4]
	  if (HomingButton.last == 1 && HomingButton.current == 0)
 8002738:	4b10      	ldr	r3, [pc, #64]	; (800277c <JoystickPinUpdate+0x134>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d107      	bne.n	8002750 <JoystickPinUpdate+0x108>
 8002740:	4b0e      	ldr	r3, [pc, #56]	; (800277c <JoystickPinUpdate+0x134>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d103      	bne.n	8002750 <JoystickPinUpdate+0x108>
	  {
		  HomingButton.flag = 1;
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <JoystickPinUpdate+0x134>)
 800274a:	2201      	movs	r2, #1
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	e002      	b.n	8002756 <JoystickPinUpdate+0x10e>
	  }
	  else
	  {
		  HomingButton.flag = 0;
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <JoystickPinUpdate+0x134>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
	  }
	  HomingButton.last = HomingButton.current;
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <JoystickPinUpdate+0x134>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4a08      	ldr	r2, [pc, #32]	; (800277c <JoystickPinUpdate+0x134>)
 800275c:	6013      	str	r3, [r2, #0]
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40020400 	.word	0x40020400
 8002768:	20000888 	.word	0x20000888
 800276c:	40020000 	.word	0x40020000
 8002770:	20000894 	.word	0x20000894
 8002774:	200008a0 	.word	0x200008a0
 8002778:	200008ac 	.word	0x200008ac
 800277c:	200008b8 	.word	0x200008b8

08002780 <JoystickControl>:

void JoystickControl()
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
	if(RoughButton.flag == 1)
 8002784:	4b5c      	ldr	r3, [pc, #368]	; (80028f8 <JoystickControl+0x178>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d106      	bne.n	800279a <JoystickControl+0x1a>
	{
		JoySpeed = 0;
 800278c:	4b5b      	ldr	r3, [pc, #364]	; (80028fc <JoystickControl+0x17c>)
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
		RoughButton.flag = 0;
 8002792:	4b59      	ldr	r3, [pc, #356]	; (80028f8 <JoystickControl+0x178>)
 8002794:	2200      	movs	r2, #0
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	e014      	b.n	80027c4 <JoystickControl+0x44>
	}
	else if(FineButton.flag == 1)
 800279a:	4b59      	ldr	r3, [pc, #356]	; (8002900 <JoystickControl+0x180>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d106      	bne.n	80027b0 <JoystickControl+0x30>
	{
		JoySpeed = 1;
 80027a2:	4b56      	ldr	r3, [pc, #344]	; (80028fc <JoystickControl+0x17c>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
		FineButton.flag = 0;
 80027a8:	4b55      	ldr	r3, [pc, #340]	; (8002900 <JoystickControl+0x180>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	e009      	b.n	80027c4 <JoystickControl+0x44>
	}
	else if(HomingButton.flag == 1)
 80027b0:	4b54      	ldr	r3, [pc, #336]	; (8002904 <JoystickControl+0x184>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d105      	bne.n	80027c4 <JoystickControl+0x44>
	{
		JoySpeed = 2;
 80027b8:	4b50      	ldr	r3, [pc, #320]	; (80028fc <JoystickControl+0x17c>)
 80027ba:	2202      	movs	r2, #2
 80027bc:	601a      	str	r2, [r3, #0]
		HomingButton.flag = 0;
 80027be:	4b51      	ldr	r3, [pc, #324]	; (8002904 <JoystickControl+0x184>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
	}

	switch(JoySpeed)
 80027c4:	4b4d      	ldr	r3, [pc, #308]	; (80028fc <JoystickControl+0x17c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	f000 8088 	beq.w	80028de <JoystickControl+0x15e>
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	f300 8090 	bgt.w	80028f4 <JoystickControl+0x174>
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <JoystickControl+0x5e>
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d041      	beq.n	8002860 <JoystickControl+0xe0>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,200);
		Homing();
		break;
	}
}
 80027dc:	e08a      	b.n	80028f4 <JoystickControl+0x174>
		if(XYSwitch[1] > 2150)
 80027de:	4b4a      	ldr	r3, [pc, #296]	; (8002908 <JoystickControl+0x188>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f640 0266 	movw	r2, #2150	; 0x866
 80027e6:	4293      	cmp	r3, r2
 80027e8:	dd09      	ble.n	80027fe <JoystickControl+0x7e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80027ea:	4b48      	ldr	r3, [pc, #288]	; (800290c <JoystickControl+0x18c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2200      	movs	r2, #0
 80027f0:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,300);
 80027f2:	4b46      	ldr	r3, [pc, #280]	; (800290c <JoystickControl+0x18c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027fa:	635a      	str	r2, [r3, #52]	; 0x34
 80027fc:	e016      	b.n	800282c <JoystickControl+0xac>
		else if(XYSwitch[1] < 2000)
 80027fe:	4b42      	ldr	r3, [pc, #264]	; (8002908 <JoystickControl+0x188>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002806:	da09      	bge.n	800281c <JoystickControl+0x9c>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,300);
 8002808:	4b40      	ldr	r3, [pc, #256]	; (800290c <JoystickControl+0x18c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002810:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002812:	4b3e      	ldr	r3, [pc, #248]	; (800290c <JoystickControl+0x18c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2200      	movs	r2, #0
 8002818:	635a      	str	r2, [r3, #52]	; 0x34
 800281a:	e007      	b.n	800282c <JoystickControl+0xac>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800281c:	4b3b      	ldr	r3, [pc, #236]	; (800290c <JoystickControl+0x18c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002824:	4b39      	ldr	r3, [pc, #228]	; (800290c <JoystickControl+0x18c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2200      	movs	r2, #0
 800282a:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 2150)
 800282c:	4b36      	ldr	r3, [pc, #216]	; (8002908 <JoystickControl+0x188>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f640 0266 	movw	r2, #2150	; 0x866
 8002834:	4293      	cmp	r3, r2
 8002836:	dd04      	ble.n	8002842 <JoystickControl+0xc2>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 8002838:	4b35      	ldr	r3, [pc, #212]	; (8002910 <JoystickControl+0x190>)
 800283a:	2204      	movs	r2, #4
 800283c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002840:	e058      	b.n	80028f4 <JoystickControl+0x174>
		else if(XYSwitch[0] < 2000)
 8002842:	4b31      	ldr	r3, [pc, #196]	; (8002908 <JoystickControl+0x188>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800284a:	da04      	bge.n	8002856 <JoystickControl+0xd6>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 800284c:	4b30      	ldr	r3, [pc, #192]	; (8002910 <JoystickControl+0x190>)
 800284e:	2208      	movs	r2, #8
 8002850:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002854:	e04e      	b.n	80028f4 <JoystickControl+0x174>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 8002856:	4b2e      	ldr	r3, [pc, #184]	; (8002910 <JoystickControl+0x190>)
 8002858:	2200      	movs	r2, #0
 800285a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 800285e:	e049      	b.n	80028f4 <JoystickControl+0x174>
		if(XYSwitch[1] > 2150)
 8002860:	4b29      	ldr	r3, [pc, #164]	; (8002908 <JoystickControl+0x188>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f640 0266 	movw	r2, #2150	; 0x866
 8002868:	4293      	cmp	r3, r2
 800286a:	dd08      	ble.n	800287e <JoystickControl+0xfe>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <JoystickControl+0x18c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2200      	movs	r2, #0
 8002872:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,200);
 8002874:	4b25      	ldr	r3, [pc, #148]	; (800290c <JoystickControl+0x18c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	22c8      	movs	r2, #200	; 0xc8
 800287a:	635a      	str	r2, [r3, #52]	; 0x34
 800287c:	e015      	b.n	80028aa <JoystickControl+0x12a>
		else if(XYSwitch[1] < 2000)
 800287e:	4b22      	ldr	r3, [pc, #136]	; (8002908 <JoystickControl+0x188>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002886:	da08      	bge.n	800289a <JoystickControl+0x11a>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,200);
 8002888:	4b20      	ldr	r3, [pc, #128]	; (800290c <JoystickControl+0x18c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	22c8      	movs	r2, #200	; 0xc8
 800288e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002890:	4b1e      	ldr	r3, [pc, #120]	; (800290c <JoystickControl+0x18c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2200      	movs	r2, #0
 8002896:	635a      	str	r2, [r3, #52]	; 0x34
 8002898:	e007      	b.n	80028aa <JoystickControl+0x12a>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800289a:	4b1c      	ldr	r3, [pc, #112]	; (800290c <JoystickControl+0x18c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2200      	movs	r2, #0
 80028a0:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80028a2:	4b1a      	ldr	r3, [pc, #104]	; (800290c <JoystickControl+0x18c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2200      	movs	r2, #0
 80028a8:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 2150)
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <JoystickControl+0x188>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f640 0266 	movw	r2, #2150	; 0x866
 80028b2:	4293      	cmp	r3, r2
 80028b4:	dd04      	ble.n	80028c0 <JoystickControl+0x140>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <JoystickControl+0x190>)
 80028b8:	2204      	movs	r2, #4
 80028ba:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 80028be:	e019      	b.n	80028f4 <JoystickControl+0x174>
		else if(XYSwitch[0] < 2000)
 80028c0:	4b11      	ldr	r3, [pc, #68]	; (8002908 <JoystickControl+0x188>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028c8:	da04      	bge.n	80028d4 <JoystickControl+0x154>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <JoystickControl+0x190>)
 80028cc:	2208      	movs	r2, #8
 80028ce:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 80028d2:	e00f      	b.n	80028f4 <JoystickControl+0x174>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <JoystickControl+0x190>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 80028dc:	e00a      	b.n	80028f4 <JoystickControl+0x174>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <JoystickControl+0x18c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2200      	movs	r2, #0
 80028e4:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,200);
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <JoystickControl+0x18c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	22c8      	movs	r2, #200	; 0xc8
 80028ec:	635a      	str	r2, [r3, #52]	; 0x34
		Homing();
 80028ee:	f7ff fbd7 	bl	80020a0 <Homing>
		break;
 80028f2:	bf00      	nop
}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200008ac 	.word	0x200008ac
 80028fc:	200008cc 	.word	0x200008cc
 8002900:	200008a0 	.word	0x200008a0
 8002904:	200008b8 	.word	0x200008b8
 8002908:	200008c4 	.word	0x200008c4
 800290c:	200003cc 	.word	0x200003cc
 8002910:	20000db8 	.word	0x20000db8
 8002914:	00000000 	.word	0x00000000

08002918 <JoystickLocationState>:

void JoystickLocationState()
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
	if(registerFrame[1].U16 == 1)	//Base System Status: Set Pick Tray
 800291c:	4b46      	ldr	r3, [pc, #280]	; (8002a38 <JoystickLocationState+0x120>)
 800291e:	885b      	ldrh	r3, [r3, #2]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d112      	bne.n	800294a <JoystickLocationState+0x32>
	{
		registerFrame[1].U16 = 0;
 8002924:	4b44      	ldr	r3, [pc, #272]	; (8002a38 <JoystickLocationState+0x120>)
 8002926:	2200      	movs	r2, #0
 8002928:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 1;	//Y Moving Status: Jog Pick
 800292a:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <JoystickLocationState+0x120>)
 800292c:	2201      	movs	r2, #1
 800292e:	841a      	strh	r2, [r3, #32]
		EndEffectorState = 1;		//TestModeOn
 8002930:	4b42      	ldr	r3, [pc, #264]	; (8002a3c <JoystickLocationState+0x124>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 1;	//End Effector Status: Laser On
 8002936:	4b40      	ldr	r3, [pc, #256]	; (8002a38 <JoystickLocationState+0x120>)
 8002938:	2201      	movs	r2, #1
 800293a:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 800293c:	4b40      	ldr	r3, [pc, #256]	; (8002a40 <JoystickLocationState+0x128>)
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
		state = 1;					//Go Pick state
 8002942:	4b40      	ldr	r3, [pc, #256]	; (8002a44 <JoystickLocationState+0x12c>)
 8002944:	2201      	movs	r2, #1
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	e015      	b.n	8002976 <JoystickLocationState+0x5e>
	}
	else if(registerFrame[1].U16 == 2)	//Base System Status: Set Place Tray
 800294a:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <JoystickLocationState+0x120>)
 800294c:	885b      	ldrh	r3, [r3, #2]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d111      	bne.n	8002976 <JoystickLocationState+0x5e>
	{
		registerFrame[1].U16 = 0;
 8002952:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <JoystickLocationState+0x120>)
 8002954:	2200      	movs	r2, #0
 8002956:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 2;	//Y Moving Status: Jog Place
 8002958:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <JoystickLocationState+0x120>)
 800295a:	2202      	movs	r2, #2
 800295c:	841a      	strh	r2, [r3, #32]
		EndEffectorState = 1;		//TestModeOn
 800295e:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <JoystickLocationState+0x124>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 1;	//Laser On
 8002964:	4b34      	ldr	r3, [pc, #208]	; (8002a38 <JoystickLocationState+0x120>)
 8002966:	2201      	movs	r2, #1
 8002968:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 800296a:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <JoystickLocationState+0x128>)
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
		state = 3;					//Go Place state
 8002970:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <JoystickLocationState+0x12c>)
 8002972:	2203      	movs	r2, #3
 8002974:	601a      	str	r2, [r3, #0]
	}
	if(registerFrame[1].U16 == 8)	//Run Tray Mode
 8002976:	4b30      	ldr	r3, [pc, #192]	; (8002a38 <JoystickLocationState+0x120>)
 8002978:	885b      	ldrh	r3, [r3, #2]
 800297a:	2b08      	cmp	r3, #8
 800297c:	d102      	bne.n	8002984 <JoystickLocationState+0x6c>
	{
		state = 5;
 800297e:	4b31      	ldr	r3, [pc, #196]	; (8002a44 <JoystickLocationState+0x12c>)
 8002980:	2205      	movs	r2, #5
 8002982:	601a      	str	r2, [r3, #0]
	}


	switch(state)
 8002984:	4b2f      	ldr	r3, [pc, #188]	; (8002a44 <JoystickLocationState+0x12c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	3b01      	subs	r3, #1
 800298a:	2b04      	cmp	r3, #4
 800298c:	f200 860e 	bhi.w	80035ac <JoystickLocationState+0xc94>
 8002990:	a201      	add	r2, pc, #4	; (adr r2, 8002998 <JoystickLocationState+0x80>)
 8002992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002996:	bf00      	nop
 8002998:	080029ad 	.word	0x080029ad
 800299c:	08002a59 	.word	0x08002a59
 80029a0:	08002f6b 	.word	0x08002f6b
 80029a4:	08003049 	.word	0x08003049
 80029a8:	0800354f 	.word	0x0800354f
	{
	//Get Pick Tray 1st Point
	case 1:
		PickTray.L1[0] = 0;
 80029ac:	4b26      	ldr	r3, [pc, #152]	; (8002a48 <JoystickLocationState+0x130>)
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
		PickTray.L2[0] = 0;
 80029b4:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <JoystickLocationState+0x130>)
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	609a      	str	r2, [r3, #8]
		PickTray.L1[1] = 0;
 80029bc:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <JoystickLocationState+0x130>)
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	605a      	str	r2, [r3, #4]
		PickTray.L2[1] = 0;
 80029c4:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <JoystickLocationState+0x130>)
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 80029cc:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <JoystickLocationState+0x134>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	f040 85e2 	bne.w	800359a <JoystickLocationState+0xc82>
		{
			PickTray.L1[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <JoystickLocationState+0x120>)
 80029d8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80029dc:	4a1c      	ldr	r2, [pc, #112]	; (8002a50 <JoystickLocationState+0x138>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	08db      	lsrs	r3, r3, #3
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ee:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <JoystickLocationState+0x130>)
 80029f0:	edc3 7a00 	vstr	s15, [r3]
			PickTray.L1[1] = position*0.045; //Pick Tray Y Position 1 //mm
 80029f4:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <JoystickLocationState+0x13c>)
 80029f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fd fd3e 	bl	800047c <__aeabi_i2d>
 8002a00:	a30b      	add	r3, pc, #44	; (adr r3, 8002a30 <JoystickLocationState+0x118>)
 8002a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a06:	f7fd fda3 	bl	8000550 <__aeabi_dmul>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
 8002a12:	f7fe f895 	bl	8000b40 <__aeabi_d2f>
 8002a16:	4603      	mov	r3, r0
 8002a18:	4a0b      	ldr	r2, [pc, #44]	; (8002a48 <JoystickLocationState+0x130>)
 8002a1a:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <JoystickLocationState+0x134>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
			state = 2;
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <JoystickLocationState+0x12c>)
 8002a24:	2202      	movs	r2, #2
 8002a26:	601a      	str	r2, [r3, #0]
		}
		break;
 8002a28:	f000 bdb7 	b.w	800359a <JoystickLocationState+0xc82>
 8002a2c:	f3af 8000 	nop.w
 8002a30:	70a3d70a 	.word	0x70a3d70a
 8002a34:	3fa70a3d 	.word	0x3fa70a3d
 8002a38:	20000db8 	.word	0x20000db8
 8002a3c:	200008d8 	.word	0x200008d8
 8002a40:	200008d0 	.word	0x200008d0
 8002a44:	20000218 	.word	0x20000218
 8002a48:	200007b8 	.word	0x200007b8
 8002a4c:	20000888 	.word	0x20000888
 8002a50:	cccccccd 	.word	0xcccccccd
 8002a54:	2000077c 	.word	0x2000077c

	//Get Pick Tray 2nd Point
	case 2:
		if (GetPositionButton.flag == 1)
 8002a58:	4bd5      	ldr	r3, [pc, #852]	; (8002db0 <JoystickLocationState+0x498>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	f040 8278 	bne.w	8002f52 <JoystickLocationState+0x63a>
		{
			PickTray.L2[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 2 //mm
 8002a62:	4bd4      	ldr	r3, [pc, #848]	; (8002db4 <JoystickLocationState+0x49c>)
 8002a64:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002a68:	4ad3      	ldr	r2, [pc, #844]	; (8002db8 <JoystickLocationState+0x4a0>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	08db      	lsrs	r3, r3, #3
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a7a:	4bd0      	ldr	r3, [pc, #832]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002a7c:	edc3 7a02 	vstr	s15, [r3, #8]
			PickTray.L2[1] = position*0.045; //Pick Tray Y Position 2 //mm
 8002a80:	4bcf      	ldr	r3, [pc, #828]	; (8002dc0 <JoystickLocationState+0x4a8>)
 8002a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fd fcf8 	bl	800047c <__aeabi_i2d>
 8002a8c:	a3c6      	add	r3, pc, #792	; (adr r3, 8002da8 <JoystickLocationState+0x490>)
 8002a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a92:	f7fd fd5d 	bl	8000550 <__aeabi_dmul>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f7fe f84f 	bl	8000b40 <__aeabi_d2f>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	4ac5      	ldr	r2, [pc, #788]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002aa6:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 8002aa8:	4bc1      	ldr	r3, [pc, #772]	; (8002db0 <JoystickLocationState+0x498>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]

			cos_Theta = (PickTray.L2[0]-PickTray.L1[0])/60;
 8002aae:	4bc3      	ldr	r3, [pc, #780]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002ab0:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ab4:	4bc1      	ldr	r3, [pc, #772]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002ab6:	edd3 7a00 	vldr	s15, [r3]
 8002aba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002abe:	eddf 6ac1 	vldr	s13, [pc, #772]	; 8002dc4 <JoystickLocationState+0x4ac>
 8002ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ac6:	4bc0      	ldr	r3, [pc, #768]	; (8002dc8 <JoystickLocationState+0x4b0>)
 8002ac8:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PickTray.L2[1]-PickTray.L1[1])/60;
 8002acc:	4bbb      	ldr	r3, [pc, #748]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002ace:	ed93 7a03 	vldr	s14, [r3, #12]
 8002ad2:	4bba      	ldr	r3, [pc, #744]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002ad4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ad8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002adc:	eddf 6ab9 	vldr	s13, [pc, #740]	; 8002dc4 <JoystickLocationState+0x4ac>
 8002ae0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ae4:	4bb9      	ldr	r3, [pc, #740]	; (8002dcc <JoystickLocationState+0x4b4>)
 8002ae6:	edc3 7a00 	vstr	s15, [r3]

			PickTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PickTray.L1[0];
 8002aea:	4bb7      	ldr	r3, [pc, #732]	; (8002dc8 <JoystickLocationState+0x4b0>)
 8002aec:	edd3 7a00 	vldr	s15, [r3]
 8002af0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002af4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002af8:	4bb4      	ldr	r3, [pc, #720]	; (8002dcc <JoystickLocationState+0x4b4>)
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002b02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b0a:	4bac      	ldr	r3, [pc, #688]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002b0c:	edd3 7a00 	vldr	s15, [r3]
 8002b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b14:	4ba9      	ldr	r3, [pc, #676]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002b16:	edc3 7a04 	vstr	s15, [r3, #16]
			PickTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PickTray.L1[1];
 8002b1a:	4bac      	ldr	r3, [pc, #688]	; (8002dcc <JoystickLocationState+0x4b4>)
 8002b1c:	edd3 7a00 	vldr	s15, [r3]
 8002b20:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b28:	4ba7      	ldr	r3, [pc, #668]	; (8002dc8 <JoystickLocationState+0x4b0>)
 8002b2a:	edd3 7a00 	vldr	s15, [r3]
 8002b2e:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002b32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b3a:	4ba0      	ldr	r3, [pc, #640]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002b3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b44:	4b9d      	ldr	r3, [pc, #628]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002b46:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PickTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PickTray.L1[0];
 8002b4a:	4b9f      	ldr	r3, [pc, #636]	; (8002dc8 <JoystickLocationState+0x4b0>)
 8002b4c:	edd3 7a00 	vldr	s15, [r3]
 8002b50:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002b54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b58:	4b9c      	ldr	r3, [pc, #624]	; (8002dcc <JoystickLocationState+0x4b4>)
 8002b5a:	edd3 7a00 	vldr	s15, [r3]
 8002b5e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002b62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b6a:	4b94      	ldr	r3, [pc, #592]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002b6c:	edd3 7a00 	vldr	s15, [r3]
 8002b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b74:	4b91      	ldr	r3, [pc, #580]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002b76:	edc3 7a05 	vstr	s15, [r3, #20]
			PickTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PickTray.L1[1];
 8002b7a:	4b94      	ldr	r3, [pc, #592]	; (8002dcc <JoystickLocationState+0x4b4>)
 8002b7c:	edd3 7a00 	vldr	s15, [r3]
 8002b80:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002b84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b88:	4b8f      	ldr	r3, [pc, #572]	; (8002dc8 <JoystickLocationState+0x4b0>)
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002b92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b9a:	4b88      	ldr	r3, [pc, #544]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002b9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba4:	4b85      	ldr	r3, [pc, #532]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002ba6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PickTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PickTray.L1[0];
 8002baa:	4b87      	ldr	r3, [pc, #540]	; (8002dc8 <JoystickLocationState+0x4b0>)
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002dd0 <JoystickLocationState+0x4b8>
 8002bb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bb8:	4b84      	ldr	r3, [pc, #528]	; (8002dcc <JoystickLocationState+0x4b4>)
 8002bba:	edd3 7a00 	vldr	s15, [r3]
 8002bbe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002bc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bca:	4b7c      	ldr	r3, [pc, #496]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002bcc:	edd3 7a00 	vldr	s15, [r3]
 8002bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd4:	4b79      	ldr	r3, [pc, #484]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002bd6:	edc3 7a06 	vstr	s15, [r3, #24]
			PickTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PickTray.L1[1];
 8002bda:	4b7c      	ldr	r3, [pc, #496]	; (8002dcc <JoystickLocationState+0x4b4>)
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8002dd0 <JoystickLocationState+0x4b8>
 8002be4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002be8:	4b77      	ldr	r3, [pc, #476]	; (8002dc8 <JoystickLocationState+0x4b0>)
 8002bea:	edd3 7a00 	vldr	s15, [r3]
 8002bee:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002bf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bfa:	4b70      	ldr	r3, [pc, #448]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002bfc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c04:	4b6d      	ldr	r3, [pc, #436]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002c06:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PickTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PickTray.L1[0];
 8002c0a:	4b6f      	ldr	r3, [pc, #444]	; (8002dc8 <JoystickLocationState+0x4b0>)
 8002c0c:	edd3 7a00 	vldr	s15, [r3]
 8002c10:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c18:	4b6c      	ldr	r3, [pc, #432]	; (8002dcc <JoystickLocationState+0x4b4>)
 8002c1a:	edd3 7a00 	vldr	s15, [r3]
 8002c1e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002c22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c2a:	4b64      	ldr	r3, [pc, #400]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002c2c:	edd3 7a00 	vldr	s15, [r3]
 8002c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c34:	4b61      	ldr	r3, [pc, #388]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002c36:	edc3 7a07 	vstr	s15, [r3, #28]
			PickTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PickTray.L1[1];
 8002c3a:	4b64      	ldr	r3, [pc, #400]	; (8002dcc <JoystickLocationState+0x4b4>)
 8002c3c:	edd3 7a00 	vldr	s15, [r3]
 8002c40:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c48:	4b5f      	ldr	r3, [pc, #380]	; (8002dc8 <JoystickLocationState+0x4b0>)
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002c52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c5a:	4b58      	ldr	r3, [pc, #352]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002c5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c64:	4b55      	ldr	r3, [pc, #340]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002c66:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PickTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PickTray.L1[0];
 8002c6a:	4b57      	ldr	r3, [pc, #348]	; (8002dc8 <JoystickLocationState+0x4b0>)
 8002c6c:	edd3 7a00 	vldr	s15, [r3]
 8002c70:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002c74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c78:	4b54      	ldr	r3, [pc, #336]	; (8002dcc <JoystickLocationState+0x4b4>)
 8002c7a:	edd3 7a00 	vldr	s15, [r3]
 8002c7e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002c82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c8a:	4b4c      	ldr	r3, [pc, #304]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002c8c:	edd3 7a00 	vldr	s15, [r3]
 8002c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c94:	4b49      	ldr	r3, [pc, #292]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002c96:	edc3 7a08 	vstr	s15, [r3, #32]
			PickTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PickTray.L1[1];
 8002c9a:	4b4c      	ldr	r3, [pc, #304]	; (8002dcc <JoystickLocationState+0x4b4>)
 8002c9c:	edd3 7a00 	vldr	s15, [r3]
 8002ca0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002ca4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ca8:	4b47      	ldr	r3, [pc, #284]	; (8002dc8 <JoystickLocationState+0x4b0>)
 8002caa:	edd3 7a00 	vldr	s15, [r3]
 8002cae:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002cb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cba:	4b40      	ldr	r3, [pc, #256]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002cbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc4:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002cc6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PickTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PickTray.L1[0];
 8002cca:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <JoystickLocationState+0x4b0>)
 8002ccc:	edd3 7a00 	vldr	s15, [r3]
 8002cd0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002dd0 <JoystickLocationState+0x4b8>
 8002cd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cd8:	4b3c      	ldr	r3, [pc, #240]	; (8002dcc <JoystickLocationState+0x4b4>)
 8002cda:	edd3 7a00 	vldr	s15, [r3]
 8002cde:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002ce2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ce6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cea:	4b34      	ldr	r3, [pc, #208]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002cec:	edd3 7a00 	vldr	s15, [r3]
 8002cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf4:	4b31      	ldr	r3, [pc, #196]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002cf6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PickTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PickTray.L1[1];
 8002cfa:	4b34      	ldr	r3, [pc, #208]	; (8002dcc <JoystickLocationState+0x4b4>)
 8002cfc:	edd3 7a00 	vldr	s15, [r3]
 8002d00:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002dd0 <JoystickLocationState+0x4b8>
 8002d04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d08:	4b2f      	ldr	r3, [pc, #188]	; (8002dc8 <JoystickLocationState+0x4b0>)
 8002d0a:	edd3 7a00 	vldr	s15, [r3]
 8002d0e:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002d12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d1a:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002d1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d24:	4b25      	ldr	r3, [pc, #148]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002d26:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PickTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PickTray.L1[0];
 8002d2a:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <JoystickLocationState+0x4b0>)
 8002d2c:	edd3 7a00 	vldr	s15, [r3]
 8002d30:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d38:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <JoystickLocationState+0x4b4>)
 8002d3a:	edd3 7a00 	vldr	s15, [r3]
 8002d3e:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002dd4 <JoystickLocationState+0x4bc>
 8002d42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d4a:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002d4c:	edd3 7a00 	vldr	s15, [r3]
 8002d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d54:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002d56:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PickTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PickTray.L1[1];
 8002d5a:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <JoystickLocationState+0x4b4>)
 8002d5c:	edd3 7a00 	vldr	s15, [r3]
 8002d60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d68:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <JoystickLocationState+0x4b0>)
 8002d6a:	edd3 7a00 	vldr	s15, [r3]
 8002d6e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002dd8 <JoystickLocationState+0x4c0>
 8002d72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002d7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d84:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <JoystickLocationState+0x4a4>)
 8002d86:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PickTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PickTray.L1[0];
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <JoystickLocationState+0x4b0>)
 8002d8c:	edd3 7a00 	vldr	s15, [r3]
 8002d90:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002d94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <JoystickLocationState+0x4b4>)
 8002d9a:	edd3 7a00 	vldr	s15, [r3]
 8002d9e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002dd4 <JoystickLocationState+0x4bc>
 8002da2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002da6:	e019      	b.n	8002ddc <JoystickLocationState+0x4c4>
 8002da8:	70a3d70a 	.word	0x70a3d70a
 8002dac:	3fa70a3d 	.word	0x3fa70a3d
 8002db0:	20000888 	.word	0x20000888
 8002db4:	20000db8 	.word	0x20000db8
 8002db8:	cccccccd 	.word	0xcccccccd
 8002dbc:	200007b8 	.word	0x200007b8
 8002dc0:	2000077c 	.word	0x2000077c
 8002dc4:	42700000 	.word	0x42700000
 8002dc8:	20000880 	.word	0x20000880
 8002dcc:	20000884 	.word	0x20000884
 8002dd0:	42480000 	.word	0x42480000
 8002dd4:	42200000 	.word	0x42200000
 8002dd8:	c2200000 	.word	0xc2200000
 8002ddc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002de0:	4b8b      	ldr	r3, [pc, #556]	; (8003010 <JoystickLocationState+0x6f8>)
 8002de2:	edd3 7a00 	vldr	s15, [r3]
 8002de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dea:	4b89      	ldr	r3, [pc, #548]	; (8003010 <JoystickLocationState+0x6f8>)
 8002dec:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PickTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PickTray.L1[1];
 8002df0:	4b88      	ldr	r3, [pc, #544]	; (8003014 <JoystickLocationState+0x6fc>)
 8002df2:	edd3 7a00 	vldr	s15, [r3]
 8002df6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002dfa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dfe:	4b86      	ldr	r3, [pc, #536]	; (8003018 <JoystickLocationState+0x700>)
 8002e00:	edd3 7a00 	vldr	s15, [r3]
 8002e04:	eddf 6a85 	vldr	s13, [pc, #532]	; 800301c <JoystickLocationState+0x704>
 8002e08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e10:	4b7f      	ldr	r3, [pc, #508]	; (8003010 <JoystickLocationState+0x6f8>)
 8002e12:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e1a:	4b7d      	ldr	r3, [pc, #500]	; (8003010 <JoystickLocationState+0x6f8>)
 8002e1c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PickTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PickTray.L1[0];
 8002e20:	4b7d      	ldr	r3, [pc, #500]	; (8003018 <JoystickLocationState+0x700>)
 8002e22:	edd3 7a00 	vldr	s15, [r3]
 8002e26:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003020 <JoystickLocationState+0x708>
 8002e2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e2e:	4b79      	ldr	r3, [pc, #484]	; (8003014 <JoystickLocationState+0x6fc>)
 8002e30:	edd3 7a00 	vldr	s15, [r3]
 8002e34:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8003024 <JoystickLocationState+0x70c>
 8002e38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e40:	4b73      	ldr	r3, [pc, #460]	; (8003010 <JoystickLocationState+0x6f8>)
 8002e42:	edd3 7a00 	vldr	s15, [r3]
 8002e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4a:	4b71      	ldr	r3, [pc, #452]	; (8003010 <JoystickLocationState+0x6f8>)
 8002e4c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PickTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PickTray.L1[1];
 8002e50:	4b70      	ldr	r3, [pc, #448]	; (8003014 <JoystickLocationState+0x6fc>)
 8002e52:	edd3 7a00 	vldr	s15, [r3]
 8002e56:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003020 <JoystickLocationState+0x708>
 8002e5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e5e:	4b6e      	ldr	r3, [pc, #440]	; (8003018 <JoystickLocationState+0x700>)
 8002e60:	edd3 7a00 	vldr	s15, [r3]
 8002e64:	eddf 6a6d 	vldr	s13, [pc, #436]	; 800301c <JoystickLocationState+0x704>
 8002e68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e70:	4b67      	ldr	r3, [pc, #412]	; (8003010 <JoystickLocationState+0x6f8>)
 8002e72:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e7a:	4b65      	ldr	r3, [pc, #404]	; (8003010 <JoystickLocationState+0x6f8>)
 8002e7c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PickTray.origin_x = PickTray.L1[0]+(50*sin_Theta);
 8002e80:	4b63      	ldr	r3, [pc, #396]	; (8003010 <JoystickLocationState+0x6f8>)
 8002e82:	ed93 7a00 	vldr	s14, [r3]
 8002e86:	4b63      	ldr	r3, [pc, #396]	; (8003014 <JoystickLocationState+0x6fc>)
 8002e88:	edd3 7a00 	vldr	s15, [r3]
 8002e8c:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003020 <JoystickLocationState+0x708>
 8002e90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e98:	4b5d      	ldr	r3, [pc, #372]	; (8003010 <JoystickLocationState+0x6f8>)
 8002e9a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			PickTray.origin_y = PickTray.L1[1]-(50*cos_Theta);
 8002e9e:	4b5c      	ldr	r3, [pc, #368]	; (8003010 <JoystickLocationState+0x6f8>)
 8002ea0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ea4:	4b5c      	ldr	r3, [pc, #368]	; (8003018 <JoystickLocationState+0x700>)
 8002ea6:	edd3 7a00 	vldr	s15, [r3]
 8002eaa:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8003020 <JoystickLocationState+0x708>
 8002eae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb6:	4b56      	ldr	r3, [pc, #344]	; (8003010 <JoystickLocationState+0x6f8>)
 8002eb8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			PickTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 8002ebc:	4b56      	ldr	r3, [pc, #344]	; (8003018 <JoystickLocationState+0x700>)
 8002ebe:	edd3 7a00 	vldr	s15, [r3]
 8002ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec6:	f008 ff75 	bl	800bdb4 <acosf>
 8002eca:	ee10 3a10 	vmov	r3, s0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd fae6 	bl	80004a0 <__aeabi_f2d>
 8002ed4:	a34a      	add	r3, pc, #296	; (adr r3, 8003000 <JoystickLocationState+0x6e8>)
 8002ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eda:	f7fd fb39 	bl	8000550 <__aeabi_dmul>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f7fd fe2b 	bl	8000b40 <__aeabi_d2f>
 8002eea:	4603      	mov	r3, r0
 8002eec:	4a48      	ldr	r2, [pc, #288]	; (8003010 <JoystickLocationState+0x6f8>)
 8002eee:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[32].U16 = PickTray.origin_x * 10;
 8002ef0:	4b47      	ldr	r3, [pc, #284]	; (8003010 <JoystickLocationState+0x6f8>)
 8002ef2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002ef6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002efa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f02:	ee17 3a90 	vmov	r3, s15
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	4b47      	ldr	r3, [pc, #284]	; (8003028 <JoystickLocationState+0x710>)
 8002f0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			registerFrame[33].U16 = PickTray.origin_y * 10;
 8002f0e:	4b40      	ldr	r3, [pc, #256]	; (8003010 <JoystickLocationState+0x6f8>)
 8002f10:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002f14:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f20:	ee17 3a90 	vmov	r3, s15
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	4b40      	ldr	r3, [pc, #256]	; (8003028 <JoystickLocationState+0x710>)
 8002f28:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			registerFrame[34].U16 = PickTray.orientation * 100;
 8002f2c:	4b38      	ldr	r3, [pc, #224]	; (8003010 <JoystickLocationState+0x6f8>)
 8002f2e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002f32:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800302c <JoystickLocationState+0x714>
 8002f36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f3e:	ee17 3a90 	vmov	r3, s15
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	4b38      	ldr	r3, [pc, #224]	; (8003028 <JoystickLocationState+0x710>)
 8002f46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			registerFrame[16].U16 = 0;
 8002f4a:	4b37      	ldr	r3, [pc, #220]	; (8003028 <JoystickLocationState+0x710>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8002f50:	e325      	b.n	800359e <JoystickLocationState+0xc86>
		else if (ResetButton.flag == 1)
 8002f52:	4b37      	ldr	r3, [pc, #220]	; (8003030 <JoystickLocationState+0x718>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	f040 8321 	bne.w	800359e <JoystickLocationState+0xc86>
			ResetButton.flag = 0;
 8002f5c:	4b34      	ldr	r3, [pc, #208]	; (8003030 <JoystickLocationState+0x718>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
			state = 1;
 8002f62:	4b34      	ldr	r3, [pc, #208]	; (8003034 <JoystickLocationState+0x71c>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
		break;
 8002f68:	e319      	b.n	800359e <JoystickLocationState+0xc86>

	//Get Place Tray 1st Point
	case 3:
		PlaceTray.L1[0] = 0;
 8002f6a:	4b33      	ldr	r3, [pc, #204]	; (8003038 <JoystickLocationState+0x720>)
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
		PlaceTray.L2[0] = 0;
 8002f72:	4b31      	ldr	r3, [pc, #196]	; (8003038 <JoystickLocationState+0x720>)
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
		PlaceTray.L1[1] = 0;
 8002f7a:	4b2f      	ldr	r3, [pc, #188]	; (8003038 <JoystickLocationState+0x720>)
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	605a      	str	r2, [r3, #4]
		PlaceTray.L2[1] = 0;
 8002f82:	4b2d      	ldr	r3, [pc, #180]	; (8003038 <JoystickLocationState+0x720>)
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8002f8a:	4b2c      	ldr	r3, [pc, #176]	; (800303c <JoystickLocationState+0x724>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d129      	bne.n	8002fe6 <JoystickLocationState+0x6ce>
		{
			PlaceTray.L1[0] = (registerFrame[68].U16)/10; //Place Tray X Position 1 //mm
 8002f92:	4b25      	ldr	r3, [pc, #148]	; (8003028 <JoystickLocationState+0x710>)
 8002f94:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f98:	4a29      	ldr	r2, [pc, #164]	; (8003040 <JoystickLocationState+0x728>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	08db      	lsrs	r3, r3, #3
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002faa:	4b23      	ldr	r3, [pc, #140]	; (8003038 <JoystickLocationState+0x720>)
 8002fac:	edc3 7a00 	vstr	s15, [r3]
			PlaceTray.L1[1] = position*0.045; //Place Tray Y Position 1 //mm
 8002fb0:	4b24      	ldr	r3, [pc, #144]	; (8003044 <JoystickLocationState+0x72c>)
 8002fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd fa60 	bl	800047c <__aeabi_i2d>
 8002fbc:	a312      	add	r3, pc, #72	; (adr r3, 8003008 <JoystickLocationState+0x6f0>)
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	f7fd fac5 	bl	8000550 <__aeabi_dmul>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f7fd fdb7 	bl	8000b40 <__aeabi_d2f>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4a18      	ldr	r2, [pc, #96]	; (8003038 <JoystickLocationState+0x720>)
 8002fd6:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 8002fd8:	4b18      	ldr	r3, [pc, #96]	; (800303c <JoystickLocationState+0x724>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	609a      	str	r2, [r3, #8]
			state = 4;
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <JoystickLocationState+0x71c>)
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8002fe4:	e2dd      	b.n	80035a2 <JoystickLocationState+0xc8a>
		else if (ResetButton.flag == 1)
 8002fe6:	4b12      	ldr	r3, [pc, #72]	; (8003030 <JoystickLocationState+0x718>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	f040 82d9 	bne.w	80035a2 <JoystickLocationState+0xc8a>
			ResetButton.flag = 0;
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <JoystickLocationState+0x718>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
			state = 1;
 8002ff6:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <JoystickLocationState+0x71c>)
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
		break;
 8002ffc:	e2d1      	b.n	80035a2 <JoystickLocationState+0xc8a>
 8002ffe:	bf00      	nop
 8003000:	1a63c1f8 	.word	0x1a63c1f8
 8003004:	404ca5dc 	.word	0x404ca5dc
 8003008:	70a3d70a 	.word	0x70a3d70a
 800300c:	3fa70a3d 	.word	0x3fa70a3d
 8003010:	200007b8 	.word	0x200007b8
 8003014:	20000884 	.word	0x20000884
 8003018:	20000880 	.word	0x20000880
 800301c:	c2200000 	.word	0xc2200000
 8003020:	42480000 	.word	0x42480000
 8003024:	42200000 	.word	0x42200000
 8003028:	20000db8 	.word	0x20000db8
 800302c:	42c80000 	.word	0x42c80000
 8003030:	20000894 	.word	0x20000894
 8003034:	20000218 	.word	0x20000218
 8003038:	2000081c 	.word	0x2000081c
 800303c:	20000888 	.word	0x20000888
 8003040:	cccccccd 	.word	0xcccccccd
 8003044:	2000077c 	.word	0x2000077c

	//Get Place Tray 2nd Point
	case 4:
		if (GetPositionButton.flag == 1)
 8003048:	4bd5      	ldr	r3, [pc, #852]	; (80033a0 <JoystickLocationState+0xa88>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b01      	cmp	r3, #1
 800304e:	f040 8273 	bne.w	8003538 <JoystickLocationState+0xc20>
		{
			PlaceTray.L2[0] = (registerFrame[68].U16)/10; //Place Tray X Position 2 //mm
 8003052:	4bd4      	ldr	r3, [pc, #848]	; (80033a4 <JoystickLocationState+0xa8c>)
 8003054:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003058:	4ad3      	ldr	r2, [pc, #844]	; (80033a8 <JoystickLocationState+0xa90>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	08db      	lsrs	r3, r3, #3
 8003060:	b29b      	uxth	r3, r3
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800306a:	4bd0      	ldr	r3, [pc, #832]	; (80033ac <JoystickLocationState+0xa94>)
 800306c:	edc3 7a02 	vstr	s15, [r3, #8]
			PlaceTray.L2[1] = position*0.045; //Place Tray Y Position 2 //mm
 8003070:	4bcf      	ldr	r3, [pc, #828]	; (80033b0 <JoystickLocationState+0xa98>)
 8003072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fa00 	bl	800047c <__aeabi_i2d>
 800307c:	a3c6      	add	r3, pc, #792	; (adr r3, 8003398 <JoystickLocationState+0xa80>)
 800307e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003082:	f7fd fa65 	bl	8000550 <__aeabi_dmul>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4610      	mov	r0, r2
 800308c:	4619      	mov	r1, r3
 800308e:	f7fd fd57 	bl	8000b40 <__aeabi_d2f>
 8003092:	4603      	mov	r3, r0
 8003094:	4ac5      	ldr	r2, [pc, #788]	; (80033ac <JoystickLocationState+0xa94>)
 8003096:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 8003098:	4bc1      	ldr	r3, [pc, #772]	; (80033a0 <JoystickLocationState+0xa88>)
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]

			cos_Theta = (PlaceTray.L2[0]-PlaceTray.L1[0])/60;
 800309e:	4bc3      	ldr	r3, [pc, #780]	; (80033ac <JoystickLocationState+0xa94>)
 80030a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80030a4:	4bc1      	ldr	r3, [pc, #772]	; (80033ac <JoystickLocationState+0xa94>)
 80030a6:	edd3 7a00 	vldr	s15, [r3]
 80030aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030ae:	eddf 6ac1 	vldr	s13, [pc, #772]	; 80033b4 <JoystickLocationState+0xa9c>
 80030b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030b6:	4bc0      	ldr	r3, [pc, #768]	; (80033b8 <JoystickLocationState+0xaa0>)
 80030b8:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PlaceTray.L2[1]-PlaceTray.L1[1])/60;
 80030bc:	4bbb      	ldr	r3, [pc, #748]	; (80033ac <JoystickLocationState+0xa94>)
 80030be:	ed93 7a03 	vldr	s14, [r3, #12]
 80030c2:	4bba      	ldr	r3, [pc, #744]	; (80033ac <JoystickLocationState+0xa94>)
 80030c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80030c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030cc:	eddf 6ab9 	vldr	s13, [pc, #740]	; 80033b4 <JoystickLocationState+0xa9c>
 80030d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030d4:	4bb9      	ldr	r3, [pc, #740]	; (80033bc <JoystickLocationState+0xaa4>)
 80030d6:	edc3 7a00 	vstr	s15, [r3]

			PlaceTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PlaceTray.L1[0];
 80030da:	4bb7      	ldr	r3, [pc, #732]	; (80033b8 <JoystickLocationState+0xaa0>)
 80030dc:	edd3 7a00 	vldr	s15, [r3]
 80030e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030e8:	4bb4      	ldr	r3, [pc, #720]	; (80033bc <JoystickLocationState+0xaa4>)
 80030ea:	edd3 7a00 	vldr	s15, [r3]
 80030ee:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80030f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030fa:	4bac      	ldr	r3, [pc, #688]	; (80033ac <JoystickLocationState+0xa94>)
 80030fc:	edd3 7a00 	vldr	s15, [r3]
 8003100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003104:	4ba9      	ldr	r3, [pc, #676]	; (80033ac <JoystickLocationState+0xa94>)
 8003106:	edc3 7a04 	vstr	s15, [r3, #16]
			PlaceTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PlaceTray.L1[1];
 800310a:	4bac      	ldr	r3, [pc, #688]	; (80033bc <JoystickLocationState+0xaa4>)
 800310c:	edd3 7a00 	vldr	s15, [r3]
 8003110:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003114:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003118:	4ba7      	ldr	r3, [pc, #668]	; (80033b8 <JoystickLocationState+0xaa0>)
 800311a:	edd3 7a00 	vldr	s15, [r3]
 800311e:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8003122:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003126:	ee37 7a27 	vadd.f32	s14, s14, s15
 800312a:	4ba0      	ldr	r3, [pc, #640]	; (80033ac <JoystickLocationState+0xa94>)
 800312c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003134:	4b9d      	ldr	r3, [pc, #628]	; (80033ac <JoystickLocationState+0xa94>)
 8003136:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PlaceTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PlaceTray.L1[0];
 800313a:	4b9f      	ldr	r3, [pc, #636]	; (80033b8 <JoystickLocationState+0xaa0>)
 800313c:	edd3 7a00 	vldr	s15, [r3]
 8003140:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003144:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003148:	4b9c      	ldr	r3, [pc, #624]	; (80033bc <JoystickLocationState+0xaa4>)
 800314a:	edd3 7a00 	vldr	s15, [r3]
 800314e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003152:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003156:	ee37 7a27 	vadd.f32	s14, s14, s15
 800315a:	4b94      	ldr	r3, [pc, #592]	; (80033ac <JoystickLocationState+0xa94>)
 800315c:	edd3 7a00 	vldr	s15, [r3]
 8003160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003164:	4b91      	ldr	r3, [pc, #580]	; (80033ac <JoystickLocationState+0xa94>)
 8003166:	edc3 7a05 	vstr	s15, [r3, #20]
			PlaceTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PlaceTray.L1[1];
 800316a:	4b94      	ldr	r3, [pc, #592]	; (80033bc <JoystickLocationState+0xaa4>)
 800316c:	edd3 7a00 	vldr	s15, [r3]
 8003170:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003174:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003178:	4b8f      	ldr	r3, [pc, #572]	; (80033b8 <JoystickLocationState+0xaa0>)
 800317a:	edd3 7a00 	vldr	s15, [r3]
 800317e:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8003182:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003186:	ee37 7a27 	vadd.f32	s14, s14, s15
 800318a:	4b88      	ldr	r3, [pc, #544]	; (80033ac <JoystickLocationState+0xa94>)
 800318c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003194:	4b85      	ldr	r3, [pc, #532]	; (80033ac <JoystickLocationState+0xa94>)
 8003196:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PlaceTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PlaceTray.L1[0];
 800319a:	4b87      	ldr	r3, [pc, #540]	; (80033b8 <JoystickLocationState+0xaa0>)
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80033c0 <JoystickLocationState+0xaa8>
 80031a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031a8:	4b84      	ldr	r3, [pc, #528]	; (80033bc <JoystickLocationState+0xaa4>)
 80031aa:	edd3 7a00 	vldr	s15, [r3]
 80031ae:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80031b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031ba:	4b7c      	ldr	r3, [pc, #496]	; (80033ac <JoystickLocationState+0xa94>)
 80031bc:	edd3 7a00 	vldr	s15, [r3]
 80031c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c4:	4b79      	ldr	r3, [pc, #484]	; (80033ac <JoystickLocationState+0xa94>)
 80031c6:	edc3 7a06 	vstr	s15, [r3, #24]
			PlaceTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PlaceTray.L1[1];
 80031ca:	4b7c      	ldr	r3, [pc, #496]	; (80033bc <JoystickLocationState+0xaa4>)
 80031cc:	edd3 7a00 	vldr	s15, [r3]
 80031d0:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80033c0 <JoystickLocationState+0xaa8>
 80031d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031d8:	4b77      	ldr	r3, [pc, #476]	; (80033b8 <JoystickLocationState+0xaa0>)
 80031da:	edd3 7a00 	vldr	s15, [r3]
 80031de:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80031e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031ea:	4b70      	ldr	r3, [pc, #448]	; (80033ac <JoystickLocationState+0xa94>)
 80031ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80031f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f4:	4b6d      	ldr	r3, [pc, #436]	; (80033ac <JoystickLocationState+0xa94>)
 80031f6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PlaceTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PlaceTray.L1[0];
 80031fa:	4b6f      	ldr	r3, [pc, #444]	; (80033b8 <JoystickLocationState+0xaa0>)
 80031fc:	edd3 7a00 	vldr	s15, [r3]
 8003200:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003204:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003208:	4b6c      	ldr	r3, [pc, #432]	; (80033bc <JoystickLocationState+0xaa4>)
 800320a:	edd3 7a00 	vldr	s15, [r3]
 800320e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003212:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003216:	ee37 7a27 	vadd.f32	s14, s14, s15
 800321a:	4b64      	ldr	r3, [pc, #400]	; (80033ac <JoystickLocationState+0xa94>)
 800321c:	edd3 7a00 	vldr	s15, [r3]
 8003220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003224:	4b61      	ldr	r3, [pc, #388]	; (80033ac <JoystickLocationState+0xa94>)
 8003226:	edc3 7a07 	vstr	s15, [r3, #28]
			PlaceTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PlaceTray.L1[1];
 800322a:	4b64      	ldr	r3, [pc, #400]	; (80033bc <JoystickLocationState+0xaa4>)
 800322c:	edd3 7a00 	vldr	s15, [r3]
 8003230:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003234:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003238:	4b5f      	ldr	r3, [pc, #380]	; (80033b8 <JoystickLocationState+0xaa0>)
 800323a:	edd3 7a00 	vldr	s15, [r3]
 800323e:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8003242:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003246:	ee37 7a27 	vadd.f32	s14, s14, s15
 800324a:	4b58      	ldr	r3, [pc, #352]	; (80033ac <JoystickLocationState+0xa94>)
 800324c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003254:	4b55      	ldr	r3, [pc, #340]	; (80033ac <JoystickLocationState+0xa94>)
 8003256:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PlaceTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PlaceTray.L1[0];
 800325a:	4b57      	ldr	r3, [pc, #348]	; (80033b8 <JoystickLocationState+0xaa0>)
 800325c:	edd3 7a00 	vldr	s15, [r3]
 8003260:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003264:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003268:	4b54      	ldr	r3, [pc, #336]	; (80033bc <JoystickLocationState+0xaa4>)
 800326a:	edd3 7a00 	vldr	s15, [r3]
 800326e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003272:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003276:	ee37 7a27 	vadd.f32	s14, s14, s15
 800327a:	4b4c      	ldr	r3, [pc, #304]	; (80033ac <JoystickLocationState+0xa94>)
 800327c:	edd3 7a00 	vldr	s15, [r3]
 8003280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003284:	4b49      	ldr	r3, [pc, #292]	; (80033ac <JoystickLocationState+0xa94>)
 8003286:	edc3 7a08 	vstr	s15, [r3, #32]
			PlaceTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PlaceTray.L1[1];
 800328a:	4b4c      	ldr	r3, [pc, #304]	; (80033bc <JoystickLocationState+0xaa4>)
 800328c:	edd3 7a00 	vldr	s15, [r3]
 8003290:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003294:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003298:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <JoystickLocationState+0xaa0>)
 800329a:	edd3 7a00 	vldr	s15, [r3]
 800329e:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 80032a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032aa:	4b40      	ldr	r3, [pc, #256]	; (80033ac <JoystickLocationState+0xa94>)
 80032ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80032b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b4:	4b3d      	ldr	r3, [pc, #244]	; (80033ac <JoystickLocationState+0xa94>)
 80032b6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PlaceTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PlaceTray.L1[0];
 80032ba:	4b3f      	ldr	r3, [pc, #252]	; (80033b8 <JoystickLocationState+0xaa0>)
 80032bc:	edd3 7a00 	vldr	s15, [r3]
 80032c0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80033c0 <JoystickLocationState+0xaa8>
 80032c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032c8:	4b3c      	ldr	r3, [pc, #240]	; (80033bc <JoystickLocationState+0xaa4>)
 80032ca:	edd3 7a00 	vldr	s15, [r3]
 80032ce:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80032d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032da:	4b34      	ldr	r3, [pc, #208]	; (80033ac <JoystickLocationState+0xa94>)
 80032dc:	edd3 7a00 	vldr	s15, [r3]
 80032e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e4:	4b31      	ldr	r3, [pc, #196]	; (80033ac <JoystickLocationState+0xa94>)
 80032e6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PlaceTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PlaceTray.L1[1];
 80032ea:	4b34      	ldr	r3, [pc, #208]	; (80033bc <JoystickLocationState+0xaa4>)
 80032ec:	edd3 7a00 	vldr	s15, [r3]
 80032f0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80033c0 <JoystickLocationState+0xaa8>
 80032f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032f8:	4b2f      	ldr	r3, [pc, #188]	; (80033b8 <JoystickLocationState+0xaa0>)
 80032fa:	edd3 7a00 	vldr	s15, [r3]
 80032fe:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8003302:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800330a:	4b28      	ldr	r3, [pc, #160]	; (80033ac <JoystickLocationState+0xa94>)
 800330c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003314:	4b25      	ldr	r3, [pc, #148]	; (80033ac <JoystickLocationState+0xa94>)
 8003316:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PlaceTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PlaceTray.L1[0];
 800331a:	4b27      	ldr	r3, [pc, #156]	; (80033b8 <JoystickLocationState+0xaa0>)
 800331c:	edd3 7a00 	vldr	s15, [r3]
 8003320:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003324:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003328:	4b24      	ldr	r3, [pc, #144]	; (80033bc <JoystickLocationState+0xaa4>)
 800332a:	edd3 7a00 	vldr	s15, [r3]
 800332e:	eddf 6a25 	vldr	s13, [pc, #148]	; 80033c4 <JoystickLocationState+0xaac>
 8003332:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003336:	ee37 7a27 	vadd.f32	s14, s14, s15
 800333a:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <JoystickLocationState+0xa94>)
 800333c:	edd3 7a00 	vldr	s15, [r3]
 8003340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003344:	4b19      	ldr	r3, [pc, #100]	; (80033ac <JoystickLocationState+0xa94>)
 8003346:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PlaceTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PlaceTray.L1[1];
 800334a:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <JoystickLocationState+0xaa4>)
 800334c:	edd3 7a00 	vldr	s15, [r3]
 8003350:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003354:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003358:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <JoystickLocationState+0xaa0>)
 800335a:	edd3 7a00 	vldr	s15, [r3]
 800335e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80033c8 <JoystickLocationState+0xab0>
 8003362:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003366:	ee37 7a27 	vadd.f32	s14, s14, s15
 800336a:	4b10      	ldr	r3, [pc, #64]	; (80033ac <JoystickLocationState+0xa94>)
 800336c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003374:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <JoystickLocationState+0xa94>)
 8003376:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PlaceTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PlaceTray.L1[0];
 800337a:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <JoystickLocationState+0xaa0>)
 800337c:	edd3 7a00 	vldr	s15, [r3]
 8003380:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003384:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <JoystickLocationState+0xaa4>)
 800338a:	edd3 7a00 	vldr	s15, [r3]
 800338e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80033c4 <JoystickLocationState+0xaac>
 8003392:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003396:	e019      	b.n	80033cc <JoystickLocationState+0xab4>
 8003398:	70a3d70a 	.word	0x70a3d70a
 800339c:	3fa70a3d 	.word	0x3fa70a3d
 80033a0:	20000888 	.word	0x20000888
 80033a4:	20000db8 	.word	0x20000db8
 80033a8:	cccccccd 	.word	0xcccccccd
 80033ac:	2000081c 	.word	0x2000081c
 80033b0:	2000077c 	.word	0x2000077c
 80033b4:	42700000 	.word	0x42700000
 80033b8:	20000880 	.word	0x20000880
 80033bc:	20000884 	.word	0x20000884
 80033c0:	42480000 	.word	0x42480000
 80033c4:	42200000 	.word	0x42200000
 80033c8:	c2200000 	.word	0xc2200000
 80033cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033d0:	4b79      	ldr	r3, [pc, #484]	; (80035b8 <JoystickLocationState+0xca0>)
 80033d2:	edd3 7a00 	vldr	s15, [r3]
 80033d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033da:	4b77      	ldr	r3, [pc, #476]	; (80035b8 <JoystickLocationState+0xca0>)
 80033dc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PlaceTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PlaceTray.L1[1];
 80033e0:	4b76      	ldr	r3, [pc, #472]	; (80035bc <JoystickLocationState+0xca4>)
 80033e2:	edd3 7a00 	vldr	s15, [r3]
 80033e6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80033ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033ee:	4b74      	ldr	r3, [pc, #464]	; (80035c0 <JoystickLocationState+0xca8>)
 80033f0:	edd3 7a00 	vldr	s15, [r3]
 80033f4:	eddf 6a73 	vldr	s13, [pc, #460]	; 80035c4 <JoystickLocationState+0xcac>
 80033f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003400:	4b6d      	ldr	r3, [pc, #436]	; (80035b8 <JoystickLocationState+0xca0>)
 8003402:	edd3 7a01 	vldr	s15, [r3, #4]
 8003406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340a:	4b6b      	ldr	r3, [pc, #428]	; (80035b8 <JoystickLocationState+0xca0>)
 800340c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PlaceTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003410:	4b6b      	ldr	r3, [pc, #428]	; (80035c0 <JoystickLocationState+0xca8>)
 8003412:	edd3 7a00 	vldr	s15, [r3]
 8003416:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80035c8 <JoystickLocationState+0xcb0>
 800341a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800341e:	4b67      	ldr	r3, [pc, #412]	; (80035bc <JoystickLocationState+0xca4>)
 8003420:	edd3 7a00 	vldr	s15, [r3]
 8003424:	eddf 6a69 	vldr	s13, [pc, #420]	; 80035cc <JoystickLocationState+0xcb4>
 8003428:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800342c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003430:	4b61      	ldr	r3, [pc, #388]	; (80035b8 <JoystickLocationState+0xca0>)
 8003432:	edd3 7a00 	vldr	s15, [r3]
 8003436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800343a:	4b5f      	ldr	r3, [pc, #380]	; (80035b8 <JoystickLocationState+0xca0>)
 800343c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PlaceTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003440:	4b5e      	ldr	r3, [pc, #376]	; (80035bc <JoystickLocationState+0xca4>)
 8003442:	edd3 7a00 	vldr	s15, [r3]
 8003446:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80035c8 <JoystickLocationState+0xcb0>
 800344a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800344e:	4b5c      	ldr	r3, [pc, #368]	; (80035c0 <JoystickLocationState+0xca8>)
 8003450:	edd3 7a00 	vldr	s15, [r3]
 8003454:	eddf 6a5b 	vldr	s13, [pc, #364]	; 80035c4 <JoystickLocationState+0xcac>
 8003458:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800345c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003460:	4b55      	ldr	r3, [pc, #340]	; (80035b8 <JoystickLocationState+0xca0>)
 8003462:	edd3 7a01 	vldr	s15, [r3, #4]
 8003466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800346a:	4b53      	ldr	r3, [pc, #332]	; (80035b8 <JoystickLocationState+0xca0>)
 800346c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PlaceTray.origin_x = PlaceTray.L1[0]+(50*sin_Theta);
 8003470:	4b51      	ldr	r3, [pc, #324]	; (80035b8 <JoystickLocationState+0xca0>)
 8003472:	ed93 7a00 	vldr	s14, [r3]
 8003476:	4b51      	ldr	r3, [pc, #324]	; (80035bc <JoystickLocationState+0xca4>)
 8003478:	edd3 7a00 	vldr	s15, [r3]
 800347c:	eddf 6a52 	vldr	s13, [pc, #328]	; 80035c8 <JoystickLocationState+0xcb0>
 8003480:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003488:	4b4b      	ldr	r3, [pc, #300]	; (80035b8 <JoystickLocationState+0xca0>)
 800348a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			PlaceTray.origin_y = PlaceTray.origin_y * 10;
 800348e:	4b4a      	ldr	r3, [pc, #296]	; (80035b8 <JoystickLocationState+0xca0>)
 8003490:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003494:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800349c:	4b46      	ldr	r3, [pc, #280]	; (80035b8 <JoystickLocationState+0xca0>)
 800349e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			PlaceTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 80034a2:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <JoystickLocationState+0xca8>)
 80034a4:	edd3 7a00 	vldr	s15, [r3]
 80034a8:	eeb0 0a67 	vmov.f32	s0, s15
 80034ac:	f008 fc82 	bl	800bdb4 <acosf>
 80034b0:	ee10 3a10 	vmov	r3, s0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fc fff3 	bl	80004a0 <__aeabi_f2d>
 80034ba:	a33d      	add	r3, pc, #244	; (adr r3, 80035b0 <JoystickLocationState+0xc98>)
 80034bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c0:	f7fd f846 	bl	8000550 <__aeabi_dmul>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4610      	mov	r0, r2
 80034ca:	4619      	mov	r1, r3
 80034cc:	f7fd fb38 	bl	8000b40 <__aeabi_d2f>
 80034d0:	4603      	mov	r3, r0
 80034d2:	4a39      	ldr	r2, [pc, #228]	; (80035b8 <JoystickLocationState+0xca0>)
 80034d4:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[35].U16 = PlaceTray.origin_x * 10;
 80034d6:	4b38      	ldr	r3, [pc, #224]	; (80035b8 <JoystickLocationState+0xca0>)
 80034d8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80034dc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80034e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e8:	ee17 3a90 	vmov	r3, s15
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	4b38      	ldr	r3, [pc, #224]	; (80035d0 <JoystickLocationState+0xcb8>)
 80034f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[36].U16 = PlaceTray.origin_y * 10;
 80034f4:	4b30      	ldr	r3, [pc, #192]	; (80035b8 <JoystickLocationState+0xca0>)
 80034f6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80034fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80034fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003506:	ee17 3a90 	vmov	r3, s15
 800350a:	b29a      	uxth	r2, r3
 800350c:	4b30      	ldr	r3, [pc, #192]	; (80035d0 <JoystickLocationState+0xcb8>)
 800350e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[37].U16 = PlaceTray.orientation * 100;
 8003512:	4b29      	ldr	r3, [pc, #164]	; (80035b8 <JoystickLocationState+0xca0>)
 8003514:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003518:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80035d4 <JoystickLocationState+0xcbc>
 800351c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003524:	ee17 3a90 	vmov	r3, s15
 8003528:	b29a      	uxth	r2, r3
 800352a:	4b29      	ldr	r3, [pc, #164]	; (80035d0 <JoystickLocationState+0xcb8>)
 800352c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			registerFrame[16].U16 = 0;
 8003530:	4b27      	ldr	r3, [pc, #156]	; (80035d0 <JoystickLocationState+0xcb8>)
 8003532:	2200      	movs	r2, #0
 8003534:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8003536:	e036      	b.n	80035a6 <JoystickLocationState+0xc8e>
		else if (ResetButton.flag == 1)
 8003538:	4b27      	ldr	r3, [pc, #156]	; (80035d8 <JoystickLocationState+0xcc0>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d132      	bne.n	80035a6 <JoystickLocationState+0xc8e>
			ResetButton.flag = 0;
 8003540:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <JoystickLocationState+0xcc0>)
 8003542:	2200      	movs	r2, #0
 8003544:	609a      	str	r2, [r3, #8]
			state = 1;
 8003546:	4b25      	ldr	r3, [pc, #148]	; (80035dc <JoystickLocationState+0xcc4>)
 8003548:	2201      	movs	r2, #1
 800354a:	601a      	str	r2, [r3, #0]
		break;
 800354c:	e02b      	b.n	80035a6 <JoystickLocationState+0xc8e>
	case 5:
		EndEffectorState = 2;		//TestModeOff
 800354e:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <JoystickLocationState+0xcc8>)
 8003550:	2202      	movs	r2, #2
 8003552:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 0;	//End Effector Status: Laser Off
 8003554:	4b1e      	ldr	r3, [pc, #120]	; (80035d0 <JoystickLocationState+0xcb8>)
 8003556:	2200      	movs	r2, #0
 8003558:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 800355a:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <JoystickLocationState+0xccc>)
 800355c:	2201      	movs	r2, #1
 800355e:	701a      	strb	r2, [r3, #0]

		HAL_Delay(10);
 8003560:	200a      	movs	r0, #10
 8003562:	f001 f919 	bl	8004798 <HAL_Delay>

		EndEffectorState = 3;		//RunModeOn
 8003566:	4b1e      	ldr	r3, [pc, #120]	; (80035e0 <JoystickLocationState+0xcc8>)
 8003568:	2203      	movs	r2, #3
 800356a:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 2;	//End Effector Status: Gripper Power
 800356c:	4b18      	ldr	r3, [pc, #96]	; (80035d0 <JoystickLocationState+0xcb8>)
 800356e:	2202      	movs	r2, #2
 8003570:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8003572:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <JoystickLocationState+0xccc>)
 8003574:	2201      	movs	r2, #1
 8003576:	701a      	strb	r2, [r3, #0]

		state = 1;
 8003578:	4b18      	ldr	r3, [pc, #96]	; (80035dc <JoystickLocationState+0xcc4>)
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]
		scheduler = 1;				//Go Pick
 800357e:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <JoystickLocationState+0xcd0>)
 8003580:	2201      	movs	r2, #1
 8003582:	601a      	str	r2, [r3, #0]
		if (ResetButton.flag == 1)
 8003584:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <JoystickLocationState+0xcc0>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d10e      	bne.n	80035aa <JoystickLocationState+0xc92>
		{
			ResetButton.flag = 0;
 800358c:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <JoystickLocationState+0xcc0>)
 800358e:	2200      	movs	r2, #0
 8003590:	609a      	str	r2, [r3, #8]
			state = 1;
 8003592:	4b12      	ldr	r3, [pc, #72]	; (80035dc <JoystickLocationState+0xcc4>)
 8003594:	2201      	movs	r2, #1
 8003596:	601a      	str	r2, [r3, #0]
		}
		break;
 8003598:	e007      	b.n	80035aa <JoystickLocationState+0xc92>
		break;
 800359a:	bf00      	nop
 800359c:	e006      	b.n	80035ac <JoystickLocationState+0xc94>
		break;
 800359e:	bf00      	nop
 80035a0:	e004      	b.n	80035ac <JoystickLocationState+0xc94>
		break;
 80035a2:	bf00      	nop
 80035a4:	e002      	b.n	80035ac <JoystickLocationState+0xc94>
		break;
 80035a6:	bf00      	nop
 80035a8:	e000      	b.n	80035ac <JoystickLocationState+0xc94>
		break;
 80035aa:	bf00      	nop
	}
}
 80035ac:	bf00      	nop
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	1a63c1f8 	.word	0x1a63c1f8
 80035b4:	404ca5dc 	.word	0x404ca5dc
 80035b8:	2000081c 	.word	0x2000081c
 80035bc:	20000884 	.word	0x20000884
 80035c0:	20000880 	.word	0x20000880
 80035c4:	c2200000 	.word	0xc2200000
 80035c8:	42480000 	.word	0x42480000
 80035cc:	42200000 	.word	0x42200000
 80035d0:	20000db8 	.word	0x20000db8
 80035d4:	42c80000 	.word	0x42c80000
 80035d8:	20000894 	.word	0x20000894
 80035dc:	20000218 	.word	0x20000218
 80035e0:	200008d8 	.word	0x200008d8
 80035e4:	200008d0 	.word	0x200008d0
 80035e8:	20000730 	.word	0x20000730
 80035ec:	00000000 	.word	0x00000000

080035f0 <TrajectoryGenerator>:

void TrajectoryGenerator()
{
 80035f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035f4:	af00      	add	r7, sp, #0
	switch(Trajectstate)
 80035f6:	4b9a      	ldr	r3, [pc, #616]	; (8003860 <TrajectoryGenerator+0x270>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	f000 82dc 	beq.w	8003bb8 <TrajectoryGenerator+0x5c8>
 8003600:	2b02      	cmp	r3, #2
 8003602:	f300 84ed 	bgt.w	8003fe0 <TrajectoryGenerator+0x9f0>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d004      	beq.n	8003614 <TrajectoryGenerator+0x24>
 800360a:	2b01      	cmp	r3, #1
 800360c:	f000 814c 	beq.w	80038a8 <TrajectoryGenerator+0x2b8>
		 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
		 time += 0.001;
	 }
	 break;
	}
}
 8003610:	f000 bce6 	b.w	8003fe0 <TrajectoryGenerator+0x9f0>
		qi = position;
 8003614:	4b93      	ldr	r3, [pc, #588]	; (8003864 <TrajectoryGenerator+0x274>)
 8003616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800361a:	ee07 3a90 	vmov	s15, r3
 800361e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003622:	4b91      	ldr	r3, [pc, #580]	; (8003868 <TrajectoryGenerator+0x278>)
 8003624:	edc3 7a00 	vstr	s15, [r3]
		qdi = 0;
 8003628:	4b90      	ldr	r3, [pc, #576]	; (800386c <TrajectoryGenerator+0x27c>)
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
		qd_max = 13333.33; //pDulse/s
 8003630:	4b8f      	ldr	r3, [pc, #572]	; (8003870 <TrajectoryGenerator+0x280>)
 8003632:	4a90      	ldr	r2, [pc, #576]	; (8003874 <TrajectoryGenerator+0x284>)
 8003634:	601a      	str	r2, [r3, #0]
		qdd_max = 11111.11; //pulse/s
 8003636:	4b90      	ldr	r3, [pc, #576]	; (8003878 <TrajectoryGenerator+0x288>)
 8003638:	4a90      	ldr	r2, [pc, #576]	; (800387c <TrajectoryGenerator+0x28c>)
 800363a:	601a      	str	r2, [r3, #0]
	  if(qf > qi)
 800363c:	4b90      	ldr	r3, [pc, #576]	; (8003880 <TrajectoryGenerator+0x290>)
 800363e:	ed93 7a00 	vldr	s14, [r3]
 8003642:	4b89      	ldr	r3, [pc, #548]	; (8003868 <TrajectoryGenerator+0x278>)
 8003644:	edd3 7a00 	vldr	s15, [r3]
 8003648:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800364c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003650:	dd20      	ble.n	8003694 <TrajectoryGenerator+0xa4>
		  t_half = sqrt((qf-qi)/qdd_max);
 8003652:	4b8b      	ldr	r3, [pc, #556]	; (8003880 <TrajectoryGenerator+0x290>)
 8003654:	ed93 7a00 	vldr	s14, [r3]
 8003658:	4b83      	ldr	r3, [pc, #524]	; (8003868 <TrajectoryGenerator+0x278>)
 800365a:	edd3 7a00 	vldr	s15, [r3]
 800365e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003662:	4b85      	ldr	r3, [pc, #532]	; (8003878 <TrajectoryGenerator+0x288>)
 8003664:	edd3 7a00 	vldr	s15, [r3]
 8003668:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800366c:	ee16 0a90 	vmov	r0, s13
 8003670:	f7fc ff16 	bl	80004a0 <__aeabi_f2d>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	ec43 2b10 	vmov	d0, r2, r3
 800367c:	f008 fb6e 	bl	800bd5c <sqrt>
 8003680:	ec53 2b10 	vmov	r2, r3, d0
 8003684:	4610      	mov	r0, r2
 8003686:	4619      	mov	r1, r3
 8003688:	f7fd fa5a 	bl	8000b40 <__aeabi_d2f>
 800368c:	4603      	mov	r3, r0
 800368e:	4a7d      	ldr	r2, [pc, #500]	; (8003884 <TrajectoryGenerator+0x294>)
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e02c      	b.n	80036ee <TrajectoryGenerator+0xfe>
	  else if(qf < qi)
 8003694:	4b7a      	ldr	r3, [pc, #488]	; (8003880 <TrajectoryGenerator+0x290>)
 8003696:	ed93 7a00 	vldr	s14, [r3]
 800369a:	4b73      	ldr	r3, [pc, #460]	; (8003868 <TrajectoryGenerator+0x278>)
 800369c:	edd3 7a00 	vldr	s15, [r3]
 80036a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a8:	d521      	bpl.n	80036ee <TrajectoryGenerator+0xfe>
		  t_half = sqrt(-1*(qf-qi)/qdd_max);
 80036aa:	4b75      	ldr	r3, [pc, #468]	; (8003880 <TrajectoryGenerator+0x290>)
 80036ac:	ed93 7a00 	vldr	s14, [r3]
 80036b0:	4b6d      	ldr	r3, [pc, #436]	; (8003868 <TrajectoryGenerator+0x278>)
 80036b2:	edd3 7a00 	vldr	s15, [r3]
 80036b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ba:	eeb1 7a67 	vneg.f32	s14, s15
 80036be:	4b6e      	ldr	r3, [pc, #440]	; (8003878 <TrajectoryGenerator+0x288>)
 80036c0:	edd3 7a00 	vldr	s15, [r3]
 80036c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036c8:	ee16 0a90 	vmov	r0, s13
 80036cc:	f7fc fee8 	bl	80004a0 <__aeabi_f2d>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	ec43 2b10 	vmov	d0, r2, r3
 80036d8:	f008 fb40 	bl	800bd5c <sqrt>
 80036dc:	ec53 2b10 	vmov	r2, r3, d0
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	f7fd fa2c 	bl	8000b40 <__aeabi_d2f>
 80036e8:	4603      	mov	r3, r0
 80036ea:	4a66      	ldr	r2, [pc, #408]	; (8003884 <TrajectoryGenerator+0x294>)
 80036ec:	6013      	str	r3, [r2, #0]
	  if(qf-qi < 0)
 80036ee:	4b64      	ldr	r3, [pc, #400]	; (8003880 <TrajectoryGenerator+0x290>)
 80036f0:	ed93 7a00 	vldr	s14, [r3]
 80036f4:	4b5c      	ldr	r3, [pc, #368]	; (8003868 <TrajectoryGenerator+0x278>)
 80036f6:	edd3 7a00 	vldr	s15, [r3]
 80036fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003706:	d50f      	bpl.n	8003728 <TrajectoryGenerator+0x138>
		  qd_max = -1*qd_max;
 8003708:	4b59      	ldr	r3, [pc, #356]	; (8003870 <TrajectoryGenerator+0x280>)
 800370a:	edd3 7a00 	vldr	s15, [r3]
 800370e:	eef1 7a67 	vneg.f32	s15, s15
 8003712:	4b57      	ldr	r3, [pc, #348]	; (8003870 <TrajectoryGenerator+0x280>)
 8003714:	edc3 7a00 	vstr	s15, [r3]
		  qdd_max = -1*qdd_max;
 8003718:	4b57      	ldr	r3, [pc, #348]	; (8003878 <TrajectoryGenerator+0x288>)
 800371a:	edd3 7a00 	vldr	s15, [r3]
 800371e:	eef1 7a67 	vneg.f32	s15, s15
 8003722:	4b55      	ldr	r3, [pc, #340]	; (8003878 <TrajectoryGenerator+0x288>)
 8003724:	edc3 7a00 	vstr	s15, [r3]
	  tacc = (qd_max-qdi)/qdd_max;
 8003728:	4b51      	ldr	r3, [pc, #324]	; (8003870 <TrajectoryGenerator+0x280>)
 800372a:	ed93 7a00 	vldr	s14, [r3]
 800372e:	4b4f      	ldr	r3, [pc, #316]	; (800386c <TrajectoryGenerator+0x27c>)
 8003730:	edd3 7a00 	vldr	s15, [r3]
 8003734:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003738:	4b4f      	ldr	r3, [pc, #316]	; (8003878 <TrajectoryGenerator+0x288>)
 800373a:	ed93 7a00 	vldr	s14, [r3]
 800373e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003742:	4b51      	ldr	r3, [pc, #324]	; (8003888 <TrajectoryGenerator+0x298>)
 8003744:	edc3 7a00 	vstr	s15, [r3]
	  qacc = qdi*tacc + 0.5*qdd_max*tacc*tacc;
 8003748:	4b48      	ldr	r3, [pc, #288]	; (800386c <TrajectoryGenerator+0x27c>)
 800374a:	ed93 7a00 	vldr	s14, [r3]
 800374e:	4b4e      	ldr	r3, [pc, #312]	; (8003888 <TrajectoryGenerator+0x298>)
 8003750:	edd3 7a00 	vldr	s15, [r3]
 8003754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003758:	ee17 0a90 	vmov	r0, s15
 800375c:	f7fc fea0 	bl	80004a0 <__aeabi_f2d>
 8003760:	4604      	mov	r4, r0
 8003762:	460d      	mov	r5, r1
 8003764:	4b44      	ldr	r3, [pc, #272]	; (8003878 <TrajectoryGenerator+0x288>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7fc fe99 	bl	80004a0 <__aeabi_f2d>
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	4b46      	ldr	r3, [pc, #280]	; (800388c <TrajectoryGenerator+0x29c>)
 8003774:	f7fc feec 	bl	8000550 <__aeabi_dmul>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4690      	mov	r8, r2
 800377e:	4699      	mov	r9, r3
 8003780:	4b41      	ldr	r3, [pc, #260]	; (8003888 <TrajectoryGenerator+0x298>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7fc fe8b 	bl	80004a0 <__aeabi_f2d>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4640      	mov	r0, r8
 8003790:	4649      	mov	r1, r9
 8003792:	f7fc fedd 	bl	8000550 <__aeabi_dmul>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4690      	mov	r8, r2
 800379c:	4699      	mov	r9, r3
 800379e:	4b3a      	ldr	r3, [pc, #232]	; (8003888 <TrajectoryGenerator+0x298>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fc fe7c 	bl	80004a0 <__aeabi_f2d>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4640      	mov	r0, r8
 80037ae:	4649      	mov	r1, r9
 80037b0:	f7fc fece 	bl	8000550 <__aeabi_dmul>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4620      	mov	r0, r4
 80037ba:	4629      	mov	r1, r5
 80037bc:	f7fc fd12 	bl	80001e4 <__adddf3>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4610      	mov	r0, r2
 80037c6:	4619      	mov	r1, r3
 80037c8:	f7fd f9ba 	bl	8000b40 <__aeabi_d2f>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4a30      	ldr	r2, [pc, #192]	; (8003890 <TrajectoryGenerator+0x2a0>)
 80037d0:	6013      	str	r3, [r2, #0]
	  qdec = qacc;
 80037d2:	4b2f      	ldr	r3, [pc, #188]	; (8003890 <TrajectoryGenerator+0x2a0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a2f      	ldr	r2, [pc, #188]	; (8003894 <TrajectoryGenerator+0x2a4>)
 80037d8:	6013      	str	r3, [r2, #0]
	  tconst = ((qf-qi)-qacc-qdec)/qd_max;
 80037da:	4b29      	ldr	r3, [pc, #164]	; (8003880 <TrajectoryGenerator+0x290>)
 80037dc:	ed93 7a00 	vldr	s14, [r3]
 80037e0:	4b21      	ldr	r3, [pc, #132]	; (8003868 <TrajectoryGenerator+0x278>)
 80037e2:	edd3 7a00 	vldr	s15, [r3]
 80037e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037ea:	4b29      	ldr	r3, [pc, #164]	; (8003890 <TrajectoryGenerator+0x2a0>)
 80037ec:	edd3 7a00 	vldr	s15, [r3]
 80037f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037f4:	4b27      	ldr	r3, [pc, #156]	; (8003894 <TrajectoryGenerator+0x2a4>)
 80037f6:	edd3 7a00 	vldr	s15, [r3]
 80037fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80037fe:	4b1c      	ldr	r3, [pc, #112]	; (8003870 <TrajectoryGenerator+0x280>)
 8003800:	ed93 7a00 	vldr	s14, [r3]
 8003804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003808:	4b23      	ldr	r3, [pc, #140]	; (8003898 <TrajectoryGenerator+0x2a8>)
 800380a:	edc3 7a00 	vstr	s15, [r3]
	  tdec = tacc;
 800380e:	4b1e      	ldr	r3, [pc, #120]	; (8003888 <TrajectoryGenerator+0x298>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a22      	ldr	r2, [pc, #136]	; (800389c <TrajectoryGenerator+0x2ac>)
 8003814:	6013      	str	r3, [r2, #0]
	  if(qdi+qdd_max*t_half >= qd_max)
 8003816:	4b18      	ldr	r3, [pc, #96]	; (8003878 <TrajectoryGenerator+0x288>)
 8003818:	ed93 7a00 	vldr	s14, [r3]
 800381c:	4b19      	ldr	r3, [pc, #100]	; (8003884 <TrajectoryGenerator+0x294>)
 800381e:	edd3 7a00 	vldr	s15, [r3]
 8003822:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003826:	4b11      	ldr	r3, [pc, #68]	; (800386c <TrajectoryGenerator+0x27c>)
 8003828:	edd3 7a00 	vldr	s15, [r3]
 800382c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003830:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <TrajectoryGenerator+0x280>)
 8003832:	edd3 7a00 	vldr	s15, [r3]
 8003836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800383a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383e:	db07      	blt.n	8003850 <TrajectoryGenerator+0x260>
		  initime = time;
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <TrajectoryGenerator+0x2b0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <TrajectoryGenerator+0x2b4>)
 8003846:	6013      	str	r3, [r2, #0]
		  Trajectstate = 2;
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <TrajectoryGenerator+0x270>)
 800384a:	2202      	movs	r2, #2
 800384c:	601a      	str	r2, [r3, #0]
	  break;
 800384e:	e3c7      	b.n	8003fe0 <TrajectoryGenerator+0x9f0>
		  initime = time;
 8003850:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <TrajectoryGenerator+0x2b0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a13      	ldr	r2, [pc, #76]	; (80038a4 <TrajectoryGenerator+0x2b4>)
 8003856:	6013      	str	r3, [r2, #0]
		  Trajectstate = 1;
 8003858:	4b01      	ldr	r3, [pc, #4]	; (8003860 <TrajectoryGenerator+0x270>)
 800385a:	2201      	movs	r2, #1
 800385c:	601a      	str	r2, [r3, #0]
	  break;
 800385e:	e3bf      	b.n	8003fe0 <TrajectoryGenerator+0x9f0>
 8003860:	2000073c 	.word	0x2000073c
 8003864:	2000077c 	.word	0x2000077c
 8003868:	20000748 	.word	0x20000748
 800386c:	2000074c 	.word	0x2000074c
 8003870:	2000020c 	.word	0x2000020c
 8003874:	46505552 	.word	0x46505552
 8003878:	20000210 	.word	0x20000210
 800387c:	462d9c71 	.word	0x462d9c71
 8003880:	20000744 	.word	0x20000744
 8003884:	20000754 	.word	0x20000754
 8003888:	20000768 	.word	0x20000768
 800388c:	3fe00000 	.word	0x3fe00000
 8003890:	2000076c 	.word	0x2000076c
 8003894:	20000770 	.word	0x20000770
 8003898:	20000774 	.word	0x20000774
 800389c:	20000778 	.word	0x20000778
 80038a0:	20000740 	.word	0x20000740
 80038a4:	20000750 	.word	0x20000750
	  if(time <= t_half + initime)
 80038a8:	4bb7      	ldr	r3, [pc, #732]	; (8003b88 <TrajectoryGenerator+0x598>)
 80038aa:	ed93 7a00 	vldr	s14, [r3]
 80038ae:	4bb7      	ldr	r3, [pc, #732]	; (8003b8c <TrajectoryGenerator+0x59c>)
 80038b0:	edd3 7a00 	vldr	s15, [r3]
 80038b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038b8:	4bb5      	ldr	r3, [pc, #724]	; (8003b90 <TrajectoryGenerator+0x5a0>)
 80038ba:	edd3 7a00 	vldr	s15, [r3]
 80038be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c6:	f2c0 8092 	blt.w	80039ee <TrajectoryGenerator+0x3fe>
		  setacc = qdd_max;
 80038ca:	4bb2      	ldr	r3, [pc, #712]	; (8003b94 <TrajectoryGenerator+0x5a4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4ab2      	ldr	r2, [pc, #712]	; (8003b98 <TrajectoryGenerator+0x5a8>)
 80038d0:	6013      	str	r3, [r2, #0]
		  setvelocity = qdi + setacc*(time-initime);
 80038d2:	4baf      	ldr	r3, [pc, #700]	; (8003b90 <TrajectoryGenerator+0x5a0>)
 80038d4:	ed93 7a00 	vldr	s14, [r3]
 80038d8:	4bac      	ldr	r3, [pc, #688]	; (8003b8c <TrajectoryGenerator+0x59c>)
 80038da:	edd3 7a00 	vldr	s15, [r3]
 80038de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038e2:	4bad      	ldr	r3, [pc, #692]	; (8003b98 <TrajectoryGenerator+0x5a8>)
 80038e4:	edd3 7a00 	vldr	s15, [r3]
 80038e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038ec:	4bab      	ldr	r3, [pc, #684]	; (8003b9c <TrajectoryGenerator+0x5ac>)
 80038ee:	edd3 7a00 	vldr	s15, [r3]
 80038f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038f6:	4baa      	ldr	r3, [pc, #680]	; (8003ba0 <TrajectoryGenerator+0x5b0>)
 80038f8:	edc3 7a00 	vstr	s15, [r3]
		  setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 80038fc:	4ba4      	ldr	r3, [pc, #656]	; (8003b90 <TrajectoryGenerator+0x5a0>)
 80038fe:	ed93 7a00 	vldr	s14, [r3]
 8003902:	4ba2      	ldr	r3, [pc, #648]	; (8003b8c <TrajectoryGenerator+0x59c>)
 8003904:	edd3 7a00 	vldr	s15, [r3]
 8003908:	ee37 7a67 	vsub.f32	s14, s14, s15
 800390c:	4ba3      	ldr	r3, [pc, #652]	; (8003b9c <TrajectoryGenerator+0x5ac>)
 800390e:	edd3 7a00 	vldr	s15, [r3]
 8003912:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003916:	4ba3      	ldr	r3, [pc, #652]	; (8003ba4 <TrajectoryGenerator+0x5b4>)
 8003918:	edd3 7a00 	vldr	s15, [r3]
 800391c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003920:	ee17 0a90 	vmov	r0, s15
 8003924:	f7fc fdbc 	bl	80004a0 <__aeabi_f2d>
 8003928:	4604      	mov	r4, r0
 800392a:	460d      	mov	r5, r1
 800392c:	4b9a      	ldr	r3, [pc, #616]	; (8003b98 <TrajectoryGenerator+0x5a8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f7fc fdb5 	bl	80004a0 <__aeabi_f2d>
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	4b9b      	ldr	r3, [pc, #620]	; (8003ba8 <TrajectoryGenerator+0x5b8>)
 800393c:	f7fc fe08 	bl	8000550 <__aeabi_dmul>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4690      	mov	r8, r2
 8003946:	4699      	mov	r9, r3
 8003948:	4b91      	ldr	r3, [pc, #580]	; (8003b90 <TrajectoryGenerator+0x5a0>)
 800394a:	ed93 7a00 	vldr	s14, [r3]
 800394e:	4b8f      	ldr	r3, [pc, #572]	; (8003b8c <TrajectoryGenerator+0x59c>)
 8003950:	edd3 7a00 	vldr	s15, [r3]
 8003954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003958:	ee17 0a90 	vmov	r0, s15
 800395c:	f7fc fda0 	bl	80004a0 <__aeabi_f2d>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4640      	mov	r0, r8
 8003966:	4649      	mov	r1, r9
 8003968:	f7fc fdf2 	bl	8000550 <__aeabi_dmul>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4690      	mov	r8, r2
 8003972:	4699      	mov	r9, r3
 8003974:	4b86      	ldr	r3, [pc, #536]	; (8003b90 <TrajectoryGenerator+0x5a0>)
 8003976:	ed93 7a00 	vldr	s14, [r3]
 800397a:	4b84      	ldr	r3, [pc, #528]	; (8003b8c <TrajectoryGenerator+0x59c>)
 800397c:	edd3 7a00 	vldr	s15, [r3]
 8003980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003984:	ee17 0a90 	vmov	r0, s15
 8003988:	f7fc fd8a 	bl	80004a0 <__aeabi_f2d>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4640      	mov	r0, r8
 8003992:	4649      	mov	r1, r9
 8003994:	f7fc fddc 	bl	8000550 <__aeabi_dmul>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4620      	mov	r0, r4
 800399e:	4629      	mov	r1, r5
 80039a0:	f7fc fc20 	bl	80001e4 <__adddf3>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4610      	mov	r0, r2
 80039aa:	4619      	mov	r1, r3
 80039ac:	f7fd f8c8 	bl	8000b40 <__aeabi_d2f>
 80039b0:	4603      	mov	r3, r0
 80039b2:	4a7e      	ldr	r2, [pc, #504]	; (8003bac <TrajectoryGenerator+0x5bc>)
 80039b4:	6013      	str	r3, [r2, #0]
		  qi_1 = setposition;
 80039b6:	4b7d      	ldr	r3, [pc, #500]	; (8003bac <TrajectoryGenerator+0x5bc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a7d      	ldr	r2, [pc, #500]	; (8003bb0 <TrajectoryGenerator+0x5c0>)
 80039bc:	6013      	str	r3, [r2, #0]
		  qdi_1 = setvelocity;
 80039be:	4b78      	ldr	r3, [pc, #480]	; (8003ba0 <TrajectoryGenerator+0x5b0>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a7c      	ldr	r2, [pc, #496]	; (8003bb4 <TrajectoryGenerator+0x5c4>)
 80039c4:	6013      	str	r3, [r2, #0]
		  time += 0.001;
 80039c6:	4b72      	ldr	r3, [pc, #456]	; (8003b90 <TrajectoryGenerator+0x5a0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fc fd68 	bl	80004a0 <__aeabi_f2d>
 80039d0:	a36b      	add	r3, pc, #428	; (adr r3, 8003b80 <TrajectoryGenerator+0x590>)
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	f7fc fc05 	bl	80001e4 <__adddf3>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4610      	mov	r0, r2
 80039e0:	4619      	mov	r1, r3
 80039e2:	f7fd f8ad 	bl	8000b40 <__aeabi_d2f>
 80039e6:	4603      	mov	r3, r0
 80039e8:	4a69      	ldr	r2, [pc, #420]	; (8003b90 <TrajectoryGenerator+0x5a0>)
 80039ea:	6013      	str	r3, [r2, #0]
	break;
 80039ec:	e2f8      	b.n	8003fe0 <TrajectoryGenerator+0x9f0>
	  else if(t_half + initime < time && time <= (2*t_half) + initime)
 80039ee:	4b66      	ldr	r3, [pc, #408]	; (8003b88 <TrajectoryGenerator+0x598>)
 80039f0:	ed93 7a00 	vldr	s14, [r3]
 80039f4:	4b65      	ldr	r3, [pc, #404]	; (8003b8c <TrajectoryGenerator+0x59c>)
 80039f6:	edd3 7a00 	vldr	s15, [r3]
 80039fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039fe:	4b64      	ldr	r3, [pc, #400]	; (8003b90 <TrajectoryGenerator+0x5a0>)
 8003a00:	edd3 7a00 	vldr	s15, [r3]
 8003a04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0c:	d400      	bmi.n	8003a10 <TrajectoryGenerator+0x420>
	break;
 8003a0e:	e2e7      	b.n	8003fe0 <TrajectoryGenerator+0x9f0>
	  else if(t_half + initime < time && time <= (2*t_half) + initime)
 8003a10:	4b5d      	ldr	r3, [pc, #372]	; (8003b88 <TrajectoryGenerator+0x598>)
 8003a12:	edd3 7a00 	vldr	s15, [r3]
 8003a16:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a1a:	4b5c      	ldr	r3, [pc, #368]	; (8003b8c <TrajectoryGenerator+0x59c>)
 8003a1c:	edd3 7a00 	vldr	s15, [r3]
 8003a20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a24:	4b5a      	ldr	r3, [pc, #360]	; (8003b90 <TrajectoryGenerator+0x5a0>)
 8003a26:	edd3 7a00 	vldr	s15, [r3]
 8003a2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a32:	da00      	bge.n	8003a36 <TrajectoryGenerator+0x446>
	break;
 8003a34:	e2d4      	b.n	8003fe0 <TrajectoryGenerator+0x9f0>
		  setacc = -qdd_max;
 8003a36:	4b57      	ldr	r3, [pc, #348]	; (8003b94 <TrajectoryGenerator+0x5a4>)
 8003a38:	edd3 7a00 	vldr	s15, [r3]
 8003a3c:	eef1 7a67 	vneg.f32	s15, s15
 8003a40:	4b55      	ldr	r3, [pc, #340]	; (8003b98 <TrajectoryGenerator+0x5a8>)
 8003a42:	edc3 7a00 	vstr	s15, [r3]
		  setvelocity = qdi_1 + setacc*(time-initime-t_half);
 8003a46:	4b52      	ldr	r3, [pc, #328]	; (8003b90 <TrajectoryGenerator+0x5a0>)
 8003a48:	ed93 7a00 	vldr	s14, [r3]
 8003a4c:	4b4f      	ldr	r3, [pc, #316]	; (8003b8c <TrajectoryGenerator+0x59c>)
 8003a4e:	edd3 7a00 	vldr	s15, [r3]
 8003a52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a56:	4b4c      	ldr	r3, [pc, #304]	; (8003b88 <TrajectoryGenerator+0x598>)
 8003a58:	edd3 7a00 	vldr	s15, [r3]
 8003a5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a60:	4b4d      	ldr	r3, [pc, #308]	; (8003b98 <TrajectoryGenerator+0x5a8>)
 8003a62:	edd3 7a00 	vldr	s15, [r3]
 8003a66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a6a:	4b52      	ldr	r3, [pc, #328]	; (8003bb4 <TrajectoryGenerator+0x5c4>)
 8003a6c:	edd3 7a00 	vldr	s15, [r3]
 8003a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a74:	4b4a      	ldr	r3, [pc, #296]	; (8003ba0 <TrajectoryGenerator+0x5b0>)
 8003a76:	edc3 7a00 	vstr	s15, [r3]
		  setposition = qi_1 + qdi_1*(time-initime-t_half)+0.5*setacc*(time-initime-t_half)*(time-initime-t_half);
 8003a7a:	4b45      	ldr	r3, [pc, #276]	; (8003b90 <TrajectoryGenerator+0x5a0>)
 8003a7c:	ed93 7a00 	vldr	s14, [r3]
 8003a80:	4b42      	ldr	r3, [pc, #264]	; (8003b8c <TrajectoryGenerator+0x59c>)
 8003a82:	edd3 7a00 	vldr	s15, [r3]
 8003a86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a8a:	4b3f      	ldr	r3, [pc, #252]	; (8003b88 <TrajectoryGenerator+0x598>)
 8003a8c:	edd3 7a00 	vldr	s15, [r3]
 8003a90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a94:	4b47      	ldr	r3, [pc, #284]	; (8003bb4 <TrajectoryGenerator+0x5c4>)
 8003a96:	edd3 7a00 	vldr	s15, [r3]
 8003a9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a9e:	4b44      	ldr	r3, [pc, #272]	; (8003bb0 <TrajectoryGenerator+0x5c0>)
 8003aa0:	edd3 7a00 	vldr	s15, [r3]
 8003aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aa8:	ee17 0a90 	vmov	r0, s15
 8003aac:	f7fc fcf8 	bl	80004a0 <__aeabi_f2d>
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	460d      	mov	r5, r1
 8003ab4:	4b38      	ldr	r3, [pc, #224]	; (8003b98 <TrajectoryGenerator+0x5a8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fc fcf1 	bl	80004a0 <__aeabi_f2d>
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <TrajectoryGenerator+0x5b8>)
 8003ac4:	f7fc fd44 	bl	8000550 <__aeabi_dmul>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4690      	mov	r8, r2
 8003ace:	4699      	mov	r9, r3
 8003ad0:	4b2f      	ldr	r3, [pc, #188]	; (8003b90 <TrajectoryGenerator+0x5a0>)
 8003ad2:	ed93 7a00 	vldr	s14, [r3]
 8003ad6:	4b2d      	ldr	r3, [pc, #180]	; (8003b8c <TrajectoryGenerator+0x59c>)
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
 8003adc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ae0:	4b29      	ldr	r3, [pc, #164]	; (8003b88 <TrajectoryGenerator+0x598>)
 8003ae2:	edd3 7a00 	vldr	s15, [r3]
 8003ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aea:	ee17 0a90 	vmov	r0, s15
 8003aee:	f7fc fcd7 	bl	80004a0 <__aeabi_f2d>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4640      	mov	r0, r8
 8003af8:	4649      	mov	r1, r9
 8003afa:	f7fc fd29 	bl	8000550 <__aeabi_dmul>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4690      	mov	r8, r2
 8003b04:	4699      	mov	r9, r3
 8003b06:	4b22      	ldr	r3, [pc, #136]	; (8003b90 <TrajectoryGenerator+0x5a0>)
 8003b08:	ed93 7a00 	vldr	s14, [r3]
 8003b0c:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <TrajectoryGenerator+0x59c>)
 8003b0e:	edd3 7a00 	vldr	s15, [r3]
 8003b12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b16:	4b1c      	ldr	r3, [pc, #112]	; (8003b88 <TrajectoryGenerator+0x598>)
 8003b18:	edd3 7a00 	vldr	s15, [r3]
 8003b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b20:	ee17 0a90 	vmov	r0, s15
 8003b24:	f7fc fcbc 	bl	80004a0 <__aeabi_f2d>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4640      	mov	r0, r8
 8003b2e:	4649      	mov	r1, r9
 8003b30:	f7fc fd0e 	bl	8000550 <__aeabi_dmul>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4620      	mov	r0, r4
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	f7fc fb52 	bl	80001e4 <__adddf3>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	f7fc fffa 	bl	8000b40 <__aeabi_d2f>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	4a17      	ldr	r2, [pc, #92]	; (8003bac <TrajectoryGenerator+0x5bc>)
 8003b50:	6013      	str	r3, [r2, #0]
		  time += 0.001;
 8003b52:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <TrajectoryGenerator+0x5a0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fc fca2 	bl	80004a0 <__aeabi_f2d>
 8003b5c:	a308      	add	r3, pc, #32	; (adr r3, 8003b80 <TrajectoryGenerator+0x590>)
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	f7fc fb3f 	bl	80001e4 <__adddf3>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	f7fc ffe7 	bl	8000b40 <__aeabi_d2f>
 8003b72:	4603      	mov	r3, r0
 8003b74:	4a06      	ldr	r2, [pc, #24]	; (8003b90 <TrajectoryGenerator+0x5a0>)
 8003b76:	6013      	str	r3, [r2, #0]
	break;
 8003b78:	e232      	b.n	8003fe0 <TrajectoryGenerator+0x9f0>
 8003b7a:	bf00      	nop
 8003b7c:	f3af 8000 	nop.w
 8003b80:	d2f1a9fc 	.word	0xd2f1a9fc
 8003b84:	3f50624d 	.word	0x3f50624d
 8003b88:	20000754 	.word	0x20000754
 8003b8c:	20000750 	.word	0x20000750
 8003b90:	20000740 	.word	0x20000740
 8003b94:	20000210 	.word	0x20000210
 8003b98:	200007ac 	.word	0x200007ac
 8003b9c:	2000074c 	.word	0x2000074c
 8003ba0:	200007a8 	.word	0x200007a8
 8003ba4:	20000748 	.word	0x20000748
 8003ba8:	3fe00000 	.word	0x3fe00000
 8003bac:	20000788 	.word	0x20000788
 8003bb0:	20000760 	.word	0x20000760
 8003bb4:	20000758 	.word	0x20000758
	 if(time <= tacc + initime)
 8003bb8:	4b9d      	ldr	r3, [pc, #628]	; (8003e30 <TrajectoryGenerator+0x840>)
 8003bba:	ed93 7a00 	vldr	s14, [r3]
 8003bbe:	4b9d      	ldr	r3, [pc, #628]	; (8003e34 <TrajectoryGenerator+0x844>)
 8003bc0:	edd3 7a00 	vldr	s15, [r3]
 8003bc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bc8:	4b9b      	ldr	r3, [pc, #620]	; (8003e38 <TrajectoryGenerator+0x848>)
 8003bca:	edd3 7a00 	vldr	s15, [r3]
 8003bce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd6:	f2c0 8092 	blt.w	8003cfe <TrajectoryGenerator+0x70e>
		 setacc = qdd_max;
 8003bda:	4b98      	ldr	r3, [pc, #608]	; (8003e3c <TrajectoryGenerator+0x84c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a98      	ldr	r2, [pc, #608]	; (8003e40 <TrajectoryGenerator+0x850>)
 8003be0:	6013      	str	r3, [r2, #0]
		 setvelocity = qdi + setacc*(time-initime);
 8003be2:	4b95      	ldr	r3, [pc, #596]	; (8003e38 <TrajectoryGenerator+0x848>)
 8003be4:	ed93 7a00 	vldr	s14, [r3]
 8003be8:	4b92      	ldr	r3, [pc, #584]	; (8003e34 <TrajectoryGenerator+0x844>)
 8003bea:	edd3 7a00 	vldr	s15, [r3]
 8003bee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003bf2:	4b93      	ldr	r3, [pc, #588]	; (8003e40 <TrajectoryGenerator+0x850>)
 8003bf4:	edd3 7a00 	vldr	s15, [r3]
 8003bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bfc:	4b91      	ldr	r3, [pc, #580]	; (8003e44 <TrajectoryGenerator+0x854>)
 8003bfe:	edd3 7a00 	vldr	s15, [r3]
 8003c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c06:	4b90      	ldr	r3, [pc, #576]	; (8003e48 <TrajectoryGenerator+0x858>)
 8003c08:	edc3 7a00 	vstr	s15, [r3]
		 setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 8003c0c:	4b8a      	ldr	r3, [pc, #552]	; (8003e38 <TrajectoryGenerator+0x848>)
 8003c0e:	ed93 7a00 	vldr	s14, [r3]
 8003c12:	4b88      	ldr	r3, [pc, #544]	; (8003e34 <TrajectoryGenerator+0x844>)
 8003c14:	edd3 7a00 	vldr	s15, [r3]
 8003c18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c1c:	4b89      	ldr	r3, [pc, #548]	; (8003e44 <TrajectoryGenerator+0x854>)
 8003c1e:	edd3 7a00 	vldr	s15, [r3]
 8003c22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c26:	4b89      	ldr	r3, [pc, #548]	; (8003e4c <TrajectoryGenerator+0x85c>)
 8003c28:	edd3 7a00 	vldr	s15, [r3]
 8003c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c30:	ee17 0a90 	vmov	r0, s15
 8003c34:	f7fc fc34 	bl	80004a0 <__aeabi_f2d>
 8003c38:	4604      	mov	r4, r0
 8003c3a:	460d      	mov	r5, r1
 8003c3c:	4b80      	ldr	r3, [pc, #512]	; (8003e40 <TrajectoryGenerator+0x850>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fc fc2d 	bl	80004a0 <__aeabi_f2d>
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	4b81      	ldr	r3, [pc, #516]	; (8003e50 <TrajectoryGenerator+0x860>)
 8003c4c:	f7fc fc80 	bl	8000550 <__aeabi_dmul>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4690      	mov	r8, r2
 8003c56:	4699      	mov	r9, r3
 8003c58:	4b77      	ldr	r3, [pc, #476]	; (8003e38 <TrajectoryGenerator+0x848>)
 8003c5a:	ed93 7a00 	vldr	s14, [r3]
 8003c5e:	4b75      	ldr	r3, [pc, #468]	; (8003e34 <TrajectoryGenerator+0x844>)
 8003c60:	edd3 7a00 	vldr	s15, [r3]
 8003c64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c68:	ee17 0a90 	vmov	r0, s15
 8003c6c:	f7fc fc18 	bl	80004a0 <__aeabi_f2d>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4640      	mov	r0, r8
 8003c76:	4649      	mov	r1, r9
 8003c78:	f7fc fc6a 	bl	8000550 <__aeabi_dmul>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4690      	mov	r8, r2
 8003c82:	4699      	mov	r9, r3
 8003c84:	4b6c      	ldr	r3, [pc, #432]	; (8003e38 <TrajectoryGenerator+0x848>)
 8003c86:	ed93 7a00 	vldr	s14, [r3]
 8003c8a:	4b6a      	ldr	r3, [pc, #424]	; (8003e34 <TrajectoryGenerator+0x844>)
 8003c8c:	edd3 7a00 	vldr	s15, [r3]
 8003c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c94:	ee17 0a90 	vmov	r0, s15
 8003c98:	f7fc fc02 	bl	80004a0 <__aeabi_f2d>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4640      	mov	r0, r8
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	f7fc fc54 	bl	8000550 <__aeabi_dmul>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4620      	mov	r0, r4
 8003cae:	4629      	mov	r1, r5
 8003cb0:	f7fc fa98 	bl	80001e4 <__adddf3>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4610      	mov	r0, r2
 8003cba:	4619      	mov	r1, r3
 8003cbc:	f7fc ff40 	bl	8000b40 <__aeabi_d2f>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	4a64      	ldr	r2, [pc, #400]	; (8003e54 <TrajectoryGenerator+0x864>)
 8003cc4:	6013      	str	r3, [r2, #0]
		 qi_1 = setposition;
 8003cc6:	4b63      	ldr	r3, [pc, #396]	; (8003e54 <TrajectoryGenerator+0x864>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a63      	ldr	r2, [pc, #396]	; (8003e58 <TrajectoryGenerator+0x868>)
 8003ccc:	6013      	str	r3, [r2, #0]
		 qdi_1 = setvelocity;
 8003cce:	4b5e      	ldr	r3, [pc, #376]	; (8003e48 <TrajectoryGenerator+0x858>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a62      	ldr	r2, [pc, #392]	; (8003e5c <TrajectoryGenerator+0x86c>)
 8003cd4:	6013      	str	r3, [r2, #0]
		 time += 0.001;
 8003cd6:	4b58      	ldr	r3, [pc, #352]	; (8003e38 <TrajectoryGenerator+0x848>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fc fbe0 	bl	80004a0 <__aeabi_f2d>
 8003ce0:	a351      	add	r3, pc, #324	; (adr r3, 8003e28 <TrajectoryGenerator+0x838>)
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce6:	f7fc fa7d 	bl	80001e4 <__adddf3>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4610      	mov	r0, r2
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	f7fc ff25 	bl	8000b40 <__aeabi_d2f>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	4a4f      	ldr	r2, [pc, #316]	; (8003e38 <TrajectoryGenerator+0x848>)
 8003cfa:	6013      	str	r3, [r2, #0]
	 break;
 8003cfc:	e16f      	b.n	8003fde <TrajectoryGenerator+0x9ee>
	 else if(tacc+initime < time && time <= initime+tacc+tconst)
 8003cfe:	4b4c      	ldr	r3, [pc, #304]	; (8003e30 <TrajectoryGenerator+0x840>)
 8003d00:	ed93 7a00 	vldr	s14, [r3]
 8003d04:	4b4b      	ldr	r3, [pc, #300]	; (8003e34 <TrajectoryGenerator+0x844>)
 8003d06:	edd3 7a00 	vldr	s15, [r3]
 8003d0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d0e:	4b4a      	ldr	r3, [pc, #296]	; (8003e38 <TrajectoryGenerator+0x848>)
 8003d10:	edd3 7a00 	vldr	s15, [r3]
 8003d14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1c:	d552      	bpl.n	8003dc4 <TrajectoryGenerator+0x7d4>
 8003d1e:	4b45      	ldr	r3, [pc, #276]	; (8003e34 <TrajectoryGenerator+0x844>)
 8003d20:	ed93 7a00 	vldr	s14, [r3]
 8003d24:	4b42      	ldr	r3, [pc, #264]	; (8003e30 <TrajectoryGenerator+0x840>)
 8003d26:	edd3 7a00 	vldr	s15, [r3]
 8003d2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d2e:	4b4c      	ldr	r3, [pc, #304]	; (8003e60 <TrajectoryGenerator+0x870>)
 8003d30:	edd3 7a00 	vldr	s15, [r3]
 8003d34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d38:	4b3f      	ldr	r3, [pc, #252]	; (8003e38 <TrajectoryGenerator+0x848>)
 8003d3a:	edd3 7a00 	vldr	s15, [r3]
 8003d3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d46:	db3d      	blt.n	8003dc4 <TrajectoryGenerator+0x7d4>
		 setacc = 0;
 8003d48:	4b3d      	ldr	r3, [pc, #244]	; (8003e40 <TrajectoryGenerator+0x850>)
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
		 setvelocity = qd_max;
 8003d50:	4b44      	ldr	r3, [pc, #272]	; (8003e64 <TrajectoryGenerator+0x874>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a3c      	ldr	r2, [pc, #240]	; (8003e48 <TrajectoryGenerator+0x858>)
 8003d56:	6013      	str	r3, [r2, #0]
		 setposition = qi_1 + qd_max*(time-initime-tacc);
 8003d58:	4b37      	ldr	r3, [pc, #220]	; (8003e38 <TrajectoryGenerator+0x848>)
 8003d5a:	ed93 7a00 	vldr	s14, [r3]
 8003d5e:	4b35      	ldr	r3, [pc, #212]	; (8003e34 <TrajectoryGenerator+0x844>)
 8003d60:	edd3 7a00 	vldr	s15, [r3]
 8003d64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d68:	4b31      	ldr	r3, [pc, #196]	; (8003e30 <TrajectoryGenerator+0x840>)
 8003d6a:	edd3 7a00 	vldr	s15, [r3]
 8003d6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d72:	4b3c      	ldr	r3, [pc, #240]	; (8003e64 <TrajectoryGenerator+0x874>)
 8003d74:	edd3 7a00 	vldr	s15, [r3]
 8003d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d7c:	4b36      	ldr	r3, [pc, #216]	; (8003e58 <TrajectoryGenerator+0x868>)
 8003d7e:	edd3 7a00 	vldr	s15, [r3]
 8003d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d86:	4b33      	ldr	r3, [pc, #204]	; (8003e54 <TrajectoryGenerator+0x864>)
 8003d88:	edc3 7a00 	vstr	s15, [r3]
		 qi_2 = setposition;
 8003d8c:	4b31      	ldr	r3, [pc, #196]	; (8003e54 <TrajectoryGenerator+0x864>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a35      	ldr	r2, [pc, #212]	; (8003e68 <TrajectoryGenerator+0x878>)
 8003d92:	6013      	str	r3, [r2, #0]
		 qdi_2 = setvelocity;
 8003d94:	4b2c      	ldr	r3, [pc, #176]	; (8003e48 <TrajectoryGenerator+0x858>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a34      	ldr	r2, [pc, #208]	; (8003e6c <TrajectoryGenerator+0x87c>)
 8003d9a:	6013      	str	r3, [r2, #0]
		 time += 0.001;
 8003d9c:	4b26      	ldr	r3, [pc, #152]	; (8003e38 <TrajectoryGenerator+0x848>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fc fb7d 	bl	80004a0 <__aeabi_f2d>
 8003da6:	a320      	add	r3, pc, #128	; (adr r3, 8003e28 <TrajectoryGenerator+0x838>)
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f7fc fa1a 	bl	80001e4 <__adddf3>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4610      	mov	r0, r2
 8003db6:	4619      	mov	r1, r3
 8003db8:	f7fc fec2 	bl	8000b40 <__aeabi_d2f>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	4a1e      	ldr	r2, [pc, #120]	; (8003e38 <TrajectoryGenerator+0x848>)
 8003dc0:	6013      	str	r3, [r2, #0]
	 break;
 8003dc2:	e10c      	b.n	8003fde <TrajectoryGenerator+0x9ee>
	 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8003dc4:	4b1a      	ldr	r3, [pc, #104]	; (8003e30 <TrajectoryGenerator+0x840>)
 8003dc6:	ed93 7a00 	vldr	s14, [r3]
 8003dca:	4b25      	ldr	r3, [pc, #148]	; (8003e60 <TrajectoryGenerator+0x870>)
 8003dcc:	edd3 7a00 	vldr	s15, [r3]
 8003dd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dd4:	4b17      	ldr	r3, [pc, #92]	; (8003e34 <TrajectoryGenerator+0x844>)
 8003dd6:	edd3 7a00 	vldr	s15, [r3]
 8003dda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dde:	4b16      	ldr	r3, [pc, #88]	; (8003e38 <TrajectoryGenerator+0x848>)
 8003de0:	edd3 7a00 	vldr	s15, [r3]
 8003de4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dec:	d400      	bmi.n	8003df0 <TrajectoryGenerator+0x800>
	 break;
 8003dee:	e0f6      	b.n	8003fde <TrajectoryGenerator+0x9ee>
	 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8003df0:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <TrajectoryGenerator+0x840>)
 8003df2:	ed93 7a00 	vldr	s14, [r3]
 8003df6:	4b1a      	ldr	r3, [pc, #104]	; (8003e60 <TrajectoryGenerator+0x870>)
 8003df8:	edd3 7a00 	vldr	s15, [r3]
 8003dfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e00:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <TrajectoryGenerator+0x880>)
 8003e02:	edd3 7a00 	vldr	s15, [r3]
 8003e06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <TrajectoryGenerator+0x844>)
 8003e0c:	edd3 7a00 	vldr	s15, [r3]
 8003e10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e14:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <TrajectoryGenerator+0x848>)
 8003e16:	edd3 7a00 	vldr	s15, [r3]
 8003e1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e22:	da27      	bge.n	8003e74 <TrajectoryGenerator+0x884>
	 break;
 8003e24:	e0db      	b.n	8003fde <TrajectoryGenerator+0x9ee>
 8003e26:	bf00      	nop
 8003e28:	d2f1a9fc 	.word	0xd2f1a9fc
 8003e2c:	3f50624d 	.word	0x3f50624d
 8003e30:	20000768 	.word	0x20000768
 8003e34:	20000750 	.word	0x20000750
 8003e38:	20000740 	.word	0x20000740
 8003e3c:	20000210 	.word	0x20000210
 8003e40:	200007ac 	.word	0x200007ac
 8003e44:	2000074c 	.word	0x2000074c
 8003e48:	200007a8 	.word	0x200007a8
 8003e4c:	20000748 	.word	0x20000748
 8003e50:	3fe00000 	.word	0x3fe00000
 8003e54:	20000788 	.word	0x20000788
 8003e58:	20000760 	.word	0x20000760
 8003e5c:	20000758 	.word	0x20000758
 8003e60:	20000774 	.word	0x20000774
 8003e64:	2000020c 	.word	0x2000020c
 8003e68:	20000764 	.word	0x20000764
 8003e6c:	2000075c 	.word	0x2000075c
 8003e70:	20000778 	.word	0x20000778
		 setacc = -qdd_max;
 8003e74:	4b5e      	ldr	r3, [pc, #376]	; (8003ff0 <TrajectoryGenerator+0xa00>)
 8003e76:	edd3 7a00 	vldr	s15, [r3]
 8003e7a:	eef1 7a67 	vneg.f32	s15, s15
 8003e7e:	4b5d      	ldr	r3, [pc, #372]	; (8003ff4 <TrajectoryGenerator+0xa04>)
 8003e80:	edc3 7a00 	vstr	s15, [r3]
		 setvelocity = qdi_2 + setacc*(time-initime-tacc-tconst);
 8003e84:	4b5c      	ldr	r3, [pc, #368]	; (8003ff8 <TrajectoryGenerator+0xa08>)
 8003e86:	ed93 7a00 	vldr	s14, [r3]
 8003e8a:	4b5c      	ldr	r3, [pc, #368]	; (8003ffc <TrajectoryGenerator+0xa0c>)
 8003e8c:	edd3 7a00 	vldr	s15, [r3]
 8003e90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e94:	4b5a      	ldr	r3, [pc, #360]	; (8004000 <TrajectoryGenerator+0xa10>)
 8003e96:	edd3 7a00 	vldr	s15, [r3]
 8003e9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e9e:	4b59      	ldr	r3, [pc, #356]	; (8004004 <TrajectoryGenerator+0xa14>)
 8003ea0:	edd3 7a00 	vldr	s15, [r3]
 8003ea4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ea8:	4b52      	ldr	r3, [pc, #328]	; (8003ff4 <TrajectoryGenerator+0xa04>)
 8003eaa:	edd3 7a00 	vldr	s15, [r3]
 8003eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eb2:	4b55      	ldr	r3, [pc, #340]	; (8004008 <TrajectoryGenerator+0xa18>)
 8003eb4:	edd3 7a00 	vldr	s15, [r3]
 8003eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ebc:	4b53      	ldr	r3, [pc, #332]	; (800400c <TrajectoryGenerator+0xa1c>)
 8003ebe:	edc3 7a00 	vstr	s15, [r3]
		 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
 8003ec2:	4b4d      	ldr	r3, [pc, #308]	; (8003ff8 <TrajectoryGenerator+0xa08>)
 8003ec4:	ed93 7a00 	vldr	s14, [r3]
 8003ec8:	4b4c      	ldr	r3, [pc, #304]	; (8003ffc <TrajectoryGenerator+0xa0c>)
 8003eca:	edd3 7a00 	vldr	s15, [r3]
 8003ece:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ed2:	4b4b      	ldr	r3, [pc, #300]	; (8004000 <TrajectoryGenerator+0xa10>)
 8003ed4:	edd3 7a00 	vldr	s15, [r3]
 8003ed8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003edc:	4b49      	ldr	r3, [pc, #292]	; (8004004 <TrajectoryGenerator+0xa14>)
 8003ede:	edd3 7a00 	vldr	s15, [r3]
 8003ee2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ee6:	4b48      	ldr	r3, [pc, #288]	; (8004008 <TrajectoryGenerator+0xa18>)
 8003ee8:	edd3 7a00 	vldr	s15, [r3]
 8003eec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ef0:	4b47      	ldr	r3, [pc, #284]	; (8004010 <TrajectoryGenerator+0xa20>)
 8003ef2:	edd3 7a00 	vldr	s15, [r3]
 8003ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003efa:	ee17 0a90 	vmov	r0, s15
 8003efe:	f7fc facf 	bl	80004a0 <__aeabi_f2d>
 8003f02:	4604      	mov	r4, r0
 8003f04:	460d      	mov	r5, r1
 8003f06:	4b3b      	ldr	r3, [pc, #236]	; (8003ff4 <TrajectoryGenerator+0xa04>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fc fac8 	bl	80004a0 <__aeabi_f2d>
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	4b3f      	ldr	r3, [pc, #252]	; (8004014 <TrajectoryGenerator+0xa24>)
 8003f16:	f7fc fb1b 	bl	8000550 <__aeabi_dmul>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4690      	mov	r8, r2
 8003f20:	4699      	mov	r9, r3
 8003f22:	4b35      	ldr	r3, [pc, #212]	; (8003ff8 <TrajectoryGenerator+0xa08>)
 8003f24:	ed93 7a00 	vldr	s14, [r3]
 8003f28:	4b34      	ldr	r3, [pc, #208]	; (8003ffc <TrajectoryGenerator+0xa0c>)
 8003f2a:	edd3 7a00 	vldr	s15, [r3]
 8003f2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f32:	4b33      	ldr	r3, [pc, #204]	; (8004000 <TrajectoryGenerator+0xa10>)
 8003f34:	edd3 7a00 	vldr	s15, [r3]
 8003f38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f3c:	4b31      	ldr	r3, [pc, #196]	; (8004004 <TrajectoryGenerator+0xa14>)
 8003f3e:	edd3 7a00 	vldr	s15, [r3]
 8003f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f46:	ee17 0a90 	vmov	r0, s15
 8003f4a:	f7fc faa9 	bl	80004a0 <__aeabi_f2d>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4640      	mov	r0, r8
 8003f54:	4649      	mov	r1, r9
 8003f56:	f7fc fafb 	bl	8000550 <__aeabi_dmul>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4690      	mov	r8, r2
 8003f60:	4699      	mov	r9, r3
 8003f62:	4b25      	ldr	r3, [pc, #148]	; (8003ff8 <TrajectoryGenerator+0xa08>)
 8003f64:	ed93 7a00 	vldr	s14, [r3]
 8003f68:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <TrajectoryGenerator+0xa0c>)
 8003f6a:	edd3 7a00 	vldr	s15, [r3]
 8003f6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f72:	4b23      	ldr	r3, [pc, #140]	; (8004000 <TrajectoryGenerator+0xa10>)
 8003f74:	edd3 7a00 	vldr	s15, [r3]
 8003f78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f7c:	4b21      	ldr	r3, [pc, #132]	; (8004004 <TrajectoryGenerator+0xa14>)
 8003f7e:	edd3 7a00 	vldr	s15, [r3]
 8003f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f86:	ee17 0a90 	vmov	r0, s15
 8003f8a:	f7fc fa89 	bl	80004a0 <__aeabi_f2d>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4640      	mov	r0, r8
 8003f94:	4649      	mov	r1, r9
 8003f96:	f7fc fadb 	bl	8000550 <__aeabi_dmul>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	4629      	mov	r1, r5
 8003fa2:	f7fc f91f 	bl	80001e4 <__adddf3>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4610      	mov	r0, r2
 8003fac:	4619      	mov	r1, r3
 8003fae:	f7fc fdc7 	bl	8000b40 <__aeabi_d2f>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4a18      	ldr	r2, [pc, #96]	; (8004018 <TrajectoryGenerator+0xa28>)
 8003fb6:	6013      	str	r3, [r2, #0]
		 time += 0.001;
 8003fb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <TrajectoryGenerator+0xa08>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fc fa6f 	bl	80004a0 <__aeabi_f2d>
 8003fc2:	a309      	add	r3, pc, #36	; (adr r3, 8003fe8 <TrajectoryGenerator+0x9f8>)
 8003fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc8:	f7fc f90c 	bl	80001e4 <__adddf3>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	f7fc fdb4 	bl	8000b40 <__aeabi_d2f>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	4a07      	ldr	r2, [pc, #28]	; (8003ff8 <TrajectoryGenerator+0xa08>)
 8003fdc:	6013      	str	r3, [r2, #0]
	 break;
 8003fde:	bf00      	nop
}
 8003fe0:	bf00      	nop
 8003fe2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003fe6:	bf00      	nop
 8003fe8:	d2f1a9fc 	.word	0xd2f1a9fc
 8003fec:	3f50624d 	.word	0x3f50624d
 8003ff0:	20000210 	.word	0x20000210
 8003ff4:	200007ac 	.word	0x200007ac
 8003ff8:	20000740 	.word	0x20000740
 8003ffc:	20000750 	.word	0x20000750
 8004000:	20000768 	.word	0x20000768
 8004004:	20000774 	.word	0x20000774
 8004008:	2000075c 	.word	0x2000075c
 800400c:	200007a8 	.word	0x200007a8
 8004010:	20000764 	.word	0x20000764
 8004014:	3fe00000 	.word	0x3fe00000
 8004018:	20000788 	.word	0x20000788

0800401c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004020:	b672      	cpsid	i
}
 8004022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004024:	e7fe      	b.n	8004024 <Error_Handler+0x8>
	...

08004028 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	607b      	str	r3, [r7, #4]
 8004032:	4b10      	ldr	r3, [pc, #64]	; (8004074 <HAL_MspInit+0x4c>)
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	4a0f      	ldr	r2, [pc, #60]	; (8004074 <HAL_MspInit+0x4c>)
 8004038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800403c:	6453      	str	r3, [r2, #68]	; 0x44
 800403e:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <HAL_MspInit+0x4c>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004046:	607b      	str	r3, [r7, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800404a:	2300      	movs	r3, #0
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	4b09      	ldr	r3, [pc, #36]	; (8004074 <HAL_MspInit+0x4c>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	4a08      	ldr	r2, [pc, #32]	; (8004074 <HAL_MspInit+0x4c>)
 8004054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004058:	6413      	str	r3, [r2, #64]	; 0x40
 800405a:	4b06      	ldr	r3, [pc, #24]	; (8004074 <HAL_MspInit+0x4c>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004066:	2007      	movs	r0, #7
 8004068:	f001 f88c 	bl	8005184 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800406c:	bf00      	nop
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40023800 	.word	0x40023800

08004078 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08a      	sub	sp, #40	; 0x28
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004080:	f107 0314 	add.w	r3, r7, #20
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	60da      	str	r2, [r3, #12]
 800408e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a2f      	ldr	r2, [pc, #188]	; (8004154 <HAL_ADC_MspInit+0xdc>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d157      	bne.n	800414a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	4b2e      	ldr	r3, [pc, #184]	; (8004158 <HAL_ADC_MspInit+0xe0>)
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a2:	4a2d      	ldr	r2, [pc, #180]	; (8004158 <HAL_ADC_MspInit+0xe0>)
 80040a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a8:	6453      	str	r3, [r2, #68]	; 0x44
 80040aa:	4b2b      	ldr	r3, [pc, #172]	; (8004158 <HAL_ADC_MspInit+0xe0>)
 80040ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	4b27      	ldr	r3, [pc, #156]	; (8004158 <HAL_ADC_MspInit+0xe0>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	4a26      	ldr	r2, [pc, #152]	; (8004158 <HAL_ADC_MspInit+0xe0>)
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	6313      	str	r3, [r2, #48]	; 0x30
 80040c6:	4b24      	ldr	r3, [pc, #144]	; (8004158 <HAL_ADC_MspInit+0xe0>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80040d2:	2303      	movs	r3, #3
 80040d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040d6:	2303      	movs	r3, #3
 80040d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040de:	f107 0314 	add.w	r3, r7, #20
 80040e2:	4619      	mov	r1, r3
 80040e4:	481d      	ldr	r0, [pc, #116]	; (800415c <HAL_ADC_MspInit+0xe4>)
 80040e6:	f001 fcab 	bl	8005a40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80040ea:	4b1d      	ldr	r3, [pc, #116]	; (8004160 <HAL_ADC_MspInit+0xe8>)
 80040ec:	4a1d      	ldr	r2, [pc, #116]	; (8004164 <HAL_ADC_MspInit+0xec>)
 80040ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80040f0:	4b1b      	ldr	r3, [pc, #108]	; (8004160 <HAL_ADC_MspInit+0xe8>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040f6:	4b1a      	ldr	r3, [pc, #104]	; (8004160 <HAL_ADC_MspInit+0xe8>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80040fc:	4b18      	ldr	r3, [pc, #96]	; (8004160 <HAL_ADC_MspInit+0xe8>)
 80040fe:	2200      	movs	r2, #0
 8004100:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004102:	4b17      	ldr	r3, [pc, #92]	; (8004160 <HAL_ADC_MspInit+0xe8>)
 8004104:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004108:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800410a:	4b15      	ldr	r3, [pc, #84]	; (8004160 <HAL_ADC_MspInit+0xe8>)
 800410c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004110:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004112:	4b13      	ldr	r3, [pc, #76]	; (8004160 <HAL_ADC_MspInit+0xe8>)
 8004114:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004118:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800411a:	4b11      	ldr	r3, [pc, #68]	; (8004160 <HAL_ADC_MspInit+0xe8>)
 800411c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004120:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004122:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <HAL_ADC_MspInit+0xe8>)
 8004124:	2200      	movs	r2, #0
 8004126:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004128:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <HAL_ADC_MspInit+0xe8>)
 800412a:	2200      	movs	r2, #0
 800412c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800412e:	480c      	ldr	r0, [pc, #48]	; (8004160 <HAL_ADC_MspInit+0xe8>)
 8004130:	f001 f86a 	bl	8005208 <HAL_DMA_Init>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800413a:	f7ff ff6f 	bl	800401c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a07      	ldr	r2, [pc, #28]	; (8004160 <HAL_ADC_MspInit+0xe8>)
 8004142:	639a      	str	r2, [r3, #56]	; 0x38
 8004144:	4a06      	ldr	r2, [pc, #24]	; (8004160 <HAL_ADC_MspInit+0xe8>)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800414a:	bf00      	nop
 800414c:	3728      	adds	r7, #40	; 0x28
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40012000 	.word	0x40012000
 8004158:	40023800 	.word	0x40023800
 800415c:	40020000 	.word	0x40020000
 8004160:	20000318 	.word	0x20000318
 8004164:	40026410 	.word	0x40026410

08004168 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	; 0x28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004170:	f107 0314 	add.w	r3, r7, #20
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	605a      	str	r2, [r3, #4]
 800417a:	609a      	str	r2, [r3, #8]
 800417c:	60da      	str	r2, [r3, #12]
 800417e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a21      	ldr	r2, [pc, #132]	; (800420c <HAL_I2C_MspInit+0xa4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d13c      	bne.n	8004204 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	4b20      	ldr	r3, [pc, #128]	; (8004210 <HAL_I2C_MspInit+0xa8>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	4a1f      	ldr	r2, [pc, #124]	; (8004210 <HAL_I2C_MspInit+0xa8>)
 8004194:	f043 0302 	orr.w	r3, r3, #2
 8004198:	6313      	str	r3, [r2, #48]	; 0x30
 800419a:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <HAL_I2C_MspInit+0xa8>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80041a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041ac:	2312      	movs	r3, #18
 80041ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b4:	2303      	movs	r3, #3
 80041b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041b8:	2304      	movs	r3, #4
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041bc:	f107 0314 	add.w	r3, r7, #20
 80041c0:	4619      	mov	r1, r3
 80041c2:	4814      	ldr	r0, [pc, #80]	; (8004214 <HAL_I2C_MspInit+0xac>)
 80041c4:	f001 fc3c 	bl	8005a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	4b10      	ldr	r3, [pc, #64]	; (8004210 <HAL_I2C_MspInit+0xa8>)
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	4a0f      	ldr	r2, [pc, #60]	; (8004210 <HAL_I2C_MspInit+0xa8>)
 80041d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041d6:	6413      	str	r3, [r2, #64]	; 0x40
 80041d8:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <HAL_I2C_MspInit+0xa8>)
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80041e4:	2200      	movs	r2, #0
 80041e6:	2100      	movs	r1, #0
 80041e8:	201f      	movs	r0, #31
 80041ea:	f000 ffd6 	bl	800519a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80041ee:	201f      	movs	r0, #31
 80041f0:	f000 ffef 	bl	80051d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80041f4:	2200      	movs	r2, #0
 80041f6:	2100      	movs	r1, #0
 80041f8:	2020      	movs	r0, #32
 80041fa:	f000 ffce 	bl	800519a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80041fe:	2020      	movs	r0, #32
 8004200:	f000 ffe7 	bl	80051d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004204:	bf00      	nop
 8004206:	3728      	adds	r7, #40	; 0x28
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40005400 	.word	0x40005400
 8004210:	40023800 	.word	0x40023800
 8004214:	40020400 	.word	0x40020400

08004218 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a0e      	ldr	r2, [pc, #56]	; (8004260 <HAL_TIM_PWM_MspInit+0x48>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d115      	bne.n	8004256 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <HAL_TIM_PWM_MspInit+0x4c>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	4a0c      	ldr	r2, [pc, #48]	; (8004264 <HAL_TIM_PWM_MspInit+0x4c>)
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	6453      	str	r3, [r2, #68]	; 0x44
 800423a:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <HAL_TIM_PWM_MspInit+0x4c>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004246:	2200      	movs	r2, #0
 8004248:	2100      	movs	r1, #0
 800424a:	201a      	movs	r0, #26
 800424c:	f000 ffa5 	bl	800519a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004250:	201a      	movs	r0, #26
 8004252:	f000 ffbe 	bl	80051d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40010000 	.word	0x40010000
 8004264:	40023800 	.word	0x40023800

08004268 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08a      	sub	sp, #40	; 0x28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004270:	f107 0314 	add.w	r3, r7, #20
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	60da      	str	r2, [r3, #12]
 800427e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a19      	ldr	r2, [pc, #100]	; (80042ec <HAL_TIM_Encoder_MspInit+0x84>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d12b      	bne.n	80042e2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	4b18      	ldr	r3, [pc, #96]	; (80042f0 <HAL_TIM_Encoder_MspInit+0x88>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	4a17      	ldr	r2, [pc, #92]	; (80042f0 <HAL_TIM_Encoder_MspInit+0x88>)
 8004294:	f043 0302 	orr.w	r3, r3, #2
 8004298:	6413      	str	r3, [r2, #64]	; 0x40
 800429a:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <HAL_TIM_Encoder_MspInit+0x88>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <HAL_TIM_Encoder_MspInit+0x88>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	4a10      	ldr	r2, [pc, #64]	; (80042f0 <HAL_TIM_Encoder_MspInit+0x88>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	6313      	str	r3, [r2, #48]	; 0x30
 80042b6:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <HAL_TIM_Encoder_MspInit+0x88>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042c2:	23c0      	movs	r3, #192	; 0xc0
 80042c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c6:	2302      	movs	r3, #2
 80042c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ce:	2300      	movs	r3, #0
 80042d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042d2:	2302      	movs	r3, #2
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d6:	f107 0314 	add.w	r3, r7, #20
 80042da:	4619      	mov	r1, r3
 80042dc:	4805      	ldr	r0, [pc, #20]	; (80042f4 <HAL_TIM_Encoder_MspInit+0x8c>)
 80042de:	f001 fbaf 	bl	8005a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80042e2:	bf00      	nop
 80042e4:	3728      	adds	r7, #40	; 0x28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40023800 	.word	0x40023800
 80042f4:	40020000 	.word	0x40020000

080042f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a0e      	ldr	r2, [pc, #56]	; (8004340 <HAL_TIM_Base_MspInit+0x48>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d115      	bne.n	8004336 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	4b0d      	ldr	r3, [pc, #52]	; (8004344 <HAL_TIM_Base_MspInit+0x4c>)
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	4a0c      	ldr	r2, [pc, #48]	; (8004344 <HAL_TIM_Base_MspInit+0x4c>)
 8004314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004318:	6453      	str	r3, [r2, #68]	; 0x44
 800431a:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <HAL_TIM_Base_MspInit+0x4c>)
 800431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004326:	2200      	movs	r2, #0
 8004328:	2100      	movs	r1, #0
 800432a:	201a      	movs	r0, #26
 800432c:	f000 ff35 	bl	800519a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004330:	201a      	movs	r0, #26
 8004332:	f000 ff4e 	bl	80051d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40014800 	.word	0x40014800
 8004344:	40023800 	.word	0x40023800

08004348 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004350:	f107 030c 	add.w	r3, r7, #12
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <HAL_TIM_MspPostInit+0x68>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d11e      	bne.n	80043a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <HAL_TIM_MspPostInit+0x6c>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	4a10      	ldr	r2, [pc, #64]	; (80043b4 <HAL_TIM_MspPostInit+0x6c>)
 8004374:	f043 0301 	orr.w	r3, r3, #1
 8004378:	6313      	str	r3, [r2, #48]	; 0x30
 800437a:	4b0e      	ldr	r3, [pc, #56]	; (80043b4 <HAL_TIM_MspPostInit+0x6c>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	60bb      	str	r3, [r7, #8]
 8004384:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004386:	f44f 7340 	mov.w	r3, #768	; 0x300
 800438a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438c:	2302      	movs	r3, #2
 800438e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004394:	2300      	movs	r3, #0
 8004396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004398:	2301      	movs	r3, #1
 800439a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800439c:	f107 030c 	add.w	r3, r7, #12
 80043a0:	4619      	mov	r1, r3
 80043a2:	4805      	ldr	r0, [pc, #20]	; (80043b8 <HAL_TIM_MspPostInit+0x70>)
 80043a4:	f001 fb4c 	bl	8005a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80043a8:	bf00      	nop
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40023800 	.word	0x40023800
 80043b8:	40020000 	.word	0x40020000

080043bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08c      	sub	sp, #48	; 0x30
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c4:	f107 031c 	add.w	r3, r7, #28
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	605a      	str	r2, [r3, #4]
 80043ce:	609a      	str	r2, [r3, #8]
 80043d0:	60da      	str	r2, [r3, #12]
 80043d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a5c      	ldr	r2, [pc, #368]	; (800454c <HAL_UART_MspInit+0x190>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d14b      	bne.n	8004476 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043de:	2300      	movs	r3, #0
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	4b5b      	ldr	r3, [pc, #364]	; (8004550 <HAL_UART_MspInit+0x194>)
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	4a5a      	ldr	r2, [pc, #360]	; (8004550 <HAL_UART_MspInit+0x194>)
 80043e8:	f043 0310 	orr.w	r3, r3, #16
 80043ec:	6453      	str	r3, [r2, #68]	; 0x44
 80043ee:	4b58      	ldr	r3, [pc, #352]	; (8004550 <HAL_UART_MspInit+0x194>)
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	4b54      	ldr	r3, [pc, #336]	; (8004550 <HAL_UART_MspInit+0x194>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	4a53      	ldr	r2, [pc, #332]	; (8004550 <HAL_UART_MspInit+0x194>)
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	6313      	str	r3, [r2, #48]	; 0x30
 800440a:	4b51      	ldr	r3, [pc, #324]	; (8004550 <HAL_UART_MspInit+0x194>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	613b      	str	r3, [r7, #16]
 800441a:	4b4d      	ldr	r3, [pc, #308]	; (8004550 <HAL_UART_MspInit+0x194>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	4a4c      	ldr	r2, [pc, #304]	; (8004550 <HAL_UART_MspInit+0x194>)
 8004420:	f043 0302 	orr.w	r3, r3, #2
 8004424:	6313      	str	r3, [r2, #48]	; 0x30
 8004426:	4b4a      	ldr	r3, [pc, #296]	; (8004550 <HAL_UART_MspInit+0x194>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004438:	2302      	movs	r3, #2
 800443a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443c:	2300      	movs	r3, #0
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004440:	2303      	movs	r3, #3
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004444:	2307      	movs	r3, #7
 8004446:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004448:	f107 031c 	add.w	r3, r7, #28
 800444c:	4619      	mov	r1, r3
 800444e:	4841      	ldr	r0, [pc, #260]	; (8004554 <HAL_UART_MspInit+0x198>)
 8004450:	f001 faf6 	bl	8005a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004454:	2380      	movs	r3, #128	; 0x80
 8004456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004458:	2302      	movs	r3, #2
 800445a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445c:	2300      	movs	r3, #0
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004460:	2303      	movs	r3, #3
 8004462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004464:	2307      	movs	r3, #7
 8004466:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004468:	f107 031c 	add.w	r3, r7, #28
 800446c:	4619      	mov	r1, r3
 800446e:	483a      	ldr	r0, [pc, #232]	; (8004558 <HAL_UART_MspInit+0x19c>)
 8004470:	f001 fae6 	bl	8005a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004474:	e066      	b.n	8004544 <HAL_UART_MspInit+0x188>
  else if(huart->Instance==USART2)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a38      	ldr	r2, [pc, #224]	; (800455c <HAL_UART_MspInit+0x1a0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d161      	bne.n	8004544 <HAL_UART_MspInit+0x188>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	4b32      	ldr	r3, [pc, #200]	; (8004550 <HAL_UART_MspInit+0x194>)
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	4a31      	ldr	r2, [pc, #196]	; (8004550 <HAL_UART_MspInit+0x194>)
 800448a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800448e:	6413      	str	r3, [r2, #64]	; 0x40
 8004490:	4b2f      	ldr	r3, [pc, #188]	; (8004550 <HAL_UART_MspInit+0x194>)
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800449c:	2300      	movs	r3, #0
 800449e:	60bb      	str	r3, [r7, #8]
 80044a0:	4b2b      	ldr	r3, [pc, #172]	; (8004550 <HAL_UART_MspInit+0x194>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	4a2a      	ldr	r2, [pc, #168]	; (8004550 <HAL_UART_MspInit+0x194>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6313      	str	r3, [r2, #48]	; 0x30
 80044ac:	4b28      	ldr	r3, [pc, #160]	; (8004550 <HAL_UART_MspInit+0x194>)
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80044b8:	230c      	movs	r3, #12
 80044ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044bc:	2302      	movs	r3, #2
 80044be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c4:	2303      	movs	r3, #3
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80044c8:	2307      	movs	r3, #7
 80044ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044cc:	f107 031c 	add.w	r3, r7, #28
 80044d0:	4619      	mov	r1, r3
 80044d2:	4820      	ldr	r0, [pc, #128]	; (8004554 <HAL_UART_MspInit+0x198>)
 80044d4:	f001 fab4 	bl	8005a40 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80044d8:	4b21      	ldr	r3, [pc, #132]	; (8004560 <HAL_UART_MspInit+0x1a4>)
 80044da:	4a22      	ldr	r2, [pc, #136]	; (8004564 <HAL_UART_MspInit+0x1a8>)
 80044dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80044de:	4b20      	ldr	r3, [pc, #128]	; (8004560 <HAL_UART_MspInit+0x1a4>)
 80044e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044e6:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <HAL_UART_MspInit+0x1a4>)
 80044e8:	2240      	movs	r2, #64	; 0x40
 80044ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044ec:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <HAL_UART_MspInit+0x1a4>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044f2:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <HAL_UART_MspInit+0x1a4>)
 80044f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044fa:	4b19      	ldr	r3, [pc, #100]	; (8004560 <HAL_UART_MspInit+0x1a4>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004500:	4b17      	ldr	r3, [pc, #92]	; (8004560 <HAL_UART_MspInit+0x1a4>)
 8004502:	2200      	movs	r2, #0
 8004504:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004506:	4b16      	ldr	r3, [pc, #88]	; (8004560 <HAL_UART_MspInit+0x1a4>)
 8004508:	2200      	movs	r2, #0
 800450a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800450c:	4b14      	ldr	r3, [pc, #80]	; (8004560 <HAL_UART_MspInit+0x1a4>)
 800450e:	2200      	movs	r2, #0
 8004510:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004512:	4b13      	ldr	r3, [pc, #76]	; (8004560 <HAL_UART_MspInit+0x1a4>)
 8004514:	2200      	movs	r2, #0
 8004516:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004518:	4811      	ldr	r0, [pc, #68]	; (8004560 <HAL_UART_MspInit+0x1a4>)
 800451a:	f000 fe75 	bl	8005208 <HAL_DMA_Init>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <HAL_UART_MspInit+0x16c>
      Error_Handler();
 8004524:	f7ff fd7a 	bl	800401c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a0d      	ldr	r2, [pc, #52]	; (8004560 <HAL_UART_MspInit+0x1a4>)
 800452c:	635a      	str	r2, [r3, #52]	; 0x34
 800452e:	4a0c      	ldr	r2, [pc, #48]	; (8004560 <HAL_UART_MspInit+0x1a4>)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004534:	2200      	movs	r2, #0
 8004536:	2100      	movs	r1, #0
 8004538:	2026      	movs	r0, #38	; 0x26
 800453a:	f000 fe2e 	bl	800519a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800453e:	2026      	movs	r0, #38	; 0x26
 8004540:	f000 fe47 	bl	80051d2 <HAL_NVIC_EnableIRQ>
}
 8004544:	bf00      	nop
 8004546:	3730      	adds	r7, #48	; 0x30
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40011000 	.word	0x40011000
 8004550:	40023800 	.word	0x40023800
 8004554:	40020000 	.word	0x40020000
 8004558:	40020400 	.word	0x40020400
 800455c:	40004400 	.word	0x40004400
 8004560:	200006d0 	.word	0x200006d0
 8004564:	400260a0 	.word	0x400260a0

08004568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800456c:	e7fe      	b.n	800456c <NMI_Handler+0x4>

0800456e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800456e:	b480      	push	{r7}
 8004570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004572:	e7fe      	b.n	8004572 <HardFault_Handler+0x4>

08004574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004578:	e7fe      	b.n	8004578 <MemManage_Handler+0x4>

0800457a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800457a:	b480      	push	{r7}
 800457c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800457e:	e7fe      	b.n	800457e <BusFault_Handler+0x4>

08004580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004584:	e7fe      	b.n	8004584 <UsageFault_Handler+0x4>

08004586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004586:	b480      	push	{r7}
 8004588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800458a:	bf00      	nop
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004598:	bf00      	nop
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045a2:	b480      	push	{r7}
 80045a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045a6:	bf00      	nop
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045b4:	f000 f8d0 	bl	8004758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045b8:	bf00      	nop
 80045ba:	bd80      	pop	{r7, pc}

080045bc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80045c0:	4802      	ldr	r0, [pc, #8]	; (80045cc <DMA1_Stream6_IRQHandler+0x10>)
 80045c2:	f000 ffb9 	bl	8005538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80045c6:	bf00      	nop
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	200006d0 	.word	0x200006d0

080045d0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80045d4:	4803      	ldr	r0, [pc, #12]	; (80045e4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80045d6:	f005 f98b 	bl	80098f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80045da:	4803      	ldr	r0, [pc, #12]	; (80045e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80045dc:	f005 f988 	bl	80098f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80045e0:	bf00      	nop
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	200003cc 	.word	0x200003cc
 80045e8:	20000534 	.word	0x20000534

080045ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80045f0:	4802      	ldr	r0, [pc, #8]	; (80045fc <I2C1_EV_IRQHandler+0x10>)
 80045f2:	f002 f843 	bl	800667c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80045f6:	bf00      	nop
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000378 	.word	0x20000378

08004600 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004604:	4802      	ldr	r0, [pc, #8]	; (8004610 <I2C1_ER_IRQHandler+0x10>)
 8004606:	f002 f9aa 	bl	800695e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800460a:	bf00      	nop
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20000378 	.word	0x20000378

08004614 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004618:	4802      	ldr	r0, [pc, #8]	; (8004624 <USART2_IRQHandler+0x10>)
 800461a:	f006 fb19 	bl	800ac50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800461e:	bf00      	nop
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	2000065c 	.word	0x2000065c

08004628 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800462c:	4802      	ldr	r0, [pc, #8]	; (8004638 <DMA2_Stream0_IRQHandler+0x10>)
 800462e:	f000 ff83 	bl	8005538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004632:	bf00      	nop
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	20000318 	.word	0x20000318

0800463c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004640:	4b06      	ldr	r3, [pc, #24]	; (800465c <SystemInit+0x20>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	4a05      	ldr	r2, [pc, #20]	; (800465c <SystemInit+0x20>)
 8004648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800464c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004650:	bf00      	nop
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	e000ed00 	.word	0xe000ed00

08004660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8004660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004698 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004664:	480d      	ldr	r0, [pc, #52]	; (800469c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004666:	490e      	ldr	r1, [pc, #56]	; (80046a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004668:	4a0e      	ldr	r2, [pc, #56]	; (80046a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800466a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800466c:	e002      	b.n	8004674 <LoopCopyDataInit>

0800466e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800466e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004672:	3304      	adds	r3, #4

08004674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004678:	d3f9      	bcc.n	800466e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800467a:	4a0b      	ldr	r2, [pc, #44]	; (80046a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800467c:	4c0b      	ldr	r4, [pc, #44]	; (80046ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800467e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004680:	e001      	b.n	8004686 <LoopFillZerobss>

08004682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004684:	3204      	adds	r2, #4

08004686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004688:	d3fb      	bcc.n	8004682 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800468a:	f7ff ffd7 	bl	800463c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800468e:	f007 fb2b 	bl	800bce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004692:	f7fc ff7d 	bl	8001590 <main>
  bx  lr    
 8004696:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 8004698:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800469c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046a0:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 80046a4:	0800c1cc 	.word	0x0800c1cc
  ldr r2, =_sbss
 80046a8:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 80046ac:	20000e68 	.word	0x20000e68

080046b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046b0:	e7fe      	b.n	80046b0 <ADC_IRQHandler>
	...

080046b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046b8:	4b0e      	ldr	r3, [pc, #56]	; (80046f4 <HAL_Init+0x40>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a0d      	ldr	r2, [pc, #52]	; (80046f4 <HAL_Init+0x40>)
 80046be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_Init+0x40>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a0a      	ldr	r2, [pc, #40]	; (80046f4 <HAL_Init+0x40>)
 80046ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046d0:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <HAL_Init+0x40>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a07      	ldr	r2, [pc, #28]	; (80046f4 <HAL_Init+0x40>)
 80046d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046dc:	2003      	movs	r0, #3
 80046de:	f000 fd51 	bl	8005184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046e2:	2000      	movs	r0, #0
 80046e4:	f000 f808 	bl	80046f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046e8:	f7ff fc9e 	bl	8004028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40023c00 	.word	0x40023c00

080046f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004700:	4b12      	ldr	r3, [pc, #72]	; (800474c <HAL_InitTick+0x54>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	4b12      	ldr	r3, [pc, #72]	; (8004750 <HAL_InitTick+0x58>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	4619      	mov	r1, r3
 800470a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800470e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004712:	fbb2 f3f3 	udiv	r3, r2, r3
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fd69 	bl	80051ee <HAL_SYSTICK_Config>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e00e      	b.n	8004744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b0f      	cmp	r3, #15
 800472a:	d80a      	bhi.n	8004742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800472c:	2200      	movs	r2, #0
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	f04f 30ff 	mov.w	r0, #4294967295
 8004734:	f000 fd31 	bl	800519a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004738:	4a06      	ldr	r2, [pc, #24]	; (8004754 <HAL_InitTick+0x5c>)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	e000      	b.n	8004744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
}
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000240 	.word	0x20000240
 8004750:	20000248 	.word	0x20000248
 8004754:	20000244 	.word	0x20000244

08004758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_IncTick+0x20>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	461a      	mov	r2, r3
 8004762:	4b06      	ldr	r3, [pc, #24]	; (800477c <HAL_IncTick+0x24>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4413      	add	r3, r2
 8004768:	4a04      	ldr	r2, [pc, #16]	; (800477c <HAL_IncTick+0x24>)
 800476a:	6013      	str	r3, [r2, #0]
}
 800476c:	bf00      	nop
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000248 	.word	0x20000248
 800477c:	20000e64 	.word	0x20000e64

08004780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  return uwTick;
 8004784:	4b03      	ldr	r3, [pc, #12]	; (8004794 <HAL_GetTick+0x14>)
 8004786:	681b      	ldr	r3, [r3, #0]
}
 8004788:	4618      	mov	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000e64 	.word	0x20000e64

08004798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047a0:	f7ff ffee 	bl	8004780 <HAL_GetTick>
 80047a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b0:	d005      	beq.n	80047be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047b2:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <HAL_Delay+0x44>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047be:	bf00      	nop
 80047c0:	f7ff ffde 	bl	8004780 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d8f7      	bhi.n	80047c0 <HAL_Delay+0x28>
  {
  }
}
 80047d0:	bf00      	nop
 80047d2:	bf00      	nop
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000248 	.word	0x20000248

080047e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e033      	b.n	800485e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff fc3a 	bl	8004078 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f003 0310 	and.w	r3, r3, #16
 800481a:	2b00      	cmp	r3, #0
 800481c:	d118      	bne.n	8004850 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004826:	f023 0302 	bic.w	r3, r3, #2
 800482a:	f043 0202 	orr.w	r2, r3, #2
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fa58 	bl	8004ce8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f023 0303 	bic.w	r3, r3, #3
 8004846:	f043 0201 	orr.w	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	641a      	str	r2, [r3, #64]	; 0x40
 800484e:	e001      	b.n	8004854 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800485c:	7bfb      	ldrb	r3, [r7, #15]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_ADC_Start_DMA+0x1e>
 8004882:	2302      	movs	r3, #2
 8004884:	e0ce      	b.n	8004a24 <HAL_ADC_Start_DMA+0x1bc>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b01      	cmp	r3, #1
 800489a:	d018      	beq.n	80048ce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80048ac:	4b5f      	ldr	r3, [pc, #380]	; (8004a2c <HAL_ADC_Start_DMA+0x1c4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a5f      	ldr	r2, [pc, #380]	; (8004a30 <HAL_ADC_Start_DMA+0x1c8>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	0c9a      	lsrs	r2, r3, #18
 80048b8:	4613      	mov	r3, r2
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	4413      	add	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80048c0:	e002      	b.n	80048c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f9      	bne.n	80048c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048dc:	d107      	bne.n	80048ee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	f040 8086 	bne.w	8004a0a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491c:	2b00      	cmp	r3, #0
 800491e:	d007      	beq.n	8004930 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004928:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493c:	d106      	bne.n	800494c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	f023 0206 	bic.w	r2, r3, #6
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	645a      	str	r2, [r3, #68]	; 0x44
 800494a:	e002      	b.n	8004952 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800495a:	4b36      	ldr	r3, [pc, #216]	; (8004a34 <HAL_ADC_Start_DMA+0x1cc>)
 800495c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	4a35      	ldr	r2, [pc, #212]	; (8004a38 <HAL_ADC_Start_DMA+0x1d0>)
 8004964:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	4a34      	ldr	r2, [pc, #208]	; (8004a3c <HAL_ADC_Start_DMA+0x1d4>)
 800496c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004972:	4a33      	ldr	r2, [pc, #204]	; (8004a40 <HAL_ADC_Start_DMA+0x1d8>)
 8004974:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800497e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800498e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800499e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	334c      	adds	r3, #76	; 0x4c
 80049aa:	4619      	mov	r1, r3
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f000 fcd8 	bl	8005364 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10f      	bne.n	80049e0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d129      	bne.n	8004a22 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80049dc:	609a      	str	r2, [r3, #8]
 80049de:	e020      	b.n	8004a22 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a17      	ldr	r2, [pc, #92]	; (8004a44 <HAL_ADC_Start_DMA+0x1dc>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d11b      	bne.n	8004a22 <HAL_ADC_Start_DMA+0x1ba>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d114      	bne.n	8004a22 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a06:	609a      	str	r2, [r3, #8]
 8004a08:	e00b      	b.n	8004a22 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f043 0210 	orr.w	r2, r3, #16
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1a:	f043 0201 	orr.w	r2, r3, #1
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20000240 	.word	0x20000240
 8004a30:	431bde83 	.word	0x431bde83
 8004a34:	40012300 	.word	0x40012300
 8004a38:	08004ee1 	.word	0x08004ee1
 8004a3c:	08004f9b 	.word	0x08004f9b
 8004a40:	08004fb7 	.word	0x08004fb7
 8004a44:	40012000 	.word	0x40012000

08004a48 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x1c>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e113      	b.n	8004cc8 <HAL_ADC_ConfigChannel+0x244>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b09      	cmp	r3, #9
 8004aae:	d925      	bls.n	8004afc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68d9      	ldr	r1, [r3, #12]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	4613      	mov	r3, r2
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3b1e      	subs	r3, #30
 8004ac6:	2207      	movs	r2, #7
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43da      	mvns	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	400a      	ands	r2, r1
 8004ad4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68d9      	ldr	r1, [r3, #12]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	4603      	mov	r3, r0
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	4403      	add	r3, r0
 8004aee:	3b1e      	subs	r3, #30
 8004af0:	409a      	lsls	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	60da      	str	r2, [r3, #12]
 8004afa:	e022      	b.n	8004b42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6919      	ldr	r1, [r3, #16]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	4413      	add	r3, r2
 8004b10:	2207      	movs	r2, #7
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	43da      	mvns	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	400a      	ands	r2, r1
 8004b1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6919      	ldr	r1, [r3, #16]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	4618      	mov	r0, r3
 8004b32:	4603      	mov	r3, r0
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	4403      	add	r3, r0
 8004b38:	409a      	lsls	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b06      	cmp	r3, #6
 8004b48:	d824      	bhi.n	8004b94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	3b05      	subs	r3, #5
 8004b5c:	221f      	movs	r2, #31
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	43da      	mvns	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	400a      	ands	r2, r1
 8004b6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	4618      	mov	r0, r3
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	3b05      	subs	r3, #5
 8004b86:	fa00 f203 	lsl.w	r2, r0, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	635a      	str	r2, [r3, #52]	; 0x34
 8004b92:	e04c      	b.n	8004c2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b0c      	cmp	r3, #12
 8004b9a:	d824      	bhi.n	8004be6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	3b23      	subs	r3, #35	; 0x23
 8004bae:	221f      	movs	r2, #31
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	43da      	mvns	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	400a      	ands	r2, r1
 8004bbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	4618      	mov	r0, r3
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3b23      	subs	r3, #35	; 0x23
 8004bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	631a      	str	r2, [r3, #48]	; 0x30
 8004be4:	e023      	b.n	8004c2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	3b41      	subs	r3, #65	; 0x41
 8004bf8:	221f      	movs	r2, #31
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43da      	mvns	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	400a      	ands	r2, r1
 8004c06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	4618      	mov	r0, r3
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	3b41      	subs	r3, #65	; 0x41
 8004c22:	fa00 f203 	lsl.w	r2, r0, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c2e:	4b29      	ldr	r3, [pc, #164]	; (8004cd4 <HAL_ADC_ConfigChannel+0x250>)
 8004c30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <HAL_ADC_ConfigChannel+0x254>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d10f      	bne.n	8004c5c <HAL_ADC_ConfigChannel+0x1d8>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b12      	cmp	r3, #18
 8004c42:	d10b      	bne.n	8004c5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <HAL_ADC_ConfigChannel+0x254>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d12b      	bne.n	8004cbe <HAL_ADC_ConfigChannel+0x23a>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1c      	ldr	r2, [pc, #112]	; (8004cdc <HAL_ADC_ConfigChannel+0x258>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d003      	beq.n	8004c78 <HAL_ADC_ConfigChannel+0x1f4>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b11      	cmp	r3, #17
 8004c76:	d122      	bne.n	8004cbe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a11      	ldr	r2, [pc, #68]	; (8004cdc <HAL_ADC_ConfigChannel+0x258>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d111      	bne.n	8004cbe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c9a:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <HAL_ADC_ConfigChannel+0x25c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a11      	ldr	r2, [pc, #68]	; (8004ce4 <HAL_ADC_ConfigChannel+0x260>)
 8004ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca4:	0c9a      	lsrs	r2, r3, #18
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004cb0:	e002      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f9      	bne.n	8004cb2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	40012300 	.word	0x40012300
 8004cd8:	40012000 	.word	0x40012000
 8004cdc:	10000012 	.word	0x10000012
 8004ce0:	20000240 	.word	0x20000240
 8004ce4:	431bde83 	.word	0x431bde83

08004ce8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cf0:	4b79      	ldr	r3, [pc, #484]	; (8004ed8 <ADC_Init+0x1f0>)
 8004cf2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	021a      	lsls	r2, r3, #8
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004d40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6859      	ldr	r1, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6899      	ldr	r1, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7a:	4a58      	ldr	r2, [pc, #352]	; (8004edc <ADC_Init+0x1f4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d022      	beq.n	8004dc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6899      	ldr	r1, [r3, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004db0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6899      	ldr	r1, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	609a      	str	r2, [r3, #8]
 8004dc4:	e00f      	b.n	8004de6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004dd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004de4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0202 	bic.w	r2, r2, #2
 8004df4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6899      	ldr	r1, [r3, #8]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	7e1b      	ldrb	r3, [r3, #24]
 8004e00:	005a      	lsls	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01b      	beq.n	8004e4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004e32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6859      	ldr	r1, [r3, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	035a      	lsls	r2, r3, #13
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	605a      	str	r2, [r3, #4]
 8004e4a:	e007      	b.n	8004e5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	051a      	lsls	r2, r3, #20
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6899      	ldr	r1, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e9e:	025a      	lsls	r2, r3, #9
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6899      	ldr	r1, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	029a      	lsls	r2, r3, #10
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	609a      	str	r2, [r3, #8]
}
 8004ecc:	bf00      	nop
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	40012300 	.word	0x40012300
 8004edc:	0f000001 	.word	0x0f000001

08004ee0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d13c      	bne.n	8004f74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d12b      	bne.n	8004f6c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d127      	bne.n	8004f6c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d006      	beq.n	8004f38 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d119      	bne.n	8004f6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0220 	bic.w	r2, r2, #32
 8004f46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d105      	bne.n	8004f6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	f043 0201 	orr.w	r2, r3, #1
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f7ff fd6b 	bl	8004a48 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f72:	e00e      	b.n	8004f92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f7ff fd75 	bl	8004a70 <HAL_ADC_ErrorCallback>
}
 8004f86:	e004      	b.n	8004f92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	4798      	blx	r3
}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f7ff fd57 	bl	8004a5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2240      	movs	r2, #64	; 0x40
 8004fc8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	f043 0204 	orr.w	r2, r3, #4
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f7ff fd4a 	bl	8004a70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fdc:	bf00      	nop
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ff4:	4b0c      	ldr	r3, [pc, #48]	; (8005028 <__NVIC_SetPriorityGrouping+0x44>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005000:	4013      	ands	r3, r2
 8005002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800500c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005016:	4a04      	ldr	r2, [pc, #16]	; (8005028 <__NVIC_SetPriorityGrouping+0x44>)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	60d3      	str	r3, [r2, #12]
}
 800501c:	bf00      	nop
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	e000ed00 	.word	0xe000ed00

0800502c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005030:	4b04      	ldr	r3, [pc, #16]	; (8005044 <__NVIC_GetPriorityGrouping+0x18>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	0a1b      	lsrs	r3, r3, #8
 8005036:	f003 0307 	and.w	r3, r3, #7
}
 800503a:	4618      	mov	r0, r3
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	e000ed00 	.word	0xe000ed00

08005048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	4603      	mov	r3, r0
 8005050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005056:	2b00      	cmp	r3, #0
 8005058:	db0b      	blt.n	8005072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	f003 021f 	and.w	r2, r3, #31
 8005060:	4907      	ldr	r1, [pc, #28]	; (8005080 <__NVIC_EnableIRQ+0x38>)
 8005062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	2001      	movs	r0, #1
 800506a:	fa00 f202 	lsl.w	r2, r0, r2
 800506e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	e000e100 	.word	0xe000e100

08005084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	4603      	mov	r3, r0
 800508c:	6039      	str	r1, [r7, #0]
 800508e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005094:	2b00      	cmp	r3, #0
 8005096:	db0a      	blt.n	80050ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	b2da      	uxtb	r2, r3
 800509c:	490c      	ldr	r1, [pc, #48]	; (80050d0 <__NVIC_SetPriority+0x4c>)
 800509e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a2:	0112      	lsls	r2, r2, #4
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	440b      	add	r3, r1
 80050a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050ac:	e00a      	b.n	80050c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	4908      	ldr	r1, [pc, #32]	; (80050d4 <__NVIC_SetPriority+0x50>)
 80050b4:	79fb      	ldrb	r3, [r7, #7]
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	3b04      	subs	r3, #4
 80050bc:	0112      	lsls	r2, r2, #4
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	440b      	add	r3, r1
 80050c2:	761a      	strb	r2, [r3, #24]
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	e000e100 	.word	0xe000e100
 80050d4:	e000ed00 	.word	0xe000ed00

080050d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050d8:	b480      	push	{r7}
 80050da:	b089      	sub	sp, #36	; 0x24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f1c3 0307 	rsb	r3, r3, #7
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	bf28      	it	cs
 80050f6:	2304      	movcs	r3, #4
 80050f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	3304      	adds	r3, #4
 80050fe:	2b06      	cmp	r3, #6
 8005100:	d902      	bls.n	8005108 <NVIC_EncodePriority+0x30>
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	3b03      	subs	r3, #3
 8005106:	e000      	b.n	800510a <NVIC_EncodePriority+0x32>
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800510c:	f04f 32ff 	mov.w	r2, #4294967295
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	fa02 f303 	lsl.w	r3, r2, r3
 8005116:	43da      	mvns	r2, r3
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	401a      	ands	r2, r3
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005120:	f04f 31ff 	mov.w	r1, #4294967295
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	fa01 f303 	lsl.w	r3, r1, r3
 800512a:	43d9      	mvns	r1, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005130:	4313      	orrs	r3, r2
         );
}
 8005132:	4618      	mov	r0, r3
 8005134:	3724      	adds	r7, #36	; 0x24
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
	...

08005140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3b01      	subs	r3, #1
 800514c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005150:	d301      	bcc.n	8005156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005152:	2301      	movs	r3, #1
 8005154:	e00f      	b.n	8005176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005156:	4a0a      	ldr	r2, [pc, #40]	; (8005180 <SysTick_Config+0x40>)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3b01      	subs	r3, #1
 800515c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800515e:	210f      	movs	r1, #15
 8005160:	f04f 30ff 	mov.w	r0, #4294967295
 8005164:	f7ff ff8e 	bl	8005084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <SysTick_Config+0x40>)
 800516a:	2200      	movs	r2, #0
 800516c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800516e:	4b04      	ldr	r3, [pc, #16]	; (8005180 <SysTick_Config+0x40>)
 8005170:	2207      	movs	r2, #7
 8005172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	e000e010 	.word	0xe000e010

08005184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff ff29 	bl	8004fe4 <__NVIC_SetPriorityGrouping>
}
 8005192:	bf00      	nop
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800519a:	b580      	push	{r7, lr}
 800519c:	b086      	sub	sp, #24
 800519e:	af00      	add	r7, sp, #0
 80051a0:	4603      	mov	r3, r0
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	607a      	str	r2, [r7, #4]
 80051a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051ac:	f7ff ff3e 	bl	800502c <__NVIC_GetPriorityGrouping>
 80051b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	6978      	ldr	r0, [r7, #20]
 80051b8:	f7ff ff8e 	bl	80050d8 <NVIC_EncodePriority>
 80051bc:	4602      	mov	r2, r0
 80051be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051c2:	4611      	mov	r1, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff ff5d 	bl	8005084 <__NVIC_SetPriority>
}
 80051ca:	bf00      	nop
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b082      	sub	sp, #8
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	4603      	mov	r3, r0
 80051da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff ff31 	bl	8005048 <__NVIC_EnableIRQ>
}
 80051e6:	bf00      	nop
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff ffa2 	bl	8005140 <SysTick_Config>
 80051fc:	4603      	mov	r3, r0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005214:	f7ff fab4 	bl	8004780 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e099      	b.n	8005358 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0201 	bic.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005244:	e00f      	b.n	8005266 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005246:	f7ff fa9b 	bl	8004780 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b05      	cmp	r3, #5
 8005252:	d908      	bls.n	8005266 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2203      	movs	r2, #3
 800525e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e078      	b.n	8005358 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e8      	bne.n	8005246 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	4b38      	ldr	r3, [pc, #224]	; (8005360 <HAL_DMA_Init+0x158>)
 8005280:	4013      	ands	r3, r2
 8005282:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005292:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800529e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d107      	bne.n	80052d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c8:	4313      	orrs	r3, r2
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f023 0307 	bic.w	r3, r3, #7
 80052e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d117      	bne.n	800532a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	4313      	orrs	r3, r2
 8005302:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00e      	beq.n	800532a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fb1b 	bl	8005948 <DMA_CheckFifoParam>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d008      	beq.n	800532a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2240      	movs	r2, #64	; 0x40
 800531c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005326:	2301      	movs	r3, #1
 8005328:	e016      	b.n	8005358 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fad2 	bl	80058dc <DMA_CalcBaseAndBitshift>
 8005338:	4603      	mov	r3, r0
 800533a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005340:	223f      	movs	r2, #63	; 0x3f
 8005342:	409a      	lsls	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	f010803f 	.word	0xf010803f

08005364 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <HAL_DMA_Start_IT+0x26>
 8005386:	2302      	movs	r3, #2
 8005388:	e040      	b.n	800540c <HAL_DMA_Start_IT+0xa8>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b01      	cmp	r3, #1
 800539c:	d12f      	bne.n	80053fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2202      	movs	r2, #2
 80053a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 fa64 	bl	8005880 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053bc:	223f      	movs	r2, #63	; 0x3f
 80053be:	409a      	lsls	r2, r3
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0216 	orr.w	r2, r2, #22
 80053d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0208 	orr.w	r2, r2, #8
 80053ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	e005      	b.n	800540a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005406:	2302      	movs	r3, #2
 8005408:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800540a:	7dfb      	ldrb	r3, [r7, #23]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005420:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005422:	f7ff f9ad 	bl	8004780 <HAL_GetTick>
 8005426:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d008      	beq.n	8005446 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2280      	movs	r2, #128	; 0x80
 8005438:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e052      	b.n	80054ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0216 	bic.w	r2, r2, #22
 8005454:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695a      	ldr	r2, [r3, #20]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005464:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	d103      	bne.n	8005476 <HAL_DMA_Abort+0x62>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0208 	bic.w	r2, r2, #8
 8005484:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 0201 	bic.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005496:	e013      	b.n	80054c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005498:	f7ff f972 	bl	8004780 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b05      	cmp	r3, #5
 80054a4:	d90c      	bls.n	80054c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2203      	movs	r2, #3
 80054b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e015      	b.n	80054ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e4      	bne.n	8005498 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d2:	223f      	movs	r2, #63	; 0x3f
 80054d4:	409a      	lsls	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d004      	beq.n	8005512 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2280      	movs	r2, #128	; 0x80
 800550c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e00c      	b.n	800552c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2205      	movs	r2, #5
 8005516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0201 	bic.w	r2, r2, #1
 8005528:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005544:	4b8e      	ldr	r3, [pc, #568]	; (8005780 <HAL_DMA_IRQHandler+0x248>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a8e      	ldr	r2, [pc, #568]	; (8005784 <HAL_DMA_IRQHandler+0x24c>)
 800554a:	fba2 2303 	umull	r2, r3, r2, r3
 800554e:	0a9b      	lsrs	r3, r3, #10
 8005550:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005556:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005562:	2208      	movs	r2, #8
 8005564:	409a      	lsls	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4013      	ands	r3, r2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d01a      	beq.n	80055a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d013      	beq.n	80055a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0204 	bic.w	r2, r2, #4
 800558a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005590:	2208      	movs	r2, #8
 8005592:	409a      	lsls	r2, r3
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559c:	f043 0201 	orr.w	r2, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a8:	2201      	movs	r2, #1
 80055aa:	409a      	lsls	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4013      	ands	r3, r2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d012      	beq.n	80055da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00b      	beq.n	80055da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c6:	2201      	movs	r2, #1
 80055c8:	409a      	lsls	r2, r3
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d2:	f043 0202 	orr.w	r2, r3, #2
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055de:	2204      	movs	r2, #4
 80055e0:	409a      	lsls	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4013      	ands	r3, r2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d012      	beq.n	8005610 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00b      	beq.n	8005610 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fc:	2204      	movs	r2, #4
 80055fe:	409a      	lsls	r2, r3
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005608:	f043 0204 	orr.w	r2, r3, #4
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005614:	2210      	movs	r2, #16
 8005616:	409a      	lsls	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4013      	ands	r3, r2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d043      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d03c      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005632:	2210      	movs	r2, #16
 8005634:	409a      	lsls	r2, r3
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d018      	beq.n	800567a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d108      	bne.n	8005668 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d024      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	4798      	blx	r3
 8005666:	e01f      	b.n	80056a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01b      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	4798      	blx	r3
 8005678:	e016      	b.n	80056a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005684:	2b00      	cmp	r3, #0
 8005686:	d107      	bne.n	8005698 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0208 	bic.w	r2, r2, #8
 8005696:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ac:	2220      	movs	r2, #32
 80056ae:	409a      	lsls	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 808f 	beq.w	80057d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0310 	and.w	r3, r3, #16
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 8087 	beq.w	80057d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ce:	2220      	movs	r2, #32
 80056d0:	409a      	lsls	r2, r3
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b05      	cmp	r3, #5
 80056e0:	d136      	bne.n	8005750 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0216 	bic.w	r2, r2, #22
 80056f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695a      	ldr	r2, [r3, #20]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005700:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d103      	bne.n	8005712 <HAL_DMA_IRQHandler+0x1da>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0208 	bic.w	r2, r2, #8
 8005720:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005726:	223f      	movs	r2, #63	; 0x3f
 8005728:	409a      	lsls	r2, r3
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005742:	2b00      	cmp	r3, #0
 8005744:	d07e      	beq.n	8005844 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	4798      	blx	r3
        }
        return;
 800574e:	e079      	b.n	8005844 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d01d      	beq.n	800579a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10d      	bne.n	8005788 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005770:	2b00      	cmp	r3, #0
 8005772:	d031      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	4798      	blx	r3
 800577c:	e02c      	b.n	80057d8 <HAL_DMA_IRQHandler+0x2a0>
 800577e:	bf00      	nop
 8005780:	20000240 	.word	0x20000240
 8005784:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d023      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	4798      	blx	r3
 8005798:	e01e      	b.n	80057d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10f      	bne.n	80057c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0210 	bic.w	r2, r2, #16
 80057b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d032      	beq.n	8005846 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d022      	beq.n	8005832 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2205      	movs	r2, #5
 80057f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0201 	bic.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	3301      	adds	r3, #1
 8005808:	60bb      	str	r3, [r7, #8]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	429a      	cmp	r2, r3
 800580e:	d307      	bcc.n	8005820 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f2      	bne.n	8005804 <HAL_DMA_IRQHandler+0x2cc>
 800581e:	e000      	b.n	8005822 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005820:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005836:	2b00      	cmp	r3, #0
 8005838:	d005      	beq.n	8005846 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	4798      	blx	r3
 8005842:	e000      	b.n	8005846 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005844:	bf00      	nop
    }
  }
}
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800585a:	b2db      	uxtb	r3, r3
}
 800585c:	4618      	mov	r0, r3
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005874:	4618      	mov	r0, r3
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800589c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2b40      	cmp	r3, #64	; 0x40
 80058ac:	d108      	bne.n	80058c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80058be:	e007      	b.n	80058d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	60da      	str	r2, [r3, #12]
}
 80058d0:	bf00      	nop
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	3b10      	subs	r3, #16
 80058ec:	4a14      	ldr	r2, [pc, #80]	; (8005940 <DMA_CalcBaseAndBitshift+0x64>)
 80058ee:	fba2 2303 	umull	r2, r3, r2, r3
 80058f2:	091b      	lsrs	r3, r3, #4
 80058f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80058f6:	4a13      	ldr	r2, [pc, #76]	; (8005944 <DMA_CalcBaseAndBitshift+0x68>)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b03      	cmp	r3, #3
 8005908:	d909      	bls.n	800591e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005912:	f023 0303 	bic.w	r3, r3, #3
 8005916:	1d1a      	adds	r2, r3, #4
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	659a      	str	r2, [r3, #88]	; 0x58
 800591c:	e007      	b.n	800592e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005926:	f023 0303 	bic.w	r3, r3, #3
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	aaaaaaab 	.word	0xaaaaaaab
 8005944:	0800c1b0 	.word	0x0800c1b0

08005948 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005958:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d11f      	bne.n	80059a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b03      	cmp	r3, #3
 8005966:	d856      	bhi.n	8005a16 <DMA_CheckFifoParam+0xce>
 8005968:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <DMA_CheckFifoParam+0x28>)
 800596a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596e:	bf00      	nop
 8005970:	08005981 	.word	0x08005981
 8005974:	08005993 	.word	0x08005993
 8005978:	08005981 	.word	0x08005981
 800597c:	08005a17 	.word	0x08005a17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d046      	beq.n	8005a1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005990:	e043      	b.n	8005a1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800599a:	d140      	bne.n	8005a1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059a0:	e03d      	b.n	8005a1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059aa:	d121      	bne.n	80059f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	d837      	bhi.n	8005a22 <DMA_CheckFifoParam+0xda>
 80059b2:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <DMA_CheckFifoParam+0x70>)
 80059b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b8:	080059c9 	.word	0x080059c9
 80059bc:	080059cf 	.word	0x080059cf
 80059c0:	080059c9 	.word	0x080059c9
 80059c4:	080059e1 	.word	0x080059e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	73fb      	strb	r3, [r7, #15]
      break;
 80059cc:	e030      	b.n	8005a30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d025      	beq.n	8005a26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059de:	e022      	b.n	8005a26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059e8:	d11f      	bne.n	8005a2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80059ee:	e01c      	b.n	8005a2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d903      	bls.n	80059fe <DMA_CheckFifoParam+0xb6>
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d003      	beq.n	8005a04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80059fc:	e018      	b.n	8005a30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	73fb      	strb	r3, [r7, #15]
      break;
 8005a02:	e015      	b.n	8005a30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00e      	beq.n	8005a2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	73fb      	strb	r3, [r7, #15]
      break;
 8005a14:	e00b      	b.n	8005a2e <DMA_CheckFifoParam+0xe6>
      break;
 8005a16:	bf00      	nop
 8005a18:	e00a      	b.n	8005a30 <DMA_CheckFifoParam+0xe8>
      break;
 8005a1a:	bf00      	nop
 8005a1c:	e008      	b.n	8005a30 <DMA_CheckFifoParam+0xe8>
      break;
 8005a1e:	bf00      	nop
 8005a20:	e006      	b.n	8005a30 <DMA_CheckFifoParam+0xe8>
      break;
 8005a22:	bf00      	nop
 8005a24:	e004      	b.n	8005a30 <DMA_CheckFifoParam+0xe8>
      break;
 8005a26:	bf00      	nop
 8005a28:	e002      	b.n	8005a30 <DMA_CheckFifoParam+0xe8>
      break;   
 8005a2a:	bf00      	nop
 8005a2c:	e000      	b.n	8005a30 <DMA_CheckFifoParam+0xe8>
      break;
 8005a2e:	bf00      	nop
    }
  } 
  
  return status; 
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop

08005a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b089      	sub	sp, #36	; 0x24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a56:	2300      	movs	r3, #0
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	e159      	b.n	8005d10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	f040 8148 	bne.w	8005d0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d005      	beq.n	8005a92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d130      	bne.n	8005af4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa2:	43db      	mvns	r3, r3
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ac8:	2201      	movs	r2, #1
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	091b      	lsrs	r3, r3, #4
 8005ade:	f003 0201 	and.w	r2, r3, #1
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d017      	beq.n	8005b30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	43db      	mvns	r3, r3
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	4013      	ands	r3, r2
 8005b16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f003 0303 	and.w	r3, r3, #3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d123      	bne.n	8005b84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	08da      	lsrs	r2, r3, #3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3208      	adds	r2, #8
 8005b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	f003 0307 	and.w	r3, r3, #7
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	220f      	movs	r2, #15
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	08da      	lsrs	r2, r3, #3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3208      	adds	r2, #8
 8005b7e:	69b9      	ldr	r1, [r7, #24]
 8005b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	2203      	movs	r2, #3
 8005b90:	fa02 f303 	lsl.w	r3, r2, r3
 8005b94:	43db      	mvns	r3, r3
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f003 0203 	and.w	r2, r3, #3
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 80a2 	beq.w	8005d0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	4b57      	ldr	r3, [pc, #348]	; (8005d28 <HAL_GPIO_Init+0x2e8>)
 8005bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bce:	4a56      	ldr	r2, [pc, #344]	; (8005d28 <HAL_GPIO_Init+0x2e8>)
 8005bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8005bd6:	4b54      	ldr	r3, [pc, #336]	; (8005d28 <HAL_GPIO_Init+0x2e8>)
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005be2:	4a52      	ldr	r2, [pc, #328]	; (8005d2c <HAL_GPIO_Init+0x2ec>)
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	089b      	lsrs	r3, r3, #2
 8005be8:	3302      	adds	r3, #2
 8005bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	220f      	movs	r2, #15
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	4013      	ands	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a49      	ldr	r2, [pc, #292]	; (8005d30 <HAL_GPIO_Init+0x2f0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d019      	beq.n	8005c42 <HAL_GPIO_Init+0x202>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a48      	ldr	r2, [pc, #288]	; (8005d34 <HAL_GPIO_Init+0x2f4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d013      	beq.n	8005c3e <HAL_GPIO_Init+0x1fe>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a47      	ldr	r2, [pc, #284]	; (8005d38 <HAL_GPIO_Init+0x2f8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00d      	beq.n	8005c3a <HAL_GPIO_Init+0x1fa>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a46      	ldr	r2, [pc, #280]	; (8005d3c <HAL_GPIO_Init+0x2fc>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d007      	beq.n	8005c36 <HAL_GPIO_Init+0x1f6>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a45      	ldr	r2, [pc, #276]	; (8005d40 <HAL_GPIO_Init+0x300>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d101      	bne.n	8005c32 <HAL_GPIO_Init+0x1f2>
 8005c2e:	2304      	movs	r3, #4
 8005c30:	e008      	b.n	8005c44 <HAL_GPIO_Init+0x204>
 8005c32:	2307      	movs	r3, #7
 8005c34:	e006      	b.n	8005c44 <HAL_GPIO_Init+0x204>
 8005c36:	2303      	movs	r3, #3
 8005c38:	e004      	b.n	8005c44 <HAL_GPIO_Init+0x204>
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	e002      	b.n	8005c44 <HAL_GPIO_Init+0x204>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <HAL_GPIO_Init+0x204>
 8005c42:	2300      	movs	r3, #0
 8005c44:	69fa      	ldr	r2, [r7, #28]
 8005c46:	f002 0203 	and.w	r2, r2, #3
 8005c4a:	0092      	lsls	r2, r2, #2
 8005c4c:	4093      	lsls	r3, r2
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c54:	4935      	ldr	r1, [pc, #212]	; (8005d2c <HAL_GPIO_Init+0x2ec>)
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	089b      	lsrs	r3, r3, #2
 8005c5a:	3302      	adds	r3, #2
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c62:	4b38      	ldr	r3, [pc, #224]	; (8005d44 <HAL_GPIO_Init+0x304>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c86:	4a2f      	ldr	r2, [pc, #188]	; (8005d44 <HAL_GPIO_Init+0x304>)
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c8c:	4b2d      	ldr	r3, [pc, #180]	; (8005d44 <HAL_GPIO_Init+0x304>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	43db      	mvns	r3, r3
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005cb0:	4a24      	ldr	r2, [pc, #144]	; (8005d44 <HAL_GPIO_Init+0x304>)
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005cb6:	4b23      	ldr	r3, [pc, #140]	; (8005d44 <HAL_GPIO_Init+0x304>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	43db      	mvns	r3, r3
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005cda:	4a1a      	ldr	r2, [pc, #104]	; (8005d44 <HAL_GPIO_Init+0x304>)
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ce0:	4b18      	ldr	r3, [pc, #96]	; (8005d44 <HAL_GPIO_Init+0x304>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	4013      	ands	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d04:	4a0f      	ldr	r2, [pc, #60]	; (8005d44 <HAL_GPIO_Init+0x304>)
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	61fb      	str	r3, [r7, #28]
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	2b0f      	cmp	r3, #15
 8005d14:	f67f aea2 	bls.w	8005a5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d18:	bf00      	nop
 8005d1a:	bf00      	nop
 8005d1c:	3724      	adds	r7, #36	; 0x24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40023800 	.word	0x40023800
 8005d2c:	40013800 	.word	0x40013800
 8005d30:	40020000 	.word	0x40020000
 8005d34:	40020400 	.word	0x40020400
 8005d38:	40020800 	.word	0x40020800
 8005d3c:	40020c00 	.word	0x40020c00
 8005d40:	40021000 	.word	0x40021000
 8005d44:	40013c00 	.word	0x40013c00

08005d48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	887b      	ldrh	r3, [r7, #2]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d60:	2301      	movs	r3, #1
 8005d62:	73fb      	strb	r3, [r7, #15]
 8005d64:	e001      	b.n	8005d6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d66:	2300      	movs	r3, #0
 8005d68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	807b      	strh	r3, [r7, #2]
 8005d84:	4613      	mov	r3, r2
 8005d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d88:	787b      	ldrb	r3, [r7, #1]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d8e:	887a      	ldrh	r2, [r7, #2]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d94:	e003      	b.n	8005d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d96:	887b      	ldrh	r3, [r7, #2]
 8005d98:	041a      	lsls	r2, r3, #16
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	619a      	str	r2, [r3, #24]
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
	...

08005dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e12b      	b.n	8006016 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7fe f9c8 	bl	8004168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2224      	movs	r2, #36	; 0x24
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0201 	bic.w	r2, r2, #1
 8005dee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e10:	f003 f8ac 	bl	8008f6c <HAL_RCC_GetPCLK1Freq>
 8005e14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	4a81      	ldr	r2, [pc, #516]	; (8006020 <HAL_I2C_Init+0x274>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d807      	bhi.n	8005e30 <HAL_I2C_Init+0x84>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4a80      	ldr	r2, [pc, #512]	; (8006024 <HAL_I2C_Init+0x278>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	bf94      	ite	ls
 8005e28:	2301      	movls	r3, #1
 8005e2a:	2300      	movhi	r3, #0
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	e006      	b.n	8005e3e <HAL_I2C_Init+0x92>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4a7d      	ldr	r2, [pc, #500]	; (8006028 <HAL_I2C_Init+0x27c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	bf94      	ite	ls
 8005e38:	2301      	movls	r3, #1
 8005e3a:	2300      	movhi	r3, #0
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e0e7      	b.n	8006016 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4a78      	ldr	r2, [pc, #480]	; (800602c <HAL_I2C_Init+0x280>)
 8005e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4e:	0c9b      	lsrs	r3, r3, #18
 8005e50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	4a6a      	ldr	r2, [pc, #424]	; (8006020 <HAL_I2C_Init+0x274>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d802      	bhi.n	8005e80 <HAL_I2C_Init+0xd4>
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	e009      	b.n	8005e94 <HAL_I2C_Init+0xe8>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e86:	fb02 f303 	mul.w	r3, r2, r3
 8005e8a:	4a69      	ldr	r2, [pc, #420]	; (8006030 <HAL_I2C_Init+0x284>)
 8005e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e90:	099b      	lsrs	r3, r3, #6
 8005e92:	3301      	adds	r3, #1
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6812      	ldr	r2, [r2, #0]
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ea6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	495c      	ldr	r1, [pc, #368]	; (8006020 <HAL_I2C_Init+0x274>)
 8005eb0:	428b      	cmp	r3, r1
 8005eb2:	d819      	bhi.n	8005ee8 <HAL_I2C_Init+0x13c>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	1e59      	subs	r1, r3, #1
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ec2:	1c59      	adds	r1, r3, #1
 8005ec4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ec8:	400b      	ands	r3, r1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <HAL_I2C_Init+0x138>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	1e59      	subs	r1, r3, #1
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005edc:	3301      	adds	r3, #1
 8005ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ee2:	e051      	b.n	8005f88 <HAL_I2C_Init+0x1dc>
 8005ee4:	2304      	movs	r3, #4
 8005ee6:	e04f      	b.n	8005f88 <HAL_I2C_Init+0x1dc>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d111      	bne.n	8005f14 <HAL_I2C_Init+0x168>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	1e58      	subs	r0, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6859      	ldr	r1, [r3, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	440b      	add	r3, r1
 8005efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f02:	3301      	adds	r3, #1
 8005f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	bf0c      	ite	eq
 8005f0c:	2301      	moveq	r3, #1
 8005f0e:	2300      	movne	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	e012      	b.n	8005f3a <HAL_I2C_Init+0x18e>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	1e58      	subs	r0, r3, #1
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6859      	ldr	r1, [r3, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	0099      	lsls	r1, r3, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	bf0c      	ite	eq
 8005f34:	2301      	moveq	r3, #1
 8005f36:	2300      	movne	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <HAL_I2C_Init+0x196>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e022      	b.n	8005f88 <HAL_I2C_Init+0x1dc>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10e      	bne.n	8005f68 <HAL_I2C_Init+0x1bc>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	1e58      	subs	r0, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6859      	ldr	r1, [r3, #4]
 8005f52:	460b      	mov	r3, r1
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	440b      	add	r3, r1
 8005f58:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f66:	e00f      	b.n	8005f88 <HAL_I2C_Init+0x1dc>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	1e58      	subs	r0, r3, #1
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6859      	ldr	r1, [r3, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	0099      	lsls	r1, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f7e:	3301      	adds	r3, #1
 8005f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	6809      	ldr	r1, [r1, #0]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	69da      	ldr	r2, [r3, #28]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005fb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	6911      	ldr	r1, [r2, #16]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	68d2      	ldr	r2, [r2, #12]
 8005fc2:	4311      	orrs	r1, r2
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6812      	ldr	r2, [r2, #0]
 8005fc8:	430b      	orrs	r3, r1
 8005fca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	695a      	ldr	r2, [r3, #20]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0201 	orr.w	r2, r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	000186a0 	.word	0x000186a0
 8006024:	001e847f 	.word	0x001e847f
 8006028:	003d08ff 	.word	0x003d08ff
 800602c:	431bde83 	.word	0x431bde83
 8006030:	10624dd3 	.word	0x10624dd3

08006034 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af02      	add	r7, sp, #8
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	607a      	str	r2, [r7, #4]
 800603e:	461a      	mov	r2, r3
 8006040:	460b      	mov	r3, r1
 8006042:	817b      	strh	r3, [r7, #10]
 8006044:	4613      	mov	r3, r2
 8006046:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006048:	f7fe fb9a 	bl	8004780 <HAL_GetTick>
 800604c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b20      	cmp	r3, #32
 8006058:	f040 80e0 	bne.w	800621c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	2319      	movs	r3, #25
 8006062:	2201      	movs	r2, #1
 8006064:	4970      	ldr	r1, [pc, #448]	; (8006228 <HAL_I2C_Master_Transmit+0x1f4>)
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f002 f8e6 	bl	8008238 <I2C_WaitOnFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006072:	2302      	movs	r3, #2
 8006074:	e0d3      	b.n	800621e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_I2C_Master_Transmit+0x50>
 8006080:	2302      	movs	r3, #2
 8006082:	e0cc      	b.n	800621e <HAL_I2C_Master_Transmit+0x1ea>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b01      	cmp	r3, #1
 8006098:	d007      	beq.n	80060aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f042 0201 	orr.w	r2, r2, #1
 80060a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2221      	movs	r2, #33	; 0x21
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2210      	movs	r2, #16
 80060c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	893a      	ldrh	r2, [r7, #8]
 80060da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4a50      	ldr	r2, [pc, #320]	; (800622c <HAL_I2C_Master_Transmit+0x1f8>)
 80060ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80060ec:	8979      	ldrh	r1, [r7, #10]
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	6a3a      	ldr	r2, [r7, #32]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f001 fea8 	bl	8007e48 <I2C_MasterRequestWrite>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e08d      	b.n	800621e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006102:	2300      	movs	r3, #0
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	613b      	str	r3, [r7, #16]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	613b      	str	r3, [r7, #16]
 8006116:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006118:	e066      	b.n	80061e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	6a39      	ldr	r1, [r7, #32]
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f002 f960 	bl	80083e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00d      	beq.n	8006146 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	2b04      	cmp	r3, #4
 8006130:	d107      	bne.n	8006142 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006140:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e06b      	b.n	800621e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	781a      	ldrb	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800616e:	3b01      	subs	r3, #1
 8006170:	b29a      	uxth	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b04      	cmp	r3, #4
 8006182:	d11b      	bne.n	80061bc <HAL_I2C_Master_Transmit+0x188>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006188:	2b00      	cmp	r3, #0
 800618a:	d017      	beq.n	80061bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	781a      	ldrb	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	6a39      	ldr	r1, [r7, #32]
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f002 f950 	bl	8008466 <I2C_WaitOnBTFFlagUntilTimeout>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00d      	beq.n	80061e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d107      	bne.n	80061e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e01a      	b.n	800621e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d194      	bne.n	800611a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2220      	movs	r2, #32
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006218:	2300      	movs	r3, #0
 800621a:	e000      	b.n	800621e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800621c:	2302      	movs	r3, #2
  }
}
 800621e:	4618      	mov	r0, r3
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	00100002 	.word	0x00100002
 800622c:	ffff0000 	.word	0xffff0000

08006230 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08c      	sub	sp, #48	; 0x30
 8006234:	af02      	add	r7, sp, #8
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	607a      	str	r2, [r7, #4]
 800623a:	461a      	mov	r2, r3
 800623c:	460b      	mov	r3, r1
 800623e:	817b      	strh	r3, [r7, #10]
 8006240:	4613      	mov	r3, r2
 8006242:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006244:	f7fe fa9c 	bl	8004780 <HAL_GetTick>
 8006248:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b20      	cmp	r3, #32
 8006254:	f040 820b 	bne.w	800666e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	2319      	movs	r3, #25
 800625e:	2201      	movs	r2, #1
 8006260:	497c      	ldr	r1, [pc, #496]	; (8006454 <HAL_I2C_Master_Receive+0x224>)
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f001 ffe8 	bl	8008238 <I2C_WaitOnFlagUntilTimeout>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800626e:	2302      	movs	r3, #2
 8006270:	e1fe      	b.n	8006670 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_I2C_Master_Receive+0x50>
 800627c:	2302      	movs	r3, #2
 800627e:	e1f7      	b.n	8006670 <HAL_I2C_Master_Receive+0x440>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b01      	cmp	r3, #1
 8006294:	d007      	beq.n	80062a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f042 0201 	orr.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2222      	movs	r2, #34	; 0x22
 80062ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2210      	movs	r2, #16
 80062c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	893a      	ldrh	r2, [r7, #8]
 80062d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062dc:	b29a      	uxth	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4a5c      	ldr	r2, [pc, #368]	; (8006458 <HAL_I2C_Master_Receive+0x228>)
 80062e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80062e8:	8979      	ldrh	r1, [r7, #10]
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f001 fe2c 	bl	8007f4c <I2C_MasterRequestRead>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e1b8      	b.n	8006670 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006302:	2b00      	cmp	r3, #0
 8006304:	d113      	bne.n	800632e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006306:	2300      	movs	r3, #0
 8006308:	623b      	str	r3, [r7, #32]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	623b      	str	r3, [r7, #32]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	623b      	str	r3, [r7, #32]
 800631a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	e18c      	b.n	8006648 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006332:	2b01      	cmp	r3, #1
 8006334:	d11b      	bne.n	800636e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006344:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006346:	2300      	movs	r3, #0
 8006348:	61fb      	str	r3, [r7, #28]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	61fb      	str	r3, [r7, #28]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	61fb      	str	r3, [r7, #28]
 800635a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	e16c      	b.n	8006648 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006372:	2b02      	cmp	r3, #2
 8006374:	d11b      	bne.n	80063ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006384:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006394:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006396:	2300      	movs	r3, #0
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	61bb      	str	r3, [r7, #24]
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	e14c      	b.n	8006648 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	617b      	str	r3, [r7, #20]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80063d4:	e138      	b.n	8006648 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063da:	2b03      	cmp	r3, #3
 80063dc:	f200 80f1 	bhi.w	80065c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d123      	bne.n	8006430 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f002 f8ad 	bl	800854c <I2C_WaitOnRXNEFlagUntilTimeout>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e139      	b.n	8006670 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006418:	3b01      	subs	r3, #1
 800641a:	b29a      	uxth	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006424:	b29b      	uxth	r3, r3
 8006426:	3b01      	subs	r3, #1
 8006428:	b29a      	uxth	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800642e:	e10b      	b.n	8006648 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006434:	2b02      	cmp	r3, #2
 8006436:	d14e      	bne.n	80064d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	2200      	movs	r2, #0
 8006440:	4906      	ldr	r1, [pc, #24]	; (800645c <HAL_I2C_Master_Receive+0x22c>)
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f001 fef8 	bl	8008238 <I2C_WaitOnFlagUntilTimeout>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d008      	beq.n	8006460 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e10e      	b.n	8006670 <HAL_I2C_Master_Receive+0x440>
 8006452:	bf00      	nop
 8006454:	00100002 	.word	0x00100002
 8006458:	ffff0000 	.word	0xffff0000
 800645c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800646e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691a      	ldr	r2, [r3, #16]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006498:	b29b      	uxth	r3, r3
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691a      	ldr	r2, [r3, #16]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064d4:	e0b8      	b.n	8006648 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	2200      	movs	r2, #0
 80064de:	4966      	ldr	r1, [pc, #408]	; (8006678 <HAL_I2C_Master_Receive+0x448>)
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f001 fea9 	bl	8008238 <I2C_WaitOnFlagUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e0bf      	b.n	8006670 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	691a      	ldr	r2, [r3, #16]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	2200      	movs	r2, #0
 800653a:	494f      	ldr	r1, [pc, #316]	; (8006678 <HAL_I2C_Master_Receive+0x448>)
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f001 fe7b 	bl	8008238 <I2C_WaitOnFlagUntilTimeout>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e091      	b.n	8006670 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800655a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691a      	ldr	r2, [r3, #16]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	1c5a      	adds	r2, r3, #1
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006578:	3b01      	subs	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006584:	b29b      	uxth	r3, r3
 8006586:	3b01      	subs	r3, #1
 8006588:	b29a      	uxth	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	b2d2      	uxtb	r2, r2
 800659a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065c0:	e042      	b.n	8006648 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f001 ffc0 	bl	800854c <I2C_WaitOnRXNEFlagUntilTimeout>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e04c      	b.n	8006670 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	691a      	ldr	r2, [r3, #16]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	b2d2      	uxtb	r2, r2
 80065e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fe:	b29b      	uxth	r3, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	f003 0304 	and.w	r3, r3, #4
 8006612:	2b04      	cmp	r3, #4
 8006614:	d118      	bne.n	8006648 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006632:	3b01      	subs	r3, #1
 8006634:	b29a      	uxth	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664c:	2b00      	cmp	r3, #0
 800664e:	f47f aec2 	bne.w	80063d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2220      	movs	r2, #32
 8006656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	e000      	b.n	8006670 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800666e:	2302      	movs	r3, #2
  }
}
 8006670:	4618      	mov	r0, r3
 8006672:	3728      	adds	r7, #40	; 0x28
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	00010004 	.word	0x00010004

0800667c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006694:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800669c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
 80066a8:	2b10      	cmp	r3, #16
 80066aa:	d003      	beq.n	80066b4 <HAL_I2C_EV_IRQHandler+0x38>
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
 80066ae:	2b40      	cmp	r3, #64	; 0x40
 80066b0:	f040 80c1 	bne.w	8006836 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10d      	bne.n	80066ea <HAL_I2C_EV_IRQHandler+0x6e>
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80066d4:	d003      	beq.n	80066de <HAL_I2C_EV_IRQHandler+0x62>
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80066dc:	d101      	bne.n	80066e2 <HAL_I2C_EV_IRQHandler+0x66>
 80066de:	2301      	movs	r3, #1
 80066e0:	e000      	b.n	80066e4 <HAL_I2C_EV_IRQHandler+0x68>
 80066e2:	2300      	movs	r3, #0
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	f000 8132 	beq.w	800694e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00c      	beq.n	800670e <HAL_I2C_EV_IRQHandler+0x92>
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	0a5b      	lsrs	r3, r3, #9
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d006      	beq.n	800670e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 ffa8 	bl	8008656 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fd83 	bl	8007212 <I2C_Master_SB>
 800670c:	e092      	b.n	8006834 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	08db      	lsrs	r3, r3, #3
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d009      	beq.n	800672e <HAL_I2C_EV_IRQHandler+0xb2>
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	0a5b      	lsrs	r3, r3, #9
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fdf9 	bl	800731e <I2C_Master_ADD10>
 800672c:	e082      	b.n	8006834 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	085b      	lsrs	r3, r3, #1
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d009      	beq.n	800674e <HAL_I2C_EV_IRQHandler+0xd2>
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	0a5b      	lsrs	r3, r3, #9
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fe13 	bl	8007372 <I2C_Master_ADDR>
 800674c:	e072      	b.n	8006834 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	089b      	lsrs	r3, r3, #2
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	d03b      	beq.n	80067d2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006768:	f000 80f3 	beq.w	8006952 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	09db      	lsrs	r3, r3, #7
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00f      	beq.n	8006798 <HAL_I2C_EV_IRQHandler+0x11c>
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	0a9b      	lsrs	r3, r3, #10
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b00      	cmp	r3, #0
 8006782:	d009      	beq.n	8006798 <HAL_I2C_EV_IRQHandler+0x11c>
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	089b      	lsrs	r3, r3, #2
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d103      	bne.n	8006798 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f9f3 	bl	8006b7c <I2C_MasterTransmit_TXE>
 8006796:	e04d      	b.n	8006834 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	089b      	lsrs	r3, r3, #2
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 80d6 	beq.w	8006952 <HAL_I2C_EV_IRQHandler+0x2d6>
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	0a5b      	lsrs	r3, r3, #9
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 80cf 	beq.w	8006952 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
 80067b6:	2b21      	cmp	r3, #33	; 0x21
 80067b8:	d103      	bne.n	80067c2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fa7a 	bl	8006cb4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067c0:	e0c7      	b.n	8006952 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
 80067c4:	2b40      	cmp	r3, #64	; 0x40
 80067c6:	f040 80c4 	bne.w	8006952 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fae8 	bl	8006da0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067d0:	e0bf      	b.n	8006952 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067e0:	f000 80b7 	beq.w	8006952 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	099b      	lsrs	r3, r3, #6
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00f      	beq.n	8006810 <HAL_I2C_EV_IRQHandler+0x194>
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	0a9b      	lsrs	r3, r3, #10
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d009      	beq.n	8006810 <HAL_I2C_EV_IRQHandler+0x194>
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	089b      	lsrs	r3, r3, #2
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d103      	bne.n	8006810 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fb5d 	bl	8006ec8 <I2C_MasterReceive_RXNE>
 800680e:	e011      	b.n	8006834 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	089b      	lsrs	r3, r3, #2
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 809a 	beq.w	8006952 <HAL_I2C_EV_IRQHandler+0x2d6>
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	0a5b      	lsrs	r3, r3, #9
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 8093 	beq.w	8006952 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fc06 	bl	800703e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006832:	e08e      	b.n	8006952 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006834:	e08d      	b.n	8006952 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	2b00      	cmp	r3, #0
 800683c:	d004      	beq.n	8006848 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	61fb      	str	r3, [r7, #28]
 8006846:	e007      	b.n	8006858 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	085b      	lsrs	r3, r3, #1
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d012      	beq.n	800688a <HAL_I2C_EV_IRQHandler+0x20e>
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	0a5b      	lsrs	r3, r3, #9
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00c      	beq.n	800688a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006874:	2b00      	cmp	r3, #0
 8006876:	d003      	beq.n	8006880 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006880:	69b9      	ldr	r1, [r7, #24]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 ffc4 	bl	8007810 <I2C_Slave_ADDR>
 8006888:	e066      	b.n	8006958 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	091b      	lsrs	r3, r3, #4
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d009      	beq.n	80068aa <HAL_I2C_EV_IRQHandler+0x22e>
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	0a5b      	lsrs	r3, r3, #9
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fffe 	bl	80078a4 <I2C_Slave_STOPF>
 80068a8:	e056      	b.n	8006958 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80068aa:	7bbb      	ldrb	r3, [r7, #14]
 80068ac:	2b21      	cmp	r3, #33	; 0x21
 80068ae:	d002      	beq.n	80068b6 <HAL_I2C_EV_IRQHandler+0x23a>
 80068b0:	7bbb      	ldrb	r3, [r7, #14]
 80068b2:	2b29      	cmp	r3, #41	; 0x29
 80068b4:	d125      	bne.n	8006902 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	09db      	lsrs	r3, r3, #7
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00f      	beq.n	80068e2 <HAL_I2C_EV_IRQHandler+0x266>
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	0a9b      	lsrs	r3, r3, #10
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d009      	beq.n	80068e2 <HAL_I2C_EV_IRQHandler+0x266>
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	089b      	lsrs	r3, r3, #2
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d103      	bne.n	80068e2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 feda 	bl	8007694 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068e0:	e039      	b.n	8006956 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	089b      	lsrs	r3, r3, #2
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d033      	beq.n	8006956 <HAL_I2C_EV_IRQHandler+0x2da>
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	0a5b      	lsrs	r3, r3, #9
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d02d      	beq.n	8006956 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 ff07 	bl	800770e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006900:	e029      	b.n	8006956 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	099b      	lsrs	r3, r3, #6
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00f      	beq.n	800692e <HAL_I2C_EV_IRQHandler+0x2b2>
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	0a9b      	lsrs	r3, r3, #10
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <HAL_I2C_EV_IRQHandler+0x2b2>
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	089b      	lsrs	r3, r3, #2
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d103      	bne.n	800692e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 ff12 	bl	8007750 <I2C_SlaveReceive_RXNE>
 800692c:	e014      	b.n	8006958 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	089b      	lsrs	r3, r3, #2
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00e      	beq.n	8006958 <HAL_I2C_EV_IRQHandler+0x2dc>
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	0a5b      	lsrs	r3, r3, #9
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d008      	beq.n	8006958 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 ff40 	bl	80077cc <I2C_SlaveReceive_BTF>
 800694c:	e004      	b.n	8006958 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800694e:	bf00      	nop
 8006950:	e002      	b.n	8006958 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006952:	bf00      	nop
 8006954:	e000      	b.n	8006958 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006956:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006958:	3720      	adds	r7, #32
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b08a      	sub	sp, #40	; 0x28
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006976:	2300      	movs	r3, #0
 8006978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006980:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	0a1b      	lsrs	r3, r3, #8
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00e      	beq.n	80069ac <HAL_I2C_ER_IRQHandler+0x4e>
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	0a1b      	lsrs	r3, r3, #8
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d008      	beq.n	80069ac <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	f043 0301 	orr.w	r3, r3, #1
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069aa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	0a5b      	lsrs	r3, r3, #9
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00e      	beq.n	80069d6 <HAL_I2C_ER_IRQHandler+0x78>
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	0a1b      	lsrs	r3, r3, #8
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d008      	beq.n	80069d6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	f043 0302 	orr.w	r3, r3, #2
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80069d4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	0a9b      	lsrs	r3, r3, #10
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d03f      	beq.n	8006a62 <HAL_I2C_ER_IRQHandler+0x104>
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	0a1b      	lsrs	r3, r3, #8
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d039      	beq.n	8006a62 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80069ee:	7efb      	ldrb	r3, [r7, #27]
 80069f0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a00:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006a08:	7ebb      	ldrb	r3, [r7, #26]
 8006a0a:	2b20      	cmp	r3, #32
 8006a0c:	d112      	bne.n	8006a34 <HAL_I2C_ER_IRQHandler+0xd6>
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10f      	bne.n	8006a34 <HAL_I2C_ER_IRQHandler+0xd6>
 8006a14:	7cfb      	ldrb	r3, [r7, #19]
 8006a16:	2b21      	cmp	r3, #33	; 0x21
 8006a18:	d008      	beq.n	8006a2c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006a1a:	7cfb      	ldrb	r3, [r7, #19]
 8006a1c:	2b29      	cmp	r3, #41	; 0x29
 8006a1e:	d005      	beq.n	8006a2c <HAL_I2C_ER_IRQHandler+0xce>
 8006a20:	7cfb      	ldrb	r3, [r7, #19]
 8006a22:	2b28      	cmp	r3, #40	; 0x28
 8006a24:	d106      	bne.n	8006a34 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b21      	cmp	r3, #33	; 0x21
 8006a2a:	d103      	bne.n	8006a34 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 f869 	bl	8007b04 <I2C_Slave_AF>
 8006a32:	e016      	b.n	8006a62 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a3c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	f043 0304 	orr.w	r3, r3, #4
 8006a44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006a46:	7efb      	ldrb	r3, [r7, #27]
 8006a48:	2b10      	cmp	r3, #16
 8006a4a:	d002      	beq.n	8006a52 <HAL_I2C_ER_IRQHandler+0xf4>
 8006a4c:	7efb      	ldrb	r3, [r7, #27]
 8006a4e:	2b40      	cmp	r3, #64	; 0x40
 8006a50:	d107      	bne.n	8006a62 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a60:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	0adb      	lsrs	r3, r3, #11
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00e      	beq.n	8006a8c <HAL_I2C_ER_IRQHandler+0x12e>
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	0a1b      	lsrs	r3, r3, #8
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d008      	beq.n	8006a8c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	f043 0308 	orr.w	r3, r3, #8
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006a8a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d008      	beq.n	8006aa4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f001 f8a0 	bl	8007be4 <I2C_ITError>
  }
}
 8006aa4:	bf00      	nop
 8006aa6:	3728      	adds	r7, #40	; 0x28
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70fb      	strb	r3, [r7, #3]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b8a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b92:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d150      	bne.n	8006c44 <I2C_MasterTransmit_TXE+0xc8>
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	2b21      	cmp	r3, #33	; 0x21
 8006ba6:	d14d      	bne.n	8006c44 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2b08      	cmp	r3, #8
 8006bac:	d01d      	beq.n	8006bea <I2C_MasterTransmit_TXE+0x6e>
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2b20      	cmp	r3, #32
 8006bb2:	d01a      	beq.n	8006bea <I2C_MasterTransmit_TXE+0x6e>
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bba:	d016      	beq.n	8006bea <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bca:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2211      	movs	r2, #17
 8006bd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7ff ff62 	bl	8006aac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006be8:	e060      	b.n	8006cac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bf8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c08:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b40      	cmp	r3, #64	; 0x40
 8006c22:	d107      	bne.n	8006c34 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff ff7d 	bl	8006b2c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c32:	e03b      	b.n	8006cac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7ff ff35 	bl	8006aac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c42:	e033      	b.n	8006cac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	2b21      	cmp	r3, #33	; 0x21
 8006c48:	d005      	beq.n	8006c56 <I2C_MasterTransmit_TXE+0xda>
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	2b40      	cmp	r3, #64	; 0x40
 8006c4e:	d12d      	bne.n	8006cac <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	2b22      	cmp	r3, #34	; 0x22
 8006c54:	d12a      	bne.n	8006cac <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d108      	bne.n	8006c72 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c6e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006c70:	e01c      	b.n	8006cac <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b40      	cmp	r3, #64	; 0x40
 8006c7c:	d103      	bne.n	8006c86 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f88e 	bl	8006da0 <I2C_MemoryTransmit_TXE_BTF>
}
 8006c84:	e012      	b.n	8006cac <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	781a      	ldrb	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006caa:	e7ff      	b.n	8006cac <I2C_MasterTransmit_TXE+0x130>
 8006cac:	bf00      	nop
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b21      	cmp	r3, #33	; 0x21
 8006ccc:	d164      	bne.n	8006d98 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d012      	beq.n	8006cfe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	781a      	ldrb	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006cfc:	e04c      	b.n	8006d98 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d01d      	beq.n	8006d40 <I2C_MasterTransmit_BTF+0x8c>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2b20      	cmp	r3, #32
 8006d08:	d01a      	beq.n	8006d40 <I2C_MasterTransmit_BTF+0x8c>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d10:	d016      	beq.n	8006d40 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d20:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2211      	movs	r2, #17
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2220      	movs	r2, #32
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7ff feb7 	bl	8006aac <HAL_I2C_MasterTxCpltCallback>
}
 8006d3e:	e02b      	b.n	8006d98 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d4e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d5e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b40      	cmp	r3, #64	; 0x40
 8006d78:	d107      	bne.n	8006d8a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff fed2 	bl	8006b2c <HAL_I2C_MemTxCpltCallback>
}
 8006d88:	e006      	b.n	8006d98 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7ff fe8a 	bl	8006aac <HAL_I2C_MasterTxCpltCallback>
}
 8006d98:	bf00      	nop
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d11d      	bne.n	8006df4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d10b      	bne.n	8006dd8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd0:	1c9a      	adds	r2, r3, #2
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006dd6:	e073      	b.n	8006ec0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	121b      	asrs	r3, r3, #8
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dec:	1c5a      	adds	r2, r3, #1
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006df2:	e065      	b.n	8006ec0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d10b      	bne.n	8006e14 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006e12:	e055      	b.n	8006ec0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d151      	bne.n	8006ec0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	2b22      	cmp	r3, #34	; 0x22
 8006e20:	d10d      	bne.n	8006e3e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e30:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006e3c:	e040      	b.n	8006ec0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d015      	beq.n	8006e74 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	2b21      	cmp	r3, #33	; 0x21
 8006e4c:	d112      	bne.n	8006e74 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	781a      	ldrb	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006e72:	e025      	b.n	8006ec0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d120      	bne.n	8006ec0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
 8006e80:	2b21      	cmp	r3, #33	; 0x21
 8006e82:	d11d      	bne.n	8006ec0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685a      	ldr	r2, [r3, #4]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e92:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ea2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff fe36 	bl	8006b2c <HAL_I2C_MemTxCpltCallback>
}
 8006ec0:	bf00      	nop
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b22      	cmp	r3, #34	; 0x22
 8006eda:	f040 80ac 	bne.w	8007036 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d921      	bls.n	8006f30 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691a      	ldr	r2, [r3, #16]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	2b03      	cmp	r3, #3
 8006f1a:	f040 808c 	bne.w	8007036 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f2c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006f2e:	e082      	b.n	8007036 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d075      	beq.n	8007024 <I2C_MasterReceive_RXNE+0x15c>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d002      	beq.n	8006f44 <I2C_MasterReceive_RXNE+0x7c>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d16f      	bne.n	8007024 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f001 facf 	bl	80084e8 <I2C_WaitOnSTOPRequestThroughIT>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d142      	bne.n	8006fd6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f5e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f6e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	691a      	ldr	r2, [r3, #16]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b40      	cmp	r3, #64	; 0x40
 8006fa8:	d10a      	bne.n	8006fc0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7ff fdc1 	bl	8006b40 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006fbe:	e03a      	b.n	8007036 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2212      	movs	r2, #18
 8006fcc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7ff fd76 	bl	8006ac0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006fd4:	e02f      	b.n	8007036 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fe4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	b2d2      	uxtb	r2, r2
 8006ff2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007002:	b29b      	uxth	r3, r3
 8007004:	3b01      	subs	r3, #1
 8007006:	b29a      	uxth	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2220      	movs	r2, #32
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff fd99 	bl	8006b54 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007022:	e008      	b.n	8007036 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007032:	605a      	str	r2, [r3, #4]
}
 8007034:	e7ff      	b.n	8007036 <I2C_MasterReceive_RXNE+0x16e>
 8007036:	bf00      	nop
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007050:	b29b      	uxth	r3, r3
 8007052:	2b04      	cmp	r3, #4
 8007054:	d11b      	bne.n	800708e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007064:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	691a      	ldr	r2, [r3, #16]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007070:	b2d2      	uxtb	r2, r2
 8007072:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007082:	b29b      	uxth	r3, r3
 8007084:	3b01      	subs	r3, #1
 8007086:	b29a      	uxth	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800708c:	e0bd      	b.n	800720a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007092:	b29b      	uxth	r3, r3
 8007094:	2b03      	cmp	r3, #3
 8007096:	d129      	bne.n	80070ec <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070a6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	d00a      	beq.n	80070c4 <I2C_MasterReceive_BTF+0x86>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d007      	beq.n	80070c4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	691a      	ldr	r2, [r3, #16]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80070ea:	e08e      	b.n	800720a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d176      	bne.n	80071e4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d002      	beq.n	8007102 <I2C_MasterReceive_BTF+0xc4>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b10      	cmp	r3, #16
 8007100:	d108      	bne.n	8007114 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	e019      	b.n	8007148 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2b04      	cmp	r3, #4
 8007118:	d002      	beq.n	8007120 <I2C_MasterReceive_BTF+0xe2>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b02      	cmp	r3, #2
 800711e:	d108      	bne.n	8007132 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	e00a      	b.n	8007148 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b10      	cmp	r3, #16
 8007136:	d007      	beq.n	8007148 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007146:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	691a      	ldr	r2, [r3, #16]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007164:	b29b      	uxth	r3, r3
 8007166:	3b01      	subs	r3, #1
 8007168:	b29a      	uxth	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	691a      	ldr	r2, [r3, #16]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	b2d2      	uxtb	r2, r2
 800717a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800718a:	b29b      	uxth	r3, r3
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80071a2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b40      	cmp	r3, #64	; 0x40
 80071b6:	d10a      	bne.n	80071ce <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7ff fcba 	bl	8006b40 <HAL_I2C_MemRxCpltCallback>
}
 80071cc:	e01d      	b.n	800720a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2212      	movs	r2, #18
 80071da:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7ff fc6f 	bl	8006ac0 <HAL_I2C_MasterRxCpltCallback>
}
 80071e2:	e012      	b.n	800720a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691a      	ldr	r2, [r3, #16]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	b2d2      	uxtb	r2, r2
 80071f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800720a:	bf00      	nop
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b40      	cmp	r3, #64	; 0x40
 8007224:	d117      	bne.n	8007256 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800722a:	2b00      	cmp	r3, #0
 800722c:	d109      	bne.n	8007242 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007232:	b2db      	uxtb	r3, r3
 8007234:	461a      	mov	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800723e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007240:	e067      	b.n	8007312 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007246:	b2db      	uxtb	r3, r3
 8007248:	f043 0301 	orr.w	r3, r3, #1
 800724c:	b2da      	uxtb	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	611a      	str	r2, [r3, #16]
}
 8007254:	e05d      	b.n	8007312 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800725e:	d133      	bne.n	80072c8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b21      	cmp	r3, #33	; 0x21
 800726a:	d109      	bne.n	8007280 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007270:	b2db      	uxtb	r3, r3
 8007272:	461a      	mov	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800727c:	611a      	str	r2, [r3, #16]
 800727e:	e008      	b.n	8007292 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007284:	b2db      	uxtb	r3, r3
 8007286:	f043 0301 	orr.w	r3, r3, #1
 800728a:	b2da      	uxtb	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007296:	2b00      	cmp	r3, #0
 8007298:	d004      	beq.n	80072a4 <I2C_Master_SB+0x92>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d108      	bne.n	80072b6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d032      	beq.n	8007312 <I2C_Master_SB+0x100>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d02d      	beq.n	8007312 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072c4:	605a      	str	r2, [r3, #4]
}
 80072c6:	e024      	b.n	8007312 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10e      	bne.n	80072ee <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	11db      	asrs	r3, r3, #7
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	f003 0306 	and.w	r3, r3, #6
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	f063 030f 	orn	r3, r3, #15
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	611a      	str	r2, [r3, #16]
}
 80072ec:	e011      	b.n	8007312 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d10d      	bne.n	8007312 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	11db      	asrs	r3, r3, #7
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	f003 0306 	and.w	r3, r3, #6
 8007304:	b2db      	uxtb	r3, r3
 8007306:	f063 030e 	orn	r3, r3, #14
 800730a:	b2da      	uxtb	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	611a      	str	r2, [r3, #16]
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800732a:	b2da      	uxtb	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007336:	2b00      	cmp	r3, #0
 8007338:	d004      	beq.n	8007344 <I2C_Master_ADD10+0x26>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007340:	2b00      	cmp	r3, #0
 8007342:	d108      	bne.n	8007356 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00c      	beq.n	8007366 <I2C_Master_ADD10+0x48>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007352:	2b00      	cmp	r3, #0
 8007354:	d007      	beq.n	8007366 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007364:	605a      	str	r2, [r3, #4]
  }
}
 8007366:	bf00      	nop
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007372:	b480      	push	{r7}
 8007374:	b091      	sub	sp, #68	; 0x44
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007380:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b22      	cmp	r3, #34	; 0x22
 800739a:	f040 8169 	bne.w	8007670 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10f      	bne.n	80073c6 <I2C_Master_ADDR+0x54>
 80073a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80073aa:	2b40      	cmp	r3, #64	; 0x40
 80073ac:	d10b      	bne.n	80073c6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073ae:	2300      	movs	r3, #0
 80073b0:	633b      	str	r3, [r7, #48]	; 0x30
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	633b      	str	r3, [r7, #48]	; 0x30
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	633b      	str	r3, [r7, #48]	; 0x30
 80073c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c4:	e160      	b.n	8007688 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d11d      	bne.n	800740a <I2C_Master_ADDR+0x98>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073d6:	d118      	bne.n	800740a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073d8:	2300      	movs	r3, #0
 80073da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073fc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	651a      	str	r2, [r3, #80]	; 0x50
 8007408:	e13e      	b.n	8007688 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800740e:	b29b      	uxth	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d113      	bne.n	800743c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007414:	2300      	movs	r3, #0
 8007416:	62bb      	str	r3, [r7, #40]	; 0x28
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	62bb      	str	r3, [r7, #40]	; 0x28
 8007428:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	e115      	b.n	8007668 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b01      	cmp	r3, #1
 8007444:	f040 808a 	bne.w	800755c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800744e:	d137      	bne.n	80074c0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800745e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800746a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800746e:	d113      	bne.n	8007498 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800747e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007480:	2300      	movs	r3, #0
 8007482:	627b      	str	r3, [r7, #36]	; 0x24
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	627b      	str	r3, [r7, #36]	; 0x24
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	e0e7      	b.n	8007668 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007498:	2300      	movs	r3, #0
 800749a:	623b      	str	r3, [r7, #32]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	623b      	str	r3, [r7, #32]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	623b      	str	r3, [r7, #32]
 80074ac:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	e0d3      	b.n	8007668 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80074c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c2:	2b08      	cmp	r3, #8
 80074c4:	d02e      	beq.n	8007524 <I2C_Master_ADDR+0x1b2>
 80074c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	d02b      	beq.n	8007524 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80074cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ce:	2b12      	cmp	r3, #18
 80074d0:	d102      	bne.n	80074d8 <I2C_Master_ADDR+0x166>
 80074d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d125      	bne.n	8007524 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80074d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074da:	2b04      	cmp	r3, #4
 80074dc:	d00e      	beq.n	80074fc <I2C_Master_ADDR+0x18a>
 80074de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d00b      	beq.n	80074fc <I2C_Master_ADDR+0x18a>
 80074e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e6:	2b10      	cmp	r3, #16
 80074e8:	d008      	beq.n	80074fc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	e007      	b.n	800750c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800750a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800750c:	2300      	movs	r3, #0
 800750e:	61fb      	str	r3, [r7, #28]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	61fb      	str	r3, [r7, #28]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	61fb      	str	r3, [r7, #28]
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	e0a1      	b.n	8007668 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007532:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007534:	2300      	movs	r3, #0
 8007536:	61bb      	str	r3, [r7, #24]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	61bb      	str	r3, [r7, #24]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	61bb      	str	r3, [r7, #24]
 8007548:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	e085      	b.n	8007668 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b02      	cmp	r3, #2
 8007564:	d14d      	bne.n	8007602 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007568:	2b04      	cmp	r3, #4
 800756a:	d016      	beq.n	800759a <I2C_Master_ADDR+0x228>
 800756c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756e:	2b02      	cmp	r3, #2
 8007570:	d013      	beq.n	800759a <I2C_Master_ADDR+0x228>
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007574:	2b10      	cmp	r3, #16
 8007576:	d010      	beq.n	800759a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007586:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	e007      	b.n	80075aa <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075a8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075b8:	d117      	bne.n	80075ea <I2C_Master_ADDR+0x278>
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075c0:	d00b      	beq.n	80075da <I2C_Master_ADDR+0x268>
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d008      	beq.n	80075da <I2C_Master_ADDR+0x268>
 80075c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ca:	2b08      	cmp	r3, #8
 80075cc:	d005      	beq.n	80075da <I2C_Master_ADDR+0x268>
 80075ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d0:	2b10      	cmp	r3, #16
 80075d2:	d002      	beq.n	80075da <I2C_Master_ADDR+0x268>
 80075d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d6:	2b20      	cmp	r3, #32
 80075d8:	d107      	bne.n	80075ea <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	617b      	str	r3, [r7, #20]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	617b      	str	r3, [r7, #20]
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	e032      	b.n	8007668 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007610:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800761c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007620:	d117      	bne.n	8007652 <I2C_Master_ADDR+0x2e0>
 8007622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007624:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007628:	d00b      	beq.n	8007642 <I2C_Master_ADDR+0x2d0>
 800762a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762c:	2b01      	cmp	r3, #1
 800762e:	d008      	beq.n	8007642 <I2C_Master_ADDR+0x2d0>
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	2b08      	cmp	r3, #8
 8007634:	d005      	beq.n	8007642 <I2C_Master_ADDR+0x2d0>
 8007636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007638:	2b10      	cmp	r3, #16
 800763a:	d002      	beq.n	8007642 <I2C_Master_ADDR+0x2d0>
 800763c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763e:	2b20      	cmp	r3, #32
 8007640:	d107      	bne.n	8007652 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685a      	ldr	r2, [r3, #4]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007650:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007652:	2300      	movs	r3, #0
 8007654:	613b      	str	r3, [r7, #16]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	695b      	ldr	r3, [r3, #20]
 800765c:	613b      	str	r3, [r7, #16]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	613b      	str	r3, [r7, #16]
 8007666:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800766e:	e00b      	b.n	8007688 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007670:	2300      	movs	r3, #0
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	68fb      	ldr	r3, [r7, #12]
}
 8007686:	e7ff      	b.n	8007688 <I2C_Master_ADDR+0x316>
 8007688:	bf00      	nop
 800768a:	3744      	adds	r7, #68	; 0x44
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d02b      	beq.n	8007706 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	781a      	ldrb	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d114      	bne.n	8007706 <I2C_SlaveTransmit_TXE+0x72>
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	2b29      	cmp	r3, #41	; 0x29
 80076e0:	d111      	bne.n	8007706 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2221      	movs	r2, #33	; 0x21
 80076f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2228      	movs	r2, #40	; 0x28
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7ff f9e7 	bl	8006ad4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007706:	bf00      	nop
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771a:	b29b      	uxth	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	d011      	beq.n	8007744 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	781a      	ldrb	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800773a:	b29b      	uxth	r3, r3
 800773c:	3b01      	subs	r3, #1
 800773e:	b29a      	uxth	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800775e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d02c      	beq.n	80077c4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	691a      	ldr	r2, [r3, #16]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	b2d2      	uxtb	r2, r2
 8007776:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777c:	1c5a      	adds	r2, r3, #1
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007794:	b29b      	uxth	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d114      	bne.n	80077c4 <I2C_SlaveReceive_RXNE+0x74>
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	2b2a      	cmp	r3, #42	; 0x2a
 800779e:	d111      	bne.n	80077c4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2222      	movs	r2, #34	; 0x22
 80077b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2228      	movs	r2, #40	; 0x28
 80077ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff f992 	bl	8006ae8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80077c4:	bf00      	nop
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d8:	b29b      	uxth	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d012      	beq.n	8007804 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	691a      	ldr	r2, [r3, #16]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	b2d2      	uxtb	r2, r2
 80077ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	3b01      	subs	r3, #1
 80077fe:	b29a      	uxth	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007824:	b2db      	uxtb	r3, r3
 8007826:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800782a:	2b28      	cmp	r3, #40	; 0x28
 800782c:	d127      	bne.n	800787e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800783c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	089b      	lsrs	r3, r3, #2
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800784a:	2301      	movs	r3, #1
 800784c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	09db      	lsrs	r3, r3, #7
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b00      	cmp	r3, #0
 8007858:	d103      	bne.n	8007862 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	81bb      	strh	r3, [r7, #12]
 8007860:	e002      	b.n	8007868 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007870:	89ba      	ldrh	r2, [r7, #12]
 8007872:	7bfb      	ldrb	r3, [r7, #15]
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7ff f940 	bl	8006afc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800787c:	e00e      	b.n	800789c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800787e:	2300      	movs	r3, #0
 8007880:	60bb      	str	r3, [r7, #8]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	60bb      	str	r3, [r7, #8]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	60bb      	str	r3, [r7, #8]
 8007892:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800789c:	bf00      	nop
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078c2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80078c4:	2300      	movs	r3, #0
 80078c6:	60bb      	str	r3, [r7, #8]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	60bb      	str	r3, [r7, #8]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f042 0201 	orr.w	r2, r2, #1
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078f0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007900:	d172      	bne.n	80079e8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	2b22      	cmp	r3, #34	; 0x22
 8007906:	d002      	beq.n	800790e <I2C_Slave_STOPF+0x6a>
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	2b2a      	cmp	r3, #42	; 0x2a
 800790c:	d135      	bne.n	800797a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	b29a      	uxth	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007920:	b29b      	uxth	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d005      	beq.n	8007932 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792a:	f043 0204 	orr.w	r2, r3, #4
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007940:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007946:	4618      	mov	r0, r3
 8007948:	f7fd ff80 	bl	800584c <HAL_DMA_GetState>
 800794c:	4603      	mov	r3, r0
 800794e:	2b01      	cmp	r3, #1
 8007950:	d049      	beq.n	80079e6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007956:	4a69      	ldr	r2, [pc, #420]	; (8007afc <I2C_Slave_STOPF+0x258>)
 8007958:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795e:	4618      	mov	r0, r3
 8007960:	f7fd fdc8 	bl	80054f4 <HAL_DMA_Abort_IT>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d03d      	beq.n	80079e6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007974:	4610      	mov	r0, r2
 8007976:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007978:	e035      	b.n	80079e6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	b29a      	uxth	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800798c:	b29b      	uxth	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d005      	beq.n	800799e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007996:	f043 0204 	orr.w	r2, r3, #4
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fd ff4a 	bl	800584c <HAL_DMA_GetState>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d014      	beq.n	80079e8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c2:	4a4e      	ldr	r2, [pc, #312]	; (8007afc <I2C_Slave_STOPF+0x258>)
 80079c4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fd fd92 	bl	80054f4 <HAL_DMA_Abort_IT>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d008      	beq.n	80079e8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80079e0:	4610      	mov	r0, r2
 80079e2:	4798      	blx	r3
 80079e4:	e000      	b.n	80079e8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80079e6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d03e      	beq.n	8007a70 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b04      	cmp	r3, #4
 80079fe:	d112      	bne.n	8007a26 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	691a      	ldr	r2, [r3, #16]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0a:	b2d2      	uxtb	r2, r2
 8007a0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a30:	2b40      	cmp	r3, #64	; 0x40
 8007a32:	d112      	bne.n	8007a5a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	691a      	ldr	r2, [r3, #16]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3e:	b2d2      	uxtb	r2, r2
 8007a40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	3b01      	subs	r3, #1
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d005      	beq.n	8007a70 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a68:	f043 0204 	orr.w	r2, r3, #4
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d003      	beq.n	8007a80 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f8b3 	bl	8007be4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007a7e:	e039      	b.n	8007af4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
 8007a82:	2b2a      	cmp	r3, #42	; 0x2a
 8007a84:	d109      	bne.n	8007a9a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2228      	movs	r2, #40	; 0x28
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7ff f827 	bl	8006ae8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b28      	cmp	r3, #40	; 0x28
 8007aa4:	d111      	bne.n	8007aca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a15      	ldr	r2, [pc, #84]	; (8007b00 <I2C_Slave_STOPF+0x25c>)
 8007aaa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7ff f828 	bl	8006b18 <HAL_I2C_ListenCpltCallback>
}
 8007ac8:	e014      	b.n	8007af4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ace:	2b22      	cmp	r3, #34	; 0x22
 8007ad0:	d002      	beq.n	8007ad8 <I2C_Slave_STOPF+0x234>
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
 8007ad4:	2b22      	cmp	r3, #34	; 0x22
 8007ad6:	d10d      	bne.n	8007af4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7fe fffa 	bl	8006ae8 <HAL_I2C_SlaveRxCpltCallback>
}
 8007af4:	bf00      	nop
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	080080e9 	.word	0x080080e9
 8007b00:	ffff0000 	.word	0xffff0000

08007b04 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b12:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b18:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b08      	cmp	r3, #8
 8007b1e:	d002      	beq.n	8007b26 <I2C_Slave_AF+0x22>
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2b20      	cmp	r3, #32
 8007b24:	d129      	bne.n	8007b7a <I2C_Slave_AF+0x76>
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
 8007b28:	2b28      	cmp	r3, #40	; 0x28
 8007b2a:	d126      	bne.n	8007b7a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a2c      	ldr	r2, [pc, #176]	; (8007be0 <I2C_Slave_AF+0xdc>)
 8007b30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b40:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b4a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b5a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7fe ffd0 	bl	8006b18 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007b78:	e02e      	b.n	8007bd8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
 8007b7c:	2b21      	cmp	r3, #33	; 0x21
 8007b7e:	d126      	bne.n	8007bce <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a17      	ldr	r2, [pc, #92]	; (8007be0 <I2C_Slave_AF+0xdc>)
 8007b84:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2221      	movs	r2, #33	; 0x21
 8007b8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2220      	movs	r2, #32
 8007b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007baa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007bb4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bc4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7fe ff84 	bl	8006ad4 <HAL_I2C_SlaveTxCpltCallback>
}
 8007bcc:	e004      	b.n	8007bd8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007bd6:	615a      	str	r2, [r3, #20]
}
 8007bd8:	bf00      	nop
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	ffff0000 	.word	0xffff0000

08007be4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bfa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
 8007bfe:	2b10      	cmp	r3, #16
 8007c00:	d002      	beq.n	8007c08 <I2C_ITError+0x24>
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	2b40      	cmp	r3, #64	; 0x40
 8007c06:	d10a      	bne.n	8007c1e <I2C_ITError+0x3a>
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	2b22      	cmp	r3, #34	; 0x22
 8007c0c:	d107      	bne.n	8007c1e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c1c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c24:	2b28      	cmp	r3, #40	; 0x28
 8007c26:	d107      	bne.n	8007c38 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2228      	movs	r2, #40	; 0x28
 8007c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007c36:	e015      	b.n	8007c64 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c46:	d00a      	beq.n	8007c5e <I2C_ITError+0x7a>
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	2b60      	cmp	r3, #96	; 0x60
 8007c4c:	d007      	beq.n	8007c5e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c72:	d162      	bne.n	8007d3a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c82:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d020      	beq.n	8007cd4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c96:	4a6a      	ldr	r2, [pc, #424]	; (8007e40 <I2C_ITError+0x25c>)
 8007c98:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fd fc28 	bl	80054f4 <HAL_DMA_Abort_IT>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f000 8089 	beq.w	8007dbe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0201 	bic.w	r2, r2, #1
 8007cba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007cce:	4610      	mov	r0, r2
 8007cd0:	4798      	blx	r3
 8007cd2:	e074      	b.n	8007dbe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd8:	4a59      	ldr	r2, [pc, #356]	; (8007e40 <I2C_ITError+0x25c>)
 8007cda:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fd fc07 	bl	80054f4 <HAL_DMA_Abort_IT>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d068      	beq.n	8007dbe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf6:	2b40      	cmp	r3, #64	; 0x40
 8007cf8:	d10b      	bne.n	8007d12 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	691a      	ldr	r2, [r3, #16]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d04:	b2d2      	uxtb	r2, r2
 8007d06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	1c5a      	adds	r2, r3, #1
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f022 0201 	bic.w	r2, r2, #1
 8007d20:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d34:	4610      	mov	r0, r2
 8007d36:	4798      	blx	r3
 8007d38:	e041      	b.n	8007dbe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b60      	cmp	r3, #96	; 0x60
 8007d44:	d125      	bne.n	8007d92 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5e:	2b40      	cmp	r3, #64	; 0x40
 8007d60:	d10b      	bne.n	8007d7a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	691a      	ldr	r2, [r3, #16]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	b2d2      	uxtb	r2, r2
 8007d6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 0201 	bic.w	r2, r2, #1
 8007d88:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7fe feec 	bl	8006b68 <HAL_I2C_AbortCpltCallback>
 8007d90:	e015      	b.n	8007dbe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9c:	2b40      	cmp	r3, #64	; 0x40
 8007d9e:	d10b      	bne.n	8007db8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	691a      	ldr	r2, [r3, #16]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7fe fecb 	bl	8006b54 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10e      	bne.n	8007dec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d109      	bne.n	8007dec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d104      	bne.n	8007dec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d007      	beq.n	8007dfc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007dfa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e02:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e08:	f003 0304 	and.w	r3, r3, #4
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	d113      	bne.n	8007e38 <I2C_ITError+0x254>
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	2b28      	cmp	r3, #40	; 0x28
 8007e14:	d110      	bne.n	8007e38 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a0a      	ldr	r2, [pc, #40]	; (8007e44 <I2C_ITError+0x260>)
 8007e1a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2220      	movs	r2, #32
 8007e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7fe fe70 	bl	8006b18 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007e38:	bf00      	nop
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	080080e9 	.word	0x080080e9
 8007e44:	ffff0000 	.word	0xffff0000

08007e48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b088      	sub	sp, #32
 8007e4c:	af02      	add	r7, sp, #8
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	607a      	str	r2, [r7, #4]
 8007e52:	603b      	str	r3, [r7, #0]
 8007e54:	460b      	mov	r3, r1
 8007e56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2b08      	cmp	r3, #8
 8007e62:	d006      	beq.n	8007e72 <I2C_MasterRequestWrite+0x2a>
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d003      	beq.n	8007e72 <I2C_MasterRequestWrite+0x2a>
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e70:	d108      	bne.n	8007e84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	e00b      	b.n	8007e9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e88:	2b12      	cmp	r3, #18
 8007e8a:	d107      	bne.n	8007e9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f000 f9c5 	bl	8008238 <I2C_WaitOnFlagUntilTimeout>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00d      	beq.n	8007ed0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec2:	d103      	bne.n	8007ecc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e035      	b.n	8007f3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ed8:	d108      	bne.n	8007eec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007eda:	897b      	ldrh	r3, [r7, #10]
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	461a      	mov	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ee8:	611a      	str	r2, [r3, #16]
 8007eea:	e01b      	b.n	8007f24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007eec:	897b      	ldrh	r3, [r7, #10]
 8007eee:	11db      	asrs	r3, r3, #7
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	f003 0306 	and.w	r3, r3, #6
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	f063 030f 	orn	r3, r3, #15
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	490e      	ldr	r1, [pc, #56]	; (8007f44 <I2C_MasterRequestWrite+0xfc>)
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 f9eb 	bl	80082e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e010      	b.n	8007f3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007f1a:	897b      	ldrh	r3, [r7, #10]
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	4907      	ldr	r1, [pc, #28]	; (8007f48 <I2C_MasterRequestWrite+0x100>)
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f000 f9db 	bl	80082e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e000      	b.n	8007f3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3718      	adds	r7, #24
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	00010008 	.word	0x00010008
 8007f48:	00010002 	.word	0x00010002

08007f4c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b088      	sub	sp, #32
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	607a      	str	r2, [r7, #4]
 8007f56:	603b      	str	r3, [r7, #0]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f60:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f70:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2b08      	cmp	r3, #8
 8007f76:	d006      	beq.n	8007f86 <I2C_MasterRequestRead+0x3a>
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d003      	beq.n	8007f86 <I2C_MasterRequestRead+0x3a>
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007f84:	d108      	bne.n	8007f98 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	e00b      	b.n	8007fb0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9c:	2b11      	cmp	r3, #17
 8007f9e:	d107      	bne.n	8007fb0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 f93b 	bl	8008238 <I2C_WaitOnFlagUntilTimeout>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00d      	beq.n	8007fe4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fd6:	d103      	bne.n	8007fe0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e079      	b.n	80080d8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fec:	d108      	bne.n	8008000 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007fee:	897b      	ldrh	r3, [r7, #10]
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	f043 0301 	orr.w	r3, r3, #1
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	611a      	str	r2, [r3, #16]
 8007ffe:	e05f      	b.n	80080c0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008000:	897b      	ldrh	r3, [r7, #10]
 8008002:	11db      	asrs	r3, r3, #7
 8008004:	b2db      	uxtb	r3, r3
 8008006:	f003 0306 	and.w	r3, r3, #6
 800800a:	b2db      	uxtb	r3, r3
 800800c:	f063 030f 	orn	r3, r3, #15
 8008010:	b2da      	uxtb	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	4930      	ldr	r1, [pc, #192]	; (80080e0 <I2C_MasterRequestRead+0x194>)
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f000 f961 	bl	80082e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e054      	b.n	80080d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800802e:	897b      	ldrh	r3, [r7, #10]
 8008030:	b2da      	uxtb	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	4929      	ldr	r1, [pc, #164]	; (80080e4 <I2C_MasterRequestRead+0x198>)
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 f951 	bl	80082e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e044      	b.n	80080d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800804e:	2300      	movs	r3, #0
 8008050:	613b      	str	r3, [r7, #16]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	613b      	str	r3, [r7, #16]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	613b      	str	r3, [r7, #16]
 8008062:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008072:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 f8d9 	bl	8008238 <I2C_WaitOnFlagUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00d      	beq.n	80080a8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800809a:	d103      	bne.n	80080a4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e017      	b.n	80080d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80080a8:	897b      	ldrh	r3, [r7, #10]
 80080aa:	11db      	asrs	r3, r3, #7
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	f003 0306 	and.w	r3, r3, #6
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	f063 030e 	orn	r3, r3, #14
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	4907      	ldr	r1, [pc, #28]	; (80080e4 <I2C_MasterRequestRead+0x198>)
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 f90d 	bl	80082e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e000      	b.n	80080d8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	00010008 	.word	0x00010008
 80080e4:	00010002 	.word	0x00010002

080080e8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008100:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008102:	4b4b      	ldr	r3, [pc, #300]	; (8008230 <I2C_DMAAbort+0x148>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	08db      	lsrs	r3, r3, #3
 8008108:	4a4a      	ldr	r2, [pc, #296]	; (8008234 <I2C_DMAAbort+0x14c>)
 800810a:	fba2 2303 	umull	r2, r3, r2, r3
 800810e:	0a1a      	lsrs	r2, r3, #8
 8008110:	4613      	mov	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	00da      	lsls	r2, r3, #3
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008126:	f043 0220 	orr.w	r2, r3, #32
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800812e:	e00a      	b.n	8008146 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	3b01      	subs	r3, #1
 8008134:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008144:	d0ea      	beq.n	800811c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008152:	2200      	movs	r2, #0
 8008154:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008162:	2200      	movs	r2, #0
 8008164:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008174:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2200      	movs	r2, #0
 800817a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008180:	2b00      	cmp	r3, #0
 8008182:	d003      	beq.n	800818c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008188:	2200      	movs	r2, #0
 800818a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008190:	2b00      	cmp	r3, #0
 8008192:	d003      	beq.n	800819c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008198:	2200      	movs	r2, #0
 800819a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0201 	bic.w	r2, r2, #1
 80081aa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b60      	cmp	r3, #96	; 0x60
 80081b6:	d10e      	bne.n	80081d6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2220      	movs	r2, #32
 80081bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	2200      	movs	r2, #0
 80081cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80081ce:	6978      	ldr	r0, [r7, #20]
 80081d0:	f7fe fcca 	bl	8006b68 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80081d4:	e027      	b.n	8008226 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80081d6:	7cfb      	ldrb	r3, [r7, #19]
 80081d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80081dc:	2b28      	cmp	r3, #40	; 0x28
 80081de:	d117      	bne.n	8008210 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f042 0201 	orr.w	r2, r2, #1
 80081ee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	2200      	movs	r2, #0
 8008204:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2228      	movs	r2, #40	; 0x28
 800820a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800820e:	e007      	b.n	8008220 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	2220      	movs	r2, #32
 8008214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008220:	6978      	ldr	r0, [r7, #20]
 8008222:	f7fe fc97 	bl	8006b54 <HAL_I2C_ErrorCallback>
}
 8008226:	bf00      	nop
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20000240 	.word	0x20000240
 8008234:	14f8b589 	.word	0x14f8b589

08008238 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	603b      	str	r3, [r7, #0]
 8008244:	4613      	mov	r3, r2
 8008246:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008248:	e025      	b.n	8008296 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008250:	d021      	beq.n	8008296 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008252:	f7fc fa95 	bl	8004780 <HAL_GetTick>
 8008256:	4602      	mov	r2, r0
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	429a      	cmp	r2, r3
 8008260:	d302      	bcc.n	8008268 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d116      	bne.n	8008296 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2220      	movs	r2, #32
 8008272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	f043 0220 	orr.w	r2, r3, #32
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e023      	b.n	80082de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	0c1b      	lsrs	r3, r3, #16
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b01      	cmp	r3, #1
 800829e:	d10d      	bne.n	80082bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	43da      	mvns	r2, r3
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	4013      	ands	r3, r2
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	bf0c      	ite	eq
 80082b2:	2301      	moveq	r3, #1
 80082b4:	2300      	movne	r3, #0
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	461a      	mov	r2, r3
 80082ba:	e00c      	b.n	80082d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	43da      	mvns	r2, r3
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	4013      	ands	r3, r2
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	bf0c      	ite	eq
 80082ce:	2301      	moveq	r3, #1
 80082d0:	2300      	movne	r3, #0
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	461a      	mov	r2, r3
 80082d6:	79fb      	ldrb	r3, [r7, #7]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d0b6      	beq.n	800824a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b084      	sub	sp, #16
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	607a      	str	r2, [r7, #4]
 80082f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80082f4:	e051      	b.n	800839a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008304:	d123      	bne.n	800834e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008314:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800831e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2220      	movs	r2, #32
 800832a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	f043 0204 	orr.w	r2, r3, #4
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e046      	b.n	80083dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008354:	d021      	beq.n	800839a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008356:	f7fc fa13 	bl	8004780 <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	429a      	cmp	r2, r3
 8008364:	d302      	bcc.n	800836c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d116      	bne.n	800839a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2220      	movs	r2, #32
 8008376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008386:	f043 0220 	orr.w	r2, r3, #32
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e020      	b.n	80083dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	0c1b      	lsrs	r3, r3, #16
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d10c      	bne.n	80083be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	43da      	mvns	r2, r3
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	4013      	ands	r3, r2
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	bf14      	ite	ne
 80083b6:	2301      	movne	r3, #1
 80083b8:	2300      	moveq	r3, #0
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	e00b      	b.n	80083d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	43da      	mvns	r2, r3
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	4013      	ands	r3, r2
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	bf14      	ite	ne
 80083d0:	2301      	movne	r3, #1
 80083d2:	2300      	moveq	r3, #0
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d18d      	bne.n	80082f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083f0:	e02d      	b.n	800844e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 f900 	bl	80085f8 <I2C_IsAcknowledgeFailed>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e02d      	b.n	800845e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008408:	d021      	beq.n	800844e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800840a:	f7fc f9b9 	bl	8004780 <HAL_GetTick>
 800840e:	4602      	mov	r2, r0
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	429a      	cmp	r2, r3
 8008418:	d302      	bcc.n	8008420 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d116      	bne.n	800844e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2220      	movs	r2, #32
 800842a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843a:	f043 0220 	orr.w	r2, r3, #32
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e007      	b.n	800845e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008458:	2b80      	cmp	r3, #128	; 0x80
 800845a:	d1ca      	bne.n	80083f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b084      	sub	sp, #16
 800846a:	af00      	add	r7, sp, #0
 800846c:	60f8      	str	r0, [r7, #12]
 800846e:	60b9      	str	r1, [r7, #8]
 8008470:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008472:	e02d      	b.n	80084d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 f8bf 	bl	80085f8 <I2C_IsAcknowledgeFailed>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e02d      	b.n	80084e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800848a:	d021      	beq.n	80084d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800848c:	f7fc f978 	bl	8004780 <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	429a      	cmp	r2, r3
 800849a:	d302      	bcc.n	80084a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d116      	bne.n	80084d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2220      	movs	r2, #32
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084bc:	f043 0220 	orr.w	r2, r3, #32
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e007      	b.n	80084e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	f003 0304 	and.w	r3, r3, #4
 80084da:	2b04      	cmp	r3, #4
 80084dc:	d1ca      	bne.n	8008474 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084f0:	2300      	movs	r3, #0
 80084f2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80084f4:	4b13      	ldr	r3, [pc, #76]	; (8008544 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	08db      	lsrs	r3, r3, #3
 80084fa:	4a13      	ldr	r2, [pc, #76]	; (8008548 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80084fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008500:	0a1a      	lsrs	r2, r3, #8
 8008502:	4613      	mov	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3b01      	subs	r3, #1
 800850e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d107      	bne.n	8008526 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851a:	f043 0220 	orr.w	r2, r3, #32
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e008      	b.n	8008538 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008534:	d0e9      	beq.n	800850a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	20000240 	.word	0x20000240
 8008548:	14f8b589 	.word	0x14f8b589

0800854c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008558:	e042      	b.n	80085e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	695b      	ldr	r3, [r3, #20]
 8008560:	f003 0310 	and.w	r3, r3, #16
 8008564:	2b10      	cmp	r3, #16
 8008566:	d119      	bne.n	800859c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f06f 0210 	mvn.w	r2, #16
 8008570:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2220      	movs	r2, #32
 800857c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e029      	b.n	80085f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800859c:	f7fc f8f0 	bl	8004780 <HAL_GetTick>
 80085a0:	4602      	mov	r2, r0
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d302      	bcc.n	80085b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d116      	bne.n	80085e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2220      	movs	r2, #32
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085cc:	f043 0220 	orr.w	r2, r3, #32
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e007      	b.n	80085f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ea:	2b40      	cmp	r3, #64	; 0x40
 80085ec:	d1b5      	bne.n	800855a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800860a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800860e:	d11b      	bne.n	8008648 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008618:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2220      	movs	r2, #32
 8008624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008634:	f043 0204 	orr.w	r2, r3, #4
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	e000      	b.n	800864a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008656:	b480      	push	{r7}
 8008658:	b083      	sub	sp, #12
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008662:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008666:	d103      	bne.n	8008670 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800866e:	e007      	b.n	8008680 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008674:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008678:	d102      	bne.n	8008680 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2208      	movs	r2, #8
 800867e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e267      	b.n	8008b6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 0301 	and.w	r3, r3, #1
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d075      	beq.n	8008796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80086aa:	4b88      	ldr	r3, [pc, #544]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f003 030c 	and.w	r3, r3, #12
 80086b2:	2b04      	cmp	r3, #4
 80086b4:	d00c      	beq.n	80086d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086b6:	4b85      	ldr	r3, [pc, #532]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80086be:	2b08      	cmp	r3, #8
 80086c0:	d112      	bne.n	80086e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086c2:	4b82      	ldr	r3, [pc, #520]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086ce:	d10b      	bne.n	80086e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086d0:	4b7e      	ldr	r3, [pc, #504]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d05b      	beq.n	8008794 <HAL_RCC_OscConfig+0x108>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d157      	bne.n	8008794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e242      	b.n	8008b6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086f0:	d106      	bne.n	8008700 <HAL_RCC_OscConfig+0x74>
 80086f2:	4b76      	ldr	r3, [pc, #472]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a75      	ldr	r2, [pc, #468]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 80086f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086fc:	6013      	str	r3, [r2, #0]
 80086fe:	e01d      	b.n	800873c <HAL_RCC_OscConfig+0xb0>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008708:	d10c      	bne.n	8008724 <HAL_RCC_OscConfig+0x98>
 800870a:	4b70      	ldr	r3, [pc, #448]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a6f      	ldr	r2, [pc, #444]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 8008710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	4b6d      	ldr	r3, [pc, #436]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a6c      	ldr	r2, [pc, #432]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 800871c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008720:	6013      	str	r3, [r2, #0]
 8008722:	e00b      	b.n	800873c <HAL_RCC_OscConfig+0xb0>
 8008724:	4b69      	ldr	r3, [pc, #420]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a68      	ldr	r2, [pc, #416]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 800872a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800872e:	6013      	str	r3, [r2, #0]
 8008730:	4b66      	ldr	r3, [pc, #408]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a65      	ldr	r2, [pc, #404]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 8008736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800873a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d013      	beq.n	800876c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008744:	f7fc f81c 	bl	8004780 <HAL_GetTick>
 8008748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800874a:	e008      	b.n	800875e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800874c:	f7fc f818 	bl	8004780 <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b64      	cmp	r3, #100	; 0x64
 8008758:	d901      	bls.n	800875e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e207      	b.n	8008b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800875e:	4b5b      	ldr	r3, [pc, #364]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0f0      	beq.n	800874c <HAL_RCC_OscConfig+0xc0>
 800876a:	e014      	b.n	8008796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800876c:	f7fc f808 	bl	8004780 <HAL_GetTick>
 8008770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008772:	e008      	b.n	8008786 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008774:	f7fc f804 	bl	8004780 <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	2b64      	cmp	r3, #100	; 0x64
 8008780:	d901      	bls.n	8008786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e1f3      	b.n	8008b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008786:	4b51      	ldr	r3, [pc, #324]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1f0      	bne.n	8008774 <HAL_RCC_OscConfig+0xe8>
 8008792:	e000      	b.n	8008796 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0302 	and.w	r3, r3, #2
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d063      	beq.n	800886a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80087a2:	4b4a      	ldr	r3, [pc, #296]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f003 030c 	and.w	r3, r3, #12
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00b      	beq.n	80087c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087ae:	4b47      	ldr	r3, [pc, #284]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80087b6:	2b08      	cmp	r3, #8
 80087b8:	d11c      	bne.n	80087f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087ba:	4b44      	ldr	r3, [pc, #272]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d116      	bne.n	80087f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087c6:	4b41      	ldr	r3, [pc, #260]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d005      	beq.n	80087de <HAL_RCC_OscConfig+0x152>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d001      	beq.n	80087de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e1c7      	b.n	8008b6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087de:	4b3b      	ldr	r3, [pc, #236]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	00db      	lsls	r3, r3, #3
 80087ec:	4937      	ldr	r1, [pc, #220]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087f2:	e03a      	b.n	800886a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d020      	beq.n	800883e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087fc:	4b34      	ldr	r3, [pc, #208]	; (80088d0 <HAL_RCC_OscConfig+0x244>)
 80087fe:	2201      	movs	r2, #1
 8008800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008802:	f7fb ffbd 	bl	8004780 <HAL_GetTick>
 8008806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008808:	e008      	b.n	800881c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800880a:	f7fb ffb9 	bl	8004780 <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	2b02      	cmp	r3, #2
 8008816:	d901      	bls.n	800881c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	e1a8      	b.n	8008b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800881c:	4b2b      	ldr	r3, [pc, #172]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0302 	and.w	r3, r3, #2
 8008824:	2b00      	cmp	r3, #0
 8008826:	d0f0      	beq.n	800880a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008828:	4b28      	ldr	r3, [pc, #160]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	00db      	lsls	r3, r3, #3
 8008836:	4925      	ldr	r1, [pc, #148]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 8008838:	4313      	orrs	r3, r2
 800883a:	600b      	str	r3, [r1, #0]
 800883c:	e015      	b.n	800886a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800883e:	4b24      	ldr	r3, [pc, #144]	; (80088d0 <HAL_RCC_OscConfig+0x244>)
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008844:	f7fb ff9c 	bl	8004780 <HAL_GetTick>
 8008848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800884a:	e008      	b.n	800885e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800884c:	f7fb ff98 	bl	8004780 <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	2b02      	cmp	r3, #2
 8008858:	d901      	bls.n	800885e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	e187      	b.n	8008b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800885e:	4b1b      	ldr	r3, [pc, #108]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0302 	and.w	r3, r3, #2
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1f0      	bne.n	800884c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0308 	and.w	r3, r3, #8
 8008872:	2b00      	cmp	r3, #0
 8008874:	d036      	beq.n	80088e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d016      	beq.n	80088ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800887e:	4b15      	ldr	r3, [pc, #84]	; (80088d4 <HAL_RCC_OscConfig+0x248>)
 8008880:	2201      	movs	r2, #1
 8008882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008884:	f7fb ff7c 	bl	8004780 <HAL_GetTick>
 8008888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800888a:	e008      	b.n	800889e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800888c:	f7fb ff78 	bl	8004780 <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	2b02      	cmp	r3, #2
 8008898:	d901      	bls.n	800889e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e167      	b.n	8008b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800889e:	4b0b      	ldr	r3, [pc, #44]	; (80088cc <HAL_RCC_OscConfig+0x240>)
 80088a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088a2:	f003 0302 	and.w	r3, r3, #2
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0f0      	beq.n	800888c <HAL_RCC_OscConfig+0x200>
 80088aa:	e01b      	b.n	80088e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088ac:	4b09      	ldr	r3, [pc, #36]	; (80088d4 <HAL_RCC_OscConfig+0x248>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088b2:	f7fb ff65 	bl	8004780 <HAL_GetTick>
 80088b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088b8:	e00e      	b.n	80088d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088ba:	f7fb ff61 	bl	8004780 <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d907      	bls.n	80088d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e150      	b.n	8008b6e <HAL_RCC_OscConfig+0x4e2>
 80088cc:	40023800 	.word	0x40023800
 80088d0:	42470000 	.word	0x42470000
 80088d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088d8:	4b88      	ldr	r3, [pc, #544]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 80088da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088dc:	f003 0302 	and.w	r3, r3, #2
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1ea      	bne.n	80088ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 0304 	and.w	r3, r3, #4
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 8097 	beq.w	8008a20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088f2:	2300      	movs	r3, #0
 80088f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088f6:	4b81      	ldr	r3, [pc, #516]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 80088f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10f      	bne.n	8008922 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008902:	2300      	movs	r3, #0
 8008904:	60bb      	str	r3, [r7, #8]
 8008906:	4b7d      	ldr	r3, [pc, #500]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 8008908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890a:	4a7c      	ldr	r2, [pc, #496]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 800890c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008910:	6413      	str	r3, [r2, #64]	; 0x40
 8008912:	4b7a      	ldr	r3, [pc, #488]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 8008914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800891a:	60bb      	str	r3, [r7, #8]
 800891c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800891e:	2301      	movs	r3, #1
 8008920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008922:	4b77      	ldr	r3, [pc, #476]	; (8008b00 <HAL_RCC_OscConfig+0x474>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800892a:	2b00      	cmp	r3, #0
 800892c:	d118      	bne.n	8008960 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800892e:	4b74      	ldr	r3, [pc, #464]	; (8008b00 <HAL_RCC_OscConfig+0x474>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a73      	ldr	r2, [pc, #460]	; (8008b00 <HAL_RCC_OscConfig+0x474>)
 8008934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800893a:	f7fb ff21 	bl	8004780 <HAL_GetTick>
 800893e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008940:	e008      	b.n	8008954 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008942:	f7fb ff1d 	bl	8004780 <HAL_GetTick>
 8008946:	4602      	mov	r2, r0
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	2b02      	cmp	r3, #2
 800894e:	d901      	bls.n	8008954 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e10c      	b.n	8008b6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008954:	4b6a      	ldr	r3, [pc, #424]	; (8008b00 <HAL_RCC_OscConfig+0x474>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800895c:	2b00      	cmp	r3, #0
 800895e:	d0f0      	beq.n	8008942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d106      	bne.n	8008976 <HAL_RCC_OscConfig+0x2ea>
 8008968:	4b64      	ldr	r3, [pc, #400]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 800896a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896c:	4a63      	ldr	r2, [pc, #396]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 800896e:	f043 0301 	orr.w	r3, r3, #1
 8008972:	6713      	str	r3, [r2, #112]	; 0x70
 8008974:	e01c      	b.n	80089b0 <HAL_RCC_OscConfig+0x324>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	2b05      	cmp	r3, #5
 800897c:	d10c      	bne.n	8008998 <HAL_RCC_OscConfig+0x30c>
 800897e:	4b5f      	ldr	r3, [pc, #380]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 8008980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008982:	4a5e      	ldr	r2, [pc, #376]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 8008984:	f043 0304 	orr.w	r3, r3, #4
 8008988:	6713      	str	r3, [r2, #112]	; 0x70
 800898a:	4b5c      	ldr	r3, [pc, #368]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 800898c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898e:	4a5b      	ldr	r2, [pc, #364]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 8008990:	f043 0301 	orr.w	r3, r3, #1
 8008994:	6713      	str	r3, [r2, #112]	; 0x70
 8008996:	e00b      	b.n	80089b0 <HAL_RCC_OscConfig+0x324>
 8008998:	4b58      	ldr	r3, [pc, #352]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 800899a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899c:	4a57      	ldr	r2, [pc, #348]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 800899e:	f023 0301 	bic.w	r3, r3, #1
 80089a2:	6713      	str	r3, [r2, #112]	; 0x70
 80089a4:	4b55      	ldr	r3, [pc, #340]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 80089a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a8:	4a54      	ldr	r2, [pc, #336]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 80089aa:	f023 0304 	bic.w	r3, r3, #4
 80089ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d015      	beq.n	80089e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089b8:	f7fb fee2 	bl	8004780 <HAL_GetTick>
 80089bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089be:	e00a      	b.n	80089d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089c0:	f7fb fede 	bl	8004780 <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d901      	bls.n	80089d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e0cb      	b.n	8008b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089d6:	4b49      	ldr	r3, [pc, #292]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 80089d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089da:	f003 0302 	and.w	r3, r3, #2
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d0ee      	beq.n	80089c0 <HAL_RCC_OscConfig+0x334>
 80089e2:	e014      	b.n	8008a0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089e4:	f7fb fecc 	bl	8004780 <HAL_GetTick>
 80089e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089ea:	e00a      	b.n	8008a02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089ec:	f7fb fec8 	bl	8004780 <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d901      	bls.n	8008a02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	e0b5      	b.n	8008b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a02:	4b3e      	ldr	r3, [pc, #248]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 8008a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a06:	f003 0302 	and.w	r3, r3, #2
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1ee      	bne.n	80089ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d105      	bne.n	8008a20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a14:	4b39      	ldr	r3, [pc, #228]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 8008a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a18:	4a38      	ldr	r2, [pc, #224]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 8008a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f000 80a1 	beq.w	8008b6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a2a:	4b34      	ldr	r3, [pc, #208]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f003 030c 	and.w	r3, r3, #12
 8008a32:	2b08      	cmp	r3, #8
 8008a34:	d05c      	beq.n	8008af0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d141      	bne.n	8008ac2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a3e:	4b31      	ldr	r3, [pc, #196]	; (8008b04 <HAL_RCC_OscConfig+0x478>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a44:	f7fb fe9c 	bl	8004780 <HAL_GetTick>
 8008a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a4a:	e008      	b.n	8008a5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a4c:	f7fb fe98 	bl	8004780 <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d901      	bls.n	8008a5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e087      	b.n	8008b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a5e:	4b27      	ldr	r3, [pc, #156]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1f0      	bne.n	8008a4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	69da      	ldr	r2, [r3, #28]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	431a      	orrs	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	019b      	lsls	r3, r3, #6
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a80:	085b      	lsrs	r3, r3, #1
 8008a82:	3b01      	subs	r3, #1
 8008a84:	041b      	lsls	r3, r3, #16
 8008a86:	431a      	orrs	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8c:	061b      	lsls	r3, r3, #24
 8008a8e:	491b      	ldr	r1, [pc, #108]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 8008a90:	4313      	orrs	r3, r2
 8008a92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a94:	4b1b      	ldr	r3, [pc, #108]	; (8008b04 <HAL_RCC_OscConfig+0x478>)
 8008a96:	2201      	movs	r2, #1
 8008a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a9a:	f7fb fe71 	bl	8004780 <HAL_GetTick>
 8008a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008aa0:	e008      	b.n	8008ab4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008aa2:	f7fb fe6d 	bl	8004780 <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d901      	bls.n	8008ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e05c      	b.n	8008b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ab4:	4b11      	ldr	r3, [pc, #68]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d0f0      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x416>
 8008ac0:	e054      	b.n	8008b6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ac2:	4b10      	ldr	r3, [pc, #64]	; (8008b04 <HAL_RCC_OscConfig+0x478>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ac8:	f7fb fe5a 	bl	8004780 <HAL_GetTick>
 8008acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ace:	e008      	b.n	8008ae2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ad0:	f7fb fe56 	bl	8004780 <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d901      	bls.n	8008ae2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e045      	b.n	8008b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ae2:	4b06      	ldr	r3, [pc, #24]	; (8008afc <HAL_RCC_OscConfig+0x470>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1f0      	bne.n	8008ad0 <HAL_RCC_OscConfig+0x444>
 8008aee:	e03d      	b.n	8008b6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d107      	bne.n	8008b08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e038      	b.n	8008b6e <HAL_RCC_OscConfig+0x4e2>
 8008afc:	40023800 	.word	0x40023800
 8008b00:	40007000 	.word	0x40007000
 8008b04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b08:	4b1b      	ldr	r3, [pc, #108]	; (8008b78 <HAL_RCC_OscConfig+0x4ec>)
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d028      	beq.n	8008b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d121      	bne.n	8008b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d11a      	bne.n	8008b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008b38:	4013      	ands	r3, r2
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d111      	bne.n	8008b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4e:	085b      	lsrs	r3, r3, #1
 8008b50:	3b01      	subs	r3, #1
 8008b52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d107      	bne.n	8008b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d001      	beq.n	8008b6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e000      	b.n	8008b6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	40023800 	.word	0x40023800

08008b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e0cc      	b.n	8008d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b90:	4b68      	ldr	r3, [pc, #416]	; (8008d34 <HAL_RCC_ClockConfig+0x1b8>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0307 	and.w	r3, r3, #7
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d90c      	bls.n	8008bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b9e:	4b65      	ldr	r3, [pc, #404]	; (8008d34 <HAL_RCC_ClockConfig+0x1b8>)
 8008ba0:	683a      	ldr	r2, [r7, #0]
 8008ba2:	b2d2      	uxtb	r2, r2
 8008ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ba6:	4b63      	ldr	r3, [pc, #396]	; (8008d34 <HAL_RCC_ClockConfig+0x1b8>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 0307 	and.w	r3, r3, #7
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d001      	beq.n	8008bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e0b8      	b.n	8008d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f003 0302 	and.w	r3, r3, #2
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d020      	beq.n	8008c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d005      	beq.n	8008bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008bd0:	4b59      	ldr	r3, [pc, #356]	; (8008d38 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	4a58      	ldr	r2, [pc, #352]	; (8008d38 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008bda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 0308 	and.w	r3, r3, #8
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d005      	beq.n	8008bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008be8:	4b53      	ldr	r3, [pc, #332]	; (8008d38 <HAL_RCC_ClockConfig+0x1bc>)
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	4a52      	ldr	r2, [pc, #328]	; (8008d38 <HAL_RCC_ClockConfig+0x1bc>)
 8008bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bf4:	4b50      	ldr	r3, [pc, #320]	; (8008d38 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	494d      	ldr	r1, [pc, #308]	; (8008d38 <HAL_RCC_ClockConfig+0x1bc>)
 8008c02:	4313      	orrs	r3, r2
 8008c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d044      	beq.n	8008c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d107      	bne.n	8008c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c1a:	4b47      	ldr	r3, [pc, #284]	; (8008d38 <HAL_RCC_ClockConfig+0x1bc>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d119      	bne.n	8008c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e07f      	b.n	8008d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d003      	beq.n	8008c3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d107      	bne.n	8008c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c3a:	4b3f      	ldr	r3, [pc, #252]	; (8008d38 <HAL_RCC_ClockConfig+0x1bc>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d109      	bne.n	8008c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e06f      	b.n	8008d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c4a:	4b3b      	ldr	r3, [pc, #236]	; (8008d38 <HAL_RCC_ClockConfig+0x1bc>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0302 	and.w	r3, r3, #2
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e067      	b.n	8008d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c5a:	4b37      	ldr	r3, [pc, #220]	; (8008d38 <HAL_RCC_ClockConfig+0x1bc>)
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f023 0203 	bic.w	r2, r3, #3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	4934      	ldr	r1, [pc, #208]	; (8008d38 <HAL_RCC_ClockConfig+0x1bc>)
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c6c:	f7fb fd88 	bl	8004780 <HAL_GetTick>
 8008c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c72:	e00a      	b.n	8008c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c74:	f7fb fd84 	bl	8004780 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d901      	bls.n	8008c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e04f      	b.n	8008d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c8a:	4b2b      	ldr	r3, [pc, #172]	; (8008d38 <HAL_RCC_ClockConfig+0x1bc>)
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f003 020c 	and.w	r2, r3, #12
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d1eb      	bne.n	8008c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c9c:	4b25      	ldr	r3, [pc, #148]	; (8008d34 <HAL_RCC_ClockConfig+0x1b8>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0307 	and.w	r3, r3, #7
 8008ca4:	683a      	ldr	r2, [r7, #0]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d20c      	bcs.n	8008cc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008caa:	4b22      	ldr	r3, [pc, #136]	; (8008d34 <HAL_RCC_ClockConfig+0x1b8>)
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	b2d2      	uxtb	r2, r2
 8008cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cb2:	4b20      	ldr	r3, [pc, #128]	; (8008d34 <HAL_RCC_ClockConfig+0x1b8>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d001      	beq.n	8008cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e032      	b.n	8008d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0304 	and.w	r3, r3, #4
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d008      	beq.n	8008ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cd0:	4b19      	ldr	r3, [pc, #100]	; (8008d38 <HAL_RCC_ClockConfig+0x1bc>)
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	4916      	ldr	r1, [pc, #88]	; (8008d38 <HAL_RCC_ClockConfig+0x1bc>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 0308 	and.w	r3, r3, #8
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d009      	beq.n	8008d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008cee:	4b12      	ldr	r3, [pc, #72]	; (8008d38 <HAL_RCC_ClockConfig+0x1bc>)
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	00db      	lsls	r3, r3, #3
 8008cfc:	490e      	ldr	r1, [pc, #56]	; (8008d38 <HAL_RCC_ClockConfig+0x1bc>)
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008d02:	f000 f821 	bl	8008d48 <HAL_RCC_GetSysClockFreq>
 8008d06:	4602      	mov	r2, r0
 8008d08:	4b0b      	ldr	r3, [pc, #44]	; (8008d38 <HAL_RCC_ClockConfig+0x1bc>)
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	091b      	lsrs	r3, r3, #4
 8008d0e:	f003 030f 	and.w	r3, r3, #15
 8008d12:	490a      	ldr	r1, [pc, #40]	; (8008d3c <HAL_RCC_ClockConfig+0x1c0>)
 8008d14:	5ccb      	ldrb	r3, [r1, r3]
 8008d16:	fa22 f303 	lsr.w	r3, r2, r3
 8008d1a:	4a09      	ldr	r2, [pc, #36]	; (8008d40 <HAL_RCC_ClockConfig+0x1c4>)
 8008d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008d1e:	4b09      	ldr	r3, [pc, #36]	; (8008d44 <HAL_RCC_ClockConfig+0x1c8>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fb fce8 	bl	80046f8 <HAL_InitTick>

  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	40023c00 	.word	0x40023c00
 8008d38:	40023800 	.word	0x40023800
 8008d3c:	0800c198 	.word	0x0800c198
 8008d40:	20000240 	.word	0x20000240
 8008d44:	20000244 	.word	0x20000244

08008d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d4c:	b094      	sub	sp, #80	; 0x50
 8008d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008d50:	2300      	movs	r3, #0
 8008d52:	647b      	str	r3, [r7, #68]	; 0x44
 8008d54:	2300      	movs	r3, #0
 8008d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d58:	2300      	movs	r3, #0
 8008d5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d60:	4b79      	ldr	r3, [pc, #484]	; (8008f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f003 030c 	and.w	r3, r3, #12
 8008d68:	2b08      	cmp	r3, #8
 8008d6a:	d00d      	beq.n	8008d88 <HAL_RCC_GetSysClockFreq+0x40>
 8008d6c:	2b08      	cmp	r3, #8
 8008d6e:	f200 80e1 	bhi.w	8008f34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d002      	beq.n	8008d7c <HAL_RCC_GetSysClockFreq+0x34>
 8008d76:	2b04      	cmp	r3, #4
 8008d78:	d003      	beq.n	8008d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8008d7a:	e0db      	b.n	8008f34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d7c:	4b73      	ldr	r3, [pc, #460]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8008d7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008d80:	e0db      	b.n	8008f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d82:	4b73      	ldr	r3, [pc, #460]	; (8008f50 <HAL_RCC_GetSysClockFreq+0x208>)
 8008d84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d86:	e0d8      	b.n	8008f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d88:	4b6f      	ldr	r3, [pc, #444]	; (8008f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d92:	4b6d      	ldr	r3, [pc, #436]	; (8008f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d063      	beq.n	8008e66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d9e:	4b6a      	ldr	r3, [pc, #424]	; (8008f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	099b      	lsrs	r3, r3, #6
 8008da4:	2200      	movs	r2, #0
 8008da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008da8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db0:	633b      	str	r3, [r7, #48]	; 0x30
 8008db2:	2300      	movs	r3, #0
 8008db4:	637b      	str	r3, [r7, #52]	; 0x34
 8008db6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008dba:	4622      	mov	r2, r4
 8008dbc:	462b      	mov	r3, r5
 8008dbe:	f04f 0000 	mov.w	r0, #0
 8008dc2:	f04f 0100 	mov.w	r1, #0
 8008dc6:	0159      	lsls	r1, r3, #5
 8008dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008dcc:	0150      	lsls	r0, r2, #5
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	1a51      	subs	r1, r2, r1
 8008dd6:	6139      	str	r1, [r7, #16]
 8008dd8:	4629      	mov	r1, r5
 8008dda:	eb63 0301 	sbc.w	r3, r3, r1
 8008dde:	617b      	str	r3, [r7, #20]
 8008de0:	f04f 0200 	mov.w	r2, #0
 8008de4:	f04f 0300 	mov.w	r3, #0
 8008de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008dec:	4659      	mov	r1, fp
 8008dee:	018b      	lsls	r3, r1, #6
 8008df0:	4651      	mov	r1, sl
 8008df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008df6:	4651      	mov	r1, sl
 8008df8:	018a      	lsls	r2, r1, #6
 8008dfa:	4651      	mov	r1, sl
 8008dfc:	ebb2 0801 	subs.w	r8, r2, r1
 8008e00:	4659      	mov	r1, fp
 8008e02:	eb63 0901 	sbc.w	r9, r3, r1
 8008e06:	f04f 0200 	mov.w	r2, #0
 8008e0a:	f04f 0300 	mov.w	r3, #0
 8008e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e1a:	4690      	mov	r8, r2
 8008e1c:	4699      	mov	r9, r3
 8008e1e:	4623      	mov	r3, r4
 8008e20:	eb18 0303 	adds.w	r3, r8, r3
 8008e24:	60bb      	str	r3, [r7, #8]
 8008e26:	462b      	mov	r3, r5
 8008e28:	eb49 0303 	adc.w	r3, r9, r3
 8008e2c:	60fb      	str	r3, [r7, #12]
 8008e2e:	f04f 0200 	mov.w	r2, #0
 8008e32:	f04f 0300 	mov.w	r3, #0
 8008e36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	024b      	lsls	r3, r1, #9
 8008e3e:	4621      	mov	r1, r4
 8008e40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008e44:	4621      	mov	r1, r4
 8008e46:	024a      	lsls	r2, r1, #9
 8008e48:	4610      	mov	r0, r2
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e4e:	2200      	movs	r2, #0
 8008e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e58:	f7f7 fec2 	bl	8000be0 <__aeabi_uldivmod>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4613      	mov	r3, r2
 8008e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e64:	e058      	b.n	8008f18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e66:	4b38      	ldr	r3, [pc, #224]	; (8008f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	099b      	lsrs	r3, r3, #6
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	4618      	mov	r0, r3
 8008e70:	4611      	mov	r1, r2
 8008e72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008e76:	623b      	str	r3, [r7, #32]
 8008e78:	2300      	movs	r3, #0
 8008e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008e80:	4642      	mov	r2, r8
 8008e82:	464b      	mov	r3, r9
 8008e84:	f04f 0000 	mov.w	r0, #0
 8008e88:	f04f 0100 	mov.w	r1, #0
 8008e8c:	0159      	lsls	r1, r3, #5
 8008e8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e92:	0150      	lsls	r0, r2, #5
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	4641      	mov	r1, r8
 8008e9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	eb63 0b01 	sbc.w	fp, r3, r1
 8008ea4:	f04f 0200 	mov.w	r2, #0
 8008ea8:	f04f 0300 	mov.w	r3, #0
 8008eac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008eb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008eb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008eb8:	ebb2 040a 	subs.w	r4, r2, sl
 8008ebc:	eb63 050b 	sbc.w	r5, r3, fp
 8008ec0:	f04f 0200 	mov.w	r2, #0
 8008ec4:	f04f 0300 	mov.w	r3, #0
 8008ec8:	00eb      	lsls	r3, r5, #3
 8008eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ece:	00e2      	lsls	r2, r4, #3
 8008ed0:	4614      	mov	r4, r2
 8008ed2:	461d      	mov	r5, r3
 8008ed4:	4643      	mov	r3, r8
 8008ed6:	18e3      	adds	r3, r4, r3
 8008ed8:	603b      	str	r3, [r7, #0]
 8008eda:	464b      	mov	r3, r9
 8008edc:	eb45 0303 	adc.w	r3, r5, r3
 8008ee0:	607b      	str	r3, [r7, #4]
 8008ee2:	f04f 0200 	mov.w	r2, #0
 8008ee6:	f04f 0300 	mov.w	r3, #0
 8008eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008eee:	4629      	mov	r1, r5
 8008ef0:	028b      	lsls	r3, r1, #10
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ef8:	4621      	mov	r1, r4
 8008efa:	028a      	lsls	r2, r1, #10
 8008efc:	4610      	mov	r0, r2
 8008efe:	4619      	mov	r1, r3
 8008f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f02:	2200      	movs	r2, #0
 8008f04:	61bb      	str	r3, [r7, #24]
 8008f06:	61fa      	str	r2, [r7, #28]
 8008f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f0c:	f7f7 fe68 	bl	8000be0 <__aeabi_uldivmod>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	4613      	mov	r3, r2
 8008f16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008f18:	4b0b      	ldr	r3, [pc, #44]	; (8008f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	0c1b      	lsrs	r3, r3, #16
 8008f1e:	f003 0303 	and.w	r3, r3, #3
 8008f22:	3301      	adds	r3, #1
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008f28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f32:	e002      	b.n	8008f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f34:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8008f36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3750      	adds	r7, #80	; 0x50
 8008f40:	46bd      	mov	sp, r7
 8008f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f46:	bf00      	nop
 8008f48:	40023800 	.word	0x40023800
 8008f4c:	00f42400 	.word	0x00f42400
 8008f50:	007a1200 	.word	0x007a1200

08008f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f54:	b480      	push	{r7}
 8008f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f58:	4b03      	ldr	r3, [pc, #12]	; (8008f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	20000240 	.word	0x20000240

08008f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f70:	f7ff fff0 	bl	8008f54 <HAL_RCC_GetHCLKFreq>
 8008f74:	4602      	mov	r2, r0
 8008f76:	4b05      	ldr	r3, [pc, #20]	; (8008f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	0a9b      	lsrs	r3, r3, #10
 8008f7c:	f003 0307 	and.w	r3, r3, #7
 8008f80:	4903      	ldr	r1, [pc, #12]	; (8008f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f82:	5ccb      	ldrb	r3, [r1, r3]
 8008f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	40023800 	.word	0x40023800
 8008f90:	0800c1a8 	.word	0x0800c1a8

08008f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008f98:	f7ff ffdc 	bl	8008f54 <HAL_RCC_GetHCLKFreq>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	4b05      	ldr	r3, [pc, #20]	; (8008fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	0b5b      	lsrs	r3, r3, #13
 8008fa4:	f003 0307 	and.w	r3, r3, #7
 8008fa8:	4903      	ldr	r1, [pc, #12]	; (8008fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008faa:	5ccb      	ldrb	r3, [r1, r3]
 8008fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	40023800 	.word	0x40023800
 8008fb8:	0800c1a8 	.word	0x0800c1a8

08008fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d101      	bne.n	8008fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e04c      	b.n	8009068 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d111      	bne.n	8008ffe <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f001 faaa 	bl	800a53c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d102      	bne.n	8008ff6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a1f      	ldr	r2, [pc, #124]	; (8009070 <HAL_TIM_Base_Init+0xb4>)
 8008ff4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2202      	movs	r2, #2
 8009002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	3304      	adds	r3, #4
 800900e:	4619      	mov	r1, r3
 8009010:	4610      	mov	r0, r2
 8009012:	f001 f861 	bl	800a0d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2201      	movs	r2, #1
 800901a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2201      	movs	r2, #1
 8009062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	080042f9 	.word	0x080042f9

08009074 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009082:	b2db      	uxtb	r3, r3
 8009084:	2b01      	cmp	r3, #1
 8009086:	d001      	beq.n	800908c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e03c      	b.n	8009106 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2202      	movs	r2, #2
 8009090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a1e      	ldr	r2, [pc, #120]	; (8009114 <HAL_TIM_Base_Start+0xa0>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d018      	beq.n	80090d0 <HAL_TIM_Base_Start+0x5c>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090a6:	d013      	beq.n	80090d0 <HAL_TIM_Base_Start+0x5c>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a1a      	ldr	r2, [pc, #104]	; (8009118 <HAL_TIM_Base_Start+0xa4>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d00e      	beq.n	80090d0 <HAL_TIM_Base_Start+0x5c>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a19      	ldr	r2, [pc, #100]	; (800911c <HAL_TIM_Base_Start+0xa8>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d009      	beq.n	80090d0 <HAL_TIM_Base_Start+0x5c>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a17      	ldr	r2, [pc, #92]	; (8009120 <HAL_TIM_Base_Start+0xac>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d004      	beq.n	80090d0 <HAL_TIM_Base_Start+0x5c>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a16      	ldr	r2, [pc, #88]	; (8009124 <HAL_TIM_Base_Start+0xb0>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d111      	bne.n	80090f4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	f003 0307 	and.w	r3, r3, #7
 80090da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2b06      	cmp	r3, #6
 80090e0:	d010      	beq.n	8009104 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f042 0201 	orr.w	r2, r2, #1
 80090f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090f2:	e007      	b.n	8009104 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f042 0201 	orr.w	r2, r2, #1
 8009102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3714      	adds	r7, #20
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	40010000 	.word	0x40010000
 8009118:	40000400 	.word	0x40000400
 800911c:	40000800 	.word	0x40000800
 8009120:	40000c00 	.word	0x40000c00
 8009124:	40014000 	.word	0x40014000

08009128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b01      	cmp	r3, #1
 800913a:	d001      	beq.n	8009140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e044      	b.n	80091ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2202      	movs	r2, #2
 8009144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68da      	ldr	r2, [r3, #12]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f042 0201 	orr.w	r2, r2, #1
 8009156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a1e      	ldr	r2, [pc, #120]	; (80091d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d018      	beq.n	8009194 <HAL_TIM_Base_Start_IT+0x6c>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800916a:	d013      	beq.n	8009194 <HAL_TIM_Base_Start_IT+0x6c>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a1a      	ldr	r2, [pc, #104]	; (80091dc <HAL_TIM_Base_Start_IT+0xb4>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d00e      	beq.n	8009194 <HAL_TIM_Base_Start_IT+0x6c>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a19      	ldr	r2, [pc, #100]	; (80091e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d009      	beq.n	8009194 <HAL_TIM_Base_Start_IT+0x6c>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a17      	ldr	r2, [pc, #92]	; (80091e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d004      	beq.n	8009194 <HAL_TIM_Base_Start_IT+0x6c>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a16      	ldr	r2, [pc, #88]	; (80091e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d111      	bne.n	80091b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	f003 0307 	and.w	r3, r3, #7
 800919e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2b06      	cmp	r3, #6
 80091a4:	d010      	beq.n	80091c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f042 0201 	orr.w	r2, r2, #1
 80091b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091b6:	e007      	b.n	80091c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f042 0201 	orr.w	r2, r2, #1
 80091c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	40010000 	.word	0x40010000
 80091dc:	40000400 	.word	0x40000400
 80091e0:	40000800 	.word	0x40000800
 80091e4:	40000c00 	.word	0x40000c00
 80091e8:	40014000 	.word	0x40014000

080091ec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e04c      	b.n	8009298 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d111      	bne.n	800922e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f001 f992 	bl	800a53c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800921c:	2b00      	cmp	r3, #0
 800921e:	d102      	bne.n	8009226 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a1f      	ldr	r2, [pc, #124]	; (80092a0 <HAL_TIM_OC_Init+0xb4>)
 8009224:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2202      	movs	r2, #2
 8009232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	3304      	adds	r3, #4
 800923e:	4619      	mov	r1, r3
 8009240:	4610      	mov	r0, r2
 8009242:	f000 ff49 	bl	800a0d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2201      	movs	r2, #1
 8009262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2201      	movs	r2, #1
 800927a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	080092a5 	.word	0x080092a5

080092a4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e04c      	b.n	8009364 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d111      	bne.n	80092fa <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f001 f92c 	bl	800a53c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d102      	bne.n	80092f2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a1f      	ldr	r2, [pc, #124]	; (800936c <HAL_TIM_PWM_Init+0xb4>)
 80092f0:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2202      	movs	r2, #2
 80092fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	3304      	adds	r3, #4
 800930a:	4619      	mov	r1, r3
 800930c:	4610      	mov	r0, r2
 800930e:	f000 fee3 	bl	800a0d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	08004219 	.word	0x08004219

08009370 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d109      	bne.n	8009394 <HAL_TIM_PWM_Start+0x24>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009386:	b2db      	uxtb	r3, r3
 8009388:	2b01      	cmp	r3, #1
 800938a:	bf14      	ite	ne
 800938c:	2301      	movne	r3, #1
 800938e:	2300      	moveq	r3, #0
 8009390:	b2db      	uxtb	r3, r3
 8009392:	e022      	b.n	80093da <HAL_TIM_PWM_Start+0x6a>
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	2b04      	cmp	r3, #4
 8009398:	d109      	bne.n	80093ae <HAL_TIM_PWM_Start+0x3e>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	bf14      	ite	ne
 80093a6:	2301      	movne	r3, #1
 80093a8:	2300      	moveq	r3, #0
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	e015      	b.n	80093da <HAL_TIM_PWM_Start+0x6a>
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b08      	cmp	r3, #8
 80093b2:	d109      	bne.n	80093c8 <HAL_TIM_PWM_Start+0x58>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b01      	cmp	r3, #1
 80093be:	bf14      	ite	ne
 80093c0:	2301      	movne	r3, #1
 80093c2:	2300      	moveq	r3, #0
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	e008      	b.n	80093da <HAL_TIM_PWM_Start+0x6a>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	bf14      	ite	ne
 80093d4:	2301      	movne	r3, #1
 80093d6:	2300      	moveq	r3, #0
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d001      	beq.n	80093e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e068      	b.n	80094b4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d104      	bne.n	80093f2 <HAL_TIM_PWM_Start+0x82>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2202      	movs	r2, #2
 80093ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093f0:	e013      	b.n	800941a <HAL_TIM_PWM_Start+0xaa>
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2b04      	cmp	r3, #4
 80093f6:	d104      	bne.n	8009402 <HAL_TIM_PWM_Start+0x92>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2202      	movs	r2, #2
 80093fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009400:	e00b      	b.n	800941a <HAL_TIM_PWM_Start+0xaa>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	2b08      	cmp	r3, #8
 8009406:	d104      	bne.n	8009412 <HAL_TIM_PWM_Start+0xa2>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2202      	movs	r2, #2
 800940c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009410:	e003      	b.n	800941a <HAL_TIM_PWM_Start+0xaa>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2202      	movs	r2, #2
 8009416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2201      	movs	r2, #1
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	4618      	mov	r0, r3
 8009424:	f001 f864 	bl	800a4f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a23      	ldr	r2, [pc, #140]	; (80094bc <HAL_TIM_PWM_Start+0x14c>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d107      	bne.n	8009442 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009440:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a1d      	ldr	r2, [pc, #116]	; (80094bc <HAL_TIM_PWM_Start+0x14c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d018      	beq.n	800947e <HAL_TIM_PWM_Start+0x10e>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009454:	d013      	beq.n	800947e <HAL_TIM_PWM_Start+0x10e>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a19      	ldr	r2, [pc, #100]	; (80094c0 <HAL_TIM_PWM_Start+0x150>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d00e      	beq.n	800947e <HAL_TIM_PWM_Start+0x10e>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a17      	ldr	r2, [pc, #92]	; (80094c4 <HAL_TIM_PWM_Start+0x154>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d009      	beq.n	800947e <HAL_TIM_PWM_Start+0x10e>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a16      	ldr	r2, [pc, #88]	; (80094c8 <HAL_TIM_PWM_Start+0x158>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d004      	beq.n	800947e <HAL_TIM_PWM_Start+0x10e>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a14      	ldr	r2, [pc, #80]	; (80094cc <HAL_TIM_PWM_Start+0x15c>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d111      	bne.n	80094a2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f003 0307 	and.w	r3, r3, #7
 8009488:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2b06      	cmp	r3, #6
 800948e:	d010      	beq.n	80094b2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f042 0201 	orr.w	r2, r2, #1
 800949e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094a0:	e007      	b.n	80094b2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f042 0201 	orr.w	r2, r2, #1
 80094b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	40010000 	.word	0x40010000
 80094c0:	40000400 	.word	0x40000400
 80094c4:	40000800 	.word	0x40000800
 80094c8:	40000c00 	.word	0x40000c00
 80094cc:	40014000 	.word	0x40014000

080094d0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e04c      	b.n	800957e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d111      	bne.n	8009514 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f001 f81f 	bl	800a53c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009502:	2b00      	cmp	r3, #0
 8009504:	d102      	bne.n	800950c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a1f      	ldr	r2, [pc, #124]	; (8009588 <HAL_TIM_OnePulse_Init+0xb8>)
 800950a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2202      	movs	r2, #2
 8009518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3304      	adds	r3, #4
 8009524:	4619      	mov	r1, r3
 8009526:	4610      	mov	r0, r2
 8009528:	f000 fdd6 	bl	800a0d8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f022 0208 	bic.w	r2, r2, #8
 800953a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6819      	ldr	r1, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	430a      	orrs	r2, r1
 800954a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	0800958d 	.word	0x0800958d

0800958c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80095b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80095c8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d108      	bne.n	80095e2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80095d0:	7bbb      	ldrb	r3, [r7, #14]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d105      	bne.n	80095e2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80095d6:	7b7b      	ldrb	r3, [r7, #13]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d102      	bne.n	80095e2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80095dc:	7b3b      	ldrb	r3, [r7, #12]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d001      	beq.n	80095e6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e03b      	b.n	800965e <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2202      	movs	r2, #2
 80095ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2202      	movs	r2, #2
 80095f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2202      	movs	r2, #2
 80095fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2202      	movs	r2, #2
 8009602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68da      	ldr	r2, [r3, #12]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f042 0202 	orr.w	r2, r2, #2
 8009614:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68da      	ldr	r2, [r3, #12]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f042 0204 	orr.w	r2, r2, #4
 8009624:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2201      	movs	r2, #1
 800962c:	2100      	movs	r1, #0
 800962e:	4618      	mov	r0, r3
 8009630:	f000 ff5e 	bl	800a4f0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2201      	movs	r2, #1
 800963a:	2104      	movs	r1, #4
 800963c:	4618      	mov	r0, r3
 800963e:	f000 ff57 	bl	800a4f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a08      	ldr	r2, [pc, #32]	; (8009668 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d107      	bne.n	800965c <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800965a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	40010000 	.word	0x40010000

0800966c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e0a2      	b.n	80097c6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009686:	b2db      	uxtb	r3, r3
 8009688:	2b00      	cmp	r3, #0
 800968a:	d111      	bne.n	80096b0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 ff51 	bl	800a53c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d102      	bne.n	80096a8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a4a      	ldr	r2, [pc, #296]	; (80097d0 <HAL_TIM_Encoder_Init+0x164>)
 80096a6:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2202      	movs	r2, #2
 80096b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	6812      	ldr	r2, [r2, #0]
 80096c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096c6:	f023 0307 	bic.w	r3, r3, #7
 80096ca:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3304      	adds	r3, #4
 80096d4:	4619      	mov	r1, r3
 80096d6:	4610      	mov	r0, r2
 80096d8:	f000 fcfe 	bl	800a0d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009704:	f023 0303 	bic.w	r3, r3, #3
 8009708:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	689a      	ldr	r2, [r3, #8]
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	699b      	ldr	r3, [r3, #24]
 8009712:	021b      	lsls	r3, r3, #8
 8009714:	4313      	orrs	r3, r2
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	4313      	orrs	r3, r2
 800971a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009722:	f023 030c 	bic.w	r3, r3, #12
 8009726:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800972e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	68da      	ldr	r2, [r3, #12]
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	69db      	ldr	r3, [r3, #28]
 800973c:	021b      	lsls	r3, r3, #8
 800973e:	4313      	orrs	r3, r2
 8009740:	693a      	ldr	r2, [r7, #16]
 8009742:	4313      	orrs	r3, r2
 8009744:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	011a      	lsls	r2, r3, #4
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	6a1b      	ldr	r3, [r3, #32]
 8009750:	031b      	lsls	r3, r3, #12
 8009752:	4313      	orrs	r3, r2
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	4313      	orrs	r3, r2
 8009758:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009760:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009768:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	011b      	lsls	r3, r3, #4
 8009774:	4313      	orrs	r3, r2
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	4313      	orrs	r3, r2
 800977a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3718      	adds	r7, #24
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	08004269 	.word	0x08004269

080097d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80097ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80097fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d110      	bne.n	8009826 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d102      	bne.n	8009810 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800980a:	7b7b      	ldrb	r3, [r7, #13]
 800980c:	2b01      	cmp	r3, #1
 800980e:	d001      	beq.n	8009814 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e069      	b.n	80098e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2202      	movs	r2, #2
 8009818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2202      	movs	r2, #2
 8009820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009824:	e031      	b.n	800988a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	2b04      	cmp	r3, #4
 800982a:	d110      	bne.n	800984e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800982c:	7bbb      	ldrb	r3, [r7, #14]
 800982e:	2b01      	cmp	r3, #1
 8009830:	d102      	bne.n	8009838 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009832:	7b3b      	ldrb	r3, [r7, #12]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d001      	beq.n	800983c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e055      	b.n	80098e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2202      	movs	r2, #2
 8009840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2202      	movs	r2, #2
 8009848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800984c:	e01d      	b.n	800988a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800984e:	7bfb      	ldrb	r3, [r7, #15]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d108      	bne.n	8009866 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009854:	7bbb      	ldrb	r3, [r7, #14]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d105      	bne.n	8009866 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800985a:	7b7b      	ldrb	r3, [r7, #13]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d102      	bne.n	8009866 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009860:	7b3b      	ldrb	r3, [r7, #12]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d001      	beq.n	800986a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	e03e      	b.n	80098e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2202      	movs	r2, #2
 800986e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2202      	movs	r2, #2
 8009876:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2202      	movs	r2, #2
 800987e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2202      	movs	r2, #2
 8009886:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d003      	beq.n	8009898 <HAL_TIM_Encoder_Start+0xc4>
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	2b04      	cmp	r3, #4
 8009894:	d008      	beq.n	80098a8 <HAL_TIM_Encoder_Start+0xd4>
 8009896:	e00f      	b.n	80098b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2201      	movs	r2, #1
 800989e:	2100      	movs	r1, #0
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 fe25 	bl	800a4f0 <TIM_CCxChannelCmd>
      break;
 80098a6:	e016      	b.n	80098d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2201      	movs	r2, #1
 80098ae:	2104      	movs	r1, #4
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 fe1d 	bl	800a4f0 <TIM_CCxChannelCmd>
      break;
 80098b6:	e00e      	b.n	80098d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2201      	movs	r2, #1
 80098be:	2100      	movs	r1, #0
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 fe15 	bl	800a4f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2201      	movs	r2, #1
 80098cc:	2104      	movs	r1, #4
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 fe0e 	bl	800a4f0 <TIM_CCxChannelCmd>
      break;
 80098d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f042 0201 	orr.w	r2, r2, #1
 80098e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	f003 0302 	and.w	r3, r3, #2
 8009902:	2b02      	cmp	r3, #2
 8009904:	d128      	bne.n	8009958 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	f003 0302 	and.w	r3, r3, #2
 8009910:	2b02      	cmp	r3, #2
 8009912:	d121      	bne.n	8009958 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f06f 0202 	mvn.w	r2, #2
 800991c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	f003 0303 	and.w	r3, r3, #3
 800992e:	2b00      	cmp	r3, #0
 8009930:	d005      	beq.n	800993e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	4798      	blx	r3
 800993c:	e009      	b.n	8009952 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	f003 0304 	and.w	r3, r3, #4
 8009962:	2b04      	cmp	r3, #4
 8009964:	d128      	bne.n	80099b8 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	f003 0304 	and.w	r3, r3, #4
 8009970:	2b04      	cmp	r3, #4
 8009972:	d121      	bne.n	80099b8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f06f 0204 	mvn.w	r2, #4
 800997c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2202      	movs	r2, #2
 8009982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800998e:	2b00      	cmp	r3, #0
 8009990:	d005      	beq.n	800999e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	4798      	blx	r3
 800999c:	e009      	b.n	80099b2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	f003 0308 	and.w	r3, r3, #8
 80099c2:	2b08      	cmp	r3, #8
 80099c4:	d128      	bne.n	8009a18 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	f003 0308 	and.w	r3, r3, #8
 80099d0:	2b08      	cmp	r3, #8
 80099d2:	d121      	bne.n	8009a18 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f06f 0208 	mvn.w	r2, #8
 80099dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2204      	movs	r2, #4
 80099e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	69db      	ldr	r3, [r3, #28]
 80099ea:	f003 0303 	and.w	r3, r3, #3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d005      	beq.n	80099fe <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	4798      	blx	r3
 80099fc:	e009      	b.n	8009a12 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	f003 0310 	and.w	r3, r3, #16
 8009a22:	2b10      	cmp	r3, #16
 8009a24:	d128      	bne.n	8009a78 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	f003 0310 	and.w	r3, r3, #16
 8009a30:	2b10      	cmp	r3, #16
 8009a32:	d121      	bne.n	8009a78 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f06f 0210 	mvn.w	r2, #16
 8009a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2208      	movs	r2, #8
 8009a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	69db      	ldr	r3, [r3, #28]
 8009a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d005      	beq.n	8009a5e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	4798      	blx	r3
 8009a5c:	e009      	b.n	8009a72 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	f003 0301 	and.w	r3, r3, #1
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d110      	bne.n	8009aa8 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	f003 0301 	and.w	r3, r3, #1
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d109      	bne.n	8009aa8 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f06f 0201 	mvn.w	r2, #1
 8009a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ab2:	2b80      	cmp	r3, #128	; 0x80
 8009ab4:	d110      	bne.n	8009ad8 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac0:	2b80      	cmp	r3, #128	; 0x80
 8009ac2:	d109      	bne.n	8009ad8 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae2:	2b40      	cmp	r3, #64	; 0x40
 8009ae4:	d110      	bne.n	8009b08 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af0:	2b40      	cmp	r3, #64	; 0x40
 8009af2:	d109      	bne.n	8009b08 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	f003 0320 	and.w	r3, r3, #32
 8009b12:	2b20      	cmp	r3, #32
 8009b14:	d110      	bne.n	8009b38 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f003 0320 	and.w	r3, r3, #32
 8009b20:	2b20      	cmp	r3, #32
 8009b22:	d109      	bne.n	8009b38 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f06f 0220 	mvn.w	r2, #32
 8009b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b38:	bf00      	nop
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d101      	bne.n	8009b5e <HAL_TIM_OC_ConfigChannel+0x1e>
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	e048      	b.n	8009bf0 <HAL_TIM_OC_ConfigChannel+0xb0>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2b0c      	cmp	r3, #12
 8009b6a:	d839      	bhi.n	8009be0 <HAL_TIM_OC_ConfigChannel+0xa0>
 8009b6c:	a201      	add	r2, pc, #4	; (adr r2, 8009b74 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b72:	bf00      	nop
 8009b74:	08009ba9 	.word	0x08009ba9
 8009b78:	08009be1 	.word	0x08009be1
 8009b7c:	08009be1 	.word	0x08009be1
 8009b80:	08009be1 	.word	0x08009be1
 8009b84:	08009bb7 	.word	0x08009bb7
 8009b88:	08009be1 	.word	0x08009be1
 8009b8c:	08009be1 	.word	0x08009be1
 8009b90:	08009be1 	.word	0x08009be1
 8009b94:	08009bc5 	.word	0x08009bc5
 8009b98:	08009be1 	.word	0x08009be1
 8009b9c:	08009be1 	.word	0x08009be1
 8009ba0:	08009be1 	.word	0x08009be1
 8009ba4:	08009bd3 	.word	0x08009bd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68b9      	ldr	r1, [r7, #8]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 fb12 	bl	800a1d8 <TIM_OC1_SetConfig>
      break;
 8009bb4:	e017      	b.n	8009be6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68b9      	ldr	r1, [r7, #8]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f000 fb71 	bl	800a2a4 <TIM_OC2_SetConfig>
      break;
 8009bc2:	e010      	b.n	8009be6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68b9      	ldr	r1, [r7, #8]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 fbd6 	bl	800a37c <TIM_OC3_SetConfig>
      break;
 8009bd0:	e009      	b.n	8009be6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68b9      	ldr	r1, [r7, #8]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f000 fc39 	bl	800a450 <TIM_OC4_SetConfig>
      break;
 8009bde:	e002      	b.n	8009be6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	75fb      	strb	r3, [r7, #23]
      break;
 8009be4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3718      	adds	r7, #24
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d101      	bne.n	8009c16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009c12:	2302      	movs	r3, #2
 8009c14:	e0ae      	b.n	8009d74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b0c      	cmp	r3, #12
 8009c22:	f200 809f 	bhi.w	8009d64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009c26:	a201      	add	r2, pc, #4	; (adr r2, 8009c2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c2c:	08009c61 	.word	0x08009c61
 8009c30:	08009d65 	.word	0x08009d65
 8009c34:	08009d65 	.word	0x08009d65
 8009c38:	08009d65 	.word	0x08009d65
 8009c3c:	08009ca1 	.word	0x08009ca1
 8009c40:	08009d65 	.word	0x08009d65
 8009c44:	08009d65 	.word	0x08009d65
 8009c48:	08009d65 	.word	0x08009d65
 8009c4c:	08009ce3 	.word	0x08009ce3
 8009c50:	08009d65 	.word	0x08009d65
 8009c54:	08009d65 	.word	0x08009d65
 8009c58:	08009d65 	.word	0x08009d65
 8009c5c:	08009d23 	.word	0x08009d23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	68b9      	ldr	r1, [r7, #8]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 fab6 	bl	800a1d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	699a      	ldr	r2, [r3, #24]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f042 0208 	orr.w	r2, r2, #8
 8009c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	699a      	ldr	r2, [r3, #24]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f022 0204 	bic.w	r2, r2, #4
 8009c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6999      	ldr	r1, [r3, #24]
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	691a      	ldr	r2, [r3, #16]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	430a      	orrs	r2, r1
 8009c9c:	619a      	str	r2, [r3, #24]
      break;
 8009c9e:	e064      	b.n	8009d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68b9      	ldr	r1, [r7, #8]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 fafc 	bl	800a2a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	699a      	ldr	r2, [r3, #24]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	699a      	ldr	r2, [r3, #24]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6999      	ldr	r1, [r3, #24]
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	021a      	lsls	r2, r3, #8
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	430a      	orrs	r2, r1
 8009cde:	619a      	str	r2, [r3, #24]
      break;
 8009ce0:	e043      	b.n	8009d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68b9      	ldr	r1, [r7, #8]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f000 fb47 	bl	800a37c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	69da      	ldr	r2, [r3, #28]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f042 0208 	orr.w	r2, r2, #8
 8009cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	69da      	ldr	r2, [r3, #28]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f022 0204 	bic.w	r2, r2, #4
 8009d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	69d9      	ldr	r1, [r3, #28]
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	691a      	ldr	r2, [r3, #16]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	430a      	orrs	r2, r1
 8009d1e:	61da      	str	r2, [r3, #28]
      break;
 8009d20:	e023      	b.n	8009d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68b9      	ldr	r1, [r7, #8]
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f000 fb91 	bl	800a450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	69da      	ldr	r2, [r3, #28]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	69da      	ldr	r2, [r3, #28]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	69d9      	ldr	r1, [r3, #28]
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	021a      	lsls	r2, r3, #8
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	430a      	orrs	r2, r1
 8009d60:	61da      	str	r2, [r3, #28]
      break;
 8009d62:	e002      	b.n	8009d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	75fb      	strb	r3, [r7, #23]
      break;
 8009d68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009dd4:	bf00      	nop
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b087      	sub	sp, #28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d101      	bne.n	8009e60 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e135      	b.n	800a0cc <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d101      	bne.n	8009e6e <HAL_TIM_RegisterCallback+0x2a>
 8009e6a:	2302      	movs	r3, #2
 8009e6c:	e12e      	b.n	800a0cc <HAL_TIM_RegisterCallback+0x288>
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	f040 80ba 	bne.w	8009ff8 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8009e84:	7afb      	ldrb	r3, [r7, #11]
 8009e86:	2b1a      	cmp	r3, #26
 8009e88:	f200 80b3 	bhi.w	8009ff2 <HAL_TIM_RegisterCallback+0x1ae>
 8009e8c:	a201      	add	r2, pc, #4	; (adr r2, 8009e94 <HAL_TIM_RegisterCallback+0x50>)
 8009e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e92:	bf00      	nop
 8009e94:	08009f01 	.word	0x08009f01
 8009e98:	08009f09 	.word	0x08009f09
 8009e9c:	08009f11 	.word	0x08009f11
 8009ea0:	08009f19 	.word	0x08009f19
 8009ea4:	08009f21 	.word	0x08009f21
 8009ea8:	08009f29 	.word	0x08009f29
 8009eac:	08009f31 	.word	0x08009f31
 8009eb0:	08009f39 	.word	0x08009f39
 8009eb4:	08009f41 	.word	0x08009f41
 8009eb8:	08009f49 	.word	0x08009f49
 8009ebc:	08009f51 	.word	0x08009f51
 8009ec0:	08009f59 	.word	0x08009f59
 8009ec4:	08009f61 	.word	0x08009f61
 8009ec8:	08009f69 	.word	0x08009f69
 8009ecc:	08009f71 	.word	0x08009f71
 8009ed0:	08009f7b 	.word	0x08009f7b
 8009ed4:	08009f85 	.word	0x08009f85
 8009ed8:	08009f8f 	.word	0x08009f8f
 8009edc:	08009f99 	.word	0x08009f99
 8009ee0:	08009fa3 	.word	0x08009fa3
 8009ee4:	08009fad 	.word	0x08009fad
 8009ee8:	08009fb7 	.word	0x08009fb7
 8009eec:	08009fc1 	.word	0x08009fc1
 8009ef0:	08009fcb 	.word	0x08009fcb
 8009ef4:	08009fd5 	.word	0x08009fd5
 8009ef8:	08009fdf 	.word	0x08009fdf
 8009efc:	08009fe9 	.word	0x08009fe9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009f06:	e0dc      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009f0e:	e0d8      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009f16:	e0d4      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009f1e:	e0d0      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009f26:	e0cc      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009f2e:	e0c8      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009f36:	e0c4      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009f3e:	e0c0      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009f46:	e0bc      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009f4e:	e0b8      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009f56:	e0b4      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009f5e:	e0b0      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009f66:	e0ac      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009f6e:	e0a8      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009f78:	e0a3      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8009f82:	e09e      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8009f8c:	e099      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8009f96:	e094      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8009fa0:	e08f      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8009faa:	e08a      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8009fb4:	e085      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8009fbe:	e080      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8009fc8:	e07b      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8009fd2:	e076      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8009fdc:	e071      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8009fe6:	e06c      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8009ff0:	e067      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	75fb      	strb	r3, [r7, #23]
        break;
 8009ff6:	e064      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2b00      	cmp	r3, #0
 800a002:	d15c      	bne.n	800a0be <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800a004:	7afb      	ldrb	r3, [r7, #11]
 800a006:	2b0d      	cmp	r3, #13
 800a008:	d856      	bhi.n	800a0b8 <HAL_TIM_RegisterCallback+0x274>
 800a00a:	a201      	add	r2, pc, #4	; (adr r2, 800a010 <HAL_TIM_RegisterCallback+0x1cc>)
 800a00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a010:	0800a049 	.word	0x0800a049
 800a014:	0800a051 	.word	0x0800a051
 800a018:	0800a059 	.word	0x0800a059
 800a01c:	0800a061 	.word	0x0800a061
 800a020:	0800a069 	.word	0x0800a069
 800a024:	0800a071 	.word	0x0800a071
 800a028:	0800a079 	.word	0x0800a079
 800a02c:	0800a081 	.word	0x0800a081
 800a030:	0800a089 	.word	0x0800a089
 800a034:	0800a091 	.word	0x0800a091
 800a038:	0800a099 	.word	0x0800a099
 800a03c:	0800a0a1 	.word	0x0800a0a1
 800a040:	0800a0a9 	.word	0x0800a0a9
 800a044:	0800a0b1 	.word	0x0800a0b1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a04e:	e038      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a056:	e034      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a05e:	e030      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a066:	e02c      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a06e:	e028      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a076:	e024      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a07e:	e020      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a086:	e01c      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a08e:	e018      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a096:	e014      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a09e:	e010      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a0a6:	e00c      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a0ae:	e008      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a0b6:	e004      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	75fb      	strb	r3, [r7, #23]
        break;
 800a0bc:	e001      	b.n	800a0c2 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a0ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	371c      	adds	r7, #28
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a34      	ldr	r2, [pc, #208]	; (800a1bc <TIM_Base_SetConfig+0xe4>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d00f      	beq.n	800a110 <TIM_Base_SetConfig+0x38>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0f6:	d00b      	beq.n	800a110 <TIM_Base_SetConfig+0x38>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a31      	ldr	r2, [pc, #196]	; (800a1c0 <TIM_Base_SetConfig+0xe8>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d007      	beq.n	800a110 <TIM_Base_SetConfig+0x38>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a30      	ldr	r2, [pc, #192]	; (800a1c4 <TIM_Base_SetConfig+0xec>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d003      	beq.n	800a110 <TIM_Base_SetConfig+0x38>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a2f      	ldr	r2, [pc, #188]	; (800a1c8 <TIM_Base_SetConfig+0xf0>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d108      	bne.n	800a122 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	4313      	orrs	r3, r2
 800a120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a25      	ldr	r2, [pc, #148]	; (800a1bc <TIM_Base_SetConfig+0xe4>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d01b      	beq.n	800a162 <TIM_Base_SetConfig+0x8a>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a130:	d017      	beq.n	800a162 <TIM_Base_SetConfig+0x8a>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a22      	ldr	r2, [pc, #136]	; (800a1c0 <TIM_Base_SetConfig+0xe8>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d013      	beq.n	800a162 <TIM_Base_SetConfig+0x8a>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a21      	ldr	r2, [pc, #132]	; (800a1c4 <TIM_Base_SetConfig+0xec>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d00f      	beq.n	800a162 <TIM_Base_SetConfig+0x8a>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a20      	ldr	r2, [pc, #128]	; (800a1c8 <TIM_Base_SetConfig+0xf0>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d00b      	beq.n	800a162 <TIM_Base_SetConfig+0x8a>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a1f      	ldr	r2, [pc, #124]	; (800a1cc <TIM_Base_SetConfig+0xf4>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d007      	beq.n	800a162 <TIM_Base_SetConfig+0x8a>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a1e      	ldr	r2, [pc, #120]	; (800a1d0 <TIM_Base_SetConfig+0xf8>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d003      	beq.n	800a162 <TIM_Base_SetConfig+0x8a>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4a1d      	ldr	r2, [pc, #116]	; (800a1d4 <TIM_Base_SetConfig+0xfc>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d108      	bne.n	800a174 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	68fa      	ldr	r2, [r7, #12]
 800a170:	4313      	orrs	r3, r2
 800a172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	695b      	ldr	r3, [r3, #20]
 800a17e:	4313      	orrs	r3, r2
 800a180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	689a      	ldr	r2, [r3, #8]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a08      	ldr	r2, [pc, #32]	; (800a1bc <TIM_Base_SetConfig+0xe4>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d103      	bne.n	800a1a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	691a      	ldr	r2, [r3, #16]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	615a      	str	r2, [r3, #20]
}
 800a1ae:	bf00      	nop
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	40010000 	.word	0x40010000
 800a1c0:	40000400 	.word	0x40000400
 800a1c4:	40000800 	.word	0x40000800
 800a1c8:	40000c00 	.word	0x40000c00
 800a1cc:	40014000 	.word	0x40014000
 800a1d0:	40014400 	.word	0x40014400
 800a1d4:	40014800 	.word	0x40014800

0800a1d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b087      	sub	sp, #28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a1b      	ldr	r3, [r3, #32]
 800a1e6:	f023 0201 	bic.w	r2, r3, #1
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a1b      	ldr	r3, [r3, #32]
 800a1f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	699b      	ldr	r3, [r3, #24]
 800a1fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f023 0303 	bic.w	r3, r3, #3
 800a20e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	4313      	orrs	r3, r2
 800a218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	f023 0302 	bic.w	r3, r3, #2
 800a220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	4313      	orrs	r3, r2
 800a22a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a1c      	ldr	r2, [pc, #112]	; (800a2a0 <TIM_OC1_SetConfig+0xc8>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d10c      	bne.n	800a24e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	f023 0308 	bic.w	r3, r3, #8
 800a23a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	697a      	ldr	r2, [r7, #20]
 800a242:	4313      	orrs	r3, r2
 800a244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f023 0304 	bic.w	r3, r3, #4
 800a24c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4a13      	ldr	r2, [pc, #76]	; (800a2a0 <TIM_OC1_SetConfig+0xc8>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d111      	bne.n	800a27a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a25c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	695b      	ldr	r3, [r3, #20]
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	4313      	orrs	r3, r2
 800a278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	693a      	ldr	r2, [r7, #16]
 800a27e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	685a      	ldr	r2, [r3, #4]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	621a      	str	r2, [r3, #32]
}
 800a294:	bf00      	nop
 800a296:	371c      	adds	r7, #28
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr
 800a2a0:	40010000 	.word	0x40010000

0800a2a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b087      	sub	sp, #28
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a1b      	ldr	r3, [r3, #32]
 800a2b2:	f023 0210 	bic.w	r2, r3, #16
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	699b      	ldr	r3, [r3, #24]
 800a2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	021b      	lsls	r3, r3, #8
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	f023 0320 	bic.w	r3, r3, #32
 800a2ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	011b      	lsls	r3, r3, #4
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a1e      	ldr	r2, [pc, #120]	; (800a378 <TIM_OC2_SetConfig+0xd4>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d10d      	bne.n	800a320 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a30a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	011b      	lsls	r3, r3, #4
 800a312:	697a      	ldr	r2, [r7, #20]
 800a314:	4313      	orrs	r3, r2
 800a316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a31e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	4a15      	ldr	r2, [pc, #84]	; (800a378 <TIM_OC2_SetConfig+0xd4>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d113      	bne.n	800a350 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a32e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	693a      	ldr	r2, [r7, #16]
 800a340:	4313      	orrs	r3, r2
 800a342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	4313      	orrs	r3, r2
 800a34e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	693a      	ldr	r2, [r7, #16]
 800a354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	697a      	ldr	r2, [r7, #20]
 800a368:	621a      	str	r2, [r3, #32]
}
 800a36a:	bf00      	nop
 800a36c:	371c      	adds	r7, #28
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	40010000 	.word	0x40010000

0800a37c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b087      	sub	sp, #28
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	69db      	ldr	r3, [r3, #28]
 800a3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f023 0303 	bic.w	r3, r3, #3
 800a3b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	021b      	lsls	r3, r3, #8
 800a3cc:	697a      	ldr	r2, [r7, #20]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4a1d      	ldr	r2, [pc, #116]	; (800a44c <TIM_OC3_SetConfig+0xd0>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d10d      	bne.n	800a3f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	021b      	lsls	r3, r3, #8
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a14      	ldr	r2, [pc, #80]	; (800a44c <TIM_OC3_SetConfig+0xd0>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d113      	bne.n	800a426 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a40c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	695b      	ldr	r3, [r3, #20]
 800a412:	011b      	lsls	r3, r3, #4
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	4313      	orrs	r3, r2
 800a418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	699b      	ldr	r3, [r3, #24]
 800a41e:	011b      	lsls	r3, r3, #4
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	4313      	orrs	r3, r2
 800a424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	693a      	ldr	r2, [r7, #16]
 800a42a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	685a      	ldr	r2, [r3, #4]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	697a      	ldr	r2, [r7, #20]
 800a43e:	621a      	str	r2, [r3, #32]
}
 800a440:	bf00      	nop
 800a442:	371c      	adds	r7, #28
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr
 800a44c:	40010000 	.word	0x40010000

0800a450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a450:	b480      	push	{r7}
 800a452:	b087      	sub	sp, #28
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a1b      	ldr	r3, [r3, #32]
 800a45e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a47e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	021b      	lsls	r3, r3, #8
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	4313      	orrs	r3, r2
 800a492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a49a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	031b      	lsls	r3, r3, #12
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a10      	ldr	r2, [pc, #64]	; (800a4ec <TIM_OC4_SetConfig+0x9c>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d109      	bne.n	800a4c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	695b      	ldr	r3, [r3, #20]
 800a4bc:	019b      	lsls	r3, r3, #6
 800a4be:	697a      	ldr	r2, [r7, #20]
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	697a      	ldr	r2, [r7, #20]
 800a4c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	685a      	ldr	r2, [r3, #4]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	693a      	ldr	r2, [r7, #16]
 800a4dc:	621a      	str	r2, [r3, #32]
}
 800a4de:	bf00      	nop
 800a4e0:	371c      	adds	r7, #28
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	40010000 	.word	0x40010000

0800a4f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b087      	sub	sp, #28
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	f003 031f 	and.w	r3, r3, #31
 800a502:	2201      	movs	r2, #1
 800a504:	fa02 f303 	lsl.w	r3, r2, r3
 800a508:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6a1a      	ldr	r2, [r3, #32]
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	43db      	mvns	r3, r3
 800a512:	401a      	ands	r2, r3
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6a1a      	ldr	r2, [r3, #32]
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	f003 031f 	and.w	r3, r3, #31
 800a522:	6879      	ldr	r1, [r7, #4]
 800a524:	fa01 f303 	lsl.w	r3, r1, r3
 800a528:	431a      	orrs	r2, r3
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	621a      	str	r2, [r3, #32]
}
 800a52e:	bf00      	nop
 800a530:	371c      	adds	r7, #28
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
	...

0800a53c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a1c      	ldr	r2, [pc, #112]	; (800a5b8 <TIM_ResetCallback+0x7c>)
 800a548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a1b      	ldr	r2, [pc, #108]	; (800a5bc <TIM_ResetCallback+0x80>)
 800a550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a1a      	ldr	r2, [pc, #104]	; (800a5c0 <TIM_ResetCallback+0x84>)
 800a558:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a19      	ldr	r2, [pc, #100]	; (800a5c4 <TIM_ResetCallback+0x88>)
 800a560:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a18      	ldr	r2, [pc, #96]	; (800a5c8 <TIM_ResetCallback+0x8c>)
 800a568:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4a17      	ldr	r2, [pc, #92]	; (800a5cc <TIM_ResetCallback+0x90>)
 800a570:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a16      	ldr	r2, [pc, #88]	; (800a5d0 <TIM_ResetCallback+0x94>)
 800a578:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4a15      	ldr	r2, [pc, #84]	; (800a5d4 <TIM_ResetCallback+0x98>)
 800a580:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4a14      	ldr	r2, [pc, #80]	; (800a5d8 <TIM_ResetCallback+0x9c>)
 800a588:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4a13      	ldr	r2, [pc, #76]	; (800a5dc <TIM_ResetCallback+0xa0>)
 800a590:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a12      	ldr	r2, [pc, #72]	; (800a5e0 <TIM_ResetCallback+0xa4>)
 800a598:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a11      	ldr	r2, [pc, #68]	; (800a5e4 <TIM_ResetCallback+0xa8>)
 800a5a0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a10      	ldr	r2, [pc, #64]	; (800a5e8 <TIM_ResetCallback+0xac>)
 800a5a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	08009d7d 	.word	0x08009d7d
 800a5bc:	08009d91 	.word	0x08009d91
 800a5c0:	08009e09 	.word	0x08009e09
 800a5c4:	08009e1d 	.word	0x08009e1d
 800a5c8:	08009db9 	.word	0x08009db9
 800a5cc:	08009dcd 	.word	0x08009dcd
 800a5d0:	08009da5 	.word	0x08009da5
 800a5d4:	08009de1 	.word	0x08009de1
 800a5d8:	08009df5 	.word	0x08009df5
 800a5dc:	08009e31 	.word	0x08009e31
 800a5e0:	0800a76d 	.word	0x0800a76d
 800a5e4:	0800a781 	.word	0x0800a781
 800a5e8:	0800a795 	.word	0x0800a795

0800a5ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d101      	bne.n	800a604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a600:	2302      	movs	r3, #2
 800a602:	e050      	b.n	800a6a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2202      	movs	r2, #2
 800a610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a62a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	4313      	orrs	r3, r2
 800a634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a1c      	ldr	r2, [pc, #112]	; (800a6b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d018      	beq.n	800a67a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a650:	d013      	beq.n	800a67a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a18      	ldr	r2, [pc, #96]	; (800a6b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d00e      	beq.n	800a67a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a16      	ldr	r2, [pc, #88]	; (800a6bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d009      	beq.n	800a67a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a15      	ldr	r2, [pc, #84]	; (800a6c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d004      	beq.n	800a67a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a13      	ldr	r2, [pc, #76]	; (800a6c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d10c      	bne.n	800a694 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	4313      	orrs	r3, r2
 800a68a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	40010000 	.word	0x40010000
 800a6b8:	40000400 	.word	0x40000400
 800a6bc:	40000800 	.word	0x40000800
 800a6c0:	40000c00 	.word	0x40000c00
 800a6c4:	40014000 	.word	0x40014000

0800a6c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d101      	bne.n	800a6e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a6e0:	2302      	movs	r3, #2
 800a6e2:	e03d      	b.n	800a760 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	4313      	orrs	r3, r2
 800a706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	4313      	orrs	r3, r2
 800a714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4313      	orrs	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	4313      	orrs	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	695b      	ldr	r3, [r3, #20]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	69db      	ldr	r3, [r3, #28]
 800a74a:	4313      	orrs	r3, r2
 800a74c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3714      	adds	r7, #20
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d101      	bne.n	800a7ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e04a      	b.n	800a850 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d111      	bne.n	800a7ea <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 fd2c 	bl	800b22c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d102      	bne.n	800a7e2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4a1e      	ldr	r2, [pc, #120]	; (800a858 <HAL_UART_Init+0xb0>)
 800a7e0:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2224      	movs	r2, #36	; 0x24
 800a7ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68da      	ldr	r2, [r3, #12]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a800:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 fff6 	bl	800b7f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	691a      	ldr	r2, [r3, #16]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a816:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	695a      	ldr	r2, [r3, #20]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a826:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68da      	ldr	r2, [r3, #12]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a836:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2220      	movs	r2, #32
 800a842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2220      	movs	r2, #32
 800a84a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	080043bd 	.word	0x080043bd

0800a85c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b087      	sub	sp, #28
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	460b      	mov	r3, r1
 800a866:	607a      	str	r2, [r7, #4]
 800a868:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d107      	bne.n	800a884 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a878:	f043 0220 	orr.w	r2, r3, #32
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	e08c      	b.n	800a99e <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d101      	bne.n	800a892 <HAL_UART_RegisterCallback+0x36>
 800a88e:	2302      	movs	r3, #2
 800a890:	e085      	b.n	800a99e <HAL_UART_RegisterCallback+0x142>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2201      	movs	r2, #1
 800a896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	2b20      	cmp	r3, #32
 800a8a4:	d151      	bne.n	800a94a <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800a8a6:	7afb      	ldrb	r3, [r7, #11]
 800a8a8:	2b0c      	cmp	r3, #12
 800a8aa:	d845      	bhi.n	800a938 <HAL_UART_RegisterCallback+0xdc>
 800a8ac:	a201      	add	r2, pc, #4	; (adr r2, 800a8b4 <HAL_UART_RegisterCallback+0x58>)
 800a8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b2:	bf00      	nop
 800a8b4:	0800a8e9 	.word	0x0800a8e9
 800a8b8:	0800a8f1 	.word	0x0800a8f1
 800a8bc:	0800a8f9 	.word	0x0800a8f9
 800a8c0:	0800a901 	.word	0x0800a901
 800a8c4:	0800a909 	.word	0x0800a909
 800a8c8:	0800a911 	.word	0x0800a911
 800a8cc:	0800a919 	.word	0x0800a919
 800a8d0:	0800a921 	.word	0x0800a921
 800a8d4:	0800a939 	.word	0x0800a939
 800a8d8:	0800a939 	.word	0x0800a939
 800a8dc:	0800a939 	.word	0x0800a939
 800a8e0:	0800a929 	.word	0x0800a929
 800a8e4:	0800a931 	.word	0x0800a931
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800a8ee:	e051      	b.n	800a994 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a8f6:	e04d      	b.n	800a994 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a8fe:	e049      	b.n	800a994 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a906:	e045      	b.n	800a994 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a90e:	e041      	b.n	800a994 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a916:	e03d      	b.n	800a994 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a91e:	e039      	b.n	800a994 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a926:	e035      	b.n	800a994 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a92e:	e031      	b.n	800a994 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a936:	e02d      	b.n	800a994 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a93c:	f043 0220 	orr.w	r2, r3, #32
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	75fb      	strb	r3, [r7, #23]
        break;
 800a948:	e024      	b.n	800a994 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b00      	cmp	r3, #0
 800a954:	d116      	bne.n	800a984 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800a956:	7afb      	ldrb	r3, [r7, #11]
 800a958:	2b0b      	cmp	r3, #11
 800a95a:	d002      	beq.n	800a962 <HAL_UART_RegisterCallback+0x106>
 800a95c:	2b0c      	cmp	r3, #12
 800a95e:	d004      	beq.n	800a96a <HAL_UART_RegisterCallback+0x10e>
 800a960:	e007      	b.n	800a972 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a968:	e014      	b.n	800a994 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a970:	e010      	b.n	800a994 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a976:	f043 0220 	orr.w	r2, r3, #32
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	75fb      	strb	r3, [r7, #23]
        break;
 800a982:	e007      	b.n	800a994 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a988:	f043 0220 	orr.w	r2, r3, #32
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a99c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	371c      	adds	r7, #28
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop

0800a9ac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	2b20      	cmp	r3, #32
 800a9c4:	d11d      	bne.n	800aa02 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d002      	beq.n	800a9d2 <HAL_UART_Receive_IT+0x26>
 800a9cc:	88fb      	ldrh	r3, [r7, #6]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d101      	bne.n	800a9d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e016      	b.n	800aa04 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d101      	bne.n	800a9e4 <HAL_UART_Receive_IT+0x38>
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	e00f      	b.n	800aa04 <HAL_UART_Receive_IT+0x58>
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a9f2:	88fb      	ldrh	r3, [r7, #6]
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	68b9      	ldr	r1, [r7, #8]
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f000 fcf7 	bl	800b3ec <UART_Start_Receive_IT>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	e000      	b.n	800aa04 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800aa02:	2302      	movs	r3, #2
  }
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b08c      	sub	sp, #48	; 0x30
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	4613      	mov	r3, r2
 800aa18:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	2b20      	cmp	r3, #32
 800aa24:	d165      	bne.n	800aaf2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d002      	beq.n	800aa32 <HAL_UART_Transmit_DMA+0x26>
 800aa2c:	88fb      	ldrh	r3, [r7, #6]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d101      	bne.n	800aa36 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	e05e      	b.n	800aaf4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d101      	bne.n	800aa44 <HAL_UART_Transmit_DMA+0x38>
 800aa40:	2302      	movs	r3, #2
 800aa42:	e057      	b.n	800aaf4 <HAL_UART_Transmit_DMA+0xe8>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	88fa      	ldrh	r2, [r7, #6]
 800aa56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	88fa      	ldrh	r2, [r7, #6]
 800aa5c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2200      	movs	r2, #0
 800aa62:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2221      	movs	r2, #33	; 0x21
 800aa68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa70:	4a22      	ldr	r2, [pc, #136]	; (800aafc <HAL_UART_Transmit_DMA+0xf0>)
 800aa72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa78:	4a21      	ldr	r2, [pc, #132]	; (800ab00 <HAL_UART_Transmit_DMA+0xf4>)
 800aa7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa80:	4a20      	ldr	r2, [pc, #128]	; (800ab04 <HAL_UART_Transmit_DMA+0xf8>)
 800aa82:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa88:	2200      	movs	r2, #0
 800aa8a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800aa8c:	f107 0308 	add.w	r3, r7, #8
 800aa90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800aa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa98:	6819      	ldr	r1, [r3, #0]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	88fb      	ldrh	r3, [r7, #6]
 800aaa4:	f7fa fc5e 	bl	8005364 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aab0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3314      	adds	r3, #20
 800aac0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	e853 3f00 	ldrex	r3, [r3]
 800aac8:	617b      	str	r3, [r7, #20]
   return(result);
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad0:	62bb      	str	r3, [r7, #40]	; 0x28
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3314      	adds	r3, #20
 800aad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aada:	627a      	str	r2, [r7, #36]	; 0x24
 800aadc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aade:	6a39      	ldr	r1, [r7, #32]
 800aae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aae2:	e841 2300 	strex	r3, r2, [r1]
 800aae6:	61fb      	str	r3, [r7, #28]
   return(result);
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1e5      	bne.n	800aaba <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	e000      	b.n	800aaf4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800aaf2:	2302      	movs	r3, #2
  }
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3730      	adds	r7, #48	; 0x30
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	0800b29d 	.word	0x0800b29d
 800ab00:	0800b339 	.word	0x0800b339
 800ab04:	0800b357 	.word	0x0800b357

0800ab08 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b09a      	sub	sp, #104	; 0x68
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	330c      	adds	r3, #12
 800ab16:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab1a:	e853 3f00 	ldrex	r3, [r3]
 800ab1e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ab20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab26:	667b      	str	r3, [r7, #100]	; 0x64
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	330c      	adds	r3, #12
 800ab2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ab30:	657a      	str	r2, [r7, #84]	; 0x54
 800ab32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ab36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab38:	e841 2300 	strex	r3, r2, [r1]
 800ab3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ab3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1e5      	bne.n	800ab10 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	3314      	adds	r3, #20
 800ab4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab4e:	e853 3f00 	ldrex	r3, [r3]
 800ab52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab56:	f023 0301 	bic.w	r3, r3, #1
 800ab5a:	663b      	str	r3, [r7, #96]	; 0x60
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	3314      	adds	r3, #20
 800ab62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab64:	643a      	str	r2, [r7, #64]	; 0x40
 800ab66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab6c:	e841 2300 	strex	r3, r2, [r1]
 800ab70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1e5      	bne.n	800ab44 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d119      	bne.n	800abb4 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	330c      	adds	r3, #12
 800ab86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab88:	6a3b      	ldr	r3, [r7, #32]
 800ab8a:	e853 3f00 	ldrex	r3, [r3]
 800ab8e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	f023 0310 	bic.w	r3, r3, #16
 800ab96:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	330c      	adds	r3, #12
 800ab9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aba0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aba8:	e841 2300 	strex	r3, r2, [r1]
 800abac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1e5      	bne.n	800ab80 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abbe:	2b40      	cmp	r3, #64	; 0x40
 800abc0:	d136      	bne.n	800ac30 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	3314      	adds	r3, #20
 800abc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	e853 3f00 	ldrex	r3, [r3]
 800abd0:	60bb      	str	r3, [r7, #8]
   return(result);
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abd8:	65bb      	str	r3, [r7, #88]	; 0x58
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	3314      	adds	r3, #20
 800abe0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800abe2:	61ba      	str	r2, [r7, #24]
 800abe4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe6:	6979      	ldr	r1, [r7, #20]
 800abe8:	69ba      	ldr	r2, [r7, #24]
 800abea:	e841 2300 	strex	r3, r2, [r1]
 800abee:	613b      	str	r3, [r7, #16]
   return(result);
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1e5      	bne.n	800abc2 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d018      	beq.n	800ac30 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac02:	2200      	movs	r2, #0
 800ac04:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fa fc02 	bl	8005414 <HAL_DMA_Abort>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00c      	beq.n	800ac30 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7fa fe24 	bl	8005868 <HAL_DMA_GetError>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b20      	cmp	r3, #32
 800ac24:	d104      	bne.n	800ac30 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2210      	movs	r2, #16
 800ac2a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800ac2c:	2303      	movs	r3, #3
 800ac2e:	e00a      	b.n	800ac46 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2220      	movs	r2, #32
 800ac3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3768      	adds	r7, #104	; 0x68
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
	...

0800ac50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b0ba      	sub	sp, #232	; 0xe8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	695b      	ldr	r3, [r3, #20]
 800ac72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ac76:	2300      	movs	r3, #0
 800ac78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ac82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac86:	f003 030f 	and.w	r3, r3, #15
 800ac8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ac8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d10f      	bne.n	800acb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac9a:	f003 0320 	and.w	r3, r3, #32
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d009      	beq.n	800acb6 <HAL_UART_IRQHandler+0x66>
 800aca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aca6:	f003 0320 	and.w	r3, r3, #32
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d003      	beq.n	800acb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fce3 	bl	800b67a <UART_Receive_IT>
      return;
 800acb4:	e25b      	b.n	800b16e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800acb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f000 80e1 	beq.w	800ae82 <HAL_UART_IRQHandler+0x232>
 800acc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acc4:	f003 0301 	and.w	r3, r3, #1
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d106      	bne.n	800acda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800accc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acd0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 80d4 	beq.w	800ae82 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800acda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acde:	f003 0301 	and.w	r3, r3, #1
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00b      	beq.n	800acfe <HAL_UART_IRQHandler+0xae>
 800ace6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d005      	beq.n	800acfe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf6:	f043 0201 	orr.w	r2, r3, #1
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800acfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad02:	f003 0304 	and.w	r3, r3, #4
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00b      	beq.n	800ad22 <HAL_UART_IRQHandler+0xd2>
 800ad0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad0e:	f003 0301 	and.w	r3, r3, #1
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d005      	beq.n	800ad22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad1a:	f043 0202 	orr.w	r2, r3, #2
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad26:	f003 0302 	and.w	r3, r3, #2
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00b      	beq.n	800ad46 <HAL_UART_IRQHandler+0xf6>
 800ad2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad32:	f003 0301 	and.w	r3, r3, #1
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d005      	beq.n	800ad46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3e:	f043 0204 	orr.w	r2, r3, #4
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ad46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad4a:	f003 0308 	and.w	r3, r3, #8
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d011      	beq.n	800ad76 <HAL_UART_IRQHandler+0x126>
 800ad52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad56:	f003 0320 	and.w	r3, r3, #32
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d105      	bne.n	800ad6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ad5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad62:	f003 0301 	and.w	r3, r3, #1
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d005      	beq.n	800ad76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad6e:	f043 0208 	orr.w	r2, r3, #8
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f000 81f2 	beq.w	800b164 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad84:	f003 0320 	and.w	r3, r3, #32
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d008      	beq.n	800ad9e <HAL_UART_IRQHandler+0x14e>
 800ad8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad90:	f003 0320 	and.w	r3, r3, #32
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d002      	beq.n	800ad9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fc6e 	bl	800b67a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	695b      	ldr	r3, [r3, #20]
 800ada4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada8:	2b40      	cmp	r3, #64	; 0x40
 800adaa:	bf0c      	ite	eq
 800adac:	2301      	moveq	r3, #1
 800adae:	2300      	movne	r3, #0
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adba:	f003 0308 	and.w	r3, r3, #8
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d103      	bne.n	800adca <HAL_UART_IRQHandler+0x17a>
 800adc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d051      	beq.n	800ae6e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 fb74 	bl	800b4b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	695b      	ldr	r3, [r3, #20]
 800add6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adda:	2b40      	cmp	r3, #64	; 0x40
 800addc:	d142      	bne.n	800ae64 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	3314      	adds	r3, #20
 800ade4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800adec:	e853 3f00 	ldrex	r3, [r3]
 800adf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800adf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800adf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	3314      	adds	r3, #20
 800ae06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ae0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ae0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ae16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae1a:	e841 2300 	strex	r3, r2, [r1]
 800ae1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ae22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1d9      	bne.n	800adde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d013      	beq.n	800ae5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae36:	4a7f      	ldr	r2, [pc, #508]	; (800b034 <HAL_UART_IRQHandler+0x3e4>)
 800ae38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7fa fb58 	bl	80054f4 <HAL_DMA_Abort_IT>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d019      	beq.n	800ae7e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ae54:	4610      	mov	r0, r2
 800ae56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae58:	e011      	b.n	800ae7e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae62:	e00c      	b.n	800ae7e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae6c:	e007      	b.n	800ae7e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ae7c:	e172      	b.n	800b164 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae7e:	bf00      	nop
    return;
 800ae80:	e170      	b.n	800b164 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	f040 814c 	bne.w	800b124 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ae8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae90:	f003 0310 	and.w	r3, r3, #16
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 8145 	beq.w	800b124 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ae9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae9e:	f003 0310 	and.w	r3, r3, #16
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f000 813e 	beq.w	800b124 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aea8:	2300      	movs	r3, #0
 800aeaa:	60bb      	str	r3, [r7, #8]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	60bb      	str	r3, [r7, #8]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	60bb      	str	r3, [r7, #8]
 800aebc:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	695b      	ldr	r3, [r3, #20]
 800aec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aec8:	2b40      	cmp	r3, #64	; 0x40
 800aeca:	f040 80b5 	bne.w	800b038 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aeda:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f000 8142 	beq.w	800b168 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aee8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aeec:	429a      	cmp	r2, r3
 800aeee:	f080 813b 	bcs.w	800b168 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aef8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aefe:	69db      	ldr	r3, [r3, #28]
 800af00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af04:	f000 8088 	beq.w	800b018 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	330c      	adds	r3, #12
 800af0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af16:	e853 3f00 	ldrex	r3, [r3]
 800af1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800af1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	330c      	adds	r3, #12
 800af30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800af34:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800af38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800af40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800af44:	e841 2300 	strex	r3, r2, [r1]
 800af48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800af4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af50:	2b00      	cmp	r3, #0
 800af52:	d1d9      	bne.n	800af08 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	3314      	adds	r3, #20
 800af5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af5e:	e853 3f00 	ldrex	r3, [r3]
 800af62:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800af64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af66:	f023 0301 	bic.w	r3, r3, #1
 800af6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	3314      	adds	r3, #20
 800af74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800af78:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800af7c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af7e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800af80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800af84:	e841 2300 	strex	r3, r2, [r1]
 800af88:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800af8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1e1      	bne.n	800af54 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	3314      	adds	r3, #20
 800af96:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af9a:	e853 3f00 	ldrex	r3, [r3]
 800af9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800afa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	3314      	adds	r3, #20
 800afb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800afb4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800afb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800afba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800afbc:	e841 2300 	strex	r3, r2, [r1]
 800afc0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800afc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d1e3      	bne.n	800af90 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2220      	movs	r2, #32
 800afcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	330c      	adds	r3, #12
 800afdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afe0:	e853 3f00 	ldrex	r3, [r3]
 800afe4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800afe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afe8:	f023 0310 	bic.w	r3, r3, #16
 800afec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	330c      	adds	r3, #12
 800aff6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800affa:	65ba      	str	r2, [r7, #88]	; 0x58
 800affc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b000:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b002:	e841 2300 	strex	r3, r2, [r1]
 800b006:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d1e3      	bne.n	800afd6 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b012:	4618      	mov	r0, r3
 800b014:	f7fa f9fe 	bl	8005414 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b024:	b292      	uxth	r2, r2
 800b026:	1a8a      	subs	r2, r1, r2
 800b028:	b292      	uxth	r2, r2
 800b02a:	4611      	mov	r1, r2
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b030:	e09a      	b.n	800b168 <HAL_UART_IRQHandler+0x518>
 800b032:	bf00      	nop
 800b034:	0800b57f 	.word	0x0800b57f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b040:	b29b      	uxth	r3, r3
 800b042:	1ad3      	subs	r3, r2, r3
 800b044:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	2b00      	cmp	r3, #0
 800b050:	f000 808c 	beq.w	800b16c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f000 8087 	beq.w	800b16c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	330c      	adds	r3, #12
 800b064:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b068:	e853 3f00 	ldrex	r3, [r3]
 800b06c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b070:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b074:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	330c      	adds	r3, #12
 800b07e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b082:	647a      	str	r2, [r7, #68]	; 0x44
 800b084:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b086:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b08a:	e841 2300 	strex	r3, r2, [r1]
 800b08e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1e3      	bne.n	800b05e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3314      	adds	r3, #20
 800b09c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a0:	e853 3f00 	ldrex	r3, [r3]
 800b0a4:	623b      	str	r3, [r7, #32]
   return(result);
 800b0a6:	6a3b      	ldr	r3, [r7, #32]
 800b0a8:	f023 0301 	bic.w	r3, r3, #1
 800b0ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	3314      	adds	r3, #20
 800b0b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b0ba:	633a      	str	r2, [r7, #48]	; 0x30
 800b0bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0c2:	e841 2300 	strex	r3, r2, [r1]
 800b0c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e3      	bne.n	800b096 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2220      	movs	r2, #32
 800b0d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	330c      	adds	r3, #12
 800b0e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	e853 3f00 	ldrex	r3, [r3]
 800b0ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f023 0310 	bic.w	r3, r3, #16
 800b0f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	330c      	adds	r3, #12
 800b0fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b100:	61fa      	str	r2, [r7, #28]
 800b102:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b104:	69b9      	ldr	r1, [r7, #24]
 800b106:	69fa      	ldr	r2, [r7, #28]
 800b108:	e841 2300 	strex	r3, r2, [r1]
 800b10c:	617b      	str	r3, [r7, #20]
   return(result);
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1e3      	bne.n	800b0dc <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b118:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b11c:	4611      	mov	r1, r2
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b122:	e023      	b.n	800b16c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d009      	beq.n	800b144 <HAL_UART_IRQHandler+0x4f4>
 800b130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d003      	beq.n	800b144 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 fa33 	bl	800b5a8 <UART_Transmit_IT>
    return;
 800b142:	e014      	b.n	800b16e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00e      	beq.n	800b16e <HAL_UART_IRQHandler+0x51e>
 800b150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d008      	beq.n	800b16e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 fa73 	bl	800b648 <UART_EndTransmit_IT>
    return;
 800b162:	e004      	b.n	800b16e <HAL_UART_IRQHandler+0x51e>
    return;
 800b164:	bf00      	nop
 800b166:	e002      	b.n	800b16e <HAL_UART_IRQHandler+0x51e>
      return;
 800b168:	bf00      	nop
 800b16a:	e000      	b.n	800b16e <HAL_UART_IRQHandler+0x51e>
      return;
 800b16c:	bf00      	nop
  }
}
 800b16e:	37e8      	adds	r7, #232	; 0xe8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b1b8:	bf00      	nop
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b1f4:	bf00      	nop
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b208:	bf00      	nop
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	460b      	mov	r3, r1
 800b21e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a10      	ldr	r2, [pc, #64]	; (800b278 <UART_InitCallbacksToDefault+0x4c>)
 800b238:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4a0f      	ldr	r2, [pc, #60]	; (800b27c <UART_InitCallbacksToDefault+0x50>)
 800b23e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a0f      	ldr	r2, [pc, #60]	; (800b280 <UART_InitCallbacksToDefault+0x54>)
 800b244:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	4a0e      	ldr	r2, [pc, #56]	; (800b284 <UART_InitCallbacksToDefault+0x58>)
 800b24a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a0e      	ldr	r2, [pc, #56]	; (800b288 <UART_InitCallbacksToDefault+0x5c>)
 800b250:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	4a0d      	ldr	r2, [pc, #52]	; (800b28c <UART_InitCallbacksToDefault+0x60>)
 800b256:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a0d      	ldr	r2, [pc, #52]	; (800b290 <UART_InitCallbacksToDefault+0x64>)
 800b25c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a0c      	ldr	r2, [pc, #48]	; (800b294 <UART_InitCallbacksToDefault+0x68>)
 800b262:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	4a0c      	ldr	r2, [pc, #48]	; (800b298 <UART_InitCallbacksToDefault+0x6c>)
 800b268:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b26a:	bf00      	nop
 800b26c:	370c      	adds	r7, #12
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	0800b189 	.word	0x0800b189
 800b27c:	0800b175 	.word	0x0800b175
 800b280:	0800b1b1 	.word	0x0800b1b1
 800b284:	0800b19d 	.word	0x0800b19d
 800b288:	0800b1c5 	.word	0x0800b1c5
 800b28c:	0800b1d9 	.word	0x0800b1d9
 800b290:	0800b1ed 	.word	0x0800b1ed
 800b294:	0800b201 	.word	0x0800b201
 800b298:	0800b215 	.word	0x0800b215

0800b29c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b090      	sub	sp, #64	; 0x40
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d137      	bne.n	800b328 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b2be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	3314      	adds	r3, #20
 800b2c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c8:	e853 3f00 	ldrex	r3, [r3]
 800b2cc:	623b      	str	r3, [r7, #32]
   return(result);
 800b2ce:	6a3b      	ldr	r3, [r7, #32]
 800b2d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	3314      	adds	r3, #20
 800b2dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2de:	633a      	str	r2, [r7, #48]	; 0x30
 800b2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2e6:	e841 2300 	strex	r3, r2, [r1]
 800b2ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d1e5      	bne.n	800b2be <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b2f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	330c      	adds	r3, #12
 800b2f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	e853 3f00 	ldrex	r3, [r3]
 800b300:	60fb      	str	r3, [r7, #12]
   return(result);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b308:	637b      	str	r3, [r7, #52]	; 0x34
 800b30a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	330c      	adds	r3, #12
 800b310:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b312:	61fa      	str	r2, [r7, #28]
 800b314:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b316:	69b9      	ldr	r1, [r7, #24]
 800b318:	69fa      	ldr	r2, [r7, #28]
 800b31a:	e841 2300 	strex	r3, r2, [r1]
 800b31e:	617b      	str	r3, [r7, #20]
   return(result);
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1e5      	bne.n	800b2f2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b326:	e003      	b.n	800b330 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800b328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b32a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b32c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b32e:	4798      	blx	r3
}
 800b330:	bf00      	nop
 800b332:	3740      	adds	r7, #64	; 0x40
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b344:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b34a:	68f8      	ldr	r0, [r7, #12]
 800b34c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b34e:	bf00      	nop
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}

0800b356 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b084      	sub	sp, #16
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b35e:	2300      	movs	r3, #0
 800b360:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b366:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b372:	2b80      	cmp	r3, #128	; 0x80
 800b374:	bf0c      	ite	eq
 800b376:	2301      	moveq	r3, #1
 800b378:	2300      	movne	r3, #0
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b384:	b2db      	uxtb	r3, r3
 800b386:	2b21      	cmp	r3, #33	; 0x21
 800b388:	d108      	bne.n	800b39c <UART_DMAError+0x46>
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d005      	beq.n	800b39c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	2200      	movs	r2, #0
 800b394:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b396:	68b8      	ldr	r0, [r7, #8]
 800b398:	f000 f866 	bl	800b468 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a6:	2b40      	cmp	r3, #64	; 0x40
 800b3a8:	bf0c      	ite	eq
 800b3aa:	2301      	moveq	r3, #1
 800b3ac:	2300      	movne	r3, #0
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	2b22      	cmp	r3, #34	; 0x22
 800b3bc:	d108      	bne.n	800b3d0 <UART_DMAError+0x7a>
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d005      	beq.n	800b3d0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b3ca:	68b8      	ldr	r0, [r7, #8]
 800b3cc:	f000 f874 	bl	800b4b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d4:	f043 0210 	orr.w	r2, r3, #16
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3e0:	68b8      	ldr	r0, [r7, #8]
 800b3e2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3e4:	bf00      	nop
 800b3e6:	3710      	adds	r7, #16
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	88fa      	ldrh	r2, [r7, #6]
 800b404:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	88fa      	ldrh	r2, [r7, #6]
 800b40a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2200      	movs	r2, #0
 800b410:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2222      	movs	r2, #34	; 0x22
 800b416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d007      	beq.n	800b43a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	68da      	ldr	r2, [r3, #12]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b438:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	695a      	ldr	r2, [r3, #20]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f042 0201 	orr.w	r2, r2, #1
 800b448:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	68da      	ldr	r2, [r3, #12]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f042 0220 	orr.w	r2, r2, #32
 800b458:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3714      	adds	r7, #20
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b468:	b480      	push	{r7}
 800b46a:	b089      	sub	sp, #36	; 0x24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	330c      	adds	r3, #12
 800b476:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	e853 3f00 	ldrex	r3, [r3]
 800b47e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b486:	61fb      	str	r3, [r7, #28]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	330c      	adds	r3, #12
 800b48e:	69fa      	ldr	r2, [r7, #28]
 800b490:	61ba      	str	r2, [r7, #24]
 800b492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b494:	6979      	ldr	r1, [r7, #20]
 800b496:	69ba      	ldr	r2, [r7, #24]
 800b498:	e841 2300 	strex	r3, r2, [r1]
 800b49c:	613b      	str	r3, [r7, #16]
   return(result);
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1e5      	bne.n	800b470 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2220      	movs	r2, #32
 800b4a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b4ac:	bf00      	nop
 800b4ae:	3724      	adds	r7, #36	; 0x24
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b095      	sub	sp, #84	; 0x54
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	330c      	adds	r3, #12
 800b4c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ca:	e853 3f00 	ldrex	r3, [r3]
 800b4ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	330c      	adds	r3, #12
 800b4de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b4e0:	643a      	str	r2, [r7, #64]	; 0x40
 800b4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4e8:	e841 2300 	strex	r3, r2, [r1]
 800b4ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1e5      	bne.n	800b4c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	3314      	adds	r3, #20
 800b4fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fc:	6a3b      	ldr	r3, [r7, #32]
 800b4fe:	e853 3f00 	ldrex	r3, [r3]
 800b502:	61fb      	str	r3, [r7, #28]
   return(result);
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	f023 0301 	bic.w	r3, r3, #1
 800b50a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	3314      	adds	r3, #20
 800b512:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b514:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b516:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b51a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b51c:	e841 2300 	strex	r3, r2, [r1]
 800b520:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1e5      	bne.n	800b4f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d119      	bne.n	800b564 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	330c      	adds	r3, #12
 800b536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	e853 3f00 	ldrex	r3, [r3]
 800b53e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	f023 0310 	bic.w	r3, r3, #16
 800b546:	647b      	str	r3, [r7, #68]	; 0x44
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	330c      	adds	r3, #12
 800b54e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b550:	61ba      	str	r2, [r7, #24]
 800b552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b554:	6979      	ldr	r1, [r7, #20]
 800b556:	69ba      	ldr	r2, [r7, #24]
 800b558:	e841 2300 	strex	r3, r2, [r1]
 800b55c:	613b      	str	r3, [r7, #16]
   return(result);
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1e5      	bne.n	800b530 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2220      	movs	r2, #32
 800b568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b572:	bf00      	nop
 800b574:	3754      	adds	r7, #84	; 0x54
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr

0800b57e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b084      	sub	sp, #16
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b58a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2200      	movs	r2, #0
 800b596:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5a0:	bf00      	nop
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	2b21      	cmp	r3, #33	; 0x21
 800b5ba:	d13e      	bne.n	800b63a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5c4:	d114      	bne.n	800b5f0 <UART_Transmit_IT+0x48>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d110      	bne.n	800b5f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6a1b      	ldr	r3, [r3, #32]
 800b5d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	881b      	ldrh	r3, [r3, #0]
 800b5d8:	461a      	mov	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a1b      	ldr	r3, [r3, #32]
 800b5e8:	1c9a      	adds	r2, r3, #2
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	621a      	str	r2, [r3, #32]
 800b5ee:	e008      	b.n	800b602 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6a1b      	ldr	r3, [r3, #32]
 800b5f4:	1c59      	adds	r1, r3, #1
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	6211      	str	r1, [r2, #32]
 800b5fa:	781a      	ldrb	r2, [r3, #0]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b606:	b29b      	uxth	r3, r3
 800b608:	3b01      	subs	r3, #1
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	4619      	mov	r1, r3
 800b610:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10f      	bne.n	800b636 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	68da      	ldr	r2, [r3, #12]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b624:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	68da      	ldr	r2, [r3, #12]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b634:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b636:	2300      	movs	r3, #0
 800b638:	e000      	b.n	800b63c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b63a:	2302      	movs	r3, #2
  }
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3714      	adds	r7, #20
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68da      	ldr	r2, [r3, #12]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b65e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2220      	movs	r2, #32
 800b664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b670:	2300      	movs	r3, #0
}
 800b672:	4618      	mov	r0, r3
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}

0800b67a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b08c      	sub	sp, #48	; 0x30
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	2b22      	cmp	r3, #34	; 0x22
 800b68c:	f040 80ad 	bne.w	800b7ea <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b698:	d117      	bne.n	800b6ca <UART_Receive_IT+0x50>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	691b      	ldr	r3, [r3, #16]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d113      	bne.n	800b6ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c2:	1c9a      	adds	r2, r3, #2
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	629a      	str	r2, [r3, #40]	; 0x28
 800b6c8:	e026      	b.n	800b718 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6dc:	d007      	beq.n	800b6ee <UART_Receive_IT+0x74>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d10a      	bne.n	800b6fc <UART_Receive_IT+0x82>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	691b      	ldr	r3, [r3, #16]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d106      	bne.n	800b6fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	b2da      	uxtb	r2, r3
 800b6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f8:	701a      	strb	r2, [r3, #0]
 800b6fa:	e008      	b.n	800b70e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	b2db      	uxtb	r3, r3
 800b704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b708:	b2da      	uxtb	r2, r3
 800b70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b712:	1c5a      	adds	r2, r3, #1
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	3b01      	subs	r3, #1
 800b720:	b29b      	uxth	r3, r3
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	4619      	mov	r1, r3
 800b726:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d15c      	bne.n	800b7e6 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68da      	ldr	r2, [r3, #12]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f022 0220 	bic.w	r2, r2, #32
 800b73a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68da      	ldr	r2, [r3, #12]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b74a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	695a      	ldr	r2, [r3, #20]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f022 0201 	bic.w	r2, r2, #1
 800b75a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2220      	movs	r2, #32
 800b760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d136      	bne.n	800b7da <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	330c      	adds	r3, #12
 800b778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	e853 3f00 	ldrex	r3, [r3]
 800b780:	613b      	str	r3, [r7, #16]
   return(result);
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	f023 0310 	bic.w	r3, r3, #16
 800b788:	627b      	str	r3, [r7, #36]	; 0x24
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	330c      	adds	r3, #12
 800b790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b792:	623a      	str	r2, [r7, #32]
 800b794:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b796:	69f9      	ldr	r1, [r7, #28]
 800b798:	6a3a      	ldr	r2, [r7, #32]
 800b79a:	e841 2300 	strex	r3, r2, [r1]
 800b79e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1e5      	bne.n	800b772 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 0310 	and.w	r3, r3, #16
 800b7b0:	2b10      	cmp	r3, #16
 800b7b2:	d10a      	bne.n	800b7ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	60fb      	str	r3, [r7, #12]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	60fb      	str	r3, [r7, #12]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	60fb      	str	r3, [r7, #12]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b7d2:	4611      	mov	r1, r2
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	4798      	blx	r3
 800b7d8:	e003      	b.n	800b7e2 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	e002      	b.n	800b7ec <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	e000      	b.n	800b7ec <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b7ea:	2302      	movs	r3, #2
  }
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3730      	adds	r7, #48	; 0x30
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7f8:	b0c0      	sub	sp, #256	; 0x100
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b80c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b810:	68d9      	ldr	r1, [r3, #12]
 800b812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	ea40 0301 	orr.w	r3, r0, r1
 800b81c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b81e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b822:	689a      	ldr	r2, [r3, #8]
 800b824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b828:	691b      	ldr	r3, [r3, #16]
 800b82a:	431a      	orrs	r2, r3
 800b82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b830:	695b      	ldr	r3, [r3, #20]
 800b832:	431a      	orrs	r2, r3
 800b834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b838:	69db      	ldr	r3, [r3, #28]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b84c:	f021 010c 	bic.w	r1, r1, #12
 800b850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b85a:	430b      	orrs	r3, r1
 800b85c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b85e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	695b      	ldr	r3, [r3, #20]
 800b866:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b86a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b86e:	6999      	ldr	r1, [r3, #24]
 800b870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	ea40 0301 	orr.w	r3, r0, r1
 800b87a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b87c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	4b8f      	ldr	r3, [pc, #572]	; (800bac0 <UART_SetConfig+0x2cc>)
 800b884:	429a      	cmp	r2, r3
 800b886:	d005      	beq.n	800b894 <UART_SetConfig+0xa0>
 800b888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	4b8d      	ldr	r3, [pc, #564]	; (800bac4 <UART_SetConfig+0x2d0>)
 800b890:	429a      	cmp	r2, r3
 800b892:	d104      	bne.n	800b89e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b894:	f7fd fb7e 	bl	8008f94 <HAL_RCC_GetPCLK2Freq>
 800b898:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b89c:	e003      	b.n	800b8a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b89e:	f7fd fb65 	bl	8008f6c <HAL_RCC_GetPCLK1Freq>
 800b8a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8aa:	69db      	ldr	r3, [r3, #28]
 800b8ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8b0:	f040 810c 	bne.w	800bacc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b8b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b8be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b8c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b8c6:	4622      	mov	r2, r4
 800b8c8:	462b      	mov	r3, r5
 800b8ca:	1891      	adds	r1, r2, r2
 800b8cc:	65b9      	str	r1, [r7, #88]	; 0x58
 800b8ce:	415b      	adcs	r3, r3
 800b8d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b8d6:	4621      	mov	r1, r4
 800b8d8:	eb12 0801 	adds.w	r8, r2, r1
 800b8dc:	4629      	mov	r1, r5
 800b8de:	eb43 0901 	adc.w	r9, r3, r1
 800b8e2:	f04f 0200 	mov.w	r2, #0
 800b8e6:	f04f 0300 	mov.w	r3, #0
 800b8ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b8ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b8f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b8f6:	4690      	mov	r8, r2
 800b8f8:	4699      	mov	r9, r3
 800b8fa:	4623      	mov	r3, r4
 800b8fc:	eb18 0303 	adds.w	r3, r8, r3
 800b900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b904:	462b      	mov	r3, r5
 800b906:	eb49 0303 	adc.w	r3, r9, r3
 800b90a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b90e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b91a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b91e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b922:	460b      	mov	r3, r1
 800b924:	18db      	adds	r3, r3, r3
 800b926:	653b      	str	r3, [r7, #80]	; 0x50
 800b928:	4613      	mov	r3, r2
 800b92a:	eb42 0303 	adc.w	r3, r2, r3
 800b92e:	657b      	str	r3, [r7, #84]	; 0x54
 800b930:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b934:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b938:	f7f5 f952 	bl	8000be0 <__aeabi_uldivmod>
 800b93c:	4602      	mov	r2, r0
 800b93e:	460b      	mov	r3, r1
 800b940:	4b61      	ldr	r3, [pc, #388]	; (800bac8 <UART_SetConfig+0x2d4>)
 800b942:	fba3 2302 	umull	r2, r3, r3, r2
 800b946:	095b      	lsrs	r3, r3, #5
 800b948:	011c      	lsls	r4, r3, #4
 800b94a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b94e:	2200      	movs	r2, #0
 800b950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b954:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b958:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b95c:	4642      	mov	r2, r8
 800b95e:	464b      	mov	r3, r9
 800b960:	1891      	adds	r1, r2, r2
 800b962:	64b9      	str	r1, [r7, #72]	; 0x48
 800b964:	415b      	adcs	r3, r3
 800b966:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b968:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b96c:	4641      	mov	r1, r8
 800b96e:	eb12 0a01 	adds.w	sl, r2, r1
 800b972:	4649      	mov	r1, r9
 800b974:	eb43 0b01 	adc.w	fp, r3, r1
 800b978:	f04f 0200 	mov.w	r2, #0
 800b97c:	f04f 0300 	mov.w	r3, #0
 800b980:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b984:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b988:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b98c:	4692      	mov	sl, r2
 800b98e:	469b      	mov	fp, r3
 800b990:	4643      	mov	r3, r8
 800b992:	eb1a 0303 	adds.w	r3, sl, r3
 800b996:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b99a:	464b      	mov	r3, r9
 800b99c:	eb4b 0303 	adc.w	r3, fp, r3
 800b9a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b9a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b9b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	18db      	adds	r3, r3, r3
 800b9bc:	643b      	str	r3, [r7, #64]	; 0x40
 800b9be:	4613      	mov	r3, r2
 800b9c0:	eb42 0303 	adc.w	r3, r2, r3
 800b9c4:	647b      	str	r3, [r7, #68]	; 0x44
 800b9c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b9ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b9ce:	f7f5 f907 	bl	8000be0 <__aeabi_uldivmod>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	4611      	mov	r1, r2
 800b9d8:	4b3b      	ldr	r3, [pc, #236]	; (800bac8 <UART_SetConfig+0x2d4>)
 800b9da:	fba3 2301 	umull	r2, r3, r3, r1
 800b9de:	095b      	lsrs	r3, r3, #5
 800b9e0:	2264      	movs	r2, #100	; 0x64
 800b9e2:	fb02 f303 	mul.w	r3, r2, r3
 800b9e6:	1acb      	subs	r3, r1, r3
 800b9e8:	00db      	lsls	r3, r3, #3
 800b9ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b9ee:	4b36      	ldr	r3, [pc, #216]	; (800bac8 <UART_SetConfig+0x2d4>)
 800b9f0:	fba3 2302 	umull	r2, r3, r3, r2
 800b9f4:	095b      	lsrs	r3, r3, #5
 800b9f6:	005b      	lsls	r3, r3, #1
 800b9f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b9fc:	441c      	add	r4, r3
 800b9fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba02:	2200      	movs	r2, #0
 800ba04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ba0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ba10:	4642      	mov	r2, r8
 800ba12:	464b      	mov	r3, r9
 800ba14:	1891      	adds	r1, r2, r2
 800ba16:	63b9      	str	r1, [r7, #56]	; 0x38
 800ba18:	415b      	adcs	r3, r3
 800ba1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ba20:	4641      	mov	r1, r8
 800ba22:	1851      	adds	r1, r2, r1
 800ba24:	6339      	str	r1, [r7, #48]	; 0x30
 800ba26:	4649      	mov	r1, r9
 800ba28:	414b      	adcs	r3, r1
 800ba2a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba2c:	f04f 0200 	mov.w	r2, #0
 800ba30:	f04f 0300 	mov.w	r3, #0
 800ba34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ba38:	4659      	mov	r1, fp
 800ba3a:	00cb      	lsls	r3, r1, #3
 800ba3c:	4651      	mov	r1, sl
 800ba3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba42:	4651      	mov	r1, sl
 800ba44:	00ca      	lsls	r2, r1, #3
 800ba46:	4610      	mov	r0, r2
 800ba48:	4619      	mov	r1, r3
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	4642      	mov	r2, r8
 800ba4e:	189b      	adds	r3, r3, r2
 800ba50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba54:	464b      	mov	r3, r9
 800ba56:	460a      	mov	r2, r1
 800ba58:	eb42 0303 	adc.w	r3, r2, r3
 800ba5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ba6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ba70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ba74:	460b      	mov	r3, r1
 800ba76:	18db      	adds	r3, r3, r3
 800ba78:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	eb42 0303 	adc.w	r3, r2, r3
 800ba80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ba86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ba8a:	f7f5 f8a9 	bl	8000be0 <__aeabi_uldivmod>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	460b      	mov	r3, r1
 800ba92:	4b0d      	ldr	r3, [pc, #52]	; (800bac8 <UART_SetConfig+0x2d4>)
 800ba94:	fba3 1302 	umull	r1, r3, r3, r2
 800ba98:	095b      	lsrs	r3, r3, #5
 800ba9a:	2164      	movs	r1, #100	; 0x64
 800ba9c:	fb01 f303 	mul.w	r3, r1, r3
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	00db      	lsls	r3, r3, #3
 800baa4:	3332      	adds	r3, #50	; 0x32
 800baa6:	4a08      	ldr	r2, [pc, #32]	; (800bac8 <UART_SetConfig+0x2d4>)
 800baa8:	fba2 2303 	umull	r2, r3, r2, r3
 800baac:	095b      	lsrs	r3, r3, #5
 800baae:	f003 0207 	and.w	r2, r3, #7
 800bab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4422      	add	r2, r4
 800baba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800babc:	e105      	b.n	800bcca <UART_SetConfig+0x4d6>
 800babe:	bf00      	nop
 800bac0:	40011000 	.word	0x40011000
 800bac4:	40011400 	.word	0x40011400
 800bac8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bacc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bad0:	2200      	movs	r2, #0
 800bad2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bad6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bada:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bade:	4642      	mov	r2, r8
 800bae0:	464b      	mov	r3, r9
 800bae2:	1891      	adds	r1, r2, r2
 800bae4:	6239      	str	r1, [r7, #32]
 800bae6:	415b      	adcs	r3, r3
 800bae8:	627b      	str	r3, [r7, #36]	; 0x24
 800baea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800baee:	4641      	mov	r1, r8
 800baf0:	1854      	adds	r4, r2, r1
 800baf2:	4649      	mov	r1, r9
 800baf4:	eb43 0501 	adc.w	r5, r3, r1
 800baf8:	f04f 0200 	mov.w	r2, #0
 800bafc:	f04f 0300 	mov.w	r3, #0
 800bb00:	00eb      	lsls	r3, r5, #3
 800bb02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bb06:	00e2      	lsls	r2, r4, #3
 800bb08:	4614      	mov	r4, r2
 800bb0a:	461d      	mov	r5, r3
 800bb0c:	4643      	mov	r3, r8
 800bb0e:	18e3      	adds	r3, r4, r3
 800bb10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bb14:	464b      	mov	r3, r9
 800bb16:	eb45 0303 	adc.w	r3, r5, r3
 800bb1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bb1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bb2e:	f04f 0200 	mov.w	r2, #0
 800bb32:	f04f 0300 	mov.w	r3, #0
 800bb36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bb3a:	4629      	mov	r1, r5
 800bb3c:	008b      	lsls	r3, r1, #2
 800bb3e:	4621      	mov	r1, r4
 800bb40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb44:	4621      	mov	r1, r4
 800bb46:	008a      	lsls	r2, r1, #2
 800bb48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bb4c:	f7f5 f848 	bl	8000be0 <__aeabi_uldivmod>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4b60      	ldr	r3, [pc, #384]	; (800bcd8 <UART_SetConfig+0x4e4>)
 800bb56:	fba3 2302 	umull	r2, r3, r3, r2
 800bb5a:	095b      	lsrs	r3, r3, #5
 800bb5c:	011c      	lsls	r4, r3, #4
 800bb5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb62:	2200      	movs	r2, #0
 800bb64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bb68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bb6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bb70:	4642      	mov	r2, r8
 800bb72:	464b      	mov	r3, r9
 800bb74:	1891      	adds	r1, r2, r2
 800bb76:	61b9      	str	r1, [r7, #24]
 800bb78:	415b      	adcs	r3, r3
 800bb7a:	61fb      	str	r3, [r7, #28]
 800bb7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb80:	4641      	mov	r1, r8
 800bb82:	1851      	adds	r1, r2, r1
 800bb84:	6139      	str	r1, [r7, #16]
 800bb86:	4649      	mov	r1, r9
 800bb88:	414b      	adcs	r3, r1
 800bb8a:	617b      	str	r3, [r7, #20]
 800bb8c:	f04f 0200 	mov.w	r2, #0
 800bb90:	f04f 0300 	mov.w	r3, #0
 800bb94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bb98:	4659      	mov	r1, fp
 800bb9a:	00cb      	lsls	r3, r1, #3
 800bb9c:	4651      	mov	r1, sl
 800bb9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bba2:	4651      	mov	r1, sl
 800bba4:	00ca      	lsls	r2, r1, #3
 800bba6:	4610      	mov	r0, r2
 800bba8:	4619      	mov	r1, r3
 800bbaa:	4603      	mov	r3, r0
 800bbac:	4642      	mov	r2, r8
 800bbae:	189b      	adds	r3, r3, r2
 800bbb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bbb4:	464b      	mov	r3, r9
 800bbb6:	460a      	mov	r2, r1
 800bbb8:	eb42 0303 	adc.w	r3, r2, r3
 800bbbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bbc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	67bb      	str	r3, [r7, #120]	; 0x78
 800bbca:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bbcc:	f04f 0200 	mov.w	r2, #0
 800bbd0:	f04f 0300 	mov.w	r3, #0
 800bbd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bbd8:	4649      	mov	r1, r9
 800bbda:	008b      	lsls	r3, r1, #2
 800bbdc:	4641      	mov	r1, r8
 800bbde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bbe2:	4641      	mov	r1, r8
 800bbe4:	008a      	lsls	r2, r1, #2
 800bbe6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bbea:	f7f4 fff9 	bl	8000be0 <__aeabi_uldivmod>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	4b39      	ldr	r3, [pc, #228]	; (800bcd8 <UART_SetConfig+0x4e4>)
 800bbf4:	fba3 1302 	umull	r1, r3, r3, r2
 800bbf8:	095b      	lsrs	r3, r3, #5
 800bbfa:	2164      	movs	r1, #100	; 0x64
 800bbfc:	fb01 f303 	mul.w	r3, r1, r3
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	011b      	lsls	r3, r3, #4
 800bc04:	3332      	adds	r3, #50	; 0x32
 800bc06:	4a34      	ldr	r2, [pc, #208]	; (800bcd8 <UART_SetConfig+0x4e4>)
 800bc08:	fba2 2303 	umull	r2, r3, r2, r3
 800bc0c:	095b      	lsrs	r3, r3, #5
 800bc0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc12:	441c      	add	r4, r3
 800bc14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc18:	2200      	movs	r2, #0
 800bc1a:	673b      	str	r3, [r7, #112]	; 0x70
 800bc1c:	677a      	str	r2, [r7, #116]	; 0x74
 800bc1e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bc22:	4642      	mov	r2, r8
 800bc24:	464b      	mov	r3, r9
 800bc26:	1891      	adds	r1, r2, r2
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	415b      	adcs	r3, r3
 800bc2c:	60fb      	str	r3, [r7, #12]
 800bc2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc32:	4641      	mov	r1, r8
 800bc34:	1851      	adds	r1, r2, r1
 800bc36:	6039      	str	r1, [r7, #0]
 800bc38:	4649      	mov	r1, r9
 800bc3a:	414b      	adcs	r3, r1
 800bc3c:	607b      	str	r3, [r7, #4]
 800bc3e:	f04f 0200 	mov.w	r2, #0
 800bc42:	f04f 0300 	mov.w	r3, #0
 800bc46:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bc4a:	4659      	mov	r1, fp
 800bc4c:	00cb      	lsls	r3, r1, #3
 800bc4e:	4651      	mov	r1, sl
 800bc50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc54:	4651      	mov	r1, sl
 800bc56:	00ca      	lsls	r2, r1, #3
 800bc58:	4610      	mov	r0, r2
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	4642      	mov	r2, r8
 800bc60:	189b      	adds	r3, r3, r2
 800bc62:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc64:	464b      	mov	r3, r9
 800bc66:	460a      	mov	r2, r1
 800bc68:	eb42 0303 	adc.w	r3, r2, r3
 800bc6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	663b      	str	r3, [r7, #96]	; 0x60
 800bc78:	667a      	str	r2, [r7, #100]	; 0x64
 800bc7a:	f04f 0200 	mov.w	r2, #0
 800bc7e:	f04f 0300 	mov.w	r3, #0
 800bc82:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bc86:	4649      	mov	r1, r9
 800bc88:	008b      	lsls	r3, r1, #2
 800bc8a:	4641      	mov	r1, r8
 800bc8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc90:	4641      	mov	r1, r8
 800bc92:	008a      	lsls	r2, r1, #2
 800bc94:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bc98:	f7f4 ffa2 	bl	8000be0 <__aeabi_uldivmod>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4b0d      	ldr	r3, [pc, #52]	; (800bcd8 <UART_SetConfig+0x4e4>)
 800bca2:	fba3 1302 	umull	r1, r3, r3, r2
 800bca6:	095b      	lsrs	r3, r3, #5
 800bca8:	2164      	movs	r1, #100	; 0x64
 800bcaa:	fb01 f303 	mul.w	r3, r1, r3
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	011b      	lsls	r3, r3, #4
 800bcb2:	3332      	adds	r3, #50	; 0x32
 800bcb4:	4a08      	ldr	r2, [pc, #32]	; (800bcd8 <UART_SetConfig+0x4e4>)
 800bcb6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcba:	095b      	lsrs	r3, r3, #5
 800bcbc:	f003 020f 	and.w	r2, r3, #15
 800bcc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4422      	add	r2, r4
 800bcc8:	609a      	str	r2, [r3, #8]
}
 800bcca:	bf00      	nop
 800bccc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcd6:	bf00      	nop
 800bcd8:	51eb851f 	.word	0x51eb851f

0800bcdc <__errno>:
 800bcdc:	4b01      	ldr	r3, [pc, #4]	; (800bce4 <__errno+0x8>)
 800bcde:	6818      	ldr	r0, [r3, #0]
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	2000024c 	.word	0x2000024c

0800bce8 <__libc_init_array>:
 800bce8:	b570      	push	{r4, r5, r6, lr}
 800bcea:	4d0d      	ldr	r5, [pc, #52]	; (800bd20 <__libc_init_array+0x38>)
 800bcec:	4c0d      	ldr	r4, [pc, #52]	; (800bd24 <__libc_init_array+0x3c>)
 800bcee:	1b64      	subs	r4, r4, r5
 800bcf0:	10a4      	asrs	r4, r4, #2
 800bcf2:	2600      	movs	r6, #0
 800bcf4:	42a6      	cmp	r6, r4
 800bcf6:	d109      	bne.n	800bd0c <__libc_init_array+0x24>
 800bcf8:	4d0b      	ldr	r5, [pc, #44]	; (800bd28 <__libc_init_array+0x40>)
 800bcfa:	4c0c      	ldr	r4, [pc, #48]	; (800bd2c <__libc_init_array+0x44>)
 800bcfc:	f000 fa40 	bl	800c180 <_init>
 800bd00:	1b64      	subs	r4, r4, r5
 800bd02:	10a4      	asrs	r4, r4, #2
 800bd04:	2600      	movs	r6, #0
 800bd06:	42a6      	cmp	r6, r4
 800bd08:	d105      	bne.n	800bd16 <__libc_init_array+0x2e>
 800bd0a:	bd70      	pop	{r4, r5, r6, pc}
 800bd0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd10:	4798      	blx	r3
 800bd12:	3601      	adds	r6, #1
 800bd14:	e7ee      	b.n	800bcf4 <__libc_init_array+0xc>
 800bd16:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd1a:	4798      	blx	r3
 800bd1c:	3601      	adds	r6, #1
 800bd1e:	e7f2      	b.n	800bd06 <__libc_init_array+0x1e>
 800bd20:	0800c1c4 	.word	0x0800c1c4
 800bd24:	0800c1c4 	.word	0x0800c1c4
 800bd28:	0800c1c4 	.word	0x0800c1c4
 800bd2c:	0800c1c8 	.word	0x0800c1c8

0800bd30 <memcpy>:
 800bd30:	440a      	add	r2, r1
 800bd32:	4291      	cmp	r1, r2
 800bd34:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd38:	d100      	bne.n	800bd3c <memcpy+0xc>
 800bd3a:	4770      	bx	lr
 800bd3c:	b510      	push	{r4, lr}
 800bd3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd46:	4291      	cmp	r1, r2
 800bd48:	d1f9      	bne.n	800bd3e <memcpy+0xe>
 800bd4a:	bd10      	pop	{r4, pc}

0800bd4c <memset>:
 800bd4c:	4402      	add	r2, r0
 800bd4e:	4603      	mov	r3, r0
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d100      	bne.n	800bd56 <memset+0xa>
 800bd54:	4770      	bx	lr
 800bd56:	f803 1b01 	strb.w	r1, [r3], #1
 800bd5a:	e7f9      	b.n	800bd50 <memset+0x4>

0800bd5c <sqrt>:
 800bd5c:	b538      	push	{r3, r4, r5, lr}
 800bd5e:	ed2d 8b02 	vpush	{d8}
 800bd62:	ec55 4b10 	vmov	r4, r5, d0
 800bd66:	f000 f851 	bl	800be0c <__ieee754_sqrt>
 800bd6a:	4622      	mov	r2, r4
 800bd6c:	462b      	mov	r3, r5
 800bd6e:	4620      	mov	r0, r4
 800bd70:	4629      	mov	r1, r5
 800bd72:	eeb0 8a40 	vmov.f32	s16, s0
 800bd76:	eef0 8a60 	vmov.f32	s17, s1
 800bd7a:	f7f4 fe83 	bl	8000a84 <__aeabi_dcmpun>
 800bd7e:	b990      	cbnz	r0, 800bda6 <sqrt+0x4a>
 800bd80:	2200      	movs	r2, #0
 800bd82:	2300      	movs	r3, #0
 800bd84:	4620      	mov	r0, r4
 800bd86:	4629      	mov	r1, r5
 800bd88:	f7f4 fe54 	bl	8000a34 <__aeabi_dcmplt>
 800bd8c:	b158      	cbz	r0, 800bda6 <sqrt+0x4a>
 800bd8e:	f7ff ffa5 	bl	800bcdc <__errno>
 800bd92:	2321      	movs	r3, #33	; 0x21
 800bd94:	6003      	str	r3, [r0, #0]
 800bd96:	2200      	movs	r2, #0
 800bd98:	2300      	movs	r3, #0
 800bd9a:	4610      	mov	r0, r2
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	f7f4 fd01 	bl	80007a4 <__aeabi_ddiv>
 800bda2:	ec41 0b18 	vmov	d8, r0, r1
 800bda6:	eeb0 0a48 	vmov.f32	s0, s16
 800bdaa:	eef0 0a68 	vmov.f32	s1, s17
 800bdae:	ecbd 8b02 	vpop	{d8}
 800bdb2:	bd38      	pop	{r3, r4, r5, pc}

0800bdb4 <acosf>:
 800bdb4:	b508      	push	{r3, lr}
 800bdb6:	ed2d 8b02 	vpush	{d8}
 800bdba:	eeb0 8a40 	vmov.f32	s16, s0
 800bdbe:	f000 f8d7 	bl	800bf70 <__ieee754_acosf>
 800bdc2:	eeb4 8a48 	vcmp.f32	s16, s16
 800bdc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdca:	eef0 8a40 	vmov.f32	s17, s0
 800bdce:	d615      	bvs.n	800bdfc <acosf+0x48>
 800bdd0:	eeb0 0a48 	vmov.f32	s0, s16
 800bdd4:	f000 f9c7 	bl	800c166 <fabsf>
 800bdd8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bddc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bde4:	dd0a      	ble.n	800bdfc <acosf+0x48>
 800bde6:	f7ff ff79 	bl	800bcdc <__errno>
 800bdea:	ecbd 8b02 	vpop	{d8}
 800bdee:	2321      	movs	r3, #33	; 0x21
 800bdf0:	6003      	str	r3, [r0, #0]
 800bdf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bdf6:	4804      	ldr	r0, [pc, #16]	; (800be08 <acosf+0x54>)
 800bdf8:	f000 b9bc 	b.w	800c174 <nanf>
 800bdfc:	eeb0 0a68 	vmov.f32	s0, s17
 800be00:	ecbd 8b02 	vpop	{d8}
 800be04:	bd08      	pop	{r3, pc}
 800be06:	bf00      	nop
 800be08:	0800c1b8 	.word	0x0800c1b8

0800be0c <__ieee754_sqrt>:
 800be0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be10:	ec55 4b10 	vmov	r4, r5, d0
 800be14:	4e55      	ldr	r6, [pc, #340]	; (800bf6c <__ieee754_sqrt+0x160>)
 800be16:	43ae      	bics	r6, r5
 800be18:	ee10 0a10 	vmov	r0, s0
 800be1c:	ee10 3a10 	vmov	r3, s0
 800be20:	462a      	mov	r2, r5
 800be22:	4629      	mov	r1, r5
 800be24:	d110      	bne.n	800be48 <__ieee754_sqrt+0x3c>
 800be26:	ee10 2a10 	vmov	r2, s0
 800be2a:	462b      	mov	r3, r5
 800be2c:	f7f4 fb90 	bl	8000550 <__aeabi_dmul>
 800be30:	4602      	mov	r2, r0
 800be32:	460b      	mov	r3, r1
 800be34:	4620      	mov	r0, r4
 800be36:	4629      	mov	r1, r5
 800be38:	f7f4 f9d4 	bl	80001e4 <__adddf3>
 800be3c:	4604      	mov	r4, r0
 800be3e:	460d      	mov	r5, r1
 800be40:	ec45 4b10 	vmov	d0, r4, r5
 800be44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be48:	2d00      	cmp	r5, #0
 800be4a:	dc10      	bgt.n	800be6e <__ieee754_sqrt+0x62>
 800be4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800be50:	4330      	orrs	r0, r6
 800be52:	d0f5      	beq.n	800be40 <__ieee754_sqrt+0x34>
 800be54:	b15d      	cbz	r5, 800be6e <__ieee754_sqrt+0x62>
 800be56:	ee10 2a10 	vmov	r2, s0
 800be5a:	462b      	mov	r3, r5
 800be5c:	ee10 0a10 	vmov	r0, s0
 800be60:	f7f4 f9be 	bl	80001e0 <__aeabi_dsub>
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	f7f4 fc9c 	bl	80007a4 <__aeabi_ddiv>
 800be6c:	e7e6      	b.n	800be3c <__ieee754_sqrt+0x30>
 800be6e:	1512      	asrs	r2, r2, #20
 800be70:	d074      	beq.n	800bf5c <__ieee754_sqrt+0x150>
 800be72:	07d4      	lsls	r4, r2, #31
 800be74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800be78:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800be7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800be80:	bf5e      	ittt	pl
 800be82:	0fda      	lsrpl	r2, r3, #31
 800be84:	005b      	lslpl	r3, r3, #1
 800be86:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800be8a:	2400      	movs	r4, #0
 800be8c:	0fda      	lsrs	r2, r3, #31
 800be8e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800be92:	107f      	asrs	r7, r7, #1
 800be94:	005b      	lsls	r3, r3, #1
 800be96:	2516      	movs	r5, #22
 800be98:	4620      	mov	r0, r4
 800be9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800be9e:	1886      	adds	r6, r0, r2
 800bea0:	428e      	cmp	r6, r1
 800bea2:	bfde      	ittt	le
 800bea4:	1b89      	suble	r1, r1, r6
 800bea6:	18b0      	addle	r0, r6, r2
 800bea8:	18a4      	addle	r4, r4, r2
 800beaa:	0049      	lsls	r1, r1, #1
 800beac:	3d01      	subs	r5, #1
 800beae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800beb2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800beb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800beba:	d1f0      	bne.n	800be9e <__ieee754_sqrt+0x92>
 800bebc:	462a      	mov	r2, r5
 800bebe:	f04f 0e20 	mov.w	lr, #32
 800bec2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bec6:	4281      	cmp	r1, r0
 800bec8:	eb06 0c05 	add.w	ip, r6, r5
 800becc:	dc02      	bgt.n	800bed4 <__ieee754_sqrt+0xc8>
 800bece:	d113      	bne.n	800bef8 <__ieee754_sqrt+0xec>
 800bed0:	459c      	cmp	ip, r3
 800bed2:	d811      	bhi.n	800bef8 <__ieee754_sqrt+0xec>
 800bed4:	f1bc 0f00 	cmp.w	ip, #0
 800bed8:	eb0c 0506 	add.w	r5, ip, r6
 800bedc:	da43      	bge.n	800bf66 <__ieee754_sqrt+0x15a>
 800bede:	2d00      	cmp	r5, #0
 800bee0:	db41      	blt.n	800bf66 <__ieee754_sqrt+0x15a>
 800bee2:	f100 0801 	add.w	r8, r0, #1
 800bee6:	1a09      	subs	r1, r1, r0
 800bee8:	459c      	cmp	ip, r3
 800beea:	bf88      	it	hi
 800beec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800bef0:	eba3 030c 	sub.w	r3, r3, ip
 800bef4:	4432      	add	r2, r6
 800bef6:	4640      	mov	r0, r8
 800bef8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800befc:	f1be 0e01 	subs.w	lr, lr, #1
 800bf00:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800bf04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bf08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bf0c:	d1db      	bne.n	800bec6 <__ieee754_sqrt+0xba>
 800bf0e:	430b      	orrs	r3, r1
 800bf10:	d006      	beq.n	800bf20 <__ieee754_sqrt+0x114>
 800bf12:	1c50      	adds	r0, r2, #1
 800bf14:	bf13      	iteet	ne
 800bf16:	3201      	addne	r2, #1
 800bf18:	3401      	addeq	r4, #1
 800bf1a:	4672      	moveq	r2, lr
 800bf1c:	f022 0201 	bicne.w	r2, r2, #1
 800bf20:	1063      	asrs	r3, r4, #1
 800bf22:	0852      	lsrs	r2, r2, #1
 800bf24:	07e1      	lsls	r1, r4, #31
 800bf26:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bf2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bf2e:	bf48      	it	mi
 800bf30:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bf34:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bf38:	4614      	mov	r4, r2
 800bf3a:	e781      	b.n	800be40 <__ieee754_sqrt+0x34>
 800bf3c:	0ad9      	lsrs	r1, r3, #11
 800bf3e:	3815      	subs	r0, #21
 800bf40:	055b      	lsls	r3, r3, #21
 800bf42:	2900      	cmp	r1, #0
 800bf44:	d0fa      	beq.n	800bf3c <__ieee754_sqrt+0x130>
 800bf46:	02cd      	lsls	r5, r1, #11
 800bf48:	d50a      	bpl.n	800bf60 <__ieee754_sqrt+0x154>
 800bf4a:	f1c2 0420 	rsb	r4, r2, #32
 800bf4e:	fa23 f404 	lsr.w	r4, r3, r4
 800bf52:	1e55      	subs	r5, r2, #1
 800bf54:	4093      	lsls	r3, r2
 800bf56:	4321      	orrs	r1, r4
 800bf58:	1b42      	subs	r2, r0, r5
 800bf5a:	e78a      	b.n	800be72 <__ieee754_sqrt+0x66>
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	e7f0      	b.n	800bf42 <__ieee754_sqrt+0x136>
 800bf60:	0049      	lsls	r1, r1, #1
 800bf62:	3201      	adds	r2, #1
 800bf64:	e7ef      	b.n	800bf46 <__ieee754_sqrt+0x13a>
 800bf66:	4680      	mov	r8, r0
 800bf68:	e7bd      	b.n	800bee6 <__ieee754_sqrt+0xda>
 800bf6a:	bf00      	nop
 800bf6c:	7ff00000 	.word	0x7ff00000

0800bf70 <__ieee754_acosf>:
 800bf70:	b508      	push	{r3, lr}
 800bf72:	ee10 3a10 	vmov	r3, s0
 800bf76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bf7a:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800bf7e:	ed2d 8b0c 	vpush	{d8-d13}
 800bf82:	d10a      	bne.n	800bf9a <__ieee754_acosf+0x2a>
 800bf84:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800c11c <__ieee754_acosf+0x1ac>
 800bf88:	ed9f 8a65 	vldr	s16, [pc, #404]	; 800c120 <__ieee754_acosf+0x1b0>
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	bfd8      	it	le
 800bf90:	eeb0 0a48 	vmovle.f32	s0, s16
 800bf94:	ecbd 8b0c 	vpop	{d8-d13}
 800bf98:	bd08      	pop	{r3, pc}
 800bf9a:	dd04      	ble.n	800bfa6 <__ieee754_acosf+0x36>
 800bf9c:	ee30 8a40 	vsub.f32	s16, s0, s0
 800bfa0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800bfa4:	e7f6      	b.n	800bf94 <__ieee754_acosf+0x24>
 800bfa6:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800bfaa:	da3c      	bge.n	800c026 <__ieee754_acosf+0xb6>
 800bfac:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800bfb0:	f340 80b1 	ble.w	800c116 <__ieee754_acosf+0x1a6>
 800bfb4:	ee60 7a00 	vmul.f32	s15, s0, s0
 800bfb8:	eddf 6a5a 	vldr	s13, [pc, #360]	; 800c124 <__ieee754_acosf+0x1b4>
 800bfbc:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800c128 <__ieee754_acosf+0x1b8>
 800bfc0:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 800c12c <__ieee754_acosf+0x1bc>
 800bfc4:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 800c130 <__ieee754_acosf+0x1c0>
 800bfc8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800bfcc:	eddf 6a59 	vldr	s13, [pc, #356]	; 800c134 <__ieee754_acosf+0x1c4>
 800bfd0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bfd4:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800c138 <__ieee754_acosf+0x1c8>
 800bfd8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bfdc:	eddf 6a57 	vldr	s13, [pc, #348]	; 800c13c <__ieee754_acosf+0x1cc>
 800bfe0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bfe4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800c140 <__ieee754_acosf+0x1d0>
 800bfe8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bfec:	eddf 6a55 	vldr	s13, [pc, #340]	; 800c144 <__ieee754_acosf+0x1d4>
 800bff0:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800bff4:	eddf 6a54 	vldr	s13, [pc, #336]	; 800c148 <__ieee754_acosf+0x1d8>
 800bff8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800bffc:	ed9f 6a53 	vldr	s12, [pc, #332]	; 800c14c <__ieee754_acosf+0x1dc>
 800c000:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800c004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c008:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c00c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c010:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c014:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c018:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800c150 <__ieee754_acosf+0x1e0>
 800c01c:	ee30 0a48 	vsub.f32	s0, s0, s16
 800c020:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c024:	e7b6      	b.n	800bf94 <__ieee754_acosf+0x24>
 800c026:	2b00      	cmp	r3, #0
 800c028:	eddf da3e 	vldr	s27, [pc, #248]	; 800c124 <__ieee754_acosf+0x1b4>
 800c02c:	eddf ca3e 	vldr	s25, [pc, #248]	; 800c128 <__ieee754_acosf+0x1b8>
 800c030:	ed9f ca40 	vldr	s24, [pc, #256]	; 800c134 <__ieee754_acosf+0x1c4>
 800c034:	eddf ba40 	vldr	s23, [pc, #256]	; 800c138 <__ieee754_acosf+0x1c8>
 800c038:	ed9f ba40 	vldr	s22, [pc, #256]	; 800c13c <__ieee754_acosf+0x1cc>
 800c03c:	eddf 8a40 	vldr	s17, [pc, #256]	; 800c140 <__ieee754_acosf+0x1d0>
 800c040:	ed9f da40 	vldr	s26, [pc, #256]	; 800c144 <__ieee754_acosf+0x1d4>
 800c044:	eddf aa39 	vldr	s21, [pc, #228]	; 800c12c <__ieee754_acosf+0x1bc>
 800c048:	ed9f aa3f 	vldr	s20, [pc, #252]	; 800c148 <__ieee754_acosf+0x1d8>
 800c04c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 800c14c <__ieee754_acosf+0x1dc>
 800c050:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800c054:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c058:	da28      	bge.n	800c0ac <__ieee754_acosf+0x13c>
 800c05a:	ee30 0a09 	vadd.f32	s0, s0, s18
 800c05e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c062:	eee0 ca2d 	vfma.f32	s25, s0, s27
 800c066:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800c06a:	eeac ca80 	vfma.f32	s24, s25, s0
 800c06e:	eeaa aa80 	vfma.f32	s20, s21, s0
 800c072:	eeec ba00 	vfma.f32	s23, s24, s0
 800c076:	eeea 9a00 	vfma.f32	s19, s20, s0
 800c07a:	eeab ba80 	vfma.f32	s22, s23, s0
 800c07e:	eea9 9a80 	vfma.f32	s18, s19, s0
 800c082:	eeeb 8a00 	vfma.f32	s17, s22, s0
 800c086:	ee68 8a80 	vmul.f32	s17, s17, s0
 800c08a:	f000 f869 	bl	800c160 <__ieee754_sqrtf>
 800c08e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800c092:	eddf 7a30 	vldr	s15, [pc, #192]	; 800c154 <__ieee754_acosf+0x1e4>
 800c096:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c09a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c09e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c0a2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800c158 <__ieee754_acosf+0x1e8>
 800c0a6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c0aa:	e773      	b.n	800bf94 <__ieee754_acosf+0x24>
 800c0ac:	ee39 8a40 	vsub.f32	s16, s18, s0
 800c0b0:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c0b4:	eeb0 0a48 	vmov.f32	s0, s16
 800c0b8:	f000 f852 	bl	800c160 <__ieee754_sqrtf>
 800c0bc:	eee8 ca2d 	vfma.f32	s25, s16, s27
 800c0c0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 800c0c4:	eeac ca88 	vfma.f32	s24, s25, s16
 800c0c8:	eeaa aa88 	vfma.f32	s20, s21, s16
 800c0cc:	eeec ba08 	vfma.f32	s23, s24, s16
 800c0d0:	ee10 3a10 	vmov	r3, s0
 800c0d4:	eeab ba88 	vfma.f32	s22, s23, s16
 800c0d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c0dc:	f023 030f 	bic.w	r3, r3, #15
 800c0e0:	eeea 9a08 	vfma.f32	s19, s20, s16
 800c0e4:	ee07 3a90 	vmov	s15, r3
 800c0e8:	eeeb 8a08 	vfma.f32	s17, s22, s16
 800c0ec:	eeb0 6a48 	vmov.f32	s12, s16
 800c0f0:	eea7 6ae7 	vfms.f32	s12, s15, s15
 800c0f4:	eea9 9a88 	vfma.f32	s18, s19, s16
 800c0f8:	ee70 6a27 	vadd.f32	s13, s0, s15
 800c0fc:	ee68 8a88 	vmul.f32	s17, s17, s16
 800c100:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c104:	eec8 6a89 	vdiv.f32	s13, s17, s18
 800c108:	eea0 7a26 	vfma.f32	s14, s0, s13
 800c10c:	ee37 0a87 	vadd.f32	s0, s15, s14
 800c110:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c114:	e73e      	b.n	800bf94 <__ieee754_acosf+0x24>
 800c116:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800c15c <__ieee754_acosf+0x1ec>
 800c11a:	e73b      	b.n	800bf94 <__ieee754_acosf+0x24>
 800c11c:	00000000 	.word	0x00000000
 800c120:	40490fdb 	.word	0x40490fdb
 800c124:	3811ef08 	.word	0x3811ef08
 800c128:	3a4f7f04 	.word	0x3a4f7f04
 800c12c:	bf303361 	.word	0xbf303361
 800c130:	33a22168 	.word	0x33a22168
 800c134:	bd241146 	.word	0xbd241146
 800c138:	3e4e0aa8 	.word	0x3e4e0aa8
 800c13c:	bea6b090 	.word	0xbea6b090
 800c140:	3e2aaaab 	.word	0x3e2aaaab
 800c144:	3d9dc62e 	.word	0x3d9dc62e
 800c148:	4001572d 	.word	0x4001572d
 800c14c:	c019d139 	.word	0xc019d139
 800c150:	3fc90fda 	.word	0x3fc90fda
 800c154:	b3a22168 	.word	0xb3a22168
 800c158:	40490fda 	.word	0x40490fda
 800c15c:	3fc90fdb 	.word	0x3fc90fdb

0800c160 <__ieee754_sqrtf>:
 800c160:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c164:	4770      	bx	lr

0800c166 <fabsf>:
 800c166:	ee10 3a10 	vmov	r3, s0
 800c16a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c16e:	ee00 3a10 	vmov	s0, r3
 800c172:	4770      	bx	lr

0800c174 <nanf>:
 800c174:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c17c <nanf+0x8>
 800c178:	4770      	bx	lr
 800c17a:	bf00      	nop
 800c17c:	7fc00000 	.word	0x7fc00000

0800c180 <_init>:
 800c180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c182:	bf00      	nop
 800c184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c186:	bc08      	pop	{r3}
 800c188:	469e      	mov	lr, r3
 800c18a:	4770      	bx	lr

0800c18c <_fini>:
 800c18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c18e:	bf00      	nop
 800c190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c192:	bc08      	pop	{r3}
 800c194:	469e      	mov	lr, r3
 800c196:	4770      	bx	lr
