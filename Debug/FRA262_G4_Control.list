
FRA262_G4_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011048  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  080111e8  080111e8  000211e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080116c4  080116c4  00030430  2**0
                  CONTENTS
  4 .ARM          00000008  080116c4  080116c4  000216c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080116cc  080116cc  00030430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080116cc  080116cc  000216cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080116d0  080116d0  000216d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000430  20000000  080116d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cc4  20000430  08011b04  00030430  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010f4  08011b04  000310f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030430  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015663  00000000  00000000  00030460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273b  00000000  00000000  00045ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00048200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  00049420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192eb  00000000  00000000  0004a570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c09  00000000  00000000  0006385b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0291  00000000  00000000  00079464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001196f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006478  00000000  00000000  00119748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000430 	.word	0x20000430
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080111d0 	.word	0x080111d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000434 	.word	0x20000434
 80001dc:	080111d0 	.word	0x080111d0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <modbus_1t5_Timeout+0x1c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	751a      	strb	r2, [r3, #20]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	2000044c 	.word	0x2000044c

08001028 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <modbus_3t5_Timeout+0x1c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	755a      	strb	r2, [r3, #21]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	2000044c 	.word	0x2000044c

08001048 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <modbus_UART_Recived+0x60>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001062:	1c59      	adds	r1, r3, #1
 8001064:	b289      	uxth	r1, r1
 8001066:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 800106a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800106e:	d210      	bcs.n	8001092 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68d8      	ldr	r0, [r3, #12]
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <modbus_UART_Recived+0x60>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001082:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001086:	4413      	add	r3, r2
 8001088:	3302      	adds	r3, #2
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	f00a f918 	bl	800b2c2 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000044c 	.word	0x2000044c

080010ac <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80010b6:	4a24      	ldr	r2, [pc, #144]	; (8001148 <Modbus_init+0x9c>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <Modbus_init+0x9c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <Modbus_init+0x9c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	4a20      	ldr	r2, [pc, #128]	; (800114c <Modbus_init+0xa0>)
 80010cc:	2114      	movs	r1, #20
 80010ce:	4618      	mov	r0, r3
 80010d0:	f009 fa64 	bl	800a59c <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <Modbus_init+0x9c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <Modbus_init+0xa4>)
 80010dc:	210e      	movs	r1, #14
 80010de:	4618      	mov	r0, r3
 80010e0:	f009 fa5c 	bl	800a59c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <Modbus_init+0x9c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <Modbus_init+0xa8>)
 80010ec:	2103      	movs	r1, #3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f009 fffa 	bl	800b0e8 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <Modbus_init+0x9c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d8      	ldr	r0, [r3, #12]
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <Modbus_init+0x9c>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <Modbus_init+0x9c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001106:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800110a:	4413      	add	r3, r2
 800110c:	3302      	adds	r3, #2
 800110e:	2201      	movs	r2, #1
 8001110:	4619      	mov	r1, r3
 8001112:	f00a f8d6 	bl	800b2c2 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <Modbus_init+0x9c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10c      	bne.n	8001140 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <Modbus_init+0x9c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	4618      	mov	r0, r3
 800112e:	f008 fab9 	bl	80096a4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <Modbus_init+0x9c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f008 fd1e 	bl	8009b7c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000044c 	.word	0x2000044c
 800114c:	08001009 	.word	0x08001009
 8001150:	08001029 	.word	0x08001029
 8001154:	08001049 	.word	0x08001049

08001158 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001164:	23ff      	movs	r3, #255	; 0xff
 8001166:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800116c:	e013      	b.n	8001196 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	4053      	eors	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <CRC16+0x64>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4413      	add	r3, r2
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	4053      	eors	r3, r2
 800118a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <CRC16+0x68>)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001196:	883b      	ldrh	r3, [r7, #0]
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	803a      	strh	r2, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e6      	bne.n	800116e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000100 	.word	0x20000100
 80011c0:	20000000 	.word	0x20000000

080011c4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80011ca:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	7e1b      	ldrb	r3, [r3, #24]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d80a      	bhi.n	80011ec <Modbus_Protocal_Worker+0x28>
 80011d6:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <Modbus_Protocal_Worker+0x18>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	080011f7 	.word	0x080011f7
 80011e0:	08001397 	.word	0x08001397
 80011e4:	08001283 	.word	0x08001283
 80011e8:	080012a9 	.word	0x080012a9
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80011ec:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	761a      	strb	r2, [r3, #24]
		break;
 80011f4:	e0e8      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001202:	f000 f9d7 	bl	80015b4 <Modbus_Emission>
 8001206:	e01c      	b.n	8001242 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001208:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	7d9b      	ldrb	r3, [r3, #22]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d017      	beq.n	8001242 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800121a:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001222:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2203      	movs	r2, #3
 8001240:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b20      	cmp	r3, #32
 8001250:	f040 80b3 	bne.w	80013ba <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800125e:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001270:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001274:	4413      	add	r3, r2
 8001276:	3302      	adds	r3, #2
 8001278:	2201      	movs	r2, #1
 800127a:	4619      	mov	r1, r3
 800127c:	f00a f821 	bl	800b2c2 <HAL_UART_Receive_IT>
		}
		break;
 8001280:	e09b      	b.n	80013ba <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001282:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7d1b      	ldrb	r3, [r3, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8098 	beq.w	80013be <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001296:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	22fe      	movs	r2, #254	; 0xfe
 800129c:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2204      	movs	r2, #4
 80012a4:	761a      	strb	r2, [r3, #24]
		}
		break;
 80012a6:	e08a      	b.n	80013be <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	7d9b      	ldrb	r3, [r3, #22]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80012c6:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ce:	f113 0f02 	cmn.w	r3, #2
 80012d2:	d150      	bne.n	8001376 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80012d4:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f203 2272 	addw	r2, r3, #626	; 0x272
 80012e4:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80012ec:	3b02      	subs	r3, #2
 80012ee:	4619      	mov	r1, r3
 80012f0:	4610      	mov	r0, r2
 80012f2:	f7ff ff31 	bl	8001158 <CRC16>
 80012f6:	4603      	mov	r3, r0
 80012f8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012fa:	793a      	ldrb	r2, [r7, #4]
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001308:	3b02      	subs	r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001310:	429a      	cmp	r2, r3
 8001312:	d10c      	bne.n	800132e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001314:	797a      	ldrb	r2, [r7, #5]
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001322:	3b01      	subs	r3, #1
 8001324:	440b      	add	r3, r1
 8001326:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800132a:	429a      	cmp	r2, r3
 800132c:	d004      	beq.n	8001338 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	22ff      	movs	r2, #255	; 0xff
 8001334:	75da      	strb	r2, [r3, #23]
				break;
 8001336:	e047      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d113      	bne.n	8001372 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800135a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001364:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001366:	461a      	mov	r2, r3
 8001368:	f00b f96e 	bl	800c648 <memcpy>

			//execute command
			Modbus_frame_response();
 800136c:	f000 f90a 	bl	8001584 <Modbus_frame_response>
 8001370:	e001      	b.n	8001376 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001372:	bf00      	nop
					}
		break;


	}
}
 8001374:	e028      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7d5b      	ldrb	r3, [r3, #21]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	4618      	mov	r0, r3
 8001390:	f00a f846 	bl	800b420 <HAL_UART_AbortReceive>
		break;
 8001394:	e015      	b.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d10f      	bne.n	80013c6 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	761a      	strb	r2, [r3, #24]
		break;
 80013b8:	e005      	b.n	80013c6 <Modbus_Protocal_Worker+0x202>
		break;
 80013ba:	bf00      	nop
 80013bc:	e004      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013be:	bf00      	nop
 80013c0:	e002      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c6:	bf00      	nop
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000044c 	.word	0x2000044c

080013d4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <modbusWrite1Register+0x80>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	7e9b      	ldrb	r3, [r3, #26]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <modbusWrite1Register+0x80>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	7edb      	ldrb	r3, [r3, #27]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <modbusWrite1Register+0x80>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d903      	bls.n	8001406 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013fe:	2002      	movs	r0, #2
 8001400:	f000 f8a4 	bl	800154c <ModbusErrorReply>
			 return;
 8001404:	e023      	b.n	800144e <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <modbusWrite1Register+0x80>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <modbusWrite1Register+0x80>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	7f12      	ldrb	r2, [r2, #28]
 8001418:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <modbusWrite1Register+0x80>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <modbusWrite1Register+0x80>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6859      	ldr	r1, [r3, #4]
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	440b      	add	r3, r1
 800142a:	7f52      	ldrb	r2, [r2, #29]
 800142c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <modbusWrite1Register+0x80>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <modbusWrite1Register+0x80>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 800143c:	2208      	movs	r2, #8
 800143e:	4619      	mov	r1, r3
 8001440:	f00b f902 	bl	800c648 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <modbusWrite1Register+0x80>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2205      	movs	r2, #5
 800144a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000044c 	.word	0x2000044c

08001458 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <modbusRead1Register+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	7f1b      	ldrb	r3, [r3, #28]
 8001464:	b29b      	uxth	r3, r3
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <modbusRead1Register+0xf0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	7f5b      	ldrb	r3, [r3, #29]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4413      	add	r3, r2
 8001474:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <modbusRead1Register+0xf0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7e9b      	ldrb	r3, [r3, #26]
 800147c:	b29b      	uxth	r3, r3
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <modbusRead1Register+0xf0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	7edb      	ldrb	r3, [r3, #27]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <modbusRead1Register+0x42>
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	2b7d      	cmp	r3, #125	; 0x7d
 8001498:	d903      	bls.n	80014a2 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f856 	bl	800154c <ModbusErrorReply>
		 return;
 80014a0:	e04e      	b.n	8001540 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80014a2:	88ba      	ldrh	r2, [r7, #4]
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <modbusRead1Register+0xf0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d808      	bhi.n	80014c0 <modbusRead1Register+0x68>
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4413      	add	r3, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <modbusRead1Register+0xf0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d903      	bls.n	80014c8 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f000 f843 	bl	800154c <ModbusErrorReply>
		 return;
 80014c6:	e03b      	b.n	8001540 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <modbusRead1Register+0xf0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <modbusRead1Register+0xf0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	0052      	lsls	r2, r2, #1
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80014e2:	2400      	movs	r4, #0
 80014e4:	e020      	b.n	8001528 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <modbusRead1Register+0xf0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	88bb      	ldrh	r3, [r7, #4]
 80014ee:	4423      	add	r3, r4
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	18d1      	adds	r1, r2, r3
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <modbusRead1Register+0xf0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	1c63      	adds	r3, r4, #1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	7849      	ldrb	r1, [r1, #1]
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <modbusRead1Register+0xf0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	4423      	add	r3, r4
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <modbusRead1Register+0xf0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	0063      	lsls	r3, r4, #1
 800151a:	3303      	adds	r3, #3
 800151c:	7809      	ldrb	r1, [r1, #0]
 800151e:	4413      	add	r3, r2
 8001520:	460a      	mov	r2, r1
 8001522:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001526:	3401      	adds	r4, #1
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	429c      	cmp	r4, r3
 800152c:	dbdb      	blt.n	80014e6 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <modbusRead1Register+0xf0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	2000044c 	.word	0x2000044c

0800154c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register | 0x80;
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <ModbusErrorReply+0x34>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2283      	movs	r2, #131	; 0x83
 800155c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <ModbusErrorReply+0x34>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	79fa      	ldrb	r2, [r7, #7]
 8001566:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <ModbusErrorReply+0x34>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	2000044c 	.word	0x2000044c

08001584 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <Modbus_frame_response+0x2c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	7e5b      	ldrb	r3, [r3, #25]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d004      	beq.n	800159c <Modbus_frame_response+0x18>
 8001592:	2b06      	cmp	r3, #6
 8001594:	d105      	bne.n	80015a2 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001596:	f7ff ff1d 	bl	80013d4 <modbusWrite1Register>
		break;
 800159a:	e006      	b.n	80015aa <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800159c:	f7ff ff5c 	bl	8001458 <modbusRead1Register>
		break;
 80015a0:	e003      	b.n	80015aa <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff ffd2 	bl	800154c <ModbusErrorReply>
		break;
 80015a8:	bf00      	nop

	}
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000044c 	.word	0x2000044c

080015b4 <Modbus_Emission>:

void Modbus_Emission()
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <Modbus_Emission+0xfc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b20      	cmp	r3, #32
 80015c8:	d15e      	bne.n	8001688 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80015ca:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <Modbus_Emission+0xfc>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <Modbus_Emission+0xfc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <Modbus_Emission+0xfc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80015e0:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80015e2:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <Modbus_Emission+0xfc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <Modbus_Emission+0xfc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 80015f2:	461a      	mov	r2, r3
 80015f4:	f00b f828 	bl	800c648 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80015f8:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <Modbus_Emission+0xfc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <Modbus_Emission+0xfc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3203      	adds	r2, #3
 8001608:	b292      	uxth	r2, r2
 800160a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <Modbus_Emission+0xfc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <Modbus_Emission+0xfc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800161e:	3b02      	subs	r3, #2
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f7ff fd98 	bl	8001158 <CRC16>
 8001628:	4603      	mov	r3, r0
 800162a:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <Modbus_Emission+0xfc>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <Modbus_Emission+0xfc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001638:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800163a:	7939      	ldrb	r1, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	460a      	mov	r2, r1
 8001640:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <Modbus_Emission+0xfc>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <Modbus_Emission+0xfc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001650:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001652:	7979      	ldrb	r1, [r7, #5]
 8001654:	4413      	add	r3, r2
 8001656:	460a      	mov	r2, r1
 8001658:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <Modbus_Emission+0xfc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b20      	cmp	r3, #32
 800166a:	d10d      	bne.n	8001688 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <Modbus_Emission+0xfc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <Modbus_Emission+0xfc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <Modbus_Emission+0xfc>)
 800167c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800167e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001682:	461a      	mov	r2, r3
 8001684:	f009 fe4e 	bl	800b324 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <Modbus_Emission+0xfc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <Modbus_Emission+0xfc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <Modbus_Emission+0xfc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <Modbus_Emission+0xfc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2202      	movs	r2, #2
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000044c 	.word	0x2000044c
 80016b4:	00000000 	.word	0x00000000

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016bc:	b087      	sub	sp, #28
 80016be:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c0:	f003 fd3a 	bl	8005138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c4:	f000 fb6c 	bl	8001da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c8:	f000 fe5e 	bl	8002388 <MX_GPIO_Init>
  MX_DMA_Init();
 80016cc:	f000 fe26 	bl	800231c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016d0:	f000 fdf8 	bl	80022c4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80016d4:	f000 fcea 	bl	80020ac <MX_TIM3_Init>
  MX_TIM1_Init();
 80016d8:	f000 fc58 	bl	8001f8c <MX_TIM1_Init>
  MX_ADC1_Init();
 80016dc:	f000 fbc8 	bl	8001e70 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80016e0:	f000 fdc6 	bl	8002270 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 80016e4:	f000 fd70 	bl	80021c8 <MX_TIM11_Init>
  MX_TIM9_Init();
 80016e8:	f000 fd34 	bl	8002154 <MX_TIM9_Init>
  MX_I2C1_Init();
 80016ec:	f000 fc20 	bl	8001f30 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  hmodbus.huart = &huart2;
 80016f0:	4b8f      	ldr	r3, [pc, #572]	; (8001930 <main+0x278>)
 80016f2:	4a90      	ldr	r2, [pc, #576]	; (8001934 <main+0x27c>)
 80016f4:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 80016f6:	4b8e      	ldr	r3, [pc, #568]	; (8001930 <main+0x278>)
 80016f8:	4a8f      	ldr	r2, [pc, #572]	; (8001938 <main+0x280>)
 80016fa:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80016fc:	4b8c      	ldr	r3, [pc, #560]	; (8001930 <main+0x278>)
 80016fe:	2215      	movs	r2, #21
 8001700:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 70;
 8001702:	4b8b      	ldr	r3, [pc, #556]	; (8001930 <main+0x278>)
 8001704:	2246      	movs	r2, #70	; 0x46
 8001706:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001708:	498c      	ldr	r1, [pc, #560]	; (800193c <main+0x284>)
 800170a:	4889      	ldr	r0, [pc, #548]	; (8001930 <main+0x278>)
 800170c:	f7ff fcce 	bl	80010ac <Modbus_init>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8001710:	2104      	movs	r1, #4
 8001712:	488b      	ldr	r0, [pc, #556]	; (8001940 <main+0x288>)
 8001714:	f008 fb4c 	bl	8009db0 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Start Timer1
 8001718:	488a      	ldr	r0, [pc, #552]	; (8001944 <main+0x28c>)
 800171a:	f007 ff69 	bl	80095f0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800171e:	2100      	movs	r1, #0
 8001720:	4888      	ldr	r0, [pc, #544]	; (8001944 <main+0x28c>)
 8001722:	f008 f913 	bl	800994c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001726:	2104      	movs	r1, #4
 8001728:	4886      	ldr	r0, [pc, #536]	; (8001944 <main+0x28c>)
 800172a:	f008 f90f 	bl	800994c <HAL_TIM_PWM_Start>

//  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
//  HAL_TIM_Base_Start_IT(&htim4); //Start IT Timer4

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, L_EN);
 800172e:	4b86      	ldr	r3, [pc, #536]	; (8001948 <main+0x290>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800173a:	4884      	ldr	r0, [pc, #528]	; (800194c <main+0x294>)
 800173c:	f005 f85e 	bl	80067fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, R_EN);
 8001740:	4b83      	ldr	r3, [pc, #524]	; (8001950 <main+0x298>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	2110      	movs	r1, #16
 800174a:	4880      	ldr	r0, [pc, #512]	; (800194c <main+0x294>)
 800174c:	f005 f856 	bl	80067fc <HAL_GPIO_WritePin>

  HAL_ADC_Start_DMA(&hadc1, XYSwitch, 2);
 8001750:	2202      	movs	r2, #2
 8001752:	4980      	ldr	r1, [pc, #512]	; (8001954 <main+0x29c>)
 8001754:	4880      	ldr	r0, [pc, #512]	; (8001958 <main+0x2a0>)
 8001756:	f003 fdc9 	bl	80052ec <HAL_ADC_Start_DMA>

  registerFrame[1].U16 = 0;
 800175a:	4b78      	ldr	r3, [pc, #480]	; (800193c <main+0x284>)
 800175c:	2200      	movs	r2, #0
 800175e:	805a      	strh	r2, [r3, #2]
  EndEffectorState = 0;	//SoftReset
 8001760:	4b7e      	ldr	r3, [pc, #504]	; (800195c <main+0x2a4>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
  EndEffectorWriteFlag = 1;
 8001766:	4b7e      	ldr	r3, [pc, #504]	; (8001960 <main+0x2a8>)
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
  EndEffectorWrite();
 800176c:	f000 ff64 	bl	8002638 <EndEffectorWrite>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Protocal_Worker();
 8001770:	f7ff fd28 	bl	80011c4 <Modbus_Protocal_Worker>
	  static uint32_t heartbeat = 0;
	  static uint32_t uart_time = 0;
	  if(heartbeat < HAL_GetTick())
 8001774:	f003 fd46 	bl	8005204 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	4b7a      	ldr	r3, [pc, #488]	; (8001964 <main+0x2ac>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d909      	bls.n	8001796 <main+0xde>
	  {
		  heartbeat = HAL_GetTick()+200;
 8001782:	f003 fd3f 	bl	8005204 <HAL_GetTick>
 8001786:	4603      	mov	r3, r0
 8001788:	33c8      	adds	r3, #200	; 0xc8
 800178a:	4a76      	ldr	r2, [pc, #472]	; (8001964 <main+0x2ac>)
 800178c:	6013      	str	r3, [r2, #0]
		  registerFrame[0].U16 = 22881;
 800178e:	4b6b      	ldr	r3, [pc, #428]	; (800193c <main+0x284>)
 8001790:	f645 1261 	movw	r2, #22881	; 0x5961
 8001794:	801a      	strh	r2, [r3, #0]
	  }

	  if (huart1.gState == HAL_UART_STATE_READY && (HAL_GetTick() >= uart_time))
 8001796:	4b74      	ldr	r3, [pc, #464]	; (8001968 <main+0x2b0>)
 8001798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b20      	cmp	r3, #32
 80017a0:	d139      	bne.n	8001816 <main+0x15e>
 80017a2:	f003 fd2f 	bl	8005204 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	4b70      	ldr	r3, [pc, #448]	; (800196c <main+0x2b4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d332      	bcc.n	8001816 <main+0x15e>
	  {
		  sprintf(TxBuffer,"%d %.2f %.2f %.2f\r\n",position, setposition, setvelocity, Accel);
 80017b0:	4b6f      	ldr	r3, [pc, #444]	; (8001970 <main+0x2b8>)
 80017b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b6:	461e      	mov	r6, r3
 80017b8:	4b6e      	ldr	r3, [pc, #440]	; (8001974 <main+0x2bc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fecb 	bl	8000558 <__aeabi_f2d>
 80017c2:	4604      	mov	r4, r0
 80017c4:	460d      	mov	r5, r1
 80017c6:	4b6c      	ldr	r3, [pc, #432]	; (8001978 <main+0x2c0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fec4 	bl	8000558 <__aeabi_f2d>
 80017d0:	4680      	mov	r8, r0
 80017d2:	4689      	mov	r9, r1
 80017d4:	4b69      	ldr	r3, [pc, #420]	; (800197c <main+0x2c4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe febd 	bl	8000558 <__aeabi_f2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80017e6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017ea:	e9cd 4500 	strd	r4, r5, [sp]
 80017ee:	4632      	mov	r2, r6
 80017f0:	4963      	ldr	r1, [pc, #396]	; (8001980 <main+0x2c8>)
 80017f2:	4864      	ldr	r0, [pc, #400]	; (8001984 <main+0x2cc>)
 80017f4:	f00b fdbe 	bl	800d374 <siprintf>
		  HAL_UART_Transmit_IT(&huart1, (uint8_t *)TxBuffer, strlen(TxBuffer));
 80017f8:	4862      	ldr	r0, [pc, #392]	; (8001984 <main+0x2cc>)
 80017fa:	f7fe fcf1 	bl	80001e0 <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29b      	uxth	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	495f      	ldr	r1, [pc, #380]	; (8001984 <main+0x2cc>)
 8001806:	4858      	ldr	r0, [pc, #352]	; (8001968 <main+0x2b0>)
 8001808:	f009 fd16 	bl	800b238 <HAL_UART_Transmit_IT>
		  uart_time += 20;
 800180c:	4b57      	ldr	r3, [pc, #348]	; (800196c <main+0x2b4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	3314      	adds	r3, #20
 8001812:	4a56      	ldr	r2, [pc, #344]	; (800196c <main+0x2b4>)
 8001814:	6013      	str	r3, [r2, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  VelocityApprox();
 8001816:	f001 f87f 	bl	8002918 <VelocityApprox>
	  AccelerationApprox();
 800181a:	f001 f8ad 	bl	8002978 <AccelerationApprox>
	  Routine(); //Sent Y Actual Position Velocity Acceleration to Base System
 800181e:	f001 f8db 	bl	80029d8 <Routine>

	  JoystickPinUpdate(); //Check Pin Flag
 8001822:	f001 f9cb 	bl	8002bbc <JoystickPinUpdate>

	  switch(scheduler)
 8001826:	4b58      	ldr	r3, [pc, #352]	; (8001988 <main+0x2d0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b07      	cmp	r3, #7
 800182c:	d8a0      	bhi.n	8001770 <main+0xb8>
 800182e:	a201      	add	r2, pc, #4	; (adr r2, 8001834 <main+0x17c>)
 8001830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001834:	08001855 	.word	0x08001855
 8001838:	08001899 	.word	0x08001899
 800183c:	080019a5 	.word	0x080019a5
 8001840:	08001a33 	.word	0x08001a33
 8001844:	08001b93 	.word	0x08001b93
 8001848:	08001bdb 	.word	0x08001bdb
 800184c:	08001c35 	.word	0x08001c35
 8001850:	08001c77 	.word	0x08001c77
	  {
	  //JoyStick
	  case 0:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001854:	4b3a      	ldr	r3, [pc, #232]	; (8001940 <main+0x288>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	b21a      	sxth	r2, r3
 800185c:	4b44      	ldr	r3, [pc, #272]	; (8001970 <main+0x2b8>)
 800185e:	801a      	strh	r2, [r3, #0]
		  JoystickControl(); //Read Pin form JoyStick
 8001860:	f001 fa48 	bl	8002cf4 <JoystickControl>
		  JoystickLocationState();
 8001864:	f001 fb14 	bl	8002e90 <JoystickLocationState>

		  if(registerFrame[1].U16 == 16) //Run Point Mode
 8001868:	4b34      	ldr	r3, [pc, #208]	; (800193c <main+0x284>)
 800186a:	885b      	ldrh	r3, [r3, #2]
 800186c:	2b10      	cmp	r3, #16
 800186e:	d103      	bne.n	8001878 <main+0x1c0>
		  {
			  scheduler = 7;
 8001870:	4b45      	ldr	r3, [pc, #276]	; (8001988 <main+0x2d0>)
 8001872:	2207      	movs	r2, #7
 8001874:	601a      	str	r2, [r3, #0]
		  {
			  registerFrame[64].U16 = 1;
			  Proximity = 3;
			  scheduler = 5;
		  }
		  break;
 8001876:	e26c      	b.n	8001d52 <main+0x69a>
		  else if(registerFrame[1].U16 == 4) //Home
 8001878:	4b30      	ldr	r3, [pc, #192]	; (800193c <main+0x284>)
 800187a:	885b      	ldrh	r3, [r3, #2]
 800187c:	2b04      	cmp	r3, #4
 800187e:	f040 8268 	bne.w	8001d52 <main+0x69a>
			  registerFrame[64].U16 = 1;
 8001882:	4b2e      	ldr	r3, [pc, #184]	; (800193c <main+0x284>)
 8001884:	2201      	movs	r2, #1
 8001886:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			  Proximity = 3;
 800188a:	4b40      	ldr	r3, [pc, #256]	; (800198c <main+0x2d4>)
 800188c:	2203      	movs	r2, #3
 800188e:	601a      	str	r2, [r3, #0]
			  scheduler = 5;
 8001890:	4b3d      	ldr	r3, [pc, #244]	; (8001988 <main+0x2d0>)
 8001892:	2205      	movs	r2, #5
 8001894:	601a      	str	r2, [r3, #0]
		  break;
 8001896:	e25c      	b.n	8001d52 <main+0x69a>

	  //Go Pick
	  case 1 :
		  registerFrame[16].U16 = 8; //Y Moving Status: Go Pick
 8001898:	4b28      	ldr	r3, [pc, #160]	; (800193c <main+0x284>)
 800189a:	2208      	movs	r2, #8
 800189c:	841a      	strh	r2, [r3, #32]
		  qf = (PickTray.hole_y[HoleSequence])/0.045;
 800189e:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <main+0x2d8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a3c      	ldr	r2, [pc, #240]	; (8001994 <main+0x2dc>)
 80018a4:	330c      	adds	r3, #12
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	3304      	adds	r3, #4
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe52 	bl	8000558 <__aeabi_f2d>
 80018b4:	a31c      	add	r3, pc, #112	; (adr r3, 8001928 <main+0x270>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7fe ffcf 	bl	800085c <__aeabi_ddiv>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7ff f997 	bl	8000bf8 <__aeabi_d2f>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a32      	ldr	r2, [pc, #200]	; (8001998 <main+0x2e0>)
 80018ce:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PickTray.hole_x[HoleSequence]*10; //X-Axis Target Position Pick Tray
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <main+0x2d8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a2f      	ldr	r2, [pc, #188]	; (8001994 <main+0x2dc>)
 80018d6:	3304      	adds	r3, #4
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ec:	ee17 3a90 	vmov	r3, s15
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <main+0x284>)
 80018f4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 80018f8:	4b10      	ldr	r3, [pc, #64]	; (800193c <main+0x284>)
 80018fa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80018fe:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 1;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <main+0x284>)
 8001904:	2201      	movs	r2, #1
 8001906:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  registerFrame[64].U16 = 2; //X Moving Status: Run
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <main+0x284>)
 800190c:	2202      	movs	r2, #2
 800190e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  Trajectstate = 0;
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <main+0x2e4>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001918:	4821      	ldr	r0, [pc, #132]	; (80019a0 <main+0x2e8>)
 800191a:	f007 fec3 	bl	80096a4 <HAL_TIM_Base_Start_IT>
		  scheduler = 3;
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <main+0x2d0>)
 8001920:	2203      	movs	r2, #3
 8001922:	601a      	str	r2, [r3, #0]
		  break;
 8001924:	e21a      	b.n	8001d5c <main+0x6a4>
 8001926:	bf00      	nop
 8001928:	70a3d70a 	.word	0x70a3d70a
 800192c:	3fa70a3d 	.word	0x3fa70a3d
 8001930:	20000b08 	.word	0x20000b08
 8001934:	20000890 	.word	0x20000890
 8001938:	20000768 	.word	0x20000768
 800193c:	20000fe0 	.word	0x20000fe0
 8001940:	20000600 	.word	0x20000600
 8001944:	2000054c 	.word	0x2000054c
 8001948:	2000020c 	.word	0x2000020c
 800194c:	40020400 	.word	0x40020400
 8001950:	20000208 	.word	0x20000208
 8001954:	20000aec 	.word	0x20000aec
 8001958:	20000450 	.word	0x20000450
 800195c:	20000b00 	.word	0x20000b00
 8001960:	20000af8 	.word	0x20000af8
 8001964:	200010c4 	.word	0x200010c4
 8001968:	2000081c 	.word	0x2000081c
 800196c:	200010c8 	.word	0x200010c8
 8001970:	200009ac 	.word	0x200009ac
 8001974:	200009b8 	.word	0x200009b8
 8001978:	200009d8 	.word	0x200009d8
 800197c:	200009d4 	.word	0x200009d4
 8001980:	080111e8 	.word	0x080111e8
 8001984:	2000106c 	.word	0x2000106c
 8001988:	20000200 	.word	0x20000200
 800198c:	2000024c 	.word	0x2000024c
 8001990:	20000964 	.word	0x20000964
 8001994:	200009e0 	.word	0x200009e0
 8001998:	20000974 	.word	0x20000974
 800199c:	2000096c 	.word	0x2000096c
 80019a0:	200006b4 	.word	0x200006b4

	  //Go Place
	  case 2 :
		  registerFrame[16].U16 = 16; //Y Moving Status: Go Place
 80019a4:	4b90      	ldr	r3, [pc, #576]	; (8001be8 <main+0x530>)
 80019a6:	2210      	movs	r2, #16
 80019a8:	841a      	strh	r2, [r3, #32]
		  qf = (PlaceTray.hole_y[HoleSequence])/0.045;
 80019aa:	4b90      	ldr	r3, [pc, #576]	; (8001bec <main+0x534>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a90      	ldr	r2, [pc, #576]	; (8001bf0 <main+0x538>)
 80019b0:	330c      	adds	r3, #12
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	3304      	adds	r3, #4
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fdcc 	bl	8000558 <__aeabi_f2d>
 80019c0:	a387      	add	r3, pc, #540	; (adr r3, 8001be0 <main+0x528>)
 80019c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c6:	f7fe ff49 	bl	800085c <__aeabi_ddiv>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	f7ff f911 	bl	8000bf8 <__aeabi_d2f>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4a86      	ldr	r2, [pc, #536]	; (8001bf4 <main+0x53c>)
 80019da:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PlaceTray.hole_x[HoleSequence]*10; //X-Axis Target Position Place Tray
 80019dc:	4b83      	ldr	r3, [pc, #524]	; (8001bec <main+0x534>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a83      	ldr	r2, [pc, #524]	; (8001bf0 <main+0x538>)
 80019e2:	3304      	adds	r3, #4
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f8:	ee17 3a90 	vmov	r3, s15
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	4b7a      	ldr	r3, [pc, #488]	; (8001be8 <main+0x530>)
 8001a00:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 8001a04:	4b78      	ldr	r3, [pc, #480]	; (8001be8 <main+0x530>)
 8001a06:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a0a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 1;
 8001a0e:	4b76      	ldr	r3, [pc, #472]	; (8001be8 <main+0x530>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  registerFrame[64].U16 = 2; //X Moving Status: Run
 8001a16:	4b74      	ldr	r3, [pc, #464]	; (8001be8 <main+0x530>)
 8001a18:	2202      	movs	r2, #2
 8001a1a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  Trajectstate = 0;
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <main+0x540>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001a24:	4875      	ldr	r0, [pc, #468]	; (8001bfc <main+0x544>)
 8001a26:	f007 fe3d 	bl	80096a4 <HAL_TIM_Base_Start_IT>
		  scheduler = 3;
 8001a2a:	4b75      	ldr	r3, [pc, #468]	; (8001c00 <main+0x548>)
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	601a      	str	r2, [r3, #0]
		  break;
 8001a30:	e194      	b.n	8001d5c <main+0x6a4>

	  //Trajectory
	  case 3:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001a32:	4b74      	ldr	r3, [pc, #464]	; (8001c04 <main+0x54c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	b21a      	sxth	r2, r3
 8001a3a:	4b73      	ldr	r3, [pc, #460]	; (8001c08 <main+0x550>)
 8001a3c:	801a      	strh	r2, [r3, #0]
		  static uint32_t timestamp0 = 0;
		  if(HAL_GetTick() > timestamp0)
 8001a3e:	f003 fbe1 	bl	8005204 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	4b71      	ldr	r3, [pc, #452]	; (8001c0c <main+0x554>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d909      	bls.n	8001a60 <main+0x3a8>
		  {
			  timestamp0 = HAL_GetTick() + 1;
 8001a4c:	f003 fbda 	bl	8005204 <HAL_GetTick>
 8001a50:	4603      	mov	r3, r0
 8001a52:	3301      	adds	r3, #1
 8001a54:	4a6d      	ldr	r2, [pc, #436]	; (8001c0c <main+0x554>)
 8001a56:	6013      	str	r3, [r2, #0]
			  VelocityApprox();
 8001a58:	f000 ff5e 	bl	8002918 <VelocityApprox>
			  AccelerationApprox();
 8001a5c:	f000 ff8c 	bl	8002978 <AccelerationApprox>
		  }

		  //PWM & Motor drive & PID
		  static uint32_t timestamp2 = 0;
		  if (HAL_GetTick()>= timestamp2)
 8001a60:	f003 fbd0 	bl	8005204 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	4b6a      	ldr	r3, [pc, #424]	; (8001c10 <main+0x558>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d33b      	bcc.n	8001ae6 <main+0x42e>
		  {
			  timestamp2 = HAL_GetTick() + 1;
 8001a6e:	f003 fbc9 	bl	8005204 <HAL_GetTick>
 8001a72:	4603      	mov	r3, r0
 8001a74:	3301      	adds	r3, #1
 8001a76:	4a66      	ldr	r2, [pc, #408]	; (8001c10 <main+0x558>)
 8001a78:	6013      	str	r3, [r2, #0]
			  duty = PIDcal();
 8001a7a:	f001 f80d 	bl	8002a98 <PIDcal>
 8001a7e:	eef0 7a40 	vmov.f32	s15, s0
 8001a82:	4b64      	ldr	r3, [pc, #400]	; (8001c14 <main+0x55c>)
 8001a84:	edc3 7a00 	vstr	s15, [r3]
			  if (duty >= 0)
 8001a88:	4b62      	ldr	r3, [pc, #392]	; (8001c14 <main+0x55c>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a96:	db0e      	blt.n	8001ab6 <main+0x3fe>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001a98:	4b5f      	ldr	r3, [pc, #380]	; (8001c18 <main+0x560>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 8001aa0:	4b5c      	ldr	r3, [pc, #368]	; (8001c14 <main+0x55c>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	4b5c      	ldr	r3, [pc, #368]	; (8001c18 <main+0x560>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aae:	ee17 2a90 	vmov	r2, s15
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ab4:	e017      	b.n	8001ae6 <main+0x42e>
			  }
			  else if (duty < 0)
 8001ab6:	4b57      	ldr	r3, [pc, #348]	; (8001c14 <main+0x55c>)
 8001ab8:	edd3 7a00 	vldr	s15, [r3]
 8001abc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	d50f      	bpl.n	8001ae6 <main+0x42e>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001ac6:	4b54      	ldr	r3, [pc, #336]	; (8001c18 <main+0x560>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2200      	movs	r2, #0
 8001acc:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
 8001ace:	4b51      	ldr	r3, [pc, #324]	; (8001c14 <main+0x55c>)
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	eef1 7a67 	vneg.f32	s15, s15
 8001ad8:	4b4f      	ldr	r3, [pc, #316]	; (8001c18 <main+0x560>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ae0:	ee17 2a90 	vmov	r2, s15
 8001ae4:	639a      	str	r2, [r3, #56]	; 0x38
//		  if(position > Overshootposition){
//			  Overshootposition = position;
//			  PercentOS = ((Overshootposition-qf)/(qf-qi))*100;
//		  }
		  // Check Final Position
		  if(position >= qf - 4 && position <= qf + 4 && registerFrame[64].U16 == 0) //&& registerFrame[64].U16 == 0
 8001ae6:	4b48      	ldr	r3, [pc, #288]	; (8001c08 <main+0x550>)
 8001ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af4:	4b3f      	ldr	r3, [pc, #252]	; (8001bf4 <main+0x53c>)
 8001af6:	edd3 7a00 	vldr	s15, [r3]
 8001afa:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001afe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001b02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0a:	db36      	blt.n	8001b7a <main+0x4c2>
 8001b0c:	4b3e      	ldr	r3, [pc, #248]	; (8001c08 <main+0x550>)
 8001b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b1a:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <main+0x53c>)
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001b24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b30:	d823      	bhi.n	8001b7a <main+0x4c2>
 8001b32:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <main+0x530>)
 8001b34:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d11e      	bne.n	8001b7a <main+0x4c2>
		  {
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001b3c:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <main+0x560>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2200      	movs	r2, #0
 8001b42:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001b44:	4b34      	ldr	r3, [pc, #208]	; (8001c18 <main+0x560>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	639a      	str	r2, [r3, #56]	; 0x38
			  Overshootposition = 0;
 8001b4c:	4b33      	ldr	r3, [pc, #204]	; (8001c1c <main+0x564>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	801a      	strh	r2, [r3, #0]

			  HAL_TIM_Base_Stop_IT(&htim9); //Stop IT Timer9
 8001b52:	482a      	ldr	r0, [pc, #168]	; (8001bfc <main+0x544>)
 8001b54:	f007 fe08 	bl	8009768 <HAL_TIM_Base_Stop_IT>

			  if(PointModeflag == 1)
 8001b58:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <main+0x568>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d106      	bne.n	8001b6e <main+0x4b6>
			  {
				  registerFrame[16].U16 = 0;
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <main+0x530>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	841a      	strh	r2, [r3, #32]
				  scheduler = 0;
 8001b66:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <main+0x548>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	e005      	b.n	8001b7a <main+0x4c2>
			  }
			  else
			  {
				  // End Effector
				  EndEffectorWriteFlag = 1;
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <main+0x56c>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	701a      	strb	r2, [r3, #0]
				  scheduler = 4;
 8001b74:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <main+0x548>)
 8001b76:	2204      	movs	r2, #4
 8001b78:	601a      	str	r2, [r3, #0]
			  }

		  }

		  // Reset Button
		  if (ResetButton.flag == 1)
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <main+0x570>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	f040 80e9 	bne.w	8001d56 <main+0x69e>
		  {
			  ResetButton.flag = 0;
 8001b84:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <main+0x570>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
			  scheduler = 0;
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <main+0x548>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8001b90:	e0e1      	b.n	8001d56 <main+0x69e>

	  //Proximity
	  case 4 :
		  if (HoleSequence < 9)
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <main+0x534>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	dc13      	bgt.n	8001bc2 <main+0x50a>
		  {
			  if (TaskType == 1)
 8001b9a:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <main+0x574>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d105      	bne.n	8001bae <main+0x4f6>
			  {
				  EndEffectorState = 4;			//Pick
 8001ba2:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <main+0x578>)
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	601a      	str	r2, [r3, #0]
				  EndEffectorWrite();
 8001ba8:	f000 fd46 	bl	8002638 <EndEffectorWrite>
 8001bac:	e009      	b.n	8001bc2 <main+0x50a>
//				  TaskType = -1; 			// TestYesterday
//				  HAL_Delay(2000);		    // TestYesterday
//				  scheduler = 2; 			// TestYesterday
			  }
			  else if (TaskType == -1)
 8001bae:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <main+0x574>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb6:	d104      	bne.n	8001bc2 <main+0x50a>
			  {
				  EndEffectorState = 5;			//Place
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <main+0x578>)
 8001bba:	2205      	movs	r2, #5
 8001bbc:	601a      	str	r2, [r3, #0]
				  EndEffectorWrite();
 8001bbe:	f000 fd3b 	bl	8002638 <EndEffectorWrite>
//				  {
//					  scheduler = 1; 		// TestYesterday
//				  }
			  }
		  }
		  if (ResetButton.flag == 1)
 8001bc2:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <main+0x570>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	f040 80c7 	bne.w	8001d5a <main+0x6a2>
			  {
				  ResetButton.flag = 0;
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <main+0x570>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
				  scheduler = 0;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <main+0x548>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
			  }

		  break;
 8001bd8:	e0bf      	b.n	8001d5a <main+0x6a2>

	  //Homing
	  case 5:
		  Homing();
 8001bda:	f000 fccd 	bl	8002578 <Homing>
		  break;
 8001bde:	e0bd      	b.n	8001d5c <main+0x6a4>
 8001be0:	70a3d70a 	.word	0x70a3d70a
 8001be4:	3fa70a3d 	.word	0x3fa70a3d
 8001be8:	20000fe0 	.word	0x20000fe0
 8001bec:	20000964 	.word	0x20000964
 8001bf0:	20000a44 	.word	0x20000a44
 8001bf4:	20000974 	.word	0x20000974
 8001bf8:	2000096c 	.word	0x2000096c
 8001bfc:	200006b4 	.word	0x200006b4
 8001c00:	20000200 	.word	0x20000200
 8001c04:	20000600 	.word	0x20000600
 8001c08:	200009ac 	.word	0x200009ac
 8001c0c:	200010cc 	.word	0x200010cc
 8001c10:	200010d0 	.word	0x200010d0
 8001c14:	20000968 	.word	0x20000968
 8001c18:	2000054c 	.word	0x2000054c
 8001c1c:	200009ae 	.word	0x200009ae
 8001c20:	200010c0 	.word	0x200010c0
 8001c24:	20000af8 	.word	0x20000af8
 8001c28:	20000abc 	.word	0x20000abc
 8001c2c:	20000204 	.word	0x20000204
 8001c30:	20000b00 	.word	0x20000b00

	  //Emergency
	  case 6:
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001c34:	4b4c      	ldr	r3, [pc, #304]	; (8001d68 <main+0x6b0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001c3c:	4b4a      	ldr	r3, [pc, #296]	; (8001d68 <main+0x6b0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2200      	movs	r2, #0
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1)
 8001c44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c48:	4848      	ldr	r0, [pc, #288]	; (8001d6c <main+0x6b4>)
 8001c4a:	f004 fdbf 	bl	80067cc <HAL_GPIO_ReadPin>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d110      	bne.n	8001c76 <main+0x5be>
		  {
			  Emercount = 0;
 8001c54:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <main+0x6b8>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
			  EndEffectorState = 8;		//Quit Emergency
 8001c5a:	4b46      	ldr	r3, [pc, #280]	; (8001d74 <main+0x6bc>)
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	601a      	str	r2, [r3, #0]
			  EndEffectorWriteFlag = 1;
 8001c60:	4b45      	ldr	r3, [pc, #276]	; (8001d78 <main+0x6c0>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
			  EndEffectorWrite();
 8001c66:	f000 fce7 	bl	8002638 <EndEffectorWrite>
			  Proximity = 3;
 8001c6a:	4b44      	ldr	r3, [pc, #272]	; (8001d7c <main+0x6c4>)
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	601a      	str	r2, [r3, #0]
			  scheduler = 5;
 8001c70:	4b43      	ldr	r3, [pc, #268]	; (8001d80 <main+0x6c8>)
 8001c72:	2205      	movs	r2, #5
 8001c74:	601a      	str	r2, [r3, #0]
		  }

	  //Go Point
	  case 7:
		  registerFrame[1].U16 = 0;
 8001c76:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <main+0x6cc>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	805a      	strh	r2, [r3, #2]
		  registerFrame[16].U16 = 32;
 8001c7c:	4b41      	ldr	r3, [pc, #260]	; (8001d84 <main+0x6cc>)
 8001c7e:	2220      	movs	r2, #32
 8001c80:	841a      	strh	r2, [r3, #32]

		  //X Axis
		  GoalX = registerFrame[48].U16;  	// Use int16 to store -integer
 8001c82:	4b40      	ldr	r3, [pc, #256]	; (8001d84 <main+0x6cc>)
 8001c84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001c88:	b21a      	sxth	r2, r3
 8001c8a:	4b3f      	ldr	r3, [pc, #252]	; (8001d88 <main+0x6d0>)
 8001c8c:	801a      	strh	r2, [r3, #0]
		  registerFrame[65].U16 = GoalX;  	// x-axis Target Position
 8001c8e:	4b3e      	ldr	r3, [pc, #248]	; (8001d88 <main+0x6d0>)
 8001c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <main+0x6cc>)
 8001c98:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;   	// Max Speed
 8001c9c:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <main+0x6cc>)
 8001c9e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ca2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 1;        // 500 ms
 8001ca6:	4b37      	ldr	r3, [pc, #220]	; (8001d84 <main+0x6cc>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  if(registerFrame[65].U16 != last_GoalX){
 8001cae:	4b35      	ldr	r3, [pc, #212]	; (8001d84 <main+0x6cc>)
 8001cb0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <main+0x6d4>)
 8001cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d003      	beq.n	8001cc8 <main+0x610>
			  registerFrame[64].U16 = 2;  	// RUN
 8001cc0:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <main+0x6cc>)
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  }
		  last_GoalX = registerFrame[65].U16; // press RUN in Base System
 8001cc8:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <main+0x6cc>)
 8001cca:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001cce:	b21a      	sxth	r2, r3
 8001cd0:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <main+0x6d4>)
 8001cd2:	801a      	strh	r2, [r3, #0]
//		  registerFrame[64].U16 = 2;  	// RUN

		  //Y Axis
		  Trajectstate = 0;
 8001cd4:	4b2e      	ldr	r3, [pc, #184]	; (8001d90 <main+0x6d8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
		  if(registerFrame[49].U16 >= 30000)
 8001cda:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <main+0x6cc>)
 8001cdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001ce0:	f247 522f 	movw	r2, #29999	; 0x752f
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d916      	bls.n	8001d16 <main+0x65e>
		  {
			  qf = (registerFrame[49].U16-65536)/0.45; //pulse
 8001ce8:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <main+0x6cc>)
 8001cea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001cee:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fc1e 	bl	8000534 <__aeabi_i2d>
 8001cf8:	a319      	add	r3, pc, #100	; (adr r3, 8001d60 <main+0x6a8>)
 8001cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfe:	f7fe fdad 	bl	800085c <__aeabi_ddiv>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f7fe ff75 	bl	8000bf8 <__aeabi_d2f>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4a20      	ldr	r2, [pc, #128]	; (8001d94 <main+0x6dc>)
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	e013      	b.n	8001d3e <main+0x686>
		  }
		  else
		  {
			  qf = (registerFrame[49].U16)/0.45; //Pick Tray X Position 1 //pulse
 8001d16:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <main+0x6cc>)
 8001d18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fc09 	bl	8000534 <__aeabi_i2d>
 8001d22:	a30f      	add	r3, pc, #60	; (adr r3, 8001d60 <main+0x6a8>)
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	f7fe fd98 	bl	800085c <__aeabi_ddiv>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	f7fe ff60 	bl	8000bf8 <__aeabi_d2f>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4a16      	ldr	r2, [pc, #88]	; (8001d94 <main+0x6dc>)
 8001d3c:	6013      	str	r3, [r2, #0]
		  }
		  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001d3e:	4816      	ldr	r0, [pc, #88]	; (8001d98 <main+0x6e0>)
 8001d40:	f007 fcb0 	bl	80096a4 <HAL_TIM_Base_Start_IT>
		  PointModeflag = 1;
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <main+0x6e4>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
		  scheduler = 3;
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <main+0x6c8>)
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	601a      	str	r2, [r3, #0]
		  break;
 8001d50:	e004      	b.n	8001d5c <main+0x6a4>
		  break;
 8001d52:	bf00      	nop
 8001d54:	e50c      	b.n	8001770 <main+0xb8>
		  break;
 8001d56:	bf00      	nop
 8001d58:	e50a      	b.n	8001770 <main+0xb8>
		  break;
 8001d5a:	bf00      	nop
  {
 8001d5c:	e508      	b.n	8001770 <main+0xb8>
 8001d5e:	bf00      	nop
 8001d60:	cccccccd 	.word	0xcccccccd
 8001d64:	3fdccccc 	.word	0x3fdccccc
 8001d68:	2000054c 	.word	0x2000054c
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	20000b04 	.word	0x20000b04
 8001d74:	20000b00 	.word	0x20000b00
 8001d78:	20000af8 	.word	0x20000af8
 8001d7c:	2000024c 	.word	0x2000024c
 8001d80:	20000200 	.word	0x20000200
 8001d84:	20000fe0 	.word	0x20000fe0
 8001d88:	200010bc 	.word	0x200010bc
 8001d8c:	200010be 	.word	0x200010be
 8001d90:	2000096c 	.word	0x2000096c
 8001d94:	20000974 	.word	0x20000974
 8001d98:	200006b4 	.word	0x200006b4
 8001d9c:	200010c0 	.word	0x200010c0

08001da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b094      	sub	sp, #80	; 0x50
 8001da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da6:	f107 0320 	add.w	r3, r7, #32
 8001daa:	2230      	movs	r2, #48	; 0x30
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f00a fc58 	bl	800c664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	4b27      	ldr	r3, [pc, #156]	; (8001e68 <SystemClock_Config+0xc8>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	4a26      	ldr	r2, [pc, #152]	; (8001e68 <SystemClock_Config+0xc8>)
 8001dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd4:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <SystemClock_Config+0xc8>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de0:	2300      	movs	r3, #0
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <SystemClock_Config+0xcc>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a20      	ldr	r2, [pc, #128]	; (8001e6c <SystemClock_Config+0xcc>)
 8001dea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <SystemClock_Config+0xcc>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e00:	2301      	movs	r3, #1
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e04:	2310      	movs	r3, #16
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e10:	2308      	movs	r3, #8
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001e14:	2364      	movs	r3, #100	; 0x64
 8001e16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e20:	f107 0320 	add.w	r3, r7, #32
 8001e24:	4618      	mov	r0, r3
 8001e26:	f006 feef 	bl	8008c08 <HAL_RCC_OscConfig>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e30:	f002 fd14 	bl	800485c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e34:	230f      	movs	r3, #15
 8001e36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	2103      	movs	r1, #3
 8001e50:	4618      	mov	r0, r3
 8001e52:	f007 f951 	bl	80090f8 <HAL_RCC_ClockConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e5c:	f002 fcfe 	bl	800485c <Error_Handler>
  }
}
 8001e60:	bf00      	nop
 8001e62:	3750      	adds	r7, #80	; 0x50
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40007000 	.word	0x40007000

08001e70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e76:	463b      	mov	r3, r7
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e82:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <MX_ADC1_Init+0xb4>)
 8001e84:	4a28      	ldr	r2, [pc, #160]	; (8001f28 <MX_ADC1_Init+0xb8>)
 8001e86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e88:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <MX_ADC1_Init+0xb4>)
 8001e8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e90:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <MX_ADC1_Init+0xb4>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001e96:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <MX_ADC1_Init+0xb4>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e9c:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <MX_ADC1_Init+0xb4>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <MX_ADC1_Init+0xb4>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <MX_ADC1_Init+0xb4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eb0:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <MX_ADC1_Init+0xb4>)
 8001eb2:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <MX_ADC1_Init+0xbc>)
 8001eb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001eb6:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <MX_ADC1_Init+0xb4>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <MX_ADC1_Init+0xb4>)
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ec2:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <MX_ADC1_Init+0xb4>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eca:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <MX_ADC1_Init+0xb4>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ed0:	4814      	ldr	r0, [pc, #80]	; (8001f24 <MX_ADC1_Init+0xb4>)
 8001ed2:	f003 f9c7 	bl	8005264 <HAL_ADC_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001edc:	f002 fcbe 	bl	800485c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eec:	463b      	mov	r3, r7
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480c      	ldr	r0, [pc, #48]	; (8001f24 <MX_ADC1_Init+0xb4>)
 8001ef2:	f003 fb09 	bl	8005508 <HAL_ADC_ConfigChannel>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001efc:	f002 fcae 	bl	800485c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f00:	2301      	movs	r3, #1
 8001f02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001f04:	2302      	movs	r3, #2
 8001f06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f08:	463b      	mov	r3, r7
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4805      	ldr	r0, [pc, #20]	; (8001f24 <MX_ADC1_Init+0xb4>)
 8001f0e:	f003 fafb 	bl	8005508 <HAL_ADC_ConfigChannel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001f18:	f002 fca0 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000450 	.word	0x20000450
 8001f28:	40012000 	.word	0x40012000
 8001f2c:	0f000001 	.word	0x0f000001

08001f30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <MX_I2C1_Init+0x50>)
 8001f36:	4a13      	ldr	r2, [pc, #76]	; (8001f84 <MX_I2C1_Init+0x54>)
 8001f38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <MX_I2C1_Init+0x50>)
 8001f3c:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <MX_I2C1_Init+0x58>)
 8001f3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <MX_I2C1_Init+0x50>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MX_I2C1_Init+0x50>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <MX_I2C1_Init+0x50>)
 8001f4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f54:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <MX_I2C1_Init+0x50>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_I2C1_Init+0x50>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <MX_I2C1_Init+0x50>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <MX_I2C1_Init+0x50>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f6c:	4804      	ldr	r0, [pc, #16]	; (8001f80 <MX_I2C1_Init+0x50>)
 8001f6e:	f004 fc77 	bl	8006860 <HAL_I2C_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f78:	f002 fc70 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200004f8 	.word	0x200004f8
 8001f84:	40005400 	.word	0x40005400
 8001f88:	000186a0 	.word	0x000186a0

08001f8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b092      	sub	sp, #72	; 0x48
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
 8001fac:	615a      	str	r2, [r3, #20]
 8001fae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f00a fb54 	bl	800c664 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fbc:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <MX_TIM1_Init+0x118>)
 8001fbe:	4a3a      	ldr	r2, [pc, #232]	; (80020a8 <MX_TIM1_Init+0x11c>)
 8001fc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fc2:	4b38      	ldr	r3, [pc, #224]	; (80020a4 <MX_TIM1_Init+0x118>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc8:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <MX_TIM1_Init+0x118>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8001fce:	4b35      	ldr	r3, [pc, #212]	; (80020a4 <MX_TIM1_Init+0x118>)
 8001fd0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001fd4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd6:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <MX_TIM1_Init+0x118>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <MX_TIM1_Init+0x118>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe2:	4b30      	ldr	r3, [pc, #192]	; (80020a4 <MX_TIM1_Init+0x118>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fe8:	482e      	ldr	r0, [pc, #184]	; (80020a4 <MX_TIM1_Init+0x118>)
 8001fea:	f007 fc53 	bl	8009894 <HAL_TIM_PWM_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001ff4:	f002 fc32 	bl	800485c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002000:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002004:	4619      	mov	r1, r3
 8002006:	4827      	ldr	r0, [pc, #156]	; (80020a4 <MX_TIM1_Init+0x118>)
 8002008:	f008 ff36 	bl	800ae78 <HAL_TIMEx_MasterConfigSynchronization>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002012:	f002 fc23 	bl	800485c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002016:	2360      	movs	r3, #96	; 0x60
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800201e:	2300      	movs	r3, #0
 8002020:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002022:	2300      	movs	r3, #0
 8002024:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002036:	2200      	movs	r2, #0
 8002038:	4619      	mov	r1, r3
 800203a:	481a      	ldr	r0, [pc, #104]	; (80020a4 <MX_TIM1_Init+0x118>)
 800203c:	f008 f8ca 	bl	800a1d4 <HAL_TIM_PWM_ConfigChannel>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002046:	f002 fc09 	bl	800485c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800204a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204e:	2204      	movs	r2, #4
 8002050:	4619      	mov	r1, r3
 8002052:	4814      	ldr	r0, [pc, #80]	; (80020a4 <MX_TIM1_Init+0x118>)
 8002054:	f008 f8be 	bl	800a1d4 <HAL_TIM_PWM_ConfigChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800205e:	f002 fbfd 	bl	800485c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800207a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	4619      	mov	r1, r3
 8002084:	4807      	ldr	r0, [pc, #28]	; (80020a4 <MX_TIM1_Init+0x118>)
 8002086:	f008 ff65 	bl	800af54 <HAL_TIMEx_ConfigBreakDeadTime>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002090:	f002 fbe4 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002094:	4803      	ldr	r0, [pc, #12]	; (80020a4 <MX_TIM1_Init+0x118>)
 8002096:	f002 fd9d 	bl	8004bd4 <HAL_TIM_MspPostInit>

}
 800209a:	bf00      	nop
 800209c:	3748      	adds	r7, #72	; 0x48
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000054c 	.word	0x2000054c
 80020a8:	40010000 	.word	0x40010000

080020ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08c      	sub	sp, #48	; 0x30
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	2224      	movs	r2, #36	; 0x24
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f00a fad2 	bl	800c664 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <MX_TIM3_Init+0xa0>)
 80020ca:	4a21      	ldr	r2, [pc, #132]	; (8002150 <MX_TIM3_Init+0xa4>)
 80020cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020ce:	4b1f      	ldr	r3, [pc, #124]	; (800214c <MX_TIM3_Init+0xa0>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d4:	4b1d      	ldr	r3, [pc, #116]	; (800214c <MX_TIM3_Init+0xa0>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD-1;
 80020da:	4b1c      	ldr	r3, [pc, #112]	; (800214c <MX_TIM3_Init+0xa0>)
 80020dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <MX_TIM3_Init+0xa0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <MX_TIM3_Init+0xa0>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020ee:	2303      	movs	r3, #3
 80020f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020f6:	2301      	movs	r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80020fe:	230f      	movs	r3, #15
 8002100:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002102:	2300      	movs	r3, #0
 8002104:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002106:	2301      	movs	r3, #1
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800210a:	2300      	movs	r3, #0
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800210e:	230f      	movs	r3, #15
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	4619      	mov	r1, r3
 8002118:	480c      	ldr	r0, [pc, #48]	; (800214c <MX_TIM3_Init+0xa0>)
 800211a:	f007 fd95 	bl	8009c48 <HAL_TIM_Encoder_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002124:	f002 fb9a 	bl	800485c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002128:	2300      	movs	r3, #0
 800212a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	4619      	mov	r1, r3
 8002134:	4805      	ldr	r0, [pc, #20]	; (800214c <MX_TIM3_Init+0xa0>)
 8002136:	f008 fe9f 	bl	800ae78 <HAL_TIMEx_MasterConfigSynchronization>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002140:	f002 fb8c 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002144:	bf00      	nop
 8002146:	3730      	adds	r7, #48	; 0x30
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000600 	.word	0x20000600
 8002150:	40000400 	.word	0x40000400

08002154 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800215a:	463b      	mov	r3, r7
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002166:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <MX_TIM9_Init+0x6c>)
 8002168:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <MX_TIM9_Init+0x70>)
 800216a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99;
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <MX_TIM9_Init+0x6c>)
 800216e:	2263      	movs	r2, #99	; 0x63
 8002170:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <MX_TIM9_Init+0x6c>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <MX_TIM9_Init+0x6c>)
 800217a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800217e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <MX_TIM9_Init+0x6c>)
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <MX_TIM9_Init+0x6c>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800218c:	480c      	ldr	r0, [pc, #48]	; (80021c0 <MX_TIM9_Init+0x6c>)
 800218e:	f007 f9d3 	bl	8009538 <HAL_TIM_Base_Init>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002198:	f002 fb60 	bl	800485c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800219c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80021a2:	463b      	mov	r3, r7
 80021a4:	4619      	mov	r1, r3
 80021a6:	4806      	ldr	r0, [pc, #24]	; (80021c0 <MX_TIM9_Init+0x6c>)
 80021a8:	f008 f8d6 	bl	800a358 <HAL_TIM_ConfigClockSource>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80021b2:	f002 fb53 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200006b4 	.word	0x200006b4
 80021c4:	40014000 	.word	0x40014000

080021c8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
 80021dc:	615a      	str	r2, [r3, #20]
 80021de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80021e0:	4b21      	ldr	r3, [pc, #132]	; (8002268 <MX_TIM11_Init+0xa0>)
 80021e2:	4a22      	ldr	r2, [pc, #136]	; (800226c <MX_TIM11_Init+0xa4>)
 80021e4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <MX_TIM11_Init+0xa0>)
 80021e8:	2263      	movs	r2, #99	; 0x63
 80021ea:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ec:	4b1e      	ldr	r3, [pc, #120]	; (8002268 <MX_TIM11_Init+0xa0>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 80021f2:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <MX_TIM11_Init+0xa0>)
 80021f4:	f240 72d5 	movw	r2, #2005	; 0x7d5
 80021f8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021fa:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <MX_TIM11_Init+0xa0>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002200:	4b19      	ldr	r3, [pc, #100]	; (8002268 <MX_TIM11_Init+0xa0>)
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002206:	4818      	ldr	r0, [pc, #96]	; (8002268 <MX_TIM11_Init+0xa0>)
 8002208:	f007 f996 	bl	8009538 <HAL_TIM_Base_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002212:	f002 fb23 	bl	800485c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8002216:	4814      	ldr	r0, [pc, #80]	; (8002268 <MX_TIM11_Init+0xa0>)
 8002218:	f007 fad6 	bl	80097c8 <HAL_TIM_OC_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002222:	f002 fb1b 	bl	800485c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8002226:	2108      	movs	r1, #8
 8002228:	480f      	ldr	r0, [pc, #60]	; (8002268 <MX_TIM11_Init+0xa0>)
 800222a:	f007 fc3f 	bl	8009aac <HAL_TIM_OnePulse_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8002234:	f002 fb12 	bl	800485c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002238:	2310      	movs	r3, #16
 800223a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 800223c:	f240 5399 	movw	r3, #1433	; 0x599
 8002240:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	2200      	movs	r2, #0
 800224e:	4619      	mov	r1, r3
 8002250:	4805      	ldr	r0, [pc, #20]	; (8002268 <MX_TIM11_Init+0xa0>)
 8002252:	f007 ff63 	bl	800a11c <HAL_TIM_OC_ConfigChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 800225c:	f002 fafe 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002260:	bf00      	nop
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000768 	.word	0x20000768
 800226c:	40014800 	.word	0x40014800

08002270 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <MX_USART1_UART_Init+0x4c>)
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <MX_USART1_UART_Init+0x50>)
 8002278:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <MX_USART1_UART_Init+0x4c>)
 800227c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002280:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <MX_USART1_UART_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <MX_USART1_UART_Init+0x4c>)
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <MX_USART1_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <MX_USART1_UART_Init+0x4c>)
 8002296:	220c      	movs	r2, #12
 8002298:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <MX_USART1_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <MX_USART1_UART_Init+0x4c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022a6:	4805      	ldr	r0, [pc, #20]	; (80022bc <MX_USART1_UART_Init+0x4c>)
 80022a8:	f008 fec4 	bl	800b034 <HAL_UART_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022b2:	f002 fad3 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000081c 	.word	0x2000081c
 80022c0:	40011000 	.word	0x40011000

080022c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <MX_USART2_UART_Init+0x50>)
 80022ca:	4a13      	ldr	r2, [pc, #76]	; (8002318 <MX_USART2_UART_Init+0x54>)
 80022cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80022ce:	4b11      	ldr	r3, [pc, #68]	; (8002314 <MX_USART2_UART_Init+0x50>)
 80022d0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80022d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <MX_USART2_UART_Init+0x50>)
 80022d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022dc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <MX_USART2_UART_Init+0x50>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <MX_USART2_UART_Init+0x50>)
 80022e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <MX_USART2_UART_Init+0x50>)
 80022ee:	220c      	movs	r2, #12
 80022f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <MX_USART2_UART_Init+0x50>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <MX_USART2_UART_Init+0x50>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022fe:	4805      	ldr	r0, [pc, #20]	; (8002314 <MX_USART2_UART_Init+0x50>)
 8002300:	f008 fe98 	bl	800b034 <HAL_UART_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800230a:	f002 faa7 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000890 	.word	0x20000890
 8002318:	40004400 	.word	0x40004400

0800231c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	4b17      	ldr	r3, [pc, #92]	; (8002384 <MX_DMA_Init+0x68>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	4a16      	ldr	r2, [pc, #88]	; (8002384 <MX_DMA_Init+0x68>)
 800232c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <MX_DMA_Init+0x68>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <MX_DMA_Init+0x68>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a0f      	ldr	r2, [pc, #60]	; (8002384 <MX_DMA_Init+0x68>)
 8002348:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <MX_DMA_Init+0x68>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2100      	movs	r1, #0
 800235e:	2011      	movs	r0, #17
 8002360:	f003 fc5d 	bl	8005c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002364:	2011      	movs	r0, #17
 8002366:	f003 fc76 	bl	8005c56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	2038      	movs	r0, #56	; 0x38
 8002370:	f003 fc55 	bl	8005c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002374:	2038      	movs	r0, #56	; 0x38
 8002376:	f003 fc6e 	bl	8005c56 <HAL_NVIC_EnableIRQ>

}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <MX_GPIO_Init+0x168>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a52      	ldr	r2, [pc, #328]	; (80024f0 <MX_GPIO_Init+0x168>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <MX_GPIO_Init+0x168>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	4b4c      	ldr	r3, [pc, #304]	; (80024f0 <MX_GPIO_Init+0x168>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a4b      	ldr	r2, [pc, #300]	; (80024f0 <MX_GPIO_Init+0x168>)
 80023c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b49      	ldr	r3, [pc, #292]	; (80024f0 <MX_GPIO_Init+0x168>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	4b45      	ldr	r3, [pc, #276]	; (80024f0 <MX_GPIO_Init+0x168>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a44      	ldr	r2, [pc, #272]	; (80024f0 <MX_GPIO_Init+0x168>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b42      	ldr	r3, [pc, #264]	; (80024f0 <MX_GPIO_Init+0x168>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	4b3e      	ldr	r3, [pc, #248]	; (80024f0 <MX_GPIO_Init+0x168>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a3d      	ldr	r2, [pc, #244]	; (80024f0 <MX_GPIO_Init+0x168>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <MX_GPIO_Init+0x168>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 800240e:	2200      	movs	r2, #0
 8002410:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8002414:	4837      	ldr	r0, [pc, #220]	; (80024f4 <MX_GPIO_Init+0x16c>)
 8002416:	f004 f9f1 	bl	80067fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800241a:	2302      	movs	r3, #2
 800241c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800241e:	2300      	movs	r3, #0
 8002420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4619      	mov	r1, r3
 800242c:	4832      	ldr	r0, [pc, #200]	; (80024f8 <MX_GPIO_Init+0x170>)
 800242e:	f004 f849 	bl	80064c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002432:	230c      	movs	r3, #12
 8002434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002436:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800243a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	4619      	mov	r1, r3
 8002446:	482c      	ldr	r0, [pc, #176]	; (80024f8 <MX_GPIO_Init+0x170>)
 8002448:	f004 f83c 	bl	80064c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800244c:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	4619      	mov	r1, r3
 8002460:	4826      	ldr	r0, [pc, #152]	; (80024fc <MX_GPIO_Init+0x174>)
 8002462:	f004 f82f 	bl	80064c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8002466:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800246a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246c:	2301      	movs	r3, #1
 800246e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002474:	2300      	movs	r3, #0
 8002476:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	4619      	mov	r1, r3
 800247e:	481d      	ldr	r0, [pc, #116]	; (80024f4 <MX_GPIO_Init+0x16c>)
 8002480:	f004 f820 	bl	80064c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800248a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800248e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002490:	2302      	movs	r3, #2
 8002492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	4619      	mov	r1, r3
 800249a:	4816      	ldr	r0, [pc, #88]	; (80024f4 <MX_GPIO_Init+0x16c>)
 800249c:	f004 f812 	bl	80064c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80024a0:	2360      	movs	r3, #96	; 0x60
 80024a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	4619      	mov	r1, r3
 80024b2:	4810      	ldr	r0, [pc, #64]	; (80024f4 <MX_GPIO_Init+0x16c>)
 80024b4:	f004 f806 	bl	80064c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80024b8:	2200      	movs	r2, #0
 80024ba:	2100      	movs	r1, #0
 80024bc:	2008      	movs	r0, #8
 80024be:	f003 fbae 	bl	8005c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80024c2:	2008      	movs	r0, #8
 80024c4:	f003 fbc7 	bl	8005c56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80024c8:	2200      	movs	r2, #0
 80024ca:	2100      	movs	r1, #0
 80024cc:	2009      	movs	r0, #9
 80024ce:	f003 fba6 	bl	8005c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80024d2:	2009      	movs	r0, #9
 80024d4:	f003 fbbf 	bl	8005c56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024d8:	2200      	movs	r2, #0
 80024da:	2100      	movs	r1, #0
 80024dc:	2028      	movs	r0, #40	; 0x28
 80024de:	f003 fb9e 	bl	8005c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024e2:	2028      	movs	r0, #40	; 0x28
 80024e4:	f003 fbb7 	bl	8005c56 <HAL_NVIC_EnableIRQ>

}
 80024e8:	bf00      	nop
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40020400 	.word	0x40020400
 80024f8:	40020800 	.word	0x40020800
 80024fc:	40020000 	.word	0x40020000

08002500 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d106      	bne.n	800251e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		scheduler = 5;
 8002510:	4b14      	ldr	r3, [pc, #80]	; (8002564 <HAL_GPIO_EXTI_Callback+0x64>)
 8002512:	2205      	movs	r2, #5
 8002514:	601a      	str	r2, [r3, #0]
		Proximity = 3;
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <HAL_GPIO_EXTI_Callback+0x68>)
 8002518:	2203      	movs	r2, #3
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e008      	b.n	8002530 <HAL_GPIO_EXTI_Callback+0x30>
	}
	else if(GPIO_Pin == GPIO_PIN_3)
 800251e:	88fb      	ldrh	r3, [r7, #6]
 8002520:	2b08      	cmp	r3, #8
 8002522:	d105      	bne.n	8002530 <HAL_GPIO_EXTI_Callback+0x30>
	{
		scheduler = 5;
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <HAL_GPIO_EXTI_Callback+0x64>)
 8002526:	2205      	movs	r2, #5
 8002528:	601a      	str	r2, [r3, #0]
		Proximity = 2;
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <HAL_GPIO_EXTI_Callback+0x68>)
 800252c:	2202      	movs	r2, #2
 800252e:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_15) //Push Emergency
 8002530:	88fb      	ldrh	r3, [r7, #6]
 8002532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002536:	d111      	bne.n	800255c <HAL_GPIO_EXTI_Callback+0x5c>
	{
		if(Emercount == 0)
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <HAL_GPIO_EXTI_Callback+0x6c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10d      	bne.n	800255c <HAL_GPIO_EXTI_Callback+0x5c>
		{
			EndEffectorState = 7;			//Emergency
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_GPIO_EXTI_Callback+0x70>)
 8002542:	2207      	movs	r2, #7
 8002544:	601a      	str	r2, [r3, #0]
			EndEffectorWriteFlag = 1;
 8002546:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <HAL_GPIO_EXTI_Callback+0x74>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
			EndEffectorWrite();
 800254c:	f000 f874 	bl	8002638 <EndEffectorWrite>
			Emercount = 1;
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_GPIO_EXTI_Callback+0x6c>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]
			scheduler = 6;
 8002556:	4b03      	ldr	r3, [pc, #12]	; (8002564 <HAL_GPIO_EXTI_Callback+0x64>)
 8002558:	2206      	movs	r2, #6
 800255a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000200 	.word	0x20000200
 8002568:	2000024c 	.word	0x2000024c
 800256c:	20000b04 	.word	0x20000b04
 8002570:	20000b00 	.word	0x20000b00
 8002574:	20000af8 	.word	0x20000af8

08002578 <Homing>:

void Homing()
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
	registerFrame[1].U16 = 4;
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <Homing+0xa4>)
 800257e:	2204      	movs	r2, #4
 8002580:	805a      	strh	r2, [r3, #2]
	registerFrame[64].U16 = 1;
 8002582:	4b26      	ldr	r3, [pc, #152]	; (800261c <Homing+0xa4>)
 8002584:	2201      	movs	r2, #1
 8002586:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	registerFrame[16].U16 = 4;
 800258a:	4b24      	ldr	r3, [pc, #144]	; (800261c <Homing+0xa4>)
 800258c:	2204      	movs	r2, #4
 800258e:	841a      	strh	r2, [r3, #32]
	if (Proximity == 3)
 8002590:	4b23      	ldr	r3, [pc, #140]	; (8002620 <Homing+0xa8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b03      	cmp	r3, #3
 8002596:	d109      	bne.n	80025ac <Homing+0x34>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002598:	4b22      	ldr	r3, [pc, #136]	; (8002624 <Homing+0xac>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2200      	movs	r2, #0
 800259e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,15000);
 80025a0:	4b20      	ldr	r3, [pc, #128]	; (8002624 <Homing+0xac>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f643 2298 	movw	r2, #15000	; 0x3a98
 80025a8:	635a      	str	r2, [r3, #52]	; 0x34
 80025aa:	e00c      	b.n	80025c6 <Homing+0x4e>
	}

	else if (Proximity == 2)
 80025ac:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <Homing+0xa8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d108      	bne.n	80025c6 <Homing+0x4e>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,15000);
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <Homing+0xac>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f643 2298 	movw	r2, #15000	; 0x3a98
 80025bc:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80025be:	4b19      	ldr	r3, [pc, #100]	; (8002624 <Homing+0xac>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2200      	movs	r2, #0
 80025c4:	635a      	str	r2, [r3, #52]	; 0x34
	}

	//Proximity Home
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 0)
 80025c6:	2102      	movs	r1, #2
 80025c8:	4817      	ldr	r0, [pc, #92]	; (8002628 <Homing+0xb0>)
 80025ca:	f004 f8ff 	bl	80067cc <HAL_GPIO_ReadPin>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d120      	bne.n	8002616 <Homing+0x9e>
	{
		Proximity = 0;
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <Homing+0xa8>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
		Emercount = 0;
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <Homing+0xb4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
		registerFrame[1].U16 = 0;
 80025e0:	4b0e      	ldr	r3, [pc, #56]	; (800261c <Homing+0xa4>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	805a      	strh	r2, [r3, #2]
		registerFrame[64].U16 = 0;
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <Homing+0xa4>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		registerFrame[16].U16 = 0;
 80025ee:	4b0b      	ldr	r3, [pc, #44]	; (800261c <Homing+0xa4>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	841a      	strh	r2, [r3, #32]

		HAL_Delay(10);
 80025f4:	200a      	movs	r0, #10
 80025f6:	f002 fe11 	bl	800521c <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <Homing+0xac>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2200      	movs	r2, #0
 8002600:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <Homing+0xac>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2200      	movs	r2, #0
 8002608:	635a      	str	r2, [r3, #52]	; 0x34
		JoySpeed = 0;
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <Homing+0xb8>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
		scheduler = 0;
 8002610:	4b08      	ldr	r3, [pc, #32]	; (8002634 <Homing+0xbc>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
	}
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000fe0 	.word	0x20000fe0
 8002620:	2000024c 	.word	0x2000024c
 8002624:	2000054c 	.word	0x2000054c
 8002628:	40020800 	.word	0x40020800
 800262c:	20000b04 	.word	0x20000b04
 8002630:	20000af4 	.word	0x20000af4
 8002634:	20000200 	.word	0x20000200

08002638 <EndEffectorWrite>:

void EndEffectorWrite()
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af02      	add	r7, sp, #8
//	HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
	switch(EndEffectorState)
 800263e:	4ba2      	ldr	r3, [pc, #648]	; (80028c8 <EndEffectorWrite+0x290>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b08      	cmp	r3, #8
 8002644:	f200 813c 	bhi.w	80028c0 <EndEffectorWrite+0x288>
 8002648:	a201      	add	r2, pc, #4	; (adr r2, 8002650 <EndEffectorWrite+0x18>)
 800264a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264e:	bf00      	nop
 8002650:	08002675 	.word	0x08002675
 8002654:	08002697 	.word	0x08002697
 8002658:	080026bf 	.word	0x080026bf
 800265c:	080026e7 	.word	0x080026e7
 8002660:	0800270f 	.word	0x0800270f
 8002664:	08002783 	.word	0x08002783
 8002668:	0800282d 	.word	0x0800282d
 800266c:	08002853 	.word	0x08002853
 8002670:	08002879 	.word	0x08002879
	{
	case 0:
		if(EndEffectorWriteFlag == 1)
 8002674:	4b95      	ldr	r3, [pc, #596]	; (80028cc <EndEffectorWrite+0x294>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b01      	cmp	r3, #1
 800267a:	f040 8110 	bne.w	800289e <EndEffectorWrite+0x266>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, SoftReset, 4, 100);
 800267e:	2364      	movs	r3, #100	; 0x64
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2304      	movs	r3, #4
 8002684:	4a92      	ldr	r2, [pc, #584]	; (80028d0 <EndEffectorWrite+0x298>)
 8002686:	212a      	movs	r1, #42	; 0x2a
 8002688:	4892      	ldr	r0, [pc, #584]	; (80028d4 <EndEffectorWrite+0x29c>)
 800268a:	f004 fa2d 	bl	8006ae8 <HAL_I2C_Master_Transmit>
				EndEffectorWriteFlag = 0;
 800268e:	4b8f      	ldr	r3, [pc, #572]	; (80028cc <EndEffectorWrite+0x294>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002694:	e103      	b.n	800289e <EndEffectorWrite+0x266>
	case 1:
		if(EndEffectorWriteFlag == 1)
 8002696:	4b8d      	ldr	r3, [pc, #564]	; (80028cc <EndEffectorWrite+0x294>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b01      	cmp	r3, #1
 800269c:	f040 8101 	bne.w	80028a2 <EndEffectorWrite+0x26a>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, TestModeOn, 2, 100);
 80026a0:	2364      	movs	r3, #100	; 0x64
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2302      	movs	r3, #2
 80026a6:	4a8c      	ldr	r2, [pc, #560]	; (80028d8 <EndEffectorWrite+0x2a0>)
 80026a8:	212a      	movs	r1, #42	; 0x2a
 80026aa:	488a      	ldr	r0, [pc, #552]	; (80028d4 <EndEffectorWrite+0x29c>)
 80026ac:	f004 fa1c 	bl	8006ae8 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 1; //End Effector Status: Laser On
 80026b0:	4b8a      	ldr	r3, [pc, #552]	; (80028dc <EndEffectorWrite+0x2a4>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 80026b6:	4b85      	ldr	r3, [pc, #532]	; (80028cc <EndEffectorWrite+0x294>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
			}
		break;
 80026bc:	e0f1      	b.n	80028a2 <EndEffectorWrite+0x26a>
	case 2:
		if(EndEffectorWriteFlag == 1)
 80026be:	4b83      	ldr	r3, [pc, #524]	; (80028cc <EndEffectorWrite+0x294>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	f040 80ef 	bne.w	80028a6 <EndEffectorWrite+0x26e>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, TestModeOff, 2, 100);
 80026c8:	2364      	movs	r3, #100	; 0x64
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	2302      	movs	r3, #2
 80026ce:	4a84      	ldr	r2, [pc, #528]	; (80028e0 <EndEffectorWrite+0x2a8>)
 80026d0:	212a      	movs	r1, #42	; 0x2a
 80026d2:	4880      	ldr	r0, [pc, #512]	; (80028d4 <EndEffectorWrite+0x29c>)
 80026d4:	f004 fa08 	bl	8006ae8 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Laser Off
 80026d8:	4b80      	ldr	r3, [pc, #512]	; (80028dc <EndEffectorWrite+0x2a4>)
 80026da:	2200      	movs	r2, #0
 80026dc:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 80026de:	4b7b      	ldr	r3, [pc, #492]	; (80028cc <EndEffectorWrite+0x294>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]
			}
		break;
 80026e4:	e0df      	b.n	80028a6 <EndEffectorWrite+0x26e>
	case 3:
		if(EndEffectorWriteFlag == 1)
 80026e6:	4b79      	ldr	r3, [pc, #484]	; (80028cc <EndEffectorWrite+0x294>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	f040 80dd 	bne.w	80028aa <EndEffectorWrite+0x272>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, RunModeOn, 2, 100);
 80026f0:	2364      	movs	r3, #100	; 0x64
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	2302      	movs	r3, #2
 80026f6:	4a7b      	ldr	r2, [pc, #492]	; (80028e4 <EndEffectorWrite+0x2ac>)
 80026f8:	212a      	movs	r1, #42	; 0x2a
 80026fa:	4876      	ldr	r0, [pc, #472]	; (80028d4 <EndEffectorWrite+0x29c>)
 80026fc:	f004 f9f4 	bl	8006ae8 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 2; //End Effector Status: Gripper Power
 8002700:	4b76      	ldr	r3, [pc, #472]	; (80028dc <EndEffectorWrite+0x2a4>)
 8002702:	2202      	movs	r2, #2
 8002704:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 8002706:	4b71      	ldr	r3, [pc, #452]	; (80028cc <EndEffectorWrite+0x294>)
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800270c:	e0cd      	b.n	80028aa <EndEffectorWrite+0x272>
	case 4:
		if(EndEffectorWriteFlag == 1)
 800270e:	4b6f      	ldr	r3, [pc, #444]	; (80028cc <EndEffectorWrite+0x294>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d114      	bne.n	8002740 <EndEffectorWrite+0x108>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, PickData, 2, 100);
 8002716:	2364      	movs	r3, #100	; 0x64
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	2302      	movs	r3, #2
 800271c:	4a72      	ldr	r2, [pc, #456]	; (80028e8 <EndEffectorWrite+0x2b0>)
 800271e:	212a      	movs	r1, #42	; 0x2a
 8002720:	486c      	ldr	r0, [pc, #432]	; (80028d4 <EndEffectorWrite+0x29c>)
 8002722:	f004 f9e1 	bl	8006ae8 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 6; //End Effector Status: Piking
 8002726:	4b6d      	ldr	r3, [pc, #436]	; (80028dc <EndEffectorWrite+0x2a4>)
 8002728:	2206      	movs	r2, #6
 800272a:	809a      	strh	r2, [r3, #4]
				HAL_Delay(100);
 800272c:	2064      	movs	r0, #100	; 0x64
 800272e:	f002 fd75 	bl	800521c <HAL_Delay>
				EndEffectorReadFlag = 1;
 8002732:	4b6e      	ldr	r3, [pc, #440]	; (80028ec <EndEffectorWrite+0x2b4>)
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
				EndEffectorWriteFlag = 0;
 8002738:	4b64      	ldr	r3, [pc, #400]	; (80028cc <EndEffectorWrite+0x294>)
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	e00f      	b.n	8002760 <EndEffectorWrite+0x128>
			}
		else if(EndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY)
 8002740:	4b6a      	ldr	r3, [pc, #424]	; (80028ec <EndEffectorWrite+0x2b4>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d10b      	bne.n	8002760 <EndEffectorWrite+0x128>
 8002748:	4b62      	ldr	r3, [pc, #392]	; (80028d4 <EndEffectorWrite+0x29c>)
 800274a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b20      	cmp	r3, #32
 8002752:	d105      	bne.n	8002760 <EndEffectorWrite+0x128>
			{
				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
 8002754:	2301      	movs	r3, #1
 8002756:	4a66      	ldr	r2, [pc, #408]	; (80028f0 <EndEffectorWrite+0x2b8>)
 8002758:	212a      	movs	r1, #42	; 0x2a
 800275a:	485e      	ldr	r0, [pc, #376]	; (80028d4 <EndEffectorWrite+0x29c>)
 800275c:	f004 fac2 	bl	8006ce4 <HAL_I2C_Master_Receive_IT>
			}
		if(EndEffectorDataReadBack[0] == 0x07)	//Picked
 8002760:	4b63      	ldr	r3, [pc, #396]	; (80028f0 <EndEffectorWrite+0x2b8>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b07      	cmp	r3, #7
 8002766:	f040 80a2 	bne.w	80028ae <EndEffectorWrite+0x276>
			{
				TaskType *= -1;
 800276a:	4b62      	ldr	r3, [pc, #392]	; (80028f4 <EndEffectorWrite+0x2bc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	425b      	negs	r3, r3
 8002770:	4a60      	ldr	r2, [pc, #384]	; (80028f4 <EndEffectorWrite+0x2bc>)
 8002772:	6013      	str	r3, [r2, #0]
				EndEffectorReadFlag = 0;
 8002774:	4b5d      	ldr	r3, [pc, #372]	; (80028ec <EndEffectorWrite+0x2b4>)
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
				scheduler = 2;
 800277a:	4b5f      	ldr	r3, [pc, #380]	; (80028f8 <EndEffectorWrite+0x2c0>)
 800277c:	2202      	movs	r2, #2
 800277e:	601a      	str	r2, [r3, #0]
			}
		break;
 8002780:	e095      	b.n	80028ae <EndEffectorWrite+0x276>
	case 5:
		if(EndEffectorWriteFlag == 1)
 8002782:	4b52      	ldr	r3, [pc, #328]	; (80028cc <EndEffectorWrite+0x294>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d114      	bne.n	80027b4 <EndEffectorWrite+0x17c>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, PlaceData, 2, 100);
 800278a:	2364      	movs	r3, #100	; 0x64
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	2302      	movs	r3, #2
 8002790:	4a5a      	ldr	r2, [pc, #360]	; (80028fc <EndEffectorWrite+0x2c4>)
 8002792:	212a      	movs	r1, #42	; 0x2a
 8002794:	484f      	ldr	r0, [pc, #316]	; (80028d4 <EndEffectorWrite+0x29c>)
 8002796:	f004 f9a7 	bl	8006ae8 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 10; //End Effector Status: Placing
 800279a:	4b50      	ldr	r3, [pc, #320]	; (80028dc <EndEffectorWrite+0x2a4>)
 800279c:	220a      	movs	r2, #10
 800279e:	809a      	strh	r2, [r3, #4]
				HAL_Delay(100);
 80027a0:	2064      	movs	r0, #100	; 0x64
 80027a2:	f002 fd3b 	bl	800521c <HAL_Delay>
				EndEffectorReadFlag = 1;
 80027a6:	4b51      	ldr	r3, [pc, #324]	; (80028ec <EndEffectorWrite+0x2b4>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	701a      	strb	r2, [r3, #0]
				EndEffectorWriteFlag = 0;
 80027ac:	4b47      	ldr	r3, [pc, #284]	; (80028cc <EndEffectorWrite+0x294>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	e00f      	b.n	80027d4 <EndEffectorWrite+0x19c>
			}
		else if(EndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY)
 80027b4:	4b4d      	ldr	r3, [pc, #308]	; (80028ec <EndEffectorWrite+0x2b4>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d10b      	bne.n	80027d4 <EndEffectorWrite+0x19c>
 80027bc:	4b45      	ldr	r3, [pc, #276]	; (80028d4 <EndEffectorWrite+0x29c>)
 80027be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d105      	bne.n	80027d4 <EndEffectorWrite+0x19c>
			{
				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
 80027c8:	2301      	movs	r3, #1
 80027ca:	4a49      	ldr	r2, [pc, #292]	; (80028f0 <EndEffectorWrite+0x2b8>)
 80027cc:	212a      	movs	r1, #42	; 0x2a
 80027ce:	4841      	ldr	r0, [pc, #260]	; (80028d4 <EndEffectorWrite+0x29c>)
 80027d0:	f004 fa88 	bl	8006ce4 <HAL_I2C_Master_Receive_IT>
			}
		if(EndEffectorDataReadBack[0] == 0x04)	//Placed
 80027d4:	4b46      	ldr	r3, [pc, #280]	; (80028f0 <EndEffectorWrite+0x2b8>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d16a      	bne.n	80028b2 <EndEffectorWrite+0x27a>
			{
				registerFrame[2].U16 = 2; //End Effector Status: Gripper Power
 80027dc:	4b3f      	ldr	r3, [pc, #252]	; (80028dc <EndEffectorWrite+0x2a4>)
 80027de:	2202      	movs	r2, #2
 80027e0:	809a      	strh	r2, [r3, #4]
				TaskType *= -1;
 80027e2:	4b44      	ldr	r3, [pc, #272]	; (80028f4 <EndEffectorWrite+0x2bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	425b      	negs	r3, r3
 80027e8:	4a42      	ldr	r2, [pc, #264]	; (80028f4 <EndEffectorWrite+0x2bc>)
 80027ea:	6013      	str	r3, [r2, #0]
				EndEffectorReadFlag = 0;
 80027ec:	4b3f      	ldr	r3, [pc, #252]	; (80028ec <EndEffectorWrite+0x2b4>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
				HoleSequence += 1;
 80027f2:	4b43      	ldr	r3, [pc, #268]	; (8002900 <EndEffectorWrite+0x2c8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	3301      	adds	r3, #1
 80027f8:	4a41      	ldr	r2, [pc, #260]	; (8002900 <EndEffectorWrite+0x2c8>)
 80027fa:	6013      	str	r3, [r2, #0]
				if (HoleSequence == 9)
 80027fc:	4b40      	ldr	r3, [pc, #256]	; (8002900 <EndEffectorWrite+0x2c8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b09      	cmp	r3, #9
 8002802:	d10f      	bne.n	8002824 <EndEffectorWrite+0x1ec>
				{
					HoleSequence = 0;
 8002804:	4b3e      	ldr	r3, [pc, #248]	; (8002900 <EndEffectorWrite+0x2c8>)
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
					TaskType = 1;
 800280a:	4b3a      	ldr	r3, [pc, #232]	; (80028f4 <EndEffectorWrite+0x2bc>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]
					registerFrame[1].U16 = 0;
 8002810:	4b32      	ldr	r3, [pc, #200]	; (80028dc <EndEffectorWrite+0x2a4>)
 8002812:	2200      	movs	r2, #0
 8002814:	805a      	strh	r2, [r3, #2]
					Proximity = 3;
 8002816:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <EndEffectorWrite+0x2cc>)
 8002818:	2203      	movs	r2, #3
 800281a:	601a      	str	r2, [r3, #0]
					scheduler = 5;
 800281c:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <EndEffectorWrite+0x2c0>)
 800281e:	2205      	movs	r2, #5
 8002820:	601a      	str	r2, [r3, #0]
				else
				{
					scheduler = 1;
				}
			}
		break;
 8002822:	e046      	b.n	80028b2 <EndEffectorWrite+0x27a>
					scheduler = 1;
 8002824:	4b34      	ldr	r3, [pc, #208]	; (80028f8 <EndEffectorWrite+0x2c0>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]
		break;
 800282a:	e042      	b.n	80028b2 <EndEffectorWrite+0x27a>
	case 6:
		if(EndEffectorWriteFlag == 1)
 800282c:	4b27      	ldr	r3, [pc, #156]	; (80028cc <EndEffectorWrite+0x294>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d140      	bne.n	80028b6 <EndEffectorWrite+0x27e>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, RunModeOff, 2, 100);
 8002834:	2364      	movs	r3, #100	; 0x64
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	2302      	movs	r3, #2
 800283a:	4a33      	ldr	r2, [pc, #204]	; (8002908 <EndEffectorWrite+0x2d0>)
 800283c:	212a      	movs	r1, #42	; 0x2a
 800283e:	4825      	ldr	r0, [pc, #148]	; (80028d4 <EndEffectorWrite+0x29c>)
 8002840:	f004 f952 	bl	8006ae8 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 8002844:	4b25      	ldr	r3, [pc, #148]	; (80028dc <EndEffectorWrite+0x2a4>)
 8002846:	2200      	movs	r2, #0
 8002848:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 800284a:	4b20      	ldr	r3, [pc, #128]	; (80028cc <EndEffectorWrite+0x294>)
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002850:	e031      	b.n	80028b6 <EndEffectorWrite+0x27e>
	case 7:
		if(EndEffectorWriteFlag == 1)
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <EndEffectorWrite+0x294>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d12f      	bne.n	80028ba <EndEffectorWrite+0x282>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, Emergency, 1, 100);
 800285a:	2364      	movs	r3, #100	; 0x64
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2301      	movs	r3, #1
 8002860:	4a2a      	ldr	r2, [pc, #168]	; (800290c <EndEffectorWrite+0x2d4>)
 8002862:	212a      	movs	r1, #42	; 0x2a
 8002864:	481b      	ldr	r0, [pc, #108]	; (80028d4 <EndEffectorWrite+0x29c>)
 8002866:	f004 f93f 	bl	8006ae8 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 800286a:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <EndEffectorWrite+0x2a4>)
 800286c:	2200      	movs	r2, #0
 800286e:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 8002870:	4b16      	ldr	r3, [pc, #88]	; (80028cc <EndEffectorWrite+0x294>)
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002876:	e020      	b.n	80028ba <EndEffectorWrite+0x282>
	case 8:
		if(EndEffectorWriteFlag == 1)
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <EndEffectorWrite+0x294>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d11e      	bne.n	80028be <EndEffectorWrite+0x286>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, QuitEmergency, 4, 100);
 8002880:	2364      	movs	r3, #100	; 0x64
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	2304      	movs	r3, #4
 8002886:	4a22      	ldr	r2, [pc, #136]	; (8002910 <EndEffectorWrite+0x2d8>)
 8002888:	212a      	movs	r1, #42	; 0x2a
 800288a:	4812      	ldr	r0, [pc, #72]	; (80028d4 <EndEffectorWrite+0x29c>)
 800288c:	f004 f92c 	bl	8006ae8 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <EndEffectorWrite+0x2a4>)
 8002892:	2200      	movs	r2, #0
 8002894:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <EndEffectorWrite+0x294>)
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800289c:	e00f      	b.n	80028be <EndEffectorWrite+0x286>
		break;
 800289e:	bf00      	nop
 80028a0:	e00e      	b.n	80028c0 <EndEffectorWrite+0x288>
		break;
 80028a2:	bf00      	nop
 80028a4:	e00c      	b.n	80028c0 <EndEffectorWrite+0x288>
		break;
 80028a6:	bf00      	nop
 80028a8:	e00a      	b.n	80028c0 <EndEffectorWrite+0x288>
		break;
 80028aa:	bf00      	nop
 80028ac:	e008      	b.n	80028c0 <EndEffectorWrite+0x288>
		break;
 80028ae:	bf00      	nop
 80028b0:	e006      	b.n	80028c0 <EndEffectorWrite+0x288>
		break;
 80028b2:	bf00      	nop
 80028b4:	e004      	b.n	80028c0 <EndEffectorWrite+0x288>
		break;
 80028b6:	bf00      	nop
 80028b8:	e002      	b.n	80028c0 <EndEffectorWrite+0x288>
		break;
 80028ba:	bf00      	nop
 80028bc:	e000      	b.n	80028c0 <EndEffectorWrite+0x288>
		break;
 80028be:	bf00      	nop
	}
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000b00 	.word	0x20000b00
 80028cc:	20000af8 	.word	0x20000af8
 80028d0:	20000228 	.word	0x20000228
 80028d4:	200004f8 	.word	0x200004f8
 80028d8:	20000234 	.word	0x20000234
 80028dc:	20000fe0 	.word	0x20000fe0
 80028e0:	20000238 	.word	0x20000238
 80028e4:	2000023c 	.word	0x2000023c
 80028e8:	20000244 	.word	0x20000244
 80028ec:	20000af9 	.word	0x20000af9
 80028f0:	20000afc 	.word	0x20000afc
 80028f4:	20000204 	.word	0x20000204
 80028f8:	20000200 	.word	0x20000200
 80028fc:	20000248 	.word	0x20000248
 8002900:	20000964 	.word	0x20000964
 8002904:	2000024c 	.word	0x2000024c
 8002908:	20000240 	.word	0x20000240
 800290c:	2000022c 	.word	0x2000022c
 8002910:	20000230 	.word	0x20000230
 8002914:	00000000 	.word	0x00000000

08002918 <VelocityApprox>:

void VelocityApprox()
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
	static int16_t lastposition = 0;
	velocity = (position - lastposition)/0.001; //pulse/s
 800291c:	4b12      	ldr	r3, [pc, #72]	; (8002968 <VelocityApprox+0x50>)
 800291e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002922:	461a      	mov	r2, r3
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <VelocityApprox+0x54>)
 8002926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	4618      	mov	r0, r3
 800292e:	f7fd fe01 	bl	8000534 <__aeabi_i2d>
 8002932:	a30b      	add	r3, pc, #44	; (adr r3, 8002960 <VelocityApprox+0x48>)
 8002934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002938:	f7fd ff90 	bl	800085c <__aeabi_ddiv>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	f7fe f958 	bl	8000bf8 <__aeabi_d2f>
 8002948:	4603      	mov	r3, r0
 800294a:	4a09      	ldr	r2, [pc, #36]	; (8002970 <VelocityApprox+0x58>)
 800294c:	6013      	str	r3, [r2, #0]
	lastposition = position;
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <VelocityApprox+0x50>)
 8002950:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <VelocityApprox+0x54>)
 8002956:	801a      	strh	r2, [r3, #0]
}
 8002958:	bf00      	nop
 800295a:	bd80      	pop	{r7, pc}
 800295c:	f3af 8000 	nop.w
 8002960:	d2f1a9fc 	.word	0xd2f1a9fc
 8002964:	3f50624d 	.word	0x3f50624d
 8002968:	200009ac 	.word	0x200009ac
 800296c:	200010d4 	.word	0x200010d4
 8002970:	200009d0 	.word	0x200009d0
 8002974:	00000000 	.word	0x00000000

08002978 <AccelerationApprox>:

void AccelerationApprox()
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
	static float LastVelo = 0;
	Accel = (velocity - LastVelo)/0.001;	//pulse/s^2
 800297c:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <AccelerationApprox+0x50>)
 800297e:	ed93 7a00 	vldr	s14, [r3]
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <AccelerationApprox+0x54>)
 8002984:	edd3 7a00 	vldr	s15, [r3]
 8002988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800298c:	ee17 0a90 	vmov	r0, s15
 8002990:	f7fd fde2 	bl	8000558 <__aeabi_f2d>
 8002994:	a30a      	add	r3, pc, #40	; (adr r3, 80029c0 <AccelerationApprox+0x48>)
 8002996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299a:	f7fd ff5f 	bl	800085c <__aeabi_ddiv>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4610      	mov	r0, r2
 80029a4:	4619      	mov	r1, r3
 80029a6:	f7fe f927 	bl	8000bf8 <__aeabi_d2f>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4a08      	ldr	r2, [pc, #32]	; (80029d0 <AccelerationApprox+0x58>)
 80029ae:	6013      	str	r3, [r2, #0]
	LastVelo = velocity;
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <AccelerationApprox+0x50>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a05      	ldr	r2, [pc, #20]	; (80029cc <AccelerationApprox+0x54>)
 80029b6:	6013      	str	r3, [r2, #0]

}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	f3af 8000 	nop.w
 80029c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80029c4:	3f50624d 	.word	0x3f50624d
 80029c8:	200009d0 	.word	0x200009d0
 80029cc:	200010d8 	.word	0x200010d8
 80029d0:	200009d4 	.word	0x200009d4
 80029d4:	00000000 	.word	0x00000000

080029d8 <Routine>:

void Routine()
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
	position_f = position;
 80029dc:	4b28      	ldr	r3, [pc, #160]	; (8002a80 <Routine+0xa8>)
 80029de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <Routine+0xac>)
 80029ec:	edc3 7a00 	vstr	s15, [r3]
	Yactualposition = position_f*0.45;			//mm*10
 80029f0:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <Routine+0xac>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fd fdaf 	bl	8000558 <__aeabi_f2d>
 80029fa:	a31f      	add	r3, pc, #124	; (adr r3, 8002a78 <Routine+0xa0>)
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	f7fd fe02 	bl	8000608 <__aeabi_dmul>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f7fe f8ac 	bl	8000b68 <__aeabi_d2iz>
 8002a10:	4603      	mov	r3, r0
 8002a12:	b21a      	sxth	r2, r3
 8002a14:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <Routine+0xb0>)
 8002a16:	801a      	strh	r2, [r3, #0]
	registerFrame[17].U16 = Yactualposition;	//mm*10			//Y Actual Position
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <Routine+0xb0>)
 8002a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <Routine+0xb4>)
 8002a22:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[18].U16 = velocity*0.45;		//mm/s*10		//Y Actual Speed
 8002a24:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <Routine+0xb8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fd95 	bl	8000558 <__aeabi_f2d>
 8002a2e:	a312      	add	r3, pc, #72	; (adr r3, 8002a78 <Routine+0xa0>)
 8002a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a34:	f7fd fde8 	bl	8000608 <__aeabi_dmul>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f7fe f8ba 	bl	8000bb8 <__aeabi_d2uiz>
 8002a44:	4603      	mov	r3, r0
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <Routine+0xb4>)
 8002a4a:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[19].U16 = Accel*0.45; 		//mm/s^2*10		//Y Actual Acceleration
 8002a4c:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <Routine+0xbc>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fd fd81 	bl	8000558 <__aeabi_f2d>
 8002a56:	a308      	add	r3, pc, #32	; (adr r3, 8002a78 <Routine+0xa0>)
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	f7fd fdd4 	bl	8000608 <__aeabi_dmul>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	f7fe f8a6 	bl	8000bb8 <__aeabi_d2uiz>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <Routine+0xb4>)
 8002a72:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	cccccccd 	.word	0xcccccccd
 8002a7c:	3fdccccc 	.word	0x3fdccccc
 8002a80:	200009ac 	.word	0x200009ac
 8002a84:	200009b0 	.word	0x200009b0
 8002a88:	200009b4 	.word	0x200009b4
 8002a8c:	20000fe0 	.word	0x20000fe0
 8002a90:	200009d0 	.word	0x200009d0
 8002a94:	200009d4 	.word	0x200009d4

08002a98 <PIDcal>:

float PIDcal()
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
	//position control
	errorposition = setposition - position;
 8002a9c:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <PIDcal+0xfc>)
 8002a9e:	ed93 7a00 	vldr	s14, [r3]
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <PIDcal+0x100>)
 8002aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab4:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <PIDcal+0x104>)
 8002ab6:	edc3 7a00 	vstr	s15, [r3]

	if(errorposition >= 22)
 8002aba:	4b38      	ldr	r3, [pc, #224]	; (8002b9c <PIDcal+0x104>)
 8002abc:	edd3 7a00 	vldr	s15, [r3]
 8002ac0:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002ac4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002acc:	db0a      	blt.n	8002ae4 <PIDcal+0x4c>
	{
		errorposition += 22;
 8002ace:	4b33      	ldr	r3, [pc, #204]	; (8002b9c <PIDcal+0x104>)
 8002ad0:	edd3 7a00 	vldr	s15, [r3]
 8002ad4:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002ad8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002adc:	4b2f      	ldr	r3, [pc, #188]	; (8002b9c <PIDcal+0x104>)
 8002ade:	edc3 7a00 	vstr	s15, [r3]
 8002ae2:	e013      	b.n	8002b0c <PIDcal+0x74>
	}
	else if(errorposition <= -22)
 8002ae4:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <PIDcal+0x104>)
 8002ae6:	edd3 7a00 	vldr	s15, [r3]
 8002aea:	eebb 7a06 	vmov.f32	s14, #182	; 0xc1b00000 -22.0
 8002aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af6:	d809      	bhi.n	8002b0c <PIDcal+0x74>
	{
		errorposition -= 22;
 8002af8:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <PIDcal+0x104>)
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002b02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b06:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <PIDcal+0x104>)
 8002b08:	edc3 7a00 	vstr	s15, [r3]
	}

	integral_p = integral_p + errorposition;
 8002b0c:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <PIDcal+0x108>)
 8002b0e:	ed93 7a00 	vldr	s14, [r3]
 8002b12:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <PIDcal+0x104>)
 8002b14:	edd3 7a00 	vldr	s15, [r3]
 8002b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b1c:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <PIDcal+0x108>)
 8002b1e:	edc3 7a00 	vstr	s15, [r3]
	derivative_p = errorposition - pre_errorposition;
 8002b22:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <PIDcal+0x104>)
 8002b24:	ed93 7a00 	vldr	s14, [r3]
 8002b28:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <PIDcal+0x10c>)
 8002b2a:	edd3 7a00 	vldr	s15, [r3]
 8002b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b32:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <PIDcal+0x110>)
 8002b34:	edc3 7a00 	vstr	s15, [r3]
	u_position = Kp_p*errorposition + Ki_p*integral_p + Kd_p*derivative_p;
 8002b38:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <PIDcal+0x114>)
 8002b3a:	ed93 7a00 	vldr	s14, [r3]
 8002b3e:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <PIDcal+0x104>)
 8002b40:	edd3 7a00 	vldr	s15, [r3]
 8002b44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b48:	4b19      	ldr	r3, [pc, #100]	; (8002bb0 <PIDcal+0x118>)
 8002b4a:	edd3 6a00 	vldr	s13, [r3]
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <PIDcal+0x108>)
 8002b50:	edd3 7a00 	vldr	s15, [r3]
 8002b54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b5c:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <PIDcal+0x11c>)
 8002b5e:	edd3 6a00 	vldr	s13, [r3]
 8002b62:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <PIDcal+0x110>)
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <PIDcal+0x120>)
 8002b72:	edc3 7a00 	vstr	s15, [r3]

	pre_errorposition = errorposition;
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <PIDcal+0x104>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <PIDcal+0x10c>)
 8002b7c:	6013      	str	r3, [r2, #0]
//	duty = Kp_v*errorvelocity + Ki_v*integral_v + Kd_v*derivative_v;
//
//	pre_errorvelocity = errorvelocity;

//	return duty;
	return u_position;
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <PIDcal+0x120>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	ee07 3a90 	vmov	s15, r3
}
 8002b86:	eeb0 0a67 	vmov.f32	s0, s15
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	200009b8 	.word	0x200009b8
 8002b98:	200009ac 	.word	0x200009ac
 8002b9c:	200009bc 	.word	0x200009bc
 8002ba0:	200009c8 	.word	0x200009c8
 8002ba4:	200009c4 	.word	0x200009c4
 8002ba8:	200009cc 	.word	0x200009cc
 8002bac:	20000218 	.word	0x20000218
 8002bb0:	2000021c 	.word	0x2000021c
 8002bb4:	20000220 	.word	0x20000220
 8002bb8:	200009c0 	.word	0x200009c0

08002bbc <JoystickPinUpdate>:

void JoystickPinUpdate()
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
	  GetPositionButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8002bc0:	2140      	movs	r1, #64	; 0x40
 8002bc2:	4845      	ldr	r0, [pc, #276]	; (8002cd8 <JoystickPinUpdate+0x11c>)
 8002bc4:	f003 fe02 	bl	80067cc <HAL_GPIO_ReadPin>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <JoystickPinUpdate+0x120>)
 8002bce:	605a      	str	r2, [r3, #4]
	  if (GetPositionButton.last == 1 && GetPositionButton.current == 0)
 8002bd0:	4b42      	ldr	r3, [pc, #264]	; (8002cdc <JoystickPinUpdate+0x120>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d107      	bne.n	8002be8 <JoystickPinUpdate+0x2c>
 8002bd8:	4b40      	ldr	r3, [pc, #256]	; (8002cdc <JoystickPinUpdate+0x120>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d103      	bne.n	8002be8 <JoystickPinUpdate+0x2c>
	  {
		  GetPositionButton.flag = 1;
 8002be0:	4b3e      	ldr	r3, [pc, #248]	; (8002cdc <JoystickPinUpdate+0x120>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	e002      	b.n	8002bee <JoystickPinUpdate+0x32>
	  }
	  else
	  {
		  GetPositionButton.flag = 0;
 8002be8:	4b3c      	ldr	r3, [pc, #240]	; (8002cdc <JoystickPinUpdate+0x120>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
	  }
	  GetPositionButton.last = GetPositionButton.current;
 8002bee:	4b3b      	ldr	r3, [pc, #236]	; (8002cdc <JoystickPinUpdate+0x120>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4a3a      	ldr	r2, [pc, #232]	; (8002cdc <JoystickPinUpdate+0x120>)
 8002bf4:	6013      	str	r3, [r2, #0]

	  ResetButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8002bf6:	2120      	movs	r1, #32
 8002bf8:	4839      	ldr	r0, [pc, #228]	; (8002ce0 <JoystickPinUpdate+0x124>)
 8002bfa:	f003 fde7 	bl	80067cc <HAL_GPIO_ReadPin>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b38      	ldr	r3, [pc, #224]	; (8002ce4 <JoystickPinUpdate+0x128>)
 8002c04:	605a      	str	r2, [r3, #4]
	  if (ResetButton.last == 1 && ResetButton.current == 0)
 8002c06:	4b37      	ldr	r3, [pc, #220]	; (8002ce4 <JoystickPinUpdate+0x128>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d107      	bne.n	8002c1e <JoystickPinUpdate+0x62>
 8002c0e:	4b35      	ldr	r3, [pc, #212]	; (8002ce4 <JoystickPinUpdate+0x128>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d103      	bne.n	8002c1e <JoystickPinUpdate+0x62>
	  {
		ResetButton.flag = 1;
 8002c16:	4b33      	ldr	r3, [pc, #204]	; (8002ce4 <JoystickPinUpdate+0x128>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	e002      	b.n	8002c24 <JoystickPinUpdate+0x68>
	  }
	  else
	  {
		  ResetButton.flag = 0;
 8002c1e:	4b31      	ldr	r3, [pc, #196]	; (8002ce4 <JoystickPinUpdate+0x128>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
	  }
	  ResetButton.last = ResetButton.current;
 8002c24:	4b2f      	ldr	r3, [pc, #188]	; (8002ce4 <JoystickPinUpdate+0x128>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	4a2e      	ldr	r2, [pc, #184]	; (8002ce4 <JoystickPinUpdate+0x128>)
 8002c2a:	6013      	str	r3, [r2, #0]

	  FineButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8002c2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c30:	482b      	ldr	r0, [pc, #172]	; (8002ce0 <JoystickPinUpdate+0x124>)
 8002c32:	f003 fdcb 	bl	80067cc <HAL_GPIO_ReadPin>
 8002c36:	4603      	mov	r3, r0
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ce8 <JoystickPinUpdate+0x12c>)
 8002c3c:	605a      	str	r2, [r3, #4]
	  if (FineButton.last == 1 && FineButton.current == 0)
 8002c3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ce8 <JoystickPinUpdate+0x12c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d107      	bne.n	8002c56 <JoystickPinUpdate+0x9a>
 8002c46:	4b28      	ldr	r3, [pc, #160]	; (8002ce8 <JoystickPinUpdate+0x12c>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d103      	bne.n	8002c56 <JoystickPinUpdate+0x9a>
	  {
		  FineButton.flag = 1;
 8002c4e:	4b26      	ldr	r3, [pc, #152]	; (8002ce8 <JoystickPinUpdate+0x12c>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	e002      	b.n	8002c5c <JoystickPinUpdate+0xa0>
	  }
	  else
	  {
		  FineButton.flag = 0;
 8002c56:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <JoystickPinUpdate+0x12c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
	  }
	  FineButton.last = FineButton.current;
 8002c5c:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <JoystickPinUpdate+0x12c>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	4a21      	ldr	r2, [pc, #132]	; (8002ce8 <JoystickPinUpdate+0x12c>)
 8002c62:	6013      	str	r3, [r2, #0]

	  RoughButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8002c64:	2120      	movs	r1, #32
 8002c66:	481c      	ldr	r0, [pc, #112]	; (8002cd8 <JoystickPinUpdate+0x11c>)
 8002c68:	f003 fdb0 	bl	80067cc <HAL_GPIO_ReadPin>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <JoystickPinUpdate+0x130>)
 8002c72:	605a      	str	r2, [r3, #4]
	  if (RoughButton.last == 1 && RoughButton.current == 0)
 8002c74:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <JoystickPinUpdate+0x130>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d107      	bne.n	8002c8c <JoystickPinUpdate+0xd0>
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <JoystickPinUpdate+0x130>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d103      	bne.n	8002c8c <JoystickPinUpdate+0xd0>
	  {
		  RoughButton.flag = 1;
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <JoystickPinUpdate+0x130>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	609a      	str	r2, [r3, #8]
 8002c8a:	e002      	b.n	8002c92 <JoystickPinUpdate+0xd6>
	  }
	  else
	  {
		  RoughButton.flag = 0;
 8002c8c:	4b17      	ldr	r3, [pc, #92]	; (8002cec <JoystickPinUpdate+0x130>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
	  }
	  RoughButton.last = RoughButton.current;
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <JoystickPinUpdate+0x130>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	4a15      	ldr	r2, [pc, #84]	; (8002cec <JoystickPinUpdate+0x130>)
 8002c98:	6013      	str	r3, [r2, #0]

	  HomingButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8002c9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c9e:	480e      	ldr	r0, [pc, #56]	; (8002cd8 <JoystickPinUpdate+0x11c>)
 8002ca0:	f003 fd94 	bl	80067cc <HAL_GPIO_ReadPin>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <JoystickPinUpdate+0x134>)
 8002caa:	605a      	str	r2, [r3, #4]
	  if (HomingButton.last == 1 && HomingButton.current == 0)
 8002cac:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <JoystickPinUpdate+0x134>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d107      	bne.n	8002cc4 <JoystickPinUpdate+0x108>
 8002cb4:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <JoystickPinUpdate+0x134>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d103      	bne.n	8002cc4 <JoystickPinUpdate+0x108>
	  {
		  HomingButton.flag = 1;
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <JoystickPinUpdate+0x134>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	609a      	str	r2, [r3, #8]
 8002cc2:	e002      	b.n	8002cca <JoystickPinUpdate+0x10e>
	  }
	  else
	  {
		  HomingButton.flag = 0;
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <JoystickPinUpdate+0x134>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
	  }
	  HomingButton.last = HomingButton.current;
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <JoystickPinUpdate+0x134>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4a08      	ldr	r2, [pc, #32]	; (8002cf0 <JoystickPinUpdate+0x134>)
 8002cd0:	6013      	str	r3, [r2, #0]
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40020400 	.word	0x40020400
 8002cdc:	20000ab0 	.word	0x20000ab0
 8002ce0:	40020000 	.word	0x40020000
 8002ce4:	20000abc 	.word	0x20000abc
 8002ce8:	20000ac8 	.word	0x20000ac8
 8002cec:	20000ad4 	.word	0x20000ad4
 8002cf0:	20000ae0 	.word	0x20000ae0

08002cf4 <JoystickControl>:

void JoystickControl()
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
	if(RoughButton.flag == 1)
 8002cf8:	4b5e      	ldr	r3, [pc, #376]	; (8002e74 <JoystickControl+0x180>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d106      	bne.n	8002d0e <JoystickControl+0x1a>
	{
		JoySpeed = 0;
 8002d00:	4b5d      	ldr	r3, [pc, #372]	; (8002e78 <JoystickControl+0x184>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
		RoughButton.flag = 0;
 8002d06:	4b5b      	ldr	r3, [pc, #364]	; (8002e74 <JoystickControl+0x180>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	e014      	b.n	8002d38 <JoystickControl+0x44>
	}
	else if(FineButton.flag == 1)
 8002d0e:	4b5b      	ldr	r3, [pc, #364]	; (8002e7c <JoystickControl+0x188>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d106      	bne.n	8002d24 <JoystickControl+0x30>
	{
		JoySpeed = 1;
 8002d16:	4b58      	ldr	r3, [pc, #352]	; (8002e78 <JoystickControl+0x184>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]
		FineButton.flag = 0;
 8002d1c:	4b57      	ldr	r3, [pc, #348]	; (8002e7c <JoystickControl+0x188>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	e009      	b.n	8002d38 <JoystickControl+0x44>
	}
	else if(HomingButton.flag == 1)
 8002d24:	4b56      	ldr	r3, [pc, #344]	; (8002e80 <JoystickControl+0x18c>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d105      	bne.n	8002d38 <JoystickControl+0x44>
	{
		JoySpeed = 2;
 8002d2c:	4b52      	ldr	r3, [pc, #328]	; (8002e78 <JoystickControl+0x184>)
 8002d2e:	2202      	movs	r2, #2
 8002d30:	601a      	str	r2, [r3, #0]
		HomingButton.flag = 0;
 8002d32:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <JoystickControl+0x18c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
	}

	switch(JoySpeed)
 8002d38:	4b4f      	ldr	r3, [pc, #316]	; (8002e78 <JoystickControl+0x184>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	f000 808a 	beq.w	8002e56 <JoystickControl+0x162>
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	f300 8093 	bgt.w	8002e6e <JoystickControl+0x17a>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <JoystickControl+0x5e>
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d041      	beq.n	8002dd4 <JoystickControl+0xe0>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
		Homing();
		break;
	}
}
 8002d50:	e08d      	b.n	8002e6e <JoystickControl+0x17a>
		if(XYSwitch[1] > 3000)
 8002d52:	4b4c      	ldr	r3, [pc, #304]	; (8002e84 <JoystickControl+0x190>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	dd09      	ble.n	8002d72 <JoystickControl+0x7e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002d5e:	4b4a      	ldr	r3, [pc, #296]	; (8002e88 <JoystickControl+0x194>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2200      	movs	r2, #0
 8002d64:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,15000);
 8002d66:	4b48      	ldr	r3, [pc, #288]	; (8002e88 <JoystickControl+0x194>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002d6e:	635a      	str	r2, [r3, #52]	; 0x34
 8002d70:	e016      	b.n	8002da0 <JoystickControl+0xac>
		else if(XYSwitch[1] < 1000)
 8002d72:	4b44      	ldr	r3, [pc, #272]	; (8002e84 <JoystickControl+0x190>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d7a:	da09      	bge.n	8002d90 <JoystickControl+0x9c>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,15000);
 8002d7c:	4b42      	ldr	r3, [pc, #264]	; (8002e88 <JoystickControl+0x194>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002d84:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002d86:	4b40      	ldr	r3, [pc, #256]	; (8002e88 <JoystickControl+0x194>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d8e:	e007      	b.n	8002da0 <JoystickControl+0xac>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002d90:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <JoystickControl+0x194>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2200      	movs	r2, #0
 8002d96:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002d98:	4b3b      	ldr	r3, [pc, #236]	; (8002e88 <JoystickControl+0x194>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 3000)
 8002da0:	4b38      	ldr	r3, [pc, #224]	; (8002e84 <JoystickControl+0x190>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002da8:	4293      	cmp	r3, r2
 8002daa:	dd04      	ble.n	8002db6 <JoystickControl+0xc2>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 8002dac:	4b37      	ldr	r3, [pc, #220]	; (8002e8c <JoystickControl+0x198>)
 8002dae:	2204      	movs	r2, #4
 8002db0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002db4:	e05b      	b.n	8002e6e <JoystickControl+0x17a>
		else if(XYSwitch[0] < 1000)
 8002db6:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <JoystickControl+0x190>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dbe:	da04      	bge.n	8002dca <JoystickControl+0xd6>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 8002dc0:	4b32      	ldr	r3, [pc, #200]	; (8002e8c <JoystickControl+0x198>)
 8002dc2:	2208      	movs	r2, #8
 8002dc4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002dc8:	e051      	b.n	8002e6e <JoystickControl+0x17a>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 8002dca:	4b30      	ldr	r3, [pc, #192]	; (8002e8c <JoystickControl+0x198>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002dd2:	e04c      	b.n	8002e6e <JoystickControl+0x17a>
		if(XYSwitch[1] > 3000)
 8002dd4:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <JoystickControl+0x190>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	dd09      	ble.n	8002df4 <JoystickControl+0x100>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002de0:	4b29      	ldr	r3, [pc, #164]	; (8002e88 <JoystickControl+0x194>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2200      	movs	r2, #0
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,9000);
 8002de8:	4b27      	ldr	r3, [pc, #156]	; (8002e88 <JoystickControl+0x194>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f242 3228 	movw	r2, #9000	; 0x2328
 8002df0:	635a      	str	r2, [r3, #52]	; 0x34
 8002df2:	e016      	b.n	8002e22 <JoystickControl+0x12e>
		else if(XYSwitch[1] < 1000)
 8002df4:	4b23      	ldr	r3, [pc, #140]	; (8002e84 <JoystickControl+0x190>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dfc:	da09      	bge.n	8002e12 <JoystickControl+0x11e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,9000);
 8002dfe:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <JoystickControl+0x194>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f242 3228 	movw	r2, #9000	; 0x2328
 8002e06:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002e08:	4b1f      	ldr	r3, [pc, #124]	; (8002e88 <JoystickControl+0x194>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	635a      	str	r2, [r3, #52]	; 0x34
 8002e10:	e007      	b.n	8002e22 <JoystickControl+0x12e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002e12:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <JoystickControl+0x194>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002e1a:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <JoystickControl+0x194>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 3000)
 8002e22:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <JoystickControl+0x190>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	dd04      	ble.n	8002e38 <JoystickControl+0x144>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 8002e2e:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <JoystickControl+0x198>)
 8002e30:	2204      	movs	r2, #4
 8002e32:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002e36:	e01a      	b.n	8002e6e <JoystickControl+0x17a>
		else if(XYSwitch[0] < 1000)
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <JoystickControl+0x190>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e40:	da04      	bge.n	8002e4c <JoystickControl+0x158>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 8002e42:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <JoystickControl+0x198>)
 8002e44:	2208      	movs	r2, #8
 8002e46:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002e4a:	e010      	b.n	8002e6e <JoystickControl+0x17a>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <JoystickControl+0x198>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002e54:	e00b      	b.n	8002e6e <JoystickControl+0x17a>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002e56:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <JoystickControl+0x194>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <JoystickControl+0x194>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e66:	635a      	str	r2, [r3, #52]	; 0x34
		Homing();
 8002e68:	f7ff fb86 	bl	8002578 <Homing>
		break;
 8002e6c:	bf00      	nop
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000ad4 	.word	0x20000ad4
 8002e78:	20000af4 	.word	0x20000af4
 8002e7c:	20000ac8 	.word	0x20000ac8
 8002e80:	20000ae0 	.word	0x20000ae0
 8002e84:	20000aec 	.word	0x20000aec
 8002e88:	2000054c 	.word	0x2000054c
 8002e8c:	20000fe0 	.word	0x20000fe0

08002e90 <JoystickLocationState>:

void JoystickLocationState()
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	ed2d 8b02 	vpush	{d8}
 8002e96:	af00      	add	r7, sp, #0
	if(registerFrame[1].U16 == 1)	//Base System Status: Set Pick Tray
 8002e98:	4b61      	ldr	r3, [pc, #388]	; (8003020 <JoystickLocationState+0x190>)
 8002e9a:	885b      	ldrh	r3, [r3, #2]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d114      	bne.n	8002eca <JoystickLocationState+0x3a>
	{
		registerFrame[1].U16 = 0;
 8002ea0:	4b5f      	ldr	r3, [pc, #380]	; (8003020 <JoystickLocationState+0x190>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 1;	//Y Moving Status: Jog Pick
 8002ea6:	4b5e      	ldr	r3, [pc, #376]	; (8003020 <JoystickLocationState+0x190>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	841a      	strh	r2, [r3, #32]
		EndEffectorState = 1;		//TestModeOn
 8002eac:	4b5d      	ldr	r3, [pc, #372]	; (8003024 <JoystickLocationState+0x194>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 1;	//End Effector Status: Laser On
 8002eb2:	4b5b      	ldr	r3, [pc, #364]	; (8003020 <JoystickLocationState+0x190>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8002eb8:	4b5b      	ldr	r3, [pc, #364]	; (8003028 <JoystickLocationState+0x198>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 8002ebe:	f7ff fbbb 	bl	8002638 <EndEffectorWrite>
		state = 1;					//Go Pick state
 8002ec2:	4b5a      	ldr	r3, [pc, #360]	; (800302c <JoystickLocationState+0x19c>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	e00f      	b.n	8002eea <JoystickLocationState+0x5a>
	}
	else if(registerFrame[1].U16 == 2)	//Base System Status: Set Place Tray
 8002eca:	4b55      	ldr	r3, [pc, #340]	; (8003020 <JoystickLocationState+0x190>)
 8002ecc:	885b      	ldrh	r3, [r3, #2]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d10b      	bne.n	8002eea <JoystickLocationState+0x5a>
	{
		registerFrame[1].U16 = 0;
 8002ed2:	4b53      	ldr	r3, [pc, #332]	; (8003020 <JoystickLocationState+0x190>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 2;	//Y Moving Status: Jog Place
 8002ed8:	4b51      	ldr	r3, [pc, #324]	; (8003020 <JoystickLocationState+0x190>)
 8002eda:	2202      	movs	r2, #2
 8002edc:	841a      	strh	r2, [r3, #32]
		registerFrame[2].U16 = 1;	//Laser On
 8002ede:	4b50      	ldr	r3, [pc, #320]	; (8003020 <JoystickLocationState+0x190>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	809a      	strh	r2, [r3, #4]
		state = 3;					//Go Place state
 8002ee4:	4b51      	ldr	r3, [pc, #324]	; (800302c <JoystickLocationState+0x19c>)
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	601a      	str	r2, [r3, #0]
	}
	if(registerFrame[1].U16 == 8)	//Run Tray Mode
 8002eea:	4b4d      	ldr	r3, [pc, #308]	; (8003020 <JoystickLocationState+0x190>)
 8002eec:	885b      	ldrh	r3, [r3, #2]
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d102      	bne.n	8002ef8 <JoystickLocationState+0x68>
	{
		state = 5;
 8002ef2:	4b4e      	ldr	r3, [pc, #312]	; (800302c <JoystickLocationState+0x19c>)
 8002ef4:	2205      	movs	r2, #5
 8002ef6:	601a      	str	r2, [r3, #0]
	}


	switch(state)
 8002ef8:	4b4c      	ldr	r3, [pc, #304]	; (800302c <JoystickLocationState+0x19c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	f200 8731 	bhi.w	8003d66 <JoystickLocationState+0xed6>
 8002f04:	a201      	add	r2, pc, #4	; (adr r2, 8002f0c <JoystickLocationState+0x7c>)
 8002f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0a:	bf00      	nop
 8002f0c:	08002f21 	.word	0x08002f21
 8002f10:	08002fd5 	.word	0x08002fd5
 8002f14:	080035ed 	.word	0x080035ed
 8002f18:	08003705 	.word	0x08003705
 8002f1c:	08003cfb 	.word	0x08003cfb
	{
	//Get Pick Tray 1st Point
	case 1:
		PickTray.L1[0] = 0;
 8002f20:	4b43      	ldr	r3, [pc, #268]	; (8003030 <JoystickLocationState+0x1a0>)
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
		PickTray.L2[0] = 0;
 8002f28:	4b41      	ldr	r3, [pc, #260]	; (8003030 <JoystickLocationState+0x1a0>)
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
		PickTray.L1[1] = 0;
 8002f30:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <JoystickLocationState+0x1a0>)
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	605a      	str	r2, [r3, #4]
		PickTray.L2[1] = 0;
 8002f38:	4b3d      	ldr	r3, [pc, #244]	; (8003030 <JoystickLocationState+0x1a0>)
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8002f40:	4b3c      	ldr	r3, [pc, #240]	; (8003034 <JoystickLocationState+0x1a4>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	f040 8705 	bne.w	8003d54 <JoystickLocationState+0xec4>
		{
			if(registerFrame[68].U16 >= 30000)
 8002f4a:	4b35      	ldr	r3, [pc, #212]	; (8003020 <JoystickLocationState+0x190>)
 8002f4c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f50:	f247 522f 	movw	r2, #29999	; 0x752f
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d912      	bls.n	8002f7e <JoystickLocationState+0xee>
			{
				PickTray.L1[0] = (registerFrame[68].U16-65536)/10;
 8002f58:	4b31      	ldr	r3, [pc, #196]	; (8003020 <JoystickLocationState+0x190>)
 8002f5a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f5e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002f62:	4a35      	ldr	r2, [pc, #212]	; (8003038 <JoystickLocationState+0x1a8>)
 8002f64:	fb82 1203 	smull	r1, r2, r2, r3
 8002f68:	1092      	asrs	r2, r2, #2
 8002f6a:	17db      	asrs	r3, r3, #31
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	ee07 3a90 	vmov	s15, r3
 8002f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f76:	4b2e      	ldr	r3, [pc, #184]	; (8003030 <JoystickLocationState+0x1a0>)
 8002f78:	edc3 7a00 	vstr	s15, [r3]
 8002f7c:	e00e      	b.n	8002f9c <JoystickLocationState+0x10c>
			}
			else
			{
				PickTray.L1[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8002f7e:	4b28      	ldr	r3, [pc, #160]	; (8003020 <JoystickLocationState+0x190>)
 8002f80:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f84:	4a2d      	ldr	r2, [pc, #180]	; (800303c <JoystickLocationState+0x1ac>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	08db      	lsrs	r3, r3, #3
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f96:	4b26      	ldr	r3, [pc, #152]	; (8003030 <JoystickLocationState+0x1a0>)
 8002f98:	edc3 7a00 	vstr	s15, [r3]
			}
			PickTray.L1[1] = position*0.045; //Pick Tray Y Position 1 //mm
 8002f9c:	4b28      	ldr	r3, [pc, #160]	; (8003040 <JoystickLocationState+0x1b0>)
 8002f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fd fac6 	bl	8000534 <__aeabi_i2d>
 8002fa8:	a31b      	add	r3, pc, #108	; (adr r3, 8003018 <JoystickLocationState+0x188>)
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	f7fd fb2b 	bl	8000608 <__aeabi_dmul>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f7fd fe1d 	bl	8000bf8 <__aeabi_d2f>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4a1b      	ldr	r2, [pc, #108]	; (8003030 <JoystickLocationState+0x1a0>)
 8002fc2:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <JoystickLocationState+0x1a4>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	609a      	str	r2, [r3, #8]
			state = 2;
 8002fca:	4b18      	ldr	r3, [pc, #96]	; (800302c <JoystickLocationState+0x19c>)
 8002fcc:	2202      	movs	r2, #2
 8002fce:	601a      	str	r2, [r3, #0]
		}
		break;
 8002fd0:	f000 bec0 	b.w	8003d54 <JoystickLocationState+0xec4>

	//Get Pick Tray 2nd Point
	case 2:
		if (GetPositionButton.flag == 1)
 8002fd4:	4b17      	ldr	r3, [pc, #92]	; (8003034 <JoystickLocationState+0x1a4>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	f040 82fb 	bne.w	80035d4 <JoystickLocationState+0x744>
		{
			if(registerFrame[68].U16 >= 30000)
 8002fde:	4b10      	ldr	r3, [pc, #64]	; (8003020 <JoystickLocationState+0x190>)
 8002fe0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002fe4:	f247 522f 	movw	r2, #29999	; 0x752f
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d92b      	bls.n	8003044 <JoystickLocationState+0x1b4>
			{
				PickTray.L2[0] = (registerFrame[68].U16-65536)/10;
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <JoystickLocationState+0x190>)
 8002fee:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002ff2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002ff6:	4a10      	ldr	r2, [pc, #64]	; (8003038 <JoystickLocationState+0x1a8>)
 8002ff8:	fb82 1203 	smull	r1, r2, r2, r3
 8002ffc:	1092      	asrs	r2, r2, #2
 8002ffe:	17db      	asrs	r3, r3, #31
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <JoystickLocationState+0x1a0>)
 800300c:	edc3 7a02 	vstr	s15, [r3, #8]
 8003010:	e027      	b.n	8003062 <JoystickLocationState+0x1d2>
 8003012:	bf00      	nop
 8003014:	f3af 8000 	nop.w
 8003018:	70a3d70a 	.word	0x70a3d70a
 800301c:	3fa70a3d 	.word	0x3fa70a3d
 8003020:	20000fe0 	.word	0x20000fe0
 8003024:	20000b00 	.word	0x20000b00
 8003028:	20000af8 	.word	0x20000af8
 800302c:	20000224 	.word	0x20000224
 8003030:	200009e0 	.word	0x200009e0
 8003034:	20000ab0 	.word	0x20000ab0
 8003038:	66666667 	.word	0x66666667
 800303c:	cccccccd 	.word	0xcccccccd
 8003040:	200009ac 	.word	0x200009ac
			}
			else
			{
				PickTray.L2[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8003044:	4bd6      	ldr	r3, [pc, #856]	; (80033a0 <JoystickLocationState+0x510>)
 8003046:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800304a:	4ad6      	ldr	r2, [pc, #856]	; (80033a4 <JoystickLocationState+0x514>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	08db      	lsrs	r3, r3, #3
 8003052:	b29b      	uxth	r3, r3
 8003054:	ee07 3a90 	vmov	s15, r3
 8003058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800305c:	4bd2      	ldr	r3, [pc, #840]	; (80033a8 <JoystickLocationState+0x518>)
 800305e:	edc3 7a02 	vstr	s15, [r3, #8]
			}
			PickTray.L2[1] = position*0.045; //Pick Tray Y Position 2 //mm
 8003062:	4bd2      	ldr	r3, [pc, #840]	; (80033ac <JoystickLocationState+0x51c>)
 8003064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd fa63 	bl	8000534 <__aeabi_i2d>
 800306e:	a3ca      	add	r3, pc, #808	; (adr r3, 8003398 <JoystickLocationState+0x508>)
 8003070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003074:	f7fd fac8 	bl	8000608 <__aeabi_dmul>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	f7fd fdba 	bl	8000bf8 <__aeabi_d2f>
 8003084:	4603      	mov	r3, r0
 8003086:	4ac8      	ldr	r2, [pc, #800]	; (80033a8 <JoystickLocationState+0x518>)
 8003088:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 800308a:	4bc9      	ldr	r3, [pc, #804]	; (80033b0 <JoystickLocationState+0x520>)
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]

			cos_Theta = (PickTray.L2[0]-PickTray.L1[0])/sqrtf(((PickTray.L2[0]-PickTray.L1[0])*(PickTray.L2[0]-PickTray.L1[0]))+((PickTray.L2[1]-PickTray.L1[1])*(PickTray.L2[1]-PickTray.L1[1])));
 8003090:	4bc5      	ldr	r3, [pc, #788]	; (80033a8 <JoystickLocationState+0x518>)
 8003092:	ed93 7a02 	vldr	s14, [r3, #8]
 8003096:	4bc4      	ldr	r3, [pc, #784]	; (80033a8 <JoystickLocationState+0x518>)
 8003098:	edd3 7a00 	vldr	s15, [r3]
 800309c:	ee37 8a67 	vsub.f32	s16, s14, s15
 80030a0:	4bc1      	ldr	r3, [pc, #772]	; (80033a8 <JoystickLocationState+0x518>)
 80030a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80030a6:	4bc0      	ldr	r3, [pc, #768]	; (80033a8 <JoystickLocationState+0x518>)
 80030a8:	edd3 7a00 	vldr	s15, [r3]
 80030ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030b0:	4bbd      	ldr	r3, [pc, #756]	; (80033a8 <JoystickLocationState+0x518>)
 80030b2:	edd3 6a02 	vldr	s13, [r3, #8]
 80030b6:	4bbc      	ldr	r3, [pc, #752]	; (80033a8 <JoystickLocationState+0x518>)
 80030b8:	edd3 7a00 	vldr	s15, [r3]
 80030bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80030c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030c4:	4bb8      	ldr	r3, [pc, #736]	; (80033a8 <JoystickLocationState+0x518>)
 80030c6:	edd3 6a03 	vldr	s13, [r3, #12]
 80030ca:	4bb7      	ldr	r3, [pc, #732]	; (80033a8 <JoystickLocationState+0x518>)
 80030cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80030d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80030d4:	4bb4      	ldr	r3, [pc, #720]	; (80033a8 <JoystickLocationState+0x518>)
 80030d6:	ed93 6a03 	vldr	s12, [r3, #12]
 80030da:	4bb3      	ldr	r3, [pc, #716]	; (80033a8 <JoystickLocationState+0x518>)
 80030dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80030e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80030e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ec:	eeb0 0a67 	vmov.f32	s0, s15
 80030f0:	f00d ff4e 	bl	8010f90 <sqrtf>
 80030f4:	eeb0 7a40 	vmov.f32	s14, s0
 80030f8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80030fc:	4bad      	ldr	r3, [pc, #692]	; (80033b4 <JoystickLocationState+0x524>)
 80030fe:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PickTray.L2[1]-PickTray.L1[1])/sqrtf(((PickTray.L2[0]-PickTray.L1[0])*(PickTray.L2[0]-PickTray.L1[0]))+((PickTray.L2[1]-PickTray.L1[1])*(PickTray.L2[1]-PickTray.L1[1])));
 8003102:	4ba9      	ldr	r3, [pc, #676]	; (80033a8 <JoystickLocationState+0x518>)
 8003104:	ed93 7a03 	vldr	s14, [r3, #12]
 8003108:	4ba7      	ldr	r3, [pc, #668]	; (80033a8 <JoystickLocationState+0x518>)
 800310a:	edd3 7a01 	vldr	s15, [r3, #4]
 800310e:	ee37 8a67 	vsub.f32	s16, s14, s15
 8003112:	4ba5      	ldr	r3, [pc, #660]	; (80033a8 <JoystickLocationState+0x518>)
 8003114:	ed93 7a02 	vldr	s14, [r3, #8]
 8003118:	4ba3      	ldr	r3, [pc, #652]	; (80033a8 <JoystickLocationState+0x518>)
 800311a:	edd3 7a00 	vldr	s15, [r3]
 800311e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003122:	4ba1      	ldr	r3, [pc, #644]	; (80033a8 <JoystickLocationState+0x518>)
 8003124:	edd3 6a02 	vldr	s13, [r3, #8]
 8003128:	4b9f      	ldr	r3, [pc, #636]	; (80033a8 <JoystickLocationState+0x518>)
 800312a:	edd3 7a00 	vldr	s15, [r3]
 800312e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003136:	4b9c      	ldr	r3, [pc, #624]	; (80033a8 <JoystickLocationState+0x518>)
 8003138:	edd3 6a03 	vldr	s13, [r3, #12]
 800313c:	4b9a      	ldr	r3, [pc, #616]	; (80033a8 <JoystickLocationState+0x518>)
 800313e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003142:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003146:	4b98      	ldr	r3, [pc, #608]	; (80033a8 <JoystickLocationState+0x518>)
 8003148:	ed93 6a03 	vldr	s12, [r3, #12]
 800314c:	4b96      	ldr	r3, [pc, #600]	; (80033a8 <JoystickLocationState+0x518>)
 800314e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003152:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800315a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315e:	eeb0 0a67 	vmov.f32	s0, s15
 8003162:	f00d ff15 	bl	8010f90 <sqrtf>
 8003166:	eeb0 7a40 	vmov.f32	s14, s0
 800316a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800316e:	4b92      	ldr	r3, [pc, #584]	; (80033b8 <JoystickLocationState+0x528>)
 8003170:	edc3 7a00 	vstr	s15, [r3]
			//sin_Theta = sin(angle);

			PickTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PickTray.L1[0];
 8003174:	4b8f      	ldr	r3, [pc, #572]	; (80033b4 <JoystickLocationState+0x524>)
 8003176:	edd3 7a00 	vldr	s15, [r3]
 800317a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800317e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003182:	4b8d      	ldr	r3, [pc, #564]	; (80033b8 <JoystickLocationState+0x528>)
 8003184:	edd3 7a00 	vldr	s15, [r3]
 8003188:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800318c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003190:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003194:	4b84      	ldr	r3, [pc, #528]	; (80033a8 <JoystickLocationState+0x518>)
 8003196:	edd3 7a00 	vldr	s15, [r3]
 800319a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800319e:	4b82      	ldr	r3, [pc, #520]	; (80033a8 <JoystickLocationState+0x518>)
 80031a0:	edc3 7a04 	vstr	s15, [r3, #16]
			PickTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PickTray.L1[1];
 80031a4:	4b84      	ldr	r3, [pc, #528]	; (80033b8 <JoystickLocationState+0x528>)
 80031a6:	edd3 7a00 	vldr	s15, [r3]
 80031aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031b2:	4b80      	ldr	r3, [pc, #512]	; (80033b4 <JoystickLocationState+0x524>)
 80031b4:	edd3 7a00 	vldr	s15, [r3]
 80031b8:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80031bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031c4:	4b78      	ldr	r3, [pc, #480]	; (80033a8 <JoystickLocationState+0x518>)
 80031c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80031ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ce:	4b76      	ldr	r3, [pc, #472]	; (80033a8 <JoystickLocationState+0x518>)
 80031d0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PickTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PickTray.L1[0];
 80031d4:	4b77      	ldr	r3, [pc, #476]	; (80033b4 <JoystickLocationState+0x524>)
 80031d6:	edd3 7a00 	vldr	s15, [r3]
 80031da:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80031de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031e2:	4b75      	ldr	r3, [pc, #468]	; (80033b8 <JoystickLocationState+0x528>)
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80031ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031f4:	4b6c      	ldr	r3, [pc, #432]	; (80033a8 <JoystickLocationState+0x518>)
 80031f6:	edd3 7a00 	vldr	s15, [r3]
 80031fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fe:	4b6a      	ldr	r3, [pc, #424]	; (80033a8 <JoystickLocationState+0x518>)
 8003200:	edc3 7a05 	vstr	s15, [r3, #20]
			PickTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PickTray.L1[1];
 8003204:	4b6c      	ldr	r3, [pc, #432]	; (80033b8 <JoystickLocationState+0x528>)
 8003206:	edd3 7a00 	vldr	s15, [r3]
 800320a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800320e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003212:	4b68      	ldr	r3, [pc, #416]	; (80033b4 <JoystickLocationState+0x524>)
 8003214:	edd3 7a00 	vldr	s15, [r3]
 8003218:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 800321c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003220:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003224:	4b60      	ldr	r3, [pc, #384]	; (80033a8 <JoystickLocationState+0x518>)
 8003226:	edd3 7a01 	vldr	s15, [r3, #4]
 800322a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322e:	4b5e      	ldr	r3, [pc, #376]	; (80033a8 <JoystickLocationState+0x518>)
 8003230:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PickTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PickTray.L1[0];
 8003234:	4b5f      	ldr	r3, [pc, #380]	; (80033b4 <JoystickLocationState+0x524>)
 8003236:	edd3 7a00 	vldr	s15, [r3]
 800323a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80033bc <JoystickLocationState+0x52c>
 800323e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003242:	4b5d      	ldr	r3, [pc, #372]	; (80033b8 <JoystickLocationState+0x528>)
 8003244:	edd3 7a00 	vldr	s15, [r3]
 8003248:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800324c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003250:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003254:	4b54      	ldr	r3, [pc, #336]	; (80033a8 <JoystickLocationState+0x518>)
 8003256:	edd3 7a00 	vldr	s15, [r3]
 800325a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800325e:	4b52      	ldr	r3, [pc, #328]	; (80033a8 <JoystickLocationState+0x518>)
 8003260:	edc3 7a06 	vstr	s15, [r3, #24]
			PickTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PickTray.L1[1];
 8003264:	4b54      	ldr	r3, [pc, #336]	; (80033b8 <JoystickLocationState+0x528>)
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80033bc <JoystickLocationState+0x52c>
 800326e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003272:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <JoystickLocationState+0x524>)
 8003274:	edd3 7a00 	vldr	s15, [r3]
 8003278:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 800327c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003280:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003284:	4b48      	ldr	r3, [pc, #288]	; (80033a8 <JoystickLocationState+0x518>)
 8003286:	edd3 7a01 	vldr	s15, [r3, #4]
 800328a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800328e:	4b46      	ldr	r3, [pc, #280]	; (80033a8 <JoystickLocationState+0x518>)
 8003290:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PickTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PickTray.L1[0];
 8003294:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <JoystickLocationState+0x524>)
 8003296:	edd3 7a00 	vldr	s15, [r3]
 800329a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800329e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032a2:	4b45      	ldr	r3, [pc, #276]	; (80033b8 <JoystickLocationState+0x528>)
 80032a4:	edd3 7a00 	vldr	s15, [r3]
 80032a8:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80032ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032b4:	4b3c      	ldr	r3, [pc, #240]	; (80033a8 <JoystickLocationState+0x518>)
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032be:	4b3a      	ldr	r3, [pc, #232]	; (80033a8 <JoystickLocationState+0x518>)
 80032c0:	edc3 7a07 	vstr	s15, [r3, #28]
			PickTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PickTray.L1[1];
 80032c4:	4b3c      	ldr	r3, [pc, #240]	; (80033b8 <JoystickLocationState+0x528>)
 80032c6:	edd3 7a00 	vldr	s15, [r3]
 80032ca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032d2:	4b38      	ldr	r3, [pc, #224]	; (80033b4 <JoystickLocationState+0x524>)
 80032d4:	edd3 7a00 	vldr	s15, [r3]
 80032d8:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 80032dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032e4:	4b30      	ldr	r3, [pc, #192]	; (80033a8 <JoystickLocationState+0x518>)
 80032e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80032ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ee:	4b2e      	ldr	r3, [pc, #184]	; (80033a8 <JoystickLocationState+0x518>)
 80032f0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PickTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PickTray.L1[0];
 80032f4:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <JoystickLocationState+0x524>)
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80032fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003302:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <JoystickLocationState+0x528>)
 8003304:	edd3 7a00 	vldr	s15, [r3]
 8003308:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800330c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003310:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003314:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <JoystickLocationState+0x518>)
 8003316:	edd3 7a00 	vldr	s15, [r3]
 800331a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331e:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <JoystickLocationState+0x518>)
 8003320:	edc3 7a08 	vstr	s15, [r3, #32]
			PickTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PickTray.L1[1];
 8003324:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <JoystickLocationState+0x528>)
 8003326:	edd3 7a00 	vldr	s15, [r3]
 800332a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800332e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003332:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <JoystickLocationState+0x524>)
 8003334:	edd3 7a00 	vldr	s15, [r3]
 8003338:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 800333c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003340:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003344:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <JoystickLocationState+0x518>)
 8003346:	edd3 7a01 	vldr	s15, [r3, #4]
 800334a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334e:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <JoystickLocationState+0x518>)
 8003350:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PickTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PickTray.L1[0];
 8003354:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <JoystickLocationState+0x524>)
 8003356:	edd3 7a00 	vldr	s15, [r3]
 800335a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80033bc <JoystickLocationState+0x52c>
 800335e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003362:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <JoystickLocationState+0x528>)
 8003364:	edd3 7a00 	vldr	s15, [r3]
 8003368:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800336c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003374:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <JoystickLocationState+0x518>)
 8003376:	edd3 7a00 	vldr	s15, [r3]
 800337a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <JoystickLocationState+0x518>)
 8003380:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PickTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PickTray.L1[1];
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <JoystickLocationState+0x528>)
 8003386:	edd3 7a00 	vldr	s15, [r3]
 800338a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80033bc <JoystickLocationState+0x52c>
 800338e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003392:	e015      	b.n	80033c0 <JoystickLocationState+0x530>
 8003394:	f3af 8000 	nop.w
 8003398:	70a3d70a 	.word	0x70a3d70a
 800339c:	3fa70a3d 	.word	0x3fa70a3d
 80033a0:	20000fe0 	.word	0x20000fe0
 80033a4:	cccccccd 	.word	0xcccccccd
 80033a8:	200009e0 	.word	0x200009e0
 80033ac:	200009ac 	.word	0x200009ac
 80033b0:	20000ab0 	.word	0x20000ab0
 80033b4:	20000aa8 	.word	0x20000aa8
 80033b8:	20000aac 	.word	0x20000aac
 80033bc:	42480000 	.word	0x42480000
 80033c0:	4bc1      	ldr	r3, [pc, #772]	; (80036c8 <JoystickLocationState+0x838>)
 80033c2:	edd3 7a00 	vldr	s15, [r3]
 80033c6:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 80033ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033d2:	4bbe      	ldr	r3, [pc, #760]	; (80036cc <JoystickLocationState+0x83c>)
 80033d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80033d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033dc:	4bbb      	ldr	r3, [pc, #748]	; (80036cc <JoystickLocationState+0x83c>)
 80033de:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PickTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PickTray.L1[0];
 80033e2:	4bb9      	ldr	r3, [pc, #740]	; (80036c8 <JoystickLocationState+0x838>)
 80033e4:	edd3 7a00 	vldr	s15, [r3]
 80033e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80033ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033f0:	4bb7      	ldr	r3, [pc, #732]	; (80036d0 <JoystickLocationState+0x840>)
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	eddf 6ab7 	vldr	s13, [pc, #732]	; 80036d4 <JoystickLocationState+0x844>
 80033fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003402:	4bb2      	ldr	r3, [pc, #712]	; (80036cc <JoystickLocationState+0x83c>)
 8003404:	edd3 7a00 	vldr	s15, [r3]
 8003408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340c:	4baf      	ldr	r3, [pc, #700]	; (80036cc <JoystickLocationState+0x83c>)
 800340e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PickTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PickTray.L1[1];
 8003412:	4baf      	ldr	r3, [pc, #700]	; (80036d0 <JoystickLocationState+0x840>)
 8003414:	edd3 7a00 	vldr	s15, [r3]
 8003418:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800341c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003420:	4ba9      	ldr	r3, [pc, #676]	; (80036c8 <JoystickLocationState+0x838>)
 8003422:	edd3 7a00 	vldr	s15, [r3]
 8003426:	eddf 6aac 	vldr	s13, [pc, #688]	; 80036d8 <JoystickLocationState+0x848>
 800342a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800342e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003432:	4ba6      	ldr	r3, [pc, #664]	; (80036cc <JoystickLocationState+0x83c>)
 8003434:	edd3 7a01 	vldr	s15, [r3, #4]
 8003438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800343c:	4ba3      	ldr	r3, [pc, #652]	; (80036cc <JoystickLocationState+0x83c>)
 800343e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PickTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PickTray.L1[0];
 8003442:	4ba1      	ldr	r3, [pc, #644]	; (80036c8 <JoystickLocationState+0x838>)
 8003444:	edd3 7a00 	vldr	s15, [r3]
 8003448:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800344c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003450:	4b9f      	ldr	r3, [pc, #636]	; (80036d0 <JoystickLocationState+0x840>)
 8003452:	edd3 7a00 	vldr	s15, [r3]
 8003456:	eddf 6a9f 	vldr	s13, [pc, #636]	; 80036d4 <JoystickLocationState+0x844>
 800345a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800345e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003462:	4b9a      	ldr	r3, [pc, #616]	; (80036cc <JoystickLocationState+0x83c>)
 8003464:	edd3 7a00 	vldr	s15, [r3]
 8003468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800346c:	4b97      	ldr	r3, [pc, #604]	; (80036cc <JoystickLocationState+0x83c>)
 800346e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PickTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PickTray.L1[1];
 8003472:	4b97      	ldr	r3, [pc, #604]	; (80036d0 <JoystickLocationState+0x840>)
 8003474:	edd3 7a00 	vldr	s15, [r3]
 8003478:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800347c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003480:	4b91      	ldr	r3, [pc, #580]	; (80036c8 <JoystickLocationState+0x838>)
 8003482:	edd3 7a00 	vldr	s15, [r3]
 8003486:	eddf 6a94 	vldr	s13, [pc, #592]	; 80036d8 <JoystickLocationState+0x848>
 800348a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800348e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003492:	4b8e      	ldr	r3, [pc, #568]	; (80036cc <JoystickLocationState+0x83c>)
 8003494:	edd3 7a01 	vldr	s15, [r3, #4]
 8003498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800349c:	4b8b      	ldr	r3, [pc, #556]	; (80036cc <JoystickLocationState+0x83c>)
 800349e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PickTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PickTray.L1[0];
 80034a2:	4b89      	ldr	r3, [pc, #548]	; (80036c8 <JoystickLocationState+0x838>)
 80034a4:	edd3 7a00 	vldr	s15, [r3]
 80034a8:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80036dc <JoystickLocationState+0x84c>
 80034ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034b0:	4b87      	ldr	r3, [pc, #540]	; (80036d0 <JoystickLocationState+0x840>)
 80034b2:	edd3 7a00 	vldr	s15, [r3]
 80034b6:	eddf 6a87 	vldr	s13, [pc, #540]	; 80036d4 <JoystickLocationState+0x844>
 80034ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034c2:	4b82      	ldr	r3, [pc, #520]	; (80036cc <JoystickLocationState+0x83c>)
 80034c4:	edd3 7a00 	vldr	s15, [r3]
 80034c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034cc:	4b7f      	ldr	r3, [pc, #508]	; (80036cc <JoystickLocationState+0x83c>)
 80034ce:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PickTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PickTray.L1[1];
 80034d2:	4b7f      	ldr	r3, [pc, #508]	; (80036d0 <JoystickLocationState+0x840>)
 80034d4:	edd3 7a00 	vldr	s15, [r3]
 80034d8:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80036dc <JoystickLocationState+0x84c>
 80034dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034e0:	4b79      	ldr	r3, [pc, #484]	; (80036c8 <JoystickLocationState+0x838>)
 80034e2:	edd3 7a00 	vldr	s15, [r3]
 80034e6:	eddf 6a7c 	vldr	s13, [pc, #496]	; 80036d8 <JoystickLocationState+0x848>
 80034ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034f2:	4b76      	ldr	r3, [pc, #472]	; (80036cc <JoystickLocationState+0x83c>)
 80034f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80034f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fc:	4b73      	ldr	r3, [pc, #460]	; (80036cc <JoystickLocationState+0x83c>)
 80034fe:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PickTray.origin_x = PickTray.L1[0]+(50*sin_Theta);
 8003502:	4b72      	ldr	r3, [pc, #456]	; (80036cc <JoystickLocationState+0x83c>)
 8003504:	ed93 7a00 	vldr	s14, [r3]
 8003508:	4b71      	ldr	r3, [pc, #452]	; (80036d0 <JoystickLocationState+0x840>)
 800350a:	edd3 7a00 	vldr	s15, [r3]
 800350e:	eddf 6a73 	vldr	s13, [pc, #460]	; 80036dc <JoystickLocationState+0x84c>
 8003512:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800351a:	4b6c      	ldr	r3, [pc, #432]	; (80036cc <JoystickLocationState+0x83c>)
 800351c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			PickTray.origin_y = PickTray.L1[1]-(50*cos_Theta);
 8003520:	4b6a      	ldr	r3, [pc, #424]	; (80036cc <JoystickLocationState+0x83c>)
 8003522:	ed93 7a01 	vldr	s14, [r3, #4]
 8003526:	4b68      	ldr	r3, [pc, #416]	; (80036c8 <JoystickLocationState+0x838>)
 8003528:	edd3 7a00 	vldr	s15, [r3]
 800352c:	eddf 6a6b 	vldr	s13, [pc, #428]	; 80036dc <JoystickLocationState+0x84c>
 8003530:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003538:	4b64      	ldr	r3, [pc, #400]	; (80036cc <JoystickLocationState+0x83c>)
 800353a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			PickTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 800353e:	4b62      	ldr	r3, [pc, #392]	; (80036c8 <JoystickLocationState+0x838>)
 8003540:	edd3 7a00 	vldr	s15, [r3]
 8003544:	eeb0 0a67 	vmov.f32	s0, s15
 8003548:	f00d fcf6 	bl	8010f38 <acosf>
 800354c:	ee10 3a10 	vmov	r3, s0
 8003550:	4618      	mov	r0, r3
 8003552:	f7fd f801 	bl	8000558 <__aeabi_f2d>
 8003556:	a358      	add	r3, pc, #352	; (adr r3, 80036b8 <JoystickLocationState+0x828>)
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	f7fd f854 	bl	8000608 <__aeabi_dmul>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	f7fd fb46 	bl	8000bf8 <__aeabi_d2f>
 800356c:	4603      	mov	r3, r0
 800356e:	4a57      	ldr	r2, [pc, #348]	; (80036cc <JoystickLocationState+0x83c>)
 8003570:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[35].U16 = PickTray.origin_x * 10;
 8003572:	4b56      	ldr	r3, [pc, #344]	; (80036cc <JoystickLocationState+0x83c>)
 8003574:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003578:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800357c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003584:	ee17 3a90 	vmov	r3, s15
 8003588:	b29a      	uxth	r2, r3
 800358a:	4b55      	ldr	r3, [pc, #340]	; (80036e0 <JoystickLocationState+0x850>)
 800358c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[36].U16 = PickTray.origin_y * 10;
 8003590:	4b4e      	ldr	r3, [pc, #312]	; (80036cc <JoystickLocationState+0x83c>)
 8003592:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003596:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800359a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800359e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035a2:	ee17 3a90 	vmov	r3, s15
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	4b4d      	ldr	r3, [pc, #308]	; (80036e0 <JoystickLocationState+0x850>)
 80035aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[37].U16 = PickTray.orientation * 100;
 80035ae:	4b47      	ldr	r3, [pc, #284]	; (80036cc <JoystickLocationState+0x83c>)
 80035b0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80035b4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80036e4 <JoystickLocationState+0x854>
 80035b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035c0:	ee17 3a90 	vmov	r3, s15
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	4b46      	ldr	r3, [pc, #280]	; (80036e0 <JoystickLocationState+0x850>)
 80035c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			registerFrame[16].U16 = 0;
 80035cc:	4b44      	ldr	r3, [pc, #272]	; (80036e0 <JoystickLocationState+0x850>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 80035d2:	e3c1      	b.n	8003d58 <JoystickLocationState+0xec8>
		else if (ResetButton.flag == 1)
 80035d4:	4b44      	ldr	r3, [pc, #272]	; (80036e8 <JoystickLocationState+0x858>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	f040 83bd 	bne.w	8003d58 <JoystickLocationState+0xec8>
			ResetButton.flag = 0;
 80035de:	4b42      	ldr	r3, [pc, #264]	; (80036e8 <JoystickLocationState+0x858>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	609a      	str	r2, [r3, #8]
			state = 1;
 80035e4:	4b41      	ldr	r3, [pc, #260]	; (80036ec <JoystickLocationState+0x85c>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
		break;
 80035ea:	e3b5      	b.n	8003d58 <JoystickLocationState+0xec8>

	//Get Place Tray 1st Point
	case 3:
		PlaceTray.L1[0] = 0;
 80035ec:	4b40      	ldr	r3, [pc, #256]	; (80036f0 <JoystickLocationState+0x860>)
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
		PlaceTray.L2[0] = 0;
 80035f4:	4b3e      	ldr	r3, [pc, #248]	; (80036f0 <JoystickLocationState+0x860>)
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
		PlaceTray.L1[1] = 0;
 80035fc:	4b3c      	ldr	r3, [pc, #240]	; (80036f0 <JoystickLocationState+0x860>)
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	605a      	str	r2, [r3, #4]
		PlaceTray.L2[1] = 0;
 8003604:	4b3a      	ldr	r3, [pc, #232]	; (80036f0 <JoystickLocationState+0x860>)
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 800360c:	4b39      	ldr	r3, [pc, #228]	; (80036f4 <JoystickLocationState+0x864>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d143      	bne.n	800369c <JoystickLocationState+0x80c>
		{
			if(registerFrame[68].U16 >= 30000)
 8003614:	4b32      	ldr	r3, [pc, #200]	; (80036e0 <JoystickLocationState+0x850>)
 8003616:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800361a:	f247 522f 	movw	r2, #29999	; 0x752f
 800361e:	4293      	cmp	r3, r2
 8003620:	d912      	bls.n	8003648 <JoystickLocationState+0x7b8>
			{
				PlaceTray.L1[0] = (registerFrame[68].U16-65536)/10;
 8003622:	4b2f      	ldr	r3, [pc, #188]	; (80036e0 <JoystickLocationState+0x850>)
 8003624:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003628:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800362c:	4a32      	ldr	r2, [pc, #200]	; (80036f8 <JoystickLocationState+0x868>)
 800362e:	fb82 1203 	smull	r1, r2, r2, r3
 8003632:	1092      	asrs	r2, r2, #2
 8003634:	17db      	asrs	r3, r3, #31
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	ee07 3a90 	vmov	s15, r3
 800363c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003640:	4b2b      	ldr	r3, [pc, #172]	; (80036f0 <JoystickLocationState+0x860>)
 8003642:	edc3 7a00 	vstr	s15, [r3]
 8003646:	e00e      	b.n	8003666 <JoystickLocationState+0x7d6>
			}
			else
			{
				PlaceTray.L1[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8003648:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <JoystickLocationState+0x850>)
 800364a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800364e:	4a2b      	ldr	r2, [pc, #172]	; (80036fc <JoystickLocationState+0x86c>)
 8003650:	fba2 2303 	umull	r2, r3, r2, r3
 8003654:	08db      	lsrs	r3, r3, #3
 8003656:	b29b      	uxth	r3, r3
 8003658:	ee07 3a90 	vmov	s15, r3
 800365c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003660:	4b23      	ldr	r3, [pc, #140]	; (80036f0 <JoystickLocationState+0x860>)
 8003662:	edc3 7a00 	vstr	s15, [r3]
			}
			PlaceTray.L1[1] = position*0.045; //Place Tray Y Position 1 //mm
 8003666:	4b26      	ldr	r3, [pc, #152]	; (8003700 <JoystickLocationState+0x870>)
 8003668:	f9b3 3000 	ldrsh.w	r3, [r3]
 800366c:	4618      	mov	r0, r3
 800366e:	f7fc ff61 	bl	8000534 <__aeabi_i2d>
 8003672:	a313      	add	r3, pc, #76	; (adr r3, 80036c0 <JoystickLocationState+0x830>)
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	f7fc ffc6 	bl	8000608 <__aeabi_dmul>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4610      	mov	r0, r2
 8003682:	4619      	mov	r1, r3
 8003684:	f7fd fab8 	bl	8000bf8 <__aeabi_d2f>
 8003688:	4603      	mov	r3, r0
 800368a:	4a19      	ldr	r2, [pc, #100]	; (80036f0 <JoystickLocationState+0x860>)
 800368c:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 800368e:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <JoystickLocationState+0x864>)
 8003690:	2200      	movs	r2, #0
 8003692:	609a      	str	r2, [r3, #8]
			state = 4;
 8003694:	4b15      	ldr	r3, [pc, #84]	; (80036ec <JoystickLocationState+0x85c>)
 8003696:	2204      	movs	r2, #4
 8003698:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 800369a:	e35f      	b.n	8003d5c <JoystickLocationState+0xecc>
		else if (ResetButton.flag == 1)
 800369c:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <JoystickLocationState+0x858>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	f040 835b 	bne.w	8003d5c <JoystickLocationState+0xecc>
			ResetButton.flag = 0;
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <JoystickLocationState+0x858>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	609a      	str	r2, [r3, #8]
			state = 1;
 80036ac:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <JoystickLocationState+0x85c>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
		break;
 80036b2:	e353      	b.n	8003d5c <JoystickLocationState+0xecc>
 80036b4:	f3af 8000 	nop.w
 80036b8:	1a63c1f8 	.word	0x1a63c1f8
 80036bc:	404ca5dc 	.word	0x404ca5dc
 80036c0:	70a3d70a 	.word	0x70a3d70a
 80036c4:	3fa70a3d 	.word	0x3fa70a3d
 80036c8:	20000aa8 	.word	0x20000aa8
 80036cc:	200009e0 	.word	0x200009e0
 80036d0:	20000aac 	.word	0x20000aac
 80036d4:	42200000 	.word	0x42200000
 80036d8:	c2200000 	.word	0xc2200000
 80036dc:	42480000 	.word	0x42480000
 80036e0:	20000fe0 	.word	0x20000fe0
 80036e4:	42c80000 	.word	0x42c80000
 80036e8:	20000abc 	.word	0x20000abc
 80036ec:	20000224 	.word	0x20000224
 80036f0:	20000a44 	.word	0x20000a44
 80036f4:	20000ab0 	.word	0x20000ab0
 80036f8:	66666667 	.word	0x66666667
 80036fc:	cccccccd 	.word	0xcccccccd
 8003700:	200009ac 	.word	0x200009ac

	//Get Place Tray 2nd Point
	case 4:
		if (GetPositionButton.flag == 1)
 8003704:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <JoystickLocationState+0x8b4>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b01      	cmp	r3, #1
 800370a:	f040 82eb 	bne.w	8003ce4 <JoystickLocationState+0xe54>
		{
			if(registerFrame[68].U16 >= 30000)
 800370e:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <JoystickLocationState+0x8b8>)
 8003710:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003714:	f247 522f 	movw	r2, #29999	; 0x752f
 8003718:	4293      	cmp	r3, r2
 800371a:	d91b      	bls.n	8003754 <JoystickLocationState+0x8c4>
			{
				PlaceTray.L2[0] = (registerFrame[68].U16-65536)/10;
 800371c:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <JoystickLocationState+0x8b8>)
 800371e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003722:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003726:	4a09      	ldr	r2, [pc, #36]	; (800374c <JoystickLocationState+0x8bc>)
 8003728:	fb82 1203 	smull	r1, r2, r2, r3
 800372c:	1092      	asrs	r2, r2, #2
 800372e:	17db      	asrs	r3, r3, #31
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <JoystickLocationState+0x8c0>)
 800373c:	edc3 7a02 	vstr	s15, [r3, #8]
 8003740:	e017      	b.n	8003772 <JoystickLocationState+0x8e2>
 8003742:	bf00      	nop
 8003744:	20000ab0 	.word	0x20000ab0
 8003748:	20000fe0 	.word	0x20000fe0
 800374c:	66666667 	.word	0x66666667
 8003750:	20000a44 	.word	0x20000a44
			}
			else
			{
				PlaceTray.L2[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8003754:	4bd6      	ldr	r3, [pc, #856]	; (8003ab0 <JoystickLocationState+0xc20>)
 8003756:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800375a:	4ad6      	ldr	r2, [pc, #856]	; (8003ab4 <JoystickLocationState+0xc24>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	08db      	lsrs	r3, r3, #3
 8003762:	b29b      	uxth	r3, r3
 8003764:	ee07 3a90 	vmov	s15, r3
 8003768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800376c:	4bd2      	ldr	r3, [pc, #840]	; (8003ab8 <JoystickLocationState+0xc28>)
 800376e:	edc3 7a02 	vstr	s15, [r3, #8]
			}
			PlaceTray.L2[1] = position*0.045; //Place Tray Y Position 2 //mm
 8003772:	4bd2      	ldr	r3, [pc, #840]	; (8003abc <JoystickLocationState+0xc2c>)
 8003774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003778:	4618      	mov	r0, r3
 800377a:	f7fc fedb 	bl	8000534 <__aeabi_i2d>
 800377e:	a3ca      	add	r3, pc, #808	; (adr r3, 8003aa8 <JoystickLocationState+0xc18>)
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003784:	f7fc ff40 	bl	8000608 <__aeabi_dmul>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4610      	mov	r0, r2
 800378e:	4619      	mov	r1, r3
 8003790:	f7fd fa32 	bl	8000bf8 <__aeabi_d2f>
 8003794:	4603      	mov	r3, r0
 8003796:	4ac8      	ldr	r2, [pc, #800]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003798:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 800379a:	4bc9      	ldr	r3, [pc, #804]	; (8003ac0 <JoystickLocationState+0xc30>)
 800379c:	2200      	movs	r2, #0
 800379e:	609a      	str	r2, [r3, #8]

			cos_Theta = (PlaceTray.L2[0]-PlaceTray.L1[0])/sqrtf(((PlaceTray.L2[0]-PlaceTray.L1[0])*(PlaceTray.L2[0]-PlaceTray.L1[0]))+((PlaceTray.L2[1]-PlaceTray.L1[1])*(PlaceTray.L2[1]-PlaceTray.L1[1])));
 80037a0:	4bc5      	ldr	r3, [pc, #788]	; (8003ab8 <JoystickLocationState+0xc28>)
 80037a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80037a6:	4bc4      	ldr	r3, [pc, #784]	; (8003ab8 <JoystickLocationState+0xc28>)
 80037a8:	edd3 7a00 	vldr	s15, [r3]
 80037ac:	ee37 8a67 	vsub.f32	s16, s14, s15
 80037b0:	4bc1      	ldr	r3, [pc, #772]	; (8003ab8 <JoystickLocationState+0xc28>)
 80037b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80037b6:	4bc0      	ldr	r3, [pc, #768]	; (8003ab8 <JoystickLocationState+0xc28>)
 80037b8:	edd3 7a00 	vldr	s15, [r3]
 80037bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037c0:	4bbd      	ldr	r3, [pc, #756]	; (8003ab8 <JoystickLocationState+0xc28>)
 80037c2:	edd3 6a02 	vldr	s13, [r3, #8]
 80037c6:	4bbc      	ldr	r3, [pc, #752]	; (8003ab8 <JoystickLocationState+0xc28>)
 80037c8:	edd3 7a00 	vldr	s15, [r3]
 80037cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80037d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037d4:	4bb8      	ldr	r3, [pc, #736]	; (8003ab8 <JoystickLocationState+0xc28>)
 80037d6:	edd3 6a03 	vldr	s13, [r3, #12]
 80037da:	4bb7      	ldr	r3, [pc, #732]	; (8003ab8 <JoystickLocationState+0xc28>)
 80037dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80037e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80037e4:	4bb4      	ldr	r3, [pc, #720]	; (8003ab8 <JoystickLocationState+0xc28>)
 80037e6:	ed93 6a03 	vldr	s12, [r3, #12]
 80037ea:	4bb3      	ldr	r3, [pc, #716]	; (8003ab8 <JoystickLocationState+0xc28>)
 80037ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80037f0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80037f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003800:	f00d fbc6 	bl	8010f90 <sqrtf>
 8003804:	eeb0 7a40 	vmov.f32	s14, s0
 8003808:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800380c:	4bad      	ldr	r3, [pc, #692]	; (8003ac4 <JoystickLocationState+0xc34>)
 800380e:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PlaceTray.L2[1]-PlaceTray.L1[1])/sqrtf(((PlaceTray.L2[0]-PlaceTray.L1[0])*(PlaceTray.L2[0]-PlaceTray.L1[0]))+((PlaceTray.L2[1]-PlaceTray.L1[1])*(PlaceTray.L2[1]-PlaceTray.L1[1])));
 8003812:	4ba9      	ldr	r3, [pc, #676]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003814:	ed93 7a03 	vldr	s14, [r3, #12]
 8003818:	4ba7      	ldr	r3, [pc, #668]	; (8003ab8 <JoystickLocationState+0xc28>)
 800381a:	edd3 7a01 	vldr	s15, [r3, #4]
 800381e:	ee37 8a67 	vsub.f32	s16, s14, s15
 8003822:	4ba5      	ldr	r3, [pc, #660]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003824:	ed93 7a02 	vldr	s14, [r3, #8]
 8003828:	4ba3      	ldr	r3, [pc, #652]	; (8003ab8 <JoystickLocationState+0xc28>)
 800382a:	edd3 7a00 	vldr	s15, [r3]
 800382e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003832:	4ba1      	ldr	r3, [pc, #644]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003834:	edd3 6a02 	vldr	s13, [r3, #8]
 8003838:	4b9f      	ldr	r3, [pc, #636]	; (8003ab8 <JoystickLocationState+0xc28>)
 800383a:	edd3 7a00 	vldr	s15, [r3]
 800383e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003842:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003846:	4b9c      	ldr	r3, [pc, #624]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003848:	edd3 6a03 	vldr	s13, [r3, #12]
 800384c:	4b9a      	ldr	r3, [pc, #616]	; (8003ab8 <JoystickLocationState+0xc28>)
 800384e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003852:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003856:	4b98      	ldr	r3, [pc, #608]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003858:	ed93 6a03 	vldr	s12, [r3, #12]
 800385c:	4b96      	ldr	r3, [pc, #600]	; (8003ab8 <JoystickLocationState+0xc28>)
 800385e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003862:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800386a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800386e:	eeb0 0a67 	vmov.f32	s0, s15
 8003872:	f00d fb8d 	bl	8010f90 <sqrtf>
 8003876:	eeb0 7a40 	vmov.f32	s14, s0
 800387a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800387e:	4b92      	ldr	r3, [pc, #584]	; (8003ac8 <JoystickLocationState+0xc38>)
 8003880:	edc3 7a00 	vstr	s15, [r3]

			PlaceTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8003884:	4b8f      	ldr	r3, [pc, #572]	; (8003ac4 <JoystickLocationState+0xc34>)
 8003886:	edd3 7a00 	vldr	s15, [r3]
 800388a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800388e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003892:	4b8d      	ldr	r3, [pc, #564]	; (8003ac8 <JoystickLocationState+0xc38>)
 8003894:	edd3 7a00 	vldr	s15, [r3]
 8003898:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800389c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80038a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038a4:	4b84      	ldr	r3, [pc, #528]	; (8003ab8 <JoystickLocationState+0xc28>)
 80038a6:	edd3 7a00 	vldr	s15, [r3]
 80038aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ae:	4b82      	ldr	r3, [pc, #520]	; (8003ab8 <JoystickLocationState+0xc28>)
 80038b0:	edc3 7a04 	vstr	s15, [r3, #16]
			PlaceTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PlaceTray.L1[1];
 80038b4:	4b84      	ldr	r3, [pc, #528]	; (8003ac8 <JoystickLocationState+0xc38>)
 80038b6:	edd3 7a00 	vldr	s15, [r3]
 80038ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80038be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038c2:	4b80      	ldr	r3, [pc, #512]	; (8003ac4 <JoystickLocationState+0xc34>)
 80038c4:	edd3 7a00 	vldr	s15, [r3]
 80038c8:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80038cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80038d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038d4:	4b78      	ldr	r3, [pc, #480]	; (8003ab8 <JoystickLocationState+0xc28>)
 80038d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80038da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038de:	4b76      	ldr	r3, [pc, #472]	; (8003ab8 <JoystickLocationState+0xc28>)
 80038e0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PlaceTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PlaceTray.L1[0];
 80038e4:	4b77      	ldr	r3, [pc, #476]	; (8003ac4 <JoystickLocationState+0xc34>)
 80038e6:	edd3 7a00 	vldr	s15, [r3]
 80038ea:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80038ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038f2:	4b75      	ldr	r3, [pc, #468]	; (8003ac8 <JoystickLocationState+0xc38>)
 80038f4:	edd3 7a00 	vldr	s15, [r3]
 80038f8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80038fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003904:	4b6c      	ldr	r3, [pc, #432]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003906:	edd3 7a00 	vldr	s15, [r3]
 800390a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800390e:	4b6a      	ldr	r3, [pc, #424]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003910:	edc3 7a05 	vstr	s15, [r3, #20]
			PlaceTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PlaceTray.L1[1];
 8003914:	4b6c      	ldr	r3, [pc, #432]	; (8003ac8 <JoystickLocationState+0xc38>)
 8003916:	edd3 7a00 	vldr	s15, [r3]
 800391a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800391e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003922:	4b68      	ldr	r3, [pc, #416]	; (8003ac4 <JoystickLocationState+0xc34>)
 8003924:	edd3 7a00 	vldr	s15, [r3]
 8003928:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 800392c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003934:	4b60      	ldr	r3, [pc, #384]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003936:	edd3 7a01 	vldr	s15, [r3, #4]
 800393a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800393e:	4b5e      	ldr	r3, [pc, #376]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003940:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PlaceTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8003944:	4b5f      	ldr	r3, [pc, #380]	; (8003ac4 <JoystickLocationState+0xc34>)
 8003946:	edd3 7a00 	vldr	s15, [r3]
 800394a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8003acc <JoystickLocationState+0xc3c>
 800394e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003952:	4b5d      	ldr	r3, [pc, #372]	; (8003ac8 <JoystickLocationState+0xc38>)
 8003954:	edd3 7a00 	vldr	s15, [r3]
 8003958:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800395c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003964:	4b54      	ldr	r3, [pc, #336]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003966:	edd3 7a00 	vldr	s15, [r3]
 800396a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800396e:	4b52      	ldr	r3, [pc, #328]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003970:	edc3 7a06 	vstr	s15, [r3, #24]
			PlaceTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PlaceTray.L1[1];
 8003974:	4b54      	ldr	r3, [pc, #336]	; (8003ac8 <JoystickLocationState+0xc38>)
 8003976:	edd3 7a00 	vldr	s15, [r3]
 800397a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003acc <JoystickLocationState+0xc3c>
 800397e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003982:	4b50      	ldr	r3, [pc, #320]	; (8003ac4 <JoystickLocationState+0xc34>)
 8003984:	edd3 7a00 	vldr	s15, [r3]
 8003988:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 800398c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003990:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003994:	4b48      	ldr	r3, [pc, #288]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003996:	edd3 7a01 	vldr	s15, [r3, #4]
 800399a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800399e:	4b46      	ldr	r3, [pc, #280]	; (8003ab8 <JoystickLocationState+0xc28>)
 80039a0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PlaceTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PlaceTray.L1[0];
 80039a4:	4b47      	ldr	r3, [pc, #284]	; (8003ac4 <JoystickLocationState+0xc34>)
 80039a6:	edd3 7a00 	vldr	s15, [r3]
 80039aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80039ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039b2:	4b45      	ldr	r3, [pc, #276]	; (8003ac8 <JoystickLocationState+0xc38>)
 80039b4:	edd3 7a00 	vldr	s15, [r3]
 80039b8:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80039bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80039c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039c4:	4b3c      	ldr	r3, [pc, #240]	; (8003ab8 <JoystickLocationState+0xc28>)
 80039c6:	edd3 7a00 	vldr	s15, [r3]
 80039ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ce:	4b3a      	ldr	r3, [pc, #232]	; (8003ab8 <JoystickLocationState+0xc28>)
 80039d0:	edc3 7a07 	vstr	s15, [r3, #28]
			PlaceTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PlaceTray.L1[1];
 80039d4:	4b3c      	ldr	r3, [pc, #240]	; (8003ac8 <JoystickLocationState+0xc38>)
 80039d6:	edd3 7a00 	vldr	s15, [r3]
 80039da:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80039de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039e2:	4b38      	ldr	r3, [pc, #224]	; (8003ac4 <JoystickLocationState+0xc34>)
 80039e4:	edd3 7a00 	vldr	s15, [r3]
 80039e8:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 80039ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80039f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039f4:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <JoystickLocationState+0xc28>)
 80039f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80039fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039fe:	4b2e      	ldr	r3, [pc, #184]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003a00:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PlaceTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PlaceTray.L1[0];
 8003a04:	4b2f      	ldr	r3, [pc, #188]	; (8003ac4 <JoystickLocationState+0xc34>)
 8003a06:	edd3 7a00 	vldr	s15, [r3]
 8003a0a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003a0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a12:	4b2d      	ldr	r3, [pc, #180]	; (8003ac8 <JoystickLocationState+0xc38>)
 8003a14:	edd3 7a00 	vldr	s15, [r3]
 8003a18:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003a1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a24:	4b24      	ldr	r3, [pc, #144]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003a26:	edd3 7a00 	vldr	s15, [r3]
 8003a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a2e:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003a30:	edc3 7a08 	vstr	s15, [r3, #32]
			PlaceTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PlaceTray.L1[1];
 8003a34:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <JoystickLocationState+0xc38>)
 8003a36:	edd3 7a00 	vldr	s15, [r3]
 8003a3a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003a3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a42:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <JoystickLocationState+0xc34>)
 8003a44:	edd3 7a00 	vldr	s15, [r3]
 8003a48:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8003a4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a54:	4b18      	ldr	r3, [pc, #96]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003a56:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a5e:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003a60:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PlaceTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PlaceTray.L1[0];
 8003a64:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <JoystickLocationState+0xc34>)
 8003a66:	edd3 7a00 	vldr	s15, [r3]
 8003a6a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003acc <JoystickLocationState+0xc3c>
 8003a6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <JoystickLocationState+0xc38>)
 8003a74:	edd3 7a00 	vldr	s15, [r3]
 8003a78:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003a7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003a86:	edd3 7a00 	vldr	s15, [r3]
 8003a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <JoystickLocationState+0xc28>)
 8003a90:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PlaceTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PlaceTray.L1[1];
 8003a94:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <JoystickLocationState+0xc38>)
 8003a96:	edd3 7a00 	vldr	s15, [r3]
 8003a9a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003acc <JoystickLocationState+0xc3c>
 8003a9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003aa2:	e015      	b.n	8003ad0 <JoystickLocationState+0xc40>
 8003aa4:	f3af 8000 	nop.w
 8003aa8:	70a3d70a 	.word	0x70a3d70a
 8003aac:	3fa70a3d 	.word	0x3fa70a3d
 8003ab0:	20000fe0 	.word	0x20000fe0
 8003ab4:	cccccccd 	.word	0xcccccccd
 8003ab8:	20000a44 	.word	0x20000a44
 8003abc:	200009ac 	.word	0x200009ac
 8003ac0:	20000ab0 	.word	0x20000ab0
 8003ac4:	20000aa8 	.word	0x20000aa8
 8003ac8:	20000aac 	.word	0x20000aac
 8003acc:	42480000 	.word	0x42480000
 8003ad0:	4ba9      	ldr	r3, [pc, #676]	; (8003d78 <JoystickLocationState+0xee8>)
 8003ad2:	edd3 7a00 	vldr	s15, [r3]
 8003ad6:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8003ada:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003ade:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ae2:	4ba6      	ldr	r3, [pc, #664]	; (8003d7c <JoystickLocationState+0xeec>)
 8003ae4:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aec:	4ba3      	ldr	r3, [pc, #652]	; (8003d7c <JoystickLocationState+0xeec>)
 8003aee:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PlaceTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003af2:	4ba1      	ldr	r3, [pc, #644]	; (8003d78 <JoystickLocationState+0xee8>)
 8003af4:	edd3 7a00 	vldr	s15, [r3]
 8003af8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003afc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b00:	4b9f      	ldr	r3, [pc, #636]	; (8003d80 <JoystickLocationState+0xef0>)
 8003b02:	edd3 7a00 	vldr	s15, [r3]
 8003b06:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8003d84 <JoystickLocationState+0xef4>
 8003b0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b12:	4b9a      	ldr	r3, [pc, #616]	; (8003d7c <JoystickLocationState+0xeec>)
 8003b14:	edd3 7a00 	vldr	s15, [r3]
 8003b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b1c:	4b97      	ldr	r3, [pc, #604]	; (8003d7c <JoystickLocationState+0xeec>)
 8003b1e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PlaceTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003b22:	4b97      	ldr	r3, [pc, #604]	; (8003d80 <JoystickLocationState+0xef0>)
 8003b24:	edd3 7a00 	vldr	s15, [r3]
 8003b28:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b30:	4b91      	ldr	r3, [pc, #580]	; (8003d78 <JoystickLocationState+0xee8>)
 8003b32:	edd3 7a00 	vldr	s15, [r3]
 8003b36:	eddf 6a94 	vldr	s13, [pc, #592]	; 8003d88 <JoystickLocationState+0xef8>
 8003b3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b42:	4b8e      	ldr	r3, [pc, #568]	; (8003d7c <JoystickLocationState+0xeec>)
 8003b44:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b4c:	4b8b      	ldr	r3, [pc, #556]	; (8003d7c <JoystickLocationState+0xeec>)
 8003b4e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PlaceTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003b52:	4b89      	ldr	r3, [pc, #548]	; (8003d78 <JoystickLocationState+0xee8>)
 8003b54:	edd3 7a00 	vldr	s15, [r3]
 8003b58:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003b5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b60:	4b87      	ldr	r3, [pc, #540]	; (8003d80 <JoystickLocationState+0xef0>)
 8003b62:	edd3 7a00 	vldr	s15, [r3]
 8003b66:	eddf 6a87 	vldr	s13, [pc, #540]	; 8003d84 <JoystickLocationState+0xef4>
 8003b6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b72:	4b82      	ldr	r3, [pc, #520]	; (8003d7c <JoystickLocationState+0xeec>)
 8003b74:	edd3 7a00 	vldr	s15, [r3]
 8003b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b7c:	4b7f      	ldr	r3, [pc, #508]	; (8003d7c <JoystickLocationState+0xeec>)
 8003b7e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PlaceTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003b82:	4b7f      	ldr	r3, [pc, #508]	; (8003d80 <JoystickLocationState+0xef0>)
 8003b84:	edd3 7a00 	vldr	s15, [r3]
 8003b88:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003b8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b90:	4b79      	ldr	r3, [pc, #484]	; (8003d78 <JoystickLocationState+0xee8>)
 8003b92:	edd3 7a00 	vldr	s15, [r3]
 8003b96:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8003d88 <JoystickLocationState+0xef8>
 8003b9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ba2:	4b76      	ldr	r3, [pc, #472]	; (8003d7c <JoystickLocationState+0xeec>)
 8003ba4:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bac:	4b73      	ldr	r3, [pc, #460]	; (8003d7c <JoystickLocationState+0xeec>)
 8003bae:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PlaceTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003bb2:	4b71      	ldr	r3, [pc, #452]	; (8003d78 <JoystickLocationState+0xee8>)
 8003bb4:	edd3 7a00 	vldr	s15, [r3]
 8003bb8:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8003d8c <JoystickLocationState+0xefc>
 8003bbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bc0:	4b6f      	ldr	r3, [pc, #444]	; (8003d80 <JoystickLocationState+0xef0>)
 8003bc2:	edd3 7a00 	vldr	s15, [r3]
 8003bc6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d84 <JoystickLocationState+0xef4>
 8003bca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003bce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bd2:	4b6a      	ldr	r3, [pc, #424]	; (8003d7c <JoystickLocationState+0xeec>)
 8003bd4:	edd3 7a00 	vldr	s15, [r3]
 8003bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bdc:	4b67      	ldr	r3, [pc, #412]	; (8003d7c <JoystickLocationState+0xeec>)
 8003bde:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PlaceTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003be2:	4b67      	ldr	r3, [pc, #412]	; (8003d80 <JoystickLocationState+0xef0>)
 8003be4:	edd3 7a00 	vldr	s15, [r3]
 8003be8:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003d8c <JoystickLocationState+0xefc>
 8003bec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bf0:	4b61      	ldr	r3, [pc, #388]	; (8003d78 <JoystickLocationState+0xee8>)
 8003bf2:	edd3 7a00 	vldr	s15, [r3]
 8003bf6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003d88 <JoystickLocationState+0xef8>
 8003bfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003bfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c02:	4b5e      	ldr	r3, [pc, #376]	; (8003d7c <JoystickLocationState+0xeec>)
 8003c04:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c0c:	4b5b      	ldr	r3, [pc, #364]	; (8003d7c <JoystickLocationState+0xeec>)
 8003c0e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PlaceTray.origin_x = PlaceTray.L1[0]+(50*sin_Theta);
 8003c12:	4b5a      	ldr	r3, [pc, #360]	; (8003d7c <JoystickLocationState+0xeec>)
 8003c14:	ed93 7a00 	vldr	s14, [r3]
 8003c18:	4b59      	ldr	r3, [pc, #356]	; (8003d80 <JoystickLocationState+0xef0>)
 8003c1a:	edd3 7a00 	vldr	s15, [r3]
 8003c1e:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8003d8c <JoystickLocationState+0xefc>
 8003c22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c2a:	4b54      	ldr	r3, [pc, #336]	; (8003d7c <JoystickLocationState+0xeec>)
 8003c2c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			PlaceTray.origin_y = PlaceTray.L1[1]-(50*cos_Theta);
 8003c30:	4b52      	ldr	r3, [pc, #328]	; (8003d7c <JoystickLocationState+0xeec>)
 8003c32:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c36:	4b50      	ldr	r3, [pc, #320]	; (8003d78 <JoystickLocationState+0xee8>)
 8003c38:	edd3 7a00 	vldr	s15, [r3]
 8003c3c:	eddf 6a53 	vldr	s13, [pc, #332]	; 8003d8c <JoystickLocationState+0xefc>
 8003c40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c48:	4b4c      	ldr	r3, [pc, #304]	; (8003d7c <JoystickLocationState+0xeec>)
 8003c4a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			PlaceTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 8003c4e:	4b4a      	ldr	r3, [pc, #296]	; (8003d78 <JoystickLocationState+0xee8>)
 8003c50:	edd3 7a00 	vldr	s15, [r3]
 8003c54:	eeb0 0a67 	vmov.f32	s0, s15
 8003c58:	f00d f96e 	bl	8010f38 <acosf>
 8003c5c:	ee10 3a10 	vmov	r3, s0
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fc fc79 	bl	8000558 <__aeabi_f2d>
 8003c66:	a342      	add	r3, pc, #264	; (adr r3, 8003d70 <JoystickLocationState+0xee0>)
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	f7fc fccc 	bl	8000608 <__aeabi_dmul>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4610      	mov	r0, r2
 8003c76:	4619      	mov	r1, r3
 8003c78:	f7fc ffbe 	bl	8000bf8 <__aeabi_d2f>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	4a3f      	ldr	r2, [pc, #252]	; (8003d7c <JoystickLocationState+0xeec>)
 8003c80:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[35].U16 = PlaceTray.origin_x * 10;
 8003c82:	4b3e      	ldr	r3, [pc, #248]	; (8003d7c <JoystickLocationState+0xeec>)
 8003c84:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003c88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c94:	ee17 3a90 	vmov	r3, s15
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	4b3d      	ldr	r3, [pc, #244]	; (8003d90 <JoystickLocationState+0xf00>)
 8003c9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[36].U16 = PlaceTray.origin_y * 10;
 8003ca0:	4b36      	ldr	r3, [pc, #216]	; (8003d7c <JoystickLocationState+0xeec>)
 8003ca2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003ca6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cb2:	ee17 3a90 	vmov	r3, s15
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	4b35      	ldr	r3, [pc, #212]	; (8003d90 <JoystickLocationState+0xf00>)
 8003cba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[37].U16 = PlaceTray.orientation * 100;
 8003cbe:	4b2f      	ldr	r3, [pc, #188]	; (8003d7c <JoystickLocationState+0xeec>)
 8003cc0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003cc4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003d94 <JoystickLocationState+0xf04>
 8003cc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cd0:	ee17 3a90 	vmov	r3, s15
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	4b2e      	ldr	r3, [pc, #184]	; (8003d90 <JoystickLocationState+0xf00>)
 8003cd8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			registerFrame[16].U16 = 0;
 8003cdc:	4b2c      	ldr	r3, [pc, #176]	; (8003d90 <JoystickLocationState+0xf00>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8003ce2:	e03d      	b.n	8003d60 <JoystickLocationState+0xed0>
		else if (ResetButton.flag == 1)
 8003ce4:	4b2c      	ldr	r3, [pc, #176]	; (8003d98 <JoystickLocationState+0xf08>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d139      	bne.n	8003d60 <JoystickLocationState+0xed0>
			ResetButton.flag = 0;
 8003cec:	4b2a      	ldr	r3, [pc, #168]	; (8003d98 <JoystickLocationState+0xf08>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	609a      	str	r2, [r3, #8]
			state = 1;
 8003cf2:	4b2a      	ldr	r3, [pc, #168]	; (8003d9c <JoystickLocationState+0xf0c>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]
		break;
 8003cf8:	e032      	b.n	8003d60 <JoystickLocationState+0xed0>
	case 5:
		EndEffectorState = 2;		//TestModeOff
 8003cfa:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <JoystickLocationState+0xf10>)
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 0;	//End Effector Status: Laser Off
 8003d00:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <JoystickLocationState+0xf00>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8003d06:	4b27      	ldr	r3, [pc, #156]	; (8003da4 <JoystickLocationState+0xf14>)
 8003d08:	2201      	movs	r2, #1
 8003d0a:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 8003d0c:	f7fe fc94 	bl	8002638 <EndEffectorWrite>

		HAL_Delay(100);
 8003d10:	2064      	movs	r0, #100	; 0x64
 8003d12:	f001 fa83 	bl	800521c <HAL_Delay>

		EndEffectorState = 3;		//RunModeOn
 8003d16:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <JoystickLocationState+0xf10>)
 8003d18:	2203      	movs	r2, #3
 8003d1a:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 2;	//End Effector Status: Gripper Power
 8003d1c:	4b1c      	ldr	r3, [pc, #112]	; (8003d90 <JoystickLocationState+0xf00>)
 8003d1e:	2202      	movs	r2, #2
 8003d20:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <JoystickLocationState+0xf14>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 8003d28:	f7fe fc86 	bl	8002638 <EndEffectorWrite>

		HAL_Delay(100);
 8003d2c:	2064      	movs	r0, #100	; 0x64
 8003d2e:	f001 fa75 	bl	800521c <HAL_Delay>

		state = 1;
 8003d32:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <JoystickLocationState+0xf0c>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
		scheduler = 1;				//Go Pick
 8003d38:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <JoystickLocationState+0xf18>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
		if (ResetButton.flag == 1)
 8003d3e:	4b16      	ldr	r3, [pc, #88]	; (8003d98 <JoystickLocationState+0xf08>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d10e      	bne.n	8003d64 <JoystickLocationState+0xed4>
		{
			ResetButton.flag = 0;
 8003d46:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <JoystickLocationState+0xf08>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	609a      	str	r2, [r3, #8]
			state = 1;
 8003d4c:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <JoystickLocationState+0xf0c>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
		}
		break;
 8003d52:	e007      	b.n	8003d64 <JoystickLocationState+0xed4>
		break;
 8003d54:	bf00      	nop
 8003d56:	e006      	b.n	8003d66 <JoystickLocationState+0xed6>
		break;
 8003d58:	bf00      	nop
 8003d5a:	e004      	b.n	8003d66 <JoystickLocationState+0xed6>
		break;
 8003d5c:	bf00      	nop
 8003d5e:	e002      	b.n	8003d66 <JoystickLocationState+0xed6>
		break;
 8003d60:	bf00      	nop
 8003d62:	e000      	b.n	8003d66 <JoystickLocationState+0xed6>
		break;
 8003d64:	bf00      	nop
	}
}
 8003d66:	bf00      	nop
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	ecbd 8b02 	vpop	{d8}
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	1a63c1f8 	.word	0x1a63c1f8
 8003d74:	404ca5dc 	.word	0x404ca5dc
 8003d78:	20000aa8 	.word	0x20000aa8
 8003d7c:	20000a44 	.word	0x20000a44
 8003d80:	20000aac 	.word	0x20000aac
 8003d84:	42200000 	.word	0x42200000
 8003d88:	c2200000 	.word	0xc2200000
 8003d8c:	42480000 	.word	0x42480000
 8003d90:	20000fe0 	.word	0x20000fe0
 8003d94:	42c80000 	.word	0x42c80000
 8003d98:	20000abc 	.word	0x20000abc
 8003d9c:	20000224 	.word	0x20000224
 8003da0:	20000b00 	.word	0x20000b00
 8003da4:	20000af8 	.word	0x20000af8
 8003da8:	20000200 	.word	0x20000200

08003dac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	if(htim == &htim9) //check call back from timer9
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a06      	ldr	r2, [pc, #24]	; (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d105      	bne.n	8003dc8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		if(scheduler == 3)
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d101      	bne.n	8003dc8 <HAL_TIM_PeriodElapsedCallback+0x1c>
		{
			TrajectoryGenerator();
 8003dc4:	f000 f808 	bl	8003dd8 <TrajectoryGenerator>
//			if (hi2c1.State == HAL_I2C_STATE_READY) {
//				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
//			}
//		}
//	}
}
 8003dc8:	bf00      	nop
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	200006b4 	.word	0x200006b4
 8003dd4:	20000200 	.word	0x20000200

08003dd8 <TrajectoryGenerator>:

void TrajectoryGenerator()
{
 8003dd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ddc:	af00      	add	r7, sp, #0
	switch(Trajectstate)
 8003dde:	4b93      	ldr	r3, [pc, #588]	; (800402c <TrajectoryGenerator+0x254>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	f200 8519 	bhi.w	800481a <TrajectoryGenerator+0xa42>
 8003de8:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <TrajectoryGenerator+0x18>)
 8003dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dee:	bf00      	nop
 8003df0:	08003e01 	.word	0x08003e01
 8003df4:	08004075 	.word	0x08004075
 8003df8:	080043b5 	.word	0x080043b5
 8003dfc:	08004819 	.word	0x08004819
	{
	case 0: //initial Condition & Case Check
			qi = position;
 8003e00:	4b8b      	ldr	r3, [pc, #556]	; (8004030 <TrajectoryGenerator+0x258>)
 8003e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e0e:	4b89      	ldr	r3, [pc, #548]	; (8004034 <TrajectoryGenerator+0x25c>)
 8003e10:	edc3 7a00 	vstr	s15, [r3]
			qdi = 0;
 8003e14:	4b88      	ldr	r3, [pc, #544]	; (8004038 <TrajectoryGenerator+0x260>)
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
			qd_max = 22222;  //1000 pulse/s
 8003e1c:	4b87      	ldr	r3, [pc, #540]	; (800403c <TrajectoryGenerator+0x264>)
 8003e1e:	4a88      	ldr	r2, [pc, #544]	; (8004040 <TrajectoryGenerator+0x268>)
 8003e20:	601a      	str	r2, [r3, #0]
			qdd_max = 55555; //2000 pulse/s^2 /0.045
 8003e22:	4b88      	ldr	r3, [pc, #544]	; (8004044 <TrajectoryGenerator+0x26c>)
 8003e24:	4a88      	ldr	r2, [pc, #544]	; (8004048 <TrajectoryGenerator+0x270>)
 8003e26:	601a      	str	r2, [r3, #0]

		  if(qf > qi)
 8003e28:	4b88      	ldr	r3, [pc, #544]	; (800404c <TrajectoryGenerator+0x274>)
 8003e2a:	ed93 7a00 	vldr	s14, [r3]
 8003e2e:	4b81      	ldr	r3, [pc, #516]	; (8004034 <TrajectoryGenerator+0x25c>)
 8003e30:	edd3 7a00 	vldr	s15, [r3]
 8003e34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3c:	dd16      	ble.n	8003e6c <TrajectoryGenerator+0x94>
		  {
			  t_half = sqrtf((qf-qi)/qdd_max);
 8003e3e:	4b83      	ldr	r3, [pc, #524]	; (800404c <TrajectoryGenerator+0x274>)
 8003e40:	ed93 7a00 	vldr	s14, [r3]
 8003e44:	4b7b      	ldr	r3, [pc, #492]	; (8004034 <TrajectoryGenerator+0x25c>)
 8003e46:	edd3 7a00 	vldr	s15, [r3]
 8003e4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e4e:	4b7d      	ldr	r3, [pc, #500]	; (8004044 <TrajectoryGenerator+0x26c>)
 8003e50:	edd3 7a00 	vldr	s15, [r3]
 8003e54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e58:	eeb0 0a66 	vmov.f32	s0, s13
 8003e5c:	f00d f898 	bl	8010f90 <sqrtf>
 8003e60:	eef0 7a40 	vmov.f32	s15, s0
 8003e64:	4b7a      	ldr	r3, [pc, #488]	; (8004050 <TrajectoryGenerator+0x278>)
 8003e66:	edc3 7a00 	vstr	s15, [r3]
 8003e6a:	e022      	b.n	8003eb2 <TrajectoryGenerator+0xda>
		  }
		  else if(qf < qi)
 8003e6c:	4b77      	ldr	r3, [pc, #476]	; (800404c <TrajectoryGenerator+0x274>)
 8003e6e:	ed93 7a00 	vldr	s14, [r3]
 8003e72:	4b70      	ldr	r3, [pc, #448]	; (8004034 <TrajectoryGenerator+0x25c>)
 8003e74:	edd3 7a00 	vldr	s15, [r3]
 8003e78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e80:	d517      	bpl.n	8003eb2 <TrajectoryGenerator+0xda>
		  {
			  t_half = sqrtf(-1*(qf-qi)/qdd_max);
 8003e82:	4b72      	ldr	r3, [pc, #456]	; (800404c <TrajectoryGenerator+0x274>)
 8003e84:	ed93 7a00 	vldr	s14, [r3]
 8003e88:	4b6a      	ldr	r3, [pc, #424]	; (8004034 <TrajectoryGenerator+0x25c>)
 8003e8a:	edd3 7a00 	vldr	s15, [r3]
 8003e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e92:	eeb1 7a67 	vneg.f32	s14, s15
 8003e96:	4b6b      	ldr	r3, [pc, #428]	; (8004044 <TrajectoryGenerator+0x26c>)
 8003e98:	edd3 7a00 	vldr	s15, [r3]
 8003e9c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003ea0:	eeb0 0a66 	vmov.f32	s0, s13
 8003ea4:	f00d f874 	bl	8010f90 <sqrtf>
 8003ea8:	eef0 7a40 	vmov.f32	s15, s0
 8003eac:	4b68      	ldr	r3, [pc, #416]	; (8004050 <TrajectoryGenerator+0x278>)
 8003eae:	edc3 7a00 	vstr	s15, [r3]
		  }

		  if(qf-qi < 0)
 8003eb2:	4b66      	ldr	r3, [pc, #408]	; (800404c <TrajectoryGenerator+0x274>)
 8003eb4:	ed93 7a00 	vldr	s14, [r3]
 8003eb8:	4b5e      	ldr	r3, [pc, #376]	; (8004034 <TrajectoryGenerator+0x25c>)
 8003eba:	edd3 7a00 	vldr	s15, [r3]
 8003ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ec2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eca:	d50f      	bpl.n	8003eec <TrajectoryGenerator+0x114>
		  {
			  qd_max = -1*qd_max;
 8003ecc:	4b5b      	ldr	r3, [pc, #364]	; (800403c <TrajectoryGenerator+0x264>)
 8003ece:	edd3 7a00 	vldr	s15, [r3]
 8003ed2:	eef1 7a67 	vneg.f32	s15, s15
 8003ed6:	4b59      	ldr	r3, [pc, #356]	; (800403c <TrajectoryGenerator+0x264>)
 8003ed8:	edc3 7a00 	vstr	s15, [r3]
			  qdd_max = -1*qdd_max;
 8003edc:	4b59      	ldr	r3, [pc, #356]	; (8004044 <TrajectoryGenerator+0x26c>)
 8003ede:	edd3 7a00 	vldr	s15, [r3]
 8003ee2:	eef1 7a67 	vneg.f32	s15, s15
 8003ee6:	4b57      	ldr	r3, [pc, #348]	; (8004044 <TrajectoryGenerator+0x26c>)
 8003ee8:	edc3 7a00 	vstr	s15, [r3]
		  }

		  tacc = (qd_max-qdi)/qdd_max;
 8003eec:	4b53      	ldr	r3, [pc, #332]	; (800403c <TrajectoryGenerator+0x264>)
 8003eee:	ed93 7a00 	vldr	s14, [r3]
 8003ef2:	4b51      	ldr	r3, [pc, #324]	; (8004038 <TrajectoryGenerator+0x260>)
 8003ef4:	edd3 7a00 	vldr	s15, [r3]
 8003ef8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003efc:	4b51      	ldr	r3, [pc, #324]	; (8004044 <TrajectoryGenerator+0x26c>)
 8003efe:	ed93 7a00 	vldr	s14, [r3]
 8003f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f06:	4b53      	ldr	r3, [pc, #332]	; (8004054 <TrajectoryGenerator+0x27c>)
 8003f08:	edc3 7a00 	vstr	s15, [r3]
		  qacc = qdi*tacc + 0.5*qdd_max*tacc*tacc;
 8003f0c:	4b4a      	ldr	r3, [pc, #296]	; (8004038 <TrajectoryGenerator+0x260>)
 8003f0e:	ed93 7a00 	vldr	s14, [r3]
 8003f12:	4b50      	ldr	r3, [pc, #320]	; (8004054 <TrajectoryGenerator+0x27c>)
 8003f14:	edd3 7a00 	vldr	s15, [r3]
 8003f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1c:	ee17 0a90 	vmov	r0, s15
 8003f20:	f7fc fb1a 	bl	8000558 <__aeabi_f2d>
 8003f24:	4604      	mov	r4, r0
 8003f26:	460d      	mov	r5, r1
 8003f28:	4b46      	ldr	r3, [pc, #280]	; (8004044 <TrajectoryGenerator+0x26c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fc fb13 	bl	8000558 <__aeabi_f2d>
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	4b48      	ldr	r3, [pc, #288]	; (8004058 <TrajectoryGenerator+0x280>)
 8003f38:	f7fc fb66 	bl	8000608 <__aeabi_dmul>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4690      	mov	r8, r2
 8003f42:	4699      	mov	r9, r3
 8003f44:	4b43      	ldr	r3, [pc, #268]	; (8004054 <TrajectoryGenerator+0x27c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fc fb05 	bl	8000558 <__aeabi_f2d>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4640      	mov	r0, r8
 8003f54:	4649      	mov	r1, r9
 8003f56:	f7fc fb57 	bl	8000608 <__aeabi_dmul>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4690      	mov	r8, r2
 8003f60:	4699      	mov	r9, r3
 8003f62:	4b3c      	ldr	r3, [pc, #240]	; (8004054 <TrajectoryGenerator+0x27c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fc faf6 	bl	8000558 <__aeabi_f2d>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4640      	mov	r0, r8
 8003f72:	4649      	mov	r1, r9
 8003f74:	f7fc fb48 	bl	8000608 <__aeabi_dmul>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	4629      	mov	r1, r5
 8003f80:	f7fc f98c 	bl	800029c <__adddf3>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	f7fc fe34 	bl	8000bf8 <__aeabi_d2f>
 8003f90:	4603      	mov	r3, r0
 8003f92:	4a32      	ldr	r2, [pc, #200]	; (800405c <TrajectoryGenerator+0x284>)
 8003f94:	6013      	str	r3, [r2, #0]
		  qdec = qacc;
 8003f96:	4b31      	ldr	r3, [pc, #196]	; (800405c <TrajectoryGenerator+0x284>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a31      	ldr	r2, [pc, #196]	; (8004060 <TrajectoryGenerator+0x288>)
 8003f9c:	6013      	str	r3, [r2, #0]
		  tconst = ((qf-qi)-qacc-qdec)/qd_max;
 8003f9e:	4b2b      	ldr	r3, [pc, #172]	; (800404c <TrajectoryGenerator+0x274>)
 8003fa0:	ed93 7a00 	vldr	s14, [r3]
 8003fa4:	4b23      	ldr	r3, [pc, #140]	; (8004034 <TrajectoryGenerator+0x25c>)
 8003fa6:	edd3 7a00 	vldr	s15, [r3]
 8003faa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fae:	4b2b      	ldr	r3, [pc, #172]	; (800405c <TrajectoryGenerator+0x284>)
 8003fb0:	edd3 7a00 	vldr	s15, [r3]
 8003fb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fb8:	4b29      	ldr	r3, [pc, #164]	; (8004060 <TrajectoryGenerator+0x288>)
 8003fba:	edd3 7a00 	vldr	s15, [r3]
 8003fbe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003fc2:	4b1e      	ldr	r3, [pc, #120]	; (800403c <TrajectoryGenerator+0x264>)
 8003fc4:	ed93 7a00 	vldr	s14, [r3]
 8003fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fcc:	4b25      	ldr	r3, [pc, #148]	; (8004064 <TrajectoryGenerator+0x28c>)
 8003fce:	edc3 7a00 	vstr	s15, [r3]
		  tdec = tacc;
 8003fd2:	4b20      	ldr	r3, [pc, #128]	; (8004054 <TrajectoryGenerator+0x27c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a24      	ldr	r2, [pc, #144]	; (8004068 <TrajectoryGenerator+0x290>)
 8003fd8:	6013      	str	r3, [r2, #0]

		  if(fabs(qdi+qdd_max*t_half) >= fabs(qd_max))
 8003fda:	4b1a      	ldr	r3, [pc, #104]	; (8004044 <TrajectoryGenerator+0x26c>)
 8003fdc:	ed93 7a00 	vldr	s14, [r3]
 8003fe0:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <TrajectoryGenerator+0x278>)
 8003fe2:	edd3 7a00 	vldr	s15, [r3]
 8003fe6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fea:	4b13      	ldr	r3, [pc, #76]	; (8004038 <TrajectoryGenerator+0x260>)
 8003fec:	edd3 7a00 	vldr	s15, [r3]
 8003ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ff4:	eeb0 7ae7 	vabs.f32	s14, s15
 8003ff8:	4b10      	ldr	r3, [pc, #64]	; (800403c <TrajectoryGenerator+0x264>)
 8003ffa:	edd3 7a00 	vldr	s15, [r3]
 8003ffe:	eef0 7ae7 	vabs.f32	s15, s15
 8004002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400a:	db07      	blt.n	800401c <TrajectoryGenerator+0x244>
		  {
			  initime = time;
 800400c:	4b17      	ldr	r3, [pc, #92]	; (800406c <TrajectoryGenerator+0x294>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a17      	ldr	r2, [pc, #92]	; (8004070 <TrajectoryGenerator+0x298>)
 8004012:	6013      	str	r3, [r2, #0]
			  Trajectstate = 2;
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <TrajectoryGenerator+0x254>)
 8004016:	2202      	movs	r2, #2
 8004018:	601a      	str	r2, [r3, #0]
		  else
		  {
			  initime = time;
			  Trajectstate = 1;
		  }
		  break;
 800401a:	e3fe      	b.n	800481a <TrajectoryGenerator+0xa42>
			  initime = time;
 800401c:	4b13      	ldr	r3, [pc, #76]	; (800406c <TrajectoryGenerator+0x294>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a13      	ldr	r2, [pc, #76]	; (8004070 <TrajectoryGenerator+0x298>)
 8004022:	6013      	str	r3, [r2, #0]
			  Trajectstate = 1;
 8004024:	4b01      	ldr	r3, [pc, #4]	; (800402c <TrajectoryGenerator+0x254>)
 8004026:	2201      	movs	r2, #1
 8004028:	601a      	str	r2, [r3, #0]
		  break;
 800402a:	e3f6      	b.n	800481a <TrajectoryGenerator+0xa42>
 800402c:	2000096c 	.word	0x2000096c
 8004030:	200009ac 	.word	0x200009ac
 8004034:	20000978 	.word	0x20000978
 8004038:	2000097c 	.word	0x2000097c
 800403c:	20000210 	.word	0x20000210
 8004040:	46ad9c00 	.word	0x46ad9c00
 8004044:	20000214 	.word	0x20000214
 8004048:	47590300 	.word	0x47590300
 800404c:	20000974 	.word	0x20000974
 8004050:	20000984 	.word	0x20000984
 8004054:	20000998 	.word	0x20000998
 8004058:	3fe00000 	.word	0x3fe00000
 800405c:	2000099c 	.word	0x2000099c
 8004060:	200009a0 	.word	0x200009a0
 8004064:	200009a4 	.word	0x200009a4
 8004068:	200009a8 	.word	0x200009a8
 800406c:	20000970 	.word	0x20000970
 8004070:	20000980 	.word	0x20000980

	case 1:
		  if(time <= t_half + initime)
 8004074:	4bc2      	ldr	r3, [pc, #776]	; (8004380 <TrajectoryGenerator+0x5a8>)
 8004076:	ed93 7a00 	vldr	s14, [r3]
 800407a:	4bc2      	ldr	r3, [pc, #776]	; (8004384 <TrajectoryGenerator+0x5ac>)
 800407c:	edd3 7a00 	vldr	s15, [r3]
 8004080:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004084:	4bc0      	ldr	r3, [pc, #768]	; (8004388 <TrajectoryGenerator+0x5b0>)
 8004086:	edd3 7a00 	vldr	s15, [r3]
 800408a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800408e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004092:	f2c0 8092 	blt.w	80041ba <TrajectoryGenerator+0x3e2>
		  {
			  setacc = qdd_max;
 8004096:	4bbd      	ldr	r3, [pc, #756]	; (800438c <TrajectoryGenerator+0x5b4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4abd      	ldr	r2, [pc, #756]	; (8004390 <TrajectoryGenerator+0x5b8>)
 800409c:	6013      	str	r3, [r2, #0]
			  setvelocity = qdi + setacc*(time-initime);
 800409e:	4bba      	ldr	r3, [pc, #744]	; (8004388 <TrajectoryGenerator+0x5b0>)
 80040a0:	ed93 7a00 	vldr	s14, [r3]
 80040a4:	4bb7      	ldr	r3, [pc, #732]	; (8004384 <TrajectoryGenerator+0x5ac>)
 80040a6:	edd3 7a00 	vldr	s15, [r3]
 80040aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040ae:	4bb8      	ldr	r3, [pc, #736]	; (8004390 <TrajectoryGenerator+0x5b8>)
 80040b0:	edd3 7a00 	vldr	s15, [r3]
 80040b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040b8:	4bb6      	ldr	r3, [pc, #728]	; (8004394 <TrajectoryGenerator+0x5bc>)
 80040ba:	edd3 7a00 	vldr	s15, [r3]
 80040be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040c2:	4bb5      	ldr	r3, [pc, #724]	; (8004398 <TrajectoryGenerator+0x5c0>)
 80040c4:	edc3 7a00 	vstr	s15, [r3]
			  setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 80040c8:	4baf      	ldr	r3, [pc, #700]	; (8004388 <TrajectoryGenerator+0x5b0>)
 80040ca:	ed93 7a00 	vldr	s14, [r3]
 80040ce:	4bad      	ldr	r3, [pc, #692]	; (8004384 <TrajectoryGenerator+0x5ac>)
 80040d0:	edd3 7a00 	vldr	s15, [r3]
 80040d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040d8:	4bae      	ldr	r3, [pc, #696]	; (8004394 <TrajectoryGenerator+0x5bc>)
 80040da:	edd3 7a00 	vldr	s15, [r3]
 80040de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040e2:	4bae      	ldr	r3, [pc, #696]	; (800439c <TrajectoryGenerator+0x5c4>)
 80040e4:	edd3 7a00 	vldr	s15, [r3]
 80040e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040ec:	ee17 0a90 	vmov	r0, s15
 80040f0:	f7fc fa32 	bl	8000558 <__aeabi_f2d>
 80040f4:	4604      	mov	r4, r0
 80040f6:	460d      	mov	r5, r1
 80040f8:	4ba5      	ldr	r3, [pc, #660]	; (8004390 <TrajectoryGenerator+0x5b8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fc fa2b 	bl	8000558 <__aeabi_f2d>
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	4ba6      	ldr	r3, [pc, #664]	; (80043a0 <TrajectoryGenerator+0x5c8>)
 8004108:	f7fc fa7e 	bl	8000608 <__aeabi_dmul>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4690      	mov	r8, r2
 8004112:	4699      	mov	r9, r3
 8004114:	4b9c      	ldr	r3, [pc, #624]	; (8004388 <TrajectoryGenerator+0x5b0>)
 8004116:	ed93 7a00 	vldr	s14, [r3]
 800411a:	4b9a      	ldr	r3, [pc, #616]	; (8004384 <TrajectoryGenerator+0x5ac>)
 800411c:	edd3 7a00 	vldr	s15, [r3]
 8004120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004124:	ee17 0a90 	vmov	r0, s15
 8004128:	f7fc fa16 	bl	8000558 <__aeabi_f2d>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4640      	mov	r0, r8
 8004132:	4649      	mov	r1, r9
 8004134:	f7fc fa68 	bl	8000608 <__aeabi_dmul>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4690      	mov	r8, r2
 800413e:	4699      	mov	r9, r3
 8004140:	4b91      	ldr	r3, [pc, #580]	; (8004388 <TrajectoryGenerator+0x5b0>)
 8004142:	ed93 7a00 	vldr	s14, [r3]
 8004146:	4b8f      	ldr	r3, [pc, #572]	; (8004384 <TrajectoryGenerator+0x5ac>)
 8004148:	edd3 7a00 	vldr	s15, [r3]
 800414c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004150:	ee17 0a90 	vmov	r0, s15
 8004154:	f7fc fa00 	bl	8000558 <__aeabi_f2d>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4640      	mov	r0, r8
 800415e:	4649      	mov	r1, r9
 8004160:	f7fc fa52 	bl	8000608 <__aeabi_dmul>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4620      	mov	r0, r4
 800416a:	4629      	mov	r1, r5
 800416c:	f7fc f896 	bl	800029c <__adddf3>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	f7fc fd3e 	bl	8000bf8 <__aeabi_d2f>
 800417c:	4603      	mov	r3, r0
 800417e:	4a89      	ldr	r2, [pc, #548]	; (80043a4 <TrajectoryGenerator+0x5cc>)
 8004180:	6013      	str	r3, [r2, #0]

			  qi_1 = setposition;
 8004182:	4b88      	ldr	r3, [pc, #544]	; (80043a4 <TrajectoryGenerator+0x5cc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a88      	ldr	r2, [pc, #544]	; (80043a8 <TrajectoryGenerator+0x5d0>)
 8004188:	6013      	str	r3, [r2, #0]
			  qdi_1 = setvelocity;
 800418a:	4b83      	ldr	r3, [pc, #524]	; (8004398 <TrajectoryGenerator+0x5c0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a87      	ldr	r2, [pc, #540]	; (80043ac <TrajectoryGenerator+0x5d4>)
 8004190:	6013      	str	r3, [r2, #0]
			  time += 0.001;
 8004192:	4b7d      	ldr	r3, [pc, #500]	; (8004388 <TrajectoryGenerator+0x5b0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fc f9de 	bl	8000558 <__aeabi_f2d>
 800419c:	a376      	add	r3, pc, #472	; (adr r3, 8004378 <TrajectoryGenerator+0x5a0>)
 800419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a2:	f7fc f87b 	bl	800029c <__adddf3>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	f7fc fd23 	bl	8000bf8 <__aeabi_d2f>
 80041b2:	4603      	mov	r3, r0
 80041b4:	4a74      	ldr	r2, [pc, #464]	; (8004388 <TrajectoryGenerator+0x5b0>)
 80041b6:	6013      	str	r3, [r2, #0]
			  time += 0.001;
		  }
		  else if(time > (2*t_half) + initime){
			  setposition = qf;
		  }
		break;
 80041b8:	e32f      	b.n	800481a <TrajectoryGenerator+0xa42>
		  else if(t_half + initime < time && time <= (2*t_half) + initime)
 80041ba:	4b71      	ldr	r3, [pc, #452]	; (8004380 <TrajectoryGenerator+0x5a8>)
 80041bc:	ed93 7a00 	vldr	s14, [r3]
 80041c0:	4b70      	ldr	r3, [pc, #448]	; (8004384 <TrajectoryGenerator+0x5ac>)
 80041c2:	edd3 7a00 	vldr	s15, [r3]
 80041c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041ca:	4b6f      	ldr	r3, [pc, #444]	; (8004388 <TrajectoryGenerator+0x5b0>)
 80041cc:	edd3 7a00 	vldr	s15, [r3]
 80041d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d8:	f140 80b5 	bpl.w	8004346 <TrajectoryGenerator+0x56e>
 80041dc:	4b68      	ldr	r3, [pc, #416]	; (8004380 <TrajectoryGenerator+0x5a8>)
 80041de:	edd3 7a00 	vldr	s15, [r3]
 80041e2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80041e6:	4b67      	ldr	r3, [pc, #412]	; (8004384 <TrajectoryGenerator+0x5ac>)
 80041e8:	edd3 7a00 	vldr	s15, [r3]
 80041ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041f0:	4b65      	ldr	r3, [pc, #404]	; (8004388 <TrajectoryGenerator+0x5b0>)
 80041f2:	edd3 7a00 	vldr	s15, [r3]
 80041f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fe:	f2c0 80a2 	blt.w	8004346 <TrajectoryGenerator+0x56e>
			  setacc = -qdd_max;
 8004202:	4b62      	ldr	r3, [pc, #392]	; (800438c <TrajectoryGenerator+0x5b4>)
 8004204:	edd3 7a00 	vldr	s15, [r3]
 8004208:	eef1 7a67 	vneg.f32	s15, s15
 800420c:	4b60      	ldr	r3, [pc, #384]	; (8004390 <TrajectoryGenerator+0x5b8>)
 800420e:	edc3 7a00 	vstr	s15, [r3]
			  setvelocity = qdi_1 + setacc*(time-initime-t_half);
 8004212:	4b5d      	ldr	r3, [pc, #372]	; (8004388 <TrajectoryGenerator+0x5b0>)
 8004214:	ed93 7a00 	vldr	s14, [r3]
 8004218:	4b5a      	ldr	r3, [pc, #360]	; (8004384 <TrajectoryGenerator+0x5ac>)
 800421a:	edd3 7a00 	vldr	s15, [r3]
 800421e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004222:	4b57      	ldr	r3, [pc, #348]	; (8004380 <TrajectoryGenerator+0x5a8>)
 8004224:	edd3 7a00 	vldr	s15, [r3]
 8004228:	ee37 7a67 	vsub.f32	s14, s14, s15
 800422c:	4b58      	ldr	r3, [pc, #352]	; (8004390 <TrajectoryGenerator+0x5b8>)
 800422e:	edd3 7a00 	vldr	s15, [r3]
 8004232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004236:	4b5d      	ldr	r3, [pc, #372]	; (80043ac <TrajectoryGenerator+0x5d4>)
 8004238:	edd3 7a00 	vldr	s15, [r3]
 800423c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004240:	4b55      	ldr	r3, [pc, #340]	; (8004398 <TrajectoryGenerator+0x5c0>)
 8004242:	edc3 7a00 	vstr	s15, [r3]
			  setposition = qi_1 + qdi_1*(time-initime-t_half)+0.5*setacc*(time-initime-t_half)*(time-initime-t_half);
 8004246:	4b50      	ldr	r3, [pc, #320]	; (8004388 <TrajectoryGenerator+0x5b0>)
 8004248:	ed93 7a00 	vldr	s14, [r3]
 800424c:	4b4d      	ldr	r3, [pc, #308]	; (8004384 <TrajectoryGenerator+0x5ac>)
 800424e:	edd3 7a00 	vldr	s15, [r3]
 8004252:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004256:	4b4a      	ldr	r3, [pc, #296]	; (8004380 <TrajectoryGenerator+0x5a8>)
 8004258:	edd3 7a00 	vldr	s15, [r3]
 800425c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004260:	4b52      	ldr	r3, [pc, #328]	; (80043ac <TrajectoryGenerator+0x5d4>)
 8004262:	edd3 7a00 	vldr	s15, [r3]
 8004266:	ee27 7a27 	vmul.f32	s14, s14, s15
 800426a:	4b4f      	ldr	r3, [pc, #316]	; (80043a8 <TrajectoryGenerator+0x5d0>)
 800426c:	edd3 7a00 	vldr	s15, [r3]
 8004270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004274:	ee17 0a90 	vmov	r0, s15
 8004278:	f7fc f96e 	bl	8000558 <__aeabi_f2d>
 800427c:	4604      	mov	r4, r0
 800427e:	460d      	mov	r5, r1
 8004280:	4b43      	ldr	r3, [pc, #268]	; (8004390 <TrajectoryGenerator+0x5b8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f7fc f967 	bl	8000558 <__aeabi_f2d>
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	4b44      	ldr	r3, [pc, #272]	; (80043a0 <TrajectoryGenerator+0x5c8>)
 8004290:	f7fc f9ba 	bl	8000608 <__aeabi_dmul>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4690      	mov	r8, r2
 800429a:	4699      	mov	r9, r3
 800429c:	4b3a      	ldr	r3, [pc, #232]	; (8004388 <TrajectoryGenerator+0x5b0>)
 800429e:	ed93 7a00 	vldr	s14, [r3]
 80042a2:	4b38      	ldr	r3, [pc, #224]	; (8004384 <TrajectoryGenerator+0x5ac>)
 80042a4:	edd3 7a00 	vldr	s15, [r3]
 80042a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042ac:	4b34      	ldr	r3, [pc, #208]	; (8004380 <TrajectoryGenerator+0x5a8>)
 80042ae:	edd3 7a00 	vldr	s15, [r3]
 80042b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042b6:	ee17 0a90 	vmov	r0, s15
 80042ba:	f7fc f94d 	bl	8000558 <__aeabi_f2d>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4640      	mov	r0, r8
 80042c4:	4649      	mov	r1, r9
 80042c6:	f7fc f99f 	bl	8000608 <__aeabi_dmul>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4690      	mov	r8, r2
 80042d0:	4699      	mov	r9, r3
 80042d2:	4b2d      	ldr	r3, [pc, #180]	; (8004388 <TrajectoryGenerator+0x5b0>)
 80042d4:	ed93 7a00 	vldr	s14, [r3]
 80042d8:	4b2a      	ldr	r3, [pc, #168]	; (8004384 <TrajectoryGenerator+0x5ac>)
 80042da:	edd3 7a00 	vldr	s15, [r3]
 80042de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042e2:	4b27      	ldr	r3, [pc, #156]	; (8004380 <TrajectoryGenerator+0x5a8>)
 80042e4:	edd3 7a00 	vldr	s15, [r3]
 80042e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ec:	ee17 0a90 	vmov	r0, s15
 80042f0:	f7fc f932 	bl	8000558 <__aeabi_f2d>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4640      	mov	r0, r8
 80042fa:	4649      	mov	r1, r9
 80042fc:	f7fc f984 	bl	8000608 <__aeabi_dmul>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4620      	mov	r0, r4
 8004306:	4629      	mov	r1, r5
 8004308:	f7fb ffc8 	bl	800029c <__adddf3>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4610      	mov	r0, r2
 8004312:	4619      	mov	r1, r3
 8004314:	f7fc fc70 	bl	8000bf8 <__aeabi_d2f>
 8004318:	4603      	mov	r3, r0
 800431a:	4a22      	ldr	r2, [pc, #136]	; (80043a4 <TrajectoryGenerator+0x5cc>)
 800431c:	6013      	str	r3, [r2, #0]
			  time += 0.001;
 800431e:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <TrajectoryGenerator+0x5b0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7fc f918 	bl	8000558 <__aeabi_f2d>
 8004328:	a313      	add	r3, pc, #76	; (adr r3, 8004378 <TrajectoryGenerator+0x5a0>)
 800432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432e:	f7fb ffb5 	bl	800029c <__adddf3>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	f7fc fc5d 	bl	8000bf8 <__aeabi_d2f>
 800433e:	4603      	mov	r3, r0
 8004340:	4a11      	ldr	r2, [pc, #68]	; (8004388 <TrajectoryGenerator+0x5b0>)
 8004342:	6013      	str	r3, [r2, #0]
		break;
 8004344:	e269      	b.n	800481a <TrajectoryGenerator+0xa42>
		  else if(time > (2*t_half) + initime){
 8004346:	4b0e      	ldr	r3, [pc, #56]	; (8004380 <TrajectoryGenerator+0x5a8>)
 8004348:	edd3 7a00 	vldr	s15, [r3]
 800434c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <TrajectoryGenerator+0x5ac>)
 8004352:	edd3 7a00 	vldr	s15, [r3]
 8004356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <TrajectoryGenerator+0x5b0>)
 800435c:	edd3 7a00 	vldr	s15, [r3]
 8004360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004368:	d400      	bmi.n	800436c <TrajectoryGenerator+0x594>
		break;
 800436a:	e256      	b.n	800481a <TrajectoryGenerator+0xa42>
			  setposition = qf;
 800436c:	4b10      	ldr	r3, [pc, #64]	; (80043b0 <TrajectoryGenerator+0x5d8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a0c      	ldr	r2, [pc, #48]	; (80043a4 <TrajectoryGenerator+0x5cc>)
 8004372:	6013      	str	r3, [r2, #0]
		break;
 8004374:	e251      	b.n	800481a <TrajectoryGenerator+0xa42>
 8004376:	bf00      	nop
 8004378:	d2f1a9fc 	.word	0xd2f1a9fc
 800437c:	3f50624d 	.word	0x3f50624d
 8004380:	20000984 	.word	0x20000984
 8004384:	20000980 	.word	0x20000980
 8004388:	20000970 	.word	0x20000970
 800438c:	20000214 	.word	0x20000214
 8004390:	200009dc 	.word	0x200009dc
 8004394:	2000097c 	.word	0x2000097c
 8004398:	200009d8 	.word	0x200009d8
 800439c:	20000978 	.word	0x20000978
 80043a0:	3fe00000 	.word	0x3fe00000
 80043a4:	200009b8 	.word	0x200009b8
 80043a8:	20000990 	.word	0x20000990
 80043ac:	20000988 	.word	0x20000988
 80043b0:	20000974 	.word	0x20000974

	case 2:
		 if(time <= tacc + initime)
 80043b4:	4b84      	ldr	r3, [pc, #528]	; (80045c8 <TrajectoryGenerator+0x7f0>)
 80043b6:	ed93 7a00 	vldr	s14, [r3]
 80043ba:	4b84      	ldr	r3, [pc, #528]	; (80045cc <TrajectoryGenerator+0x7f4>)
 80043bc:	edd3 7a00 	vldr	s15, [r3]
 80043c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043c4:	4b82      	ldr	r3, [pc, #520]	; (80045d0 <TrajectoryGenerator+0x7f8>)
 80043c6:	edd3 7a00 	vldr	s15, [r3]
 80043ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d2:	f2c0 8092 	blt.w	80044fa <TrajectoryGenerator+0x722>
		 {
			 setacc = qdd_max;
 80043d6:	4b7f      	ldr	r3, [pc, #508]	; (80045d4 <TrajectoryGenerator+0x7fc>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a7f      	ldr	r2, [pc, #508]	; (80045d8 <TrajectoryGenerator+0x800>)
 80043dc:	6013      	str	r3, [r2, #0]
			 setvelocity = qdi + setacc*(time-initime);
 80043de:	4b7c      	ldr	r3, [pc, #496]	; (80045d0 <TrajectoryGenerator+0x7f8>)
 80043e0:	ed93 7a00 	vldr	s14, [r3]
 80043e4:	4b79      	ldr	r3, [pc, #484]	; (80045cc <TrajectoryGenerator+0x7f4>)
 80043e6:	edd3 7a00 	vldr	s15, [r3]
 80043ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043ee:	4b7a      	ldr	r3, [pc, #488]	; (80045d8 <TrajectoryGenerator+0x800>)
 80043f0:	edd3 7a00 	vldr	s15, [r3]
 80043f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043f8:	4b78      	ldr	r3, [pc, #480]	; (80045dc <TrajectoryGenerator+0x804>)
 80043fa:	edd3 7a00 	vldr	s15, [r3]
 80043fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004402:	4b77      	ldr	r3, [pc, #476]	; (80045e0 <TrajectoryGenerator+0x808>)
 8004404:	edc3 7a00 	vstr	s15, [r3]
			 setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 8004408:	4b71      	ldr	r3, [pc, #452]	; (80045d0 <TrajectoryGenerator+0x7f8>)
 800440a:	ed93 7a00 	vldr	s14, [r3]
 800440e:	4b6f      	ldr	r3, [pc, #444]	; (80045cc <TrajectoryGenerator+0x7f4>)
 8004410:	edd3 7a00 	vldr	s15, [r3]
 8004414:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004418:	4b70      	ldr	r3, [pc, #448]	; (80045dc <TrajectoryGenerator+0x804>)
 800441a:	edd3 7a00 	vldr	s15, [r3]
 800441e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004422:	4b70      	ldr	r3, [pc, #448]	; (80045e4 <TrajectoryGenerator+0x80c>)
 8004424:	edd3 7a00 	vldr	s15, [r3]
 8004428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800442c:	ee17 0a90 	vmov	r0, s15
 8004430:	f7fc f892 	bl	8000558 <__aeabi_f2d>
 8004434:	4604      	mov	r4, r0
 8004436:	460d      	mov	r5, r1
 8004438:	4b67      	ldr	r3, [pc, #412]	; (80045d8 <TrajectoryGenerator+0x800>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f7fc f88b 	bl	8000558 <__aeabi_f2d>
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	4b68      	ldr	r3, [pc, #416]	; (80045e8 <TrajectoryGenerator+0x810>)
 8004448:	f7fc f8de 	bl	8000608 <__aeabi_dmul>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4690      	mov	r8, r2
 8004452:	4699      	mov	r9, r3
 8004454:	4b5e      	ldr	r3, [pc, #376]	; (80045d0 <TrajectoryGenerator+0x7f8>)
 8004456:	ed93 7a00 	vldr	s14, [r3]
 800445a:	4b5c      	ldr	r3, [pc, #368]	; (80045cc <TrajectoryGenerator+0x7f4>)
 800445c:	edd3 7a00 	vldr	s15, [r3]
 8004460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004464:	ee17 0a90 	vmov	r0, s15
 8004468:	f7fc f876 	bl	8000558 <__aeabi_f2d>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4640      	mov	r0, r8
 8004472:	4649      	mov	r1, r9
 8004474:	f7fc f8c8 	bl	8000608 <__aeabi_dmul>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4690      	mov	r8, r2
 800447e:	4699      	mov	r9, r3
 8004480:	4b53      	ldr	r3, [pc, #332]	; (80045d0 <TrajectoryGenerator+0x7f8>)
 8004482:	ed93 7a00 	vldr	s14, [r3]
 8004486:	4b51      	ldr	r3, [pc, #324]	; (80045cc <TrajectoryGenerator+0x7f4>)
 8004488:	edd3 7a00 	vldr	s15, [r3]
 800448c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004490:	ee17 0a90 	vmov	r0, s15
 8004494:	f7fc f860 	bl	8000558 <__aeabi_f2d>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4640      	mov	r0, r8
 800449e:	4649      	mov	r1, r9
 80044a0:	f7fc f8b2 	bl	8000608 <__aeabi_dmul>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4620      	mov	r0, r4
 80044aa:	4629      	mov	r1, r5
 80044ac:	f7fb fef6 	bl	800029c <__adddf3>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4610      	mov	r0, r2
 80044b6:	4619      	mov	r1, r3
 80044b8:	f7fc fb9e 	bl	8000bf8 <__aeabi_d2f>
 80044bc:	4603      	mov	r3, r0
 80044be:	4a4b      	ldr	r2, [pc, #300]	; (80045ec <TrajectoryGenerator+0x814>)
 80044c0:	6013      	str	r3, [r2, #0]

			 qi_1 = setposition;
 80044c2:	4b4a      	ldr	r3, [pc, #296]	; (80045ec <TrajectoryGenerator+0x814>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a4a      	ldr	r2, [pc, #296]	; (80045f0 <TrajectoryGenerator+0x818>)
 80044c8:	6013      	str	r3, [r2, #0]
			 qdi_1 = setvelocity;
 80044ca:	4b45      	ldr	r3, [pc, #276]	; (80045e0 <TrajectoryGenerator+0x808>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a49      	ldr	r2, [pc, #292]	; (80045f4 <TrajectoryGenerator+0x81c>)
 80044d0:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 80044d2:	4b3f      	ldr	r3, [pc, #252]	; (80045d0 <TrajectoryGenerator+0x7f8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fc f83e 	bl	8000558 <__aeabi_f2d>
 80044dc:	a338      	add	r3, pc, #224	; (adr r3, 80045c0 <TrajectoryGenerator+0x7e8>)
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	f7fb fedb 	bl	800029c <__adddf3>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	f7fc fb83 	bl	8000bf8 <__aeabi_d2f>
 80044f2:	4603      	mov	r3, r0
 80044f4:	4a36      	ldr	r2, [pc, #216]	; (80045d0 <TrajectoryGenerator+0x7f8>)
 80044f6:	6013      	str	r3, [r2, #0]
			 time += 0.001;
		 }
		 else if(time > tacc+tconst+tdec+initime){
			 setposition = qf;
		 }
		 break;
 80044f8:	e18f      	b.n	800481a <TrajectoryGenerator+0xa42>
		 else if(tacc+initime < time && time <= initime+tacc+tconst)
 80044fa:	4b33      	ldr	r3, [pc, #204]	; (80045c8 <TrajectoryGenerator+0x7f0>)
 80044fc:	ed93 7a00 	vldr	s14, [r3]
 8004500:	4b32      	ldr	r3, [pc, #200]	; (80045cc <TrajectoryGenerator+0x7f4>)
 8004502:	edd3 7a00 	vldr	s15, [r3]
 8004506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800450a:	4b31      	ldr	r3, [pc, #196]	; (80045d0 <TrajectoryGenerator+0x7f8>)
 800450c:	edd3 7a00 	vldr	s15, [r3]
 8004510:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004518:	d576      	bpl.n	8004608 <TrajectoryGenerator+0x830>
 800451a:	4b2c      	ldr	r3, [pc, #176]	; (80045cc <TrajectoryGenerator+0x7f4>)
 800451c:	ed93 7a00 	vldr	s14, [r3]
 8004520:	4b29      	ldr	r3, [pc, #164]	; (80045c8 <TrajectoryGenerator+0x7f0>)
 8004522:	edd3 7a00 	vldr	s15, [r3]
 8004526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800452a:	4b33      	ldr	r3, [pc, #204]	; (80045f8 <TrajectoryGenerator+0x820>)
 800452c:	edd3 7a00 	vldr	s15, [r3]
 8004530:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004534:	4b26      	ldr	r3, [pc, #152]	; (80045d0 <TrajectoryGenerator+0x7f8>)
 8004536:	edd3 7a00 	vldr	s15, [r3]
 800453a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800453e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004542:	db61      	blt.n	8004608 <TrajectoryGenerator+0x830>
			 setacc = 0;
 8004544:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <TrajectoryGenerator+0x800>)
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
			 setvelocity = qd_max;
 800454c:	4b2b      	ldr	r3, [pc, #172]	; (80045fc <TrajectoryGenerator+0x824>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a23      	ldr	r2, [pc, #140]	; (80045e0 <TrajectoryGenerator+0x808>)
 8004552:	6013      	str	r3, [r2, #0]
			 setposition = qi_1 + qd_max*(time-initime-tacc);
 8004554:	4b1e      	ldr	r3, [pc, #120]	; (80045d0 <TrajectoryGenerator+0x7f8>)
 8004556:	ed93 7a00 	vldr	s14, [r3]
 800455a:	4b1c      	ldr	r3, [pc, #112]	; (80045cc <TrajectoryGenerator+0x7f4>)
 800455c:	edd3 7a00 	vldr	s15, [r3]
 8004560:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004564:	4b18      	ldr	r3, [pc, #96]	; (80045c8 <TrajectoryGenerator+0x7f0>)
 8004566:	edd3 7a00 	vldr	s15, [r3]
 800456a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800456e:	4b23      	ldr	r3, [pc, #140]	; (80045fc <TrajectoryGenerator+0x824>)
 8004570:	edd3 7a00 	vldr	s15, [r3]
 8004574:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004578:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <TrajectoryGenerator+0x818>)
 800457a:	edd3 7a00 	vldr	s15, [r3]
 800457e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004582:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <TrajectoryGenerator+0x814>)
 8004584:	edc3 7a00 	vstr	s15, [r3]
			 qi_2 = setposition;
 8004588:	4b18      	ldr	r3, [pc, #96]	; (80045ec <TrajectoryGenerator+0x814>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a1c      	ldr	r2, [pc, #112]	; (8004600 <TrajectoryGenerator+0x828>)
 800458e:	6013      	str	r3, [r2, #0]
			 qdi_2 = setvelocity;
 8004590:	4b13      	ldr	r3, [pc, #76]	; (80045e0 <TrajectoryGenerator+0x808>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1b      	ldr	r2, [pc, #108]	; (8004604 <TrajectoryGenerator+0x82c>)
 8004596:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 8004598:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <TrajectoryGenerator+0x7f8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f7fb ffdb 	bl	8000558 <__aeabi_f2d>
 80045a2:	a307      	add	r3, pc, #28	; (adr r3, 80045c0 <TrajectoryGenerator+0x7e8>)
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	f7fb fe78 	bl	800029c <__adddf3>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4610      	mov	r0, r2
 80045b2:	4619      	mov	r1, r3
 80045b4:	f7fc fb20 	bl	8000bf8 <__aeabi_d2f>
 80045b8:	4603      	mov	r3, r0
 80045ba:	4a05      	ldr	r2, [pc, #20]	; (80045d0 <TrajectoryGenerator+0x7f8>)
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	e12a      	b.n	8004816 <TrajectoryGenerator+0xa3e>
 80045c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80045c4:	3f50624d 	.word	0x3f50624d
 80045c8:	20000998 	.word	0x20000998
 80045cc:	20000980 	.word	0x20000980
 80045d0:	20000970 	.word	0x20000970
 80045d4:	20000214 	.word	0x20000214
 80045d8:	200009dc 	.word	0x200009dc
 80045dc:	2000097c 	.word	0x2000097c
 80045e0:	200009d8 	.word	0x200009d8
 80045e4:	20000978 	.word	0x20000978
 80045e8:	3fe00000 	.word	0x3fe00000
 80045ec:	200009b8 	.word	0x200009b8
 80045f0:	20000990 	.word	0x20000990
 80045f4:	20000988 	.word	0x20000988
 80045f8:	200009a4 	.word	0x200009a4
 80045fc:	20000210 	.word	0x20000210
 8004600:	20000994 	.word	0x20000994
 8004604:	2000098c 	.word	0x2000098c
		 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8004608:	4b87      	ldr	r3, [pc, #540]	; (8004828 <TrajectoryGenerator+0xa50>)
 800460a:	ed93 7a00 	vldr	s14, [r3]
 800460e:	4b87      	ldr	r3, [pc, #540]	; (800482c <TrajectoryGenerator+0xa54>)
 8004610:	edd3 7a00 	vldr	s15, [r3]
 8004614:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004618:	4b85      	ldr	r3, [pc, #532]	; (8004830 <TrajectoryGenerator+0xa58>)
 800461a:	edd3 7a00 	vldr	s15, [r3]
 800461e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004622:	4b84      	ldr	r3, [pc, #528]	; (8004834 <TrajectoryGenerator+0xa5c>)
 8004624:	edd3 7a00 	vldr	s15, [r3]
 8004628:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004630:	f140 80d1 	bpl.w	80047d6 <TrajectoryGenerator+0x9fe>
 8004634:	4b7c      	ldr	r3, [pc, #496]	; (8004828 <TrajectoryGenerator+0xa50>)
 8004636:	ed93 7a00 	vldr	s14, [r3]
 800463a:	4b7c      	ldr	r3, [pc, #496]	; (800482c <TrajectoryGenerator+0xa54>)
 800463c:	edd3 7a00 	vldr	s15, [r3]
 8004640:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004644:	4b7c      	ldr	r3, [pc, #496]	; (8004838 <TrajectoryGenerator+0xa60>)
 8004646:	edd3 7a00 	vldr	s15, [r3]
 800464a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800464e:	4b78      	ldr	r3, [pc, #480]	; (8004830 <TrajectoryGenerator+0xa58>)
 8004650:	edd3 7a00 	vldr	s15, [r3]
 8004654:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004658:	4b76      	ldr	r3, [pc, #472]	; (8004834 <TrajectoryGenerator+0xa5c>)
 800465a:	edd3 7a00 	vldr	s15, [r3]
 800465e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004666:	f2c0 80b6 	blt.w	80047d6 <TrajectoryGenerator+0x9fe>
			 setacc = -qdd_max;
 800466a:	4b74      	ldr	r3, [pc, #464]	; (800483c <TrajectoryGenerator+0xa64>)
 800466c:	edd3 7a00 	vldr	s15, [r3]
 8004670:	eef1 7a67 	vneg.f32	s15, s15
 8004674:	4b72      	ldr	r3, [pc, #456]	; (8004840 <TrajectoryGenerator+0xa68>)
 8004676:	edc3 7a00 	vstr	s15, [r3]
			 setvelocity = qdi_2 + setacc*(time-initime-tacc-tconst);
 800467a:	4b6e      	ldr	r3, [pc, #440]	; (8004834 <TrajectoryGenerator+0xa5c>)
 800467c:	ed93 7a00 	vldr	s14, [r3]
 8004680:	4b6b      	ldr	r3, [pc, #428]	; (8004830 <TrajectoryGenerator+0xa58>)
 8004682:	edd3 7a00 	vldr	s15, [r3]
 8004686:	ee37 7a67 	vsub.f32	s14, s14, s15
 800468a:	4b67      	ldr	r3, [pc, #412]	; (8004828 <TrajectoryGenerator+0xa50>)
 800468c:	edd3 7a00 	vldr	s15, [r3]
 8004690:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004694:	4b65      	ldr	r3, [pc, #404]	; (800482c <TrajectoryGenerator+0xa54>)
 8004696:	edd3 7a00 	vldr	s15, [r3]
 800469a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800469e:	4b68      	ldr	r3, [pc, #416]	; (8004840 <TrajectoryGenerator+0xa68>)
 80046a0:	edd3 7a00 	vldr	s15, [r3]
 80046a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046a8:	4b66      	ldr	r3, [pc, #408]	; (8004844 <TrajectoryGenerator+0xa6c>)
 80046aa:	edd3 7a00 	vldr	s15, [r3]
 80046ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046b2:	4b65      	ldr	r3, [pc, #404]	; (8004848 <TrajectoryGenerator+0xa70>)
 80046b4:	edc3 7a00 	vstr	s15, [r3]
			 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
 80046b8:	4b5e      	ldr	r3, [pc, #376]	; (8004834 <TrajectoryGenerator+0xa5c>)
 80046ba:	ed93 7a00 	vldr	s14, [r3]
 80046be:	4b5c      	ldr	r3, [pc, #368]	; (8004830 <TrajectoryGenerator+0xa58>)
 80046c0:	edd3 7a00 	vldr	s15, [r3]
 80046c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046c8:	4b57      	ldr	r3, [pc, #348]	; (8004828 <TrajectoryGenerator+0xa50>)
 80046ca:	edd3 7a00 	vldr	s15, [r3]
 80046ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046d2:	4b56      	ldr	r3, [pc, #344]	; (800482c <TrajectoryGenerator+0xa54>)
 80046d4:	edd3 7a00 	vldr	s15, [r3]
 80046d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046dc:	4b59      	ldr	r3, [pc, #356]	; (8004844 <TrajectoryGenerator+0xa6c>)
 80046de:	edd3 7a00 	vldr	s15, [r3]
 80046e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046e6:	4b59      	ldr	r3, [pc, #356]	; (800484c <TrajectoryGenerator+0xa74>)
 80046e8:	edd3 7a00 	vldr	s15, [r3]
 80046ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046f0:	ee17 0a90 	vmov	r0, s15
 80046f4:	f7fb ff30 	bl	8000558 <__aeabi_f2d>
 80046f8:	4604      	mov	r4, r0
 80046fa:	460d      	mov	r5, r1
 80046fc:	4b50      	ldr	r3, [pc, #320]	; (8004840 <TrajectoryGenerator+0xa68>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f7fb ff29 	bl	8000558 <__aeabi_f2d>
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	4b51      	ldr	r3, [pc, #324]	; (8004850 <TrajectoryGenerator+0xa78>)
 800470c:	f7fb ff7c 	bl	8000608 <__aeabi_dmul>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4690      	mov	r8, r2
 8004716:	4699      	mov	r9, r3
 8004718:	4b46      	ldr	r3, [pc, #280]	; (8004834 <TrajectoryGenerator+0xa5c>)
 800471a:	ed93 7a00 	vldr	s14, [r3]
 800471e:	4b44      	ldr	r3, [pc, #272]	; (8004830 <TrajectoryGenerator+0xa58>)
 8004720:	edd3 7a00 	vldr	s15, [r3]
 8004724:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004728:	4b3f      	ldr	r3, [pc, #252]	; (8004828 <TrajectoryGenerator+0xa50>)
 800472a:	edd3 7a00 	vldr	s15, [r3]
 800472e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004732:	4b3e      	ldr	r3, [pc, #248]	; (800482c <TrajectoryGenerator+0xa54>)
 8004734:	edd3 7a00 	vldr	s15, [r3]
 8004738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800473c:	ee17 0a90 	vmov	r0, s15
 8004740:	f7fb ff0a 	bl	8000558 <__aeabi_f2d>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4640      	mov	r0, r8
 800474a:	4649      	mov	r1, r9
 800474c:	f7fb ff5c 	bl	8000608 <__aeabi_dmul>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4690      	mov	r8, r2
 8004756:	4699      	mov	r9, r3
 8004758:	4b36      	ldr	r3, [pc, #216]	; (8004834 <TrajectoryGenerator+0xa5c>)
 800475a:	ed93 7a00 	vldr	s14, [r3]
 800475e:	4b34      	ldr	r3, [pc, #208]	; (8004830 <TrajectoryGenerator+0xa58>)
 8004760:	edd3 7a00 	vldr	s15, [r3]
 8004764:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004768:	4b2f      	ldr	r3, [pc, #188]	; (8004828 <TrajectoryGenerator+0xa50>)
 800476a:	edd3 7a00 	vldr	s15, [r3]
 800476e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004772:	4b2e      	ldr	r3, [pc, #184]	; (800482c <TrajectoryGenerator+0xa54>)
 8004774:	edd3 7a00 	vldr	s15, [r3]
 8004778:	ee77 7a67 	vsub.f32	s15, s14, s15
 800477c:	ee17 0a90 	vmov	r0, s15
 8004780:	f7fb feea 	bl	8000558 <__aeabi_f2d>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4640      	mov	r0, r8
 800478a:	4649      	mov	r1, r9
 800478c:	f7fb ff3c 	bl	8000608 <__aeabi_dmul>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4620      	mov	r0, r4
 8004796:	4629      	mov	r1, r5
 8004798:	f7fb fd80 	bl	800029c <__adddf3>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4610      	mov	r0, r2
 80047a2:	4619      	mov	r1, r3
 80047a4:	f7fc fa28 	bl	8000bf8 <__aeabi_d2f>
 80047a8:	4603      	mov	r3, r0
 80047aa:	4a2a      	ldr	r2, [pc, #168]	; (8004854 <TrajectoryGenerator+0xa7c>)
 80047ac:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 80047ae:	4b21      	ldr	r3, [pc, #132]	; (8004834 <TrajectoryGenerator+0xa5c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fb fed0 	bl	8000558 <__aeabi_f2d>
 80047b8:	a319      	add	r3, pc, #100	; (adr r3, 8004820 <TrajectoryGenerator+0xa48>)
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	f7fb fd6d 	bl	800029c <__adddf3>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4610      	mov	r0, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	f7fc fa15 	bl	8000bf8 <__aeabi_d2f>
 80047ce:	4603      	mov	r3, r0
 80047d0:	4a18      	ldr	r2, [pc, #96]	; (8004834 <TrajectoryGenerator+0xa5c>)
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	e01f      	b.n	8004816 <TrajectoryGenerator+0xa3e>
		 else if(time > tacc+tconst+tdec+initime){
 80047d6:	4b14      	ldr	r3, [pc, #80]	; (8004828 <TrajectoryGenerator+0xa50>)
 80047d8:	ed93 7a00 	vldr	s14, [r3]
 80047dc:	4b13      	ldr	r3, [pc, #76]	; (800482c <TrajectoryGenerator+0xa54>)
 80047de:	edd3 7a00 	vldr	s15, [r3]
 80047e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047e6:	4b14      	ldr	r3, [pc, #80]	; (8004838 <TrajectoryGenerator+0xa60>)
 80047e8:	edd3 7a00 	vldr	s15, [r3]
 80047ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047f0:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <TrajectoryGenerator+0xa58>)
 80047f2:	edd3 7a00 	vldr	s15, [r3]
 80047f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047fa:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <TrajectoryGenerator+0xa5c>)
 80047fc:	edd3 7a00 	vldr	s15, [r3]
 8004800:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004808:	d400      	bmi.n	800480c <TrajectoryGenerator+0xa34>
		 break;
 800480a:	e006      	b.n	800481a <TrajectoryGenerator+0xa42>
			 setposition = qf;
 800480c:	4b12      	ldr	r3, [pc, #72]	; (8004858 <TrajectoryGenerator+0xa80>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a10      	ldr	r2, [pc, #64]	; (8004854 <TrajectoryGenerator+0xa7c>)
 8004812:	6013      	str	r3, [r2, #0]
		 break;
 8004814:	e001      	b.n	800481a <TrajectoryGenerator+0xa42>
 8004816:	e000      	b.n	800481a <TrajectoryGenerator+0xa42>
	case 3: // wait state
//		setposition = position;
		break;
 8004818:	bf00      	nop
	}

}
 800481a:	bf00      	nop
 800481c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004820:	d2f1a9fc 	.word	0xd2f1a9fc
 8004824:	3f50624d 	.word	0x3f50624d
 8004828:	20000998 	.word	0x20000998
 800482c:	200009a4 	.word	0x200009a4
 8004830:	20000980 	.word	0x20000980
 8004834:	20000970 	.word	0x20000970
 8004838:	200009a8 	.word	0x200009a8
 800483c:	20000214 	.word	0x20000214
 8004840:	200009dc 	.word	0x200009dc
 8004844:	2000098c 	.word	0x2000098c
 8004848:	200009d8 	.word	0x200009d8
 800484c:	20000994 	.word	0x20000994
 8004850:	3fe00000 	.word	0x3fe00000
 8004854:	200009b8 	.word	0x200009b8
 8004858:	20000974 	.word	0x20000974

0800485c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004860:	b672      	cpsid	i
}
 8004862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004864:	e7fe      	b.n	8004864 <Error_Handler+0x8>
	...

08004868 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	607b      	str	r3, [r7, #4]
 8004872:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <HAL_MspInit+0x4c>)
 8004874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004876:	4a0f      	ldr	r2, [pc, #60]	; (80048b4 <HAL_MspInit+0x4c>)
 8004878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800487c:	6453      	str	r3, [r2, #68]	; 0x44
 800487e:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <HAL_MspInit+0x4c>)
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004886:	607b      	str	r3, [r7, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	603b      	str	r3, [r7, #0]
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <HAL_MspInit+0x4c>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <HAL_MspInit+0x4c>)
 8004894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004898:	6413      	str	r3, [r2, #64]	; 0x40
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <HAL_MspInit+0x4c>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80048a6:	2007      	movs	r0, #7
 80048a8:	f001 f9ae 	bl	8005c08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40023800 	.word	0x40023800

080048b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08a      	sub	sp, #40	; 0x28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c0:	f107 0314 	add.w	r3, r7, #20
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	605a      	str	r2, [r3, #4]
 80048ca:	609a      	str	r2, [r3, #8]
 80048cc:	60da      	str	r2, [r3, #12]
 80048ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a2f      	ldr	r2, [pc, #188]	; (8004994 <HAL_ADC_MspInit+0xdc>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d157      	bne.n	800498a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80048da:	2300      	movs	r3, #0
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	4b2e      	ldr	r3, [pc, #184]	; (8004998 <HAL_ADC_MspInit+0xe0>)
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e2:	4a2d      	ldr	r2, [pc, #180]	; (8004998 <HAL_ADC_MspInit+0xe0>)
 80048e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e8:	6453      	str	r3, [r2, #68]	; 0x44
 80048ea:	4b2b      	ldr	r3, [pc, #172]	; (8004998 <HAL_ADC_MspInit+0xe0>)
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	4b27      	ldr	r3, [pc, #156]	; (8004998 <HAL_ADC_MspInit+0xe0>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	4a26      	ldr	r2, [pc, #152]	; (8004998 <HAL_ADC_MspInit+0xe0>)
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	6313      	str	r3, [r2, #48]	; 0x30
 8004906:	4b24      	ldr	r3, [pc, #144]	; (8004998 <HAL_ADC_MspInit+0xe0>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004912:	2303      	movs	r3, #3
 8004914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004916:	2303      	movs	r3, #3
 8004918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491a:	2300      	movs	r3, #0
 800491c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800491e:	f107 0314 	add.w	r3, r7, #20
 8004922:	4619      	mov	r1, r3
 8004924:	481d      	ldr	r0, [pc, #116]	; (800499c <HAL_ADC_MspInit+0xe4>)
 8004926:	f001 fdcd 	bl	80064c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800492a:	4b1d      	ldr	r3, [pc, #116]	; (80049a0 <HAL_ADC_MspInit+0xe8>)
 800492c:	4a1d      	ldr	r2, [pc, #116]	; (80049a4 <HAL_ADC_MspInit+0xec>)
 800492e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004930:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <HAL_ADC_MspInit+0xe8>)
 8004932:	2200      	movs	r2, #0
 8004934:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004936:	4b1a      	ldr	r3, [pc, #104]	; (80049a0 <HAL_ADC_MspInit+0xe8>)
 8004938:	2200      	movs	r2, #0
 800493a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800493c:	4b18      	ldr	r3, [pc, #96]	; (80049a0 <HAL_ADC_MspInit+0xe8>)
 800493e:	2200      	movs	r2, #0
 8004940:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004942:	4b17      	ldr	r3, [pc, #92]	; (80049a0 <HAL_ADC_MspInit+0xe8>)
 8004944:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004948:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800494a:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <HAL_ADC_MspInit+0xe8>)
 800494c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004950:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004952:	4b13      	ldr	r3, [pc, #76]	; (80049a0 <HAL_ADC_MspInit+0xe8>)
 8004954:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004958:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800495a:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <HAL_ADC_MspInit+0xe8>)
 800495c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004960:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004962:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <HAL_ADC_MspInit+0xe8>)
 8004964:	2200      	movs	r2, #0
 8004966:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004968:	4b0d      	ldr	r3, [pc, #52]	; (80049a0 <HAL_ADC_MspInit+0xe8>)
 800496a:	2200      	movs	r2, #0
 800496c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800496e:	480c      	ldr	r0, [pc, #48]	; (80049a0 <HAL_ADC_MspInit+0xe8>)
 8004970:	f001 f98c 	bl	8005c8c <HAL_DMA_Init>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800497a:	f7ff ff6f 	bl	800485c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a07      	ldr	r2, [pc, #28]	; (80049a0 <HAL_ADC_MspInit+0xe8>)
 8004982:	639a      	str	r2, [r3, #56]	; 0x38
 8004984:	4a06      	ldr	r2, [pc, #24]	; (80049a0 <HAL_ADC_MspInit+0xe8>)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800498a:	bf00      	nop
 800498c:	3728      	adds	r7, #40	; 0x28
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40012000 	.word	0x40012000
 8004998:	40023800 	.word	0x40023800
 800499c:	40020000 	.word	0x40020000
 80049a0:	20000498 	.word	0x20000498
 80049a4:	40026410 	.word	0x40026410

080049a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08a      	sub	sp, #40	; 0x28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b0:	f107 0314 	add.w	r3, r7, #20
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	605a      	str	r2, [r3, #4]
 80049ba:	609a      	str	r2, [r3, #8]
 80049bc:	60da      	str	r2, [r3, #12]
 80049be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a21      	ldr	r2, [pc, #132]	; (8004a4c <HAL_I2C_MspInit+0xa4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d13c      	bne.n	8004a44 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049ca:	2300      	movs	r3, #0
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <HAL_I2C_MspInit+0xa8>)
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	4a1f      	ldr	r2, [pc, #124]	; (8004a50 <HAL_I2C_MspInit+0xa8>)
 80049d4:	f043 0302 	orr.w	r3, r3, #2
 80049d8:	6313      	str	r3, [r2, #48]	; 0x30
 80049da:	4b1d      	ldr	r3, [pc, #116]	; (8004a50 <HAL_I2C_MspInit+0xa8>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80049e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80049ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049ec:	2312      	movs	r3, #18
 80049ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049f4:	2303      	movs	r3, #3
 80049f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80049f8:	2304      	movs	r3, #4
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049fc:	f107 0314 	add.w	r3, r7, #20
 8004a00:	4619      	mov	r1, r3
 8004a02:	4814      	ldr	r0, [pc, #80]	; (8004a54 <HAL_I2C_MspInit+0xac>)
 8004a04:	f001 fd5e 	bl	80064c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <HAL_I2C_MspInit+0xa8>)
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	4a0f      	ldr	r2, [pc, #60]	; (8004a50 <HAL_I2C_MspInit+0xa8>)
 8004a12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a16:	6413      	str	r3, [r2, #64]	; 0x40
 8004a18:	4b0d      	ldr	r3, [pc, #52]	; (8004a50 <HAL_I2C_MspInit+0xa8>)
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004a24:	2200      	movs	r2, #0
 8004a26:	2100      	movs	r1, #0
 8004a28:	201f      	movs	r0, #31
 8004a2a:	f001 f8f8 	bl	8005c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004a2e:	201f      	movs	r0, #31
 8004a30:	f001 f911 	bl	8005c56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004a34:	2200      	movs	r2, #0
 8004a36:	2100      	movs	r1, #0
 8004a38:	2020      	movs	r0, #32
 8004a3a:	f001 f8f0 	bl	8005c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004a3e:	2020      	movs	r0, #32
 8004a40:	f001 f909 	bl	8005c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004a44:	bf00      	nop
 8004a46:	3728      	adds	r7, #40	; 0x28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40005400 	.word	0x40005400
 8004a50:	40023800 	.word	0x40023800
 8004a54:	40020400 	.word	0x40020400

08004a58 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a12      	ldr	r2, [pc, #72]	; (8004ab0 <HAL_TIM_PWM_MspInit+0x58>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d11d      	bne.n	8004aa6 <HAL_TIM_PWM_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	4b11      	ldr	r3, [pc, #68]	; (8004ab4 <HAL_TIM_PWM_MspInit+0x5c>)
 8004a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a72:	4a10      	ldr	r2, [pc, #64]	; (8004ab4 <HAL_TIM_PWM_MspInit+0x5c>)
 8004a74:	f043 0301 	orr.w	r3, r3, #1
 8004a78:	6453      	str	r3, [r2, #68]	; 0x44
 8004a7a:	4b0e      	ldr	r3, [pc, #56]	; (8004ab4 <HAL_TIM_PWM_MspInit+0x5c>)
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 5);
 8004a86:	2205      	movs	r2, #5
 8004a88:	2100      	movs	r1, #0
 8004a8a:	2018      	movs	r0, #24
 8004a8c:	f001 f8c7 	bl	8005c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004a90:	2018      	movs	r0, #24
 8004a92:	f001 f8e0 	bl	8005c56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004a96:	2200      	movs	r2, #0
 8004a98:	2100      	movs	r1, #0
 8004a9a:	201a      	movs	r0, #26
 8004a9c:	f001 f8bf 	bl	8005c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004aa0:	201a      	movs	r0, #26
 8004aa2:	f001 f8d8 	bl	8005c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40010000 	.word	0x40010000
 8004ab4:	40023800 	.word	0x40023800

08004ab8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08a      	sub	sp, #40	; 0x28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac0:	f107 0314 	add.w	r3, r7, #20
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	605a      	str	r2, [r3, #4]
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	60da      	str	r2, [r3, #12]
 8004ace:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a19      	ldr	r2, [pc, #100]	; (8004b3c <HAL_TIM_Encoder_MspInit+0x84>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d12b      	bne.n	8004b32 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ada:	2300      	movs	r3, #0
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	4b18      	ldr	r3, [pc, #96]	; (8004b40 <HAL_TIM_Encoder_MspInit+0x88>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	4a17      	ldr	r2, [pc, #92]	; (8004b40 <HAL_TIM_Encoder_MspInit+0x88>)
 8004ae4:	f043 0302 	orr.w	r3, r3, #2
 8004ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aea:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <HAL_TIM_Encoder_MspInit+0x88>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <HAL_TIM_Encoder_MspInit+0x88>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	4a10      	ldr	r2, [pc, #64]	; (8004b40 <HAL_TIM_Encoder_MspInit+0x88>)
 8004b00:	f043 0301 	orr.w	r3, r3, #1
 8004b04:	6313      	str	r3, [r2, #48]	; 0x30
 8004b06:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <HAL_TIM_Encoder_MspInit+0x88>)
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b12:	23c0      	movs	r3, #192	; 0xc0
 8004b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b16:	2302      	movs	r3, #2
 8004b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004b22:	2302      	movs	r3, #2
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b26:	f107 0314 	add.w	r3, r7, #20
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4805      	ldr	r0, [pc, #20]	; (8004b44 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004b2e:	f001 fcc9 	bl	80064c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004b32:	bf00      	nop
 8004b34:	3728      	adds	r7, #40	; 0x28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40023800 	.word	0x40023800
 8004b44:	40020000 	.word	0x40020000

08004b48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a1c      	ldr	r2, [pc, #112]	; (8004bc8 <HAL_TIM_Base_MspInit+0x80>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d116      	bne.n	8004b88 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	4b1b      	ldr	r3, [pc, #108]	; (8004bcc <HAL_TIM_Base_MspInit+0x84>)
 8004b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b62:	4a1a      	ldr	r2, [pc, #104]	; (8004bcc <HAL_TIM_Base_MspInit+0x84>)
 8004b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b68:	6453      	str	r3, [r2, #68]	; 0x44
 8004b6a:	4b18      	ldr	r3, [pc, #96]	; (8004bcc <HAL_TIM_Base_MspInit+0x84>)
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 5);
 8004b76:	2205      	movs	r2, #5
 8004b78:	2100      	movs	r1, #0
 8004b7a:	2018      	movs	r0, #24
 8004b7c:	f001 f84f 	bl	8005c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004b80:	2018      	movs	r0, #24
 8004b82:	f001 f868 	bl	8005c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004b86:	e01a      	b.n	8004bbe <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a10      	ldr	r2, [pc, #64]	; (8004bd0 <HAL_TIM_Base_MspInit+0x88>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d115      	bne.n	8004bbe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004b92:	2300      	movs	r3, #0
 8004b94:	60bb      	str	r3, [r7, #8]
 8004b96:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <HAL_TIM_Base_MspInit+0x84>)
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	4a0c      	ldr	r2, [pc, #48]	; (8004bcc <HAL_TIM_Base_MspInit+0x84>)
 8004b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ba2:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <HAL_TIM_Base_MspInit+0x84>)
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004baa:	60bb      	str	r3, [r7, #8]
 8004bac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004bae:	2200      	movs	r2, #0
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	201a      	movs	r0, #26
 8004bb4:	f001 f833 	bl	8005c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004bb8:	201a      	movs	r0, #26
 8004bba:	f001 f84c 	bl	8005c56 <HAL_NVIC_EnableIRQ>
}
 8004bbe:	bf00      	nop
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40014000 	.word	0x40014000
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	40014800 	.word	0x40014800

08004bd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bdc:	f107 030c 	add.w	r3, r7, #12
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	605a      	str	r2, [r3, #4]
 8004be6:	609a      	str	r2, [r3, #8]
 8004be8:	60da      	str	r2, [r3, #12]
 8004bea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a12      	ldr	r2, [pc, #72]	; (8004c3c <HAL_TIM_MspPostInit+0x68>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d11e      	bne.n	8004c34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <HAL_TIM_MspPostInit+0x6c>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	4a10      	ldr	r2, [pc, #64]	; (8004c40 <HAL_TIM_MspPostInit+0x6c>)
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	6313      	str	r3, [r2, #48]	; 0x30
 8004c06:	4b0e      	ldr	r3, [pc, #56]	; (8004c40 <HAL_TIM_MspPostInit+0x6c>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	60bb      	str	r3, [r7, #8]
 8004c10:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004c12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c20:	2300      	movs	r3, #0
 8004c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004c24:	2301      	movs	r3, #1
 8004c26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c28:	f107 030c 	add.w	r3, r7, #12
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4805      	ldr	r0, [pc, #20]	; (8004c44 <HAL_TIM_MspPostInit+0x70>)
 8004c30:	f001 fc48 	bl	80064c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004c34:	bf00      	nop
 8004c36:	3720      	adds	r7, #32
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40010000 	.word	0x40010000
 8004c40:	40023800 	.word	0x40023800
 8004c44:	40020000 	.word	0x40020000

08004c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08c      	sub	sp, #48	; 0x30
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c50:	f107 031c 	add.w	r3, r7, #28
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	605a      	str	r2, [r3, #4]
 8004c5a:	609a      	str	r2, [r3, #8]
 8004c5c:	60da      	str	r2, [r3, #12]
 8004c5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a60      	ldr	r2, [pc, #384]	; (8004de8 <HAL_UART_MspInit+0x1a0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d153      	bne.n	8004d12 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	4b5f      	ldr	r3, [pc, #380]	; (8004dec <HAL_UART_MspInit+0x1a4>)
 8004c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c72:	4a5e      	ldr	r2, [pc, #376]	; (8004dec <HAL_UART_MspInit+0x1a4>)
 8004c74:	f043 0310 	orr.w	r3, r3, #16
 8004c78:	6453      	str	r3, [r2, #68]	; 0x44
 8004c7a:	4b5c      	ldr	r3, [pc, #368]	; (8004dec <HAL_UART_MspInit+0x1a4>)
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	4b58      	ldr	r3, [pc, #352]	; (8004dec <HAL_UART_MspInit+0x1a4>)
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	4a57      	ldr	r2, [pc, #348]	; (8004dec <HAL_UART_MspInit+0x1a4>)
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	6313      	str	r3, [r2, #48]	; 0x30
 8004c96:	4b55      	ldr	r3, [pc, #340]	; (8004dec <HAL_UART_MspInit+0x1a4>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	4b51      	ldr	r3, [pc, #324]	; (8004dec <HAL_UART_MspInit+0x1a4>)
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	4a50      	ldr	r2, [pc, #320]	; (8004dec <HAL_UART_MspInit+0x1a4>)
 8004cac:	f043 0302 	orr.w	r3, r3, #2
 8004cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cb2:	4b4e      	ldr	r3, [pc, #312]	; (8004dec <HAL_UART_MspInit+0x1a4>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004cd0:	2307      	movs	r3, #7
 8004cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd4:	f107 031c 	add.w	r3, r7, #28
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4845      	ldr	r0, [pc, #276]	; (8004df0 <HAL_UART_MspInit+0x1a8>)
 8004cdc:	f001 fbf2 	bl	80064c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004ce0:	2380      	movs	r3, #128	; 0x80
 8004ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cec:	2303      	movs	r3, #3
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004cf0:	2307      	movs	r3, #7
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cf4:	f107 031c 	add.w	r3, r7, #28
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	483e      	ldr	r0, [pc, #248]	; (8004df4 <HAL_UART_MspInit+0x1ac>)
 8004cfc:	f001 fbe2 	bl	80064c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004d00:	2200      	movs	r2, #0
 8004d02:	2100      	movs	r1, #0
 8004d04:	2025      	movs	r0, #37	; 0x25
 8004d06:	f000 ff8a 	bl	8005c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004d0a:	2025      	movs	r0, #37	; 0x25
 8004d0c:	f000 ffa3 	bl	8005c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004d10:	e066      	b.n	8004de0 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART2)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a38      	ldr	r2, [pc, #224]	; (8004df8 <HAL_UART_MspInit+0x1b0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d161      	bne.n	8004de0 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	4b32      	ldr	r3, [pc, #200]	; (8004dec <HAL_UART_MspInit+0x1a4>)
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	4a31      	ldr	r2, [pc, #196]	; (8004dec <HAL_UART_MspInit+0x1a4>)
 8004d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8004d2c:	4b2f      	ldr	r3, [pc, #188]	; (8004dec <HAL_UART_MspInit+0x1a4>)
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60bb      	str	r3, [r7, #8]
 8004d3c:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <HAL_UART_MspInit+0x1a4>)
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	4a2a      	ldr	r2, [pc, #168]	; (8004dec <HAL_UART_MspInit+0x1a4>)
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	6313      	str	r3, [r2, #48]	; 0x30
 8004d48:	4b28      	ldr	r3, [pc, #160]	; (8004dec <HAL_UART_MspInit+0x1a4>)
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	60bb      	str	r3, [r7, #8]
 8004d52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004d54:	230c      	movs	r3, #12
 8004d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d58:	2302      	movs	r3, #2
 8004d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d60:	2303      	movs	r3, #3
 8004d62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d64:	2307      	movs	r3, #7
 8004d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d68:	f107 031c 	add.w	r3, r7, #28
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4820      	ldr	r0, [pc, #128]	; (8004df0 <HAL_UART_MspInit+0x1a8>)
 8004d70:	f001 fba8 	bl	80064c4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004d74:	4b21      	ldr	r3, [pc, #132]	; (8004dfc <HAL_UART_MspInit+0x1b4>)
 8004d76:	4a22      	ldr	r2, [pc, #136]	; (8004e00 <HAL_UART_MspInit+0x1b8>)
 8004d78:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004d7a:	4b20      	ldr	r3, [pc, #128]	; (8004dfc <HAL_UART_MspInit+0x1b4>)
 8004d7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d80:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d82:	4b1e      	ldr	r3, [pc, #120]	; (8004dfc <HAL_UART_MspInit+0x1b4>)
 8004d84:	2240      	movs	r2, #64	; 0x40
 8004d86:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d88:	4b1c      	ldr	r3, [pc, #112]	; (8004dfc <HAL_UART_MspInit+0x1b4>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d8e:	4b1b      	ldr	r3, [pc, #108]	; (8004dfc <HAL_UART_MspInit+0x1b4>)
 8004d90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d94:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d96:	4b19      	ldr	r3, [pc, #100]	; (8004dfc <HAL_UART_MspInit+0x1b4>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d9c:	4b17      	ldr	r3, [pc, #92]	; (8004dfc <HAL_UART_MspInit+0x1b4>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004da2:	4b16      	ldr	r3, [pc, #88]	; (8004dfc <HAL_UART_MspInit+0x1b4>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004da8:	4b14      	ldr	r3, [pc, #80]	; (8004dfc <HAL_UART_MspInit+0x1b4>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004dae:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <HAL_UART_MspInit+0x1b4>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004db4:	4811      	ldr	r0, [pc, #68]	; (8004dfc <HAL_UART_MspInit+0x1b4>)
 8004db6:	f000 ff69 	bl	8005c8c <HAL_DMA_Init>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8004dc0:	f7ff fd4c 	bl	800485c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a0d      	ldr	r2, [pc, #52]	; (8004dfc <HAL_UART_MspInit+0x1b4>)
 8004dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8004dca:	4a0c      	ldr	r2, [pc, #48]	; (8004dfc <HAL_UART_MspInit+0x1b4>)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	2026      	movs	r0, #38	; 0x26
 8004dd6:	f000 ff22 	bl	8005c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004dda:	2026      	movs	r0, #38	; 0x26
 8004ddc:	f000 ff3b 	bl	8005c56 <HAL_NVIC_EnableIRQ>
}
 8004de0:	bf00      	nop
 8004de2:	3730      	adds	r7, #48	; 0x30
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40011000 	.word	0x40011000
 8004dec:	40023800 	.word	0x40023800
 8004df0:	40020000 	.word	0x40020000
 8004df4:	40020400 	.word	0x40020400
 8004df8:	40004400 	.word	0x40004400
 8004dfc:	20000904 	.word	0x20000904
 8004e00:	400260a0 	.word	0x400260a0

08004e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e08:	e7fe      	b.n	8004e08 <NMI_Handler+0x4>

08004e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e0e:	e7fe      	b.n	8004e0e <HardFault_Handler+0x4>

08004e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e14:	e7fe      	b.n	8004e14 <MemManage_Handler+0x4>

08004e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e16:	b480      	push	{r7}
 8004e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e1a:	e7fe      	b.n	8004e1a <BusFault_Handler+0x4>

08004e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e20:	e7fe      	b.n	8004e20 <UsageFault_Handler+0x4>

08004e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e22:	b480      	push	{r7}
 8004e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e26:	bf00      	nop
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e34:	bf00      	nop
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e42:	bf00      	nop
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e50:	f000 f9c4 	bl	80051dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e54:	bf00      	nop
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004e5c:	2004      	movs	r0, #4
 8004e5e:	f001 fce7 	bl	8006830 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004e62:	bf00      	nop
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004e6a:	2008      	movs	r0, #8
 8004e6c:	f001 fce0 	bl	8006830 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004e70:	bf00      	nop
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004e78:	4802      	ldr	r0, [pc, #8]	; (8004e84 <DMA1_Stream6_IRQHandler+0x10>)
 8004e7a:	f001 f89f 	bl	8005fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004e7e:	bf00      	nop
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20000904 	.word	0x20000904

08004e88 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e8c:	4803      	ldr	r0, [pc, #12]	; (8004e9c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8004e8e:	f005 f81d 	bl	8009ecc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8004e92:	4803      	ldr	r0, [pc, #12]	; (8004ea0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8004e94:	f005 f81a 	bl	8009ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004e98:	bf00      	nop
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	2000054c 	.word	0x2000054c
 8004ea0:	200006b4 	.word	0x200006b4

08004ea4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ea8:	4803      	ldr	r0, [pc, #12]	; (8004eb8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004eaa:	f005 f80f 	bl	8009ecc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004eae:	4803      	ldr	r0, [pc, #12]	; (8004ebc <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004eb0:	f005 f80c 	bl	8009ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004eb4:	bf00      	nop
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	2000054c 	.word	0x2000054c
 8004ebc:	20000768 	.word	0x20000768

08004ec0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004ec4:	4802      	ldr	r0, [pc, #8]	; (8004ed0 <I2C1_EV_IRQHandler+0x10>)
 8004ec6:	f001 ffbb 	bl	8006e40 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004eca:	bf00      	nop
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	200004f8 	.word	0x200004f8

08004ed4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004ed8:	4802      	ldr	r0, [pc, #8]	; (8004ee4 <I2C1_ER_IRQHandler+0x10>)
 8004eda:	f002 f922 	bl	8007122 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004ede:	bf00      	nop
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	200004f8 	.word	0x200004f8

08004ee8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004eec:	4802      	ldr	r0, [pc, #8]	; (8004ef8 <USART1_IRQHandler+0x10>)
 8004eee:	f006 fb3b 	bl	800b568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004ef2:	bf00      	nop
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	2000081c 	.word	0x2000081c

08004efc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f00:	4802      	ldr	r0, [pc, #8]	; (8004f0c <USART2_IRQHandler+0x10>)
 8004f02:	f006 fb31 	bl	800b568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004f06:	bf00      	nop
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000890 	.word	0x20000890

08004f10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004f14:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004f18:	f001 fc8a 	bl	8006830 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004f1c:	bf00      	nop
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f24:	4802      	ldr	r0, [pc, #8]	; (8004f30 <DMA2_Stream0_IRQHandler+0x10>)
 8004f26:	f001 f849 	bl	8005fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004f2a:	bf00      	nop
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	20000498 	.word	0x20000498

08004f34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  return 1;
 8004f38:	2301      	movs	r3, #1
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <_kill>:

int _kill(int pid, int sig)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f4e:	f007 fb51 	bl	800c5f4 <__errno>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2216      	movs	r2, #22
 8004f56:	601a      	str	r2, [r3, #0]
  return -1;
 8004f58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <_exit>:

void _exit (int status)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7ff ffe7 	bl	8004f44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004f76:	e7fe      	b.n	8004f76 <_exit+0x12>

08004f78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	e00a      	b.n	8004fa0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004f8a:	f3af 8000 	nop.w
 8004f8e:	4601      	mov	r1, r0
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	60ba      	str	r2, [r7, #8]
 8004f96:	b2ca      	uxtb	r2, r1
 8004f98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	dbf0      	blt.n	8004f8a <_read+0x12>
  }

  return len;
 8004fa8:	687b      	ldr	r3, [r7, #4]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b086      	sub	sp, #24
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	e009      	b.n	8004fd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	60ba      	str	r2, [r7, #8]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	dbf1      	blt.n	8004fc4 <_write+0x12>
  }
  return len;
 8004fe0:	687b      	ldr	r3, [r7, #4]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <_close>:

int _close(int file)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005012:	605a      	str	r2, [r3, #4]
  return 0;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <_isatty>:

int _isatty(int file)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800502a:	2301      	movs	r3, #1
}
 800502c:	4618      	mov	r0, r3
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
	...

08005054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800505c:	4a14      	ldr	r2, [pc, #80]	; (80050b0 <_sbrk+0x5c>)
 800505e:	4b15      	ldr	r3, [pc, #84]	; (80050b4 <_sbrk+0x60>)
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005068:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <_sbrk+0x64>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d102      	bne.n	8005076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005070:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <_sbrk+0x64>)
 8005072:	4a12      	ldr	r2, [pc, #72]	; (80050bc <_sbrk+0x68>)
 8005074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005076:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <_sbrk+0x64>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	429a      	cmp	r2, r3
 8005082:	d207      	bcs.n	8005094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005084:	f007 fab6 	bl	800c5f4 <__errno>
 8005088:	4603      	mov	r3, r0
 800508a:	220c      	movs	r2, #12
 800508c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800508e:	f04f 33ff 	mov.w	r3, #4294967295
 8005092:	e009      	b.n	80050a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005094:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <_sbrk+0x64>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800509a:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <_sbrk+0x64>)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4413      	add	r3, r2
 80050a2:	4a05      	ldr	r2, [pc, #20]	; (80050b8 <_sbrk+0x64>)
 80050a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050a6:	68fb      	ldr	r3, [r7, #12]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	20020000 	.word	0x20020000
 80050b4:	00000400 	.word	0x00000400
 80050b8:	200010dc 	.word	0x200010dc
 80050bc:	200010f8 	.word	0x200010f8

080050c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050c4:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <SystemInit+0x20>)
 80050c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ca:	4a05      	ldr	r2, [pc, #20]	; (80050e0 <SystemInit+0x20>)
 80050cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	e000ed00 	.word	0xe000ed00

080050e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 80050e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800511c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80050e8:	480d      	ldr	r0, [pc, #52]	; (8005120 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80050ea:	490e      	ldr	r1, [pc, #56]	; (8005124 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80050ec:	4a0e      	ldr	r2, [pc, #56]	; (8005128 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80050ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050f0:	e002      	b.n	80050f8 <LoopCopyDataInit>

080050f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050f6:	3304      	adds	r3, #4

080050f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050fc:	d3f9      	bcc.n	80050f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050fe:	4a0b      	ldr	r2, [pc, #44]	; (800512c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005100:	4c0b      	ldr	r4, [pc, #44]	; (8005130 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005104:	e001      	b.n	800510a <LoopFillZerobss>

08005106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005108:	3204      	adds	r2, #4

0800510a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800510a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800510c:	d3fb      	bcc.n	8005106 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800510e:	f7ff ffd7 	bl	80050c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005112:	f007 fa75 	bl	800c600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005116:	f7fc facf 	bl	80016b8 <main>
  bx  lr    
 800511a:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 800511c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005124:	20000430 	.word	0x20000430
  ldr r2, =_sidata
 8005128:	080116d4 	.word	0x080116d4
  ldr r2, =_sbss
 800512c:	20000430 	.word	0x20000430
  ldr r4, =_ebss
 8005130:	200010f4 	.word	0x200010f4

08005134 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005134:	e7fe      	b.n	8005134 <ADC_IRQHandler>
	...

08005138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800513c:	4b0e      	ldr	r3, [pc, #56]	; (8005178 <HAL_Init+0x40>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a0d      	ldr	r2, [pc, #52]	; (8005178 <HAL_Init+0x40>)
 8005142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005146:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005148:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <HAL_Init+0x40>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a0a      	ldr	r2, [pc, #40]	; (8005178 <HAL_Init+0x40>)
 800514e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005152:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005154:	4b08      	ldr	r3, [pc, #32]	; (8005178 <HAL_Init+0x40>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a07      	ldr	r2, [pc, #28]	; (8005178 <HAL_Init+0x40>)
 800515a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800515e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005160:	2003      	movs	r0, #3
 8005162:	f000 fd51 	bl	8005c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005166:	2000      	movs	r0, #0
 8005168:	f000 f808 	bl	800517c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800516c:	f7ff fb7c 	bl	8004868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40023c00 	.word	0x40023c00

0800517c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005184:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <HAL_InitTick+0x54>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	4b12      	ldr	r3, [pc, #72]	; (80051d4 <HAL_InitTick+0x58>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	4619      	mov	r1, r3
 800518e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005192:	fbb3 f3f1 	udiv	r3, r3, r1
 8005196:	fbb2 f3f3 	udiv	r3, r2, r3
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fd69 	bl	8005c72 <HAL_SYSTICK_Config>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e00e      	b.n	80051c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b0f      	cmp	r3, #15
 80051ae:	d80a      	bhi.n	80051c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051b0:	2200      	movs	r2, #0
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	f04f 30ff 	mov.w	r0, #4294967295
 80051b8:	f000 fd31 	bl	8005c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051bc:	4a06      	ldr	r2, [pc, #24]	; (80051d8 <HAL_InitTick+0x5c>)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	e000      	b.n	80051c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	20000250 	.word	0x20000250
 80051d4:	20000258 	.word	0x20000258
 80051d8:	20000254 	.word	0x20000254

080051dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051e0:	4b06      	ldr	r3, [pc, #24]	; (80051fc <HAL_IncTick+0x20>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	4b06      	ldr	r3, [pc, #24]	; (8005200 <HAL_IncTick+0x24>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4413      	add	r3, r2
 80051ec:	4a04      	ldr	r2, [pc, #16]	; (8005200 <HAL_IncTick+0x24>)
 80051ee:	6013      	str	r3, [r2, #0]
}
 80051f0:	bf00      	nop
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000258 	.word	0x20000258
 8005200:	200010e0 	.word	0x200010e0

08005204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  return uwTick;
 8005208:	4b03      	ldr	r3, [pc, #12]	; (8005218 <HAL_GetTick+0x14>)
 800520a:	681b      	ldr	r3, [r3, #0]
}
 800520c:	4618      	mov	r0, r3
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	200010e0 	.word	0x200010e0

0800521c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005224:	f7ff ffee 	bl	8005204 <HAL_GetTick>
 8005228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005234:	d005      	beq.n	8005242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005236:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <HAL_Delay+0x44>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4413      	add	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005242:	bf00      	nop
 8005244:	f7ff ffde 	bl	8005204 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	429a      	cmp	r2, r3
 8005252:	d8f7      	bhi.n	8005244 <HAL_Delay+0x28>
  {
  }
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000258 	.word	0x20000258

08005264 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800526c:	2300      	movs	r3, #0
 800526e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e033      	b.n	80052e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	d109      	bne.n	8005296 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff fb18 	bl	80048b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d118      	bne.n	80052d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80052aa:	f023 0302 	bic.w	r3, r3, #2
 80052ae:	f043 0202 	orr.w	r2, r3, #2
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fa58 	bl	800576c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	f023 0303 	bic.w	r3, r3, #3
 80052ca:	f043 0201 	orr.w	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	641a      	str	r2, [r3, #64]	; 0x40
 80052d2:	e001      	b.n	80052d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <HAL_ADC_Start_DMA+0x1e>
 8005306:	2302      	movs	r3, #2
 8005308:	e0ce      	b.n	80054a8 <HAL_ADC_Start_DMA+0x1bc>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b01      	cmp	r3, #1
 800531e:	d018      	beq.n	8005352 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005330:	4b5f      	ldr	r3, [pc, #380]	; (80054b0 <HAL_ADC_Start_DMA+0x1c4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a5f      	ldr	r2, [pc, #380]	; (80054b4 <HAL_ADC_Start_DMA+0x1c8>)
 8005336:	fba2 2303 	umull	r2, r3, r2, r3
 800533a:	0c9a      	lsrs	r2, r3, #18
 800533c:	4613      	mov	r3, r2
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	4413      	add	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005344:	e002      	b.n	800534c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	3b01      	subs	r3, #1
 800534a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1f9      	bne.n	8005346 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005360:	d107      	bne.n	8005372 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005370:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b01      	cmp	r3, #1
 800537e:	f040 8086 	bne.w	800548e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800538a:	f023 0301 	bic.w	r3, r3, #1
 800538e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80053ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c0:	d106      	bne.n	80053d0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c6:	f023 0206 	bic.w	r2, r3, #6
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	645a      	str	r2, [r3, #68]	; 0x44
 80053ce:	e002      	b.n	80053d6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053de:	4b36      	ldr	r3, [pc, #216]	; (80054b8 <HAL_ADC_Start_DMA+0x1cc>)
 80053e0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	4a35      	ldr	r2, [pc, #212]	; (80054bc <HAL_ADC_Start_DMA+0x1d0>)
 80053e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ee:	4a34      	ldr	r2, [pc, #208]	; (80054c0 <HAL_ADC_Start_DMA+0x1d4>)
 80053f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	4a33      	ldr	r2, [pc, #204]	; (80054c4 <HAL_ADC_Start_DMA+0x1d8>)
 80053f8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005402:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005412:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005422:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	334c      	adds	r3, #76	; 0x4c
 800542e:	4619      	mov	r1, r3
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f000 fcd8 	bl	8005de8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10f      	bne.n	8005464 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d129      	bne.n	80054a6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005460:	609a      	str	r2, [r3, #8]
 8005462:	e020      	b.n	80054a6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <HAL_ADC_Start_DMA+0x1dc>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d11b      	bne.n	80054a6 <HAL_ADC_Start_DMA+0x1ba>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d114      	bne.n	80054a6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800548a:	609a      	str	r2, [r3, #8]
 800548c:	e00b      	b.n	80054a6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f043 0210 	orr.w	r2, r3, #16
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549e:	f043 0201 	orr.w	r2, r3, #1
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20000250 	.word	0x20000250
 80054b4:	431bde83 	.word	0x431bde83
 80054b8:	40012300 	.word	0x40012300
 80054bc:	08005965 	.word	0x08005965
 80054c0:	08005a1f 	.word	0x08005a1f
 80054c4:	08005a3b 	.word	0x08005a3b
 80054c8:	40012000 	.word	0x40012000

080054cc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_ADC_ConfigChannel+0x1c>
 8005520:	2302      	movs	r3, #2
 8005522:	e113      	b.n	800574c <HAL_ADC_ConfigChannel+0x244>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b09      	cmp	r3, #9
 8005532:	d925      	bls.n	8005580 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68d9      	ldr	r1, [r3, #12]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	b29b      	uxth	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	4613      	mov	r3, r2
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	4413      	add	r3, r2
 8005548:	3b1e      	subs	r3, #30
 800554a:	2207      	movs	r2, #7
 800554c:	fa02 f303 	lsl.w	r3, r2, r3
 8005550:	43da      	mvns	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	400a      	ands	r2, r1
 8005558:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68d9      	ldr	r1, [r3, #12]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	4618      	mov	r0, r3
 800556c:	4603      	mov	r3, r0
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	4403      	add	r3, r0
 8005572:	3b1e      	subs	r3, #30
 8005574:	409a      	lsls	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	60da      	str	r2, [r3, #12]
 800557e:	e022      	b.n	80055c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6919      	ldr	r1, [r3, #16]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	4613      	mov	r3, r2
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	4413      	add	r3, r2
 8005594:	2207      	movs	r2, #7
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	43da      	mvns	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	400a      	ands	r2, r1
 80055a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6919      	ldr	r1, [r3, #16]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	4618      	mov	r0, r3
 80055b6:	4603      	mov	r3, r0
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	4403      	add	r3, r0
 80055bc:	409a      	lsls	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b06      	cmp	r3, #6
 80055cc:	d824      	bhi.n	8005618 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	4613      	mov	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	3b05      	subs	r3, #5
 80055e0:	221f      	movs	r2, #31
 80055e2:	fa02 f303 	lsl.w	r3, r2, r3
 80055e6:	43da      	mvns	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	400a      	ands	r2, r1
 80055ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	4618      	mov	r0, r3
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	3b05      	subs	r3, #5
 800560a:	fa00 f203 	lsl.w	r2, r0, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	635a      	str	r2, [r3, #52]	; 0x34
 8005616:	e04c      	b.n	80056b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b0c      	cmp	r3, #12
 800561e:	d824      	bhi.n	800566a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	4613      	mov	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	3b23      	subs	r3, #35	; 0x23
 8005632:	221f      	movs	r2, #31
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	43da      	mvns	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	400a      	ands	r2, r1
 8005640:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	b29b      	uxth	r3, r3
 800564e:	4618      	mov	r0, r3
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	3b23      	subs	r3, #35	; 0x23
 800565c:	fa00 f203 	lsl.w	r2, r0, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
 8005668:	e023      	b.n	80056b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	3b41      	subs	r3, #65	; 0x41
 800567c:	221f      	movs	r2, #31
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	43da      	mvns	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	400a      	ands	r2, r1
 800568a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	b29b      	uxth	r3, r3
 8005698:	4618      	mov	r0, r3
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	3b41      	subs	r3, #65	; 0x41
 80056a6:	fa00 f203 	lsl.w	r2, r0, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056b2:	4b29      	ldr	r3, [pc, #164]	; (8005758 <HAL_ADC_ConfigChannel+0x250>)
 80056b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a28      	ldr	r2, [pc, #160]	; (800575c <HAL_ADC_ConfigChannel+0x254>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d10f      	bne.n	80056e0 <HAL_ADC_ConfigChannel+0x1d8>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b12      	cmp	r3, #18
 80056c6:	d10b      	bne.n	80056e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1d      	ldr	r2, [pc, #116]	; (800575c <HAL_ADC_ConfigChannel+0x254>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d12b      	bne.n	8005742 <HAL_ADC_ConfigChannel+0x23a>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1c      	ldr	r2, [pc, #112]	; (8005760 <HAL_ADC_ConfigChannel+0x258>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d003      	beq.n	80056fc <HAL_ADC_ConfigChannel+0x1f4>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b11      	cmp	r3, #17
 80056fa:	d122      	bne.n	8005742 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a11      	ldr	r2, [pc, #68]	; (8005760 <HAL_ADC_ConfigChannel+0x258>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d111      	bne.n	8005742 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800571e:	4b11      	ldr	r3, [pc, #68]	; (8005764 <HAL_ADC_ConfigChannel+0x25c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a11      	ldr	r2, [pc, #68]	; (8005768 <HAL_ADC_ConfigChannel+0x260>)
 8005724:	fba2 2303 	umull	r2, r3, r2, r3
 8005728:	0c9a      	lsrs	r2, r3, #18
 800572a:	4613      	mov	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005734:	e002      	b.n	800573c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	3b01      	subs	r3, #1
 800573a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f9      	bne.n	8005736 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	40012300 	.word	0x40012300
 800575c:	40012000 	.word	0x40012000
 8005760:	10000012 	.word	0x10000012
 8005764:	20000250 	.word	0x20000250
 8005768:	431bde83 	.word	0x431bde83

0800576c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005774:	4b79      	ldr	r3, [pc, #484]	; (800595c <ADC_Init+0x1f0>)
 8005776:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	431a      	orrs	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6859      	ldr	r1, [r3, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	021a      	lsls	r2, r3, #8
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80057c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6859      	ldr	r1, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6899      	ldr	r1, [r3, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fe:	4a58      	ldr	r2, [pc, #352]	; (8005960 <ADC_Init+0x1f4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d022      	beq.n	800584a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005812:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6899      	ldr	r1, [r3, #8]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005834:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6899      	ldr	r1, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	609a      	str	r2, [r3, #8]
 8005848:	e00f      	b.n	800586a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005858:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005868:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0202 	bic.w	r2, r2, #2
 8005878:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6899      	ldr	r1, [r3, #8]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	7e1b      	ldrb	r3, [r3, #24]
 8005884:	005a      	lsls	r2, r3, #1
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01b      	beq.n	80058d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80058b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6859      	ldr	r1, [r3, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	3b01      	subs	r3, #1
 80058c4:	035a      	lsls	r2, r3, #13
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
 80058ce:	e007      	b.n	80058e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80058ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	051a      	lsls	r2, r3, #20
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6899      	ldr	r1, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005922:	025a      	lsls	r2, r3, #9
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6899      	ldr	r1, [r3, #8]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	029a      	lsls	r2, r3, #10
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	609a      	str	r2, [r3, #8]
}
 8005950:	bf00      	nop
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	40012300 	.word	0x40012300
 8005960:	0f000001 	.word	0x0f000001

08005964 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800597a:	2b00      	cmp	r3, #0
 800597c:	d13c      	bne.n	80059f8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d12b      	bne.n	80059f0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800599c:	2b00      	cmp	r3, #0
 800599e:	d127      	bne.n	80059f0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d006      	beq.n	80059bc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d119      	bne.n	80059f0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0220 	bic.w	r2, r2, #32
 80059ca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d105      	bne.n	80059f0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	f043 0201 	orr.w	r2, r3, #1
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f7ff fd6b 	bl	80054cc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80059f6:	e00e      	b.n	8005a16 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7ff fd75 	bl	80054f4 <HAL_ADC_ErrorCallback>
}
 8005a0a:	e004      	b.n	8005a16 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	4798      	blx	r3
}
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f7ff fd57 	bl	80054e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a32:	bf00      	nop
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2240      	movs	r2, #64	; 0x40
 8005a4c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a52:	f043 0204 	orr.w	r2, r3, #4
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f7ff fd4a 	bl	80054f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a60:	bf00      	nop
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f003 0307 	and.w	r3, r3, #7
 8005a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a78:	4b0c      	ldr	r3, [pc, #48]	; (8005aac <__NVIC_SetPriorityGrouping+0x44>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a84:	4013      	ands	r3, r2
 8005a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a9a:	4a04      	ldr	r2, [pc, #16]	; (8005aac <__NVIC_SetPriorityGrouping+0x44>)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	60d3      	str	r3, [r2, #12]
}
 8005aa0:	bf00      	nop
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	e000ed00 	.word	0xe000ed00

08005ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ab4:	4b04      	ldr	r3, [pc, #16]	; (8005ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	0a1b      	lsrs	r3, r3, #8
 8005aba:	f003 0307 	and.w	r3, r3, #7
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	e000ed00 	.word	0xe000ed00

08005acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	db0b      	blt.n	8005af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	f003 021f 	and.w	r2, r3, #31
 8005ae4:	4907      	ldr	r1, [pc, #28]	; (8005b04 <__NVIC_EnableIRQ+0x38>)
 8005ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aea:	095b      	lsrs	r3, r3, #5
 8005aec:	2001      	movs	r0, #1
 8005aee:	fa00 f202 	lsl.w	r2, r0, r2
 8005af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	e000e100 	.word	0xe000e100

08005b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	6039      	str	r1, [r7, #0]
 8005b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	db0a      	blt.n	8005b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	490c      	ldr	r1, [pc, #48]	; (8005b54 <__NVIC_SetPriority+0x4c>)
 8005b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b26:	0112      	lsls	r2, r2, #4
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	440b      	add	r3, r1
 8005b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b30:	e00a      	b.n	8005b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	4908      	ldr	r1, [pc, #32]	; (8005b58 <__NVIC_SetPriority+0x50>)
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	3b04      	subs	r3, #4
 8005b40:	0112      	lsls	r2, r2, #4
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	440b      	add	r3, r1
 8005b46:	761a      	strb	r2, [r3, #24]
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	e000e100 	.word	0xe000e100
 8005b58:	e000ed00 	.word	0xe000ed00

08005b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b089      	sub	sp, #36	; 0x24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	f1c3 0307 	rsb	r3, r3, #7
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	bf28      	it	cs
 8005b7a:	2304      	movcs	r3, #4
 8005b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	3304      	adds	r3, #4
 8005b82:	2b06      	cmp	r3, #6
 8005b84:	d902      	bls.n	8005b8c <NVIC_EncodePriority+0x30>
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	3b03      	subs	r3, #3
 8005b8a:	e000      	b.n	8005b8e <NVIC_EncodePriority+0x32>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b90:	f04f 32ff 	mov.w	r2, #4294967295
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9a:	43da      	mvns	r2, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	401a      	ands	r2, r3
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	fa01 f303 	lsl.w	r3, r1, r3
 8005bae:	43d9      	mvns	r1, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bb4:	4313      	orrs	r3, r2
         );
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3724      	adds	r7, #36	; 0x24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
	...

08005bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bd4:	d301      	bcc.n	8005bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e00f      	b.n	8005bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bda:	4a0a      	ldr	r2, [pc, #40]	; (8005c04 <SysTick_Config+0x40>)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005be2:	210f      	movs	r1, #15
 8005be4:	f04f 30ff 	mov.w	r0, #4294967295
 8005be8:	f7ff ff8e 	bl	8005b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bec:	4b05      	ldr	r3, [pc, #20]	; (8005c04 <SysTick_Config+0x40>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bf2:	4b04      	ldr	r3, [pc, #16]	; (8005c04 <SysTick_Config+0x40>)
 8005bf4:	2207      	movs	r2, #7
 8005bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	e000e010 	.word	0xe000e010

08005c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff ff29 	bl	8005a68 <__NVIC_SetPriorityGrouping>
}
 8005c16:	bf00      	nop
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b086      	sub	sp, #24
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	4603      	mov	r3, r0
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	607a      	str	r2, [r7, #4]
 8005c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c30:	f7ff ff3e 	bl	8005ab0 <__NVIC_GetPriorityGrouping>
 8005c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	6978      	ldr	r0, [r7, #20]
 8005c3c:	f7ff ff8e 	bl	8005b5c <NVIC_EncodePriority>
 8005c40:	4602      	mov	r2, r0
 8005c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c46:	4611      	mov	r1, r2
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff ff5d 	bl	8005b08 <__NVIC_SetPriority>
}
 8005c4e:	bf00      	nop
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff ff31 	bl	8005acc <__NVIC_EnableIRQ>
}
 8005c6a:	bf00      	nop
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b082      	sub	sp, #8
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff ffa2 	bl	8005bc4 <SysTick_Config>
 8005c80:	4603      	mov	r3, r0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
	...

08005c8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c98:	f7ff fab4 	bl	8005204 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e099      	b.n	8005ddc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0201 	bic.w	r2, r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cc8:	e00f      	b.n	8005cea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cca:	f7ff fa9b 	bl	8005204 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	2b05      	cmp	r3, #5
 8005cd6:	d908      	bls.n	8005cea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2203      	movs	r2, #3
 8005ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e078      	b.n	8005ddc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1e8      	bne.n	8005cca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4b38      	ldr	r3, [pc, #224]	; (8005de4 <HAL_DMA_Init+0x158>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d107      	bne.n	8005d54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f023 0307 	bic.w	r3, r3, #7
 8005d6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	d117      	bne.n	8005dae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00e      	beq.n	8005dae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fb1b 	bl	80063cc <DMA_CheckFifoParam>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d008      	beq.n	8005dae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2240      	movs	r2, #64	; 0x40
 8005da0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005daa:	2301      	movs	r3, #1
 8005dac:	e016      	b.n	8005ddc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fad2 	bl	8006360 <DMA_CalcBaseAndBitshift>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc4:	223f      	movs	r2, #63	; 0x3f
 8005dc6:	409a      	lsls	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	f010803f 	.word	0xf010803f

08005de8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d101      	bne.n	8005e0e <HAL_DMA_Start_IT+0x26>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	e040      	b.n	8005e90 <HAL_DMA_Start_IT+0xa8>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d12f      	bne.n	8005e82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2202      	movs	r2, #2
 8005e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	68b9      	ldr	r1, [r7, #8]
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 fa64 	bl	8006304 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e40:	223f      	movs	r2, #63	; 0x3f
 8005e42:	409a      	lsls	r2, r3
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0216 	orr.w	r2, r2, #22
 8005e56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d007      	beq.n	8005e70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0208 	orr.w	r2, r2, #8
 8005e6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0201 	orr.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	e005      	b.n	8005e8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005ea6:	f7ff f9ad 	bl	8005204 <HAL_GetTick>
 8005eaa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d008      	beq.n	8005eca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2280      	movs	r2, #128	; 0x80
 8005ebc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e052      	b.n	8005f70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0216 	bic.w	r2, r2, #22
 8005ed8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695a      	ldr	r2, [r3, #20]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ee8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d103      	bne.n	8005efa <HAL_DMA_Abort+0x62>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d007      	beq.n	8005f0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0208 	bic.w	r2, r2, #8
 8005f08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0201 	bic.w	r2, r2, #1
 8005f18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f1a:	e013      	b.n	8005f44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f1c:	f7ff f972 	bl	8005204 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	d90c      	bls.n	8005f44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2203      	movs	r2, #3
 8005f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e015      	b.n	8005f70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e4      	bne.n	8005f1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f56:	223f      	movs	r2, #63	; 0x3f
 8005f58:	409a      	lsls	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d004      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2280      	movs	r2, #128	; 0x80
 8005f90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e00c      	b.n	8005fb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2205      	movs	r2, #5
 8005f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0201 	bic.w	r2, r2, #1
 8005fac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005fc8:	4b8e      	ldr	r3, [pc, #568]	; (8006204 <HAL_DMA_IRQHandler+0x248>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a8e      	ldr	r2, [pc, #568]	; (8006208 <HAL_DMA_IRQHandler+0x24c>)
 8005fce:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd2:	0a9b      	lsrs	r3, r3, #10
 8005fd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe6:	2208      	movs	r2, #8
 8005fe8:	409a      	lsls	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	4013      	ands	r3, r2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d01a      	beq.n	8006028 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d013      	beq.n	8006028 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0204 	bic.w	r2, r2, #4
 800600e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006014:	2208      	movs	r2, #8
 8006016:	409a      	lsls	r2, r3
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006020:	f043 0201 	orr.w	r2, r3, #1
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800602c:	2201      	movs	r2, #1
 800602e:	409a      	lsls	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4013      	ands	r3, r2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d012      	beq.n	800605e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00b      	beq.n	800605e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604a:	2201      	movs	r2, #1
 800604c:	409a      	lsls	r2, r3
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006056:	f043 0202 	orr.w	r2, r3, #2
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006062:	2204      	movs	r2, #4
 8006064:	409a      	lsls	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4013      	ands	r3, r2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d012      	beq.n	8006094 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00b      	beq.n	8006094 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006080:	2204      	movs	r2, #4
 8006082:	409a      	lsls	r2, r3
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608c:	f043 0204 	orr.w	r2, r3, #4
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006098:	2210      	movs	r2, #16
 800609a:	409a      	lsls	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4013      	ands	r3, r2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d043      	beq.n	800612c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0308 	and.w	r3, r3, #8
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d03c      	beq.n	800612c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b6:	2210      	movs	r2, #16
 80060b8:	409a      	lsls	r2, r3
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d018      	beq.n	80060fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d108      	bne.n	80060ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d024      	beq.n	800612c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	4798      	blx	r3
 80060ea:	e01f      	b.n	800612c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d01b      	beq.n	800612c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	4798      	blx	r3
 80060fc:	e016      	b.n	800612c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006108:	2b00      	cmp	r3, #0
 800610a:	d107      	bne.n	800611c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0208 	bic.w	r2, r2, #8
 800611a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006130:	2220      	movs	r2, #32
 8006132:	409a      	lsls	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4013      	ands	r3, r2
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 808f 	beq.w	800625c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0310 	and.w	r3, r3, #16
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 8087 	beq.w	800625c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006152:	2220      	movs	r2, #32
 8006154:	409a      	lsls	r2, r3
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b05      	cmp	r3, #5
 8006164:	d136      	bne.n	80061d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0216 	bic.w	r2, r2, #22
 8006174:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	695a      	ldr	r2, [r3, #20]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006184:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	2b00      	cmp	r3, #0
 800618c:	d103      	bne.n	8006196 <HAL_DMA_IRQHandler+0x1da>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006192:	2b00      	cmp	r3, #0
 8006194:	d007      	beq.n	80061a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0208 	bic.w	r2, r2, #8
 80061a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061aa:	223f      	movs	r2, #63	; 0x3f
 80061ac:	409a      	lsls	r2, r3
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d07e      	beq.n	80062c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	4798      	blx	r3
        }
        return;
 80061d2:	e079      	b.n	80062c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d01d      	beq.n	800621e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10d      	bne.n	800620c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d031      	beq.n	800625c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	4798      	blx	r3
 8006200:	e02c      	b.n	800625c <HAL_DMA_IRQHandler+0x2a0>
 8006202:	bf00      	nop
 8006204:	20000250 	.word	0x20000250
 8006208:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006210:	2b00      	cmp	r3, #0
 8006212:	d023      	beq.n	800625c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	4798      	blx	r3
 800621c:	e01e      	b.n	800625c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10f      	bne.n	800624c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0210 	bic.w	r2, r2, #16
 800623a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006260:	2b00      	cmp	r3, #0
 8006262:	d032      	beq.n	80062ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b00      	cmp	r3, #0
 800626e:	d022      	beq.n	80062b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2205      	movs	r2, #5
 8006274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0201 	bic.w	r2, r2, #1
 8006286:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	3301      	adds	r3, #1
 800628c:	60bb      	str	r3, [r7, #8]
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	429a      	cmp	r2, r3
 8006292:	d307      	bcc.n	80062a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f2      	bne.n	8006288 <HAL_DMA_IRQHandler+0x2cc>
 80062a2:	e000      	b.n	80062a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80062a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d005      	beq.n	80062ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	4798      	blx	r3
 80062c6:	e000      	b.n	80062ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80062c8:	bf00      	nop
    }
  }
}
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062de:	b2db      	uxtb	r3, r3
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006320:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2b40      	cmp	r3, #64	; 0x40
 8006330:	d108      	bne.n	8006344 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006342:	e007      	b.n	8006354 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	60da      	str	r2, [r3, #12]
}
 8006354:	bf00      	nop
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	3b10      	subs	r3, #16
 8006370:	4a14      	ldr	r2, [pc, #80]	; (80063c4 <DMA_CalcBaseAndBitshift+0x64>)
 8006372:	fba2 2303 	umull	r2, r3, r2, r3
 8006376:	091b      	lsrs	r3, r3, #4
 8006378:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800637a:	4a13      	ldr	r2, [pc, #76]	; (80063c8 <DMA_CalcBaseAndBitshift+0x68>)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4413      	add	r3, r2
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b03      	cmp	r3, #3
 800638c:	d909      	bls.n	80063a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006396:	f023 0303 	bic.w	r3, r3, #3
 800639a:	1d1a      	adds	r2, r3, #4
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	659a      	str	r2, [r3, #88]	; 0x58
 80063a0:	e007      	b.n	80063b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80063aa:	f023 0303 	bic.w	r3, r3, #3
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	aaaaaaab 	.word	0xaaaaaaab
 80063c8:	08011214 	.word	0x08011214

080063cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d11f      	bne.n	8006426 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d856      	bhi.n	800649a <DMA_CheckFifoParam+0xce>
 80063ec:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <DMA_CheckFifoParam+0x28>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	08006405 	.word	0x08006405
 80063f8:	08006417 	.word	0x08006417
 80063fc:	08006405 	.word	0x08006405
 8006400:	0800649b 	.word	0x0800649b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d046      	beq.n	800649e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006414:	e043      	b.n	800649e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800641e:	d140      	bne.n	80064a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006424:	e03d      	b.n	80064a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800642e:	d121      	bne.n	8006474 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b03      	cmp	r3, #3
 8006434:	d837      	bhi.n	80064a6 <DMA_CheckFifoParam+0xda>
 8006436:	a201      	add	r2, pc, #4	; (adr r2, 800643c <DMA_CheckFifoParam+0x70>)
 8006438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643c:	0800644d 	.word	0x0800644d
 8006440:	08006453 	.word	0x08006453
 8006444:	0800644d 	.word	0x0800644d
 8006448:	08006465 	.word	0x08006465
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	73fb      	strb	r3, [r7, #15]
      break;
 8006450:	e030      	b.n	80064b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d025      	beq.n	80064aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006462:	e022      	b.n	80064aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006468:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800646c:	d11f      	bne.n	80064ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006472:	e01c      	b.n	80064ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b02      	cmp	r3, #2
 8006478:	d903      	bls.n	8006482 <DMA_CheckFifoParam+0xb6>
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b03      	cmp	r3, #3
 800647e:	d003      	beq.n	8006488 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006480:	e018      	b.n	80064b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	73fb      	strb	r3, [r7, #15]
      break;
 8006486:	e015      	b.n	80064b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00e      	beq.n	80064b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	73fb      	strb	r3, [r7, #15]
      break;
 8006498:	e00b      	b.n	80064b2 <DMA_CheckFifoParam+0xe6>
      break;
 800649a:	bf00      	nop
 800649c:	e00a      	b.n	80064b4 <DMA_CheckFifoParam+0xe8>
      break;
 800649e:	bf00      	nop
 80064a0:	e008      	b.n	80064b4 <DMA_CheckFifoParam+0xe8>
      break;
 80064a2:	bf00      	nop
 80064a4:	e006      	b.n	80064b4 <DMA_CheckFifoParam+0xe8>
      break;
 80064a6:	bf00      	nop
 80064a8:	e004      	b.n	80064b4 <DMA_CheckFifoParam+0xe8>
      break;
 80064aa:	bf00      	nop
 80064ac:	e002      	b.n	80064b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80064ae:	bf00      	nop
 80064b0:	e000      	b.n	80064b4 <DMA_CheckFifoParam+0xe8>
      break;
 80064b2:	bf00      	nop
    }
  } 
  
  return status; 
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop

080064c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b089      	sub	sp, #36	; 0x24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064da:	2300      	movs	r3, #0
 80064dc:	61fb      	str	r3, [r7, #28]
 80064de:	e159      	b.n	8006794 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064e0:	2201      	movs	r2, #1
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	fa02 f303 	lsl.w	r3, r2, r3
 80064e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4013      	ands	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	f040 8148 	bne.w	800678e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f003 0303 	and.w	r3, r3, #3
 8006506:	2b01      	cmp	r3, #1
 8006508:	d005      	beq.n	8006516 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006512:	2b02      	cmp	r3, #2
 8006514:	d130      	bne.n	8006578 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	2203      	movs	r2, #3
 8006522:	fa02 f303 	lsl.w	r3, r2, r3
 8006526:	43db      	mvns	r3, r3
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	4013      	ands	r3, r2
 800652c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	4313      	orrs	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800654c:	2201      	movs	r2, #1
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	fa02 f303 	lsl.w	r3, r2, r3
 8006554:	43db      	mvns	r3, r3
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	4013      	ands	r3, r2
 800655a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	091b      	lsrs	r3, r3, #4
 8006562:	f003 0201 	and.w	r2, r3, #1
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	fa02 f303 	lsl.w	r3, r2, r3
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	4313      	orrs	r3, r2
 8006570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	2b03      	cmp	r3, #3
 8006582:	d017      	beq.n	80065b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	2203      	movs	r2, #3
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	43db      	mvns	r3, r3
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	4013      	ands	r3, r2
 800659a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	fa02 f303 	lsl.w	r3, r2, r3
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f003 0303 	and.w	r3, r3, #3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d123      	bne.n	8006608 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	08da      	lsrs	r2, r3, #3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3208      	adds	r2, #8
 80065c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	f003 0307 	and.w	r3, r3, #7
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	220f      	movs	r2, #15
 80065d8:	fa02 f303 	lsl.w	r3, r2, r3
 80065dc:	43db      	mvns	r3, r3
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	4013      	ands	r3, r2
 80065e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	691a      	ldr	r2, [r3, #16]
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f003 0307 	and.w	r3, r3, #7
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	08da      	lsrs	r2, r3, #3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3208      	adds	r2, #8
 8006602:	69b9      	ldr	r1, [r7, #24]
 8006604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	2203      	movs	r2, #3
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	43db      	mvns	r3, r3
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	4013      	ands	r3, r2
 800661e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f003 0203 	and.w	r2, r3, #3
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	fa02 f303 	lsl.w	r3, r2, r3
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	4313      	orrs	r3, r2
 8006634:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 80a2 	beq.w	800678e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800664a:	2300      	movs	r3, #0
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	4b57      	ldr	r3, [pc, #348]	; (80067ac <HAL_GPIO_Init+0x2e8>)
 8006650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006652:	4a56      	ldr	r2, [pc, #344]	; (80067ac <HAL_GPIO_Init+0x2e8>)
 8006654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006658:	6453      	str	r3, [r2, #68]	; 0x44
 800665a:	4b54      	ldr	r3, [pc, #336]	; (80067ac <HAL_GPIO_Init+0x2e8>)
 800665c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006666:	4a52      	ldr	r2, [pc, #328]	; (80067b0 <HAL_GPIO_Init+0x2ec>)
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	089b      	lsrs	r3, r3, #2
 800666c:	3302      	adds	r3, #2
 800666e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	220f      	movs	r2, #15
 800667e:	fa02 f303 	lsl.w	r3, r2, r3
 8006682:	43db      	mvns	r3, r3
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	4013      	ands	r3, r2
 8006688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a49      	ldr	r2, [pc, #292]	; (80067b4 <HAL_GPIO_Init+0x2f0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d019      	beq.n	80066c6 <HAL_GPIO_Init+0x202>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a48      	ldr	r2, [pc, #288]	; (80067b8 <HAL_GPIO_Init+0x2f4>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d013      	beq.n	80066c2 <HAL_GPIO_Init+0x1fe>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a47      	ldr	r2, [pc, #284]	; (80067bc <HAL_GPIO_Init+0x2f8>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00d      	beq.n	80066be <HAL_GPIO_Init+0x1fa>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a46      	ldr	r2, [pc, #280]	; (80067c0 <HAL_GPIO_Init+0x2fc>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d007      	beq.n	80066ba <HAL_GPIO_Init+0x1f6>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a45      	ldr	r2, [pc, #276]	; (80067c4 <HAL_GPIO_Init+0x300>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d101      	bne.n	80066b6 <HAL_GPIO_Init+0x1f2>
 80066b2:	2304      	movs	r3, #4
 80066b4:	e008      	b.n	80066c8 <HAL_GPIO_Init+0x204>
 80066b6:	2307      	movs	r3, #7
 80066b8:	e006      	b.n	80066c8 <HAL_GPIO_Init+0x204>
 80066ba:	2303      	movs	r3, #3
 80066bc:	e004      	b.n	80066c8 <HAL_GPIO_Init+0x204>
 80066be:	2302      	movs	r3, #2
 80066c0:	e002      	b.n	80066c8 <HAL_GPIO_Init+0x204>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <HAL_GPIO_Init+0x204>
 80066c6:	2300      	movs	r3, #0
 80066c8:	69fa      	ldr	r2, [r7, #28]
 80066ca:	f002 0203 	and.w	r2, r2, #3
 80066ce:	0092      	lsls	r2, r2, #2
 80066d0:	4093      	lsls	r3, r2
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066d8:	4935      	ldr	r1, [pc, #212]	; (80067b0 <HAL_GPIO_Init+0x2ec>)
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	089b      	lsrs	r3, r3, #2
 80066de:	3302      	adds	r3, #2
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066e6:	4b38      	ldr	r3, [pc, #224]	; (80067c8 <HAL_GPIO_Init+0x304>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	43db      	mvns	r3, r3
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	4013      	ands	r3, r2
 80066f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006702:	69ba      	ldr	r2, [r7, #24]
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800670a:	4a2f      	ldr	r2, [pc, #188]	; (80067c8 <HAL_GPIO_Init+0x304>)
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006710:	4b2d      	ldr	r3, [pc, #180]	; (80067c8 <HAL_GPIO_Init+0x304>)
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	43db      	mvns	r3, r3
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	4013      	ands	r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006734:	4a24      	ldr	r2, [pc, #144]	; (80067c8 <HAL_GPIO_Init+0x304>)
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800673a:	4b23      	ldr	r3, [pc, #140]	; (80067c8 <HAL_GPIO_Init+0x304>)
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	43db      	mvns	r3, r3
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	4013      	ands	r3, r2
 8006748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	4313      	orrs	r3, r2
 800675c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800675e:	4a1a      	ldr	r2, [pc, #104]	; (80067c8 <HAL_GPIO_Init+0x304>)
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006764:	4b18      	ldr	r3, [pc, #96]	; (80067c8 <HAL_GPIO_Init+0x304>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	43db      	mvns	r3, r3
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	4013      	ands	r3, r2
 8006772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	4313      	orrs	r3, r2
 8006786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006788:	4a0f      	ldr	r2, [pc, #60]	; (80067c8 <HAL_GPIO_Init+0x304>)
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	3301      	adds	r3, #1
 8006792:	61fb      	str	r3, [r7, #28]
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	2b0f      	cmp	r3, #15
 8006798:	f67f aea2 	bls.w	80064e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800679c:	bf00      	nop
 800679e:	bf00      	nop
 80067a0:	3724      	adds	r7, #36	; 0x24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	40023800 	.word	0x40023800
 80067b0:	40013800 	.word	0x40013800
 80067b4:	40020000 	.word	0x40020000
 80067b8:	40020400 	.word	0x40020400
 80067bc:	40020800 	.word	0x40020800
 80067c0:	40020c00 	.word	0x40020c00
 80067c4:	40021000 	.word	0x40021000
 80067c8:	40013c00 	.word	0x40013c00

080067cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691a      	ldr	r2, [r3, #16]
 80067dc:	887b      	ldrh	r3, [r7, #2]
 80067de:	4013      	ands	r3, r2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80067e4:	2301      	movs	r3, #1
 80067e6:	73fb      	strb	r3, [r7, #15]
 80067e8:	e001      	b.n	80067ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80067ea:	2300      	movs	r3, #0
 80067ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	807b      	strh	r3, [r7, #2]
 8006808:	4613      	mov	r3, r2
 800680a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800680c:	787b      	ldrb	r3, [r7, #1]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006812:	887a      	ldrh	r2, [r7, #2]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006818:	e003      	b.n	8006822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800681a:	887b      	ldrh	r3, [r7, #2]
 800681c:	041a      	lsls	r2, r3, #16
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	619a      	str	r2, [r3, #24]
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
	...

08006830 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	4603      	mov	r3, r0
 8006838:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800683a:	4b08      	ldr	r3, [pc, #32]	; (800685c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800683c:	695a      	ldr	r2, [r3, #20]
 800683e:	88fb      	ldrh	r3, [r7, #6]
 8006840:	4013      	ands	r3, r2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d006      	beq.n	8006854 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006846:	4a05      	ldr	r2, [pc, #20]	; (800685c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006848:	88fb      	ldrh	r3, [r7, #6]
 800684a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800684c:	88fb      	ldrh	r3, [r7, #6]
 800684e:	4618      	mov	r0, r3
 8006850:	f7fb fe56 	bl	8002500 <HAL_GPIO_EXTI_Callback>
  }
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	40013c00 	.word	0x40013c00

08006860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e12b      	b.n	8006aca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d106      	bne.n	800688c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fe f88e 	bl	80049a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2224      	movs	r2, #36	; 0x24
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0201 	bic.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80068c4:	f002 fe10 	bl	80094e8 <HAL_RCC_GetPCLK1Freq>
 80068c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	4a81      	ldr	r2, [pc, #516]	; (8006ad4 <HAL_I2C_Init+0x274>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d807      	bhi.n	80068e4 <HAL_I2C_Init+0x84>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4a80      	ldr	r2, [pc, #512]	; (8006ad8 <HAL_I2C_Init+0x278>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	bf94      	ite	ls
 80068dc:	2301      	movls	r3, #1
 80068de:	2300      	movhi	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	e006      	b.n	80068f2 <HAL_I2C_Init+0x92>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4a7d      	ldr	r2, [pc, #500]	; (8006adc <HAL_I2C_Init+0x27c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	bf94      	ite	ls
 80068ec:	2301      	movls	r3, #1
 80068ee:	2300      	movhi	r3, #0
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e0e7      	b.n	8006aca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4a78      	ldr	r2, [pc, #480]	; (8006ae0 <HAL_I2C_Init+0x280>)
 80068fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006902:	0c9b      	lsrs	r3, r3, #18
 8006904:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	430a      	orrs	r2, r1
 8006918:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	4a6a      	ldr	r2, [pc, #424]	; (8006ad4 <HAL_I2C_Init+0x274>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d802      	bhi.n	8006934 <HAL_I2C_Init+0xd4>
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	3301      	adds	r3, #1
 8006932:	e009      	b.n	8006948 <HAL_I2C_Init+0xe8>
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800693a:	fb02 f303 	mul.w	r3, r2, r3
 800693e:	4a69      	ldr	r2, [pc, #420]	; (8006ae4 <HAL_I2C_Init+0x284>)
 8006940:	fba2 2303 	umull	r2, r3, r2, r3
 8006944:	099b      	lsrs	r3, r3, #6
 8006946:	3301      	adds	r3, #1
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6812      	ldr	r2, [r2, #0]
 800694c:	430b      	orrs	r3, r1
 800694e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800695a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	495c      	ldr	r1, [pc, #368]	; (8006ad4 <HAL_I2C_Init+0x274>)
 8006964:	428b      	cmp	r3, r1
 8006966:	d819      	bhi.n	800699c <HAL_I2C_Init+0x13c>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	1e59      	subs	r1, r3, #1
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	fbb1 f3f3 	udiv	r3, r1, r3
 8006976:	1c59      	adds	r1, r3, #1
 8006978:	f640 73fc 	movw	r3, #4092	; 0xffc
 800697c:	400b      	ands	r3, r1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <HAL_I2C_Init+0x138>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	1e59      	subs	r1, r3, #1
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006990:	3301      	adds	r3, #1
 8006992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006996:	e051      	b.n	8006a3c <HAL_I2C_Init+0x1dc>
 8006998:	2304      	movs	r3, #4
 800699a:	e04f      	b.n	8006a3c <HAL_I2C_Init+0x1dc>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d111      	bne.n	80069c8 <HAL_I2C_Init+0x168>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	1e58      	subs	r0, r3, #1
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6859      	ldr	r1, [r3, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	005b      	lsls	r3, r3, #1
 80069b0:	440b      	add	r3, r1
 80069b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80069b6:	3301      	adds	r3, #1
 80069b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069bc:	2b00      	cmp	r3, #0
 80069be:	bf0c      	ite	eq
 80069c0:	2301      	moveq	r3, #1
 80069c2:	2300      	movne	r3, #0
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	e012      	b.n	80069ee <HAL_I2C_Init+0x18e>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	1e58      	subs	r0, r3, #1
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6859      	ldr	r1, [r3, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	440b      	add	r3, r1
 80069d6:	0099      	lsls	r1, r3, #2
 80069d8:	440b      	add	r3, r1
 80069da:	fbb0 f3f3 	udiv	r3, r0, r3
 80069de:	3301      	adds	r3, #1
 80069e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	bf0c      	ite	eq
 80069e8:	2301      	moveq	r3, #1
 80069ea:	2300      	movne	r3, #0
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <HAL_I2C_Init+0x196>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e022      	b.n	8006a3c <HAL_I2C_Init+0x1dc>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10e      	bne.n	8006a1c <HAL_I2C_Init+0x1bc>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	1e58      	subs	r0, r3, #1
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6859      	ldr	r1, [r3, #4]
 8006a06:	460b      	mov	r3, r1
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	440b      	add	r3, r1
 8006a0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a10:	3301      	adds	r3, #1
 8006a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1a:	e00f      	b.n	8006a3c <HAL_I2C_Init+0x1dc>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	1e58      	subs	r0, r3, #1
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6859      	ldr	r1, [r3, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	440b      	add	r3, r1
 8006a2a:	0099      	lsls	r1, r3, #2
 8006a2c:	440b      	add	r3, r1
 8006a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a32:	3301      	adds	r3, #1
 8006a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	6809      	ldr	r1, [r1, #0]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69da      	ldr	r2, [r3, #28]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6911      	ldr	r1, [r2, #16]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	68d2      	ldr	r2, [r2, #12]
 8006a76:	4311      	orrs	r1, r2
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6812      	ldr	r2, [r2, #0]
 8006a7c:	430b      	orrs	r3, r1
 8006a7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	695a      	ldr	r2, [r3, #20]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	431a      	orrs	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0201 	orr.w	r2, r2, #1
 8006aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	000186a0 	.word	0x000186a0
 8006ad8:	001e847f 	.word	0x001e847f
 8006adc:	003d08ff 	.word	0x003d08ff
 8006ae0:	431bde83 	.word	0x431bde83
 8006ae4:	10624dd3 	.word	0x10624dd3

08006ae8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af02      	add	r7, sp, #8
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	607a      	str	r2, [r7, #4]
 8006af2:	461a      	mov	r2, r3
 8006af4:	460b      	mov	r3, r1
 8006af6:	817b      	strh	r3, [r7, #10]
 8006af8:	4613      	mov	r3, r2
 8006afa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006afc:	f7fe fb82 	bl	8005204 <HAL_GetTick>
 8006b00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	f040 80e0 	bne.w	8006cd0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	2319      	movs	r3, #25
 8006b16:	2201      	movs	r2, #1
 8006b18:	4970      	ldr	r1, [pc, #448]	; (8006cdc <HAL_I2C_Master_Transmit+0x1f4>)
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f001 fea0 	bl	8008860 <I2C_WaitOnFlagUntilTimeout>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006b26:	2302      	movs	r3, #2
 8006b28:	e0d3      	b.n	8006cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d101      	bne.n	8006b38 <HAL_I2C_Master_Transmit+0x50>
 8006b34:	2302      	movs	r3, #2
 8006b36:	e0cc      	b.n	8006cd2 <HAL_I2C_Master_Transmit+0x1ea>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d007      	beq.n	8006b5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f042 0201 	orr.w	r2, r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2221      	movs	r2, #33	; 0x21
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2210      	movs	r2, #16
 8006b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	893a      	ldrh	r2, [r7, #8]
 8006b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4a50      	ldr	r2, [pc, #320]	; (8006ce0 <HAL_I2C_Master_Transmit+0x1f8>)
 8006b9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006ba0:	8979      	ldrh	r1, [r7, #10]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	6a3a      	ldr	r2, [r7, #32]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f001 fd30 	bl	800860c <I2C_MasterRequestWrite>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e08d      	b.n	8006cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	613b      	str	r3, [r7, #16]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	613b      	str	r3, [r7, #16]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	613b      	str	r3, [r7, #16]
 8006bca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006bcc:	e066      	b.n	8006c9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	6a39      	ldr	r1, [r7, #32]
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f001 ff1a 	bl	8008a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00d      	beq.n	8006bfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d107      	bne.n	8006bf6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e06b      	b.n	8006cd2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	781a      	ldrb	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	3b01      	subs	r3, #1
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c22:	3b01      	subs	r3, #1
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d11b      	bne.n	8006c70 <HAL_I2C_Master_Transmit+0x188>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d017      	beq.n	8006c70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	781a      	ldrb	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	6a39      	ldr	r1, [r7, #32]
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f001 ff0a 	bl	8008a8e <I2C_WaitOnBTFFlagUntilTimeout>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00d      	beq.n	8006c9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c84:	2b04      	cmp	r3, #4
 8006c86:	d107      	bne.n	8006c98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e01a      	b.n	8006cd2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d194      	bne.n	8006bce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e000      	b.n	8006cd2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006cd0:	2302      	movs	r3, #2
  }
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	00100002 	.word	0x00100002
 8006ce0:	ffff0000 	.word	0xffff0000

08006ce4 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	607a      	str	r2, [r7, #4]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	817b      	strh	r3, [r7, #10]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b20      	cmp	r3, #32
 8006d06:	f040 808d 	bne.w	8006e24 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d0a:	4b4a      	ldr	r3, [pc, #296]	; (8006e34 <HAL_I2C_Master_Receive_IT+0x150>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	08db      	lsrs	r3, r3, #3
 8006d10:	4a49      	ldr	r2, [pc, #292]	; (8006e38 <HAL_I2C_Master_Receive_IT+0x154>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	0a1a      	lsrs	r2, r3, #8
 8006d18:	4613      	mov	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009a      	lsls	r2, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d116      	bne.n	8006d5e <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	f043 0220 	orr.w	r2, r3, #32
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e063      	b.n	8006e26 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d0db      	beq.n	8006d24 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d101      	bne.n	8006d7a <HAL_I2C_Master_Receive_IT+0x96>
 8006d76:	2302      	movs	r3, #2
 8006d78:	e055      	b.n	8006e26 <HAL_I2C_Master_Receive_IT+0x142>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d007      	beq.n	8006da0 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0201 	orr.w	r2, r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2222      	movs	r2, #34	; 0x22
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2210      	movs	r2, #16
 8006dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	893a      	ldrh	r2, [r7, #8]
 8006dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4a17      	ldr	r2, [pc, #92]	; (8006e3c <HAL_I2C_Master_Receive_IT+0x158>)
 8006de0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006de2:	897a      	ldrh	r2, [r7, #10]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006dfe:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e0e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e1e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	e000      	b.n	8006e26 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8006e24:	2302      	movs	r3, #2
  }
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	20000250 	.word	0x20000250
 8006e38:	14f8b589 	.word	0x14f8b589
 8006e3c:	ffff0000 	.word	0xffff0000

08006e40 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e60:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e68:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
 8006e6c:	2b10      	cmp	r3, #16
 8006e6e:	d003      	beq.n	8006e78 <HAL_I2C_EV_IRQHandler+0x38>
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	2b40      	cmp	r3, #64	; 0x40
 8006e74:	f040 80c1 	bne.w	8006ffa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10d      	bne.n	8006eae <HAL_I2C_EV_IRQHandler+0x6e>
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006e98:	d003      	beq.n	8006ea2 <HAL_I2C_EV_IRQHandler+0x62>
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006ea0:	d101      	bne.n	8006ea6 <HAL_I2C_EV_IRQHandler+0x66>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e000      	b.n	8006ea8 <HAL_I2C_EV_IRQHandler+0x68>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	f000 8132 	beq.w	8007112 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00c      	beq.n	8006ed2 <HAL_I2C_EV_IRQHandler+0x92>
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	0a5b      	lsrs	r3, r3, #9
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d006      	beq.n	8006ed2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 fe84 	bl	8008bd2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fd83 	bl	80079d6 <I2C_Master_SB>
 8006ed0:	e092      	b.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	08db      	lsrs	r3, r3, #3
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d009      	beq.n	8006ef2 <HAL_I2C_EV_IRQHandler+0xb2>
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	0a5b      	lsrs	r3, r3, #9
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fdf9 	bl	8007ae2 <I2C_Master_ADD10>
 8006ef0:	e082      	b.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	085b      	lsrs	r3, r3, #1
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d009      	beq.n	8006f12 <HAL_I2C_EV_IRQHandler+0xd2>
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	0a5b      	lsrs	r3, r3, #9
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fe13 	bl	8007b36 <I2C_Master_ADDR>
 8006f10:	e072      	b.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	089b      	lsrs	r3, r3, #2
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d03b      	beq.n	8006f96 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f2c:	f000 80f3 	beq.w	8007116 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	09db      	lsrs	r3, r3, #7
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00f      	beq.n	8006f5c <HAL_I2C_EV_IRQHandler+0x11c>
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	0a9b      	lsrs	r3, r3, #10
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d009      	beq.n	8006f5c <HAL_I2C_EV_IRQHandler+0x11c>
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	089b      	lsrs	r3, r3, #2
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d103      	bne.n	8006f5c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f9f3 	bl	8007340 <I2C_MasterTransmit_TXE>
 8006f5a:	e04d      	b.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	089b      	lsrs	r3, r3, #2
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 80d6 	beq.w	8007116 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	0a5b      	lsrs	r3, r3, #9
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 80cf 	beq.w	8007116 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	2b21      	cmp	r3, #33	; 0x21
 8006f7c:	d103      	bne.n	8006f86 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa7a 	bl	8007478 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f84:	e0c7      	b.n	8007116 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	2b40      	cmp	r3, #64	; 0x40
 8006f8a:	f040 80c4 	bne.w	8007116 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fae8 	bl	8007564 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f94:	e0bf      	b.n	8007116 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fa4:	f000 80b7 	beq.w	8007116 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	099b      	lsrs	r3, r3, #6
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00f      	beq.n	8006fd4 <HAL_I2C_EV_IRQHandler+0x194>
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	0a9b      	lsrs	r3, r3, #10
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d009      	beq.n	8006fd4 <HAL_I2C_EV_IRQHandler+0x194>
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	089b      	lsrs	r3, r3, #2
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d103      	bne.n	8006fd4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fb5d 	bl	800768c <I2C_MasterReceive_RXNE>
 8006fd2:	e011      	b.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	089b      	lsrs	r3, r3, #2
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 809a 	beq.w	8007116 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	0a5b      	lsrs	r3, r3, #9
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 8093 	beq.w	8007116 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fc06 	bl	8007802 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ff6:	e08e      	b.n	8007116 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006ff8:	e08d      	b.n	8007116 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d004      	beq.n	800700c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	61fb      	str	r3, [r7, #28]
 800700a:	e007      	b.n	800701c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	085b      	lsrs	r3, r3, #1
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b00      	cmp	r3, #0
 8007026:	d012      	beq.n	800704e <HAL_I2C_EV_IRQHandler+0x20e>
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	0a5b      	lsrs	r3, r3, #9
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00c      	beq.n	800704e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007044:	69b9      	ldr	r1, [r7, #24]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 ffc4 	bl	8007fd4 <I2C_Slave_ADDR>
 800704c:	e066      	b.n	800711c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	091b      	lsrs	r3, r3, #4
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d009      	beq.n	800706e <HAL_I2C_EV_IRQHandler+0x22e>
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	0a5b      	lsrs	r3, r3, #9
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fffe 	bl	8008068 <I2C_Slave_STOPF>
 800706c:	e056      	b.n	800711c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	2b21      	cmp	r3, #33	; 0x21
 8007072:	d002      	beq.n	800707a <HAL_I2C_EV_IRQHandler+0x23a>
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	2b29      	cmp	r3, #41	; 0x29
 8007078:	d125      	bne.n	80070c6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	09db      	lsrs	r3, r3, #7
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00f      	beq.n	80070a6 <HAL_I2C_EV_IRQHandler+0x266>
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	0a9b      	lsrs	r3, r3, #10
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d009      	beq.n	80070a6 <HAL_I2C_EV_IRQHandler+0x266>
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	089b      	lsrs	r3, r3, #2
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	d103      	bne.n	80070a6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 feda 	bl	8007e58 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070a4:	e039      	b.n	800711a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	089b      	lsrs	r3, r3, #2
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d033      	beq.n	800711a <HAL_I2C_EV_IRQHandler+0x2da>
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	0a5b      	lsrs	r3, r3, #9
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d02d      	beq.n	800711a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 ff07 	bl	8007ed2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070c4:	e029      	b.n	800711a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	099b      	lsrs	r3, r3, #6
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00f      	beq.n	80070f2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	0a9b      	lsrs	r3, r3, #10
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d009      	beq.n	80070f2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	089b      	lsrs	r3, r3, #2
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d103      	bne.n	80070f2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 ff12 	bl	8007f14 <I2C_SlaveReceive_RXNE>
 80070f0:	e014      	b.n	800711c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	089b      	lsrs	r3, r3, #2
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00e      	beq.n	800711c <HAL_I2C_EV_IRQHandler+0x2dc>
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	0a5b      	lsrs	r3, r3, #9
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d008      	beq.n	800711c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 ff40 	bl	8007f90 <I2C_SlaveReceive_BTF>
 8007110:	e004      	b.n	800711c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007112:	bf00      	nop
 8007114:	e002      	b.n	800711c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007116:	bf00      	nop
 8007118:	e000      	b.n	800711c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800711a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800711c:	3720      	adds	r7, #32
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b08a      	sub	sp, #40	; 0x28
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800713a:	2300      	movs	r3, #0
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007144:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	0a1b      	lsrs	r3, r3, #8
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00e      	beq.n	8007170 <HAL_I2C_ER_IRQHandler+0x4e>
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	0a1b      	lsrs	r3, r3, #8
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d008      	beq.n	8007170 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	f043 0301 	orr.w	r3, r3, #1
 8007164:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800716e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	0a5b      	lsrs	r3, r3, #9
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00e      	beq.n	800719a <HAL_I2C_ER_IRQHandler+0x78>
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	0a1b      	lsrs	r3, r3, #8
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	2b00      	cmp	r3, #0
 8007186:	d008      	beq.n	800719a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	f043 0302 	orr.w	r3, r3, #2
 800718e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007198:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	0a9b      	lsrs	r3, r3, #10
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d03f      	beq.n	8007226 <HAL_I2C_ER_IRQHandler+0x104>
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	0a1b      	lsrs	r3, r3, #8
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d039      	beq.n	8007226 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80071b2:	7efb      	ldrb	r3, [r7, #27]
 80071b4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071c4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ca:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80071cc:	7ebb      	ldrb	r3, [r7, #26]
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	d112      	bne.n	80071f8 <HAL_I2C_ER_IRQHandler+0xd6>
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10f      	bne.n	80071f8 <HAL_I2C_ER_IRQHandler+0xd6>
 80071d8:	7cfb      	ldrb	r3, [r7, #19]
 80071da:	2b21      	cmp	r3, #33	; 0x21
 80071dc:	d008      	beq.n	80071f0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80071de:	7cfb      	ldrb	r3, [r7, #19]
 80071e0:	2b29      	cmp	r3, #41	; 0x29
 80071e2:	d005      	beq.n	80071f0 <HAL_I2C_ER_IRQHandler+0xce>
 80071e4:	7cfb      	ldrb	r3, [r7, #19]
 80071e6:	2b28      	cmp	r3, #40	; 0x28
 80071e8:	d106      	bne.n	80071f8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2b21      	cmp	r3, #33	; 0x21
 80071ee:	d103      	bne.n	80071f8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f001 f869 	bl	80082c8 <I2C_Slave_AF>
 80071f6:	e016      	b.n	8007226 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007200:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	f043 0304 	orr.w	r3, r3, #4
 8007208:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800720a:	7efb      	ldrb	r3, [r7, #27]
 800720c:	2b10      	cmp	r3, #16
 800720e:	d002      	beq.n	8007216 <HAL_I2C_ER_IRQHandler+0xf4>
 8007210:	7efb      	ldrb	r3, [r7, #27]
 8007212:	2b40      	cmp	r3, #64	; 0x40
 8007214:	d107      	bne.n	8007226 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007224:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	0adb      	lsrs	r3, r3, #11
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00e      	beq.n	8007250 <HAL_I2C_ER_IRQHandler+0x12e>
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	0a1b      	lsrs	r3, r3, #8
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	d008      	beq.n	8007250 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	f043 0308 	orr.w	r3, r3, #8
 8007244:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800724e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	2b00      	cmp	r3, #0
 8007254:	d008      	beq.n	8007268 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	431a      	orrs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 f8a0 	bl	80083a8 <I2C_ITError>
  }
}
 8007268:	bf00      	nop
 800726a:	3728      	adds	r7, #40	; 0x28
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	460b      	mov	r3, r1
 80072ca:	70fb      	strb	r3, [r7, #3]
 80072cc:	4613      	mov	r3, r2
 80072ce:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800734e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007356:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007362:	2b00      	cmp	r3, #0
 8007364:	d150      	bne.n	8007408 <I2C_MasterTransmit_TXE+0xc8>
 8007366:	7bfb      	ldrb	r3, [r7, #15]
 8007368:	2b21      	cmp	r3, #33	; 0x21
 800736a:	d14d      	bne.n	8007408 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b08      	cmp	r3, #8
 8007370:	d01d      	beq.n	80073ae <I2C_MasterTransmit_TXE+0x6e>
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2b20      	cmp	r3, #32
 8007376:	d01a      	beq.n	80073ae <I2C_MasterTransmit_TXE+0x6e>
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800737e:	d016      	beq.n	80073ae <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800738e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2211      	movs	r2, #17
 8007394:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7ff ff62 	bl	8007270 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80073ac:	e060      	b.n	8007470 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073bc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073cc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2220      	movs	r2, #32
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b40      	cmp	r3, #64	; 0x40
 80073e6:	d107      	bne.n	80073f8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff ff7d 	bl	80072f0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80073f6:	e03b      	b.n	8007470 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff ff35 	bl	8007270 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007406:	e033      	b.n	8007470 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	2b21      	cmp	r3, #33	; 0x21
 800740c:	d005      	beq.n	800741a <I2C_MasterTransmit_TXE+0xda>
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	2b40      	cmp	r3, #64	; 0x40
 8007412:	d12d      	bne.n	8007470 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	2b22      	cmp	r3, #34	; 0x22
 8007418:	d12a      	bne.n	8007470 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800741e:	b29b      	uxth	r3, r3
 8007420:	2b00      	cmp	r3, #0
 8007422:	d108      	bne.n	8007436 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007432:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007434:	e01c      	b.n	8007470 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b40      	cmp	r3, #64	; 0x40
 8007440:	d103      	bne.n	800744a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f88e 	bl	8007564 <I2C_MemoryTransmit_TXE_BTF>
}
 8007448:	e012      	b.n	8007470 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	781a      	ldrb	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007464:	b29b      	uxth	r3, r3
 8007466:	3b01      	subs	r3, #1
 8007468:	b29a      	uxth	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800746e:	e7ff      	b.n	8007470 <I2C_MasterTransmit_TXE+0x130>
 8007470:	bf00      	nop
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b21      	cmp	r3, #33	; 0x21
 8007490:	d164      	bne.n	800755c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007496:	b29b      	uxth	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d012      	beq.n	80074c2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a0:	781a      	ldrb	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	3b01      	subs	r3, #1
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80074c0:	e04c      	b.n	800755c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	d01d      	beq.n	8007504 <I2C_MasterTransmit_BTF+0x8c>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	d01a      	beq.n	8007504 <I2C_MasterTransmit_BTF+0x8c>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074d4:	d016      	beq.n	8007504 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074e4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2211      	movs	r2, #17
 80074ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7ff feb7 	bl	8007270 <HAL_I2C_MasterTxCpltCallback>
}
 8007502:	e02b      	b.n	800755c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007512:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007522:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2220      	movs	r2, #32
 800752e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b40      	cmp	r3, #64	; 0x40
 800753c:	d107      	bne.n	800754e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7ff fed2 	bl	80072f0 <HAL_I2C_MemTxCpltCallback>
}
 800754c:	e006      	b.n	800755c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7ff fe8a 	bl	8007270 <HAL_I2C_MasterTxCpltCallback>
}
 800755c:	bf00      	nop
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007572:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007578:	2b00      	cmp	r3, #0
 800757a:	d11d      	bne.n	80075b8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007580:	2b01      	cmp	r3, #1
 8007582:	d10b      	bne.n	800759c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007588:	b2da      	uxtb	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007594:	1c9a      	adds	r2, r3, #2
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800759a:	e073      	b.n	8007684 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	121b      	asrs	r3, r3, #8
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b0:	1c5a      	adds	r2, r3, #1
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80075b6:	e065      	b.n	8007684 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d10b      	bne.n	80075d8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d0:	1c5a      	adds	r2, r3, #1
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80075d6:	e055      	b.n	8007684 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d151      	bne.n	8007684 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	2b22      	cmp	r3, #34	; 0x22
 80075e4:	d10d      	bne.n	8007602 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075f4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007600:	e040      	b.n	8007684 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007606:	b29b      	uxth	r3, r3
 8007608:	2b00      	cmp	r3, #0
 800760a:	d015      	beq.n	8007638 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800760c:	7bfb      	ldrb	r3, [r7, #15]
 800760e:	2b21      	cmp	r3, #33	; 0x21
 8007610:	d112      	bne.n	8007638 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	781a      	ldrb	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800762c:	b29b      	uxth	r3, r3
 800762e:	3b01      	subs	r3, #1
 8007630:	b29a      	uxth	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007636:	e025      	b.n	8007684 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763c:	b29b      	uxth	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d120      	bne.n	8007684 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	2b21      	cmp	r3, #33	; 0x21
 8007646:	d11d      	bne.n	8007684 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007656:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007666:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2220      	movs	r2, #32
 8007672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff fe36 	bl	80072f0 <HAL_I2C_MemTxCpltCallback>
}
 8007684:	bf00      	nop
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b22      	cmp	r3, #34	; 0x22
 800769e:	f040 80ac 	bne.w	80077fa <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d921      	bls.n	80076f4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	691a      	ldr	r2, [r3, #16]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ba:	b2d2      	uxtb	r2, r2
 80076bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	3b01      	subs	r3, #1
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2b03      	cmp	r3, #3
 80076de:	f040 808c 	bne.w	80077fa <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076f0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80076f2:	e082      	b.n	80077fa <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d075      	beq.n	80077e8 <I2C_MasterReceive_RXNE+0x15c>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d002      	beq.n	8007708 <I2C_MasterReceive_RXNE+0x7c>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d16f      	bne.n	80077e8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 fa01 	bl	8008b10 <I2C_WaitOnSTOPRequestThroughIT>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d142      	bne.n	800779a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007722:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007732:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	691a      	ldr	r2, [r3, #16]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	b2d2      	uxtb	r2, r2
 8007740:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007750:	b29b      	uxth	r3, r3
 8007752:	3b01      	subs	r3, #1
 8007754:	b29a      	uxth	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2220      	movs	r2, #32
 800775e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b40      	cmp	r3, #64	; 0x40
 800776c:	d10a      	bne.n	8007784 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff fdc1 	bl	8007304 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007782:	e03a      	b.n	80077fa <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2212      	movs	r2, #18
 8007790:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7ff fd76 	bl	8007284 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007798:	e02f      	b.n	80077fa <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80077a8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	691a      	ldr	r2, [r3, #16]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	b2d2      	uxtb	r2, r2
 80077b6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077bc:	1c5a      	adds	r2, r3, #1
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	3b01      	subs	r3, #1
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff fd99 	bl	8007318 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80077e6:	e008      	b.n	80077fa <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077f6:	605a      	str	r2, [r3, #4]
}
 80077f8:	e7ff      	b.n	80077fa <I2C_MasterReceive_RXNE+0x16e>
 80077fa:	bf00      	nop
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b084      	sub	sp, #16
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007814:	b29b      	uxth	r3, r3
 8007816:	2b04      	cmp	r3, #4
 8007818:	d11b      	bne.n	8007852 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007828:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	691a      	ldr	r2, [r3, #16]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	b2d2      	uxtb	r2, r2
 8007836:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007846:	b29b      	uxth	r3, r3
 8007848:	3b01      	subs	r3, #1
 800784a:	b29a      	uxth	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007850:	e0bd      	b.n	80079ce <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007856:	b29b      	uxth	r3, r3
 8007858:	2b03      	cmp	r3, #3
 800785a:	d129      	bne.n	80078b0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800786a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2b04      	cmp	r3, #4
 8007870:	d00a      	beq.n	8007888 <I2C_MasterReceive_BTF+0x86>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2b02      	cmp	r3, #2
 8007876:	d007      	beq.n	8007888 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007886:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	691a      	ldr	r2, [r3, #16]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007892:	b2d2      	uxtb	r2, r2
 8007894:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	3b01      	subs	r3, #1
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80078ae:	e08e      	b.n	80079ce <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d176      	bne.n	80079a8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d002      	beq.n	80078c6 <I2C_MasterReceive_BTF+0xc4>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b10      	cmp	r3, #16
 80078c4:	d108      	bne.n	80078d8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	e019      	b.n	800790c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b04      	cmp	r3, #4
 80078dc:	d002      	beq.n	80078e4 <I2C_MasterReceive_BTF+0xe2>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d108      	bne.n	80078f6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	e00a      	b.n	800790c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b10      	cmp	r3, #16
 80078fa:	d007      	beq.n	800790c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800790a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	691a      	ldr	r2, [r3, #16]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	b2d2      	uxtb	r2, r2
 8007918:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	1c5a      	adds	r2, r3, #1
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007928:	b29b      	uxth	r3, r3
 800792a:	3b01      	subs	r3, #1
 800792c:	b29a      	uxth	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	691a      	ldr	r2, [r3, #16]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793c:	b2d2      	uxtb	r2, r2
 800793e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007944:	1c5a      	adds	r2, r3, #1
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800794e:	b29b      	uxth	r3, r3
 8007950:	3b01      	subs	r3, #1
 8007952:	b29a      	uxth	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007966:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2220      	movs	r2, #32
 800796c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b40      	cmp	r3, #64	; 0x40
 800797a:	d10a      	bne.n	8007992 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff fcba 	bl	8007304 <HAL_I2C_MemRxCpltCallback>
}
 8007990:	e01d      	b.n	80079ce <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2212      	movs	r2, #18
 800799e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7ff fc6f 	bl	8007284 <HAL_I2C_MasterRxCpltCallback>
}
 80079a6:	e012      	b.n	80079ce <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	691a      	ldr	r2, [r3, #16]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	3b01      	subs	r3, #1
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80079ce:	bf00      	nop
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b40      	cmp	r3, #64	; 0x40
 80079e8:	d117      	bne.n	8007a1a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d109      	bne.n	8007a06 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	461a      	mov	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a02:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007a04:	e067      	b.n	8007ad6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	f043 0301 	orr.w	r3, r3, #1
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	611a      	str	r2, [r3, #16]
}
 8007a18:	e05d      	b.n	8007ad6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a22:	d133      	bne.n	8007a8c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b21      	cmp	r3, #33	; 0x21
 8007a2e:	d109      	bne.n	8007a44 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	461a      	mov	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a40:	611a      	str	r2, [r3, #16]
 8007a42:	e008      	b.n	8007a56 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	f043 0301 	orr.w	r3, r3, #1
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d004      	beq.n	8007a68 <I2C_Master_SB+0x92>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d108      	bne.n	8007a7a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d032      	beq.n	8007ad6 <I2C_Master_SB+0x100>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d02d      	beq.n	8007ad6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a88:	605a      	str	r2, [r3, #4]
}
 8007a8a:	e024      	b.n	8007ad6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10e      	bne.n	8007ab2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	11db      	asrs	r3, r3, #7
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	f003 0306 	and.w	r3, r3, #6
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	f063 030f 	orn	r3, r3, #15
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	611a      	str	r2, [r3, #16]
}
 8007ab0:	e011      	b.n	8007ad6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d10d      	bne.n	8007ad6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	11db      	asrs	r3, r3, #7
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	f003 0306 	and.w	r3, r3, #6
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	f063 030e 	orn	r3, r3, #14
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	611a      	str	r2, [r3, #16]
}
 8007ad6:	bf00      	nop
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b083      	sub	sp, #12
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d004      	beq.n	8007b08 <I2C_Master_ADD10+0x26>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d108      	bne.n	8007b1a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00c      	beq.n	8007b2a <I2C_Master_ADD10+0x48>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d007      	beq.n	8007b2a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b28:	605a      	str	r2, [r3, #4]
  }
}
 8007b2a:	bf00      	nop
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b091      	sub	sp, #68	; 0x44
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b52:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b22      	cmp	r3, #34	; 0x22
 8007b5e:	f040 8169 	bne.w	8007e34 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10f      	bne.n	8007b8a <I2C_Master_ADDR+0x54>
 8007b6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b6e:	2b40      	cmp	r3, #64	; 0x40
 8007b70:	d10b      	bne.n	8007b8a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b72:	2300      	movs	r3, #0
 8007b74:	633b      	str	r3, [r7, #48]	; 0x30
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	633b      	str	r3, [r7, #48]	; 0x30
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	e160      	b.n	8007e4c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d11d      	bne.n	8007bce <I2C_Master_ADDR+0x98>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b9a:	d118      	bne.n	8007bce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bc0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bc6:	1c5a      	adds	r2, r3, #1
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	651a      	str	r2, [r3, #80]	; 0x50
 8007bcc:	e13e      	b.n	8007e4c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d113      	bne.n	8007c00 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bd8:	2300      	movs	r3, #0
 8007bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	e115      	b.n	8007e2c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	f040 808a 	bne.w	8007d20 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c12:	d137      	bne.n	8007c84 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c22:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c32:	d113      	bne.n	8007c5c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c42:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c44:	2300      	movs	r3, #0
 8007c46:	627b      	str	r3, [r7, #36]	; 0x24
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	627b      	str	r3, [r7, #36]	; 0x24
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	e0e7      	b.n	8007e2c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	623b      	str	r3, [r7, #32]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	623b      	str	r3, [r7, #32]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	623b      	str	r3, [r7, #32]
 8007c70:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	e0d3      	b.n	8007e2c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c86:	2b08      	cmp	r3, #8
 8007c88:	d02e      	beq.n	8007ce8 <I2C_Master_ADDR+0x1b2>
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	d02b      	beq.n	8007ce8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c92:	2b12      	cmp	r3, #18
 8007c94:	d102      	bne.n	8007c9c <I2C_Master_ADDR+0x166>
 8007c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d125      	bne.n	8007ce8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	d00e      	beq.n	8007cc0 <I2C_Master_ADDR+0x18a>
 8007ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d00b      	beq.n	8007cc0 <I2C_Master_ADDR+0x18a>
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007caa:	2b10      	cmp	r3, #16
 8007cac:	d008      	beq.n	8007cc0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	e007      	b.n	8007cd0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cce:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61fb      	str	r3, [r7, #28]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	61fb      	str	r3, [r7, #28]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	61fb      	str	r3, [r7, #28]
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	e0a1      	b.n	8007e2c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cf6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	61bb      	str	r3, [r7, #24]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	61bb      	str	r3, [r7, #24]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	61bb      	str	r3, [r7, #24]
 8007d0c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	e085      	b.n	8007e2c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d14d      	bne.n	8007dc6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d016      	beq.n	8007d5e <I2C_Master_ADDR+0x228>
 8007d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d013      	beq.n	8007d5e <I2C_Master_ADDR+0x228>
 8007d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d38:	2b10      	cmp	r3, #16
 8007d3a:	d010      	beq.n	8007d5e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d4a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d5a:	601a      	str	r2, [r3, #0]
 8007d5c:	e007      	b.n	8007d6e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d6c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d7c:	d117      	bne.n	8007dae <I2C_Master_ADDR+0x278>
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d84:	d00b      	beq.n	8007d9e <I2C_Master_ADDR+0x268>
 8007d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d008      	beq.n	8007d9e <I2C_Master_ADDR+0x268>
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8e:	2b08      	cmp	r3, #8
 8007d90:	d005      	beq.n	8007d9e <I2C_Master_ADDR+0x268>
 8007d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d94:	2b10      	cmp	r3, #16
 8007d96:	d002      	beq.n	8007d9e <I2C_Master_ADDR+0x268>
 8007d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9a:	2b20      	cmp	r3, #32
 8007d9c:	d107      	bne.n	8007dae <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007dac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dae:	2300      	movs	r3, #0
 8007db0:	617b      	str	r3, [r7, #20]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	617b      	str	r3, [r7, #20]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	617b      	str	r3, [r7, #20]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	e032      	b.n	8007e2c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dd4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de4:	d117      	bne.n	8007e16 <I2C_Master_ADDR+0x2e0>
 8007de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007dec:	d00b      	beq.n	8007e06 <I2C_Master_ADDR+0x2d0>
 8007dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d008      	beq.n	8007e06 <I2C_Master_ADDR+0x2d0>
 8007df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df6:	2b08      	cmp	r3, #8
 8007df8:	d005      	beq.n	8007e06 <I2C_Master_ADDR+0x2d0>
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	2b10      	cmp	r3, #16
 8007dfe:	d002      	beq.n	8007e06 <I2C_Master_ADDR+0x2d0>
 8007e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e02:	2b20      	cmp	r3, #32
 8007e04:	d107      	bne.n	8007e16 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e14:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e16:	2300      	movs	r3, #0
 8007e18:	613b      	str	r3, [r7, #16]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	613b      	str	r3, [r7, #16]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	613b      	str	r3, [r7, #16]
 8007e2a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007e32:	e00b      	b.n	8007e4c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e34:	2300      	movs	r3, #0
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	68fb      	ldr	r3, [r7, #12]
}
 8007e4a:	e7ff      	b.n	8007e4c <I2C_Master_ADDR+0x316>
 8007e4c:	bf00      	nop
 8007e4e:	3744      	adds	r7, #68	; 0x44
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e66:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d02b      	beq.n	8007eca <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	781a      	ldrb	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	1c5a      	adds	r2, r3, #1
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d114      	bne.n	8007eca <I2C_SlaveTransmit_TXE+0x72>
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
 8007ea2:	2b29      	cmp	r3, #41	; 0x29
 8007ea4:	d111      	bne.n	8007eca <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eb4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2221      	movs	r2, #33	; 0x21
 8007eba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2228      	movs	r2, #40	; 0x28
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7ff f9e7 	bl	8007298 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007eca:	bf00      	nop
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d011      	beq.n	8007f08 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee8:	781a      	ldrb	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	1c5a      	adds	r2, r3, #1
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	3b01      	subs	r3, #1
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f22:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d02c      	beq.n	8007f88 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	691a      	ldr	r2, [r3, #16]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f38:	b2d2      	uxtb	r2, r2
 8007f3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f40:	1c5a      	adds	r2, r3, #1
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d114      	bne.n	8007f88 <I2C_SlaveReceive_RXNE+0x74>
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
 8007f60:	2b2a      	cmp	r3, #42	; 0x2a
 8007f62:	d111      	bne.n	8007f88 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f72:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2222      	movs	r2, #34	; 0x22
 8007f78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2228      	movs	r2, #40	; 0x28
 8007f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7ff f992 	bl	80072ac <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007f88:	bf00      	nop
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d012      	beq.n	8007fc8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	691a      	ldr	r2, [r3, #16]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	b2d2      	uxtb	r2, r2
 8007fae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007fee:	2b28      	cmp	r3, #40	; 0x28
 8007ff0:	d127      	bne.n	8008042 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008000:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	089b      	lsrs	r3, r3, #2
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800800e:	2301      	movs	r3, #1
 8008010:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	09db      	lsrs	r3, r3, #7
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d103      	bne.n	8008026 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	81bb      	strh	r3, [r7, #12]
 8008024:	e002      	b.n	800802c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008034:	89ba      	ldrh	r2, [r7, #12]
 8008036:	7bfb      	ldrb	r3, [r7, #15]
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff f940 	bl	80072c0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008040:	e00e      	b.n	8008060 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008042:	2300      	movs	r3, #0
 8008044:	60bb      	str	r3, [r7, #8]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	695b      	ldr	r3, [r3, #20]
 800804c:	60bb      	str	r3, [r7, #8]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	60bb      	str	r3, [r7, #8]
 8008056:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008060:	bf00      	nop
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008076:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008086:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008088:	2300      	movs	r3, #0
 800808a:	60bb      	str	r3, [r7, #8]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	60bb      	str	r3, [r7, #8]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f042 0201 	orr.w	r2, r2, #1
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080b4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080c4:	d172      	bne.n	80081ac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	2b22      	cmp	r3, #34	; 0x22
 80080ca:	d002      	beq.n	80080d2 <I2C_Slave_STOPF+0x6a>
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	2b2a      	cmp	r3, #42	; 0x2a
 80080d0:	d135      	bne.n	800813e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	b29a      	uxth	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ee:	f043 0204 	orr.w	r2, r3, #4
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008104:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810a:	4618      	mov	r0, r3
 800810c:	f7fe f8e0 	bl	80062d0 <HAL_DMA_GetState>
 8008110:	4603      	mov	r3, r0
 8008112:	2b01      	cmp	r3, #1
 8008114:	d049      	beq.n	80081aa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811a:	4a69      	ldr	r2, [pc, #420]	; (80082c0 <I2C_Slave_STOPF+0x258>)
 800811c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008122:	4618      	mov	r0, r3
 8008124:	f7fd ff28 	bl	8005f78 <HAL_DMA_Abort_IT>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d03d      	beq.n	80081aa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008138:	4610      	mov	r0, r2
 800813a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800813c:	e035      	b.n	80081aa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	b29a      	uxth	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008150:	b29b      	uxth	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d005      	beq.n	8008162 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	f043 0204 	orr.w	r2, r3, #4
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008170:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe f8aa 	bl	80062d0 <HAL_DMA_GetState>
 800817c:	4603      	mov	r3, r0
 800817e:	2b01      	cmp	r3, #1
 8008180:	d014      	beq.n	80081ac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008186:	4a4e      	ldr	r2, [pc, #312]	; (80082c0 <I2C_Slave_STOPF+0x258>)
 8008188:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818e:	4618      	mov	r0, r3
 8008190:	f7fd fef2 	bl	8005f78 <HAL_DMA_Abort_IT>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d008      	beq.n	80081ac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800819e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80081a4:	4610      	mov	r0, r2
 80081a6:	4798      	blx	r3
 80081a8:	e000      	b.n	80081ac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80081aa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d03e      	beq.n	8008234 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	f003 0304 	and.w	r3, r3, #4
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d112      	bne.n	80081ea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	691a      	ldr	r2, [r3, #16]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	b2d2      	uxtb	r2, r2
 80081d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	3b01      	subs	r3, #1
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f4:	2b40      	cmp	r3, #64	; 0x40
 80081f6:	d112      	bne.n	800821e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	691a      	ldr	r2, [r3, #16]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	b2d2      	uxtb	r2, r2
 8008204:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008214:	b29b      	uxth	r3, r3
 8008216:	3b01      	subs	r3, #1
 8008218:	b29a      	uxth	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008222:	b29b      	uxth	r3, r3
 8008224:	2b00      	cmp	r3, #0
 8008226:	d005      	beq.n	8008234 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822c:	f043 0204 	orr.w	r2, r3, #4
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f8b3 	bl	80083a8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008242:	e039      	b.n	80082b8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	2b2a      	cmp	r3, #42	; 0x2a
 8008248:	d109      	bne.n	800825e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2228      	movs	r2, #40	; 0x28
 8008254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7ff f827 	bl	80072ac <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b28      	cmp	r3, #40	; 0x28
 8008268:	d111      	bne.n	800828e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a15      	ldr	r2, [pc, #84]	; (80082c4 <I2C_Slave_STOPF+0x25c>)
 800826e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2220      	movs	r2, #32
 800827a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7ff f828 	bl	80072dc <HAL_I2C_ListenCpltCallback>
}
 800828c:	e014      	b.n	80082b8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008292:	2b22      	cmp	r3, #34	; 0x22
 8008294:	d002      	beq.n	800829c <I2C_Slave_STOPF+0x234>
 8008296:	7bfb      	ldrb	r3, [r7, #15]
 8008298:	2b22      	cmp	r3, #34	; 0x22
 800829a:	d10d      	bne.n	80082b8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2220      	movs	r2, #32
 80082a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7fe fffa 	bl	80072ac <HAL_I2C_SlaveRxCpltCallback>
}
 80082b8:	bf00      	nop
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	08008711 	.word	0x08008711
 80082c4:	ffff0000 	.word	0xffff0000

080082c8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082dc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	2b08      	cmp	r3, #8
 80082e2:	d002      	beq.n	80082ea <I2C_Slave_AF+0x22>
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2b20      	cmp	r3, #32
 80082e8:	d129      	bne.n	800833e <I2C_Slave_AF+0x76>
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
 80082ec:	2b28      	cmp	r3, #40	; 0x28
 80082ee:	d126      	bne.n	800833e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a2c      	ldr	r2, [pc, #176]	; (80083a4 <I2C_Slave_AF+0xdc>)
 80082f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008304:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800830e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800831e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2220      	movs	r2, #32
 800832a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7fe ffd0 	bl	80072dc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800833c:	e02e      	b.n	800839c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	2b21      	cmp	r3, #33	; 0x21
 8008342:	d126      	bne.n	8008392 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a17      	ldr	r2, [pc, #92]	; (80083a4 <I2C_Slave_AF+0xdc>)
 8008348:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2221      	movs	r2, #33	; 0x21
 800834e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2220      	movs	r2, #32
 8008354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800836e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008378:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008388:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7fe ff84 	bl	8007298 <HAL_I2C_SlaveTxCpltCallback>
}
 8008390:	e004      	b.n	800839c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800839a:	615a      	str	r2, [r3, #20]
}
 800839c:	bf00      	nop
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	ffff0000 	.word	0xffff0000

080083a8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80083c0:	7bbb      	ldrb	r3, [r7, #14]
 80083c2:	2b10      	cmp	r3, #16
 80083c4:	d002      	beq.n	80083cc <I2C_ITError+0x24>
 80083c6:	7bbb      	ldrb	r3, [r7, #14]
 80083c8:	2b40      	cmp	r3, #64	; 0x40
 80083ca:	d10a      	bne.n	80083e2 <I2C_ITError+0x3a>
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	2b22      	cmp	r3, #34	; 0x22
 80083d0:	d107      	bne.n	80083e2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083e0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80083e8:	2b28      	cmp	r3, #40	; 0x28
 80083ea:	d107      	bne.n	80083fc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2228      	movs	r2, #40	; 0x28
 80083f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80083fa:	e015      	b.n	8008428 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800840a:	d00a      	beq.n	8008422 <I2C_ITError+0x7a>
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	2b60      	cmp	r3, #96	; 0x60
 8008410:	d007      	beq.n	8008422 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2220      	movs	r2, #32
 8008416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008436:	d162      	bne.n	80084fe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008446:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b01      	cmp	r3, #1
 8008454:	d020      	beq.n	8008498 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845a:	4a6a      	ldr	r2, [pc, #424]	; (8008604 <I2C_ITError+0x25c>)
 800845c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008462:	4618      	mov	r0, r3
 8008464:	f7fd fd88 	bl	8005f78 <HAL_DMA_Abort_IT>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 8089 	beq.w	8008582 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f022 0201 	bic.w	r2, r2, #1
 800847e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2220      	movs	r2, #32
 8008484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800848c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008492:	4610      	mov	r0, r2
 8008494:	4798      	blx	r3
 8008496:	e074      	b.n	8008582 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849c:	4a59      	ldr	r2, [pc, #356]	; (8008604 <I2C_ITError+0x25c>)
 800849e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fd fd67 	bl	8005f78 <HAL_DMA_Abort_IT>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d068      	beq.n	8008582 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ba:	2b40      	cmp	r3, #64	; 0x40
 80084bc:	d10b      	bne.n	80084d6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	691a      	ldr	r2, [r3, #16]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c8:	b2d2      	uxtb	r2, r2
 80084ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	1c5a      	adds	r2, r3, #1
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f022 0201 	bic.w	r2, r2, #1
 80084e4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2220      	movs	r2, #32
 80084ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80084f8:	4610      	mov	r0, r2
 80084fa:	4798      	blx	r3
 80084fc:	e041      	b.n	8008582 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b60      	cmp	r3, #96	; 0x60
 8008508:	d125      	bne.n	8008556 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2220      	movs	r2, #32
 800850e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008522:	2b40      	cmp	r3, #64	; 0x40
 8008524:	d10b      	bne.n	800853e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	691a      	ldr	r2, [r3, #16]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008530:	b2d2      	uxtb	r2, r2
 8008532:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	1c5a      	adds	r2, r3, #1
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 0201 	bic.w	r2, r2, #1
 800854c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7fe feec 	bl	800732c <HAL_I2C_AbortCpltCallback>
 8008554:	e015      	b.n	8008582 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008560:	2b40      	cmp	r3, #64	; 0x40
 8008562:	d10b      	bne.n	800857c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	691a      	ldr	r2, [r3, #16]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	b2d2      	uxtb	r2, r2
 8008570:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	1c5a      	adds	r2, r3, #1
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7fe fecb 	bl	8007318 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008586:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10e      	bne.n	80085b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008598:	2b00      	cmp	r3, #0
 800859a:	d109      	bne.n	80085b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d104      	bne.n	80085b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d007      	beq.n	80085c0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80085be:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085c6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b04      	cmp	r3, #4
 80085d2:	d113      	bne.n	80085fc <I2C_ITError+0x254>
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
 80085d6:	2b28      	cmp	r3, #40	; 0x28
 80085d8:	d110      	bne.n	80085fc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a0a      	ldr	r2, [pc, #40]	; (8008608 <I2C_ITError+0x260>)
 80085de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2220      	movs	r2, #32
 80085ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7fe fe70 	bl	80072dc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80085fc:	bf00      	nop
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	08008711 	.word	0x08008711
 8008608:	ffff0000 	.word	0xffff0000

0800860c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b088      	sub	sp, #32
 8008610:	af02      	add	r7, sp, #8
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	607a      	str	r2, [r7, #4]
 8008616:	603b      	str	r3, [r7, #0]
 8008618:	460b      	mov	r3, r1
 800861a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008620:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2b08      	cmp	r3, #8
 8008626:	d006      	beq.n	8008636 <I2C_MasterRequestWrite+0x2a>
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d003      	beq.n	8008636 <I2C_MasterRequestWrite+0x2a>
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008634:	d108      	bne.n	8008648 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	e00b      	b.n	8008660 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864c:	2b12      	cmp	r3, #18
 800864e:	d107      	bne.n	8008660 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800865e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f000 f8f7 	bl	8008860 <I2C_WaitOnFlagUntilTimeout>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00d      	beq.n	8008694 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008686:	d103      	bne.n	8008690 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800868e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e035      	b.n	8008700 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800869c:	d108      	bne.n	80086b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800869e:	897b      	ldrh	r3, [r7, #10]
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	461a      	mov	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80086ac:	611a      	str	r2, [r3, #16]
 80086ae:	e01b      	b.n	80086e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80086b0:	897b      	ldrh	r3, [r7, #10]
 80086b2:	11db      	asrs	r3, r3, #7
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	f003 0306 	and.w	r3, r3, #6
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	f063 030f 	orn	r3, r3, #15
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	490e      	ldr	r1, [pc, #56]	; (8008708 <I2C_MasterRequestWrite+0xfc>)
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f000 f91d 	bl	800890e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e010      	b.n	8008700 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80086de:	897b      	ldrh	r3, [r7, #10]
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	4907      	ldr	r1, [pc, #28]	; (800870c <I2C_MasterRequestWrite+0x100>)
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 f90d 	bl	800890e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e000      	b.n	8008700 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3718      	adds	r7, #24
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	00010008 	.word	0x00010008
 800870c:	00010002 	.word	0x00010002

08008710 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008718:	2300      	movs	r3, #0
 800871a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008720:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008728:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800872a:	4b4b      	ldr	r3, [pc, #300]	; (8008858 <I2C_DMAAbort+0x148>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	08db      	lsrs	r3, r3, #3
 8008730:	4a4a      	ldr	r2, [pc, #296]	; (800885c <I2C_DMAAbort+0x14c>)
 8008732:	fba2 2303 	umull	r2, r3, r2, r3
 8008736:	0a1a      	lsrs	r2, r3, #8
 8008738:	4613      	mov	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	00da      	lsls	r2, r3, #3
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d106      	bne.n	8008758 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874e:	f043 0220 	orr.w	r2, r3, #32
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008756:	e00a      	b.n	800876e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	3b01      	subs	r3, #1
 800875c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800876c:	d0ea      	beq.n	8008744 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800877a:	2200      	movs	r2, #0
 800877c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878a:	2200      	movs	r2, #0
 800878c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800879c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	2200      	movs	r2, #0
 80087a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b0:	2200      	movs	r2, #0
 80087b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c0:	2200      	movs	r2, #0
 80087c2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f022 0201 	bic.w	r2, r2, #1
 80087d2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b60      	cmp	r3, #96	; 0x60
 80087de:	d10e      	bne.n	80087fe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2200      	movs	r2, #0
 80087f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80087f6:	6978      	ldr	r0, [r7, #20]
 80087f8:	f7fe fd98 	bl	800732c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80087fc:	e027      	b.n	800884e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80087fe:	7cfb      	ldrb	r3, [r7, #19]
 8008800:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008804:	2b28      	cmp	r3, #40	; 0x28
 8008806:	d117      	bne.n	8008838 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f042 0201 	orr.w	r2, r2, #1
 8008816:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008826:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	2200      	movs	r2, #0
 800882c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	2228      	movs	r2, #40	; 0x28
 8008832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008836:	e007      	b.n	8008848 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	2220      	movs	r2, #32
 800883c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008848:	6978      	ldr	r0, [r7, #20]
 800884a:	f7fe fd65 	bl	8007318 <HAL_I2C_ErrorCallback>
}
 800884e:	bf00      	nop
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	20000250 	.word	0x20000250
 800885c:	14f8b589 	.word	0x14f8b589

08008860 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	603b      	str	r3, [r7, #0]
 800886c:	4613      	mov	r3, r2
 800886e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008870:	e025      	b.n	80088be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008878:	d021      	beq.n	80088be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800887a:	f7fc fcc3 	bl	8005204 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	683a      	ldr	r2, [r7, #0]
 8008886:	429a      	cmp	r2, r3
 8008888:	d302      	bcc.n	8008890 <I2C_WaitOnFlagUntilTimeout+0x30>
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d116      	bne.n	80088be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2220      	movs	r2, #32
 800889a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088aa:	f043 0220 	orr.w	r2, r3, #32
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e023      	b.n	8008906 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	0c1b      	lsrs	r3, r3, #16
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d10d      	bne.n	80088e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	43da      	mvns	r2, r3
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	4013      	ands	r3, r2
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	bf0c      	ite	eq
 80088da:	2301      	moveq	r3, #1
 80088dc:	2300      	movne	r3, #0
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	461a      	mov	r2, r3
 80088e2:	e00c      	b.n	80088fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	43da      	mvns	r2, r3
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	4013      	ands	r3, r2
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	bf0c      	ite	eq
 80088f6:	2301      	moveq	r3, #1
 80088f8:	2300      	movne	r3, #0
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	461a      	mov	r2, r3
 80088fe:	79fb      	ldrb	r3, [r7, #7]
 8008900:	429a      	cmp	r2, r3
 8008902:	d0b6      	beq.n	8008872 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
 8008914:	60f8      	str	r0, [r7, #12]
 8008916:	60b9      	str	r1, [r7, #8]
 8008918:	607a      	str	r2, [r7, #4]
 800891a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800891c:	e051      	b.n	80089c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800892c:	d123      	bne.n	8008976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800893c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008946:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2220      	movs	r2, #32
 8008952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008962:	f043 0204 	orr.w	r2, r3, #4
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e046      	b.n	8008a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897c:	d021      	beq.n	80089c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800897e:	f7fc fc41 	bl	8005204 <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	429a      	cmp	r2, r3
 800898c:	d302      	bcc.n	8008994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d116      	bne.n	80089c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2220      	movs	r2, #32
 800899e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	f043 0220 	orr.w	r2, r3, #32
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e020      	b.n	8008a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	0c1b      	lsrs	r3, r3, #16
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d10c      	bne.n	80089e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	43da      	mvns	r2, r3
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	4013      	ands	r3, r2
 80089d8:	b29b      	uxth	r3, r3
 80089da:	2b00      	cmp	r3, #0
 80089dc:	bf14      	ite	ne
 80089de:	2301      	movne	r3, #1
 80089e0:	2300      	moveq	r3, #0
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	e00b      	b.n	80089fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	43da      	mvns	r2, r3
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	4013      	ands	r3, r2
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	bf14      	ite	ne
 80089f8:	2301      	movne	r3, #1
 80089fa:	2300      	moveq	r3, #0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d18d      	bne.n	800891e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a18:	e02d      	b.n	8008a76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 f8aa 	bl	8008b74 <I2C_IsAcknowledgeFailed>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e02d      	b.n	8008a86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a30:	d021      	beq.n	8008a76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a32:	f7fc fbe7 	bl	8005204 <HAL_GetTick>
 8008a36:	4602      	mov	r2, r0
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d302      	bcc.n	8008a48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d116      	bne.n	8008a76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2220      	movs	r2, #32
 8008a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a62:	f043 0220 	orr.w	r2, r3, #32
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e007      	b.n	8008a86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a80:	2b80      	cmp	r3, #128	; 0x80
 8008a82:	d1ca      	bne.n	8008a1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b084      	sub	sp, #16
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	60f8      	str	r0, [r7, #12]
 8008a96:	60b9      	str	r1, [r7, #8]
 8008a98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a9a:	e02d      	b.n	8008af8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 f869 	bl	8008b74 <I2C_IsAcknowledgeFailed>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e02d      	b.n	8008b08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab2:	d021      	beq.n	8008af8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ab4:	f7fc fba6 	bl	8005204 <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d302      	bcc.n	8008aca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d116      	bne.n	8008af8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2220      	movs	r2, #32
 8008ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae4:	f043 0220 	orr.w	r2, r3, #32
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	e007      	b.n	8008b08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	f003 0304 	and.w	r3, r3, #4
 8008b02:	2b04      	cmp	r3, #4
 8008b04:	d1ca      	bne.n	8008a9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008b1c:	4b13      	ldr	r3, [pc, #76]	; (8008b6c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	08db      	lsrs	r3, r3, #3
 8008b22:	4a13      	ldr	r2, [pc, #76]	; (8008b70 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008b24:	fba2 2303 	umull	r2, r3, r2, r3
 8008b28:	0a1a      	lsrs	r2, r3, #8
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3b01      	subs	r3, #1
 8008b36:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d107      	bne.n	8008b4e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b42:	f043 0220 	orr.w	r2, r3, #32
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e008      	b.n	8008b60 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b5c:	d0e9      	beq.n	8008b32 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	20000250 	.word	0x20000250
 8008b70:	14f8b589 	.word	0x14f8b589

08008b74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b8a:	d11b      	bne.n	8008bc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2220      	movs	r2, #32
 8008ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb0:	f043 0204 	orr.w	r2, r3, #4
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	b083      	sub	sp, #12
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bde:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008be2:	d103      	bne.n	8008bec <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008bea:	e007      	b.n	8008bfc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008bf4:	d102      	bne.n	8008bfc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2208      	movs	r2, #8
 8008bfa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e267      	b.n	80090ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d075      	beq.n	8008d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c26:	4b88      	ldr	r3, [pc, #544]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f003 030c 	and.w	r3, r3, #12
 8008c2e:	2b04      	cmp	r3, #4
 8008c30:	d00c      	beq.n	8008c4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c32:	4b85      	ldr	r3, [pc, #532]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c3a:	2b08      	cmp	r3, #8
 8008c3c:	d112      	bne.n	8008c64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c3e:	4b82      	ldr	r3, [pc, #520]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c4a:	d10b      	bne.n	8008c64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c4c:	4b7e      	ldr	r3, [pc, #504]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d05b      	beq.n	8008d10 <HAL_RCC_OscConfig+0x108>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d157      	bne.n	8008d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e242      	b.n	80090ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c6c:	d106      	bne.n	8008c7c <HAL_RCC_OscConfig+0x74>
 8008c6e:	4b76      	ldr	r3, [pc, #472]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a75      	ldr	r2, [pc, #468]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c78:	6013      	str	r3, [r2, #0]
 8008c7a:	e01d      	b.n	8008cb8 <HAL_RCC_OscConfig+0xb0>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c84:	d10c      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x98>
 8008c86:	4b70      	ldr	r3, [pc, #448]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a6f      	ldr	r2, [pc, #444]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	4b6d      	ldr	r3, [pc, #436]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a6c      	ldr	r2, [pc, #432]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c9c:	6013      	str	r3, [r2, #0]
 8008c9e:	e00b      	b.n	8008cb8 <HAL_RCC_OscConfig+0xb0>
 8008ca0:	4b69      	ldr	r3, [pc, #420]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a68      	ldr	r2, [pc, #416]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008caa:	6013      	str	r3, [r2, #0]
 8008cac:	4b66      	ldr	r3, [pc, #408]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a65      	ldr	r2, [pc, #404]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d013      	beq.n	8008ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cc0:	f7fc faa0 	bl	8005204 <HAL_GetTick>
 8008cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cc6:	e008      	b.n	8008cda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cc8:	f7fc fa9c 	bl	8005204 <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	2b64      	cmp	r3, #100	; 0x64
 8008cd4:	d901      	bls.n	8008cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e207      	b.n	80090ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cda:	4b5b      	ldr	r3, [pc, #364]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0f0      	beq.n	8008cc8 <HAL_RCC_OscConfig+0xc0>
 8008ce6:	e014      	b.n	8008d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ce8:	f7fc fa8c 	bl	8005204 <HAL_GetTick>
 8008cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cee:	e008      	b.n	8008d02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cf0:	f7fc fa88 	bl	8005204 <HAL_GetTick>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	2b64      	cmp	r3, #100	; 0x64
 8008cfc:	d901      	bls.n	8008d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e1f3      	b.n	80090ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d02:	4b51      	ldr	r3, [pc, #324]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1f0      	bne.n	8008cf0 <HAL_RCC_OscConfig+0xe8>
 8008d0e:	e000      	b.n	8008d12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d063      	beq.n	8008de6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d1e:	4b4a      	ldr	r3, [pc, #296]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f003 030c 	and.w	r3, r3, #12
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00b      	beq.n	8008d42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d2a:	4b47      	ldr	r3, [pc, #284]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d32:	2b08      	cmp	r3, #8
 8008d34:	d11c      	bne.n	8008d70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d36:	4b44      	ldr	r3, [pc, #272]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d116      	bne.n	8008d70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d42:	4b41      	ldr	r3, [pc, #260]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0302 	and.w	r3, r3, #2
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d005      	beq.n	8008d5a <HAL_RCC_OscConfig+0x152>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d001      	beq.n	8008d5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e1c7      	b.n	80090ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d5a:	4b3b      	ldr	r3, [pc, #236]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	4937      	ldr	r1, [pc, #220]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d6e:	e03a      	b.n	8008de6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d020      	beq.n	8008dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d78:	4b34      	ldr	r3, [pc, #208]	; (8008e4c <HAL_RCC_OscConfig+0x244>)
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d7e:	f7fc fa41 	bl	8005204 <HAL_GetTick>
 8008d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d84:	e008      	b.n	8008d98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d86:	f7fc fa3d 	bl	8005204 <HAL_GetTick>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d901      	bls.n	8008d98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e1a8      	b.n	80090ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d98:	4b2b      	ldr	r3, [pc, #172]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0302 	and.w	r3, r3, #2
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d0f0      	beq.n	8008d86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008da4:	4b28      	ldr	r3, [pc, #160]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	4925      	ldr	r1, [pc, #148]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	600b      	str	r3, [r1, #0]
 8008db8:	e015      	b.n	8008de6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008dba:	4b24      	ldr	r3, [pc, #144]	; (8008e4c <HAL_RCC_OscConfig+0x244>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc0:	f7fc fa20 	bl	8005204 <HAL_GetTick>
 8008dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dc6:	e008      	b.n	8008dda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008dc8:	f7fc fa1c 	bl	8005204 <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d901      	bls.n	8008dda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e187      	b.n	80090ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dda:	4b1b      	ldr	r3, [pc, #108]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0302 	and.w	r3, r3, #2
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1f0      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 0308 	and.w	r3, r3, #8
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d036      	beq.n	8008e60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d016      	beq.n	8008e28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008dfa:	4b15      	ldr	r3, [pc, #84]	; (8008e50 <HAL_RCC_OscConfig+0x248>)
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e00:	f7fc fa00 	bl	8005204 <HAL_GetTick>
 8008e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e06:	e008      	b.n	8008e1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e08:	f7fc f9fc 	bl	8005204 <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d901      	bls.n	8008e1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e167      	b.n	80090ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e1a:	4b0b      	ldr	r3, [pc, #44]	; (8008e48 <HAL_RCC_OscConfig+0x240>)
 8008e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e1e:	f003 0302 	and.w	r3, r3, #2
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0f0      	beq.n	8008e08 <HAL_RCC_OscConfig+0x200>
 8008e26:	e01b      	b.n	8008e60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e28:	4b09      	ldr	r3, [pc, #36]	; (8008e50 <HAL_RCC_OscConfig+0x248>)
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e2e:	f7fc f9e9 	bl	8005204 <HAL_GetTick>
 8008e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e34:	e00e      	b.n	8008e54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e36:	f7fc f9e5 	bl	8005204 <HAL_GetTick>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d907      	bls.n	8008e54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e150      	b.n	80090ea <HAL_RCC_OscConfig+0x4e2>
 8008e48:	40023800 	.word	0x40023800
 8008e4c:	42470000 	.word	0x42470000
 8008e50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e54:	4b88      	ldr	r3, [pc, #544]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1ea      	bne.n	8008e36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 0304 	and.w	r3, r3, #4
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 8097 	beq.w	8008f9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e72:	4b81      	ldr	r3, [pc, #516]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10f      	bne.n	8008e9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e7e:	2300      	movs	r3, #0
 8008e80:	60bb      	str	r3, [r7, #8]
 8008e82:	4b7d      	ldr	r3, [pc, #500]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e86:	4a7c      	ldr	r2, [pc, #496]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8008e8e:	4b7a      	ldr	r3, [pc, #488]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e96:	60bb      	str	r3, [r7, #8]
 8008e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e9e:	4b77      	ldr	r3, [pc, #476]	; (800907c <HAL_RCC_OscConfig+0x474>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d118      	bne.n	8008edc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008eaa:	4b74      	ldr	r3, [pc, #464]	; (800907c <HAL_RCC_OscConfig+0x474>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a73      	ldr	r2, [pc, #460]	; (800907c <HAL_RCC_OscConfig+0x474>)
 8008eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008eb6:	f7fc f9a5 	bl	8005204 <HAL_GetTick>
 8008eba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ebc:	e008      	b.n	8008ed0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ebe:	f7fc f9a1 	bl	8005204 <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d901      	bls.n	8008ed0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e10c      	b.n	80090ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ed0:	4b6a      	ldr	r3, [pc, #424]	; (800907c <HAL_RCC_OscConfig+0x474>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d0f0      	beq.n	8008ebe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d106      	bne.n	8008ef2 <HAL_RCC_OscConfig+0x2ea>
 8008ee4:	4b64      	ldr	r3, [pc, #400]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee8:	4a63      	ldr	r2, [pc, #396]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008eea:	f043 0301 	orr.w	r3, r3, #1
 8008eee:	6713      	str	r3, [r2, #112]	; 0x70
 8008ef0:	e01c      	b.n	8008f2c <HAL_RCC_OscConfig+0x324>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	2b05      	cmp	r3, #5
 8008ef8:	d10c      	bne.n	8008f14 <HAL_RCC_OscConfig+0x30c>
 8008efa:	4b5f      	ldr	r3, [pc, #380]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efe:	4a5e      	ldr	r2, [pc, #376]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008f00:	f043 0304 	orr.w	r3, r3, #4
 8008f04:	6713      	str	r3, [r2, #112]	; 0x70
 8008f06:	4b5c      	ldr	r3, [pc, #368]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f0a:	4a5b      	ldr	r2, [pc, #364]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008f0c:	f043 0301 	orr.w	r3, r3, #1
 8008f10:	6713      	str	r3, [r2, #112]	; 0x70
 8008f12:	e00b      	b.n	8008f2c <HAL_RCC_OscConfig+0x324>
 8008f14:	4b58      	ldr	r3, [pc, #352]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f18:	4a57      	ldr	r2, [pc, #348]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008f1a:	f023 0301 	bic.w	r3, r3, #1
 8008f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8008f20:	4b55      	ldr	r3, [pc, #340]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f24:	4a54      	ldr	r2, [pc, #336]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008f26:	f023 0304 	bic.w	r3, r3, #4
 8008f2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d015      	beq.n	8008f60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f34:	f7fc f966 	bl	8005204 <HAL_GetTick>
 8008f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f3a:	e00a      	b.n	8008f52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f3c:	f7fc f962 	bl	8005204 <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d901      	bls.n	8008f52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e0cb      	b.n	80090ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f52:	4b49      	ldr	r3, [pc, #292]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f56:	f003 0302 	and.w	r3, r3, #2
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d0ee      	beq.n	8008f3c <HAL_RCC_OscConfig+0x334>
 8008f5e:	e014      	b.n	8008f8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f60:	f7fc f950 	bl	8005204 <HAL_GetTick>
 8008f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f66:	e00a      	b.n	8008f7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f68:	f7fc f94c 	bl	8005204 <HAL_GetTick>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d901      	bls.n	8008f7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e0b5      	b.n	80090ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f7e:	4b3e      	ldr	r3, [pc, #248]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f82:	f003 0302 	and.w	r3, r3, #2
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1ee      	bne.n	8008f68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d105      	bne.n	8008f9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f90:	4b39      	ldr	r3, [pc, #228]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f94:	4a38      	ldr	r2, [pc, #224]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f000 80a1 	beq.w	80090e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008fa6:	4b34      	ldr	r3, [pc, #208]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	f003 030c 	and.w	r3, r3, #12
 8008fae:	2b08      	cmp	r3, #8
 8008fb0:	d05c      	beq.n	800906c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d141      	bne.n	800903e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fba:	4b31      	ldr	r3, [pc, #196]	; (8009080 <HAL_RCC_OscConfig+0x478>)
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fc0:	f7fc f920 	bl	8005204 <HAL_GetTick>
 8008fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fc6:	e008      	b.n	8008fda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fc8:	f7fc f91c 	bl	8005204 <HAL_GetTick>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d901      	bls.n	8008fda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e087      	b.n	80090ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fda:	4b27      	ldr	r3, [pc, #156]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1f0      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	69da      	ldr	r2, [r3, #28]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a1b      	ldr	r3, [r3, #32]
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff4:	019b      	lsls	r3, r3, #6
 8008ff6:	431a      	orrs	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffc:	085b      	lsrs	r3, r3, #1
 8008ffe:	3b01      	subs	r3, #1
 8009000:	041b      	lsls	r3, r3, #16
 8009002:	431a      	orrs	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009008:	061b      	lsls	r3, r3, #24
 800900a:	491b      	ldr	r1, [pc, #108]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 800900c:	4313      	orrs	r3, r2
 800900e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009010:	4b1b      	ldr	r3, [pc, #108]	; (8009080 <HAL_RCC_OscConfig+0x478>)
 8009012:	2201      	movs	r2, #1
 8009014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009016:	f7fc f8f5 	bl	8005204 <HAL_GetTick>
 800901a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800901c:	e008      	b.n	8009030 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800901e:	f7fc f8f1 	bl	8005204 <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	2b02      	cmp	r3, #2
 800902a:	d901      	bls.n	8009030 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e05c      	b.n	80090ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009030:	4b11      	ldr	r3, [pc, #68]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009038:	2b00      	cmp	r3, #0
 800903a:	d0f0      	beq.n	800901e <HAL_RCC_OscConfig+0x416>
 800903c:	e054      	b.n	80090e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800903e:	4b10      	ldr	r3, [pc, #64]	; (8009080 <HAL_RCC_OscConfig+0x478>)
 8009040:	2200      	movs	r2, #0
 8009042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009044:	f7fc f8de 	bl	8005204 <HAL_GetTick>
 8009048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800904a:	e008      	b.n	800905e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800904c:	f7fc f8da 	bl	8005204 <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	2b02      	cmp	r3, #2
 8009058:	d901      	bls.n	800905e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e045      	b.n	80090ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800905e:	4b06      	ldr	r3, [pc, #24]	; (8009078 <HAL_RCC_OscConfig+0x470>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1f0      	bne.n	800904c <HAL_RCC_OscConfig+0x444>
 800906a:	e03d      	b.n	80090e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d107      	bne.n	8009084 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e038      	b.n	80090ea <HAL_RCC_OscConfig+0x4e2>
 8009078:	40023800 	.word	0x40023800
 800907c:	40007000 	.word	0x40007000
 8009080:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009084:	4b1b      	ldr	r3, [pc, #108]	; (80090f4 <HAL_RCC_OscConfig+0x4ec>)
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	699b      	ldr	r3, [r3, #24]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d028      	beq.n	80090e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800909c:	429a      	cmp	r2, r3
 800909e:	d121      	bne.n	80090e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d11a      	bne.n	80090e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80090b4:	4013      	ands	r3, r2
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80090ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090bc:	4293      	cmp	r3, r2
 80090be:	d111      	bne.n	80090e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ca:	085b      	lsrs	r3, r3, #1
 80090cc:	3b01      	subs	r3, #1
 80090ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d107      	bne.n	80090e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d001      	beq.n	80090e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e000      	b.n	80090ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3718      	adds	r7, #24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	40023800 	.word	0x40023800

080090f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d101      	bne.n	800910c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e0cc      	b.n	80092a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800910c:	4b68      	ldr	r3, [pc, #416]	; (80092b0 <HAL_RCC_ClockConfig+0x1b8>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 0307 	and.w	r3, r3, #7
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	429a      	cmp	r2, r3
 8009118:	d90c      	bls.n	8009134 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800911a:	4b65      	ldr	r3, [pc, #404]	; (80092b0 <HAL_RCC_ClockConfig+0x1b8>)
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	b2d2      	uxtb	r2, r2
 8009120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009122:	4b63      	ldr	r3, [pc, #396]	; (80092b0 <HAL_RCC_ClockConfig+0x1b8>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 0307 	and.w	r3, r3, #7
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	429a      	cmp	r2, r3
 800912e:	d001      	beq.n	8009134 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e0b8      	b.n	80092a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 0302 	and.w	r3, r3, #2
 800913c:	2b00      	cmp	r3, #0
 800913e:	d020      	beq.n	8009182 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0304 	and.w	r3, r3, #4
 8009148:	2b00      	cmp	r3, #0
 800914a:	d005      	beq.n	8009158 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800914c:	4b59      	ldr	r3, [pc, #356]	; (80092b4 <HAL_RCC_ClockConfig+0x1bc>)
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	4a58      	ldr	r2, [pc, #352]	; (80092b4 <HAL_RCC_ClockConfig+0x1bc>)
 8009152:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009156:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 0308 	and.w	r3, r3, #8
 8009160:	2b00      	cmp	r3, #0
 8009162:	d005      	beq.n	8009170 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009164:	4b53      	ldr	r3, [pc, #332]	; (80092b4 <HAL_RCC_ClockConfig+0x1bc>)
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	4a52      	ldr	r2, [pc, #328]	; (80092b4 <HAL_RCC_ClockConfig+0x1bc>)
 800916a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800916e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009170:	4b50      	ldr	r3, [pc, #320]	; (80092b4 <HAL_RCC_ClockConfig+0x1bc>)
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	494d      	ldr	r1, [pc, #308]	; (80092b4 <HAL_RCC_ClockConfig+0x1bc>)
 800917e:	4313      	orrs	r3, r2
 8009180:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	2b00      	cmp	r3, #0
 800918c:	d044      	beq.n	8009218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d107      	bne.n	80091a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009196:	4b47      	ldr	r3, [pc, #284]	; (80092b4 <HAL_RCC_ClockConfig+0x1bc>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d119      	bne.n	80091d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e07f      	b.n	80092a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d003      	beq.n	80091b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	d107      	bne.n	80091c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091b6:	4b3f      	ldr	r3, [pc, #252]	; (80092b4 <HAL_RCC_ClockConfig+0x1bc>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d109      	bne.n	80091d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e06f      	b.n	80092a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091c6:	4b3b      	ldr	r3, [pc, #236]	; (80092b4 <HAL_RCC_ClockConfig+0x1bc>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 0302 	and.w	r3, r3, #2
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d101      	bne.n	80091d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e067      	b.n	80092a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091d6:	4b37      	ldr	r3, [pc, #220]	; (80092b4 <HAL_RCC_ClockConfig+0x1bc>)
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	f023 0203 	bic.w	r2, r3, #3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	4934      	ldr	r1, [pc, #208]	; (80092b4 <HAL_RCC_ClockConfig+0x1bc>)
 80091e4:	4313      	orrs	r3, r2
 80091e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80091e8:	f7fc f80c 	bl	8005204 <HAL_GetTick>
 80091ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091ee:	e00a      	b.n	8009206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091f0:	f7fc f808 	bl	8005204 <HAL_GetTick>
 80091f4:	4602      	mov	r2, r0
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80091fe:	4293      	cmp	r3, r2
 8009200:	d901      	bls.n	8009206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e04f      	b.n	80092a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009206:	4b2b      	ldr	r3, [pc, #172]	; (80092b4 <HAL_RCC_ClockConfig+0x1bc>)
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f003 020c 	and.w	r2, r3, #12
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	429a      	cmp	r2, r3
 8009216:	d1eb      	bne.n	80091f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009218:	4b25      	ldr	r3, [pc, #148]	; (80092b0 <HAL_RCC_ClockConfig+0x1b8>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 0307 	and.w	r3, r3, #7
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	429a      	cmp	r2, r3
 8009224:	d20c      	bcs.n	8009240 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009226:	4b22      	ldr	r3, [pc, #136]	; (80092b0 <HAL_RCC_ClockConfig+0x1b8>)
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	b2d2      	uxtb	r2, r2
 800922c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800922e:	4b20      	ldr	r3, [pc, #128]	; (80092b0 <HAL_RCC_ClockConfig+0x1b8>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 0307 	and.w	r3, r3, #7
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	429a      	cmp	r2, r3
 800923a:	d001      	beq.n	8009240 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e032      	b.n	80092a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 0304 	and.w	r3, r3, #4
 8009248:	2b00      	cmp	r3, #0
 800924a:	d008      	beq.n	800925e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800924c:	4b19      	ldr	r3, [pc, #100]	; (80092b4 <HAL_RCC_ClockConfig+0x1bc>)
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	4916      	ldr	r1, [pc, #88]	; (80092b4 <HAL_RCC_ClockConfig+0x1bc>)
 800925a:	4313      	orrs	r3, r2
 800925c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f003 0308 	and.w	r3, r3, #8
 8009266:	2b00      	cmp	r3, #0
 8009268:	d009      	beq.n	800927e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800926a:	4b12      	ldr	r3, [pc, #72]	; (80092b4 <HAL_RCC_ClockConfig+0x1bc>)
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	00db      	lsls	r3, r3, #3
 8009278:	490e      	ldr	r1, [pc, #56]	; (80092b4 <HAL_RCC_ClockConfig+0x1bc>)
 800927a:	4313      	orrs	r3, r2
 800927c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800927e:	f000 f821 	bl	80092c4 <HAL_RCC_GetSysClockFreq>
 8009282:	4602      	mov	r2, r0
 8009284:	4b0b      	ldr	r3, [pc, #44]	; (80092b4 <HAL_RCC_ClockConfig+0x1bc>)
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	091b      	lsrs	r3, r3, #4
 800928a:	f003 030f 	and.w	r3, r3, #15
 800928e:	490a      	ldr	r1, [pc, #40]	; (80092b8 <HAL_RCC_ClockConfig+0x1c0>)
 8009290:	5ccb      	ldrb	r3, [r1, r3]
 8009292:	fa22 f303 	lsr.w	r3, r2, r3
 8009296:	4a09      	ldr	r2, [pc, #36]	; (80092bc <HAL_RCC_ClockConfig+0x1c4>)
 8009298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800929a:	4b09      	ldr	r3, [pc, #36]	; (80092c0 <HAL_RCC_ClockConfig+0x1c8>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fb ff6c 	bl	800517c <HAL_InitTick>

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	40023c00 	.word	0x40023c00
 80092b4:	40023800 	.word	0x40023800
 80092b8:	080111fc 	.word	0x080111fc
 80092bc:	20000250 	.word	0x20000250
 80092c0:	20000254 	.word	0x20000254

080092c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092c8:	b094      	sub	sp, #80	; 0x50
 80092ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80092cc:	2300      	movs	r3, #0
 80092ce:	647b      	str	r3, [r7, #68]	; 0x44
 80092d0:	2300      	movs	r3, #0
 80092d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092d4:	2300      	movs	r3, #0
 80092d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80092d8:	2300      	movs	r3, #0
 80092da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092dc:	4b79      	ldr	r3, [pc, #484]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	f003 030c 	and.w	r3, r3, #12
 80092e4:	2b08      	cmp	r3, #8
 80092e6:	d00d      	beq.n	8009304 <HAL_RCC_GetSysClockFreq+0x40>
 80092e8:	2b08      	cmp	r3, #8
 80092ea:	f200 80e1 	bhi.w	80094b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d002      	beq.n	80092f8 <HAL_RCC_GetSysClockFreq+0x34>
 80092f2:	2b04      	cmp	r3, #4
 80092f4:	d003      	beq.n	80092fe <HAL_RCC_GetSysClockFreq+0x3a>
 80092f6:	e0db      	b.n	80094b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80092f8:	4b73      	ldr	r3, [pc, #460]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80092fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80092fc:	e0db      	b.n	80094b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80092fe:	4b73      	ldr	r3, [pc, #460]	; (80094cc <HAL_RCC_GetSysClockFreq+0x208>)
 8009300:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009302:	e0d8      	b.n	80094b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009304:	4b6f      	ldr	r3, [pc, #444]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800930c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800930e:	4b6d      	ldr	r3, [pc, #436]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009316:	2b00      	cmp	r3, #0
 8009318:	d063      	beq.n	80093e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800931a:	4b6a      	ldr	r3, [pc, #424]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	099b      	lsrs	r3, r3, #6
 8009320:	2200      	movs	r2, #0
 8009322:	63bb      	str	r3, [r7, #56]	; 0x38
 8009324:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800932c:	633b      	str	r3, [r7, #48]	; 0x30
 800932e:	2300      	movs	r3, #0
 8009330:	637b      	str	r3, [r7, #52]	; 0x34
 8009332:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009336:	4622      	mov	r2, r4
 8009338:	462b      	mov	r3, r5
 800933a:	f04f 0000 	mov.w	r0, #0
 800933e:	f04f 0100 	mov.w	r1, #0
 8009342:	0159      	lsls	r1, r3, #5
 8009344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009348:	0150      	lsls	r0, r2, #5
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	4621      	mov	r1, r4
 8009350:	1a51      	subs	r1, r2, r1
 8009352:	6139      	str	r1, [r7, #16]
 8009354:	4629      	mov	r1, r5
 8009356:	eb63 0301 	sbc.w	r3, r3, r1
 800935a:	617b      	str	r3, [r7, #20]
 800935c:	f04f 0200 	mov.w	r2, #0
 8009360:	f04f 0300 	mov.w	r3, #0
 8009364:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009368:	4659      	mov	r1, fp
 800936a:	018b      	lsls	r3, r1, #6
 800936c:	4651      	mov	r1, sl
 800936e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009372:	4651      	mov	r1, sl
 8009374:	018a      	lsls	r2, r1, #6
 8009376:	4651      	mov	r1, sl
 8009378:	ebb2 0801 	subs.w	r8, r2, r1
 800937c:	4659      	mov	r1, fp
 800937e:	eb63 0901 	sbc.w	r9, r3, r1
 8009382:	f04f 0200 	mov.w	r2, #0
 8009386:	f04f 0300 	mov.w	r3, #0
 800938a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800938e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009392:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009396:	4690      	mov	r8, r2
 8009398:	4699      	mov	r9, r3
 800939a:	4623      	mov	r3, r4
 800939c:	eb18 0303 	adds.w	r3, r8, r3
 80093a0:	60bb      	str	r3, [r7, #8]
 80093a2:	462b      	mov	r3, r5
 80093a4:	eb49 0303 	adc.w	r3, r9, r3
 80093a8:	60fb      	str	r3, [r7, #12]
 80093aa:	f04f 0200 	mov.w	r2, #0
 80093ae:	f04f 0300 	mov.w	r3, #0
 80093b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80093b6:	4629      	mov	r1, r5
 80093b8:	024b      	lsls	r3, r1, #9
 80093ba:	4621      	mov	r1, r4
 80093bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80093c0:	4621      	mov	r1, r4
 80093c2:	024a      	lsls	r2, r1, #9
 80093c4:	4610      	mov	r0, r2
 80093c6:	4619      	mov	r1, r3
 80093c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093ca:	2200      	movs	r2, #0
 80093cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80093ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093d4:	f7f7 fc60 	bl	8000c98 <__aeabi_uldivmod>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	4613      	mov	r3, r2
 80093de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093e0:	e058      	b.n	8009494 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093e2:	4b38      	ldr	r3, [pc, #224]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	099b      	lsrs	r3, r3, #6
 80093e8:	2200      	movs	r2, #0
 80093ea:	4618      	mov	r0, r3
 80093ec:	4611      	mov	r1, r2
 80093ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80093f2:	623b      	str	r3, [r7, #32]
 80093f4:	2300      	movs	r3, #0
 80093f6:	627b      	str	r3, [r7, #36]	; 0x24
 80093f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80093fc:	4642      	mov	r2, r8
 80093fe:	464b      	mov	r3, r9
 8009400:	f04f 0000 	mov.w	r0, #0
 8009404:	f04f 0100 	mov.w	r1, #0
 8009408:	0159      	lsls	r1, r3, #5
 800940a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800940e:	0150      	lsls	r0, r2, #5
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	4641      	mov	r1, r8
 8009416:	ebb2 0a01 	subs.w	sl, r2, r1
 800941a:	4649      	mov	r1, r9
 800941c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009420:	f04f 0200 	mov.w	r2, #0
 8009424:	f04f 0300 	mov.w	r3, #0
 8009428:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800942c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009430:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009434:	ebb2 040a 	subs.w	r4, r2, sl
 8009438:	eb63 050b 	sbc.w	r5, r3, fp
 800943c:	f04f 0200 	mov.w	r2, #0
 8009440:	f04f 0300 	mov.w	r3, #0
 8009444:	00eb      	lsls	r3, r5, #3
 8009446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800944a:	00e2      	lsls	r2, r4, #3
 800944c:	4614      	mov	r4, r2
 800944e:	461d      	mov	r5, r3
 8009450:	4643      	mov	r3, r8
 8009452:	18e3      	adds	r3, r4, r3
 8009454:	603b      	str	r3, [r7, #0]
 8009456:	464b      	mov	r3, r9
 8009458:	eb45 0303 	adc.w	r3, r5, r3
 800945c:	607b      	str	r3, [r7, #4]
 800945e:	f04f 0200 	mov.w	r2, #0
 8009462:	f04f 0300 	mov.w	r3, #0
 8009466:	e9d7 4500 	ldrd	r4, r5, [r7]
 800946a:	4629      	mov	r1, r5
 800946c:	028b      	lsls	r3, r1, #10
 800946e:	4621      	mov	r1, r4
 8009470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009474:	4621      	mov	r1, r4
 8009476:	028a      	lsls	r2, r1, #10
 8009478:	4610      	mov	r0, r2
 800947a:	4619      	mov	r1, r3
 800947c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800947e:	2200      	movs	r2, #0
 8009480:	61bb      	str	r3, [r7, #24]
 8009482:	61fa      	str	r2, [r7, #28]
 8009484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009488:	f7f7 fc06 	bl	8000c98 <__aeabi_uldivmod>
 800948c:	4602      	mov	r2, r0
 800948e:	460b      	mov	r3, r1
 8009490:	4613      	mov	r3, r2
 8009492:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009494:	4b0b      	ldr	r3, [pc, #44]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	0c1b      	lsrs	r3, r3, #16
 800949a:	f003 0303 	and.w	r3, r3, #3
 800949e:	3301      	adds	r3, #1
 80094a0:	005b      	lsls	r3, r3, #1
 80094a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80094a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80094ae:	e002      	b.n	80094b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80094b0:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80094b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80094b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80094b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3750      	adds	r7, #80	; 0x50
 80094bc:	46bd      	mov	sp, r7
 80094be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094c2:	bf00      	nop
 80094c4:	40023800 	.word	0x40023800
 80094c8:	00f42400 	.word	0x00f42400
 80094cc:	007a1200 	.word	0x007a1200

080094d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094d0:	b480      	push	{r7}
 80094d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80094d4:	4b03      	ldr	r3, [pc, #12]	; (80094e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80094d6:	681b      	ldr	r3, [r3, #0]
}
 80094d8:	4618      	mov	r0, r3
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	20000250 	.word	0x20000250

080094e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80094ec:	f7ff fff0 	bl	80094d0 <HAL_RCC_GetHCLKFreq>
 80094f0:	4602      	mov	r2, r0
 80094f2:	4b05      	ldr	r3, [pc, #20]	; (8009508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	0a9b      	lsrs	r3, r3, #10
 80094f8:	f003 0307 	and.w	r3, r3, #7
 80094fc:	4903      	ldr	r1, [pc, #12]	; (800950c <HAL_RCC_GetPCLK1Freq+0x24>)
 80094fe:	5ccb      	ldrb	r3, [r1, r3]
 8009500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009504:	4618      	mov	r0, r3
 8009506:	bd80      	pop	{r7, pc}
 8009508:	40023800 	.word	0x40023800
 800950c:	0801120c 	.word	0x0801120c

08009510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009514:	f7ff ffdc 	bl	80094d0 <HAL_RCC_GetHCLKFreq>
 8009518:	4602      	mov	r2, r0
 800951a:	4b05      	ldr	r3, [pc, #20]	; (8009530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	0b5b      	lsrs	r3, r3, #13
 8009520:	f003 0307 	and.w	r3, r3, #7
 8009524:	4903      	ldr	r1, [pc, #12]	; (8009534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009526:	5ccb      	ldrb	r3, [r1, r3]
 8009528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800952c:	4618      	mov	r0, r3
 800952e:	bd80      	pop	{r7, pc}
 8009530:	40023800 	.word	0x40023800
 8009534:	0801120c 	.word	0x0801120c

08009538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e04c      	b.n	80095e4 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d111      	bne.n	800957a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f001 fc32 	bl	800adc8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009568:	2b00      	cmp	r3, #0
 800956a:	d102      	bne.n	8009572 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a1f      	ldr	r2, [pc, #124]	; (80095ec <HAL_TIM_Base_Init+0xb4>)
 8009570:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2202      	movs	r2, #2
 800957e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	3304      	adds	r3, #4
 800958a:	4619      	mov	r1, r3
 800958c:	4610      	mov	r0, r2
 800958e:	f001 f94f 	bl	800a830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2201      	movs	r2, #1
 80095d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2201      	movs	r2, #1
 80095de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	08004b49 	.word	0x08004b49

080095f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b01      	cmp	r3, #1
 8009602:	d001      	beq.n	8009608 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	e03c      	b.n	8009682 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2202      	movs	r2, #2
 800960c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a1e      	ldr	r2, [pc, #120]	; (8009690 <HAL_TIM_Base_Start+0xa0>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d018      	beq.n	800964c <HAL_TIM_Base_Start+0x5c>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009622:	d013      	beq.n	800964c <HAL_TIM_Base_Start+0x5c>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a1a      	ldr	r2, [pc, #104]	; (8009694 <HAL_TIM_Base_Start+0xa4>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d00e      	beq.n	800964c <HAL_TIM_Base_Start+0x5c>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a19      	ldr	r2, [pc, #100]	; (8009698 <HAL_TIM_Base_Start+0xa8>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d009      	beq.n	800964c <HAL_TIM_Base_Start+0x5c>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a17      	ldr	r2, [pc, #92]	; (800969c <HAL_TIM_Base_Start+0xac>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d004      	beq.n	800964c <HAL_TIM_Base_Start+0x5c>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a16      	ldr	r2, [pc, #88]	; (80096a0 <HAL_TIM_Base_Start+0xb0>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d111      	bne.n	8009670 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	f003 0307 	and.w	r3, r3, #7
 8009656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2b06      	cmp	r3, #6
 800965c:	d010      	beq.n	8009680 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f042 0201 	orr.w	r2, r2, #1
 800966c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800966e:	e007      	b.n	8009680 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f042 0201 	orr.w	r2, r2, #1
 800967e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3714      	adds	r7, #20
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	40010000 	.word	0x40010000
 8009694:	40000400 	.word	0x40000400
 8009698:	40000800 	.word	0x40000800
 800969c:	40000c00 	.word	0x40000c00
 80096a0:	40014000 	.word	0x40014000

080096a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d001      	beq.n	80096bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	e044      	b.n	8009746 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2202      	movs	r2, #2
 80096c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68da      	ldr	r2, [r3, #12]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f042 0201 	orr.w	r2, r2, #1
 80096d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a1e      	ldr	r2, [pc, #120]	; (8009754 <HAL_TIM_Base_Start_IT+0xb0>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d018      	beq.n	8009710 <HAL_TIM_Base_Start_IT+0x6c>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096e6:	d013      	beq.n	8009710 <HAL_TIM_Base_Start_IT+0x6c>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a1a      	ldr	r2, [pc, #104]	; (8009758 <HAL_TIM_Base_Start_IT+0xb4>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d00e      	beq.n	8009710 <HAL_TIM_Base_Start_IT+0x6c>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a19      	ldr	r2, [pc, #100]	; (800975c <HAL_TIM_Base_Start_IT+0xb8>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d009      	beq.n	8009710 <HAL_TIM_Base_Start_IT+0x6c>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a17      	ldr	r2, [pc, #92]	; (8009760 <HAL_TIM_Base_Start_IT+0xbc>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d004      	beq.n	8009710 <HAL_TIM_Base_Start_IT+0x6c>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a16      	ldr	r2, [pc, #88]	; (8009764 <HAL_TIM_Base_Start_IT+0xc0>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d111      	bne.n	8009734 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	f003 0307 	and.w	r3, r3, #7
 800971a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2b06      	cmp	r3, #6
 8009720:	d010      	beq.n	8009744 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f042 0201 	orr.w	r2, r2, #1
 8009730:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009732:	e007      	b.n	8009744 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f042 0201 	orr.w	r2, r2, #1
 8009742:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	40010000 	.word	0x40010000
 8009758:	40000400 	.word	0x40000400
 800975c:	40000800 	.word	0x40000800
 8009760:	40000c00 	.word	0x40000c00
 8009764:	40014000 	.word	0x40014000

08009768 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68da      	ldr	r2, [r3, #12]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f022 0201 	bic.w	r2, r2, #1
 800977e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6a1a      	ldr	r2, [r3, #32]
 8009786:	f241 1311 	movw	r3, #4369	; 0x1111
 800978a:	4013      	ands	r3, r2
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10f      	bne.n	80097b0 <HAL_TIM_Base_Stop_IT+0x48>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6a1a      	ldr	r2, [r3, #32]
 8009796:	f240 4344 	movw	r3, #1092	; 0x444
 800979a:	4013      	ands	r3, r2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d107      	bne.n	80097b0 <HAL_TIM_Base_Stop_IT+0x48>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f022 0201 	bic.w	r2, r2, #1
 80097ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	370c      	adds	r7, #12
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
	...

080097c8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d101      	bne.n	80097da <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	e04c      	b.n	8009874 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d111      	bne.n	800980a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f001 faea 	bl	800adc8 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d102      	bne.n	8009802 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a1f      	ldr	r2, [pc, #124]	; (800987c <HAL_TIM_OC_Init+0xb4>)
 8009800:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2202      	movs	r2, #2
 800980e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	3304      	adds	r3, #4
 800981a:	4619      	mov	r1, r3
 800981c:	4610      	mov	r0, r2
 800981e:	f001 f807 	bl	800a830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2201      	movs	r2, #1
 8009836:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2201      	movs	r2, #1
 8009846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2201      	movs	r2, #1
 8009856:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2201      	movs	r2, #1
 8009866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	08009881 	.word	0x08009881

08009880 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d101      	bne.n	80098a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e04c      	b.n	8009940 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d111      	bne.n	80098d6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f001 fa84 	bl	800adc8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d102      	bne.n	80098ce <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a1f      	ldr	r2, [pc, #124]	; (8009948 <HAL_TIM_PWM_Init+0xb4>)
 80098cc:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2202      	movs	r2, #2
 80098da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	3304      	adds	r3, #4
 80098e6:	4619      	mov	r1, r3
 80098e8:	4610      	mov	r0, r2
 80098ea:	f000 ffa1 	bl	800a830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2201      	movs	r2, #1
 800993a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	08004a59 	.word	0x08004a59

0800994c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d109      	bne.n	8009970 <HAL_TIM_PWM_Start+0x24>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b01      	cmp	r3, #1
 8009966:	bf14      	ite	ne
 8009968:	2301      	movne	r3, #1
 800996a:	2300      	moveq	r3, #0
 800996c:	b2db      	uxtb	r3, r3
 800996e:	e022      	b.n	80099b6 <HAL_TIM_PWM_Start+0x6a>
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	2b04      	cmp	r3, #4
 8009974:	d109      	bne.n	800998a <HAL_TIM_PWM_Start+0x3e>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800997c:	b2db      	uxtb	r3, r3
 800997e:	2b01      	cmp	r3, #1
 8009980:	bf14      	ite	ne
 8009982:	2301      	movne	r3, #1
 8009984:	2300      	moveq	r3, #0
 8009986:	b2db      	uxtb	r3, r3
 8009988:	e015      	b.n	80099b6 <HAL_TIM_PWM_Start+0x6a>
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2b08      	cmp	r3, #8
 800998e:	d109      	bne.n	80099a4 <HAL_TIM_PWM_Start+0x58>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009996:	b2db      	uxtb	r3, r3
 8009998:	2b01      	cmp	r3, #1
 800999a:	bf14      	ite	ne
 800999c:	2301      	movne	r3, #1
 800999e:	2300      	moveq	r3, #0
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	e008      	b.n	80099b6 <HAL_TIM_PWM_Start+0x6a>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	bf14      	ite	ne
 80099b0:	2301      	movne	r3, #1
 80099b2:	2300      	moveq	r3, #0
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d001      	beq.n	80099be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	e068      	b.n	8009a90 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d104      	bne.n	80099ce <HAL_TIM_PWM_Start+0x82>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2202      	movs	r2, #2
 80099c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099cc:	e013      	b.n	80099f6 <HAL_TIM_PWM_Start+0xaa>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b04      	cmp	r3, #4
 80099d2:	d104      	bne.n	80099de <HAL_TIM_PWM_Start+0x92>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2202      	movs	r2, #2
 80099d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099dc:	e00b      	b.n	80099f6 <HAL_TIM_PWM_Start+0xaa>
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b08      	cmp	r3, #8
 80099e2:	d104      	bne.n	80099ee <HAL_TIM_PWM_Start+0xa2>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099ec:	e003      	b.n	80099f6 <HAL_TIM_PWM_Start+0xaa>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2202      	movs	r2, #2
 80099f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2201      	movs	r2, #1
 80099fc:	6839      	ldr	r1, [r7, #0]
 80099fe:	4618      	mov	r0, r3
 8009a00:	f001 f9bc 	bl	800ad7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a23      	ldr	r2, [pc, #140]	; (8009a98 <HAL_TIM_PWM_Start+0x14c>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d107      	bne.n	8009a1e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a1d      	ldr	r2, [pc, #116]	; (8009a98 <HAL_TIM_PWM_Start+0x14c>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d018      	beq.n	8009a5a <HAL_TIM_PWM_Start+0x10e>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a30:	d013      	beq.n	8009a5a <HAL_TIM_PWM_Start+0x10e>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a19      	ldr	r2, [pc, #100]	; (8009a9c <HAL_TIM_PWM_Start+0x150>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d00e      	beq.n	8009a5a <HAL_TIM_PWM_Start+0x10e>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a17      	ldr	r2, [pc, #92]	; (8009aa0 <HAL_TIM_PWM_Start+0x154>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d009      	beq.n	8009a5a <HAL_TIM_PWM_Start+0x10e>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a16      	ldr	r2, [pc, #88]	; (8009aa4 <HAL_TIM_PWM_Start+0x158>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d004      	beq.n	8009a5a <HAL_TIM_PWM_Start+0x10e>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a14      	ldr	r2, [pc, #80]	; (8009aa8 <HAL_TIM_PWM_Start+0x15c>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d111      	bne.n	8009a7e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f003 0307 	and.w	r3, r3, #7
 8009a64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2b06      	cmp	r3, #6
 8009a6a:	d010      	beq.n	8009a8e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f042 0201 	orr.w	r2, r2, #1
 8009a7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a7c:	e007      	b.n	8009a8e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f042 0201 	orr.w	r2, r2, #1
 8009a8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	40010000 	.word	0x40010000
 8009a9c:	40000400 	.word	0x40000400
 8009aa0:	40000800 	.word	0x40000800
 8009aa4:	40000c00 	.word	0x40000c00
 8009aa8:	40014000 	.word	0x40014000

08009aac <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e04c      	b.n	8009b5a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d111      	bne.n	8009af0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f001 f977 	bl	800adc8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d102      	bne.n	8009ae8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a1f      	ldr	r2, [pc, #124]	; (8009b64 <HAL_TIM_OnePulse_Init+0xb8>)
 8009ae6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2202      	movs	r2, #2
 8009af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	3304      	adds	r3, #4
 8009b00:	4619      	mov	r1, r3
 8009b02:	4610      	mov	r0, r2
 8009b04:	f000 fe94 	bl	800a830 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f022 0208 	bic.w	r2, r2, #8
 8009b16:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6819      	ldr	r1, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	430a      	orrs	r2, r1
 8009b26:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	08009b69 	.word	0x08009b69

08009b68 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b8c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b94:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b9c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009ba4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d108      	bne.n	8009bbe <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d105      	bne.n	8009bbe <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009bb2:	7b7b      	ldrb	r3, [r7, #13]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d102      	bne.n	8009bbe <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009bb8:	7b3b      	ldrb	r3, [r7, #12]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d001      	beq.n	8009bc2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e03b      	b.n	8009c3a <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2202      	movs	r2, #2
 8009bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2202      	movs	r2, #2
 8009bce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2202      	movs	r2, #2
 8009bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2202      	movs	r2, #2
 8009bde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68da      	ldr	r2, [r3, #12]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f042 0202 	orr.w	r2, r2, #2
 8009bf0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68da      	ldr	r2, [r3, #12]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f042 0204 	orr.w	r2, r2, #4
 8009c00:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2201      	movs	r2, #1
 8009c08:	2100      	movs	r1, #0
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f001 f8b6 	bl	800ad7c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2201      	movs	r2, #1
 8009c16:	2104      	movs	r1, #4
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f001 f8af 	bl	800ad7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a08      	ldr	r2, [pc, #32]	; (8009c44 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d107      	bne.n	8009c38 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c36:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	40010000 	.word	0x40010000

08009c48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b086      	sub	sp, #24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e0a2      	b.n	8009da2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d111      	bne.n	8009c8c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f001 f8a9 	bl	800adc8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d102      	bne.n	8009c84 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a4a      	ldr	r2, [pc, #296]	; (8009dac <HAL_TIM_Encoder_Init+0x164>)
 8009c82:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2202      	movs	r2, #2
 8009c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	6812      	ldr	r2, [r2, #0]
 8009c9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ca2:	f023 0307 	bic.w	r3, r3, #7
 8009ca6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	3304      	adds	r3, #4
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	f000 fdbc 	bl	800a830 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	697a      	ldr	r2, [r7, #20]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ce0:	f023 0303 	bic.w	r3, r3, #3
 8009ce4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	689a      	ldr	r2, [r3, #8]
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	699b      	ldr	r3, [r3, #24]
 8009cee:	021b      	lsls	r3, r3, #8
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	693a      	ldr	r2, [r7, #16]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009cfe:	f023 030c 	bic.w	r3, r3, #12
 8009d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	68da      	ldr	r2, [r3, #12]
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	69db      	ldr	r3, [r3, #28]
 8009d18:	021b      	lsls	r3, r3, #8
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	011a      	lsls	r2, r3, #4
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	6a1b      	ldr	r3, [r3, #32]
 8009d2c:	031b      	lsls	r3, r3, #12
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009d3c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009d44:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	685a      	ldr	r2, [r3, #4]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	011b      	lsls	r3, r3, #4
 8009d50:	4313      	orrs	r3, r2
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	697a      	ldr	r2, [r7, #20]
 8009d5e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2201      	movs	r2, #1
 8009d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3718      	adds	r7, #24
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	08004ab9 	.word	0x08004ab9

08009db0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009dc0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009dc8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009dd0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009dd8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d110      	bne.n	8009e02 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009de0:	7bfb      	ldrb	r3, [r7, #15]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d102      	bne.n	8009dec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009de6:	7b7b      	ldrb	r3, [r7, #13]
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d001      	beq.n	8009df0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	e069      	b.n	8009ec4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2202      	movs	r2, #2
 8009df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e00:	e031      	b.n	8009e66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	2b04      	cmp	r3, #4
 8009e06:	d110      	bne.n	8009e2a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e08:	7bbb      	ldrb	r3, [r7, #14]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d102      	bne.n	8009e14 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e0e:	7b3b      	ldrb	r3, [r7, #12]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d001      	beq.n	8009e18 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e055      	b.n	8009ec4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2202      	movs	r2, #2
 8009e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2202      	movs	r2, #2
 8009e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e28:	e01d      	b.n	8009e66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e2a:	7bfb      	ldrb	r3, [r7, #15]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d108      	bne.n	8009e42 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e30:	7bbb      	ldrb	r3, [r7, #14]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d105      	bne.n	8009e42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e36:	7b7b      	ldrb	r3, [r7, #13]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d102      	bne.n	8009e42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e3c:	7b3b      	ldrb	r3, [r7, #12]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d001      	beq.n	8009e46 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e03e      	b.n	8009ec4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2202      	movs	r2, #2
 8009e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2202      	movs	r2, #2
 8009e52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2202      	movs	r2, #2
 8009e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2202      	movs	r2, #2
 8009e62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d003      	beq.n	8009e74 <HAL_TIM_Encoder_Start+0xc4>
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	2b04      	cmp	r3, #4
 8009e70:	d008      	beq.n	8009e84 <HAL_TIM_Encoder_Start+0xd4>
 8009e72:	e00f      	b.n	8009e94 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f000 ff7d 	bl	800ad7c <TIM_CCxChannelCmd>
      break;
 8009e82:	e016      	b.n	8009eb2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	2104      	movs	r1, #4
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f000 ff75 	bl	800ad7c <TIM_CCxChannelCmd>
      break;
 8009e92:	e00e      	b.n	8009eb2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 ff6d 	bl	800ad7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	2104      	movs	r1, #4
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 ff66 	bl	800ad7c <TIM_CCxChannelCmd>
      break;
 8009eb0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f042 0201 	orr.w	r2, r2, #1
 8009ec0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	f003 0302 	and.w	r3, r3, #2
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d128      	bne.n	8009f34 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	f003 0302 	and.w	r3, r3, #2
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d121      	bne.n	8009f34 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f06f 0202 	mvn.w	r2, #2
 8009ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	f003 0303 	and.w	r3, r3, #3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d005      	beq.n	8009f1a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	4798      	blx	r3
 8009f18:	e009      	b.n	8009f2e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	f003 0304 	and.w	r3, r3, #4
 8009f3e:	2b04      	cmp	r3, #4
 8009f40:	d128      	bne.n	8009f94 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	f003 0304 	and.w	r3, r3, #4
 8009f4c:	2b04      	cmp	r3, #4
 8009f4e:	d121      	bne.n	8009f94 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f06f 0204 	mvn.w	r2, #4
 8009f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2202      	movs	r2, #2
 8009f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d005      	beq.n	8009f7a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	4798      	blx	r3
 8009f78:	e009      	b.n	8009f8e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	f003 0308 	and.w	r3, r3, #8
 8009f9e:	2b08      	cmp	r3, #8
 8009fa0:	d128      	bne.n	8009ff4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	f003 0308 	and.w	r3, r3, #8
 8009fac:	2b08      	cmp	r3, #8
 8009fae:	d121      	bne.n	8009ff4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f06f 0208 	mvn.w	r2, #8
 8009fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2204      	movs	r2, #4
 8009fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	69db      	ldr	r3, [r3, #28]
 8009fc6:	f003 0303 	and.w	r3, r3, #3
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d005      	beq.n	8009fda <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	4798      	blx	r3
 8009fd8:	e009      	b.n	8009fee <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	f003 0310 	and.w	r3, r3, #16
 8009ffe:	2b10      	cmp	r3, #16
 800a000:	d128      	bne.n	800a054 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	f003 0310 	and.w	r3, r3, #16
 800a00c:	2b10      	cmp	r3, #16
 800a00e:	d121      	bne.n	800a054 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f06f 0210 	mvn.w	r2, #16
 800a018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2208      	movs	r2, #8
 800a01e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	69db      	ldr	r3, [r3, #28]
 800a026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d005      	beq.n	800a03a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	4798      	blx	r3
 800a038:	e009      	b.n	800a04e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d110      	bne.n	800a084 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	f003 0301 	and.w	r3, r3, #1
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d109      	bne.n	800a084 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f06f 0201 	mvn.w	r2, #1
 800a078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a08e:	2b80      	cmp	r3, #128	; 0x80
 800a090:	d110      	bne.n	800a0b4 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a09c:	2b80      	cmp	r3, #128	; 0x80
 800a09e:	d109      	bne.n	800a0b4 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a0a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0be:	2b40      	cmp	r3, #64	; 0x40
 800a0c0:	d110      	bne.n	800a0e4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0cc:	2b40      	cmp	r3, #64	; 0x40
 800a0ce:	d109      	bne.n	800a0e4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a0d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	f003 0320 	and.w	r3, r3, #32
 800a0ee:	2b20      	cmp	r3, #32
 800a0f0:	d110      	bne.n	800a114 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	f003 0320 	and.w	r3, r3, #32
 800a0fc:	2b20      	cmp	r3, #32
 800a0fe:	d109      	bne.n	800a114 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f06f 0220 	mvn.w	r2, #32
 800a108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a114:	bf00      	nop
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b086      	sub	sp, #24
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a132:	2b01      	cmp	r3, #1
 800a134:	d101      	bne.n	800a13a <HAL_TIM_OC_ConfigChannel+0x1e>
 800a136:	2302      	movs	r3, #2
 800a138:	e048      	b.n	800a1cc <HAL_TIM_OC_ConfigChannel+0xb0>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2b0c      	cmp	r3, #12
 800a146:	d839      	bhi.n	800a1bc <HAL_TIM_OC_ConfigChannel+0xa0>
 800a148:	a201      	add	r2, pc, #4	; (adr r2, 800a150 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a14e:	bf00      	nop
 800a150:	0800a185 	.word	0x0800a185
 800a154:	0800a1bd 	.word	0x0800a1bd
 800a158:	0800a1bd 	.word	0x0800a1bd
 800a15c:	0800a1bd 	.word	0x0800a1bd
 800a160:	0800a193 	.word	0x0800a193
 800a164:	0800a1bd 	.word	0x0800a1bd
 800a168:	0800a1bd 	.word	0x0800a1bd
 800a16c:	0800a1bd 	.word	0x0800a1bd
 800a170:	0800a1a1 	.word	0x0800a1a1
 800a174:	0800a1bd 	.word	0x0800a1bd
 800a178:	0800a1bd 	.word	0x0800a1bd
 800a17c:	0800a1bd 	.word	0x0800a1bd
 800a180:	0800a1af 	.word	0x0800a1af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68b9      	ldr	r1, [r7, #8]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f000 fbd0 	bl	800a930 <TIM_OC1_SetConfig>
      break;
 800a190:	e017      	b.n	800a1c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68b9      	ldr	r1, [r7, #8]
 800a198:	4618      	mov	r0, r3
 800a19a:	f000 fc2f 	bl	800a9fc <TIM_OC2_SetConfig>
      break;
 800a19e:	e010      	b.n	800a1c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68b9      	ldr	r1, [r7, #8]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 fc94 	bl	800aad4 <TIM_OC3_SetConfig>
      break;
 800a1ac:	e009      	b.n	800a1c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68b9      	ldr	r1, [r7, #8]
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f000 fcf7 	bl	800aba8 <TIM_OC4_SetConfig>
      break;
 800a1ba:	e002      	b.n	800a1c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	75fb      	strb	r3, [r7, #23]
      break;
 800a1c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a1ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3718      	adds	r7, #24
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b086      	sub	sp, #24
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d101      	bne.n	800a1f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a1ee:	2302      	movs	r3, #2
 800a1f0:	e0ae      	b.n	800a350 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2b0c      	cmp	r3, #12
 800a1fe:	f200 809f 	bhi.w	800a340 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a202:	a201      	add	r2, pc, #4	; (adr r2, 800a208 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a208:	0800a23d 	.word	0x0800a23d
 800a20c:	0800a341 	.word	0x0800a341
 800a210:	0800a341 	.word	0x0800a341
 800a214:	0800a341 	.word	0x0800a341
 800a218:	0800a27d 	.word	0x0800a27d
 800a21c:	0800a341 	.word	0x0800a341
 800a220:	0800a341 	.word	0x0800a341
 800a224:	0800a341 	.word	0x0800a341
 800a228:	0800a2bf 	.word	0x0800a2bf
 800a22c:	0800a341 	.word	0x0800a341
 800a230:	0800a341 	.word	0x0800a341
 800a234:	0800a341 	.word	0x0800a341
 800a238:	0800a2ff 	.word	0x0800a2ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68b9      	ldr	r1, [r7, #8]
 800a242:	4618      	mov	r0, r3
 800a244:	f000 fb74 	bl	800a930 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	699a      	ldr	r2, [r3, #24]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f042 0208 	orr.w	r2, r2, #8
 800a256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	699a      	ldr	r2, [r3, #24]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f022 0204 	bic.w	r2, r2, #4
 800a266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	6999      	ldr	r1, [r3, #24]
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	691a      	ldr	r2, [r3, #16]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	430a      	orrs	r2, r1
 800a278:	619a      	str	r2, [r3, #24]
      break;
 800a27a:	e064      	b.n	800a346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68b9      	ldr	r1, [r7, #8]
 800a282:	4618      	mov	r0, r3
 800a284:	f000 fbba 	bl	800a9fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	699a      	ldr	r2, [r3, #24]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	699a      	ldr	r2, [r3, #24]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	6999      	ldr	r1, [r3, #24]
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	691b      	ldr	r3, [r3, #16]
 800a2b2:	021a      	lsls	r2, r3, #8
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	430a      	orrs	r2, r1
 800a2ba:	619a      	str	r2, [r3, #24]
      break;
 800a2bc:	e043      	b.n	800a346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68b9      	ldr	r1, [r7, #8]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f000 fc05 	bl	800aad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	69da      	ldr	r2, [r3, #28]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f042 0208 	orr.w	r2, r2, #8
 800a2d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	69da      	ldr	r2, [r3, #28]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f022 0204 	bic.w	r2, r2, #4
 800a2e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	69d9      	ldr	r1, [r3, #28]
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	691a      	ldr	r2, [r3, #16]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	430a      	orrs	r2, r1
 800a2fa:	61da      	str	r2, [r3, #28]
      break;
 800a2fc:	e023      	b.n	800a346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68b9      	ldr	r1, [r7, #8]
 800a304:	4618      	mov	r0, r3
 800a306:	f000 fc4f 	bl	800aba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	69da      	ldr	r2, [r3, #28]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	69da      	ldr	r2, [r3, #28]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	69d9      	ldr	r1, [r3, #28]
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	021a      	lsls	r2, r3, #8
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	430a      	orrs	r2, r1
 800a33c:	61da      	str	r2, [r3, #28]
      break;
 800a33e:	e002      	b.n	800a346 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	75fb      	strb	r3, [r7, #23]
      break;
 800a344:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a34e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a350:	4618      	mov	r0, r3
 800a352:	3718      	adds	r7, #24
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a362:	2300      	movs	r3, #0
 800a364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d101      	bne.n	800a374 <HAL_TIM_ConfigClockSource+0x1c>
 800a370:	2302      	movs	r3, #2
 800a372:	e0b4      	b.n	800a4de <HAL_TIM_ConfigClockSource+0x186>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2202      	movs	r2, #2
 800a380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a39a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3ac:	d03e      	beq.n	800a42c <HAL_TIM_ConfigClockSource+0xd4>
 800a3ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3b2:	f200 8087 	bhi.w	800a4c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3ba:	f000 8086 	beq.w	800a4ca <HAL_TIM_ConfigClockSource+0x172>
 800a3be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3c2:	d87f      	bhi.n	800a4c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3c4:	2b70      	cmp	r3, #112	; 0x70
 800a3c6:	d01a      	beq.n	800a3fe <HAL_TIM_ConfigClockSource+0xa6>
 800a3c8:	2b70      	cmp	r3, #112	; 0x70
 800a3ca:	d87b      	bhi.n	800a4c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3cc:	2b60      	cmp	r3, #96	; 0x60
 800a3ce:	d050      	beq.n	800a472 <HAL_TIM_ConfigClockSource+0x11a>
 800a3d0:	2b60      	cmp	r3, #96	; 0x60
 800a3d2:	d877      	bhi.n	800a4c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3d4:	2b50      	cmp	r3, #80	; 0x50
 800a3d6:	d03c      	beq.n	800a452 <HAL_TIM_ConfigClockSource+0xfa>
 800a3d8:	2b50      	cmp	r3, #80	; 0x50
 800a3da:	d873      	bhi.n	800a4c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3dc:	2b40      	cmp	r3, #64	; 0x40
 800a3de:	d058      	beq.n	800a492 <HAL_TIM_ConfigClockSource+0x13a>
 800a3e0:	2b40      	cmp	r3, #64	; 0x40
 800a3e2:	d86f      	bhi.n	800a4c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3e4:	2b30      	cmp	r3, #48	; 0x30
 800a3e6:	d064      	beq.n	800a4b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a3e8:	2b30      	cmp	r3, #48	; 0x30
 800a3ea:	d86b      	bhi.n	800a4c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3ec:	2b20      	cmp	r3, #32
 800a3ee:	d060      	beq.n	800a4b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a3f0:	2b20      	cmp	r3, #32
 800a3f2:	d867      	bhi.n	800a4c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d05c      	beq.n	800a4b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a3f8:	2b10      	cmp	r3, #16
 800a3fa:	d05a      	beq.n	800a4b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a3fc:	e062      	b.n	800a4c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6818      	ldr	r0, [r3, #0]
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	6899      	ldr	r1, [r3, #8]
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	685a      	ldr	r2, [r3, #4]
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	f000 fc95 	bl	800ad3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	609a      	str	r2, [r3, #8]
      break;
 800a42a:	e04f      	b.n	800a4cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6818      	ldr	r0, [r3, #0]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	6899      	ldr	r1, [r3, #8]
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	685a      	ldr	r2, [r3, #4]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	f000 fc7e 	bl	800ad3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	689a      	ldr	r2, [r3, #8]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a44e:	609a      	str	r2, [r3, #8]
      break;
 800a450:	e03c      	b.n	800a4cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6818      	ldr	r0, [r3, #0]
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	6859      	ldr	r1, [r3, #4]
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	461a      	mov	r2, r3
 800a460:	f000 fbf2 	bl	800ac48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2150      	movs	r1, #80	; 0x50
 800a46a:	4618      	mov	r0, r3
 800a46c:	f000 fc4b 	bl	800ad06 <TIM_ITRx_SetConfig>
      break;
 800a470:	e02c      	b.n	800a4cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6818      	ldr	r0, [r3, #0]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	6859      	ldr	r1, [r3, #4]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	461a      	mov	r2, r3
 800a480:	f000 fc11 	bl	800aca6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2160      	movs	r1, #96	; 0x60
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 fc3b 	bl	800ad06 <TIM_ITRx_SetConfig>
      break;
 800a490:	e01c      	b.n	800a4cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6818      	ldr	r0, [r3, #0]
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	6859      	ldr	r1, [r3, #4]
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	f000 fbd2 	bl	800ac48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2140      	movs	r1, #64	; 0x40
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 fc2b 	bl	800ad06 <TIM_ITRx_SetConfig>
      break;
 800a4b0:	e00c      	b.n	800a4cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	4610      	mov	r0, r2
 800a4be:	f000 fc22 	bl	800ad06 <TIM_ITRx_SetConfig>
      break;
 800a4c2:	e003      	b.n	800a4cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a4c8:	e000      	b.n	800a4cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a4ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b083      	sub	sp, #12
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a4ee:	bf00      	nop
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b083      	sub	sp, #12
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a502:	bf00      	nop
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a50e:	b480      	push	{r7}
 800a510:	b083      	sub	sp, #12
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a516:	bf00      	nop
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a522:	b480      	push	{r7}
 800a524:	b083      	sub	sp, #12
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a52a:	bf00      	nop
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a536:	b480      	push	{r7}
 800a538:	b083      	sub	sp, #12
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a53e:	bf00      	nop
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a54a:	b480      	push	{r7}
 800a54c:	b083      	sub	sp, #12
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a552:	bf00      	nop
 800a554:	370c      	adds	r7, #12
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a55e:	b480      	push	{r7}
 800a560:	b083      	sub	sp, #12
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a566:	bf00      	nop
 800a568:	370c      	adds	r7, #12
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a572:	b480      	push	{r7}
 800a574:	b083      	sub	sp, #12
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a57a:	bf00      	nop
 800a57c:	370c      	adds	r7, #12
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr

0800a586 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a586:	b480      	push	{r7}
 800a588:	b083      	sub	sp, #12
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a58e:	bf00      	nop
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
	...

0800a59c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b087      	sub	sp, #28
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	607a      	str	r2, [r7, #4]
 800a5a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d101      	bne.n	800a5b8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e135      	b.n	800a824 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d101      	bne.n	800a5c6 <HAL_TIM_RegisterCallback+0x2a>
 800a5c2:	2302      	movs	r3, #2
 800a5c4:	e12e      	b.n	800a824 <HAL_TIM_RegisterCallback+0x288>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	f040 80ba 	bne.w	800a750 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 800a5dc:	7afb      	ldrb	r3, [r7, #11]
 800a5de:	2b1a      	cmp	r3, #26
 800a5e0:	f200 80b3 	bhi.w	800a74a <HAL_TIM_RegisterCallback+0x1ae>
 800a5e4:	a201      	add	r2, pc, #4	; (adr r2, 800a5ec <HAL_TIM_RegisterCallback+0x50>)
 800a5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ea:	bf00      	nop
 800a5ec:	0800a659 	.word	0x0800a659
 800a5f0:	0800a661 	.word	0x0800a661
 800a5f4:	0800a669 	.word	0x0800a669
 800a5f8:	0800a671 	.word	0x0800a671
 800a5fc:	0800a679 	.word	0x0800a679
 800a600:	0800a681 	.word	0x0800a681
 800a604:	0800a689 	.word	0x0800a689
 800a608:	0800a691 	.word	0x0800a691
 800a60c:	0800a699 	.word	0x0800a699
 800a610:	0800a6a1 	.word	0x0800a6a1
 800a614:	0800a6a9 	.word	0x0800a6a9
 800a618:	0800a6b1 	.word	0x0800a6b1
 800a61c:	0800a6b9 	.word	0x0800a6b9
 800a620:	0800a6c1 	.word	0x0800a6c1
 800a624:	0800a6c9 	.word	0x0800a6c9
 800a628:	0800a6d3 	.word	0x0800a6d3
 800a62c:	0800a6dd 	.word	0x0800a6dd
 800a630:	0800a6e7 	.word	0x0800a6e7
 800a634:	0800a6f1 	.word	0x0800a6f1
 800a638:	0800a6fb 	.word	0x0800a6fb
 800a63c:	0800a705 	.word	0x0800a705
 800a640:	0800a70f 	.word	0x0800a70f
 800a644:	0800a719 	.word	0x0800a719
 800a648:	0800a723 	.word	0x0800a723
 800a64c:	0800a72d 	.word	0x0800a72d
 800a650:	0800a737 	.word	0x0800a737
 800a654:	0800a741 	.word	0x0800a741
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a65e:	e0dc      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a666:	e0d8      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a66e:	e0d4      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a676:	e0d0      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a67e:	e0cc      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a686:	e0c8      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a68e:	e0c4      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a696:	e0c0      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a69e:	e0bc      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a6a6:	e0b8      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a6ae:	e0b4      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a6b6:	e0b0      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a6be:	e0ac      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a6c6:	e0a8      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800a6d0:	e0a3      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800a6da:	e09e      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800a6e4:	e099      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800a6ee:	e094      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800a6f8:	e08f      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800a702:	e08a      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800a70c:	e085      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800a716:	e080      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800a720:	e07b      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800a72a:	e076      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800a734:	e071      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800a73e:	e06c      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800a748:	e067      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	75fb      	strb	r3, [r7, #23]
        break;
 800a74e:	e064      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a756:	b2db      	uxtb	r3, r3
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d15c      	bne.n	800a816 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800a75c:	7afb      	ldrb	r3, [r7, #11]
 800a75e:	2b0d      	cmp	r3, #13
 800a760:	d856      	bhi.n	800a810 <HAL_TIM_RegisterCallback+0x274>
 800a762:	a201      	add	r2, pc, #4	; (adr r2, 800a768 <HAL_TIM_RegisterCallback+0x1cc>)
 800a764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a768:	0800a7a1 	.word	0x0800a7a1
 800a76c:	0800a7a9 	.word	0x0800a7a9
 800a770:	0800a7b1 	.word	0x0800a7b1
 800a774:	0800a7b9 	.word	0x0800a7b9
 800a778:	0800a7c1 	.word	0x0800a7c1
 800a77c:	0800a7c9 	.word	0x0800a7c9
 800a780:	0800a7d1 	.word	0x0800a7d1
 800a784:	0800a7d9 	.word	0x0800a7d9
 800a788:	0800a7e1 	.word	0x0800a7e1
 800a78c:	0800a7e9 	.word	0x0800a7e9
 800a790:	0800a7f1 	.word	0x0800a7f1
 800a794:	0800a7f9 	.word	0x0800a7f9
 800a798:	0800a801 	.word	0x0800a801
 800a79c:	0800a809 	.word	0x0800a809
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a7a6:	e038      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a7ae:	e034      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a7b6:	e030      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a7be:	e02c      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a7c6:	e028      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a7ce:	e024      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a7d6:	e020      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a7de:	e01c      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a7e6:	e018      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a7ee:	e014      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a7f6:	e010      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a7fe:	e00c      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a806:	e008      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a80e:	e004      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	75fb      	strb	r3, [r7, #23]
        break;
 800a814:	e001      	b.n	800a81a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a822:	7dfb      	ldrb	r3, [r7, #23]
}
 800a824:	4618      	mov	r0, r3
 800a826:	371c      	adds	r7, #28
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a34      	ldr	r2, [pc, #208]	; (800a914 <TIM_Base_SetConfig+0xe4>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d00f      	beq.n	800a868 <TIM_Base_SetConfig+0x38>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a84e:	d00b      	beq.n	800a868 <TIM_Base_SetConfig+0x38>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a31      	ldr	r2, [pc, #196]	; (800a918 <TIM_Base_SetConfig+0xe8>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d007      	beq.n	800a868 <TIM_Base_SetConfig+0x38>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a30      	ldr	r2, [pc, #192]	; (800a91c <TIM_Base_SetConfig+0xec>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d003      	beq.n	800a868 <TIM_Base_SetConfig+0x38>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4a2f      	ldr	r2, [pc, #188]	; (800a920 <TIM_Base_SetConfig+0xf0>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d108      	bne.n	800a87a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a86e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	4313      	orrs	r3, r2
 800a878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a25      	ldr	r2, [pc, #148]	; (800a914 <TIM_Base_SetConfig+0xe4>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d01b      	beq.n	800a8ba <TIM_Base_SetConfig+0x8a>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a888:	d017      	beq.n	800a8ba <TIM_Base_SetConfig+0x8a>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a22      	ldr	r2, [pc, #136]	; (800a918 <TIM_Base_SetConfig+0xe8>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d013      	beq.n	800a8ba <TIM_Base_SetConfig+0x8a>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a21      	ldr	r2, [pc, #132]	; (800a91c <TIM_Base_SetConfig+0xec>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d00f      	beq.n	800a8ba <TIM_Base_SetConfig+0x8a>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a20      	ldr	r2, [pc, #128]	; (800a920 <TIM_Base_SetConfig+0xf0>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d00b      	beq.n	800a8ba <TIM_Base_SetConfig+0x8a>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4a1f      	ldr	r2, [pc, #124]	; (800a924 <TIM_Base_SetConfig+0xf4>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d007      	beq.n	800a8ba <TIM_Base_SetConfig+0x8a>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4a1e      	ldr	r2, [pc, #120]	; (800a928 <TIM_Base_SetConfig+0xf8>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d003      	beq.n	800a8ba <TIM_Base_SetConfig+0x8a>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4a1d      	ldr	r2, [pc, #116]	; (800a92c <TIM_Base_SetConfig+0xfc>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d108      	bne.n	800a8cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	689a      	ldr	r2, [r3, #8]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a08      	ldr	r2, [pc, #32]	; (800a914 <TIM_Base_SetConfig+0xe4>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d103      	bne.n	800a900 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	691a      	ldr	r2, [r3, #16]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2201      	movs	r2, #1
 800a904:	615a      	str	r2, [r3, #20]
}
 800a906:	bf00      	nop
 800a908:	3714      	adds	r7, #20
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	40010000 	.word	0x40010000
 800a918:	40000400 	.word	0x40000400
 800a91c:	40000800 	.word	0x40000800
 800a920:	40000c00 	.word	0x40000c00
 800a924:	40014000 	.word	0x40014000
 800a928:	40014400 	.word	0x40014400
 800a92c:	40014800 	.word	0x40014800

0800a930 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a930:	b480      	push	{r7}
 800a932:	b087      	sub	sp, #28
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a1b      	ldr	r3, [r3, #32]
 800a93e:	f023 0201 	bic.w	r2, r3, #1
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a1b      	ldr	r3, [r3, #32]
 800a94a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a95e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f023 0303 	bic.w	r3, r3, #3
 800a966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	4313      	orrs	r3, r2
 800a970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	f023 0302 	bic.w	r3, r3, #2
 800a978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	697a      	ldr	r2, [r7, #20]
 800a980:	4313      	orrs	r3, r2
 800a982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a1c      	ldr	r2, [pc, #112]	; (800a9f8 <TIM_OC1_SetConfig+0xc8>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d10c      	bne.n	800a9a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f023 0308 	bic.w	r3, r3, #8
 800a992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	697a      	ldr	r2, [r7, #20]
 800a99a:	4313      	orrs	r3, r2
 800a99c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	f023 0304 	bic.w	r3, r3, #4
 800a9a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4a13      	ldr	r2, [pc, #76]	; (800a9f8 <TIM_OC1_SetConfig+0xc8>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d111      	bne.n	800a9d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a9bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	695b      	ldr	r3, [r3, #20]
 800a9c2:	693a      	ldr	r2, [r7, #16]
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	699b      	ldr	r3, [r3, #24]
 800a9cc:	693a      	ldr	r2, [r7, #16]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	693a      	ldr	r2, [r7, #16]
 800a9d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	685a      	ldr	r2, [r3, #4]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	697a      	ldr	r2, [r7, #20]
 800a9ea:	621a      	str	r2, [r3, #32]
}
 800a9ec:	bf00      	nop
 800a9ee:	371c      	adds	r7, #28
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr
 800a9f8:	40010000 	.word	0x40010000

0800a9fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b087      	sub	sp, #28
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	f023 0210 	bic.w	r2, r3, #16
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	699b      	ldr	r3, [r3, #24]
 800aa22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	021b      	lsls	r3, r3, #8
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	f023 0320 	bic.w	r3, r3, #32
 800aa46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	011b      	lsls	r3, r3, #4
 800aa4e:	697a      	ldr	r2, [r7, #20]
 800aa50:	4313      	orrs	r3, r2
 800aa52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a1e      	ldr	r2, [pc, #120]	; (800aad0 <TIM_OC2_SetConfig+0xd4>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d10d      	bne.n	800aa78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	011b      	lsls	r3, r3, #4
 800aa6a:	697a      	ldr	r2, [r7, #20]
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a15      	ldr	r2, [pc, #84]	; (800aad0 <TIM_OC2_SetConfig+0xd4>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d113      	bne.n	800aaa8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	693a      	ldr	r2, [r7, #16]
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	693a      	ldr	r2, [r7, #16]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	693a      	ldr	r2, [r7, #16]
 800aaac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	685a      	ldr	r2, [r3, #4]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	621a      	str	r2, [r3, #32]
}
 800aac2:	bf00      	nop
 800aac4:	371c      	adds	r7, #28
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	40010000 	.word	0x40010000

0800aad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b087      	sub	sp, #28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a1b      	ldr	r3, [r3, #32]
 800aaee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	69db      	ldr	r3, [r3, #28]
 800aafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f023 0303 	bic.w	r3, r3, #3
 800ab0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	021b      	lsls	r3, r3, #8
 800ab24:	697a      	ldr	r2, [r7, #20]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a1d      	ldr	r2, [pc, #116]	; (800aba4 <TIM_OC3_SetConfig+0xd0>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d10d      	bne.n	800ab4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	021b      	lsls	r3, r3, #8
 800ab40:	697a      	ldr	r2, [r7, #20]
 800ab42:	4313      	orrs	r3, r2
 800ab44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a14      	ldr	r2, [pc, #80]	; (800aba4 <TIM_OC3_SetConfig+0xd0>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d113      	bne.n	800ab7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	695b      	ldr	r3, [r3, #20]
 800ab6a:	011b      	lsls	r3, r3, #4
 800ab6c:	693a      	ldr	r2, [r7, #16]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	699b      	ldr	r3, [r3, #24]
 800ab76:	011b      	lsls	r3, r3, #4
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	693a      	ldr	r2, [r7, #16]
 800ab82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	697a      	ldr	r2, [r7, #20]
 800ab96:	621a      	str	r2, [r3, #32]
}
 800ab98:	bf00      	nop
 800ab9a:	371c      	adds	r7, #28
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr
 800aba4:	40010000 	.word	0x40010000

0800aba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b087      	sub	sp, #28
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a1b      	ldr	r3, [r3, #32]
 800abc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	69db      	ldr	r3, [r3, #28]
 800abce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	021b      	lsls	r3, r3, #8
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	4313      	orrs	r3, r2
 800abea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	031b      	lsls	r3, r3, #12
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	4313      	orrs	r3, r2
 800abfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	4a10      	ldr	r2, [pc, #64]	; (800ac44 <TIM_OC4_SetConfig+0x9c>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d109      	bne.n	800ac1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	695b      	ldr	r3, [r3, #20]
 800ac14:	019b      	lsls	r3, r3, #6
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	697a      	ldr	r2, [r7, #20]
 800ac20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	685a      	ldr	r2, [r3, #4]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	693a      	ldr	r2, [r7, #16]
 800ac34:	621a      	str	r2, [r3, #32]
}
 800ac36:	bf00      	nop
 800ac38:	371c      	adds	r7, #28
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	40010000 	.word	0x40010000

0800ac48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b087      	sub	sp, #28
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6a1b      	ldr	r3, [r3, #32]
 800ac58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	f023 0201 	bic.w	r2, r3, #1
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	011b      	lsls	r3, r3, #4
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f023 030a 	bic.w	r3, r3, #10
 800ac84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac86:	697a      	ldr	r2, [r7, #20]
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	697a      	ldr	r2, [r7, #20]
 800ac98:	621a      	str	r2, [r3, #32]
}
 800ac9a:	bf00      	nop
 800ac9c:	371c      	adds	r7, #28
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aca6:	b480      	push	{r7}
 800aca8:	b087      	sub	sp, #28
 800acaa:	af00      	add	r7, sp, #0
 800acac:	60f8      	str	r0, [r7, #12]
 800acae:	60b9      	str	r1, [r7, #8]
 800acb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	f023 0210 	bic.w	r2, r3, #16
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	699b      	ldr	r3, [r3, #24]
 800acc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6a1b      	ldr	r3, [r3, #32]
 800acc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800acd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	031b      	lsls	r3, r3, #12
 800acd6:	697a      	ldr	r2, [r7, #20]
 800acd8:	4313      	orrs	r3, r2
 800acda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ace2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	011b      	lsls	r3, r3, #4
 800ace8:	693a      	ldr	r2, [r7, #16]
 800acea:	4313      	orrs	r3, r2
 800acec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	697a      	ldr	r2, [r7, #20]
 800acf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	693a      	ldr	r2, [r7, #16]
 800acf8:	621a      	str	r2, [r3, #32]
}
 800acfa:	bf00      	nop
 800acfc:	371c      	adds	r7, #28
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr

0800ad06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad06:	b480      	push	{r7}
 800ad08:	b085      	sub	sp, #20
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
 800ad0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad1e:	683a      	ldr	r2, [r7, #0]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	f043 0307 	orr.w	r3, r3, #7
 800ad28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	609a      	str	r2, [r3, #8]
}
 800ad30:	bf00      	nop
 800ad32:	3714      	adds	r7, #20
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b087      	sub	sp, #28
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]
 800ad48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	021a      	lsls	r2, r3, #8
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	431a      	orrs	r2, r3
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	697a      	ldr	r2, [r7, #20]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	697a      	ldr	r2, [r7, #20]
 800ad6e:	609a      	str	r2, [r3, #8]
}
 800ad70:	bf00      	nop
 800ad72:	371c      	adds	r7, #28
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b087      	sub	sp, #28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	f003 031f 	and.w	r3, r3, #31
 800ad8e:	2201      	movs	r2, #1
 800ad90:	fa02 f303 	lsl.w	r3, r2, r3
 800ad94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6a1a      	ldr	r2, [r3, #32]
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	43db      	mvns	r3, r3
 800ad9e:	401a      	ands	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6a1a      	ldr	r2, [r3, #32]
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	f003 031f 	and.w	r3, r3, #31
 800adae:	6879      	ldr	r1, [r7, #4]
 800adb0:	fa01 f303 	lsl.w	r3, r1, r3
 800adb4:	431a      	orrs	r2, r3
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	621a      	str	r2, [r3, #32]
}
 800adba:	bf00      	nop
 800adbc:	371c      	adds	r7, #28
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr
	...

0800adc8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4a1c      	ldr	r2, [pc, #112]	; (800ae44 <TIM_ResetCallback+0x7c>)
 800add4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a1b      	ldr	r2, [pc, #108]	; (800ae48 <TIM_ResetCallback+0x80>)
 800addc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a1a      	ldr	r2, [pc, #104]	; (800ae4c <TIM_ResetCallback+0x84>)
 800ade4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4a19      	ldr	r2, [pc, #100]	; (800ae50 <TIM_ResetCallback+0x88>)
 800adec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a18      	ldr	r2, [pc, #96]	; (800ae54 <TIM_ResetCallback+0x8c>)
 800adf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a17      	ldr	r2, [pc, #92]	; (800ae58 <TIM_ResetCallback+0x90>)
 800adfc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a16      	ldr	r2, [pc, #88]	; (800ae5c <TIM_ResetCallback+0x94>)
 800ae04:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a15      	ldr	r2, [pc, #84]	; (800ae60 <TIM_ResetCallback+0x98>)
 800ae0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a14      	ldr	r2, [pc, #80]	; (800ae64 <TIM_ResetCallback+0x9c>)
 800ae14:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a13      	ldr	r2, [pc, #76]	; (800ae68 <TIM_ResetCallback+0xa0>)
 800ae1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4a12      	ldr	r2, [pc, #72]	; (800ae6c <TIM_ResetCallback+0xa4>)
 800ae24:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a11      	ldr	r2, [pc, #68]	; (800ae70 <TIM_ResetCallback+0xa8>)
 800ae2c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a10      	ldr	r2, [pc, #64]	; (800ae74 <TIM_ResetCallback+0xac>)
 800ae34:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr
 800ae44:	08003dad 	.word	0x08003dad
 800ae48:	0800a4e7 	.word	0x0800a4e7
 800ae4c:	0800a55f 	.word	0x0800a55f
 800ae50:	0800a573 	.word	0x0800a573
 800ae54:	0800a50f 	.word	0x0800a50f
 800ae58:	0800a523 	.word	0x0800a523
 800ae5c:	0800a4fb 	.word	0x0800a4fb
 800ae60:	0800a537 	.word	0x0800a537
 800ae64:	0800a54b 	.word	0x0800a54b
 800ae68:	0800a587 	.word	0x0800a587
 800ae6c:	0800aff9 	.word	0x0800aff9
 800ae70:	0800b00d 	.word	0x0800b00d
 800ae74:	0800b021 	.word	0x0800b021

0800ae78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d101      	bne.n	800ae90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae8c:	2302      	movs	r3, #2
 800ae8e:	e050      	b.n	800af32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a1c      	ldr	r2, [pc, #112]	; (800af40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d018      	beq.n	800af06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aedc:	d013      	beq.n	800af06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a18      	ldr	r2, [pc, #96]	; (800af44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d00e      	beq.n	800af06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a16      	ldr	r2, [pc, #88]	; (800af48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d009      	beq.n	800af06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a15      	ldr	r2, [pc, #84]	; (800af4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d004      	beq.n	800af06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a13      	ldr	r2, [pc, #76]	; (800af50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d10c      	bne.n	800af20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	4313      	orrs	r3, r2
 800af16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3714      	adds	r7, #20
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	40010000 	.word	0x40010000
 800af44:	40000400 	.word	0x40000400
 800af48:	40000800 	.word	0x40000800
 800af4c:	40000c00 	.word	0x40000c00
 800af50:	40014000 	.word	0x40014000

0800af54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af5e:	2300      	movs	r3, #0
 800af60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d101      	bne.n	800af70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af6c:	2302      	movs	r3, #2
 800af6e:	e03d      	b.n	800afec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	4313      	orrs	r3, r2
 800af84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	4313      	orrs	r3, r2
 800af92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4313      	orrs	r3, r2
 800afae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	4313      	orrs	r3, r2
 800afbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	695b      	ldr	r3, [r3, #20]
 800afc8:	4313      	orrs	r3, r2
 800afca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	69db      	ldr	r3, [r3, #28]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3714      	adds	r7, #20
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b014:	bf00      	nop
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b028:	bf00      	nop
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d101      	bne.n	800b046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	e04a      	b.n	800b0dc <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d111      	bne.n	800b076 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 fd72 	bl	800bb44 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b064:	2b00      	cmp	r3, #0
 800b066:	d102      	bne.n	800b06e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4a1e      	ldr	r2, [pc, #120]	; (800b0e4 <HAL_UART_Init+0xb0>)
 800b06c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2224      	movs	r2, #36	; 0x24
 800b07a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	68da      	ldr	r2, [r3, #12]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b08c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f001 f83c 	bl	800c10c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	691a      	ldr	r2, [r3, #16]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b0a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	695a      	ldr	r2, [r3, #20]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b0b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	68da      	ldr	r2, [r3, #12]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b0c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2220      	movs	r2, #32
 800b0ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2220      	movs	r2, #32
 800b0d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	08004c49 	.word	0x08004c49

0800b0e8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b087      	sub	sp, #28
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	607a      	str	r2, [r7, #4]
 800b0f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d107      	bne.n	800b110 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b104:	f043 0220 	orr.w	r2, r3, #32
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e08c      	b.n	800b22a <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b116:	2b01      	cmp	r3, #1
 800b118:	d101      	bne.n	800b11e <HAL_UART_RegisterCallback+0x36>
 800b11a:	2302      	movs	r3, #2
 800b11c:	e085      	b.n	800b22a <HAL_UART_RegisterCallback+0x142>
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2201      	movs	r2, #1
 800b122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	2b20      	cmp	r3, #32
 800b130:	d151      	bne.n	800b1d6 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800b132:	7afb      	ldrb	r3, [r7, #11]
 800b134:	2b0c      	cmp	r3, #12
 800b136:	d845      	bhi.n	800b1c4 <HAL_UART_RegisterCallback+0xdc>
 800b138:	a201      	add	r2, pc, #4	; (adr r2, 800b140 <HAL_UART_RegisterCallback+0x58>)
 800b13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b13e:	bf00      	nop
 800b140:	0800b175 	.word	0x0800b175
 800b144:	0800b17d 	.word	0x0800b17d
 800b148:	0800b185 	.word	0x0800b185
 800b14c:	0800b18d 	.word	0x0800b18d
 800b150:	0800b195 	.word	0x0800b195
 800b154:	0800b19d 	.word	0x0800b19d
 800b158:	0800b1a5 	.word	0x0800b1a5
 800b15c:	0800b1ad 	.word	0x0800b1ad
 800b160:	0800b1c5 	.word	0x0800b1c5
 800b164:	0800b1c5 	.word	0x0800b1c5
 800b168:	0800b1c5 	.word	0x0800b1c5
 800b16c:	0800b1b5 	.word	0x0800b1b5
 800b170:	0800b1bd 	.word	0x0800b1bd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800b17a:	e051      	b.n	800b220 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800b182:	e04d      	b.n	800b220 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800b18a:	e049      	b.n	800b220 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800b192:	e045      	b.n	800b220 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800b19a:	e041      	b.n	800b220 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800b1a2:	e03d      	b.n	800b220 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800b1aa:	e039      	b.n	800b220 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800b1b2:	e035      	b.n	800b220 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b1ba:	e031      	b.n	800b220 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b1c2:	e02d      	b.n	800b220 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c8:	f043 0220 	orr.w	r2, r3, #32
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	75fb      	strb	r3, [r7, #23]
        break;
 800b1d4:	e024      	b.n	800b220 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d116      	bne.n	800b210 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800b1e2:	7afb      	ldrb	r3, [r7, #11]
 800b1e4:	2b0b      	cmp	r3, #11
 800b1e6:	d002      	beq.n	800b1ee <HAL_UART_RegisterCallback+0x106>
 800b1e8:	2b0c      	cmp	r3, #12
 800b1ea:	d004      	beq.n	800b1f6 <HAL_UART_RegisterCallback+0x10e>
 800b1ec:	e007      	b.n	800b1fe <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b1f4:	e014      	b.n	800b220 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b1fc:	e010      	b.n	800b220 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b202:	f043 0220 	orr.w	r2, r3, #32
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	75fb      	strb	r3, [r7, #23]
        break;
 800b20e:	e007      	b.n	800b220 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b214:	f043 0220 	orr.w	r2, r3, #32
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2200      	movs	r2, #0
 800b224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b228:	7dfb      	ldrb	r3, [r7, #23]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	371c      	adds	r7, #28
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop

0800b238 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	4613      	mov	r3, r2
 800b244:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	2b20      	cmp	r3, #32
 800b250:	d130      	bne.n	800b2b4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d002      	beq.n	800b25e <HAL_UART_Transmit_IT+0x26>
 800b258:	88fb      	ldrh	r3, [r7, #6]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	e029      	b.n	800b2b6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d101      	bne.n	800b270 <HAL_UART_Transmit_IT+0x38>
 800b26c:	2302      	movs	r3, #2
 800b26e:	e022      	b.n	800b2b6 <HAL_UART_Transmit_IT+0x7e>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	68ba      	ldr	r2, [r7, #8]
 800b27c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	88fa      	ldrh	r2, [r7, #6]
 800b282:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	88fa      	ldrh	r2, [r7, #6]
 800b288:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2200      	movs	r2, #0
 800b28e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2221      	movs	r2, #33	; 0x21
 800b294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	68da      	ldr	r2, [r3, #12]
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b2ae:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	e000      	b.n	800b2b6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b2b4:	2302      	movs	r3, #2
  }
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3714      	adds	r7, #20
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr

0800b2c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b084      	sub	sp, #16
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	60f8      	str	r0, [r7, #12]
 800b2ca:	60b9      	str	r1, [r7, #8]
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	2b20      	cmp	r3, #32
 800b2da:	d11d      	bne.n	800b318 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d002      	beq.n	800b2e8 <HAL_UART_Receive_IT+0x26>
 800b2e2:	88fb      	ldrh	r3, [r7, #6]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d101      	bne.n	800b2ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e016      	b.n	800b31a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d101      	bne.n	800b2fa <HAL_UART_Receive_IT+0x38>
 800b2f6:	2302      	movs	r3, #2
 800b2f8:	e00f      	b.n	800b31a <HAL_UART_Receive_IT+0x58>
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b308:	88fb      	ldrh	r3, [r7, #6]
 800b30a:	461a      	mov	r2, r3
 800b30c:	68b9      	ldr	r1, [r7, #8]
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f000 fcf8 	bl	800bd04 <UART_Start_Receive_IT>
 800b314:	4603      	mov	r3, r0
 800b316:	e000      	b.n	800b31a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b318:	2302      	movs	r3, #2
  }
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
	...

0800b324 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b08c      	sub	sp, #48	; 0x30
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	4613      	mov	r3, r2
 800b330:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	2b20      	cmp	r3, #32
 800b33c:	d165      	bne.n	800b40a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d002      	beq.n	800b34a <HAL_UART_Transmit_DMA+0x26>
 800b344:	88fb      	ldrh	r3, [r7, #6]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d101      	bne.n	800b34e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
 800b34c:	e05e      	b.n	800b40c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b354:	2b01      	cmp	r3, #1
 800b356:	d101      	bne.n	800b35c <HAL_UART_Transmit_DMA+0x38>
 800b358:	2302      	movs	r3, #2
 800b35a:	e057      	b.n	800b40c <HAL_UART_Transmit_DMA+0xe8>
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	88fa      	ldrh	r2, [r7, #6]
 800b36e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	88fa      	ldrh	r2, [r7, #6]
 800b374:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2200      	movs	r2, #0
 800b37a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2221      	movs	r2, #33	; 0x21
 800b380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b388:	4a22      	ldr	r2, [pc, #136]	; (800b414 <HAL_UART_Transmit_DMA+0xf0>)
 800b38a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b390:	4a21      	ldr	r2, [pc, #132]	; (800b418 <HAL_UART_Transmit_DMA+0xf4>)
 800b392:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b398:	4a20      	ldr	r2, [pc, #128]	; (800b41c <HAL_UART_Transmit_DMA+0xf8>)
 800b39a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b3a4:	f107 0308 	add.w	r3, r7, #8
 800b3a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b0:	6819      	ldr	r1, [r3, #0]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	3304      	adds	r3, #4
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	88fb      	ldrh	r3, [r7, #6]
 800b3bc:	f7fa fd14 	bl	8005de8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3c8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	3314      	adds	r3, #20
 800b3d8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	e853 3f00 	ldrex	r3, [r3]
 800b3e0:	617b      	str	r3, [r7, #20]
   return(result);
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	3314      	adds	r3, #20
 800b3f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3f2:	627a      	str	r2, [r7, #36]	; 0x24
 800b3f4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f6:	6a39      	ldr	r1, [r7, #32]
 800b3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3fa:	e841 2300 	strex	r3, r2, [r1]
 800b3fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1e5      	bne.n	800b3d2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800b406:	2300      	movs	r3, #0
 800b408:	e000      	b.n	800b40c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800b40a:	2302      	movs	r3, #2
  }
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3730      	adds	r7, #48	; 0x30
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	0800bbb5 	.word	0x0800bbb5
 800b418:	0800bc51 	.word	0x0800bc51
 800b41c:	0800bc6f 	.word	0x0800bc6f

0800b420 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b09a      	sub	sp, #104	; 0x68
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	330c      	adds	r3, #12
 800b42e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b432:	e853 3f00 	ldrex	r3, [r3]
 800b436:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b43a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b43e:	667b      	str	r3, [r7, #100]	; 0x64
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	330c      	adds	r3, #12
 800b446:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b448:	657a      	str	r2, [r7, #84]	; 0x54
 800b44a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b44c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b44e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b450:	e841 2300 	strex	r3, r2, [r1]
 800b454:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d1e5      	bne.n	800b428 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	3314      	adds	r3, #20
 800b462:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b466:	e853 3f00 	ldrex	r3, [r3]
 800b46a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46e:	f023 0301 	bic.w	r3, r3, #1
 800b472:	663b      	str	r3, [r7, #96]	; 0x60
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	3314      	adds	r3, #20
 800b47a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b47c:	643a      	str	r2, [r7, #64]	; 0x40
 800b47e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b480:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b482:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b484:	e841 2300 	strex	r3, r2, [r1]
 800b488:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1e5      	bne.n	800b45c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b494:	2b01      	cmp	r3, #1
 800b496:	d119      	bne.n	800b4cc <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	330c      	adds	r3, #12
 800b49e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a0:	6a3b      	ldr	r3, [r7, #32]
 800b4a2:	e853 3f00 	ldrex	r3, [r3]
 800b4a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	f023 0310 	bic.w	r3, r3, #16
 800b4ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	330c      	adds	r3, #12
 800b4b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b4ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4c0:	e841 2300 	strex	r3, r2, [r1]
 800b4c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1e5      	bne.n	800b498 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	695b      	ldr	r3, [r3, #20]
 800b4d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4d6:	2b40      	cmp	r3, #64	; 0x40
 800b4d8:	d136      	bne.n	800b548 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3314      	adds	r3, #20
 800b4e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	e853 3f00 	ldrex	r3, [r3]
 800b4e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4f0:	65bb      	str	r3, [r7, #88]	; 0x58
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	3314      	adds	r3, #20
 800b4f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4fa:	61ba      	str	r2, [r7, #24]
 800b4fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fe:	6979      	ldr	r1, [r7, #20]
 800b500:	69ba      	ldr	r2, [r7, #24]
 800b502:	e841 2300 	strex	r3, r2, [r1]
 800b506:	613b      	str	r3, [r7, #16]
   return(result);
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1e5      	bne.n	800b4da <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b512:	2b00      	cmp	r3, #0
 800b514:	d018      	beq.n	800b548 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51a:	2200      	movs	r2, #0
 800b51c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b522:	4618      	mov	r0, r3
 800b524:	f7fa fcb8 	bl	8005e98 <HAL_DMA_Abort>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00c      	beq.n	800b548 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b532:	4618      	mov	r0, r3
 800b534:	f7fa feda 	bl	80062ec <HAL_DMA_GetError>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b20      	cmp	r3, #32
 800b53c:	d104      	bne.n	800b548 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2210      	movs	r2, #16
 800b542:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800b544:	2303      	movs	r3, #3
 800b546:	e00a      	b.n	800b55e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2220      	movs	r2, #32
 800b552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3768      	adds	r7, #104	; 0x68
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
	...

0800b568 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b0ba      	sub	sp, #232	; 0xe8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	695b      	ldr	r3, [r3, #20]
 800b58a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b58e:	2300      	movs	r3, #0
 800b590:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b594:	2300      	movs	r3, #0
 800b596:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b59a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b59e:	f003 030f 	and.w	r3, r3, #15
 800b5a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b5a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d10f      	bne.n	800b5ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b5ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5b2:	f003 0320 	and.w	r3, r3, #32
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d009      	beq.n	800b5ce <HAL_UART_IRQHandler+0x66>
 800b5ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5be:	f003 0320 	and.w	r3, r3, #32
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d003      	beq.n	800b5ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 fce3 	bl	800bf92 <UART_Receive_IT>
      return;
 800b5cc:	e25b      	b.n	800ba86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b5ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f000 80e1 	beq.w	800b79a <HAL_UART_IRQHandler+0x232>
 800b5d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5dc:	f003 0301 	and.w	r3, r3, #1
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d106      	bne.n	800b5f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b5e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f000 80d4 	beq.w	800b79a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b5f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5f6:	f003 0301 	and.w	r3, r3, #1
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00b      	beq.n	800b616 <HAL_UART_IRQHandler+0xae>
 800b5fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b606:	2b00      	cmp	r3, #0
 800b608:	d005      	beq.n	800b616 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60e:	f043 0201 	orr.w	r2, r3, #1
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b61a:	f003 0304 	and.w	r3, r3, #4
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00b      	beq.n	800b63a <HAL_UART_IRQHandler+0xd2>
 800b622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b626:	f003 0301 	and.w	r3, r3, #1
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d005      	beq.n	800b63a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b632:	f043 0202 	orr.w	r2, r3, #2
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b63a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b63e:	f003 0302 	and.w	r3, r3, #2
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00b      	beq.n	800b65e <HAL_UART_IRQHandler+0xf6>
 800b646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b64a:	f003 0301 	and.w	r3, r3, #1
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d005      	beq.n	800b65e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b656:	f043 0204 	orr.w	r2, r3, #4
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b65e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b662:	f003 0308 	and.w	r3, r3, #8
 800b666:	2b00      	cmp	r3, #0
 800b668:	d011      	beq.n	800b68e <HAL_UART_IRQHandler+0x126>
 800b66a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b66e:	f003 0320 	and.w	r3, r3, #32
 800b672:	2b00      	cmp	r3, #0
 800b674:	d105      	bne.n	800b682 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b67a:	f003 0301 	and.w	r3, r3, #1
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d005      	beq.n	800b68e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b686:	f043 0208 	orr.w	r2, r3, #8
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b692:	2b00      	cmp	r3, #0
 800b694:	f000 81f2 	beq.w	800ba7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b69c:	f003 0320 	and.w	r3, r3, #32
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d008      	beq.n	800b6b6 <HAL_UART_IRQHandler+0x14e>
 800b6a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6a8:	f003 0320 	and.w	r3, r3, #32
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d002      	beq.n	800b6b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 fc6e 	bl	800bf92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	695b      	ldr	r3, [r3, #20]
 800b6bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6c0:	2b40      	cmp	r3, #64	; 0x40
 800b6c2:	bf0c      	ite	eq
 800b6c4:	2301      	moveq	r3, #1
 800b6c6:	2300      	movne	r3, #0
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d2:	f003 0308 	and.w	r3, r3, #8
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d103      	bne.n	800b6e2 <HAL_UART_IRQHandler+0x17a>
 800b6da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d051      	beq.n	800b786 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fb74 	bl	800bdd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	695b      	ldr	r3, [r3, #20]
 800b6ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f2:	2b40      	cmp	r3, #64	; 0x40
 800b6f4:	d142      	bne.n	800b77c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	3314      	adds	r3, #20
 800b6fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b700:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b704:	e853 3f00 	ldrex	r3, [r3]
 800b708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b70c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	3314      	adds	r3, #20
 800b71e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b722:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b726:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b72e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b732:	e841 2300 	strex	r3, r2, [r1]
 800b736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b73a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1d9      	bne.n	800b6f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b746:	2b00      	cmp	r3, #0
 800b748:	d013      	beq.n	800b772 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b74e:	4a7f      	ldr	r2, [pc, #508]	; (800b94c <HAL_UART_IRQHandler+0x3e4>)
 800b750:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b756:	4618      	mov	r0, r3
 800b758:	f7fa fc0e 	bl	8005f78 <HAL_DMA_Abort_IT>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d019      	beq.n	800b796 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b76c:	4610      	mov	r0, r2
 800b76e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b770:	e011      	b.n	800b796 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b77a:	e00c      	b.n	800b796 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b784:	e007      	b.n	800b796 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b794:	e172      	b.n	800ba7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b796:	bf00      	nop
    return;
 800b798:	e170      	b.n	800ba7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	f040 814c 	bne.w	800ba3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b7a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7a8:	f003 0310 	and.w	r3, r3, #16
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f000 8145 	beq.w	800ba3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b7b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7b6:	f003 0310 	and.w	r3, r3, #16
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f000 813e 	beq.w	800ba3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	60bb      	str	r3, [r7, #8]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	60bb      	str	r3, [r7, #8]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	60bb      	str	r3, [r7, #8]
 800b7d4:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	695b      	ldr	r3, [r3, #20]
 800b7dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7e0:	2b40      	cmp	r3, #64	; 0x40
 800b7e2:	f040 80b5 	bne.w	800b950 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b7f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	f000 8142 	beq.w	800ba80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b800:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b804:	429a      	cmp	r2, r3
 800b806:	f080 813b 	bcs.w	800ba80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b810:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b816:	69db      	ldr	r3, [r3, #28]
 800b818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b81c:	f000 8088 	beq.w	800b930 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	330c      	adds	r3, #12
 800b826:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b82e:	e853 3f00 	ldrex	r3, [r3]
 800b832:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b836:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b83a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b83e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	330c      	adds	r3, #12
 800b848:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b84c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b850:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b854:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b858:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b85c:	e841 2300 	strex	r3, r2, [r1]
 800b860:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b864:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1d9      	bne.n	800b820 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	3314      	adds	r3, #20
 800b872:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b876:	e853 3f00 	ldrex	r3, [r3]
 800b87a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b87c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b87e:	f023 0301 	bic.w	r3, r3, #1
 800b882:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	3314      	adds	r3, #20
 800b88c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b890:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b894:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b896:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b898:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b89c:	e841 2300 	strex	r3, r2, [r1]
 800b8a0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b8a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1e1      	bne.n	800b86c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	3314      	adds	r3, #20
 800b8ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8b2:	e853 3f00 	ldrex	r3, [r3]
 800b8b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b8b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3314      	adds	r3, #20
 800b8c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b8cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b8ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b8d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b8d4:	e841 2300 	strex	r3, r2, [r1]
 800b8d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b8da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d1e3      	bne.n	800b8a8 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2220      	movs	r2, #32
 800b8e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	330c      	adds	r3, #12
 800b8f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8f8:	e853 3f00 	ldrex	r3, [r3]
 800b8fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b8fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b900:	f023 0310 	bic.w	r3, r3, #16
 800b904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	330c      	adds	r3, #12
 800b90e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b912:	65ba      	str	r2, [r7, #88]	; 0x58
 800b914:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b916:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b918:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b91a:	e841 2300 	strex	r3, r2, [r1]
 800b91e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1e3      	bne.n	800b8ee <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7fa fab4 	bl	8005e98 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b93c:	b292      	uxth	r2, r2
 800b93e:	1a8a      	subs	r2, r1, r2
 800b940:	b292      	uxth	r2, r2
 800b942:	4611      	mov	r1, r2
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b948:	e09a      	b.n	800ba80 <HAL_UART_IRQHandler+0x518>
 800b94a:	bf00      	nop
 800b94c:	0800be97 	.word	0x0800be97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b958:	b29b      	uxth	r3, r3
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b964:	b29b      	uxth	r3, r3
 800b966:	2b00      	cmp	r3, #0
 800b968:	f000 808c 	beq.w	800ba84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b96c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b970:	2b00      	cmp	r3, #0
 800b972:	f000 8087 	beq.w	800ba84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	330c      	adds	r3, #12
 800b97c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b980:	e853 3f00 	ldrex	r3, [r3]
 800b984:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b988:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b98c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	330c      	adds	r3, #12
 800b996:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b99a:	647a      	str	r2, [r7, #68]	; 0x44
 800b99c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b99e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9a2:	e841 2300 	strex	r3, r2, [r1]
 800b9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d1e3      	bne.n	800b976 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	3314      	adds	r3, #20
 800b9b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b8:	e853 3f00 	ldrex	r3, [r3]
 800b9bc:	623b      	str	r3, [r7, #32]
   return(result);
 800b9be:	6a3b      	ldr	r3, [r7, #32]
 800b9c0:	f023 0301 	bic.w	r3, r3, #1
 800b9c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	3314      	adds	r3, #20
 800b9ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b9d2:	633a      	str	r2, [r7, #48]	; 0x30
 800b9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9da:	e841 2300 	strex	r3, r2, [r1]
 800b9de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d1e3      	bne.n	800b9ae <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2220      	movs	r2, #32
 800b9ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	330c      	adds	r3, #12
 800b9fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	e853 3f00 	ldrex	r3, [r3]
 800ba02:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f023 0310 	bic.w	r3, r3, #16
 800ba0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	330c      	adds	r3, #12
 800ba14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ba18:	61fa      	str	r2, [r7, #28]
 800ba1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1c:	69b9      	ldr	r1, [r7, #24]
 800ba1e:	69fa      	ldr	r2, [r7, #28]
 800ba20:	e841 2300 	strex	r3, r2, [r1]
 800ba24:	617b      	str	r3, [r7, #20]
   return(result);
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1e3      	bne.n	800b9f4 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba30:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800ba34:	4611      	mov	r1, r2
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ba3a:	e023      	b.n	800ba84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ba3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d009      	beq.n	800ba5c <HAL_UART_IRQHandler+0x4f4>
 800ba48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d003      	beq.n	800ba5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 fa33 	bl	800bec0 <UART_Transmit_IT>
    return;
 800ba5a:	e014      	b.n	800ba86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ba5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d00e      	beq.n	800ba86 <HAL_UART_IRQHandler+0x51e>
 800ba68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d008      	beq.n	800ba86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 fa73 	bl	800bf60 <UART_EndTransmit_IT>
    return;
 800ba7a:	e004      	b.n	800ba86 <HAL_UART_IRQHandler+0x51e>
    return;
 800ba7c:	bf00      	nop
 800ba7e:	e002      	b.n	800ba86 <HAL_UART_IRQHandler+0x51e>
      return;
 800ba80:	bf00      	nop
 800ba82:	e000      	b.n	800ba86 <HAL_UART_IRQHandler+0x51e>
      return;
 800ba84:	bf00      	nop
  }
}
 800ba86:	37e8      	adds	r7, #232	; 0xe8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ba94:	bf00      	nop
 800ba96:	370c      	adds	r7, #12
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr

0800baa0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800baa8:	bf00      	nop
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b083      	sub	sp, #12
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800babc:	bf00      	nop
 800babe:	370c      	adds	r7, #12
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bad0:	bf00      	nop
 800bad2:	370c      	adds	r7, #12
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr

0800badc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800badc:	b480      	push	{r7}
 800bade:	b083      	sub	sp, #12
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bae4:	bf00      	nop
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800baf8:	bf00      	nop
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800bb0c:	bf00      	nop
 800bb0e:	370c      	adds	r7, #12
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bb20:	bf00      	nop
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	460b      	mov	r3, r1
 800bb36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb38:	bf00      	nop
 800bb3a:	370c      	adds	r7, #12
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4a10      	ldr	r2, [pc, #64]	; (800bb90 <UART_InitCallbacksToDefault+0x4c>)
 800bb50:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4a0f      	ldr	r2, [pc, #60]	; (800bb94 <UART_InitCallbacksToDefault+0x50>)
 800bb56:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4a0f      	ldr	r2, [pc, #60]	; (800bb98 <UART_InitCallbacksToDefault+0x54>)
 800bb5c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4a0e      	ldr	r2, [pc, #56]	; (800bb9c <UART_InitCallbacksToDefault+0x58>)
 800bb62:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a0e      	ldr	r2, [pc, #56]	; (800bba0 <UART_InitCallbacksToDefault+0x5c>)
 800bb68:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4a0d      	ldr	r2, [pc, #52]	; (800bba4 <UART_InitCallbacksToDefault+0x60>)
 800bb6e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	4a0d      	ldr	r2, [pc, #52]	; (800bba8 <UART_InitCallbacksToDefault+0x64>)
 800bb74:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	4a0c      	ldr	r2, [pc, #48]	; (800bbac <UART_InitCallbacksToDefault+0x68>)
 800bb7a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4a0c      	ldr	r2, [pc, #48]	; (800bbb0 <UART_InitCallbacksToDefault+0x6c>)
 800bb80:	669a      	str	r2, [r3, #104]	; 0x68

}
 800bb82:	bf00      	nop
 800bb84:	370c      	adds	r7, #12
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop
 800bb90:	0800baa1 	.word	0x0800baa1
 800bb94:	0800ba8d 	.word	0x0800ba8d
 800bb98:	0800bac9 	.word	0x0800bac9
 800bb9c:	0800bab5 	.word	0x0800bab5
 800bba0:	0800badd 	.word	0x0800badd
 800bba4:	0800baf1 	.word	0x0800baf1
 800bba8:	0800bb05 	.word	0x0800bb05
 800bbac:	0800bb19 	.word	0x0800bb19
 800bbb0:	0800bb2d 	.word	0x0800bb2d

0800bbb4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b090      	sub	sp, #64	; 0x40
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d137      	bne.n	800bc40 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800bbd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bbd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	3314      	adds	r3, #20
 800bbdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe0:	e853 3f00 	ldrex	r3, [r3]
 800bbe4:	623b      	str	r3, [r7, #32]
   return(result);
 800bbe6:	6a3b      	ldr	r3, [r7, #32]
 800bbe8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbec:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3314      	adds	r3, #20
 800bbf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbf6:	633a      	str	r2, [r7, #48]	; 0x30
 800bbf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbfe:	e841 2300 	strex	r3, r2, [r1]
 800bc02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d1e5      	bne.n	800bbd6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	330c      	adds	r3, #12
 800bc10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	e853 3f00 	ldrex	r3, [r3]
 800bc18:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc20:	637b      	str	r3, [r7, #52]	; 0x34
 800bc22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	330c      	adds	r3, #12
 800bc28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc2a:	61fa      	str	r2, [r7, #28]
 800bc2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2e:	69b9      	ldr	r1, [r7, #24]
 800bc30:	69fa      	ldr	r2, [r7, #28]
 800bc32:	e841 2300 	strex	r3, r2, [r1]
 800bc36:	617b      	str	r3, [r7, #20]
   return(result);
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d1e5      	bne.n	800bc0a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc3e:	e003      	b.n	800bc48 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800bc40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc46:	4798      	blx	r3
}
 800bc48:	bf00      	nop
 800bc4a:	3740      	adds	r7, #64	; 0x40
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc5c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc66:	bf00      	nop
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b084      	sub	sp, #16
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bc76:	2300      	movs	r3, #0
 800bc78:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc7e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	695b      	ldr	r3, [r3, #20]
 800bc86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc8a:	2b80      	cmp	r3, #128	; 0x80
 800bc8c:	bf0c      	ite	eq
 800bc8e:	2301      	moveq	r3, #1
 800bc90:	2300      	movne	r3, #0
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	2b21      	cmp	r3, #33	; 0x21
 800bca0:	d108      	bne.n	800bcb4 <UART_DMAError+0x46>
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d005      	beq.n	800bcb4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bcae:	68b8      	ldr	r0, [r7, #8]
 800bcb0:	f000 f866 	bl	800bd80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	695b      	ldr	r3, [r3, #20]
 800bcba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcbe:	2b40      	cmp	r3, #64	; 0x40
 800bcc0:	bf0c      	ite	eq
 800bcc2:	2301      	moveq	r3, #1
 800bcc4:	2300      	movne	r3, #0
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	2b22      	cmp	r3, #34	; 0x22
 800bcd4:	d108      	bne.n	800bce8 <UART_DMAError+0x7a>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d005      	beq.n	800bce8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	2200      	movs	r2, #0
 800bce0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bce2:	68b8      	ldr	r0, [r7, #8]
 800bce4:	f000 f874 	bl	800bdd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcec:	f043 0210 	orr.w	r2, r3, #16
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcf8:	68b8      	ldr	r0, [r7, #8]
 800bcfa:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcfc:	bf00      	nop
 800bcfe:	3710      	adds	r7, #16
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	68ba      	ldr	r2, [r7, #8]
 800bd16:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	88fa      	ldrh	r2, [r7, #6]
 800bd1c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	88fa      	ldrh	r2, [r7, #6]
 800bd22:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2200      	movs	r2, #0
 800bd28:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2222      	movs	r2, #34	; 0x22
 800bd2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	691b      	ldr	r3, [r3, #16]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d007      	beq.n	800bd52 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	68da      	ldr	r2, [r3, #12]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd50:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	695a      	ldr	r2, [r3, #20]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f042 0201 	orr.w	r2, r2, #1
 800bd60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	68da      	ldr	r2, [r3, #12]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f042 0220 	orr.w	r2, r2, #32
 800bd70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bd72:	2300      	movs	r3, #0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3714      	adds	r7, #20
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b089      	sub	sp, #36	; 0x24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	330c      	adds	r3, #12
 800bd8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	e853 3f00 	ldrex	r3, [r3]
 800bd96:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bd9e:	61fb      	str	r3, [r7, #28]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	330c      	adds	r3, #12
 800bda6:	69fa      	ldr	r2, [r7, #28]
 800bda8:	61ba      	str	r2, [r7, #24]
 800bdaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdac:	6979      	ldr	r1, [r7, #20]
 800bdae:	69ba      	ldr	r2, [r7, #24]
 800bdb0:	e841 2300 	strex	r3, r2, [r1]
 800bdb4:	613b      	str	r3, [r7, #16]
   return(result);
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d1e5      	bne.n	800bd88 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2220      	movs	r2, #32
 800bdc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800bdc4:	bf00      	nop
 800bdc6:	3724      	adds	r7, #36	; 0x24
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b095      	sub	sp, #84	; 0x54
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	330c      	adds	r3, #12
 800bdde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde2:	e853 3f00 	ldrex	r3, [r3]
 800bde6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bdee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	330c      	adds	r3, #12
 800bdf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bdf8:	643a      	str	r2, [r7, #64]	; 0x40
 800bdfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bdfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be00:	e841 2300 	strex	r3, r2, [r1]
 800be04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d1e5      	bne.n	800bdd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3314      	adds	r3, #20
 800be12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be14:	6a3b      	ldr	r3, [r7, #32]
 800be16:	e853 3f00 	ldrex	r3, [r3]
 800be1a:	61fb      	str	r3, [r7, #28]
   return(result);
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	f023 0301 	bic.w	r3, r3, #1
 800be22:	64bb      	str	r3, [r7, #72]	; 0x48
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	3314      	adds	r3, #20
 800be2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be34:	e841 2300 	strex	r3, r2, [r1]
 800be38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d1e5      	bne.n	800be0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be44:	2b01      	cmp	r3, #1
 800be46:	d119      	bne.n	800be7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	330c      	adds	r3, #12
 800be4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	e853 3f00 	ldrex	r3, [r3]
 800be56:	60bb      	str	r3, [r7, #8]
   return(result);
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	f023 0310 	bic.w	r3, r3, #16
 800be5e:	647b      	str	r3, [r7, #68]	; 0x44
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	330c      	adds	r3, #12
 800be66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be68:	61ba      	str	r2, [r7, #24]
 800be6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6c:	6979      	ldr	r1, [r7, #20]
 800be6e:	69ba      	ldr	r2, [r7, #24]
 800be70:	e841 2300 	strex	r3, r2, [r1]
 800be74:	613b      	str	r3, [r7, #16]
   return(result);
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d1e5      	bne.n	800be48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2220      	movs	r2, #32
 800be80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	631a      	str	r2, [r3, #48]	; 0x30
}
 800be8a:	bf00      	nop
 800be8c:	3754      	adds	r7, #84	; 0x54
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr

0800be96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b084      	sub	sp, #16
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2200      	movs	r2, #0
 800bea8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800beb8:	bf00      	nop
 800beba:	3710      	adds	r7, #16
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	2b21      	cmp	r3, #33	; 0x21
 800bed2:	d13e      	bne.n	800bf52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bedc:	d114      	bne.n	800bf08 <UART_Transmit_IT+0x48>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	691b      	ldr	r3, [r3, #16]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d110      	bne.n	800bf08 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6a1b      	ldr	r3, [r3, #32]
 800beea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	881b      	ldrh	r3, [r3, #0]
 800bef0:	461a      	mov	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800befa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6a1b      	ldr	r3, [r3, #32]
 800bf00:	1c9a      	adds	r2, r3, #2
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	621a      	str	r2, [r3, #32]
 800bf06:	e008      	b.n	800bf1a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6a1b      	ldr	r3, [r3, #32]
 800bf0c:	1c59      	adds	r1, r3, #1
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	6211      	str	r1, [r2, #32]
 800bf12:	781a      	ldrb	r2, [r3, #0]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	3b01      	subs	r3, #1
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	4619      	mov	r1, r3
 800bf28:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d10f      	bne.n	800bf4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68da      	ldr	r2, [r3, #12]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	68da      	ldr	r2, [r3, #12]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	e000      	b.n	800bf54 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bf52:	2302      	movs	r3, #2
  }
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68da      	ldr	r2, [r3, #12]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2220      	movs	r2, #32
 800bf7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bf88:	2300      	movs	r3, #0
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3708      	adds	r7, #8
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bf92:	b580      	push	{r7, lr}
 800bf94:	b08c      	sub	sp, #48	; 0x30
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	2b22      	cmp	r3, #34	; 0x22
 800bfa4:	f040 80ad 	bne.w	800c102 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfb0:	d117      	bne.n	800bfe2 <UART_Receive_IT+0x50>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d113      	bne.n	800bfe2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfda:	1c9a      	adds	r2, r3, #2
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	629a      	str	r2, [r3, #40]	; 0x28
 800bfe0:	e026      	b.n	800c030 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfe6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bff4:	d007      	beq.n	800c006 <UART_Receive_IT+0x74>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d10a      	bne.n	800c014 <UART_Receive_IT+0x82>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d106      	bne.n	800c014 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	b2da      	uxtb	r2, r3
 800c00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c010:	701a      	strb	r2, [r3, #0]
 800c012:	e008      	b.n	800c026 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c020:	b2da      	uxtb	r2, r3
 800c022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c024:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c02a:	1c5a      	adds	r2, r3, #1
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c034:	b29b      	uxth	r3, r3
 800c036:	3b01      	subs	r3, #1
 800c038:	b29b      	uxth	r3, r3
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	4619      	mov	r1, r3
 800c03e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c040:	2b00      	cmp	r3, #0
 800c042:	d15c      	bne.n	800c0fe <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	68da      	ldr	r2, [r3, #12]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f022 0220 	bic.w	r2, r2, #32
 800c052:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68da      	ldr	r2, [r3, #12]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c062:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	695a      	ldr	r2, [r3, #20]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f022 0201 	bic.w	r2, r2, #1
 800c072:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2220      	movs	r2, #32
 800c078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c080:	2b01      	cmp	r3, #1
 800c082:	d136      	bne.n	800c0f2 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	330c      	adds	r3, #12
 800c090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	e853 3f00 	ldrex	r3, [r3]
 800c098:	613b      	str	r3, [r7, #16]
   return(result);
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	f023 0310 	bic.w	r3, r3, #16
 800c0a0:	627b      	str	r3, [r7, #36]	; 0x24
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	330c      	adds	r3, #12
 800c0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0aa:	623a      	str	r2, [r7, #32]
 800c0ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ae:	69f9      	ldr	r1, [r7, #28]
 800c0b0:	6a3a      	ldr	r2, [r7, #32]
 800c0b2:	e841 2300 	strex	r3, r2, [r1]
 800c0b6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d1e5      	bne.n	800c08a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f003 0310 	and.w	r3, r3, #16
 800c0c8:	2b10      	cmp	r3, #16
 800c0ca:	d10a      	bne.n	800c0e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	60fb      	str	r3, [r7, #12]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	60fb      	str	r3, [r7, #12]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	60fb      	str	r3, [r7, #12]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c0ea:	4611      	mov	r1, r2
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	4798      	blx	r3
 800c0f0:	e003      	b.n	800c0fa <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e002      	b.n	800c104 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800c0fe:	2300      	movs	r3, #0
 800c100:	e000      	b.n	800c104 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800c102:	2302      	movs	r3, #2
  }
}
 800c104:	4618      	mov	r0, r3
 800c106:	3730      	adds	r7, #48	; 0x30
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c10c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c110:	b0c0      	sub	sp, #256	; 0x100
 800c112:	af00      	add	r7, sp, #0
 800c114:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c128:	68d9      	ldr	r1, [r3, #12]
 800c12a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	ea40 0301 	orr.w	r3, r0, r1
 800c134:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c13a:	689a      	ldr	r2, [r3, #8]
 800c13c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c140:	691b      	ldr	r3, [r3, #16]
 800c142:	431a      	orrs	r2, r3
 800c144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c148:	695b      	ldr	r3, [r3, #20]
 800c14a:	431a      	orrs	r2, r3
 800c14c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c150:	69db      	ldr	r3, [r3, #28]
 800c152:	4313      	orrs	r3, r2
 800c154:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c164:	f021 010c 	bic.w	r1, r1, #12
 800c168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c172:	430b      	orrs	r3, r1
 800c174:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	695b      	ldr	r3, [r3, #20]
 800c17e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c186:	6999      	ldr	r1, [r3, #24]
 800c188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	ea40 0301 	orr.w	r3, r0, r1
 800c192:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	4b8f      	ldr	r3, [pc, #572]	; (800c3d8 <UART_SetConfig+0x2cc>)
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d005      	beq.n	800c1ac <UART_SetConfig+0xa0>
 800c1a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	4b8d      	ldr	r3, [pc, #564]	; (800c3dc <UART_SetConfig+0x2d0>)
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d104      	bne.n	800c1b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c1ac:	f7fd f9b0 	bl	8009510 <HAL_RCC_GetPCLK2Freq>
 800c1b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c1b4:	e003      	b.n	800c1be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c1b6:	f7fd f997 	bl	80094e8 <HAL_RCC_GetPCLK1Freq>
 800c1ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1c2:	69db      	ldr	r3, [r3, #28]
 800c1c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1c8:	f040 810c 	bne.w	800c3e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c1cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c1d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c1da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c1de:	4622      	mov	r2, r4
 800c1e0:	462b      	mov	r3, r5
 800c1e2:	1891      	adds	r1, r2, r2
 800c1e4:	65b9      	str	r1, [r7, #88]	; 0x58
 800c1e6:	415b      	adcs	r3, r3
 800c1e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c1ee:	4621      	mov	r1, r4
 800c1f0:	eb12 0801 	adds.w	r8, r2, r1
 800c1f4:	4629      	mov	r1, r5
 800c1f6:	eb43 0901 	adc.w	r9, r3, r1
 800c1fa:	f04f 0200 	mov.w	r2, #0
 800c1fe:	f04f 0300 	mov.w	r3, #0
 800c202:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c206:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c20a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c20e:	4690      	mov	r8, r2
 800c210:	4699      	mov	r9, r3
 800c212:	4623      	mov	r3, r4
 800c214:	eb18 0303 	adds.w	r3, r8, r3
 800c218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c21c:	462b      	mov	r3, r5
 800c21e:	eb49 0303 	adc.w	r3, r9, r3
 800c222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c232:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c236:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c23a:	460b      	mov	r3, r1
 800c23c:	18db      	adds	r3, r3, r3
 800c23e:	653b      	str	r3, [r7, #80]	; 0x50
 800c240:	4613      	mov	r3, r2
 800c242:	eb42 0303 	adc.w	r3, r2, r3
 800c246:	657b      	str	r3, [r7, #84]	; 0x54
 800c248:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c24c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c250:	f7f4 fd22 	bl	8000c98 <__aeabi_uldivmod>
 800c254:	4602      	mov	r2, r0
 800c256:	460b      	mov	r3, r1
 800c258:	4b61      	ldr	r3, [pc, #388]	; (800c3e0 <UART_SetConfig+0x2d4>)
 800c25a:	fba3 2302 	umull	r2, r3, r3, r2
 800c25e:	095b      	lsrs	r3, r3, #5
 800c260:	011c      	lsls	r4, r3, #4
 800c262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c266:	2200      	movs	r2, #0
 800c268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c26c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c270:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c274:	4642      	mov	r2, r8
 800c276:	464b      	mov	r3, r9
 800c278:	1891      	adds	r1, r2, r2
 800c27a:	64b9      	str	r1, [r7, #72]	; 0x48
 800c27c:	415b      	adcs	r3, r3
 800c27e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c280:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c284:	4641      	mov	r1, r8
 800c286:	eb12 0a01 	adds.w	sl, r2, r1
 800c28a:	4649      	mov	r1, r9
 800c28c:	eb43 0b01 	adc.w	fp, r3, r1
 800c290:	f04f 0200 	mov.w	r2, #0
 800c294:	f04f 0300 	mov.w	r3, #0
 800c298:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c29c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c2a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c2a4:	4692      	mov	sl, r2
 800c2a6:	469b      	mov	fp, r3
 800c2a8:	4643      	mov	r3, r8
 800c2aa:	eb1a 0303 	adds.w	r3, sl, r3
 800c2ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c2b2:	464b      	mov	r3, r9
 800c2b4:	eb4b 0303 	adc.w	r3, fp, r3
 800c2b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c2bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c2c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c2cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	18db      	adds	r3, r3, r3
 800c2d4:	643b      	str	r3, [r7, #64]	; 0x40
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	eb42 0303 	adc.w	r3, r2, r3
 800c2dc:	647b      	str	r3, [r7, #68]	; 0x44
 800c2de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c2e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c2e6:	f7f4 fcd7 	bl	8000c98 <__aeabi_uldivmod>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	4611      	mov	r1, r2
 800c2f0:	4b3b      	ldr	r3, [pc, #236]	; (800c3e0 <UART_SetConfig+0x2d4>)
 800c2f2:	fba3 2301 	umull	r2, r3, r3, r1
 800c2f6:	095b      	lsrs	r3, r3, #5
 800c2f8:	2264      	movs	r2, #100	; 0x64
 800c2fa:	fb02 f303 	mul.w	r3, r2, r3
 800c2fe:	1acb      	subs	r3, r1, r3
 800c300:	00db      	lsls	r3, r3, #3
 800c302:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c306:	4b36      	ldr	r3, [pc, #216]	; (800c3e0 <UART_SetConfig+0x2d4>)
 800c308:	fba3 2302 	umull	r2, r3, r3, r2
 800c30c:	095b      	lsrs	r3, r3, #5
 800c30e:	005b      	lsls	r3, r3, #1
 800c310:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c314:	441c      	add	r4, r3
 800c316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c31a:	2200      	movs	r2, #0
 800c31c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c320:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c324:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c328:	4642      	mov	r2, r8
 800c32a:	464b      	mov	r3, r9
 800c32c:	1891      	adds	r1, r2, r2
 800c32e:	63b9      	str	r1, [r7, #56]	; 0x38
 800c330:	415b      	adcs	r3, r3
 800c332:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c334:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c338:	4641      	mov	r1, r8
 800c33a:	1851      	adds	r1, r2, r1
 800c33c:	6339      	str	r1, [r7, #48]	; 0x30
 800c33e:	4649      	mov	r1, r9
 800c340:	414b      	adcs	r3, r1
 800c342:	637b      	str	r3, [r7, #52]	; 0x34
 800c344:	f04f 0200 	mov.w	r2, #0
 800c348:	f04f 0300 	mov.w	r3, #0
 800c34c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c350:	4659      	mov	r1, fp
 800c352:	00cb      	lsls	r3, r1, #3
 800c354:	4651      	mov	r1, sl
 800c356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c35a:	4651      	mov	r1, sl
 800c35c:	00ca      	lsls	r2, r1, #3
 800c35e:	4610      	mov	r0, r2
 800c360:	4619      	mov	r1, r3
 800c362:	4603      	mov	r3, r0
 800c364:	4642      	mov	r2, r8
 800c366:	189b      	adds	r3, r3, r2
 800c368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c36c:	464b      	mov	r3, r9
 800c36e:	460a      	mov	r2, r1
 800c370:	eb42 0303 	adc.w	r3, r2, r3
 800c374:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c384:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c388:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c38c:	460b      	mov	r3, r1
 800c38e:	18db      	adds	r3, r3, r3
 800c390:	62bb      	str	r3, [r7, #40]	; 0x28
 800c392:	4613      	mov	r3, r2
 800c394:	eb42 0303 	adc.w	r3, r2, r3
 800c398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c39a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c39e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c3a2:	f7f4 fc79 	bl	8000c98 <__aeabi_uldivmod>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	4b0d      	ldr	r3, [pc, #52]	; (800c3e0 <UART_SetConfig+0x2d4>)
 800c3ac:	fba3 1302 	umull	r1, r3, r3, r2
 800c3b0:	095b      	lsrs	r3, r3, #5
 800c3b2:	2164      	movs	r1, #100	; 0x64
 800c3b4:	fb01 f303 	mul.w	r3, r1, r3
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	00db      	lsls	r3, r3, #3
 800c3bc:	3332      	adds	r3, #50	; 0x32
 800c3be:	4a08      	ldr	r2, [pc, #32]	; (800c3e0 <UART_SetConfig+0x2d4>)
 800c3c0:	fba2 2303 	umull	r2, r3, r2, r3
 800c3c4:	095b      	lsrs	r3, r3, #5
 800c3c6:	f003 0207 	and.w	r2, r3, #7
 800c3ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4422      	add	r2, r4
 800c3d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c3d4:	e105      	b.n	800c5e2 <UART_SetConfig+0x4d6>
 800c3d6:	bf00      	nop
 800c3d8:	40011000 	.word	0x40011000
 800c3dc:	40011400 	.word	0x40011400
 800c3e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c3e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c3ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c3f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c3f6:	4642      	mov	r2, r8
 800c3f8:	464b      	mov	r3, r9
 800c3fa:	1891      	adds	r1, r2, r2
 800c3fc:	6239      	str	r1, [r7, #32]
 800c3fe:	415b      	adcs	r3, r3
 800c400:	627b      	str	r3, [r7, #36]	; 0x24
 800c402:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c406:	4641      	mov	r1, r8
 800c408:	1854      	adds	r4, r2, r1
 800c40a:	4649      	mov	r1, r9
 800c40c:	eb43 0501 	adc.w	r5, r3, r1
 800c410:	f04f 0200 	mov.w	r2, #0
 800c414:	f04f 0300 	mov.w	r3, #0
 800c418:	00eb      	lsls	r3, r5, #3
 800c41a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c41e:	00e2      	lsls	r2, r4, #3
 800c420:	4614      	mov	r4, r2
 800c422:	461d      	mov	r5, r3
 800c424:	4643      	mov	r3, r8
 800c426:	18e3      	adds	r3, r4, r3
 800c428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c42c:	464b      	mov	r3, r9
 800c42e:	eb45 0303 	adc.w	r3, r5, r3
 800c432:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c442:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c446:	f04f 0200 	mov.w	r2, #0
 800c44a:	f04f 0300 	mov.w	r3, #0
 800c44e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c452:	4629      	mov	r1, r5
 800c454:	008b      	lsls	r3, r1, #2
 800c456:	4621      	mov	r1, r4
 800c458:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c45c:	4621      	mov	r1, r4
 800c45e:	008a      	lsls	r2, r1, #2
 800c460:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c464:	f7f4 fc18 	bl	8000c98 <__aeabi_uldivmod>
 800c468:	4602      	mov	r2, r0
 800c46a:	460b      	mov	r3, r1
 800c46c:	4b60      	ldr	r3, [pc, #384]	; (800c5f0 <UART_SetConfig+0x4e4>)
 800c46e:	fba3 2302 	umull	r2, r3, r3, r2
 800c472:	095b      	lsrs	r3, r3, #5
 800c474:	011c      	lsls	r4, r3, #4
 800c476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c47a:	2200      	movs	r2, #0
 800c47c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c480:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c484:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c488:	4642      	mov	r2, r8
 800c48a:	464b      	mov	r3, r9
 800c48c:	1891      	adds	r1, r2, r2
 800c48e:	61b9      	str	r1, [r7, #24]
 800c490:	415b      	adcs	r3, r3
 800c492:	61fb      	str	r3, [r7, #28]
 800c494:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c498:	4641      	mov	r1, r8
 800c49a:	1851      	adds	r1, r2, r1
 800c49c:	6139      	str	r1, [r7, #16]
 800c49e:	4649      	mov	r1, r9
 800c4a0:	414b      	adcs	r3, r1
 800c4a2:	617b      	str	r3, [r7, #20]
 800c4a4:	f04f 0200 	mov.w	r2, #0
 800c4a8:	f04f 0300 	mov.w	r3, #0
 800c4ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c4b0:	4659      	mov	r1, fp
 800c4b2:	00cb      	lsls	r3, r1, #3
 800c4b4:	4651      	mov	r1, sl
 800c4b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c4ba:	4651      	mov	r1, sl
 800c4bc:	00ca      	lsls	r2, r1, #3
 800c4be:	4610      	mov	r0, r2
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	4642      	mov	r2, r8
 800c4c6:	189b      	adds	r3, r3, r2
 800c4c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c4cc:	464b      	mov	r3, r9
 800c4ce:	460a      	mov	r2, r1
 800c4d0:	eb42 0303 	adc.w	r3, r2, r3
 800c4d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c4d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	67bb      	str	r3, [r7, #120]	; 0x78
 800c4e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c4e4:	f04f 0200 	mov.w	r2, #0
 800c4e8:	f04f 0300 	mov.w	r3, #0
 800c4ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c4f0:	4649      	mov	r1, r9
 800c4f2:	008b      	lsls	r3, r1, #2
 800c4f4:	4641      	mov	r1, r8
 800c4f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c4fa:	4641      	mov	r1, r8
 800c4fc:	008a      	lsls	r2, r1, #2
 800c4fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c502:	f7f4 fbc9 	bl	8000c98 <__aeabi_uldivmod>
 800c506:	4602      	mov	r2, r0
 800c508:	460b      	mov	r3, r1
 800c50a:	4b39      	ldr	r3, [pc, #228]	; (800c5f0 <UART_SetConfig+0x4e4>)
 800c50c:	fba3 1302 	umull	r1, r3, r3, r2
 800c510:	095b      	lsrs	r3, r3, #5
 800c512:	2164      	movs	r1, #100	; 0x64
 800c514:	fb01 f303 	mul.w	r3, r1, r3
 800c518:	1ad3      	subs	r3, r2, r3
 800c51a:	011b      	lsls	r3, r3, #4
 800c51c:	3332      	adds	r3, #50	; 0x32
 800c51e:	4a34      	ldr	r2, [pc, #208]	; (800c5f0 <UART_SetConfig+0x4e4>)
 800c520:	fba2 2303 	umull	r2, r3, r2, r3
 800c524:	095b      	lsrs	r3, r3, #5
 800c526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c52a:	441c      	add	r4, r3
 800c52c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c530:	2200      	movs	r2, #0
 800c532:	673b      	str	r3, [r7, #112]	; 0x70
 800c534:	677a      	str	r2, [r7, #116]	; 0x74
 800c536:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c53a:	4642      	mov	r2, r8
 800c53c:	464b      	mov	r3, r9
 800c53e:	1891      	adds	r1, r2, r2
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	415b      	adcs	r3, r3
 800c544:	60fb      	str	r3, [r7, #12]
 800c546:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c54a:	4641      	mov	r1, r8
 800c54c:	1851      	adds	r1, r2, r1
 800c54e:	6039      	str	r1, [r7, #0]
 800c550:	4649      	mov	r1, r9
 800c552:	414b      	adcs	r3, r1
 800c554:	607b      	str	r3, [r7, #4]
 800c556:	f04f 0200 	mov.w	r2, #0
 800c55a:	f04f 0300 	mov.w	r3, #0
 800c55e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c562:	4659      	mov	r1, fp
 800c564:	00cb      	lsls	r3, r1, #3
 800c566:	4651      	mov	r1, sl
 800c568:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c56c:	4651      	mov	r1, sl
 800c56e:	00ca      	lsls	r2, r1, #3
 800c570:	4610      	mov	r0, r2
 800c572:	4619      	mov	r1, r3
 800c574:	4603      	mov	r3, r0
 800c576:	4642      	mov	r2, r8
 800c578:	189b      	adds	r3, r3, r2
 800c57a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c57c:	464b      	mov	r3, r9
 800c57e:	460a      	mov	r2, r1
 800c580:	eb42 0303 	adc.w	r3, r2, r3
 800c584:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	2200      	movs	r2, #0
 800c58e:	663b      	str	r3, [r7, #96]	; 0x60
 800c590:	667a      	str	r2, [r7, #100]	; 0x64
 800c592:	f04f 0200 	mov.w	r2, #0
 800c596:	f04f 0300 	mov.w	r3, #0
 800c59a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c59e:	4649      	mov	r1, r9
 800c5a0:	008b      	lsls	r3, r1, #2
 800c5a2:	4641      	mov	r1, r8
 800c5a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c5a8:	4641      	mov	r1, r8
 800c5aa:	008a      	lsls	r2, r1, #2
 800c5ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c5b0:	f7f4 fb72 	bl	8000c98 <__aeabi_uldivmod>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	4b0d      	ldr	r3, [pc, #52]	; (800c5f0 <UART_SetConfig+0x4e4>)
 800c5ba:	fba3 1302 	umull	r1, r3, r3, r2
 800c5be:	095b      	lsrs	r3, r3, #5
 800c5c0:	2164      	movs	r1, #100	; 0x64
 800c5c2:	fb01 f303 	mul.w	r3, r1, r3
 800c5c6:	1ad3      	subs	r3, r2, r3
 800c5c8:	011b      	lsls	r3, r3, #4
 800c5ca:	3332      	adds	r3, #50	; 0x32
 800c5cc:	4a08      	ldr	r2, [pc, #32]	; (800c5f0 <UART_SetConfig+0x4e4>)
 800c5ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c5d2:	095b      	lsrs	r3, r3, #5
 800c5d4:	f003 020f 	and.w	r2, r3, #15
 800c5d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4422      	add	r2, r4
 800c5e0:	609a      	str	r2, [r3, #8]
}
 800c5e2:	bf00      	nop
 800c5e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c5ee:	bf00      	nop
 800c5f0:	51eb851f 	.word	0x51eb851f

0800c5f4 <__errno>:
 800c5f4:	4b01      	ldr	r3, [pc, #4]	; (800c5fc <__errno+0x8>)
 800c5f6:	6818      	ldr	r0, [r3, #0]
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	2000025c 	.word	0x2000025c

0800c600 <__libc_init_array>:
 800c600:	b570      	push	{r4, r5, r6, lr}
 800c602:	4d0d      	ldr	r5, [pc, #52]	; (800c638 <__libc_init_array+0x38>)
 800c604:	4c0d      	ldr	r4, [pc, #52]	; (800c63c <__libc_init_array+0x3c>)
 800c606:	1b64      	subs	r4, r4, r5
 800c608:	10a4      	asrs	r4, r4, #2
 800c60a:	2600      	movs	r6, #0
 800c60c:	42a6      	cmp	r6, r4
 800c60e:	d109      	bne.n	800c624 <__libc_init_array+0x24>
 800c610:	4d0b      	ldr	r5, [pc, #44]	; (800c640 <__libc_init_array+0x40>)
 800c612:	4c0c      	ldr	r4, [pc, #48]	; (800c644 <__libc_init_array+0x44>)
 800c614:	f004 fddc 	bl	80111d0 <_init>
 800c618:	1b64      	subs	r4, r4, r5
 800c61a:	10a4      	asrs	r4, r4, #2
 800c61c:	2600      	movs	r6, #0
 800c61e:	42a6      	cmp	r6, r4
 800c620:	d105      	bne.n	800c62e <__libc_init_array+0x2e>
 800c622:	bd70      	pop	{r4, r5, r6, pc}
 800c624:	f855 3b04 	ldr.w	r3, [r5], #4
 800c628:	4798      	blx	r3
 800c62a:	3601      	adds	r6, #1
 800c62c:	e7ee      	b.n	800c60c <__libc_init_array+0xc>
 800c62e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c632:	4798      	blx	r3
 800c634:	3601      	adds	r6, #1
 800c636:	e7f2      	b.n	800c61e <__libc_init_array+0x1e>
 800c638:	080116cc 	.word	0x080116cc
 800c63c:	080116cc 	.word	0x080116cc
 800c640:	080116cc 	.word	0x080116cc
 800c644:	080116d0 	.word	0x080116d0

0800c648 <memcpy>:
 800c648:	440a      	add	r2, r1
 800c64a:	4291      	cmp	r1, r2
 800c64c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c650:	d100      	bne.n	800c654 <memcpy+0xc>
 800c652:	4770      	bx	lr
 800c654:	b510      	push	{r4, lr}
 800c656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c65a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c65e:	4291      	cmp	r1, r2
 800c660:	d1f9      	bne.n	800c656 <memcpy+0xe>
 800c662:	bd10      	pop	{r4, pc}

0800c664 <memset>:
 800c664:	4402      	add	r2, r0
 800c666:	4603      	mov	r3, r0
 800c668:	4293      	cmp	r3, r2
 800c66a:	d100      	bne.n	800c66e <memset+0xa>
 800c66c:	4770      	bx	lr
 800c66e:	f803 1b01 	strb.w	r1, [r3], #1
 800c672:	e7f9      	b.n	800c668 <memset+0x4>

0800c674 <__cvt>:
 800c674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c678:	ec55 4b10 	vmov	r4, r5, d0
 800c67c:	2d00      	cmp	r5, #0
 800c67e:	460e      	mov	r6, r1
 800c680:	4619      	mov	r1, r3
 800c682:	462b      	mov	r3, r5
 800c684:	bfbb      	ittet	lt
 800c686:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c68a:	461d      	movlt	r5, r3
 800c68c:	2300      	movge	r3, #0
 800c68e:	232d      	movlt	r3, #45	; 0x2d
 800c690:	700b      	strb	r3, [r1, #0]
 800c692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c694:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c698:	4691      	mov	r9, r2
 800c69a:	f023 0820 	bic.w	r8, r3, #32
 800c69e:	bfbc      	itt	lt
 800c6a0:	4622      	movlt	r2, r4
 800c6a2:	4614      	movlt	r4, r2
 800c6a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c6a8:	d005      	beq.n	800c6b6 <__cvt+0x42>
 800c6aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c6ae:	d100      	bne.n	800c6b2 <__cvt+0x3e>
 800c6b0:	3601      	adds	r6, #1
 800c6b2:	2102      	movs	r1, #2
 800c6b4:	e000      	b.n	800c6b8 <__cvt+0x44>
 800c6b6:	2103      	movs	r1, #3
 800c6b8:	ab03      	add	r3, sp, #12
 800c6ba:	9301      	str	r3, [sp, #4]
 800c6bc:	ab02      	add	r3, sp, #8
 800c6be:	9300      	str	r3, [sp, #0]
 800c6c0:	ec45 4b10 	vmov	d0, r4, r5
 800c6c4:	4653      	mov	r3, sl
 800c6c6:	4632      	mov	r2, r6
 800c6c8:	f001 fdae 	bl	800e228 <_dtoa_r>
 800c6cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c6d0:	4607      	mov	r7, r0
 800c6d2:	d102      	bne.n	800c6da <__cvt+0x66>
 800c6d4:	f019 0f01 	tst.w	r9, #1
 800c6d8:	d022      	beq.n	800c720 <__cvt+0xac>
 800c6da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c6de:	eb07 0906 	add.w	r9, r7, r6
 800c6e2:	d110      	bne.n	800c706 <__cvt+0x92>
 800c6e4:	783b      	ldrb	r3, [r7, #0]
 800c6e6:	2b30      	cmp	r3, #48	; 0x30
 800c6e8:	d10a      	bne.n	800c700 <__cvt+0x8c>
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	4629      	mov	r1, r5
 800c6f2:	f7f4 f9f1 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6f6:	b918      	cbnz	r0, 800c700 <__cvt+0x8c>
 800c6f8:	f1c6 0601 	rsb	r6, r6, #1
 800c6fc:	f8ca 6000 	str.w	r6, [sl]
 800c700:	f8da 3000 	ldr.w	r3, [sl]
 800c704:	4499      	add	r9, r3
 800c706:	2200      	movs	r2, #0
 800c708:	2300      	movs	r3, #0
 800c70a:	4620      	mov	r0, r4
 800c70c:	4629      	mov	r1, r5
 800c70e:	f7f4 f9e3 	bl	8000ad8 <__aeabi_dcmpeq>
 800c712:	b108      	cbz	r0, 800c718 <__cvt+0xa4>
 800c714:	f8cd 900c 	str.w	r9, [sp, #12]
 800c718:	2230      	movs	r2, #48	; 0x30
 800c71a:	9b03      	ldr	r3, [sp, #12]
 800c71c:	454b      	cmp	r3, r9
 800c71e:	d307      	bcc.n	800c730 <__cvt+0xbc>
 800c720:	9b03      	ldr	r3, [sp, #12]
 800c722:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c724:	1bdb      	subs	r3, r3, r7
 800c726:	4638      	mov	r0, r7
 800c728:	6013      	str	r3, [r2, #0]
 800c72a:	b004      	add	sp, #16
 800c72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c730:	1c59      	adds	r1, r3, #1
 800c732:	9103      	str	r1, [sp, #12]
 800c734:	701a      	strb	r2, [r3, #0]
 800c736:	e7f0      	b.n	800c71a <__cvt+0xa6>

0800c738 <__exponent>:
 800c738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c73a:	4603      	mov	r3, r0
 800c73c:	2900      	cmp	r1, #0
 800c73e:	bfb8      	it	lt
 800c740:	4249      	neglt	r1, r1
 800c742:	f803 2b02 	strb.w	r2, [r3], #2
 800c746:	bfb4      	ite	lt
 800c748:	222d      	movlt	r2, #45	; 0x2d
 800c74a:	222b      	movge	r2, #43	; 0x2b
 800c74c:	2909      	cmp	r1, #9
 800c74e:	7042      	strb	r2, [r0, #1]
 800c750:	dd2a      	ble.n	800c7a8 <__exponent+0x70>
 800c752:	f10d 0407 	add.w	r4, sp, #7
 800c756:	46a4      	mov	ip, r4
 800c758:	270a      	movs	r7, #10
 800c75a:	46a6      	mov	lr, r4
 800c75c:	460a      	mov	r2, r1
 800c75e:	fb91 f6f7 	sdiv	r6, r1, r7
 800c762:	fb07 1516 	mls	r5, r7, r6, r1
 800c766:	3530      	adds	r5, #48	; 0x30
 800c768:	2a63      	cmp	r2, #99	; 0x63
 800c76a:	f104 34ff 	add.w	r4, r4, #4294967295
 800c76e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c772:	4631      	mov	r1, r6
 800c774:	dcf1      	bgt.n	800c75a <__exponent+0x22>
 800c776:	3130      	adds	r1, #48	; 0x30
 800c778:	f1ae 0502 	sub.w	r5, lr, #2
 800c77c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c780:	1c44      	adds	r4, r0, #1
 800c782:	4629      	mov	r1, r5
 800c784:	4561      	cmp	r1, ip
 800c786:	d30a      	bcc.n	800c79e <__exponent+0x66>
 800c788:	f10d 0209 	add.w	r2, sp, #9
 800c78c:	eba2 020e 	sub.w	r2, r2, lr
 800c790:	4565      	cmp	r5, ip
 800c792:	bf88      	it	hi
 800c794:	2200      	movhi	r2, #0
 800c796:	4413      	add	r3, r2
 800c798:	1a18      	subs	r0, r3, r0
 800c79a:	b003      	add	sp, #12
 800c79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c79e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c7a6:	e7ed      	b.n	800c784 <__exponent+0x4c>
 800c7a8:	2330      	movs	r3, #48	; 0x30
 800c7aa:	3130      	adds	r1, #48	; 0x30
 800c7ac:	7083      	strb	r3, [r0, #2]
 800c7ae:	70c1      	strb	r1, [r0, #3]
 800c7b0:	1d03      	adds	r3, r0, #4
 800c7b2:	e7f1      	b.n	800c798 <__exponent+0x60>

0800c7b4 <_printf_float>:
 800c7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b8:	ed2d 8b02 	vpush	{d8}
 800c7bc:	b08d      	sub	sp, #52	; 0x34
 800c7be:	460c      	mov	r4, r1
 800c7c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c7c4:	4616      	mov	r6, r2
 800c7c6:	461f      	mov	r7, r3
 800c7c8:	4605      	mov	r5, r0
 800c7ca:	f002 fe8b 	bl	800f4e4 <_localeconv_r>
 800c7ce:	f8d0 a000 	ldr.w	sl, [r0]
 800c7d2:	4650      	mov	r0, sl
 800c7d4:	f7f3 fd04 	bl	80001e0 <strlen>
 800c7d8:	2300      	movs	r3, #0
 800c7da:	930a      	str	r3, [sp, #40]	; 0x28
 800c7dc:	6823      	ldr	r3, [r4, #0]
 800c7de:	9305      	str	r3, [sp, #20]
 800c7e0:	f8d8 3000 	ldr.w	r3, [r8]
 800c7e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c7e8:	3307      	adds	r3, #7
 800c7ea:	f023 0307 	bic.w	r3, r3, #7
 800c7ee:	f103 0208 	add.w	r2, r3, #8
 800c7f2:	f8c8 2000 	str.w	r2, [r8]
 800c7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c7fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c802:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c806:	9307      	str	r3, [sp, #28]
 800c808:	f8cd 8018 	str.w	r8, [sp, #24]
 800c80c:	ee08 0a10 	vmov	s16, r0
 800c810:	4b9f      	ldr	r3, [pc, #636]	; (800ca90 <_printf_float+0x2dc>)
 800c812:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c816:	f04f 32ff 	mov.w	r2, #4294967295
 800c81a:	f7f4 f98f 	bl	8000b3c <__aeabi_dcmpun>
 800c81e:	bb88      	cbnz	r0, 800c884 <_printf_float+0xd0>
 800c820:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c824:	4b9a      	ldr	r3, [pc, #616]	; (800ca90 <_printf_float+0x2dc>)
 800c826:	f04f 32ff 	mov.w	r2, #4294967295
 800c82a:	f7f4 f969 	bl	8000b00 <__aeabi_dcmple>
 800c82e:	bb48      	cbnz	r0, 800c884 <_printf_float+0xd0>
 800c830:	2200      	movs	r2, #0
 800c832:	2300      	movs	r3, #0
 800c834:	4640      	mov	r0, r8
 800c836:	4649      	mov	r1, r9
 800c838:	f7f4 f958 	bl	8000aec <__aeabi_dcmplt>
 800c83c:	b110      	cbz	r0, 800c844 <_printf_float+0x90>
 800c83e:	232d      	movs	r3, #45	; 0x2d
 800c840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c844:	4b93      	ldr	r3, [pc, #588]	; (800ca94 <_printf_float+0x2e0>)
 800c846:	4894      	ldr	r0, [pc, #592]	; (800ca98 <_printf_float+0x2e4>)
 800c848:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c84c:	bf94      	ite	ls
 800c84e:	4698      	movls	r8, r3
 800c850:	4680      	movhi	r8, r0
 800c852:	2303      	movs	r3, #3
 800c854:	6123      	str	r3, [r4, #16]
 800c856:	9b05      	ldr	r3, [sp, #20]
 800c858:	f023 0204 	bic.w	r2, r3, #4
 800c85c:	6022      	str	r2, [r4, #0]
 800c85e:	f04f 0900 	mov.w	r9, #0
 800c862:	9700      	str	r7, [sp, #0]
 800c864:	4633      	mov	r3, r6
 800c866:	aa0b      	add	r2, sp, #44	; 0x2c
 800c868:	4621      	mov	r1, r4
 800c86a:	4628      	mov	r0, r5
 800c86c:	f000 f9d8 	bl	800cc20 <_printf_common>
 800c870:	3001      	adds	r0, #1
 800c872:	f040 8090 	bne.w	800c996 <_printf_float+0x1e2>
 800c876:	f04f 30ff 	mov.w	r0, #4294967295
 800c87a:	b00d      	add	sp, #52	; 0x34
 800c87c:	ecbd 8b02 	vpop	{d8}
 800c880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c884:	4642      	mov	r2, r8
 800c886:	464b      	mov	r3, r9
 800c888:	4640      	mov	r0, r8
 800c88a:	4649      	mov	r1, r9
 800c88c:	f7f4 f956 	bl	8000b3c <__aeabi_dcmpun>
 800c890:	b140      	cbz	r0, 800c8a4 <_printf_float+0xf0>
 800c892:	464b      	mov	r3, r9
 800c894:	2b00      	cmp	r3, #0
 800c896:	bfbc      	itt	lt
 800c898:	232d      	movlt	r3, #45	; 0x2d
 800c89a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c89e:	487f      	ldr	r0, [pc, #508]	; (800ca9c <_printf_float+0x2e8>)
 800c8a0:	4b7f      	ldr	r3, [pc, #508]	; (800caa0 <_printf_float+0x2ec>)
 800c8a2:	e7d1      	b.n	800c848 <_printf_float+0x94>
 800c8a4:	6863      	ldr	r3, [r4, #4]
 800c8a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c8aa:	9206      	str	r2, [sp, #24]
 800c8ac:	1c5a      	adds	r2, r3, #1
 800c8ae:	d13f      	bne.n	800c930 <_printf_float+0x17c>
 800c8b0:	2306      	movs	r3, #6
 800c8b2:	6063      	str	r3, [r4, #4]
 800c8b4:	9b05      	ldr	r3, [sp, #20]
 800c8b6:	6861      	ldr	r1, [r4, #4]
 800c8b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c8bc:	2300      	movs	r3, #0
 800c8be:	9303      	str	r3, [sp, #12]
 800c8c0:	ab0a      	add	r3, sp, #40	; 0x28
 800c8c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c8c6:	ab09      	add	r3, sp, #36	; 0x24
 800c8c8:	ec49 8b10 	vmov	d0, r8, r9
 800c8cc:	9300      	str	r3, [sp, #0]
 800c8ce:	6022      	str	r2, [r4, #0]
 800c8d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	f7ff fecd 	bl	800c674 <__cvt>
 800c8da:	9b06      	ldr	r3, [sp, #24]
 800c8dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8de:	2b47      	cmp	r3, #71	; 0x47
 800c8e0:	4680      	mov	r8, r0
 800c8e2:	d108      	bne.n	800c8f6 <_printf_float+0x142>
 800c8e4:	1cc8      	adds	r0, r1, #3
 800c8e6:	db02      	blt.n	800c8ee <_printf_float+0x13a>
 800c8e8:	6863      	ldr	r3, [r4, #4]
 800c8ea:	4299      	cmp	r1, r3
 800c8ec:	dd41      	ble.n	800c972 <_printf_float+0x1be>
 800c8ee:	f1ab 0b02 	sub.w	fp, fp, #2
 800c8f2:	fa5f fb8b 	uxtb.w	fp, fp
 800c8f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c8fa:	d820      	bhi.n	800c93e <_printf_float+0x18a>
 800c8fc:	3901      	subs	r1, #1
 800c8fe:	465a      	mov	r2, fp
 800c900:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c904:	9109      	str	r1, [sp, #36]	; 0x24
 800c906:	f7ff ff17 	bl	800c738 <__exponent>
 800c90a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c90c:	1813      	adds	r3, r2, r0
 800c90e:	2a01      	cmp	r2, #1
 800c910:	4681      	mov	r9, r0
 800c912:	6123      	str	r3, [r4, #16]
 800c914:	dc02      	bgt.n	800c91c <_printf_float+0x168>
 800c916:	6822      	ldr	r2, [r4, #0]
 800c918:	07d2      	lsls	r2, r2, #31
 800c91a:	d501      	bpl.n	800c920 <_printf_float+0x16c>
 800c91c:	3301      	adds	r3, #1
 800c91e:	6123      	str	r3, [r4, #16]
 800c920:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c924:	2b00      	cmp	r3, #0
 800c926:	d09c      	beq.n	800c862 <_printf_float+0xae>
 800c928:	232d      	movs	r3, #45	; 0x2d
 800c92a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c92e:	e798      	b.n	800c862 <_printf_float+0xae>
 800c930:	9a06      	ldr	r2, [sp, #24]
 800c932:	2a47      	cmp	r2, #71	; 0x47
 800c934:	d1be      	bne.n	800c8b4 <_printf_float+0x100>
 800c936:	2b00      	cmp	r3, #0
 800c938:	d1bc      	bne.n	800c8b4 <_printf_float+0x100>
 800c93a:	2301      	movs	r3, #1
 800c93c:	e7b9      	b.n	800c8b2 <_printf_float+0xfe>
 800c93e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c942:	d118      	bne.n	800c976 <_printf_float+0x1c2>
 800c944:	2900      	cmp	r1, #0
 800c946:	6863      	ldr	r3, [r4, #4]
 800c948:	dd0b      	ble.n	800c962 <_printf_float+0x1ae>
 800c94a:	6121      	str	r1, [r4, #16]
 800c94c:	b913      	cbnz	r3, 800c954 <_printf_float+0x1a0>
 800c94e:	6822      	ldr	r2, [r4, #0]
 800c950:	07d0      	lsls	r0, r2, #31
 800c952:	d502      	bpl.n	800c95a <_printf_float+0x1a6>
 800c954:	3301      	adds	r3, #1
 800c956:	440b      	add	r3, r1
 800c958:	6123      	str	r3, [r4, #16]
 800c95a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c95c:	f04f 0900 	mov.w	r9, #0
 800c960:	e7de      	b.n	800c920 <_printf_float+0x16c>
 800c962:	b913      	cbnz	r3, 800c96a <_printf_float+0x1b6>
 800c964:	6822      	ldr	r2, [r4, #0]
 800c966:	07d2      	lsls	r2, r2, #31
 800c968:	d501      	bpl.n	800c96e <_printf_float+0x1ba>
 800c96a:	3302      	adds	r3, #2
 800c96c:	e7f4      	b.n	800c958 <_printf_float+0x1a4>
 800c96e:	2301      	movs	r3, #1
 800c970:	e7f2      	b.n	800c958 <_printf_float+0x1a4>
 800c972:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c978:	4299      	cmp	r1, r3
 800c97a:	db05      	blt.n	800c988 <_printf_float+0x1d4>
 800c97c:	6823      	ldr	r3, [r4, #0]
 800c97e:	6121      	str	r1, [r4, #16]
 800c980:	07d8      	lsls	r0, r3, #31
 800c982:	d5ea      	bpl.n	800c95a <_printf_float+0x1a6>
 800c984:	1c4b      	adds	r3, r1, #1
 800c986:	e7e7      	b.n	800c958 <_printf_float+0x1a4>
 800c988:	2900      	cmp	r1, #0
 800c98a:	bfd4      	ite	le
 800c98c:	f1c1 0202 	rsble	r2, r1, #2
 800c990:	2201      	movgt	r2, #1
 800c992:	4413      	add	r3, r2
 800c994:	e7e0      	b.n	800c958 <_printf_float+0x1a4>
 800c996:	6823      	ldr	r3, [r4, #0]
 800c998:	055a      	lsls	r2, r3, #21
 800c99a:	d407      	bmi.n	800c9ac <_printf_float+0x1f8>
 800c99c:	6923      	ldr	r3, [r4, #16]
 800c99e:	4642      	mov	r2, r8
 800c9a0:	4631      	mov	r1, r6
 800c9a2:	4628      	mov	r0, r5
 800c9a4:	47b8      	blx	r7
 800c9a6:	3001      	adds	r0, #1
 800c9a8:	d12c      	bne.n	800ca04 <_printf_float+0x250>
 800c9aa:	e764      	b.n	800c876 <_printf_float+0xc2>
 800c9ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c9b0:	f240 80e0 	bls.w	800cb74 <_printf_float+0x3c0>
 800c9b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	f7f4 f88c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	d034      	beq.n	800ca2e <_printf_float+0x27a>
 800c9c4:	4a37      	ldr	r2, [pc, #220]	; (800caa4 <_printf_float+0x2f0>)
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	4631      	mov	r1, r6
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	47b8      	blx	r7
 800c9ce:	3001      	adds	r0, #1
 800c9d0:	f43f af51 	beq.w	800c876 <_printf_float+0xc2>
 800c9d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	db02      	blt.n	800c9e2 <_printf_float+0x22e>
 800c9dc:	6823      	ldr	r3, [r4, #0]
 800c9de:	07d8      	lsls	r0, r3, #31
 800c9e0:	d510      	bpl.n	800ca04 <_printf_float+0x250>
 800c9e2:	ee18 3a10 	vmov	r3, s16
 800c9e6:	4652      	mov	r2, sl
 800c9e8:	4631      	mov	r1, r6
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	47b8      	blx	r7
 800c9ee:	3001      	adds	r0, #1
 800c9f0:	f43f af41 	beq.w	800c876 <_printf_float+0xc2>
 800c9f4:	f04f 0800 	mov.w	r8, #0
 800c9f8:	f104 091a 	add.w	r9, r4, #26
 800c9fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9fe:	3b01      	subs	r3, #1
 800ca00:	4543      	cmp	r3, r8
 800ca02:	dc09      	bgt.n	800ca18 <_printf_float+0x264>
 800ca04:	6823      	ldr	r3, [r4, #0]
 800ca06:	079b      	lsls	r3, r3, #30
 800ca08:	f100 8105 	bmi.w	800cc16 <_printf_float+0x462>
 800ca0c:	68e0      	ldr	r0, [r4, #12]
 800ca0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca10:	4298      	cmp	r0, r3
 800ca12:	bfb8      	it	lt
 800ca14:	4618      	movlt	r0, r3
 800ca16:	e730      	b.n	800c87a <_printf_float+0xc6>
 800ca18:	2301      	movs	r3, #1
 800ca1a:	464a      	mov	r2, r9
 800ca1c:	4631      	mov	r1, r6
 800ca1e:	4628      	mov	r0, r5
 800ca20:	47b8      	blx	r7
 800ca22:	3001      	adds	r0, #1
 800ca24:	f43f af27 	beq.w	800c876 <_printf_float+0xc2>
 800ca28:	f108 0801 	add.w	r8, r8, #1
 800ca2c:	e7e6      	b.n	800c9fc <_printf_float+0x248>
 800ca2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	dc39      	bgt.n	800caa8 <_printf_float+0x2f4>
 800ca34:	4a1b      	ldr	r2, [pc, #108]	; (800caa4 <_printf_float+0x2f0>)
 800ca36:	2301      	movs	r3, #1
 800ca38:	4631      	mov	r1, r6
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	47b8      	blx	r7
 800ca3e:	3001      	adds	r0, #1
 800ca40:	f43f af19 	beq.w	800c876 <_printf_float+0xc2>
 800ca44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	d102      	bne.n	800ca52 <_printf_float+0x29e>
 800ca4c:	6823      	ldr	r3, [r4, #0]
 800ca4e:	07d9      	lsls	r1, r3, #31
 800ca50:	d5d8      	bpl.n	800ca04 <_printf_float+0x250>
 800ca52:	ee18 3a10 	vmov	r3, s16
 800ca56:	4652      	mov	r2, sl
 800ca58:	4631      	mov	r1, r6
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	47b8      	blx	r7
 800ca5e:	3001      	adds	r0, #1
 800ca60:	f43f af09 	beq.w	800c876 <_printf_float+0xc2>
 800ca64:	f04f 0900 	mov.w	r9, #0
 800ca68:	f104 0a1a 	add.w	sl, r4, #26
 800ca6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca6e:	425b      	negs	r3, r3
 800ca70:	454b      	cmp	r3, r9
 800ca72:	dc01      	bgt.n	800ca78 <_printf_float+0x2c4>
 800ca74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca76:	e792      	b.n	800c99e <_printf_float+0x1ea>
 800ca78:	2301      	movs	r3, #1
 800ca7a:	4652      	mov	r2, sl
 800ca7c:	4631      	mov	r1, r6
 800ca7e:	4628      	mov	r0, r5
 800ca80:	47b8      	blx	r7
 800ca82:	3001      	adds	r0, #1
 800ca84:	f43f aef7 	beq.w	800c876 <_printf_float+0xc2>
 800ca88:	f109 0901 	add.w	r9, r9, #1
 800ca8c:	e7ee      	b.n	800ca6c <_printf_float+0x2b8>
 800ca8e:	bf00      	nop
 800ca90:	7fefffff 	.word	0x7fefffff
 800ca94:	08011220 	.word	0x08011220
 800ca98:	08011224 	.word	0x08011224
 800ca9c:	0801122c 	.word	0x0801122c
 800caa0:	08011228 	.word	0x08011228
 800caa4:	08011230 	.word	0x08011230
 800caa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800caaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800caac:	429a      	cmp	r2, r3
 800caae:	bfa8      	it	ge
 800cab0:	461a      	movge	r2, r3
 800cab2:	2a00      	cmp	r2, #0
 800cab4:	4691      	mov	r9, r2
 800cab6:	dc37      	bgt.n	800cb28 <_printf_float+0x374>
 800cab8:	f04f 0b00 	mov.w	fp, #0
 800cabc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cac0:	f104 021a 	add.w	r2, r4, #26
 800cac4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cac6:	9305      	str	r3, [sp, #20]
 800cac8:	eba3 0309 	sub.w	r3, r3, r9
 800cacc:	455b      	cmp	r3, fp
 800cace:	dc33      	bgt.n	800cb38 <_printf_float+0x384>
 800cad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cad4:	429a      	cmp	r2, r3
 800cad6:	db3b      	blt.n	800cb50 <_printf_float+0x39c>
 800cad8:	6823      	ldr	r3, [r4, #0]
 800cada:	07da      	lsls	r2, r3, #31
 800cadc:	d438      	bmi.n	800cb50 <_printf_float+0x39c>
 800cade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cae0:	9a05      	ldr	r2, [sp, #20]
 800cae2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cae4:	1a9a      	subs	r2, r3, r2
 800cae6:	eba3 0901 	sub.w	r9, r3, r1
 800caea:	4591      	cmp	r9, r2
 800caec:	bfa8      	it	ge
 800caee:	4691      	movge	r9, r2
 800caf0:	f1b9 0f00 	cmp.w	r9, #0
 800caf4:	dc35      	bgt.n	800cb62 <_printf_float+0x3ae>
 800caf6:	f04f 0800 	mov.w	r8, #0
 800cafa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cafe:	f104 0a1a 	add.w	sl, r4, #26
 800cb02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb06:	1a9b      	subs	r3, r3, r2
 800cb08:	eba3 0309 	sub.w	r3, r3, r9
 800cb0c:	4543      	cmp	r3, r8
 800cb0e:	f77f af79 	ble.w	800ca04 <_printf_float+0x250>
 800cb12:	2301      	movs	r3, #1
 800cb14:	4652      	mov	r2, sl
 800cb16:	4631      	mov	r1, r6
 800cb18:	4628      	mov	r0, r5
 800cb1a:	47b8      	blx	r7
 800cb1c:	3001      	adds	r0, #1
 800cb1e:	f43f aeaa 	beq.w	800c876 <_printf_float+0xc2>
 800cb22:	f108 0801 	add.w	r8, r8, #1
 800cb26:	e7ec      	b.n	800cb02 <_printf_float+0x34e>
 800cb28:	4613      	mov	r3, r2
 800cb2a:	4631      	mov	r1, r6
 800cb2c:	4642      	mov	r2, r8
 800cb2e:	4628      	mov	r0, r5
 800cb30:	47b8      	blx	r7
 800cb32:	3001      	adds	r0, #1
 800cb34:	d1c0      	bne.n	800cab8 <_printf_float+0x304>
 800cb36:	e69e      	b.n	800c876 <_printf_float+0xc2>
 800cb38:	2301      	movs	r3, #1
 800cb3a:	4631      	mov	r1, r6
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	9205      	str	r2, [sp, #20]
 800cb40:	47b8      	blx	r7
 800cb42:	3001      	adds	r0, #1
 800cb44:	f43f ae97 	beq.w	800c876 <_printf_float+0xc2>
 800cb48:	9a05      	ldr	r2, [sp, #20]
 800cb4a:	f10b 0b01 	add.w	fp, fp, #1
 800cb4e:	e7b9      	b.n	800cac4 <_printf_float+0x310>
 800cb50:	ee18 3a10 	vmov	r3, s16
 800cb54:	4652      	mov	r2, sl
 800cb56:	4631      	mov	r1, r6
 800cb58:	4628      	mov	r0, r5
 800cb5a:	47b8      	blx	r7
 800cb5c:	3001      	adds	r0, #1
 800cb5e:	d1be      	bne.n	800cade <_printf_float+0x32a>
 800cb60:	e689      	b.n	800c876 <_printf_float+0xc2>
 800cb62:	9a05      	ldr	r2, [sp, #20]
 800cb64:	464b      	mov	r3, r9
 800cb66:	4442      	add	r2, r8
 800cb68:	4631      	mov	r1, r6
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	47b8      	blx	r7
 800cb6e:	3001      	adds	r0, #1
 800cb70:	d1c1      	bne.n	800caf6 <_printf_float+0x342>
 800cb72:	e680      	b.n	800c876 <_printf_float+0xc2>
 800cb74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb76:	2a01      	cmp	r2, #1
 800cb78:	dc01      	bgt.n	800cb7e <_printf_float+0x3ca>
 800cb7a:	07db      	lsls	r3, r3, #31
 800cb7c:	d538      	bpl.n	800cbf0 <_printf_float+0x43c>
 800cb7e:	2301      	movs	r3, #1
 800cb80:	4642      	mov	r2, r8
 800cb82:	4631      	mov	r1, r6
 800cb84:	4628      	mov	r0, r5
 800cb86:	47b8      	blx	r7
 800cb88:	3001      	adds	r0, #1
 800cb8a:	f43f ae74 	beq.w	800c876 <_printf_float+0xc2>
 800cb8e:	ee18 3a10 	vmov	r3, s16
 800cb92:	4652      	mov	r2, sl
 800cb94:	4631      	mov	r1, r6
 800cb96:	4628      	mov	r0, r5
 800cb98:	47b8      	blx	r7
 800cb9a:	3001      	adds	r0, #1
 800cb9c:	f43f ae6b 	beq.w	800c876 <_printf_float+0xc2>
 800cba0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cba4:	2200      	movs	r2, #0
 800cba6:	2300      	movs	r3, #0
 800cba8:	f7f3 ff96 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbac:	b9d8      	cbnz	r0, 800cbe6 <_printf_float+0x432>
 800cbae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbb0:	f108 0201 	add.w	r2, r8, #1
 800cbb4:	3b01      	subs	r3, #1
 800cbb6:	4631      	mov	r1, r6
 800cbb8:	4628      	mov	r0, r5
 800cbba:	47b8      	blx	r7
 800cbbc:	3001      	adds	r0, #1
 800cbbe:	d10e      	bne.n	800cbde <_printf_float+0x42a>
 800cbc0:	e659      	b.n	800c876 <_printf_float+0xc2>
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	4652      	mov	r2, sl
 800cbc6:	4631      	mov	r1, r6
 800cbc8:	4628      	mov	r0, r5
 800cbca:	47b8      	blx	r7
 800cbcc:	3001      	adds	r0, #1
 800cbce:	f43f ae52 	beq.w	800c876 <_printf_float+0xc2>
 800cbd2:	f108 0801 	add.w	r8, r8, #1
 800cbd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	4543      	cmp	r3, r8
 800cbdc:	dcf1      	bgt.n	800cbc2 <_printf_float+0x40e>
 800cbde:	464b      	mov	r3, r9
 800cbe0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cbe4:	e6dc      	b.n	800c9a0 <_printf_float+0x1ec>
 800cbe6:	f04f 0800 	mov.w	r8, #0
 800cbea:	f104 0a1a 	add.w	sl, r4, #26
 800cbee:	e7f2      	b.n	800cbd6 <_printf_float+0x422>
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	4642      	mov	r2, r8
 800cbf4:	e7df      	b.n	800cbb6 <_printf_float+0x402>
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	464a      	mov	r2, r9
 800cbfa:	4631      	mov	r1, r6
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	47b8      	blx	r7
 800cc00:	3001      	adds	r0, #1
 800cc02:	f43f ae38 	beq.w	800c876 <_printf_float+0xc2>
 800cc06:	f108 0801 	add.w	r8, r8, #1
 800cc0a:	68e3      	ldr	r3, [r4, #12]
 800cc0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc0e:	1a5b      	subs	r3, r3, r1
 800cc10:	4543      	cmp	r3, r8
 800cc12:	dcf0      	bgt.n	800cbf6 <_printf_float+0x442>
 800cc14:	e6fa      	b.n	800ca0c <_printf_float+0x258>
 800cc16:	f04f 0800 	mov.w	r8, #0
 800cc1a:	f104 0919 	add.w	r9, r4, #25
 800cc1e:	e7f4      	b.n	800cc0a <_printf_float+0x456>

0800cc20 <_printf_common>:
 800cc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc24:	4616      	mov	r6, r2
 800cc26:	4699      	mov	r9, r3
 800cc28:	688a      	ldr	r2, [r1, #8]
 800cc2a:	690b      	ldr	r3, [r1, #16]
 800cc2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc30:	4293      	cmp	r3, r2
 800cc32:	bfb8      	it	lt
 800cc34:	4613      	movlt	r3, r2
 800cc36:	6033      	str	r3, [r6, #0]
 800cc38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc3c:	4607      	mov	r7, r0
 800cc3e:	460c      	mov	r4, r1
 800cc40:	b10a      	cbz	r2, 800cc46 <_printf_common+0x26>
 800cc42:	3301      	adds	r3, #1
 800cc44:	6033      	str	r3, [r6, #0]
 800cc46:	6823      	ldr	r3, [r4, #0]
 800cc48:	0699      	lsls	r1, r3, #26
 800cc4a:	bf42      	ittt	mi
 800cc4c:	6833      	ldrmi	r3, [r6, #0]
 800cc4e:	3302      	addmi	r3, #2
 800cc50:	6033      	strmi	r3, [r6, #0]
 800cc52:	6825      	ldr	r5, [r4, #0]
 800cc54:	f015 0506 	ands.w	r5, r5, #6
 800cc58:	d106      	bne.n	800cc68 <_printf_common+0x48>
 800cc5a:	f104 0a19 	add.w	sl, r4, #25
 800cc5e:	68e3      	ldr	r3, [r4, #12]
 800cc60:	6832      	ldr	r2, [r6, #0]
 800cc62:	1a9b      	subs	r3, r3, r2
 800cc64:	42ab      	cmp	r3, r5
 800cc66:	dc26      	bgt.n	800ccb6 <_printf_common+0x96>
 800cc68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc6c:	1e13      	subs	r3, r2, #0
 800cc6e:	6822      	ldr	r2, [r4, #0]
 800cc70:	bf18      	it	ne
 800cc72:	2301      	movne	r3, #1
 800cc74:	0692      	lsls	r2, r2, #26
 800cc76:	d42b      	bmi.n	800ccd0 <_printf_common+0xb0>
 800cc78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc7c:	4649      	mov	r1, r9
 800cc7e:	4638      	mov	r0, r7
 800cc80:	47c0      	blx	r8
 800cc82:	3001      	adds	r0, #1
 800cc84:	d01e      	beq.n	800ccc4 <_printf_common+0xa4>
 800cc86:	6823      	ldr	r3, [r4, #0]
 800cc88:	68e5      	ldr	r5, [r4, #12]
 800cc8a:	6832      	ldr	r2, [r6, #0]
 800cc8c:	f003 0306 	and.w	r3, r3, #6
 800cc90:	2b04      	cmp	r3, #4
 800cc92:	bf08      	it	eq
 800cc94:	1aad      	subeq	r5, r5, r2
 800cc96:	68a3      	ldr	r3, [r4, #8]
 800cc98:	6922      	ldr	r2, [r4, #16]
 800cc9a:	bf0c      	ite	eq
 800cc9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cca0:	2500      	movne	r5, #0
 800cca2:	4293      	cmp	r3, r2
 800cca4:	bfc4      	itt	gt
 800cca6:	1a9b      	subgt	r3, r3, r2
 800cca8:	18ed      	addgt	r5, r5, r3
 800ccaa:	2600      	movs	r6, #0
 800ccac:	341a      	adds	r4, #26
 800ccae:	42b5      	cmp	r5, r6
 800ccb0:	d11a      	bne.n	800cce8 <_printf_common+0xc8>
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	e008      	b.n	800ccc8 <_printf_common+0xa8>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	4652      	mov	r2, sl
 800ccba:	4649      	mov	r1, r9
 800ccbc:	4638      	mov	r0, r7
 800ccbe:	47c0      	blx	r8
 800ccc0:	3001      	adds	r0, #1
 800ccc2:	d103      	bne.n	800cccc <_printf_common+0xac>
 800ccc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cccc:	3501      	adds	r5, #1
 800ccce:	e7c6      	b.n	800cc5e <_printf_common+0x3e>
 800ccd0:	18e1      	adds	r1, r4, r3
 800ccd2:	1c5a      	adds	r2, r3, #1
 800ccd4:	2030      	movs	r0, #48	; 0x30
 800ccd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ccda:	4422      	add	r2, r4
 800ccdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cce0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cce4:	3302      	adds	r3, #2
 800cce6:	e7c7      	b.n	800cc78 <_printf_common+0x58>
 800cce8:	2301      	movs	r3, #1
 800ccea:	4622      	mov	r2, r4
 800ccec:	4649      	mov	r1, r9
 800ccee:	4638      	mov	r0, r7
 800ccf0:	47c0      	blx	r8
 800ccf2:	3001      	adds	r0, #1
 800ccf4:	d0e6      	beq.n	800ccc4 <_printf_common+0xa4>
 800ccf6:	3601      	adds	r6, #1
 800ccf8:	e7d9      	b.n	800ccae <_printf_common+0x8e>
	...

0800ccfc <_printf_i>:
 800ccfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd00:	7e0f      	ldrb	r7, [r1, #24]
 800cd02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd04:	2f78      	cmp	r7, #120	; 0x78
 800cd06:	4691      	mov	r9, r2
 800cd08:	4680      	mov	r8, r0
 800cd0a:	460c      	mov	r4, r1
 800cd0c:	469a      	mov	sl, r3
 800cd0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd12:	d807      	bhi.n	800cd24 <_printf_i+0x28>
 800cd14:	2f62      	cmp	r7, #98	; 0x62
 800cd16:	d80a      	bhi.n	800cd2e <_printf_i+0x32>
 800cd18:	2f00      	cmp	r7, #0
 800cd1a:	f000 80d8 	beq.w	800cece <_printf_i+0x1d2>
 800cd1e:	2f58      	cmp	r7, #88	; 0x58
 800cd20:	f000 80a3 	beq.w	800ce6a <_printf_i+0x16e>
 800cd24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd2c:	e03a      	b.n	800cda4 <_printf_i+0xa8>
 800cd2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd32:	2b15      	cmp	r3, #21
 800cd34:	d8f6      	bhi.n	800cd24 <_printf_i+0x28>
 800cd36:	a101      	add	r1, pc, #4	; (adr r1, 800cd3c <_printf_i+0x40>)
 800cd38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd3c:	0800cd95 	.word	0x0800cd95
 800cd40:	0800cda9 	.word	0x0800cda9
 800cd44:	0800cd25 	.word	0x0800cd25
 800cd48:	0800cd25 	.word	0x0800cd25
 800cd4c:	0800cd25 	.word	0x0800cd25
 800cd50:	0800cd25 	.word	0x0800cd25
 800cd54:	0800cda9 	.word	0x0800cda9
 800cd58:	0800cd25 	.word	0x0800cd25
 800cd5c:	0800cd25 	.word	0x0800cd25
 800cd60:	0800cd25 	.word	0x0800cd25
 800cd64:	0800cd25 	.word	0x0800cd25
 800cd68:	0800ceb5 	.word	0x0800ceb5
 800cd6c:	0800cdd9 	.word	0x0800cdd9
 800cd70:	0800ce97 	.word	0x0800ce97
 800cd74:	0800cd25 	.word	0x0800cd25
 800cd78:	0800cd25 	.word	0x0800cd25
 800cd7c:	0800ced7 	.word	0x0800ced7
 800cd80:	0800cd25 	.word	0x0800cd25
 800cd84:	0800cdd9 	.word	0x0800cdd9
 800cd88:	0800cd25 	.word	0x0800cd25
 800cd8c:	0800cd25 	.word	0x0800cd25
 800cd90:	0800ce9f 	.word	0x0800ce9f
 800cd94:	682b      	ldr	r3, [r5, #0]
 800cd96:	1d1a      	adds	r2, r3, #4
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	602a      	str	r2, [r5, #0]
 800cd9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cda0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cda4:	2301      	movs	r3, #1
 800cda6:	e0a3      	b.n	800cef0 <_printf_i+0x1f4>
 800cda8:	6820      	ldr	r0, [r4, #0]
 800cdaa:	6829      	ldr	r1, [r5, #0]
 800cdac:	0606      	lsls	r6, r0, #24
 800cdae:	f101 0304 	add.w	r3, r1, #4
 800cdb2:	d50a      	bpl.n	800cdca <_printf_i+0xce>
 800cdb4:	680e      	ldr	r6, [r1, #0]
 800cdb6:	602b      	str	r3, [r5, #0]
 800cdb8:	2e00      	cmp	r6, #0
 800cdba:	da03      	bge.n	800cdc4 <_printf_i+0xc8>
 800cdbc:	232d      	movs	r3, #45	; 0x2d
 800cdbe:	4276      	negs	r6, r6
 800cdc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdc4:	485e      	ldr	r0, [pc, #376]	; (800cf40 <_printf_i+0x244>)
 800cdc6:	230a      	movs	r3, #10
 800cdc8:	e019      	b.n	800cdfe <_printf_i+0x102>
 800cdca:	680e      	ldr	r6, [r1, #0]
 800cdcc:	602b      	str	r3, [r5, #0]
 800cdce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cdd2:	bf18      	it	ne
 800cdd4:	b236      	sxthne	r6, r6
 800cdd6:	e7ef      	b.n	800cdb8 <_printf_i+0xbc>
 800cdd8:	682b      	ldr	r3, [r5, #0]
 800cdda:	6820      	ldr	r0, [r4, #0]
 800cddc:	1d19      	adds	r1, r3, #4
 800cdde:	6029      	str	r1, [r5, #0]
 800cde0:	0601      	lsls	r1, r0, #24
 800cde2:	d501      	bpl.n	800cde8 <_printf_i+0xec>
 800cde4:	681e      	ldr	r6, [r3, #0]
 800cde6:	e002      	b.n	800cdee <_printf_i+0xf2>
 800cde8:	0646      	lsls	r6, r0, #25
 800cdea:	d5fb      	bpl.n	800cde4 <_printf_i+0xe8>
 800cdec:	881e      	ldrh	r6, [r3, #0]
 800cdee:	4854      	ldr	r0, [pc, #336]	; (800cf40 <_printf_i+0x244>)
 800cdf0:	2f6f      	cmp	r7, #111	; 0x6f
 800cdf2:	bf0c      	ite	eq
 800cdf4:	2308      	moveq	r3, #8
 800cdf6:	230a      	movne	r3, #10
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cdfe:	6865      	ldr	r5, [r4, #4]
 800ce00:	60a5      	str	r5, [r4, #8]
 800ce02:	2d00      	cmp	r5, #0
 800ce04:	bfa2      	ittt	ge
 800ce06:	6821      	ldrge	r1, [r4, #0]
 800ce08:	f021 0104 	bicge.w	r1, r1, #4
 800ce0c:	6021      	strge	r1, [r4, #0]
 800ce0e:	b90e      	cbnz	r6, 800ce14 <_printf_i+0x118>
 800ce10:	2d00      	cmp	r5, #0
 800ce12:	d04d      	beq.n	800ceb0 <_printf_i+0x1b4>
 800ce14:	4615      	mov	r5, r2
 800ce16:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce1a:	fb03 6711 	mls	r7, r3, r1, r6
 800ce1e:	5dc7      	ldrb	r7, [r0, r7]
 800ce20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce24:	4637      	mov	r7, r6
 800ce26:	42bb      	cmp	r3, r7
 800ce28:	460e      	mov	r6, r1
 800ce2a:	d9f4      	bls.n	800ce16 <_printf_i+0x11a>
 800ce2c:	2b08      	cmp	r3, #8
 800ce2e:	d10b      	bne.n	800ce48 <_printf_i+0x14c>
 800ce30:	6823      	ldr	r3, [r4, #0]
 800ce32:	07de      	lsls	r6, r3, #31
 800ce34:	d508      	bpl.n	800ce48 <_printf_i+0x14c>
 800ce36:	6923      	ldr	r3, [r4, #16]
 800ce38:	6861      	ldr	r1, [r4, #4]
 800ce3a:	4299      	cmp	r1, r3
 800ce3c:	bfde      	ittt	le
 800ce3e:	2330      	movle	r3, #48	; 0x30
 800ce40:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce44:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ce48:	1b52      	subs	r2, r2, r5
 800ce4a:	6122      	str	r2, [r4, #16]
 800ce4c:	f8cd a000 	str.w	sl, [sp]
 800ce50:	464b      	mov	r3, r9
 800ce52:	aa03      	add	r2, sp, #12
 800ce54:	4621      	mov	r1, r4
 800ce56:	4640      	mov	r0, r8
 800ce58:	f7ff fee2 	bl	800cc20 <_printf_common>
 800ce5c:	3001      	adds	r0, #1
 800ce5e:	d14c      	bne.n	800cefa <_printf_i+0x1fe>
 800ce60:	f04f 30ff 	mov.w	r0, #4294967295
 800ce64:	b004      	add	sp, #16
 800ce66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce6a:	4835      	ldr	r0, [pc, #212]	; (800cf40 <_printf_i+0x244>)
 800ce6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ce70:	6829      	ldr	r1, [r5, #0]
 800ce72:	6823      	ldr	r3, [r4, #0]
 800ce74:	f851 6b04 	ldr.w	r6, [r1], #4
 800ce78:	6029      	str	r1, [r5, #0]
 800ce7a:	061d      	lsls	r5, r3, #24
 800ce7c:	d514      	bpl.n	800cea8 <_printf_i+0x1ac>
 800ce7e:	07df      	lsls	r7, r3, #31
 800ce80:	bf44      	itt	mi
 800ce82:	f043 0320 	orrmi.w	r3, r3, #32
 800ce86:	6023      	strmi	r3, [r4, #0]
 800ce88:	b91e      	cbnz	r6, 800ce92 <_printf_i+0x196>
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	f023 0320 	bic.w	r3, r3, #32
 800ce90:	6023      	str	r3, [r4, #0]
 800ce92:	2310      	movs	r3, #16
 800ce94:	e7b0      	b.n	800cdf8 <_printf_i+0xfc>
 800ce96:	6823      	ldr	r3, [r4, #0]
 800ce98:	f043 0320 	orr.w	r3, r3, #32
 800ce9c:	6023      	str	r3, [r4, #0]
 800ce9e:	2378      	movs	r3, #120	; 0x78
 800cea0:	4828      	ldr	r0, [pc, #160]	; (800cf44 <_printf_i+0x248>)
 800cea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cea6:	e7e3      	b.n	800ce70 <_printf_i+0x174>
 800cea8:	0659      	lsls	r1, r3, #25
 800ceaa:	bf48      	it	mi
 800ceac:	b2b6      	uxthmi	r6, r6
 800ceae:	e7e6      	b.n	800ce7e <_printf_i+0x182>
 800ceb0:	4615      	mov	r5, r2
 800ceb2:	e7bb      	b.n	800ce2c <_printf_i+0x130>
 800ceb4:	682b      	ldr	r3, [r5, #0]
 800ceb6:	6826      	ldr	r6, [r4, #0]
 800ceb8:	6961      	ldr	r1, [r4, #20]
 800ceba:	1d18      	adds	r0, r3, #4
 800cebc:	6028      	str	r0, [r5, #0]
 800cebe:	0635      	lsls	r5, r6, #24
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	d501      	bpl.n	800cec8 <_printf_i+0x1cc>
 800cec4:	6019      	str	r1, [r3, #0]
 800cec6:	e002      	b.n	800cece <_printf_i+0x1d2>
 800cec8:	0670      	lsls	r0, r6, #25
 800ceca:	d5fb      	bpl.n	800cec4 <_printf_i+0x1c8>
 800cecc:	8019      	strh	r1, [r3, #0]
 800cece:	2300      	movs	r3, #0
 800ced0:	6123      	str	r3, [r4, #16]
 800ced2:	4615      	mov	r5, r2
 800ced4:	e7ba      	b.n	800ce4c <_printf_i+0x150>
 800ced6:	682b      	ldr	r3, [r5, #0]
 800ced8:	1d1a      	adds	r2, r3, #4
 800ceda:	602a      	str	r2, [r5, #0]
 800cedc:	681d      	ldr	r5, [r3, #0]
 800cede:	6862      	ldr	r2, [r4, #4]
 800cee0:	2100      	movs	r1, #0
 800cee2:	4628      	mov	r0, r5
 800cee4:	f7f3 f984 	bl	80001f0 <memchr>
 800cee8:	b108      	cbz	r0, 800ceee <_printf_i+0x1f2>
 800ceea:	1b40      	subs	r0, r0, r5
 800ceec:	6060      	str	r0, [r4, #4]
 800ceee:	6863      	ldr	r3, [r4, #4]
 800cef0:	6123      	str	r3, [r4, #16]
 800cef2:	2300      	movs	r3, #0
 800cef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cef8:	e7a8      	b.n	800ce4c <_printf_i+0x150>
 800cefa:	6923      	ldr	r3, [r4, #16]
 800cefc:	462a      	mov	r2, r5
 800cefe:	4649      	mov	r1, r9
 800cf00:	4640      	mov	r0, r8
 800cf02:	47d0      	blx	sl
 800cf04:	3001      	adds	r0, #1
 800cf06:	d0ab      	beq.n	800ce60 <_printf_i+0x164>
 800cf08:	6823      	ldr	r3, [r4, #0]
 800cf0a:	079b      	lsls	r3, r3, #30
 800cf0c:	d413      	bmi.n	800cf36 <_printf_i+0x23a>
 800cf0e:	68e0      	ldr	r0, [r4, #12]
 800cf10:	9b03      	ldr	r3, [sp, #12]
 800cf12:	4298      	cmp	r0, r3
 800cf14:	bfb8      	it	lt
 800cf16:	4618      	movlt	r0, r3
 800cf18:	e7a4      	b.n	800ce64 <_printf_i+0x168>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	4632      	mov	r2, r6
 800cf1e:	4649      	mov	r1, r9
 800cf20:	4640      	mov	r0, r8
 800cf22:	47d0      	blx	sl
 800cf24:	3001      	adds	r0, #1
 800cf26:	d09b      	beq.n	800ce60 <_printf_i+0x164>
 800cf28:	3501      	adds	r5, #1
 800cf2a:	68e3      	ldr	r3, [r4, #12]
 800cf2c:	9903      	ldr	r1, [sp, #12]
 800cf2e:	1a5b      	subs	r3, r3, r1
 800cf30:	42ab      	cmp	r3, r5
 800cf32:	dcf2      	bgt.n	800cf1a <_printf_i+0x21e>
 800cf34:	e7eb      	b.n	800cf0e <_printf_i+0x212>
 800cf36:	2500      	movs	r5, #0
 800cf38:	f104 0619 	add.w	r6, r4, #25
 800cf3c:	e7f5      	b.n	800cf2a <_printf_i+0x22e>
 800cf3e:	bf00      	nop
 800cf40:	08011232 	.word	0x08011232
 800cf44:	08011243 	.word	0x08011243

0800cf48 <_scanf_float>:
 800cf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf4c:	b087      	sub	sp, #28
 800cf4e:	4617      	mov	r7, r2
 800cf50:	9303      	str	r3, [sp, #12]
 800cf52:	688b      	ldr	r3, [r1, #8]
 800cf54:	1e5a      	subs	r2, r3, #1
 800cf56:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cf5a:	bf83      	ittte	hi
 800cf5c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cf60:	195b      	addhi	r3, r3, r5
 800cf62:	9302      	strhi	r3, [sp, #8]
 800cf64:	2300      	movls	r3, #0
 800cf66:	bf86      	itte	hi
 800cf68:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cf6c:	608b      	strhi	r3, [r1, #8]
 800cf6e:	9302      	strls	r3, [sp, #8]
 800cf70:	680b      	ldr	r3, [r1, #0]
 800cf72:	468b      	mov	fp, r1
 800cf74:	2500      	movs	r5, #0
 800cf76:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cf7a:	f84b 3b1c 	str.w	r3, [fp], #28
 800cf7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cf82:	4680      	mov	r8, r0
 800cf84:	460c      	mov	r4, r1
 800cf86:	465e      	mov	r6, fp
 800cf88:	46aa      	mov	sl, r5
 800cf8a:	46a9      	mov	r9, r5
 800cf8c:	9501      	str	r5, [sp, #4]
 800cf8e:	68a2      	ldr	r2, [r4, #8]
 800cf90:	b152      	cbz	r2, 800cfa8 <_scanf_float+0x60>
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	2b4e      	cmp	r3, #78	; 0x4e
 800cf98:	d864      	bhi.n	800d064 <_scanf_float+0x11c>
 800cf9a:	2b40      	cmp	r3, #64	; 0x40
 800cf9c:	d83c      	bhi.n	800d018 <_scanf_float+0xd0>
 800cf9e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cfa2:	b2c8      	uxtb	r0, r1
 800cfa4:	280e      	cmp	r0, #14
 800cfa6:	d93a      	bls.n	800d01e <_scanf_float+0xd6>
 800cfa8:	f1b9 0f00 	cmp.w	r9, #0
 800cfac:	d003      	beq.n	800cfb6 <_scanf_float+0x6e>
 800cfae:	6823      	ldr	r3, [r4, #0]
 800cfb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cfb4:	6023      	str	r3, [r4, #0]
 800cfb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cfba:	f1ba 0f01 	cmp.w	sl, #1
 800cfbe:	f200 8113 	bhi.w	800d1e8 <_scanf_float+0x2a0>
 800cfc2:	455e      	cmp	r6, fp
 800cfc4:	f200 8105 	bhi.w	800d1d2 <_scanf_float+0x28a>
 800cfc8:	2501      	movs	r5, #1
 800cfca:	4628      	mov	r0, r5
 800cfcc:	b007      	add	sp, #28
 800cfce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cfd6:	2a0d      	cmp	r2, #13
 800cfd8:	d8e6      	bhi.n	800cfa8 <_scanf_float+0x60>
 800cfda:	a101      	add	r1, pc, #4	; (adr r1, 800cfe0 <_scanf_float+0x98>)
 800cfdc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cfe0:	0800d11f 	.word	0x0800d11f
 800cfe4:	0800cfa9 	.word	0x0800cfa9
 800cfe8:	0800cfa9 	.word	0x0800cfa9
 800cfec:	0800cfa9 	.word	0x0800cfa9
 800cff0:	0800d17f 	.word	0x0800d17f
 800cff4:	0800d157 	.word	0x0800d157
 800cff8:	0800cfa9 	.word	0x0800cfa9
 800cffc:	0800cfa9 	.word	0x0800cfa9
 800d000:	0800d12d 	.word	0x0800d12d
 800d004:	0800cfa9 	.word	0x0800cfa9
 800d008:	0800cfa9 	.word	0x0800cfa9
 800d00c:	0800cfa9 	.word	0x0800cfa9
 800d010:	0800cfa9 	.word	0x0800cfa9
 800d014:	0800d0e5 	.word	0x0800d0e5
 800d018:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d01c:	e7db      	b.n	800cfd6 <_scanf_float+0x8e>
 800d01e:	290e      	cmp	r1, #14
 800d020:	d8c2      	bhi.n	800cfa8 <_scanf_float+0x60>
 800d022:	a001      	add	r0, pc, #4	; (adr r0, 800d028 <_scanf_float+0xe0>)
 800d024:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d028:	0800d0d7 	.word	0x0800d0d7
 800d02c:	0800cfa9 	.word	0x0800cfa9
 800d030:	0800d0d7 	.word	0x0800d0d7
 800d034:	0800d16b 	.word	0x0800d16b
 800d038:	0800cfa9 	.word	0x0800cfa9
 800d03c:	0800d085 	.word	0x0800d085
 800d040:	0800d0c1 	.word	0x0800d0c1
 800d044:	0800d0c1 	.word	0x0800d0c1
 800d048:	0800d0c1 	.word	0x0800d0c1
 800d04c:	0800d0c1 	.word	0x0800d0c1
 800d050:	0800d0c1 	.word	0x0800d0c1
 800d054:	0800d0c1 	.word	0x0800d0c1
 800d058:	0800d0c1 	.word	0x0800d0c1
 800d05c:	0800d0c1 	.word	0x0800d0c1
 800d060:	0800d0c1 	.word	0x0800d0c1
 800d064:	2b6e      	cmp	r3, #110	; 0x6e
 800d066:	d809      	bhi.n	800d07c <_scanf_float+0x134>
 800d068:	2b60      	cmp	r3, #96	; 0x60
 800d06a:	d8b2      	bhi.n	800cfd2 <_scanf_float+0x8a>
 800d06c:	2b54      	cmp	r3, #84	; 0x54
 800d06e:	d077      	beq.n	800d160 <_scanf_float+0x218>
 800d070:	2b59      	cmp	r3, #89	; 0x59
 800d072:	d199      	bne.n	800cfa8 <_scanf_float+0x60>
 800d074:	2d07      	cmp	r5, #7
 800d076:	d197      	bne.n	800cfa8 <_scanf_float+0x60>
 800d078:	2508      	movs	r5, #8
 800d07a:	e029      	b.n	800d0d0 <_scanf_float+0x188>
 800d07c:	2b74      	cmp	r3, #116	; 0x74
 800d07e:	d06f      	beq.n	800d160 <_scanf_float+0x218>
 800d080:	2b79      	cmp	r3, #121	; 0x79
 800d082:	e7f6      	b.n	800d072 <_scanf_float+0x12a>
 800d084:	6821      	ldr	r1, [r4, #0]
 800d086:	05c8      	lsls	r0, r1, #23
 800d088:	d51a      	bpl.n	800d0c0 <_scanf_float+0x178>
 800d08a:	9b02      	ldr	r3, [sp, #8]
 800d08c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d090:	6021      	str	r1, [r4, #0]
 800d092:	f109 0901 	add.w	r9, r9, #1
 800d096:	b11b      	cbz	r3, 800d0a0 <_scanf_float+0x158>
 800d098:	3b01      	subs	r3, #1
 800d09a:	3201      	adds	r2, #1
 800d09c:	9302      	str	r3, [sp, #8]
 800d09e:	60a2      	str	r2, [r4, #8]
 800d0a0:	68a3      	ldr	r3, [r4, #8]
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	60a3      	str	r3, [r4, #8]
 800d0a6:	6923      	ldr	r3, [r4, #16]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	6123      	str	r3, [r4, #16]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	607b      	str	r3, [r7, #4]
 800d0b4:	f340 8084 	ble.w	800d1c0 <_scanf_float+0x278>
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	603b      	str	r3, [r7, #0]
 800d0be:	e766      	b.n	800cf8e <_scanf_float+0x46>
 800d0c0:	eb1a 0f05 	cmn.w	sl, r5
 800d0c4:	f47f af70 	bne.w	800cfa8 <_scanf_float+0x60>
 800d0c8:	6822      	ldr	r2, [r4, #0]
 800d0ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d0ce:	6022      	str	r2, [r4, #0]
 800d0d0:	f806 3b01 	strb.w	r3, [r6], #1
 800d0d4:	e7e4      	b.n	800d0a0 <_scanf_float+0x158>
 800d0d6:	6822      	ldr	r2, [r4, #0]
 800d0d8:	0610      	lsls	r0, r2, #24
 800d0da:	f57f af65 	bpl.w	800cfa8 <_scanf_float+0x60>
 800d0de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d0e2:	e7f4      	b.n	800d0ce <_scanf_float+0x186>
 800d0e4:	f1ba 0f00 	cmp.w	sl, #0
 800d0e8:	d10e      	bne.n	800d108 <_scanf_float+0x1c0>
 800d0ea:	f1b9 0f00 	cmp.w	r9, #0
 800d0ee:	d10e      	bne.n	800d10e <_scanf_float+0x1c6>
 800d0f0:	6822      	ldr	r2, [r4, #0]
 800d0f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d0f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d0fa:	d108      	bne.n	800d10e <_scanf_float+0x1c6>
 800d0fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d100:	6022      	str	r2, [r4, #0]
 800d102:	f04f 0a01 	mov.w	sl, #1
 800d106:	e7e3      	b.n	800d0d0 <_scanf_float+0x188>
 800d108:	f1ba 0f02 	cmp.w	sl, #2
 800d10c:	d055      	beq.n	800d1ba <_scanf_float+0x272>
 800d10e:	2d01      	cmp	r5, #1
 800d110:	d002      	beq.n	800d118 <_scanf_float+0x1d0>
 800d112:	2d04      	cmp	r5, #4
 800d114:	f47f af48 	bne.w	800cfa8 <_scanf_float+0x60>
 800d118:	3501      	adds	r5, #1
 800d11a:	b2ed      	uxtb	r5, r5
 800d11c:	e7d8      	b.n	800d0d0 <_scanf_float+0x188>
 800d11e:	f1ba 0f01 	cmp.w	sl, #1
 800d122:	f47f af41 	bne.w	800cfa8 <_scanf_float+0x60>
 800d126:	f04f 0a02 	mov.w	sl, #2
 800d12a:	e7d1      	b.n	800d0d0 <_scanf_float+0x188>
 800d12c:	b97d      	cbnz	r5, 800d14e <_scanf_float+0x206>
 800d12e:	f1b9 0f00 	cmp.w	r9, #0
 800d132:	f47f af3c 	bne.w	800cfae <_scanf_float+0x66>
 800d136:	6822      	ldr	r2, [r4, #0]
 800d138:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d13c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d140:	f47f af39 	bne.w	800cfb6 <_scanf_float+0x6e>
 800d144:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d148:	6022      	str	r2, [r4, #0]
 800d14a:	2501      	movs	r5, #1
 800d14c:	e7c0      	b.n	800d0d0 <_scanf_float+0x188>
 800d14e:	2d03      	cmp	r5, #3
 800d150:	d0e2      	beq.n	800d118 <_scanf_float+0x1d0>
 800d152:	2d05      	cmp	r5, #5
 800d154:	e7de      	b.n	800d114 <_scanf_float+0x1cc>
 800d156:	2d02      	cmp	r5, #2
 800d158:	f47f af26 	bne.w	800cfa8 <_scanf_float+0x60>
 800d15c:	2503      	movs	r5, #3
 800d15e:	e7b7      	b.n	800d0d0 <_scanf_float+0x188>
 800d160:	2d06      	cmp	r5, #6
 800d162:	f47f af21 	bne.w	800cfa8 <_scanf_float+0x60>
 800d166:	2507      	movs	r5, #7
 800d168:	e7b2      	b.n	800d0d0 <_scanf_float+0x188>
 800d16a:	6822      	ldr	r2, [r4, #0]
 800d16c:	0591      	lsls	r1, r2, #22
 800d16e:	f57f af1b 	bpl.w	800cfa8 <_scanf_float+0x60>
 800d172:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d176:	6022      	str	r2, [r4, #0]
 800d178:	f8cd 9004 	str.w	r9, [sp, #4]
 800d17c:	e7a8      	b.n	800d0d0 <_scanf_float+0x188>
 800d17e:	6822      	ldr	r2, [r4, #0]
 800d180:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d184:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d188:	d006      	beq.n	800d198 <_scanf_float+0x250>
 800d18a:	0550      	lsls	r0, r2, #21
 800d18c:	f57f af0c 	bpl.w	800cfa8 <_scanf_float+0x60>
 800d190:	f1b9 0f00 	cmp.w	r9, #0
 800d194:	f43f af0f 	beq.w	800cfb6 <_scanf_float+0x6e>
 800d198:	0591      	lsls	r1, r2, #22
 800d19a:	bf58      	it	pl
 800d19c:	9901      	ldrpl	r1, [sp, #4]
 800d19e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d1a2:	bf58      	it	pl
 800d1a4:	eba9 0101 	subpl.w	r1, r9, r1
 800d1a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d1ac:	bf58      	it	pl
 800d1ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d1b2:	6022      	str	r2, [r4, #0]
 800d1b4:	f04f 0900 	mov.w	r9, #0
 800d1b8:	e78a      	b.n	800d0d0 <_scanf_float+0x188>
 800d1ba:	f04f 0a03 	mov.w	sl, #3
 800d1be:	e787      	b.n	800d0d0 <_scanf_float+0x188>
 800d1c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d1c4:	4639      	mov	r1, r7
 800d1c6:	4640      	mov	r0, r8
 800d1c8:	4798      	blx	r3
 800d1ca:	2800      	cmp	r0, #0
 800d1cc:	f43f aedf 	beq.w	800cf8e <_scanf_float+0x46>
 800d1d0:	e6ea      	b.n	800cfa8 <_scanf_float+0x60>
 800d1d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d1d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d1da:	463a      	mov	r2, r7
 800d1dc:	4640      	mov	r0, r8
 800d1de:	4798      	blx	r3
 800d1e0:	6923      	ldr	r3, [r4, #16]
 800d1e2:	3b01      	subs	r3, #1
 800d1e4:	6123      	str	r3, [r4, #16]
 800d1e6:	e6ec      	b.n	800cfc2 <_scanf_float+0x7a>
 800d1e8:	1e6b      	subs	r3, r5, #1
 800d1ea:	2b06      	cmp	r3, #6
 800d1ec:	d825      	bhi.n	800d23a <_scanf_float+0x2f2>
 800d1ee:	2d02      	cmp	r5, #2
 800d1f0:	d836      	bhi.n	800d260 <_scanf_float+0x318>
 800d1f2:	455e      	cmp	r6, fp
 800d1f4:	f67f aee8 	bls.w	800cfc8 <_scanf_float+0x80>
 800d1f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d1fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d200:	463a      	mov	r2, r7
 800d202:	4640      	mov	r0, r8
 800d204:	4798      	blx	r3
 800d206:	6923      	ldr	r3, [r4, #16]
 800d208:	3b01      	subs	r3, #1
 800d20a:	6123      	str	r3, [r4, #16]
 800d20c:	e7f1      	b.n	800d1f2 <_scanf_float+0x2aa>
 800d20e:	9802      	ldr	r0, [sp, #8]
 800d210:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d214:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d218:	9002      	str	r0, [sp, #8]
 800d21a:	463a      	mov	r2, r7
 800d21c:	4640      	mov	r0, r8
 800d21e:	4798      	blx	r3
 800d220:	6923      	ldr	r3, [r4, #16]
 800d222:	3b01      	subs	r3, #1
 800d224:	6123      	str	r3, [r4, #16]
 800d226:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d22a:	fa5f fa8a 	uxtb.w	sl, sl
 800d22e:	f1ba 0f02 	cmp.w	sl, #2
 800d232:	d1ec      	bne.n	800d20e <_scanf_float+0x2c6>
 800d234:	3d03      	subs	r5, #3
 800d236:	b2ed      	uxtb	r5, r5
 800d238:	1b76      	subs	r6, r6, r5
 800d23a:	6823      	ldr	r3, [r4, #0]
 800d23c:	05da      	lsls	r2, r3, #23
 800d23e:	d52f      	bpl.n	800d2a0 <_scanf_float+0x358>
 800d240:	055b      	lsls	r3, r3, #21
 800d242:	d510      	bpl.n	800d266 <_scanf_float+0x31e>
 800d244:	455e      	cmp	r6, fp
 800d246:	f67f aebf 	bls.w	800cfc8 <_scanf_float+0x80>
 800d24a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d24e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d252:	463a      	mov	r2, r7
 800d254:	4640      	mov	r0, r8
 800d256:	4798      	blx	r3
 800d258:	6923      	ldr	r3, [r4, #16]
 800d25a:	3b01      	subs	r3, #1
 800d25c:	6123      	str	r3, [r4, #16]
 800d25e:	e7f1      	b.n	800d244 <_scanf_float+0x2fc>
 800d260:	46aa      	mov	sl, r5
 800d262:	9602      	str	r6, [sp, #8]
 800d264:	e7df      	b.n	800d226 <_scanf_float+0x2de>
 800d266:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d26a:	6923      	ldr	r3, [r4, #16]
 800d26c:	2965      	cmp	r1, #101	; 0x65
 800d26e:	f103 33ff 	add.w	r3, r3, #4294967295
 800d272:	f106 35ff 	add.w	r5, r6, #4294967295
 800d276:	6123      	str	r3, [r4, #16]
 800d278:	d00c      	beq.n	800d294 <_scanf_float+0x34c>
 800d27a:	2945      	cmp	r1, #69	; 0x45
 800d27c:	d00a      	beq.n	800d294 <_scanf_float+0x34c>
 800d27e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d282:	463a      	mov	r2, r7
 800d284:	4640      	mov	r0, r8
 800d286:	4798      	blx	r3
 800d288:	6923      	ldr	r3, [r4, #16]
 800d28a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d28e:	3b01      	subs	r3, #1
 800d290:	1eb5      	subs	r5, r6, #2
 800d292:	6123      	str	r3, [r4, #16]
 800d294:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d298:	463a      	mov	r2, r7
 800d29a:	4640      	mov	r0, r8
 800d29c:	4798      	blx	r3
 800d29e:	462e      	mov	r6, r5
 800d2a0:	6825      	ldr	r5, [r4, #0]
 800d2a2:	f015 0510 	ands.w	r5, r5, #16
 800d2a6:	d159      	bne.n	800d35c <_scanf_float+0x414>
 800d2a8:	7035      	strb	r5, [r6, #0]
 800d2aa:	6823      	ldr	r3, [r4, #0]
 800d2ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d2b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2b4:	d11b      	bne.n	800d2ee <_scanf_float+0x3a6>
 800d2b6:	9b01      	ldr	r3, [sp, #4]
 800d2b8:	454b      	cmp	r3, r9
 800d2ba:	eba3 0209 	sub.w	r2, r3, r9
 800d2be:	d123      	bne.n	800d308 <_scanf_float+0x3c0>
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	4659      	mov	r1, fp
 800d2c4:	4640      	mov	r0, r8
 800d2c6:	f000 fe99 	bl	800dffc <_strtod_r>
 800d2ca:	6822      	ldr	r2, [r4, #0]
 800d2cc:	9b03      	ldr	r3, [sp, #12]
 800d2ce:	f012 0f02 	tst.w	r2, #2
 800d2d2:	ec57 6b10 	vmov	r6, r7, d0
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	d021      	beq.n	800d31e <_scanf_float+0x3d6>
 800d2da:	9903      	ldr	r1, [sp, #12]
 800d2dc:	1d1a      	adds	r2, r3, #4
 800d2de:	600a      	str	r2, [r1, #0]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	e9c3 6700 	strd	r6, r7, [r3]
 800d2e6:	68e3      	ldr	r3, [r4, #12]
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	60e3      	str	r3, [r4, #12]
 800d2ec:	e66d      	b.n	800cfca <_scanf_float+0x82>
 800d2ee:	9b04      	ldr	r3, [sp, #16]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d0e5      	beq.n	800d2c0 <_scanf_float+0x378>
 800d2f4:	9905      	ldr	r1, [sp, #20]
 800d2f6:	230a      	movs	r3, #10
 800d2f8:	462a      	mov	r2, r5
 800d2fa:	3101      	adds	r1, #1
 800d2fc:	4640      	mov	r0, r8
 800d2fe:	f000 ff05 	bl	800e10c <_strtol_r>
 800d302:	9b04      	ldr	r3, [sp, #16]
 800d304:	9e05      	ldr	r6, [sp, #20]
 800d306:	1ac2      	subs	r2, r0, r3
 800d308:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d30c:	429e      	cmp	r6, r3
 800d30e:	bf28      	it	cs
 800d310:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d314:	4912      	ldr	r1, [pc, #72]	; (800d360 <_scanf_float+0x418>)
 800d316:	4630      	mov	r0, r6
 800d318:	f000 f82c 	bl	800d374 <siprintf>
 800d31c:	e7d0      	b.n	800d2c0 <_scanf_float+0x378>
 800d31e:	9903      	ldr	r1, [sp, #12]
 800d320:	f012 0f04 	tst.w	r2, #4
 800d324:	f103 0204 	add.w	r2, r3, #4
 800d328:	600a      	str	r2, [r1, #0]
 800d32a:	d1d9      	bne.n	800d2e0 <_scanf_float+0x398>
 800d32c:	f8d3 8000 	ldr.w	r8, [r3]
 800d330:	ee10 2a10 	vmov	r2, s0
 800d334:	ee10 0a10 	vmov	r0, s0
 800d338:	463b      	mov	r3, r7
 800d33a:	4639      	mov	r1, r7
 800d33c:	f7f3 fbfe 	bl	8000b3c <__aeabi_dcmpun>
 800d340:	b128      	cbz	r0, 800d34e <_scanf_float+0x406>
 800d342:	4808      	ldr	r0, [pc, #32]	; (800d364 <_scanf_float+0x41c>)
 800d344:	f000 f810 	bl	800d368 <nanf>
 800d348:	ed88 0a00 	vstr	s0, [r8]
 800d34c:	e7cb      	b.n	800d2e6 <_scanf_float+0x39e>
 800d34e:	4630      	mov	r0, r6
 800d350:	4639      	mov	r1, r7
 800d352:	f7f3 fc51 	bl	8000bf8 <__aeabi_d2f>
 800d356:	f8c8 0000 	str.w	r0, [r8]
 800d35a:	e7c4      	b.n	800d2e6 <_scanf_float+0x39e>
 800d35c:	2500      	movs	r5, #0
 800d35e:	e634      	b.n	800cfca <_scanf_float+0x82>
 800d360:	08011254 	.word	0x08011254
 800d364:	08011660 	.word	0x08011660

0800d368 <nanf>:
 800d368:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d370 <nanf+0x8>
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop
 800d370:	7fc00000 	.word	0x7fc00000

0800d374 <siprintf>:
 800d374:	b40e      	push	{r1, r2, r3}
 800d376:	b500      	push	{lr}
 800d378:	b09c      	sub	sp, #112	; 0x70
 800d37a:	ab1d      	add	r3, sp, #116	; 0x74
 800d37c:	9002      	str	r0, [sp, #8]
 800d37e:	9006      	str	r0, [sp, #24]
 800d380:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d384:	4809      	ldr	r0, [pc, #36]	; (800d3ac <siprintf+0x38>)
 800d386:	9107      	str	r1, [sp, #28]
 800d388:	9104      	str	r1, [sp, #16]
 800d38a:	4909      	ldr	r1, [pc, #36]	; (800d3b0 <siprintf+0x3c>)
 800d38c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d390:	9105      	str	r1, [sp, #20]
 800d392:	6800      	ldr	r0, [r0, #0]
 800d394:	9301      	str	r3, [sp, #4]
 800d396:	a902      	add	r1, sp, #8
 800d398:	f002 fed6 	bl	8010148 <_svfiprintf_r>
 800d39c:	9b02      	ldr	r3, [sp, #8]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	701a      	strb	r2, [r3, #0]
 800d3a2:	b01c      	add	sp, #112	; 0x70
 800d3a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3a8:	b003      	add	sp, #12
 800d3aa:	4770      	bx	lr
 800d3ac:	2000025c 	.word	0x2000025c
 800d3b0:	ffff0208 	.word	0xffff0208

0800d3b4 <sulp>:
 800d3b4:	b570      	push	{r4, r5, r6, lr}
 800d3b6:	4604      	mov	r4, r0
 800d3b8:	460d      	mov	r5, r1
 800d3ba:	ec45 4b10 	vmov	d0, r4, r5
 800d3be:	4616      	mov	r6, r2
 800d3c0:	f002 fc20 	bl	800fc04 <__ulp>
 800d3c4:	ec51 0b10 	vmov	r0, r1, d0
 800d3c8:	b17e      	cbz	r6, 800d3ea <sulp+0x36>
 800d3ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d3ce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	dd09      	ble.n	800d3ea <sulp+0x36>
 800d3d6:	051b      	lsls	r3, r3, #20
 800d3d8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d3dc:	2400      	movs	r4, #0
 800d3de:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d3e2:	4622      	mov	r2, r4
 800d3e4:	462b      	mov	r3, r5
 800d3e6:	f7f3 f90f 	bl	8000608 <__aeabi_dmul>
 800d3ea:	bd70      	pop	{r4, r5, r6, pc}
 800d3ec:	0000      	movs	r0, r0
	...

0800d3f0 <_strtod_l>:
 800d3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f4:	ed2d 8b02 	vpush	{d8}
 800d3f8:	b09d      	sub	sp, #116	; 0x74
 800d3fa:	461f      	mov	r7, r3
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	9318      	str	r3, [sp, #96]	; 0x60
 800d400:	4ba2      	ldr	r3, [pc, #648]	; (800d68c <_strtod_l+0x29c>)
 800d402:	9213      	str	r2, [sp, #76]	; 0x4c
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	9305      	str	r3, [sp, #20]
 800d408:	4604      	mov	r4, r0
 800d40a:	4618      	mov	r0, r3
 800d40c:	4688      	mov	r8, r1
 800d40e:	f7f2 fee7 	bl	80001e0 <strlen>
 800d412:	f04f 0a00 	mov.w	sl, #0
 800d416:	4605      	mov	r5, r0
 800d418:	f04f 0b00 	mov.w	fp, #0
 800d41c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d420:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d422:	781a      	ldrb	r2, [r3, #0]
 800d424:	2a2b      	cmp	r2, #43	; 0x2b
 800d426:	d04e      	beq.n	800d4c6 <_strtod_l+0xd6>
 800d428:	d83b      	bhi.n	800d4a2 <_strtod_l+0xb2>
 800d42a:	2a0d      	cmp	r2, #13
 800d42c:	d834      	bhi.n	800d498 <_strtod_l+0xa8>
 800d42e:	2a08      	cmp	r2, #8
 800d430:	d834      	bhi.n	800d49c <_strtod_l+0xac>
 800d432:	2a00      	cmp	r2, #0
 800d434:	d03e      	beq.n	800d4b4 <_strtod_l+0xc4>
 800d436:	2300      	movs	r3, #0
 800d438:	930a      	str	r3, [sp, #40]	; 0x28
 800d43a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d43c:	7833      	ldrb	r3, [r6, #0]
 800d43e:	2b30      	cmp	r3, #48	; 0x30
 800d440:	f040 80b0 	bne.w	800d5a4 <_strtod_l+0x1b4>
 800d444:	7873      	ldrb	r3, [r6, #1]
 800d446:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d44a:	2b58      	cmp	r3, #88	; 0x58
 800d44c:	d168      	bne.n	800d520 <_strtod_l+0x130>
 800d44e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d450:	9301      	str	r3, [sp, #4]
 800d452:	ab18      	add	r3, sp, #96	; 0x60
 800d454:	9702      	str	r7, [sp, #8]
 800d456:	9300      	str	r3, [sp, #0]
 800d458:	4a8d      	ldr	r2, [pc, #564]	; (800d690 <_strtod_l+0x2a0>)
 800d45a:	ab19      	add	r3, sp, #100	; 0x64
 800d45c:	a917      	add	r1, sp, #92	; 0x5c
 800d45e:	4620      	mov	r0, r4
 800d460:	f001 fd38 	bl	800eed4 <__gethex>
 800d464:	f010 0707 	ands.w	r7, r0, #7
 800d468:	4605      	mov	r5, r0
 800d46a:	d005      	beq.n	800d478 <_strtod_l+0x88>
 800d46c:	2f06      	cmp	r7, #6
 800d46e:	d12c      	bne.n	800d4ca <_strtod_l+0xda>
 800d470:	3601      	adds	r6, #1
 800d472:	2300      	movs	r3, #0
 800d474:	9617      	str	r6, [sp, #92]	; 0x5c
 800d476:	930a      	str	r3, [sp, #40]	; 0x28
 800d478:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f040 8590 	bne.w	800dfa0 <_strtod_l+0xbb0>
 800d480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d482:	b1eb      	cbz	r3, 800d4c0 <_strtod_l+0xd0>
 800d484:	4652      	mov	r2, sl
 800d486:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d48a:	ec43 2b10 	vmov	d0, r2, r3
 800d48e:	b01d      	add	sp, #116	; 0x74
 800d490:	ecbd 8b02 	vpop	{d8}
 800d494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d498:	2a20      	cmp	r2, #32
 800d49a:	d1cc      	bne.n	800d436 <_strtod_l+0x46>
 800d49c:	3301      	adds	r3, #1
 800d49e:	9317      	str	r3, [sp, #92]	; 0x5c
 800d4a0:	e7be      	b.n	800d420 <_strtod_l+0x30>
 800d4a2:	2a2d      	cmp	r2, #45	; 0x2d
 800d4a4:	d1c7      	bne.n	800d436 <_strtod_l+0x46>
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	920a      	str	r2, [sp, #40]	; 0x28
 800d4aa:	1c5a      	adds	r2, r3, #1
 800d4ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800d4ae:	785b      	ldrb	r3, [r3, #1]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d1c2      	bne.n	800d43a <_strtod_l+0x4a>
 800d4b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d4b6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	f040 856e 	bne.w	800df9c <_strtod_l+0xbac>
 800d4c0:	4652      	mov	r2, sl
 800d4c2:	465b      	mov	r3, fp
 800d4c4:	e7e1      	b.n	800d48a <_strtod_l+0x9a>
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	e7ee      	b.n	800d4a8 <_strtod_l+0xb8>
 800d4ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d4cc:	b13a      	cbz	r2, 800d4de <_strtod_l+0xee>
 800d4ce:	2135      	movs	r1, #53	; 0x35
 800d4d0:	a81a      	add	r0, sp, #104	; 0x68
 800d4d2:	f002 fca2 	bl	800fe1a <__copybits>
 800d4d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d4d8:	4620      	mov	r0, r4
 800d4da:	f002 f861 	bl	800f5a0 <_Bfree>
 800d4de:	3f01      	subs	r7, #1
 800d4e0:	2f04      	cmp	r7, #4
 800d4e2:	d806      	bhi.n	800d4f2 <_strtod_l+0x102>
 800d4e4:	e8df f007 	tbb	[pc, r7]
 800d4e8:	1714030a 	.word	0x1714030a
 800d4ec:	0a          	.byte	0x0a
 800d4ed:	00          	.byte	0x00
 800d4ee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d4f2:	0728      	lsls	r0, r5, #28
 800d4f4:	d5c0      	bpl.n	800d478 <_strtod_l+0x88>
 800d4f6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d4fa:	e7bd      	b.n	800d478 <_strtod_l+0x88>
 800d4fc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d500:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d502:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d506:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d50a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d50e:	e7f0      	b.n	800d4f2 <_strtod_l+0x102>
 800d510:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d694 <_strtod_l+0x2a4>
 800d514:	e7ed      	b.n	800d4f2 <_strtod_l+0x102>
 800d516:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d51a:	f04f 3aff 	mov.w	sl, #4294967295
 800d51e:	e7e8      	b.n	800d4f2 <_strtod_l+0x102>
 800d520:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d522:	1c5a      	adds	r2, r3, #1
 800d524:	9217      	str	r2, [sp, #92]	; 0x5c
 800d526:	785b      	ldrb	r3, [r3, #1]
 800d528:	2b30      	cmp	r3, #48	; 0x30
 800d52a:	d0f9      	beq.n	800d520 <_strtod_l+0x130>
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d0a3      	beq.n	800d478 <_strtod_l+0x88>
 800d530:	2301      	movs	r3, #1
 800d532:	f04f 0900 	mov.w	r9, #0
 800d536:	9304      	str	r3, [sp, #16]
 800d538:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d53a:	9308      	str	r3, [sp, #32]
 800d53c:	f8cd 901c 	str.w	r9, [sp, #28]
 800d540:	464f      	mov	r7, r9
 800d542:	220a      	movs	r2, #10
 800d544:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d546:	7806      	ldrb	r6, [r0, #0]
 800d548:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d54c:	b2d9      	uxtb	r1, r3
 800d54e:	2909      	cmp	r1, #9
 800d550:	d92a      	bls.n	800d5a8 <_strtod_l+0x1b8>
 800d552:	9905      	ldr	r1, [sp, #20]
 800d554:	462a      	mov	r2, r5
 800d556:	f002 ff0f 	bl	8010378 <strncmp>
 800d55a:	b398      	cbz	r0, 800d5c4 <_strtod_l+0x1d4>
 800d55c:	2000      	movs	r0, #0
 800d55e:	4632      	mov	r2, r6
 800d560:	463d      	mov	r5, r7
 800d562:	9005      	str	r0, [sp, #20]
 800d564:	4603      	mov	r3, r0
 800d566:	2a65      	cmp	r2, #101	; 0x65
 800d568:	d001      	beq.n	800d56e <_strtod_l+0x17e>
 800d56a:	2a45      	cmp	r2, #69	; 0x45
 800d56c:	d118      	bne.n	800d5a0 <_strtod_l+0x1b0>
 800d56e:	b91d      	cbnz	r5, 800d578 <_strtod_l+0x188>
 800d570:	9a04      	ldr	r2, [sp, #16]
 800d572:	4302      	orrs	r2, r0
 800d574:	d09e      	beq.n	800d4b4 <_strtod_l+0xc4>
 800d576:	2500      	movs	r5, #0
 800d578:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d57c:	f108 0201 	add.w	r2, r8, #1
 800d580:	9217      	str	r2, [sp, #92]	; 0x5c
 800d582:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d586:	2a2b      	cmp	r2, #43	; 0x2b
 800d588:	d075      	beq.n	800d676 <_strtod_l+0x286>
 800d58a:	2a2d      	cmp	r2, #45	; 0x2d
 800d58c:	d07b      	beq.n	800d686 <_strtod_l+0x296>
 800d58e:	f04f 0c00 	mov.w	ip, #0
 800d592:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d596:	2909      	cmp	r1, #9
 800d598:	f240 8082 	bls.w	800d6a0 <_strtod_l+0x2b0>
 800d59c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d5a0:	2600      	movs	r6, #0
 800d5a2:	e09d      	b.n	800d6e0 <_strtod_l+0x2f0>
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	e7c4      	b.n	800d532 <_strtod_l+0x142>
 800d5a8:	2f08      	cmp	r7, #8
 800d5aa:	bfd8      	it	le
 800d5ac:	9907      	ldrle	r1, [sp, #28]
 800d5ae:	f100 0001 	add.w	r0, r0, #1
 800d5b2:	bfda      	itte	le
 800d5b4:	fb02 3301 	mlale	r3, r2, r1, r3
 800d5b8:	9307      	strle	r3, [sp, #28]
 800d5ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d5be:	3701      	adds	r7, #1
 800d5c0:	9017      	str	r0, [sp, #92]	; 0x5c
 800d5c2:	e7bf      	b.n	800d544 <_strtod_l+0x154>
 800d5c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5c6:	195a      	adds	r2, r3, r5
 800d5c8:	9217      	str	r2, [sp, #92]	; 0x5c
 800d5ca:	5d5a      	ldrb	r2, [r3, r5]
 800d5cc:	2f00      	cmp	r7, #0
 800d5ce:	d037      	beq.n	800d640 <_strtod_l+0x250>
 800d5d0:	9005      	str	r0, [sp, #20]
 800d5d2:	463d      	mov	r5, r7
 800d5d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d5d8:	2b09      	cmp	r3, #9
 800d5da:	d912      	bls.n	800d602 <_strtod_l+0x212>
 800d5dc:	2301      	movs	r3, #1
 800d5de:	e7c2      	b.n	800d566 <_strtod_l+0x176>
 800d5e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5e2:	1c5a      	adds	r2, r3, #1
 800d5e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800d5e6:	785a      	ldrb	r2, [r3, #1]
 800d5e8:	3001      	adds	r0, #1
 800d5ea:	2a30      	cmp	r2, #48	; 0x30
 800d5ec:	d0f8      	beq.n	800d5e0 <_strtod_l+0x1f0>
 800d5ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d5f2:	2b08      	cmp	r3, #8
 800d5f4:	f200 84d9 	bhi.w	800dfaa <_strtod_l+0xbba>
 800d5f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5fa:	9005      	str	r0, [sp, #20]
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	9308      	str	r3, [sp, #32]
 800d600:	4605      	mov	r5, r0
 800d602:	3a30      	subs	r2, #48	; 0x30
 800d604:	f100 0301 	add.w	r3, r0, #1
 800d608:	d014      	beq.n	800d634 <_strtod_l+0x244>
 800d60a:	9905      	ldr	r1, [sp, #20]
 800d60c:	4419      	add	r1, r3
 800d60e:	9105      	str	r1, [sp, #20]
 800d610:	462b      	mov	r3, r5
 800d612:	eb00 0e05 	add.w	lr, r0, r5
 800d616:	210a      	movs	r1, #10
 800d618:	4573      	cmp	r3, lr
 800d61a:	d113      	bne.n	800d644 <_strtod_l+0x254>
 800d61c:	182b      	adds	r3, r5, r0
 800d61e:	2b08      	cmp	r3, #8
 800d620:	f105 0501 	add.w	r5, r5, #1
 800d624:	4405      	add	r5, r0
 800d626:	dc1c      	bgt.n	800d662 <_strtod_l+0x272>
 800d628:	9907      	ldr	r1, [sp, #28]
 800d62a:	230a      	movs	r3, #10
 800d62c:	fb03 2301 	mla	r3, r3, r1, r2
 800d630:	9307      	str	r3, [sp, #28]
 800d632:	2300      	movs	r3, #0
 800d634:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d636:	1c51      	adds	r1, r2, #1
 800d638:	9117      	str	r1, [sp, #92]	; 0x5c
 800d63a:	7852      	ldrb	r2, [r2, #1]
 800d63c:	4618      	mov	r0, r3
 800d63e:	e7c9      	b.n	800d5d4 <_strtod_l+0x1e4>
 800d640:	4638      	mov	r0, r7
 800d642:	e7d2      	b.n	800d5ea <_strtod_l+0x1fa>
 800d644:	2b08      	cmp	r3, #8
 800d646:	dc04      	bgt.n	800d652 <_strtod_l+0x262>
 800d648:	9e07      	ldr	r6, [sp, #28]
 800d64a:	434e      	muls	r6, r1
 800d64c:	9607      	str	r6, [sp, #28]
 800d64e:	3301      	adds	r3, #1
 800d650:	e7e2      	b.n	800d618 <_strtod_l+0x228>
 800d652:	f103 0c01 	add.w	ip, r3, #1
 800d656:	f1bc 0f10 	cmp.w	ip, #16
 800d65a:	bfd8      	it	le
 800d65c:	fb01 f909 	mulle.w	r9, r1, r9
 800d660:	e7f5      	b.n	800d64e <_strtod_l+0x25e>
 800d662:	2d10      	cmp	r5, #16
 800d664:	bfdc      	itt	le
 800d666:	230a      	movle	r3, #10
 800d668:	fb03 2909 	mlale	r9, r3, r9, r2
 800d66c:	e7e1      	b.n	800d632 <_strtod_l+0x242>
 800d66e:	2300      	movs	r3, #0
 800d670:	9305      	str	r3, [sp, #20]
 800d672:	2301      	movs	r3, #1
 800d674:	e77c      	b.n	800d570 <_strtod_l+0x180>
 800d676:	f04f 0c00 	mov.w	ip, #0
 800d67a:	f108 0202 	add.w	r2, r8, #2
 800d67e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d680:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d684:	e785      	b.n	800d592 <_strtod_l+0x1a2>
 800d686:	f04f 0c01 	mov.w	ip, #1
 800d68a:	e7f6      	b.n	800d67a <_strtod_l+0x28a>
 800d68c:	080114a8 	.word	0x080114a8
 800d690:	0801125c 	.word	0x0801125c
 800d694:	7ff00000 	.word	0x7ff00000
 800d698:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d69a:	1c51      	adds	r1, r2, #1
 800d69c:	9117      	str	r1, [sp, #92]	; 0x5c
 800d69e:	7852      	ldrb	r2, [r2, #1]
 800d6a0:	2a30      	cmp	r2, #48	; 0x30
 800d6a2:	d0f9      	beq.n	800d698 <_strtod_l+0x2a8>
 800d6a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d6a8:	2908      	cmp	r1, #8
 800d6aa:	f63f af79 	bhi.w	800d5a0 <_strtod_l+0x1b0>
 800d6ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d6b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d6b4:	9206      	str	r2, [sp, #24]
 800d6b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d6b8:	1c51      	adds	r1, r2, #1
 800d6ba:	9117      	str	r1, [sp, #92]	; 0x5c
 800d6bc:	7852      	ldrb	r2, [r2, #1]
 800d6be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d6c2:	2e09      	cmp	r6, #9
 800d6c4:	d937      	bls.n	800d736 <_strtod_l+0x346>
 800d6c6:	9e06      	ldr	r6, [sp, #24]
 800d6c8:	1b89      	subs	r1, r1, r6
 800d6ca:	2908      	cmp	r1, #8
 800d6cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d6d0:	dc02      	bgt.n	800d6d8 <_strtod_l+0x2e8>
 800d6d2:	4576      	cmp	r6, lr
 800d6d4:	bfa8      	it	ge
 800d6d6:	4676      	movge	r6, lr
 800d6d8:	f1bc 0f00 	cmp.w	ip, #0
 800d6dc:	d000      	beq.n	800d6e0 <_strtod_l+0x2f0>
 800d6de:	4276      	negs	r6, r6
 800d6e0:	2d00      	cmp	r5, #0
 800d6e2:	d14d      	bne.n	800d780 <_strtod_l+0x390>
 800d6e4:	9904      	ldr	r1, [sp, #16]
 800d6e6:	4301      	orrs	r1, r0
 800d6e8:	f47f aec6 	bne.w	800d478 <_strtod_l+0x88>
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	f47f aee1 	bne.w	800d4b4 <_strtod_l+0xc4>
 800d6f2:	2a69      	cmp	r2, #105	; 0x69
 800d6f4:	d027      	beq.n	800d746 <_strtod_l+0x356>
 800d6f6:	dc24      	bgt.n	800d742 <_strtod_l+0x352>
 800d6f8:	2a49      	cmp	r2, #73	; 0x49
 800d6fa:	d024      	beq.n	800d746 <_strtod_l+0x356>
 800d6fc:	2a4e      	cmp	r2, #78	; 0x4e
 800d6fe:	f47f aed9 	bne.w	800d4b4 <_strtod_l+0xc4>
 800d702:	499f      	ldr	r1, [pc, #636]	; (800d980 <_strtod_l+0x590>)
 800d704:	a817      	add	r0, sp, #92	; 0x5c
 800d706:	f001 fe3d 	bl	800f384 <__match>
 800d70a:	2800      	cmp	r0, #0
 800d70c:	f43f aed2 	beq.w	800d4b4 <_strtod_l+0xc4>
 800d710:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	2b28      	cmp	r3, #40	; 0x28
 800d716:	d12d      	bne.n	800d774 <_strtod_l+0x384>
 800d718:	499a      	ldr	r1, [pc, #616]	; (800d984 <_strtod_l+0x594>)
 800d71a:	aa1a      	add	r2, sp, #104	; 0x68
 800d71c:	a817      	add	r0, sp, #92	; 0x5c
 800d71e:	f001 fe45 	bl	800f3ac <__hexnan>
 800d722:	2805      	cmp	r0, #5
 800d724:	d126      	bne.n	800d774 <_strtod_l+0x384>
 800d726:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d728:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d72c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d730:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d734:	e6a0      	b.n	800d478 <_strtod_l+0x88>
 800d736:	210a      	movs	r1, #10
 800d738:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d73c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d740:	e7b9      	b.n	800d6b6 <_strtod_l+0x2c6>
 800d742:	2a6e      	cmp	r2, #110	; 0x6e
 800d744:	e7db      	b.n	800d6fe <_strtod_l+0x30e>
 800d746:	4990      	ldr	r1, [pc, #576]	; (800d988 <_strtod_l+0x598>)
 800d748:	a817      	add	r0, sp, #92	; 0x5c
 800d74a:	f001 fe1b 	bl	800f384 <__match>
 800d74e:	2800      	cmp	r0, #0
 800d750:	f43f aeb0 	beq.w	800d4b4 <_strtod_l+0xc4>
 800d754:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d756:	498d      	ldr	r1, [pc, #564]	; (800d98c <_strtod_l+0x59c>)
 800d758:	3b01      	subs	r3, #1
 800d75a:	a817      	add	r0, sp, #92	; 0x5c
 800d75c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d75e:	f001 fe11 	bl	800f384 <__match>
 800d762:	b910      	cbnz	r0, 800d76a <_strtod_l+0x37a>
 800d764:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d766:	3301      	adds	r3, #1
 800d768:	9317      	str	r3, [sp, #92]	; 0x5c
 800d76a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d99c <_strtod_l+0x5ac>
 800d76e:	f04f 0a00 	mov.w	sl, #0
 800d772:	e681      	b.n	800d478 <_strtod_l+0x88>
 800d774:	4886      	ldr	r0, [pc, #536]	; (800d990 <_strtod_l+0x5a0>)
 800d776:	f002 fde7 	bl	8010348 <nan>
 800d77a:	ec5b ab10 	vmov	sl, fp, d0
 800d77e:	e67b      	b.n	800d478 <_strtod_l+0x88>
 800d780:	9b05      	ldr	r3, [sp, #20]
 800d782:	9807      	ldr	r0, [sp, #28]
 800d784:	1af3      	subs	r3, r6, r3
 800d786:	2f00      	cmp	r7, #0
 800d788:	bf08      	it	eq
 800d78a:	462f      	moveq	r7, r5
 800d78c:	2d10      	cmp	r5, #16
 800d78e:	9306      	str	r3, [sp, #24]
 800d790:	46a8      	mov	r8, r5
 800d792:	bfa8      	it	ge
 800d794:	f04f 0810 	movge.w	r8, #16
 800d798:	f7f2 febc 	bl	8000514 <__aeabi_ui2d>
 800d79c:	2d09      	cmp	r5, #9
 800d79e:	4682      	mov	sl, r0
 800d7a0:	468b      	mov	fp, r1
 800d7a2:	dd13      	ble.n	800d7cc <_strtod_l+0x3dc>
 800d7a4:	4b7b      	ldr	r3, [pc, #492]	; (800d994 <_strtod_l+0x5a4>)
 800d7a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d7aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d7ae:	f7f2 ff2b 	bl	8000608 <__aeabi_dmul>
 800d7b2:	4682      	mov	sl, r0
 800d7b4:	4648      	mov	r0, r9
 800d7b6:	468b      	mov	fp, r1
 800d7b8:	f7f2 feac 	bl	8000514 <__aeabi_ui2d>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	460b      	mov	r3, r1
 800d7c0:	4650      	mov	r0, sl
 800d7c2:	4659      	mov	r1, fp
 800d7c4:	f7f2 fd6a 	bl	800029c <__adddf3>
 800d7c8:	4682      	mov	sl, r0
 800d7ca:	468b      	mov	fp, r1
 800d7cc:	2d0f      	cmp	r5, #15
 800d7ce:	dc38      	bgt.n	800d842 <_strtod_l+0x452>
 800d7d0:	9b06      	ldr	r3, [sp, #24]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f43f ae50 	beq.w	800d478 <_strtod_l+0x88>
 800d7d8:	dd24      	ble.n	800d824 <_strtod_l+0x434>
 800d7da:	2b16      	cmp	r3, #22
 800d7dc:	dc0b      	bgt.n	800d7f6 <_strtod_l+0x406>
 800d7de:	496d      	ldr	r1, [pc, #436]	; (800d994 <_strtod_l+0x5a4>)
 800d7e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d7e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7e8:	4652      	mov	r2, sl
 800d7ea:	465b      	mov	r3, fp
 800d7ec:	f7f2 ff0c 	bl	8000608 <__aeabi_dmul>
 800d7f0:	4682      	mov	sl, r0
 800d7f2:	468b      	mov	fp, r1
 800d7f4:	e640      	b.n	800d478 <_strtod_l+0x88>
 800d7f6:	9a06      	ldr	r2, [sp, #24]
 800d7f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	db20      	blt.n	800d842 <_strtod_l+0x452>
 800d800:	4c64      	ldr	r4, [pc, #400]	; (800d994 <_strtod_l+0x5a4>)
 800d802:	f1c5 050f 	rsb	r5, r5, #15
 800d806:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d80a:	4652      	mov	r2, sl
 800d80c:	465b      	mov	r3, fp
 800d80e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d812:	f7f2 fef9 	bl	8000608 <__aeabi_dmul>
 800d816:	9b06      	ldr	r3, [sp, #24]
 800d818:	1b5d      	subs	r5, r3, r5
 800d81a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d81e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d822:	e7e3      	b.n	800d7ec <_strtod_l+0x3fc>
 800d824:	9b06      	ldr	r3, [sp, #24]
 800d826:	3316      	adds	r3, #22
 800d828:	db0b      	blt.n	800d842 <_strtod_l+0x452>
 800d82a:	9b05      	ldr	r3, [sp, #20]
 800d82c:	1b9e      	subs	r6, r3, r6
 800d82e:	4b59      	ldr	r3, [pc, #356]	; (800d994 <_strtod_l+0x5a4>)
 800d830:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d834:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d838:	4650      	mov	r0, sl
 800d83a:	4659      	mov	r1, fp
 800d83c:	f7f3 f80e 	bl	800085c <__aeabi_ddiv>
 800d840:	e7d6      	b.n	800d7f0 <_strtod_l+0x400>
 800d842:	9b06      	ldr	r3, [sp, #24]
 800d844:	eba5 0808 	sub.w	r8, r5, r8
 800d848:	4498      	add	r8, r3
 800d84a:	f1b8 0f00 	cmp.w	r8, #0
 800d84e:	dd74      	ble.n	800d93a <_strtod_l+0x54a>
 800d850:	f018 030f 	ands.w	r3, r8, #15
 800d854:	d00a      	beq.n	800d86c <_strtod_l+0x47c>
 800d856:	494f      	ldr	r1, [pc, #316]	; (800d994 <_strtod_l+0x5a4>)
 800d858:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d85c:	4652      	mov	r2, sl
 800d85e:	465b      	mov	r3, fp
 800d860:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d864:	f7f2 fed0 	bl	8000608 <__aeabi_dmul>
 800d868:	4682      	mov	sl, r0
 800d86a:	468b      	mov	fp, r1
 800d86c:	f038 080f 	bics.w	r8, r8, #15
 800d870:	d04f      	beq.n	800d912 <_strtod_l+0x522>
 800d872:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d876:	dd22      	ble.n	800d8be <_strtod_l+0x4ce>
 800d878:	2500      	movs	r5, #0
 800d87a:	462e      	mov	r6, r5
 800d87c:	9507      	str	r5, [sp, #28]
 800d87e:	9505      	str	r5, [sp, #20]
 800d880:	2322      	movs	r3, #34	; 0x22
 800d882:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d99c <_strtod_l+0x5ac>
 800d886:	6023      	str	r3, [r4, #0]
 800d888:	f04f 0a00 	mov.w	sl, #0
 800d88c:	9b07      	ldr	r3, [sp, #28]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	f43f adf2 	beq.w	800d478 <_strtod_l+0x88>
 800d894:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d896:	4620      	mov	r0, r4
 800d898:	f001 fe82 	bl	800f5a0 <_Bfree>
 800d89c:	9905      	ldr	r1, [sp, #20]
 800d89e:	4620      	mov	r0, r4
 800d8a0:	f001 fe7e 	bl	800f5a0 <_Bfree>
 800d8a4:	4631      	mov	r1, r6
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	f001 fe7a 	bl	800f5a0 <_Bfree>
 800d8ac:	9907      	ldr	r1, [sp, #28]
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	f001 fe76 	bl	800f5a0 <_Bfree>
 800d8b4:	4629      	mov	r1, r5
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	f001 fe72 	bl	800f5a0 <_Bfree>
 800d8bc:	e5dc      	b.n	800d478 <_strtod_l+0x88>
 800d8be:	4b36      	ldr	r3, [pc, #216]	; (800d998 <_strtod_l+0x5a8>)
 800d8c0:	9304      	str	r3, [sp, #16]
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d8c8:	4650      	mov	r0, sl
 800d8ca:	4659      	mov	r1, fp
 800d8cc:	4699      	mov	r9, r3
 800d8ce:	f1b8 0f01 	cmp.w	r8, #1
 800d8d2:	dc21      	bgt.n	800d918 <_strtod_l+0x528>
 800d8d4:	b10b      	cbz	r3, 800d8da <_strtod_l+0x4ea>
 800d8d6:	4682      	mov	sl, r0
 800d8d8:	468b      	mov	fp, r1
 800d8da:	4b2f      	ldr	r3, [pc, #188]	; (800d998 <_strtod_l+0x5a8>)
 800d8dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d8e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d8e4:	4652      	mov	r2, sl
 800d8e6:	465b      	mov	r3, fp
 800d8e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d8ec:	f7f2 fe8c 	bl	8000608 <__aeabi_dmul>
 800d8f0:	4b2a      	ldr	r3, [pc, #168]	; (800d99c <_strtod_l+0x5ac>)
 800d8f2:	460a      	mov	r2, r1
 800d8f4:	400b      	ands	r3, r1
 800d8f6:	492a      	ldr	r1, [pc, #168]	; (800d9a0 <_strtod_l+0x5b0>)
 800d8f8:	428b      	cmp	r3, r1
 800d8fa:	4682      	mov	sl, r0
 800d8fc:	d8bc      	bhi.n	800d878 <_strtod_l+0x488>
 800d8fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d902:	428b      	cmp	r3, r1
 800d904:	bf86      	itte	hi
 800d906:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d9a4 <_strtod_l+0x5b4>
 800d90a:	f04f 3aff 	movhi.w	sl, #4294967295
 800d90e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d912:	2300      	movs	r3, #0
 800d914:	9304      	str	r3, [sp, #16]
 800d916:	e084      	b.n	800da22 <_strtod_l+0x632>
 800d918:	f018 0f01 	tst.w	r8, #1
 800d91c:	d005      	beq.n	800d92a <_strtod_l+0x53a>
 800d91e:	9b04      	ldr	r3, [sp, #16]
 800d920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d924:	f7f2 fe70 	bl	8000608 <__aeabi_dmul>
 800d928:	2301      	movs	r3, #1
 800d92a:	9a04      	ldr	r2, [sp, #16]
 800d92c:	3208      	adds	r2, #8
 800d92e:	f109 0901 	add.w	r9, r9, #1
 800d932:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d936:	9204      	str	r2, [sp, #16]
 800d938:	e7c9      	b.n	800d8ce <_strtod_l+0x4de>
 800d93a:	d0ea      	beq.n	800d912 <_strtod_l+0x522>
 800d93c:	f1c8 0800 	rsb	r8, r8, #0
 800d940:	f018 020f 	ands.w	r2, r8, #15
 800d944:	d00a      	beq.n	800d95c <_strtod_l+0x56c>
 800d946:	4b13      	ldr	r3, [pc, #76]	; (800d994 <_strtod_l+0x5a4>)
 800d948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d94c:	4650      	mov	r0, sl
 800d94e:	4659      	mov	r1, fp
 800d950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d954:	f7f2 ff82 	bl	800085c <__aeabi_ddiv>
 800d958:	4682      	mov	sl, r0
 800d95a:	468b      	mov	fp, r1
 800d95c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d960:	d0d7      	beq.n	800d912 <_strtod_l+0x522>
 800d962:	f1b8 0f1f 	cmp.w	r8, #31
 800d966:	dd1f      	ble.n	800d9a8 <_strtod_l+0x5b8>
 800d968:	2500      	movs	r5, #0
 800d96a:	462e      	mov	r6, r5
 800d96c:	9507      	str	r5, [sp, #28]
 800d96e:	9505      	str	r5, [sp, #20]
 800d970:	2322      	movs	r3, #34	; 0x22
 800d972:	f04f 0a00 	mov.w	sl, #0
 800d976:	f04f 0b00 	mov.w	fp, #0
 800d97a:	6023      	str	r3, [r4, #0]
 800d97c:	e786      	b.n	800d88c <_strtod_l+0x49c>
 800d97e:	bf00      	nop
 800d980:	0801122d 	.word	0x0801122d
 800d984:	08011270 	.word	0x08011270
 800d988:	08011225 	.word	0x08011225
 800d98c:	080113b4 	.word	0x080113b4
 800d990:	08011660 	.word	0x08011660
 800d994:	08011540 	.word	0x08011540
 800d998:	08011518 	.word	0x08011518
 800d99c:	7ff00000 	.word	0x7ff00000
 800d9a0:	7ca00000 	.word	0x7ca00000
 800d9a4:	7fefffff 	.word	0x7fefffff
 800d9a8:	f018 0310 	ands.w	r3, r8, #16
 800d9ac:	bf18      	it	ne
 800d9ae:	236a      	movne	r3, #106	; 0x6a
 800d9b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800dd60 <_strtod_l+0x970>
 800d9b4:	9304      	str	r3, [sp, #16]
 800d9b6:	4650      	mov	r0, sl
 800d9b8:	4659      	mov	r1, fp
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	f018 0f01 	tst.w	r8, #1
 800d9c0:	d004      	beq.n	800d9cc <_strtod_l+0x5dc>
 800d9c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d9c6:	f7f2 fe1f 	bl	8000608 <__aeabi_dmul>
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d9d0:	f109 0908 	add.w	r9, r9, #8
 800d9d4:	d1f2      	bne.n	800d9bc <_strtod_l+0x5cc>
 800d9d6:	b10b      	cbz	r3, 800d9dc <_strtod_l+0x5ec>
 800d9d8:	4682      	mov	sl, r0
 800d9da:	468b      	mov	fp, r1
 800d9dc:	9b04      	ldr	r3, [sp, #16]
 800d9de:	b1c3      	cbz	r3, 800da12 <_strtod_l+0x622>
 800d9e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d9e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	4659      	mov	r1, fp
 800d9ec:	dd11      	ble.n	800da12 <_strtod_l+0x622>
 800d9ee:	2b1f      	cmp	r3, #31
 800d9f0:	f340 8124 	ble.w	800dc3c <_strtod_l+0x84c>
 800d9f4:	2b34      	cmp	r3, #52	; 0x34
 800d9f6:	bfde      	ittt	le
 800d9f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d9fc:	f04f 33ff 	movle.w	r3, #4294967295
 800da00:	fa03 f202 	lslle.w	r2, r3, r2
 800da04:	f04f 0a00 	mov.w	sl, #0
 800da08:	bfcc      	ite	gt
 800da0a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800da0e:	ea02 0b01 	andle.w	fp, r2, r1
 800da12:	2200      	movs	r2, #0
 800da14:	2300      	movs	r3, #0
 800da16:	4650      	mov	r0, sl
 800da18:	4659      	mov	r1, fp
 800da1a:	f7f3 f85d 	bl	8000ad8 <__aeabi_dcmpeq>
 800da1e:	2800      	cmp	r0, #0
 800da20:	d1a2      	bne.n	800d968 <_strtod_l+0x578>
 800da22:	9b07      	ldr	r3, [sp, #28]
 800da24:	9300      	str	r3, [sp, #0]
 800da26:	9908      	ldr	r1, [sp, #32]
 800da28:	462b      	mov	r3, r5
 800da2a:	463a      	mov	r2, r7
 800da2c:	4620      	mov	r0, r4
 800da2e:	f001 fe1f 	bl	800f670 <__s2b>
 800da32:	9007      	str	r0, [sp, #28]
 800da34:	2800      	cmp	r0, #0
 800da36:	f43f af1f 	beq.w	800d878 <_strtod_l+0x488>
 800da3a:	9b05      	ldr	r3, [sp, #20]
 800da3c:	1b9e      	subs	r6, r3, r6
 800da3e:	9b06      	ldr	r3, [sp, #24]
 800da40:	2b00      	cmp	r3, #0
 800da42:	bfb4      	ite	lt
 800da44:	4633      	movlt	r3, r6
 800da46:	2300      	movge	r3, #0
 800da48:	930c      	str	r3, [sp, #48]	; 0x30
 800da4a:	9b06      	ldr	r3, [sp, #24]
 800da4c:	2500      	movs	r5, #0
 800da4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800da52:	9312      	str	r3, [sp, #72]	; 0x48
 800da54:	462e      	mov	r6, r5
 800da56:	9b07      	ldr	r3, [sp, #28]
 800da58:	4620      	mov	r0, r4
 800da5a:	6859      	ldr	r1, [r3, #4]
 800da5c:	f001 fd60 	bl	800f520 <_Balloc>
 800da60:	9005      	str	r0, [sp, #20]
 800da62:	2800      	cmp	r0, #0
 800da64:	f43f af0c 	beq.w	800d880 <_strtod_l+0x490>
 800da68:	9b07      	ldr	r3, [sp, #28]
 800da6a:	691a      	ldr	r2, [r3, #16]
 800da6c:	3202      	adds	r2, #2
 800da6e:	f103 010c 	add.w	r1, r3, #12
 800da72:	0092      	lsls	r2, r2, #2
 800da74:	300c      	adds	r0, #12
 800da76:	f7fe fde7 	bl	800c648 <memcpy>
 800da7a:	ec4b ab10 	vmov	d0, sl, fp
 800da7e:	aa1a      	add	r2, sp, #104	; 0x68
 800da80:	a919      	add	r1, sp, #100	; 0x64
 800da82:	4620      	mov	r0, r4
 800da84:	f002 f93a 	bl	800fcfc <__d2b>
 800da88:	ec4b ab18 	vmov	d8, sl, fp
 800da8c:	9018      	str	r0, [sp, #96]	; 0x60
 800da8e:	2800      	cmp	r0, #0
 800da90:	f43f aef6 	beq.w	800d880 <_strtod_l+0x490>
 800da94:	2101      	movs	r1, #1
 800da96:	4620      	mov	r0, r4
 800da98:	f001 fe84 	bl	800f7a4 <__i2b>
 800da9c:	4606      	mov	r6, r0
 800da9e:	2800      	cmp	r0, #0
 800daa0:	f43f aeee 	beq.w	800d880 <_strtod_l+0x490>
 800daa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800daa6:	9904      	ldr	r1, [sp, #16]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	bfab      	itete	ge
 800daac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800daae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800dab0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800dab2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800dab6:	bfac      	ite	ge
 800dab8:	eb03 0902 	addge.w	r9, r3, r2
 800dabc:	1ad7      	sublt	r7, r2, r3
 800dabe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dac0:	eba3 0801 	sub.w	r8, r3, r1
 800dac4:	4490      	add	r8, r2
 800dac6:	4ba1      	ldr	r3, [pc, #644]	; (800dd4c <_strtod_l+0x95c>)
 800dac8:	f108 38ff 	add.w	r8, r8, #4294967295
 800dacc:	4598      	cmp	r8, r3
 800dace:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dad2:	f280 80c7 	bge.w	800dc64 <_strtod_l+0x874>
 800dad6:	eba3 0308 	sub.w	r3, r3, r8
 800dada:	2b1f      	cmp	r3, #31
 800dadc:	eba2 0203 	sub.w	r2, r2, r3
 800dae0:	f04f 0101 	mov.w	r1, #1
 800dae4:	f300 80b1 	bgt.w	800dc4a <_strtod_l+0x85a>
 800dae8:	fa01 f303 	lsl.w	r3, r1, r3
 800daec:	930d      	str	r3, [sp, #52]	; 0x34
 800daee:	2300      	movs	r3, #0
 800daf0:	9308      	str	r3, [sp, #32]
 800daf2:	eb09 0802 	add.w	r8, r9, r2
 800daf6:	9b04      	ldr	r3, [sp, #16]
 800daf8:	45c1      	cmp	r9, r8
 800dafa:	4417      	add	r7, r2
 800dafc:	441f      	add	r7, r3
 800dafe:	464b      	mov	r3, r9
 800db00:	bfa8      	it	ge
 800db02:	4643      	movge	r3, r8
 800db04:	42bb      	cmp	r3, r7
 800db06:	bfa8      	it	ge
 800db08:	463b      	movge	r3, r7
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	bfc2      	ittt	gt
 800db0e:	eba8 0803 	subgt.w	r8, r8, r3
 800db12:	1aff      	subgt	r7, r7, r3
 800db14:	eba9 0903 	subgt.w	r9, r9, r3
 800db18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	dd17      	ble.n	800db4e <_strtod_l+0x75e>
 800db1e:	4631      	mov	r1, r6
 800db20:	461a      	mov	r2, r3
 800db22:	4620      	mov	r0, r4
 800db24:	f001 fefe 	bl	800f924 <__pow5mult>
 800db28:	4606      	mov	r6, r0
 800db2a:	2800      	cmp	r0, #0
 800db2c:	f43f aea8 	beq.w	800d880 <_strtod_l+0x490>
 800db30:	4601      	mov	r1, r0
 800db32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800db34:	4620      	mov	r0, r4
 800db36:	f001 fe4b 	bl	800f7d0 <__multiply>
 800db3a:	900b      	str	r0, [sp, #44]	; 0x2c
 800db3c:	2800      	cmp	r0, #0
 800db3e:	f43f ae9f 	beq.w	800d880 <_strtod_l+0x490>
 800db42:	9918      	ldr	r1, [sp, #96]	; 0x60
 800db44:	4620      	mov	r0, r4
 800db46:	f001 fd2b 	bl	800f5a0 <_Bfree>
 800db4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db4c:	9318      	str	r3, [sp, #96]	; 0x60
 800db4e:	f1b8 0f00 	cmp.w	r8, #0
 800db52:	f300 808c 	bgt.w	800dc6e <_strtod_l+0x87e>
 800db56:	9b06      	ldr	r3, [sp, #24]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	dd08      	ble.n	800db6e <_strtod_l+0x77e>
 800db5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800db5e:	9905      	ldr	r1, [sp, #20]
 800db60:	4620      	mov	r0, r4
 800db62:	f001 fedf 	bl	800f924 <__pow5mult>
 800db66:	9005      	str	r0, [sp, #20]
 800db68:	2800      	cmp	r0, #0
 800db6a:	f43f ae89 	beq.w	800d880 <_strtod_l+0x490>
 800db6e:	2f00      	cmp	r7, #0
 800db70:	dd08      	ble.n	800db84 <_strtod_l+0x794>
 800db72:	9905      	ldr	r1, [sp, #20]
 800db74:	463a      	mov	r2, r7
 800db76:	4620      	mov	r0, r4
 800db78:	f001 ff2e 	bl	800f9d8 <__lshift>
 800db7c:	9005      	str	r0, [sp, #20]
 800db7e:	2800      	cmp	r0, #0
 800db80:	f43f ae7e 	beq.w	800d880 <_strtod_l+0x490>
 800db84:	f1b9 0f00 	cmp.w	r9, #0
 800db88:	dd08      	ble.n	800db9c <_strtod_l+0x7ac>
 800db8a:	4631      	mov	r1, r6
 800db8c:	464a      	mov	r2, r9
 800db8e:	4620      	mov	r0, r4
 800db90:	f001 ff22 	bl	800f9d8 <__lshift>
 800db94:	4606      	mov	r6, r0
 800db96:	2800      	cmp	r0, #0
 800db98:	f43f ae72 	beq.w	800d880 <_strtod_l+0x490>
 800db9c:	9a05      	ldr	r2, [sp, #20]
 800db9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dba0:	4620      	mov	r0, r4
 800dba2:	f001 ffa5 	bl	800faf0 <__mdiff>
 800dba6:	4605      	mov	r5, r0
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	f43f ae69 	beq.w	800d880 <_strtod_l+0x490>
 800dbae:	68c3      	ldr	r3, [r0, #12]
 800dbb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	60c3      	str	r3, [r0, #12]
 800dbb6:	4631      	mov	r1, r6
 800dbb8:	f001 ff7e 	bl	800fab8 <__mcmp>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	da60      	bge.n	800dc82 <_strtod_l+0x892>
 800dbc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbc2:	ea53 030a 	orrs.w	r3, r3, sl
 800dbc6:	f040 8082 	bne.w	800dcce <_strtod_l+0x8de>
 800dbca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d17d      	bne.n	800dcce <_strtod_l+0x8de>
 800dbd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dbd6:	0d1b      	lsrs	r3, r3, #20
 800dbd8:	051b      	lsls	r3, r3, #20
 800dbda:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dbde:	d976      	bls.n	800dcce <_strtod_l+0x8de>
 800dbe0:	696b      	ldr	r3, [r5, #20]
 800dbe2:	b913      	cbnz	r3, 800dbea <_strtod_l+0x7fa>
 800dbe4:	692b      	ldr	r3, [r5, #16]
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	dd71      	ble.n	800dcce <_strtod_l+0x8de>
 800dbea:	4629      	mov	r1, r5
 800dbec:	2201      	movs	r2, #1
 800dbee:	4620      	mov	r0, r4
 800dbf0:	f001 fef2 	bl	800f9d8 <__lshift>
 800dbf4:	4631      	mov	r1, r6
 800dbf6:	4605      	mov	r5, r0
 800dbf8:	f001 ff5e 	bl	800fab8 <__mcmp>
 800dbfc:	2800      	cmp	r0, #0
 800dbfe:	dd66      	ble.n	800dcce <_strtod_l+0x8de>
 800dc00:	9904      	ldr	r1, [sp, #16]
 800dc02:	4a53      	ldr	r2, [pc, #332]	; (800dd50 <_strtod_l+0x960>)
 800dc04:	465b      	mov	r3, fp
 800dc06:	2900      	cmp	r1, #0
 800dc08:	f000 8081 	beq.w	800dd0e <_strtod_l+0x91e>
 800dc0c:	ea02 010b 	and.w	r1, r2, fp
 800dc10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dc14:	dc7b      	bgt.n	800dd0e <_strtod_l+0x91e>
 800dc16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dc1a:	f77f aea9 	ble.w	800d970 <_strtod_l+0x580>
 800dc1e:	4b4d      	ldr	r3, [pc, #308]	; (800dd54 <_strtod_l+0x964>)
 800dc20:	4650      	mov	r0, sl
 800dc22:	4659      	mov	r1, fp
 800dc24:	2200      	movs	r2, #0
 800dc26:	f7f2 fcef 	bl	8000608 <__aeabi_dmul>
 800dc2a:	460b      	mov	r3, r1
 800dc2c:	4303      	orrs	r3, r0
 800dc2e:	bf08      	it	eq
 800dc30:	2322      	moveq	r3, #34	; 0x22
 800dc32:	4682      	mov	sl, r0
 800dc34:	468b      	mov	fp, r1
 800dc36:	bf08      	it	eq
 800dc38:	6023      	streq	r3, [r4, #0]
 800dc3a:	e62b      	b.n	800d894 <_strtod_l+0x4a4>
 800dc3c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc40:	fa02 f303 	lsl.w	r3, r2, r3
 800dc44:	ea03 0a0a 	and.w	sl, r3, sl
 800dc48:	e6e3      	b.n	800da12 <_strtod_l+0x622>
 800dc4a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800dc4e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800dc52:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800dc56:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800dc5a:	fa01 f308 	lsl.w	r3, r1, r8
 800dc5e:	9308      	str	r3, [sp, #32]
 800dc60:	910d      	str	r1, [sp, #52]	; 0x34
 800dc62:	e746      	b.n	800daf2 <_strtod_l+0x702>
 800dc64:	2300      	movs	r3, #0
 800dc66:	9308      	str	r3, [sp, #32]
 800dc68:	2301      	movs	r3, #1
 800dc6a:	930d      	str	r3, [sp, #52]	; 0x34
 800dc6c:	e741      	b.n	800daf2 <_strtod_l+0x702>
 800dc6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dc70:	4642      	mov	r2, r8
 800dc72:	4620      	mov	r0, r4
 800dc74:	f001 feb0 	bl	800f9d8 <__lshift>
 800dc78:	9018      	str	r0, [sp, #96]	; 0x60
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	f47f af6b 	bne.w	800db56 <_strtod_l+0x766>
 800dc80:	e5fe      	b.n	800d880 <_strtod_l+0x490>
 800dc82:	465f      	mov	r7, fp
 800dc84:	d16e      	bne.n	800dd64 <_strtod_l+0x974>
 800dc86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc8c:	b342      	cbz	r2, 800dce0 <_strtod_l+0x8f0>
 800dc8e:	4a32      	ldr	r2, [pc, #200]	; (800dd58 <_strtod_l+0x968>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d128      	bne.n	800dce6 <_strtod_l+0x8f6>
 800dc94:	9b04      	ldr	r3, [sp, #16]
 800dc96:	4651      	mov	r1, sl
 800dc98:	b1eb      	cbz	r3, 800dcd6 <_strtod_l+0x8e6>
 800dc9a:	4b2d      	ldr	r3, [pc, #180]	; (800dd50 <_strtod_l+0x960>)
 800dc9c:	403b      	ands	r3, r7
 800dc9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dca2:	f04f 32ff 	mov.w	r2, #4294967295
 800dca6:	d819      	bhi.n	800dcdc <_strtod_l+0x8ec>
 800dca8:	0d1b      	lsrs	r3, r3, #20
 800dcaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dcae:	fa02 f303 	lsl.w	r3, r2, r3
 800dcb2:	4299      	cmp	r1, r3
 800dcb4:	d117      	bne.n	800dce6 <_strtod_l+0x8f6>
 800dcb6:	4b29      	ldr	r3, [pc, #164]	; (800dd5c <_strtod_l+0x96c>)
 800dcb8:	429f      	cmp	r7, r3
 800dcba:	d102      	bne.n	800dcc2 <_strtod_l+0x8d2>
 800dcbc:	3101      	adds	r1, #1
 800dcbe:	f43f addf 	beq.w	800d880 <_strtod_l+0x490>
 800dcc2:	4b23      	ldr	r3, [pc, #140]	; (800dd50 <_strtod_l+0x960>)
 800dcc4:	403b      	ands	r3, r7
 800dcc6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dcca:	f04f 0a00 	mov.w	sl, #0
 800dcce:	9b04      	ldr	r3, [sp, #16]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d1a4      	bne.n	800dc1e <_strtod_l+0x82e>
 800dcd4:	e5de      	b.n	800d894 <_strtod_l+0x4a4>
 800dcd6:	f04f 33ff 	mov.w	r3, #4294967295
 800dcda:	e7ea      	b.n	800dcb2 <_strtod_l+0x8c2>
 800dcdc:	4613      	mov	r3, r2
 800dcde:	e7e8      	b.n	800dcb2 <_strtod_l+0x8c2>
 800dce0:	ea53 030a 	orrs.w	r3, r3, sl
 800dce4:	d08c      	beq.n	800dc00 <_strtod_l+0x810>
 800dce6:	9b08      	ldr	r3, [sp, #32]
 800dce8:	b1db      	cbz	r3, 800dd22 <_strtod_l+0x932>
 800dcea:	423b      	tst	r3, r7
 800dcec:	d0ef      	beq.n	800dcce <_strtod_l+0x8de>
 800dcee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcf0:	9a04      	ldr	r2, [sp, #16]
 800dcf2:	4650      	mov	r0, sl
 800dcf4:	4659      	mov	r1, fp
 800dcf6:	b1c3      	cbz	r3, 800dd2a <_strtod_l+0x93a>
 800dcf8:	f7ff fb5c 	bl	800d3b4 <sulp>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	460b      	mov	r3, r1
 800dd00:	ec51 0b18 	vmov	r0, r1, d8
 800dd04:	f7f2 faca 	bl	800029c <__adddf3>
 800dd08:	4682      	mov	sl, r0
 800dd0a:	468b      	mov	fp, r1
 800dd0c:	e7df      	b.n	800dcce <_strtod_l+0x8de>
 800dd0e:	4013      	ands	r3, r2
 800dd10:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dd14:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dd18:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dd1c:	f04f 3aff 	mov.w	sl, #4294967295
 800dd20:	e7d5      	b.n	800dcce <_strtod_l+0x8de>
 800dd22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd24:	ea13 0f0a 	tst.w	r3, sl
 800dd28:	e7e0      	b.n	800dcec <_strtod_l+0x8fc>
 800dd2a:	f7ff fb43 	bl	800d3b4 <sulp>
 800dd2e:	4602      	mov	r2, r0
 800dd30:	460b      	mov	r3, r1
 800dd32:	ec51 0b18 	vmov	r0, r1, d8
 800dd36:	f7f2 faaf 	bl	8000298 <__aeabi_dsub>
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	4682      	mov	sl, r0
 800dd40:	468b      	mov	fp, r1
 800dd42:	f7f2 fec9 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd46:	2800      	cmp	r0, #0
 800dd48:	d0c1      	beq.n	800dcce <_strtod_l+0x8de>
 800dd4a:	e611      	b.n	800d970 <_strtod_l+0x580>
 800dd4c:	fffffc02 	.word	0xfffffc02
 800dd50:	7ff00000 	.word	0x7ff00000
 800dd54:	39500000 	.word	0x39500000
 800dd58:	000fffff 	.word	0x000fffff
 800dd5c:	7fefffff 	.word	0x7fefffff
 800dd60:	08011288 	.word	0x08011288
 800dd64:	4631      	mov	r1, r6
 800dd66:	4628      	mov	r0, r5
 800dd68:	f002 f824 	bl	800fdb4 <__ratio>
 800dd6c:	ec59 8b10 	vmov	r8, r9, d0
 800dd70:	ee10 0a10 	vmov	r0, s0
 800dd74:	2200      	movs	r2, #0
 800dd76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dd7a:	4649      	mov	r1, r9
 800dd7c:	f7f2 fec0 	bl	8000b00 <__aeabi_dcmple>
 800dd80:	2800      	cmp	r0, #0
 800dd82:	d07a      	beq.n	800de7a <_strtod_l+0xa8a>
 800dd84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d04a      	beq.n	800de20 <_strtod_l+0xa30>
 800dd8a:	4b95      	ldr	r3, [pc, #596]	; (800dfe0 <_strtod_l+0xbf0>)
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dd92:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800dfe0 <_strtod_l+0xbf0>
 800dd96:	f04f 0800 	mov.w	r8, #0
 800dd9a:	4b92      	ldr	r3, [pc, #584]	; (800dfe4 <_strtod_l+0xbf4>)
 800dd9c:	403b      	ands	r3, r7
 800dd9e:	930d      	str	r3, [sp, #52]	; 0x34
 800dda0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dda2:	4b91      	ldr	r3, [pc, #580]	; (800dfe8 <_strtod_l+0xbf8>)
 800dda4:	429a      	cmp	r2, r3
 800dda6:	f040 80b0 	bne.w	800df0a <_strtod_l+0xb1a>
 800ddaa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ddae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ddb2:	ec4b ab10 	vmov	d0, sl, fp
 800ddb6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ddba:	f001 ff23 	bl	800fc04 <__ulp>
 800ddbe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ddc2:	ec53 2b10 	vmov	r2, r3, d0
 800ddc6:	f7f2 fc1f 	bl	8000608 <__aeabi_dmul>
 800ddca:	4652      	mov	r2, sl
 800ddcc:	465b      	mov	r3, fp
 800ddce:	f7f2 fa65 	bl	800029c <__adddf3>
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	4983      	ldr	r1, [pc, #524]	; (800dfe4 <_strtod_l+0xbf4>)
 800ddd6:	4a85      	ldr	r2, [pc, #532]	; (800dfec <_strtod_l+0xbfc>)
 800ddd8:	4019      	ands	r1, r3
 800ddda:	4291      	cmp	r1, r2
 800dddc:	4682      	mov	sl, r0
 800ddde:	d960      	bls.n	800dea2 <_strtod_l+0xab2>
 800dde0:	ee18 3a90 	vmov	r3, s17
 800dde4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d104      	bne.n	800ddf6 <_strtod_l+0xa06>
 800ddec:	ee18 3a10 	vmov	r3, s16
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	f43f ad45 	beq.w	800d880 <_strtod_l+0x490>
 800ddf6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800dff8 <_strtod_l+0xc08>
 800ddfa:	f04f 3aff 	mov.w	sl, #4294967295
 800ddfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800de00:	4620      	mov	r0, r4
 800de02:	f001 fbcd 	bl	800f5a0 <_Bfree>
 800de06:	9905      	ldr	r1, [sp, #20]
 800de08:	4620      	mov	r0, r4
 800de0a:	f001 fbc9 	bl	800f5a0 <_Bfree>
 800de0e:	4631      	mov	r1, r6
 800de10:	4620      	mov	r0, r4
 800de12:	f001 fbc5 	bl	800f5a0 <_Bfree>
 800de16:	4629      	mov	r1, r5
 800de18:	4620      	mov	r0, r4
 800de1a:	f001 fbc1 	bl	800f5a0 <_Bfree>
 800de1e:	e61a      	b.n	800da56 <_strtod_l+0x666>
 800de20:	f1ba 0f00 	cmp.w	sl, #0
 800de24:	d11b      	bne.n	800de5e <_strtod_l+0xa6e>
 800de26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de2a:	b9f3      	cbnz	r3, 800de6a <_strtod_l+0xa7a>
 800de2c:	4b6c      	ldr	r3, [pc, #432]	; (800dfe0 <_strtod_l+0xbf0>)
 800de2e:	2200      	movs	r2, #0
 800de30:	4640      	mov	r0, r8
 800de32:	4649      	mov	r1, r9
 800de34:	f7f2 fe5a 	bl	8000aec <__aeabi_dcmplt>
 800de38:	b9d0      	cbnz	r0, 800de70 <_strtod_l+0xa80>
 800de3a:	4640      	mov	r0, r8
 800de3c:	4649      	mov	r1, r9
 800de3e:	4b6c      	ldr	r3, [pc, #432]	; (800dff0 <_strtod_l+0xc00>)
 800de40:	2200      	movs	r2, #0
 800de42:	f7f2 fbe1 	bl	8000608 <__aeabi_dmul>
 800de46:	4680      	mov	r8, r0
 800de48:	4689      	mov	r9, r1
 800de4a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800de4e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800de52:	9315      	str	r3, [sp, #84]	; 0x54
 800de54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800de58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800de5c:	e79d      	b.n	800dd9a <_strtod_l+0x9aa>
 800de5e:	f1ba 0f01 	cmp.w	sl, #1
 800de62:	d102      	bne.n	800de6a <_strtod_l+0xa7a>
 800de64:	2f00      	cmp	r7, #0
 800de66:	f43f ad83 	beq.w	800d970 <_strtod_l+0x580>
 800de6a:	4b62      	ldr	r3, [pc, #392]	; (800dff4 <_strtod_l+0xc04>)
 800de6c:	2200      	movs	r2, #0
 800de6e:	e78e      	b.n	800dd8e <_strtod_l+0x99e>
 800de70:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800dff0 <_strtod_l+0xc00>
 800de74:	f04f 0800 	mov.w	r8, #0
 800de78:	e7e7      	b.n	800de4a <_strtod_l+0xa5a>
 800de7a:	4b5d      	ldr	r3, [pc, #372]	; (800dff0 <_strtod_l+0xc00>)
 800de7c:	4640      	mov	r0, r8
 800de7e:	4649      	mov	r1, r9
 800de80:	2200      	movs	r2, #0
 800de82:	f7f2 fbc1 	bl	8000608 <__aeabi_dmul>
 800de86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de88:	4680      	mov	r8, r0
 800de8a:	4689      	mov	r9, r1
 800de8c:	b933      	cbnz	r3, 800de9c <_strtod_l+0xaac>
 800de8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de92:	900e      	str	r0, [sp, #56]	; 0x38
 800de94:	930f      	str	r3, [sp, #60]	; 0x3c
 800de96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800de9a:	e7dd      	b.n	800de58 <_strtod_l+0xa68>
 800de9c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800dea0:	e7f9      	b.n	800de96 <_strtod_l+0xaa6>
 800dea2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800dea6:	9b04      	ldr	r3, [sp, #16]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d1a8      	bne.n	800ddfe <_strtod_l+0xa0e>
 800deac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800deb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800deb2:	0d1b      	lsrs	r3, r3, #20
 800deb4:	051b      	lsls	r3, r3, #20
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d1a1      	bne.n	800ddfe <_strtod_l+0xa0e>
 800deba:	4640      	mov	r0, r8
 800debc:	4649      	mov	r1, r9
 800debe:	f7f2 ff03 	bl	8000cc8 <__aeabi_d2lz>
 800dec2:	f7f2 fb73 	bl	80005ac <__aeabi_l2d>
 800dec6:	4602      	mov	r2, r0
 800dec8:	460b      	mov	r3, r1
 800deca:	4640      	mov	r0, r8
 800decc:	4649      	mov	r1, r9
 800dece:	f7f2 f9e3 	bl	8000298 <__aeabi_dsub>
 800ded2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ded4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ded8:	ea43 030a 	orr.w	r3, r3, sl
 800dedc:	4313      	orrs	r3, r2
 800dede:	4680      	mov	r8, r0
 800dee0:	4689      	mov	r9, r1
 800dee2:	d055      	beq.n	800df90 <_strtod_l+0xba0>
 800dee4:	a336      	add	r3, pc, #216	; (adr r3, 800dfc0 <_strtod_l+0xbd0>)
 800dee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deea:	f7f2 fdff 	bl	8000aec <__aeabi_dcmplt>
 800deee:	2800      	cmp	r0, #0
 800def0:	f47f acd0 	bne.w	800d894 <_strtod_l+0x4a4>
 800def4:	a334      	add	r3, pc, #208	; (adr r3, 800dfc8 <_strtod_l+0xbd8>)
 800def6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defa:	4640      	mov	r0, r8
 800defc:	4649      	mov	r1, r9
 800defe:	f7f2 fe13 	bl	8000b28 <__aeabi_dcmpgt>
 800df02:	2800      	cmp	r0, #0
 800df04:	f43f af7b 	beq.w	800ddfe <_strtod_l+0xa0e>
 800df08:	e4c4      	b.n	800d894 <_strtod_l+0x4a4>
 800df0a:	9b04      	ldr	r3, [sp, #16]
 800df0c:	b333      	cbz	r3, 800df5c <_strtod_l+0xb6c>
 800df0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df10:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800df14:	d822      	bhi.n	800df5c <_strtod_l+0xb6c>
 800df16:	a32e      	add	r3, pc, #184	; (adr r3, 800dfd0 <_strtod_l+0xbe0>)
 800df18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1c:	4640      	mov	r0, r8
 800df1e:	4649      	mov	r1, r9
 800df20:	f7f2 fdee 	bl	8000b00 <__aeabi_dcmple>
 800df24:	b1a0      	cbz	r0, 800df50 <_strtod_l+0xb60>
 800df26:	4649      	mov	r1, r9
 800df28:	4640      	mov	r0, r8
 800df2a:	f7f2 fe45 	bl	8000bb8 <__aeabi_d2uiz>
 800df2e:	2801      	cmp	r0, #1
 800df30:	bf38      	it	cc
 800df32:	2001      	movcc	r0, #1
 800df34:	f7f2 faee 	bl	8000514 <__aeabi_ui2d>
 800df38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df3a:	4680      	mov	r8, r0
 800df3c:	4689      	mov	r9, r1
 800df3e:	bb23      	cbnz	r3, 800df8a <_strtod_l+0xb9a>
 800df40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df44:	9010      	str	r0, [sp, #64]	; 0x40
 800df46:	9311      	str	r3, [sp, #68]	; 0x44
 800df48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800df4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800df50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df54:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800df58:	1a9b      	subs	r3, r3, r2
 800df5a:	9309      	str	r3, [sp, #36]	; 0x24
 800df5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df60:	eeb0 0a48 	vmov.f32	s0, s16
 800df64:	eef0 0a68 	vmov.f32	s1, s17
 800df68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800df6c:	f001 fe4a 	bl	800fc04 <__ulp>
 800df70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df74:	ec53 2b10 	vmov	r2, r3, d0
 800df78:	f7f2 fb46 	bl	8000608 <__aeabi_dmul>
 800df7c:	ec53 2b18 	vmov	r2, r3, d8
 800df80:	f7f2 f98c 	bl	800029c <__adddf3>
 800df84:	4682      	mov	sl, r0
 800df86:	468b      	mov	fp, r1
 800df88:	e78d      	b.n	800dea6 <_strtod_l+0xab6>
 800df8a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800df8e:	e7db      	b.n	800df48 <_strtod_l+0xb58>
 800df90:	a311      	add	r3, pc, #68	; (adr r3, 800dfd8 <_strtod_l+0xbe8>)
 800df92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df96:	f7f2 fda9 	bl	8000aec <__aeabi_dcmplt>
 800df9a:	e7b2      	b.n	800df02 <_strtod_l+0xb12>
 800df9c:	2300      	movs	r3, #0
 800df9e:	930a      	str	r3, [sp, #40]	; 0x28
 800dfa0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dfa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dfa4:	6013      	str	r3, [r2, #0]
 800dfa6:	f7ff ba6b 	b.w	800d480 <_strtod_l+0x90>
 800dfaa:	2a65      	cmp	r2, #101	; 0x65
 800dfac:	f43f ab5f 	beq.w	800d66e <_strtod_l+0x27e>
 800dfb0:	2a45      	cmp	r2, #69	; 0x45
 800dfb2:	f43f ab5c 	beq.w	800d66e <_strtod_l+0x27e>
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	f7ff bb94 	b.w	800d6e4 <_strtod_l+0x2f4>
 800dfbc:	f3af 8000 	nop.w
 800dfc0:	94a03595 	.word	0x94a03595
 800dfc4:	3fdfffff 	.word	0x3fdfffff
 800dfc8:	35afe535 	.word	0x35afe535
 800dfcc:	3fe00000 	.word	0x3fe00000
 800dfd0:	ffc00000 	.word	0xffc00000
 800dfd4:	41dfffff 	.word	0x41dfffff
 800dfd8:	94a03595 	.word	0x94a03595
 800dfdc:	3fcfffff 	.word	0x3fcfffff
 800dfe0:	3ff00000 	.word	0x3ff00000
 800dfe4:	7ff00000 	.word	0x7ff00000
 800dfe8:	7fe00000 	.word	0x7fe00000
 800dfec:	7c9fffff 	.word	0x7c9fffff
 800dff0:	3fe00000 	.word	0x3fe00000
 800dff4:	bff00000 	.word	0xbff00000
 800dff8:	7fefffff 	.word	0x7fefffff

0800dffc <_strtod_r>:
 800dffc:	4b01      	ldr	r3, [pc, #4]	; (800e004 <_strtod_r+0x8>)
 800dffe:	f7ff b9f7 	b.w	800d3f0 <_strtod_l>
 800e002:	bf00      	nop
 800e004:	200002c4 	.word	0x200002c4

0800e008 <_strtol_l.constprop.0>:
 800e008:	2b01      	cmp	r3, #1
 800e00a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e00e:	d001      	beq.n	800e014 <_strtol_l.constprop.0+0xc>
 800e010:	2b24      	cmp	r3, #36	; 0x24
 800e012:	d906      	bls.n	800e022 <_strtol_l.constprop.0+0x1a>
 800e014:	f7fe faee 	bl	800c5f4 <__errno>
 800e018:	2316      	movs	r3, #22
 800e01a:	6003      	str	r3, [r0, #0]
 800e01c:	2000      	movs	r0, #0
 800e01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e022:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e108 <_strtol_l.constprop.0+0x100>
 800e026:	460d      	mov	r5, r1
 800e028:	462e      	mov	r6, r5
 800e02a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e02e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e032:	f017 0708 	ands.w	r7, r7, #8
 800e036:	d1f7      	bne.n	800e028 <_strtol_l.constprop.0+0x20>
 800e038:	2c2d      	cmp	r4, #45	; 0x2d
 800e03a:	d132      	bne.n	800e0a2 <_strtol_l.constprop.0+0x9a>
 800e03c:	782c      	ldrb	r4, [r5, #0]
 800e03e:	2701      	movs	r7, #1
 800e040:	1cb5      	adds	r5, r6, #2
 800e042:	2b00      	cmp	r3, #0
 800e044:	d05b      	beq.n	800e0fe <_strtol_l.constprop.0+0xf6>
 800e046:	2b10      	cmp	r3, #16
 800e048:	d109      	bne.n	800e05e <_strtol_l.constprop.0+0x56>
 800e04a:	2c30      	cmp	r4, #48	; 0x30
 800e04c:	d107      	bne.n	800e05e <_strtol_l.constprop.0+0x56>
 800e04e:	782c      	ldrb	r4, [r5, #0]
 800e050:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e054:	2c58      	cmp	r4, #88	; 0x58
 800e056:	d14d      	bne.n	800e0f4 <_strtol_l.constprop.0+0xec>
 800e058:	786c      	ldrb	r4, [r5, #1]
 800e05a:	2310      	movs	r3, #16
 800e05c:	3502      	adds	r5, #2
 800e05e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e062:	f108 38ff 	add.w	r8, r8, #4294967295
 800e066:	f04f 0c00 	mov.w	ip, #0
 800e06a:	fbb8 f9f3 	udiv	r9, r8, r3
 800e06e:	4666      	mov	r6, ip
 800e070:	fb03 8a19 	mls	sl, r3, r9, r8
 800e074:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e078:	f1be 0f09 	cmp.w	lr, #9
 800e07c:	d816      	bhi.n	800e0ac <_strtol_l.constprop.0+0xa4>
 800e07e:	4674      	mov	r4, lr
 800e080:	42a3      	cmp	r3, r4
 800e082:	dd24      	ble.n	800e0ce <_strtol_l.constprop.0+0xc6>
 800e084:	f1bc 0f00 	cmp.w	ip, #0
 800e088:	db1e      	blt.n	800e0c8 <_strtol_l.constprop.0+0xc0>
 800e08a:	45b1      	cmp	r9, r6
 800e08c:	d31c      	bcc.n	800e0c8 <_strtol_l.constprop.0+0xc0>
 800e08e:	d101      	bne.n	800e094 <_strtol_l.constprop.0+0x8c>
 800e090:	45a2      	cmp	sl, r4
 800e092:	db19      	blt.n	800e0c8 <_strtol_l.constprop.0+0xc0>
 800e094:	fb06 4603 	mla	r6, r6, r3, r4
 800e098:	f04f 0c01 	mov.w	ip, #1
 800e09c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e0a0:	e7e8      	b.n	800e074 <_strtol_l.constprop.0+0x6c>
 800e0a2:	2c2b      	cmp	r4, #43	; 0x2b
 800e0a4:	bf04      	itt	eq
 800e0a6:	782c      	ldrbeq	r4, [r5, #0]
 800e0a8:	1cb5      	addeq	r5, r6, #2
 800e0aa:	e7ca      	b.n	800e042 <_strtol_l.constprop.0+0x3a>
 800e0ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e0b0:	f1be 0f19 	cmp.w	lr, #25
 800e0b4:	d801      	bhi.n	800e0ba <_strtol_l.constprop.0+0xb2>
 800e0b6:	3c37      	subs	r4, #55	; 0x37
 800e0b8:	e7e2      	b.n	800e080 <_strtol_l.constprop.0+0x78>
 800e0ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e0be:	f1be 0f19 	cmp.w	lr, #25
 800e0c2:	d804      	bhi.n	800e0ce <_strtol_l.constprop.0+0xc6>
 800e0c4:	3c57      	subs	r4, #87	; 0x57
 800e0c6:	e7db      	b.n	800e080 <_strtol_l.constprop.0+0x78>
 800e0c8:	f04f 3cff 	mov.w	ip, #4294967295
 800e0cc:	e7e6      	b.n	800e09c <_strtol_l.constprop.0+0x94>
 800e0ce:	f1bc 0f00 	cmp.w	ip, #0
 800e0d2:	da05      	bge.n	800e0e0 <_strtol_l.constprop.0+0xd8>
 800e0d4:	2322      	movs	r3, #34	; 0x22
 800e0d6:	6003      	str	r3, [r0, #0]
 800e0d8:	4646      	mov	r6, r8
 800e0da:	b942      	cbnz	r2, 800e0ee <_strtol_l.constprop.0+0xe6>
 800e0dc:	4630      	mov	r0, r6
 800e0de:	e79e      	b.n	800e01e <_strtol_l.constprop.0+0x16>
 800e0e0:	b107      	cbz	r7, 800e0e4 <_strtol_l.constprop.0+0xdc>
 800e0e2:	4276      	negs	r6, r6
 800e0e4:	2a00      	cmp	r2, #0
 800e0e6:	d0f9      	beq.n	800e0dc <_strtol_l.constprop.0+0xd4>
 800e0e8:	f1bc 0f00 	cmp.w	ip, #0
 800e0ec:	d000      	beq.n	800e0f0 <_strtol_l.constprop.0+0xe8>
 800e0ee:	1e69      	subs	r1, r5, #1
 800e0f0:	6011      	str	r1, [r2, #0]
 800e0f2:	e7f3      	b.n	800e0dc <_strtol_l.constprop.0+0xd4>
 800e0f4:	2430      	movs	r4, #48	; 0x30
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d1b1      	bne.n	800e05e <_strtol_l.constprop.0+0x56>
 800e0fa:	2308      	movs	r3, #8
 800e0fc:	e7af      	b.n	800e05e <_strtol_l.constprop.0+0x56>
 800e0fe:	2c30      	cmp	r4, #48	; 0x30
 800e100:	d0a5      	beq.n	800e04e <_strtol_l.constprop.0+0x46>
 800e102:	230a      	movs	r3, #10
 800e104:	e7ab      	b.n	800e05e <_strtol_l.constprop.0+0x56>
 800e106:	bf00      	nop
 800e108:	080112b1 	.word	0x080112b1

0800e10c <_strtol_r>:
 800e10c:	f7ff bf7c 	b.w	800e008 <_strtol_l.constprop.0>

0800e110 <quorem>:
 800e110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e114:	6903      	ldr	r3, [r0, #16]
 800e116:	690c      	ldr	r4, [r1, #16]
 800e118:	42a3      	cmp	r3, r4
 800e11a:	4607      	mov	r7, r0
 800e11c:	f2c0 8081 	blt.w	800e222 <quorem+0x112>
 800e120:	3c01      	subs	r4, #1
 800e122:	f101 0814 	add.w	r8, r1, #20
 800e126:	f100 0514 	add.w	r5, r0, #20
 800e12a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e12e:	9301      	str	r3, [sp, #4]
 800e130:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e134:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e138:	3301      	adds	r3, #1
 800e13a:	429a      	cmp	r2, r3
 800e13c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e140:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e144:	fbb2 f6f3 	udiv	r6, r2, r3
 800e148:	d331      	bcc.n	800e1ae <quorem+0x9e>
 800e14a:	f04f 0e00 	mov.w	lr, #0
 800e14e:	4640      	mov	r0, r8
 800e150:	46ac      	mov	ip, r5
 800e152:	46f2      	mov	sl, lr
 800e154:	f850 2b04 	ldr.w	r2, [r0], #4
 800e158:	b293      	uxth	r3, r2
 800e15a:	fb06 e303 	mla	r3, r6, r3, lr
 800e15e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e162:	b29b      	uxth	r3, r3
 800e164:	ebaa 0303 	sub.w	r3, sl, r3
 800e168:	f8dc a000 	ldr.w	sl, [ip]
 800e16c:	0c12      	lsrs	r2, r2, #16
 800e16e:	fa13 f38a 	uxtah	r3, r3, sl
 800e172:	fb06 e202 	mla	r2, r6, r2, lr
 800e176:	9300      	str	r3, [sp, #0]
 800e178:	9b00      	ldr	r3, [sp, #0]
 800e17a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e17e:	b292      	uxth	r2, r2
 800e180:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e184:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e188:	f8bd 3000 	ldrh.w	r3, [sp]
 800e18c:	4581      	cmp	r9, r0
 800e18e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e192:	f84c 3b04 	str.w	r3, [ip], #4
 800e196:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e19a:	d2db      	bcs.n	800e154 <quorem+0x44>
 800e19c:	f855 300b 	ldr.w	r3, [r5, fp]
 800e1a0:	b92b      	cbnz	r3, 800e1ae <quorem+0x9e>
 800e1a2:	9b01      	ldr	r3, [sp, #4]
 800e1a4:	3b04      	subs	r3, #4
 800e1a6:	429d      	cmp	r5, r3
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	d32e      	bcc.n	800e20a <quorem+0xfa>
 800e1ac:	613c      	str	r4, [r7, #16]
 800e1ae:	4638      	mov	r0, r7
 800e1b0:	f001 fc82 	bl	800fab8 <__mcmp>
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	db24      	blt.n	800e202 <quorem+0xf2>
 800e1b8:	3601      	adds	r6, #1
 800e1ba:	4628      	mov	r0, r5
 800e1bc:	f04f 0c00 	mov.w	ip, #0
 800e1c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e1c4:	f8d0 e000 	ldr.w	lr, [r0]
 800e1c8:	b293      	uxth	r3, r2
 800e1ca:	ebac 0303 	sub.w	r3, ip, r3
 800e1ce:	0c12      	lsrs	r2, r2, #16
 800e1d0:	fa13 f38e 	uxtah	r3, r3, lr
 800e1d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e1d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e1dc:	b29b      	uxth	r3, r3
 800e1de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e1e2:	45c1      	cmp	r9, r8
 800e1e4:	f840 3b04 	str.w	r3, [r0], #4
 800e1e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e1ec:	d2e8      	bcs.n	800e1c0 <quorem+0xb0>
 800e1ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e1f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e1f6:	b922      	cbnz	r2, 800e202 <quorem+0xf2>
 800e1f8:	3b04      	subs	r3, #4
 800e1fa:	429d      	cmp	r5, r3
 800e1fc:	461a      	mov	r2, r3
 800e1fe:	d30a      	bcc.n	800e216 <quorem+0x106>
 800e200:	613c      	str	r4, [r7, #16]
 800e202:	4630      	mov	r0, r6
 800e204:	b003      	add	sp, #12
 800e206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e20a:	6812      	ldr	r2, [r2, #0]
 800e20c:	3b04      	subs	r3, #4
 800e20e:	2a00      	cmp	r2, #0
 800e210:	d1cc      	bne.n	800e1ac <quorem+0x9c>
 800e212:	3c01      	subs	r4, #1
 800e214:	e7c7      	b.n	800e1a6 <quorem+0x96>
 800e216:	6812      	ldr	r2, [r2, #0]
 800e218:	3b04      	subs	r3, #4
 800e21a:	2a00      	cmp	r2, #0
 800e21c:	d1f0      	bne.n	800e200 <quorem+0xf0>
 800e21e:	3c01      	subs	r4, #1
 800e220:	e7eb      	b.n	800e1fa <quorem+0xea>
 800e222:	2000      	movs	r0, #0
 800e224:	e7ee      	b.n	800e204 <quorem+0xf4>
	...

0800e228 <_dtoa_r>:
 800e228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e22c:	ed2d 8b04 	vpush	{d8-d9}
 800e230:	ec57 6b10 	vmov	r6, r7, d0
 800e234:	b093      	sub	sp, #76	; 0x4c
 800e236:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e238:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e23c:	9106      	str	r1, [sp, #24]
 800e23e:	ee10 aa10 	vmov	sl, s0
 800e242:	4604      	mov	r4, r0
 800e244:	9209      	str	r2, [sp, #36]	; 0x24
 800e246:	930c      	str	r3, [sp, #48]	; 0x30
 800e248:	46bb      	mov	fp, r7
 800e24a:	b975      	cbnz	r5, 800e26a <_dtoa_r+0x42>
 800e24c:	2010      	movs	r0, #16
 800e24e:	f001 f94d 	bl	800f4ec <malloc>
 800e252:	4602      	mov	r2, r0
 800e254:	6260      	str	r0, [r4, #36]	; 0x24
 800e256:	b920      	cbnz	r0, 800e262 <_dtoa_r+0x3a>
 800e258:	4ba7      	ldr	r3, [pc, #668]	; (800e4f8 <_dtoa_r+0x2d0>)
 800e25a:	21ea      	movs	r1, #234	; 0xea
 800e25c:	48a7      	ldr	r0, [pc, #668]	; (800e4fc <_dtoa_r+0x2d4>)
 800e25e:	f002 f8ad 	bl	80103bc <__assert_func>
 800e262:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e266:	6005      	str	r5, [r0, #0]
 800e268:	60c5      	str	r5, [r0, #12]
 800e26a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e26c:	6819      	ldr	r1, [r3, #0]
 800e26e:	b151      	cbz	r1, 800e286 <_dtoa_r+0x5e>
 800e270:	685a      	ldr	r2, [r3, #4]
 800e272:	604a      	str	r2, [r1, #4]
 800e274:	2301      	movs	r3, #1
 800e276:	4093      	lsls	r3, r2
 800e278:	608b      	str	r3, [r1, #8]
 800e27a:	4620      	mov	r0, r4
 800e27c:	f001 f990 	bl	800f5a0 <_Bfree>
 800e280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e282:	2200      	movs	r2, #0
 800e284:	601a      	str	r2, [r3, #0]
 800e286:	1e3b      	subs	r3, r7, #0
 800e288:	bfaa      	itet	ge
 800e28a:	2300      	movge	r3, #0
 800e28c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e290:	f8c8 3000 	strge.w	r3, [r8]
 800e294:	4b9a      	ldr	r3, [pc, #616]	; (800e500 <_dtoa_r+0x2d8>)
 800e296:	bfbc      	itt	lt
 800e298:	2201      	movlt	r2, #1
 800e29a:	f8c8 2000 	strlt.w	r2, [r8]
 800e29e:	ea33 030b 	bics.w	r3, r3, fp
 800e2a2:	d11b      	bne.n	800e2dc <_dtoa_r+0xb4>
 800e2a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800e2aa:	6013      	str	r3, [r2, #0]
 800e2ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e2b0:	4333      	orrs	r3, r6
 800e2b2:	f000 8592 	beq.w	800edda <_dtoa_r+0xbb2>
 800e2b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2b8:	b963      	cbnz	r3, 800e2d4 <_dtoa_r+0xac>
 800e2ba:	4b92      	ldr	r3, [pc, #584]	; (800e504 <_dtoa_r+0x2dc>)
 800e2bc:	e022      	b.n	800e304 <_dtoa_r+0xdc>
 800e2be:	4b92      	ldr	r3, [pc, #584]	; (800e508 <_dtoa_r+0x2e0>)
 800e2c0:	9301      	str	r3, [sp, #4]
 800e2c2:	3308      	adds	r3, #8
 800e2c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e2c6:	6013      	str	r3, [r2, #0]
 800e2c8:	9801      	ldr	r0, [sp, #4]
 800e2ca:	b013      	add	sp, #76	; 0x4c
 800e2cc:	ecbd 8b04 	vpop	{d8-d9}
 800e2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2d4:	4b8b      	ldr	r3, [pc, #556]	; (800e504 <_dtoa_r+0x2dc>)
 800e2d6:	9301      	str	r3, [sp, #4]
 800e2d8:	3303      	adds	r3, #3
 800e2da:	e7f3      	b.n	800e2c4 <_dtoa_r+0x9c>
 800e2dc:	2200      	movs	r2, #0
 800e2de:	2300      	movs	r3, #0
 800e2e0:	4650      	mov	r0, sl
 800e2e2:	4659      	mov	r1, fp
 800e2e4:	f7f2 fbf8 	bl	8000ad8 <__aeabi_dcmpeq>
 800e2e8:	ec4b ab19 	vmov	d9, sl, fp
 800e2ec:	4680      	mov	r8, r0
 800e2ee:	b158      	cbz	r0, 800e308 <_dtoa_r+0xe0>
 800e2f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	6013      	str	r3, [r2, #0]
 800e2f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	f000 856b 	beq.w	800edd4 <_dtoa_r+0xbac>
 800e2fe:	4883      	ldr	r0, [pc, #524]	; (800e50c <_dtoa_r+0x2e4>)
 800e300:	6018      	str	r0, [r3, #0]
 800e302:	1e43      	subs	r3, r0, #1
 800e304:	9301      	str	r3, [sp, #4]
 800e306:	e7df      	b.n	800e2c8 <_dtoa_r+0xa0>
 800e308:	ec4b ab10 	vmov	d0, sl, fp
 800e30c:	aa10      	add	r2, sp, #64	; 0x40
 800e30e:	a911      	add	r1, sp, #68	; 0x44
 800e310:	4620      	mov	r0, r4
 800e312:	f001 fcf3 	bl	800fcfc <__d2b>
 800e316:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e31a:	ee08 0a10 	vmov	s16, r0
 800e31e:	2d00      	cmp	r5, #0
 800e320:	f000 8084 	beq.w	800e42c <_dtoa_r+0x204>
 800e324:	ee19 3a90 	vmov	r3, s19
 800e328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e32c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e330:	4656      	mov	r6, sl
 800e332:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e336:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e33a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e33e:	4b74      	ldr	r3, [pc, #464]	; (800e510 <_dtoa_r+0x2e8>)
 800e340:	2200      	movs	r2, #0
 800e342:	4630      	mov	r0, r6
 800e344:	4639      	mov	r1, r7
 800e346:	f7f1 ffa7 	bl	8000298 <__aeabi_dsub>
 800e34a:	a365      	add	r3, pc, #404	; (adr r3, 800e4e0 <_dtoa_r+0x2b8>)
 800e34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e350:	f7f2 f95a 	bl	8000608 <__aeabi_dmul>
 800e354:	a364      	add	r3, pc, #400	; (adr r3, 800e4e8 <_dtoa_r+0x2c0>)
 800e356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35a:	f7f1 ff9f 	bl	800029c <__adddf3>
 800e35e:	4606      	mov	r6, r0
 800e360:	4628      	mov	r0, r5
 800e362:	460f      	mov	r7, r1
 800e364:	f7f2 f8e6 	bl	8000534 <__aeabi_i2d>
 800e368:	a361      	add	r3, pc, #388	; (adr r3, 800e4f0 <_dtoa_r+0x2c8>)
 800e36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36e:	f7f2 f94b 	bl	8000608 <__aeabi_dmul>
 800e372:	4602      	mov	r2, r0
 800e374:	460b      	mov	r3, r1
 800e376:	4630      	mov	r0, r6
 800e378:	4639      	mov	r1, r7
 800e37a:	f7f1 ff8f 	bl	800029c <__adddf3>
 800e37e:	4606      	mov	r6, r0
 800e380:	460f      	mov	r7, r1
 800e382:	f7f2 fbf1 	bl	8000b68 <__aeabi_d2iz>
 800e386:	2200      	movs	r2, #0
 800e388:	9000      	str	r0, [sp, #0]
 800e38a:	2300      	movs	r3, #0
 800e38c:	4630      	mov	r0, r6
 800e38e:	4639      	mov	r1, r7
 800e390:	f7f2 fbac 	bl	8000aec <__aeabi_dcmplt>
 800e394:	b150      	cbz	r0, 800e3ac <_dtoa_r+0x184>
 800e396:	9800      	ldr	r0, [sp, #0]
 800e398:	f7f2 f8cc 	bl	8000534 <__aeabi_i2d>
 800e39c:	4632      	mov	r2, r6
 800e39e:	463b      	mov	r3, r7
 800e3a0:	f7f2 fb9a 	bl	8000ad8 <__aeabi_dcmpeq>
 800e3a4:	b910      	cbnz	r0, 800e3ac <_dtoa_r+0x184>
 800e3a6:	9b00      	ldr	r3, [sp, #0]
 800e3a8:	3b01      	subs	r3, #1
 800e3aa:	9300      	str	r3, [sp, #0]
 800e3ac:	9b00      	ldr	r3, [sp, #0]
 800e3ae:	2b16      	cmp	r3, #22
 800e3b0:	d85a      	bhi.n	800e468 <_dtoa_r+0x240>
 800e3b2:	9a00      	ldr	r2, [sp, #0]
 800e3b4:	4b57      	ldr	r3, [pc, #348]	; (800e514 <_dtoa_r+0x2ec>)
 800e3b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3be:	ec51 0b19 	vmov	r0, r1, d9
 800e3c2:	f7f2 fb93 	bl	8000aec <__aeabi_dcmplt>
 800e3c6:	2800      	cmp	r0, #0
 800e3c8:	d050      	beq.n	800e46c <_dtoa_r+0x244>
 800e3ca:	9b00      	ldr	r3, [sp, #0]
 800e3cc:	3b01      	subs	r3, #1
 800e3ce:	9300      	str	r3, [sp, #0]
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e3d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e3d6:	1b5d      	subs	r5, r3, r5
 800e3d8:	1e6b      	subs	r3, r5, #1
 800e3da:	9305      	str	r3, [sp, #20]
 800e3dc:	bf45      	ittet	mi
 800e3de:	f1c5 0301 	rsbmi	r3, r5, #1
 800e3e2:	9304      	strmi	r3, [sp, #16]
 800e3e4:	2300      	movpl	r3, #0
 800e3e6:	2300      	movmi	r3, #0
 800e3e8:	bf4c      	ite	mi
 800e3ea:	9305      	strmi	r3, [sp, #20]
 800e3ec:	9304      	strpl	r3, [sp, #16]
 800e3ee:	9b00      	ldr	r3, [sp, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	db3d      	blt.n	800e470 <_dtoa_r+0x248>
 800e3f4:	9b05      	ldr	r3, [sp, #20]
 800e3f6:	9a00      	ldr	r2, [sp, #0]
 800e3f8:	920a      	str	r2, [sp, #40]	; 0x28
 800e3fa:	4413      	add	r3, r2
 800e3fc:	9305      	str	r3, [sp, #20]
 800e3fe:	2300      	movs	r3, #0
 800e400:	9307      	str	r3, [sp, #28]
 800e402:	9b06      	ldr	r3, [sp, #24]
 800e404:	2b09      	cmp	r3, #9
 800e406:	f200 8089 	bhi.w	800e51c <_dtoa_r+0x2f4>
 800e40a:	2b05      	cmp	r3, #5
 800e40c:	bfc4      	itt	gt
 800e40e:	3b04      	subgt	r3, #4
 800e410:	9306      	strgt	r3, [sp, #24]
 800e412:	9b06      	ldr	r3, [sp, #24]
 800e414:	f1a3 0302 	sub.w	r3, r3, #2
 800e418:	bfcc      	ite	gt
 800e41a:	2500      	movgt	r5, #0
 800e41c:	2501      	movle	r5, #1
 800e41e:	2b03      	cmp	r3, #3
 800e420:	f200 8087 	bhi.w	800e532 <_dtoa_r+0x30a>
 800e424:	e8df f003 	tbb	[pc, r3]
 800e428:	59383a2d 	.word	0x59383a2d
 800e42c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e430:	441d      	add	r5, r3
 800e432:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e436:	2b20      	cmp	r3, #32
 800e438:	bfc1      	itttt	gt
 800e43a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e43e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e442:	fa0b f303 	lslgt.w	r3, fp, r3
 800e446:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e44a:	bfda      	itte	le
 800e44c:	f1c3 0320 	rsble	r3, r3, #32
 800e450:	fa06 f003 	lslle.w	r0, r6, r3
 800e454:	4318      	orrgt	r0, r3
 800e456:	f7f2 f85d 	bl	8000514 <__aeabi_ui2d>
 800e45a:	2301      	movs	r3, #1
 800e45c:	4606      	mov	r6, r0
 800e45e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e462:	3d01      	subs	r5, #1
 800e464:	930e      	str	r3, [sp, #56]	; 0x38
 800e466:	e76a      	b.n	800e33e <_dtoa_r+0x116>
 800e468:	2301      	movs	r3, #1
 800e46a:	e7b2      	b.n	800e3d2 <_dtoa_r+0x1aa>
 800e46c:	900b      	str	r0, [sp, #44]	; 0x2c
 800e46e:	e7b1      	b.n	800e3d4 <_dtoa_r+0x1ac>
 800e470:	9b04      	ldr	r3, [sp, #16]
 800e472:	9a00      	ldr	r2, [sp, #0]
 800e474:	1a9b      	subs	r3, r3, r2
 800e476:	9304      	str	r3, [sp, #16]
 800e478:	4253      	negs	r3, r2
 800e47a:	9307      	str	r3, [sp, #28]
 800e47c:	2300      	movs	r3, #0
 800e47e:	930a      	str	r3, [sp, #40]	; 0x28
 800e480:	e7bf      	b.n	800e402 <_dtoa_r+0x1da>
 800e482:	2300      	movs	r3, #0
 800e484:	9308      	str	r3, [sp, #32]
 800e486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e488:	2b00      	cmp	r3, #0
 800e48a:	dc55      	bgt.n	800e538 <_dtoa_r+0x310>
 800e48c:	2301      	movs	r3, #1
 800e48e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e492:	461a      	mov	r2, r3
 800e494:	9209      	str	r2, [sp, #36]	; 0x24
 800e496:	e00c      	b.n	800e4b2 <_dtoa_r+0x28a>
 800e498:	2301      	movs	r3, #1
 800e49a:	e7f3      	b.n	800e484 <_dtoa_r+0x25c>
 800e49c:	2300      	movs	r3, #0
 800e49e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4a0:	9308      	str	r3, [sp, #32]
 800e4a2:	9b00      	ldr	r3, [sp, #0]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	9302      	str	r3, [sp, #8]
 800e4a8:	3301      	adds	r3, #1
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	9303      	str	r3, [sp, #12]
 800e4ae:	bfb8      	it	lt
 800e4b0:	2301      	movlt	r3, #1
 800e4b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	6042      	str	r2, [r0, #4]
 800e4b8:	2204      	movs	r2, #4
 800e4ba:	f102 0614 	add.w	r6, r2, #20
 800e4be:	429e      	cmp	r6, r3
 800e4c0:	6841      	ldr	r1, [r0, #4]
 800e4c2:	d93d      	bls.n	800e540 <_dtoa_r+0x318>
 800e4c4:	4620      	mov	r0, r4
 800e4c6:	f001 f82b 	bl	800f520 <_Balloc>
 800e4ca:	9001      	str	r0, [sp, #4]
 800e4cc:	2800      	cmp	r0, #0
 800e4ce:	d13b      	bne.n	800e548 <_dtoa_r+0x320>
 800e4d0:	4b11      	ldr	r3, [pc, #68]	; (800e518 <_dtoa_r+0x2f0>)
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e4d8:	e6c0      	b.n	800e25c <_dtoa_r+0x34>
 800e4da:	2301      	movs	r3, #1
 800e4dc:	e7df      	b.n	800e49e <_dtoa_r+0x276>
 800e4de:	bf00      	nop
 800e4e0:	636f4361 	.word	0x636f4361
 800e4e4:	3fd287a7 	.word	0x3fd287a7
 800e4e8:	8b60c8b3 	.word	0x8b60c8b3
 800e4ec:	3fc68a28 	.word	0x3fc68a28
 800e4f0:	509f79fb 	.word	0x509f79fb
 800e4f4:	3fd34413 	.word	0x3fd34413
 800e4f8:	080113be 	.word	0x080113be
 800e4fc:	080113d5 	.word	0x080113d5
 800e500:	7ff00000 	.word	0x7ff00000
 800e504:	080113ba 	.word	0x080113ba
 800e508:	080113b1 	.word	0x080113b1
 800e50c:	08011231 	.word	0x08011231
 800e510:	3ff80000 	.word	0x3ff80000
 800e514:	08011540 	.word	0x08011540
 800e518:	08011430 	.word	0x08011430
 800e51c:	2501      	movs	r5, #1
 800e51e:	2300      	movs	r3, #0
 800e520:	9306      	str	r3, [sp, #24]
 800e522:	9508      	str	r5, [sp, #32]
 800e524:	f04f 33ff 	mov.w	r3, #4294967295
 800e528:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e52c:	2200      	movs	r2, #0
 800e52e:	2312      	movs	r3, #18
 800e530:	e7b0      	b.n	800e494 <_dtoa_r+0x26c>
 800e532:	2301      	movs	r3, #1
 800e534:	9308      	str	r3, [sp, #32]
 800e536:	e7f5      	b.n	800e524 <_dtoa_r+0x2fc>
 800e538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e53a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e53e:	e7b8      	b.n	800e4b2 <_dtoa_r+0x28a>
 800e540:	3101      	adds	r1, #1
 800e542:	6041      	str	r1, [r0, #4]
 800e544:	0052      	lsls	r2, r2, #1
 800e546:	e7b8      	b.n	800e4ba <_dtoa_r+0x292>
 800e548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e54a:	9a01      	ldr	r2, [sp, #4]
 800e54c:	601a      	str	r2, [r3, #0]
 800e54e:	9b03      	ldr	r3, [sp, #12]
 800e550:	2b0e      	cmp	r3, #14
 800e552:	f200 809d 	bhi.w	800e690 <_dtoa_r+0x468>
 800e556:	2d00      	cmp	r5, #0
 800e558:	f000 809a 	beq.w	800e690 <_dtoa_r+0x468>
 800e55c:	9b00      	ldr	r3, [sp, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	dd32      	ble.n	800e5c8 <_dtoa_r+0x3a0>
 800e562:	4ab7      	ldr	r2, [pc, #732]	; (800e840 <_dtoa_r+0x618>)
 800e564:	f003 030f 	and.w	r3, r3, #15
 800e568:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e56c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e570:	9b00      	ldr	r3, [sp, #0]
 800e572:	05d8      	lsls	r0, r3, #23
 800e574:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e578:	d516      	bpl.n	800e5a8 <_dtoa_r+0x380>
 800e57a:	4bb2      	ldr	r3, [pc, #712]	; (800e844 <_dtoa_r+0x61c>)
 800e57c:	ec51 0b19 	vmov	r0, r1, d9
 800e580:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e584:	f7f2 f96a 	bl	800085c <__aeabi_ddiv>
 800e588:	f007 070f 	and.w	r7, r7, #15
 800e58c:	4682      	mov	sl, r0
 800e58e:	468b      	mov	fp, r1
 800e590:	2503      	movs	r5, #3
 800e592:	4eac      	ldr	r6, [pc, #688]	; (800e844 <_dtoa_r+0x61c>)
 800e594:	b957      	cbnz	r7, 800e5ac <_dtoa_r+0x384>
 800e596:	4642      	mov	r2, r8
 800e598:	464b      	mov	r3, r9
 800e59a:	4650      	mov	r0, sl
 800e59c:	4659      	mov	r1, fp
 800e59e:	f7f2 f95d 	bl	800085c <__aeabi_ddiv>
 800e5a2:	4682      	mov	sl, r0
 800e5a4:	468b      	mov	fp, r1
 800e5a6:	e028      	b.n	800e5fa <_dtoa_r+0x3d2>
 800e5a8:	2502      	movs	r5, #2
 800e5aa:	e7f2      	b.n	800e592 <_dtoa_r+0x36a>
 800e5ac:	07f9      	lsls	r1, r7, #31
 800e5ae:	d508      	bpl.n	800e5c2 <_dtoa_r+0x39a>
 800e5b0:	4640      	mov	r0, r8
 800e5b2:	4649      	mov	r1, r9
 800e5b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e5b8:	f7f2 f826 	bl	8000608 <__aeabi_dmul>
 800e5bc:	3501      	adds	r5, #1
 800e5be:	4680      	mov	r8, r0
 800e5c0:	4689      	mov	r9, r1
 800e5c2:	107f      	asrs	r7, r7, #1
 800e5c4:	3608      	adds	r6, #8
 800e5c6:	e7e5      	b.n	800e594 <_dtoa_r+0x36c>
 800e5c8:	f000 809b 	beq.w	800e702 <_dtoa_r+0x4da>
 800e5cc:	9b00      	ldr	r3, [sp, #0]
 800e5ce:	4f9d      	ldr	r7, [pc, #628]	; (800e844 <_dtoa_r+0x61c>)
 800e5d0:	425e      	negs	r6, r3
 800e5d2:	4b9b      	ldr	r3, [pc, #620]	; (800e840 <_dtoa_r+0x618>)
 800e5d4:	f006 020f 	and.w	r2, r6, #15
 800e5d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e0:	ec51 0b19 	vmov	r0, r1, d9
 800e5e4:	f7f2 f810 	bl	8000608 <__aeabi_dmul>
 800e5e8:	1136      	asrs	r6, r6, #4
 800e5ea:	4682      	mov	sl, r0
 800e5ec:	468b      	mov	fp, r1
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	2502      	movs	r5, #2
 800e5f2:	2e00      	cmp	r6, #0
 800e5f4:	d17a      	bne.n	800e6ec <_dtoa_r+0x4c4>
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d1d3      	bne.n	800e5a2 <_dtoa_r+0x37a>
 800e5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	f000 8082 	beq.w	800e706 <_dtoa_r+0x4de>
 800e602:	4b91      	ldr	r3, [pc, #580]	; (800e848 <_dtoa_r+0x620>)
 800e604:	2200      	movs	r2, #0
 800e606:	4650      	mov	r0, sl
 800e608:	4659      	mov	r1, fp
 800e60a:	f7f2 fa6f 	bl	8000aec <__aeabi_dcmplt>
 800e60e:	2800      	cmp	r0, #0
 800e610:	d079      	beq.n	800e706 <_dtoa_r+0x4de>
 800e612:	9b03      	ldr	r3, [sp, #12]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d076      	beq.n	800e706 <_dtoa_r+0x4de>
 800e618:	9b02      	ldr	r3, [sp, #8]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	dd36      	ble.n	800e68c <_dtoa_r+0x464>
 800e61e:	9b00      	ldr	r3, [sp, #0]
 800e620:	4650      	mov	r0, sl
 800e622:	4659      	mov	r1, fp
 800e624:	1e5f      	subs	r7, r3, #1
 800e626:	2200      	movs	r2, #0
 800e628:	4b88      	ldr	r3, [pc, #544]	; (800e84c <_dtoa_r+0x624>)
 800e62a:	f7f1 ffed 	bl	8000608 <__aeabi_dmul>
 800e62e:	9e02      	ldr	r6, [sp, #8]
 800e630:	4682      	mov	sl, r0
 800e632:	468b      	mov	fp, r1
 800e634:	3501      	adds	r5, #1
 800e636:	4628      	mov	r0, r5
 800e638:	f7f1 ff7c 	bl	8000534 <__aeabi_i2d>
 800e63c:	4652      	mov	r2, sl
 800e63e:	465b      	mov	r3, fp
 800e640:	f7f1 ffe2 	bl	8000608 <__aeabi_dmul>
 800e644:	4b82      	ldr	r3, [pc, #520]	; (800e850 <_dtoa_r+0x628>)
 800e646:	2200      	movs	r2, #0
 800e648:	f7f1 fe28 	bl	800029c <__adddf3>
 800e64c:	46d0      	mov	r8, sl
 800e64e:	46d9      	mov	r9, fp
 800e650:	4682      	mov	sl, r0
 800e652:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e656:	2e00      	cmp	r6, #0
 800e658:	d158      	bne.n	800e70c <_dtoa_r+0x4e4>
 800e65a:	4b7e      	ldr	r3, [pc, #504]	; (800e854 <_dtoa_r+0x62c>)
 800e65c:	2200      	movs	r2, #0
 800e65e:	4640      	mov	r0, r8
 800e660:	4649      	mov	r1, r9
 800e662:	f7f1 fe19 	bl	8000298 <__aeabi_dsub>
 800e666:	4652      	mov	r2, sl
 800e668:	465b      	mov	r3, fp
 800e66a:	4680      	mov	r8, r0
 800e66c:	4689      	mov	r9, r1
 800e66e:	f7f2 fa5b 	bl	8000b28 <__aeabi_dcmpgt>
 800e672:	2800      	cmp	r0, #0
 800e674:	f040 8295 	bne.w	800eba2 <_dtoa_r+0x97a>
 800e678:	4652      	mov	r2, sl
 800e67a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e67e:	4640      	mov	r0, r8
 800e680:	4649      	mov	r1, r9
 800e682:	f7f2 fa33 	bl	8000aec <__aeabi_dcmplt>
 800e686:	2800      	cmp	r0, #0
 800e688:	f040 8289 	bne.w	800eb9e <_dtoa_r+0x976>
 800e68c:	ec5b ab19 	vmov	sl, fp, d9
 800e690:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e692:	2b00      	cmp	r3, #0
 800e694:	f2c0 8148 	blt.w	800e928 <_dtoa_r+0x700>
 800e698:	9a00      	ldr	r2, [sp, #0]
 800e69a:	2a0e      	cmp	r2, #14
 800e69c:	f300 8144 	bgt.w	800e928 <_dtoa_r+0x700>
 800e6a0:	4b67      	ldr	r3, [pc, #412]	; (800e840 <_dtoa_r+0x618>)
 800e6a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e6a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	f280 80d5 	bge.w	800e85c <_dtoa_r+0x634>
 800e6b2:	9b03      	ldr	r3, [sp, #12]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f300 80d1 	bgt.w	800e85c <_dtoa_r+0x634>
 800e6ba:	f040 826f 	bne.w	800eb9c <_dtoa_r+0x974>
 800e6be:	4b65      	ldr	r3, [pc, #404]	; (800e854 <_dtoa_r+0x62c>)
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	4640      	mov	r0, r8
 800e6c4:	4649      	mov	r1, r9
 800e6c6:	f7f1 ff9f 	bl	8000608 <__aeabi_dmul>
 800e6ca:	4652      	mov	r2, sl
 800e6cc:	465b      	mov	r3, fp
 800e6ce:	f7f2 fa21 	bl	8000b14 <__aeabi_dcmpge>
 800e6d2:	9e03      	ldr	r6, [sp, #12]
 800e6d4:	4637      	mov	r7, r6
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	f040 8245 	bne.w	800eb66 <_dtoa_r+0x93e>
 800e6dc:	9d01      	ldr	r5, [sp, #4]
 800e6de:	2331      	movs	r3, #49	; 0x31
 800e6e0:	f805 3b01 	strb.w	r3, [r5], #1
 800e6e4:	9b00      	ldr	r3, [sp, #0]
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	9300      	str	r3, [sp, #0]
 800e6ea:	e240      	b.n	800eb6e <_dtoa_r+0x946>
 800e6ec:	07f2      	lsls	r2, r6, #31
 800e6ee:	d505      	bpl.n	800e6fc <_dtoa_r+0x4d4>
 800e6f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6f4:	f7f1 ff88 	bl	8000608 <__aeabi_dmul>
 800e6f8:	3501      	adds	r5, #1
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	1076      	asrs	r6, r6, #1
 800e6fe:	3708      	adds	r7, #8
 800e700:	e777      	b.n	800e5f2 <_dtoa_r+0x3ca>
 800e702:	2502      	movs	r5, #2
 800e704:	e779      	b.n	800e5fa <_dtoa_r+0x3d2>
 800e706:	9f00      	ldr	r7, [sp, #0]
 800e708:	9e03      	ldr	r6, [sp, #12]
 800e70a:	e794      	b.n	800e636 <_dtoa_r+0x40e>
 800e70c:	9901      	ldr	r1, [sp, #4]
 800e70e:	4b4c      	ldr	r3, [pc, #304]	; (800e840 <_dtoa_r+0x618>)
 800e710:	4431      	add	r1, r6
 800e712:	910d      	str	r1, [sp, #52]	; 0x34
 800e714:	9908      	ldr	r1, [sp, #32]
 800e716:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e71a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e71e:	2900      	cmp	r1, #0
 800e720:	d043      	beq.n	800e7aa <_dtoa_r+0x582>
 800e722:	494d      	ldr	r1, [pc, #308]	; (800e858 <_dtoa_r+0x630>)
 800e724:	2000      	movs	r0, #0
 800e726:	f7f2 f899 	bl	800085c <__aeabi_ddiv>
 800e72a:	4652      	mov	r2, sl
 800e72c:	465b      	mov	r3, fp
 800e72e:	f7f1 fdb3 	bl	8000298 <__aeabi_dsub>
 800e732:	9d01      	ldr	r5, [sp, #4]
 800e734:	4682      	mov	sl, r0
 800e736:	468b      	mov	fp, r1
 800e738:	4649      	mov	r1, r9
 800e73a:	4640      	mov	r0, r8
 800e73c:	f7f2 fa14 	bl	8000b68 <__aeabi_d2iz>
 800e740:	4606      	mov	r6, r0
 800e742:	f7f1 fef7 	bl	8000534 <__aeabi_i2d>
 800e746:	4602      	mov	r2, r0
 800e748:	460b      	mov	r3, r1
 800e74a:	4640      	mov	r0, r8
 800e74c:	4649      	mov	r1, r9
 800e74e:	f7f1 fda3 	bl	8000298 <__aeabi_dsub>
 800e752:	3630      	adds	r6, #48	; 0x30
 800e754:	f805 6b01 	strb.w	r6, [r5], #1
 800e758:	4652      	mov	r2, sl
 800e75a:	465b      	mov	r3, fp
 800e75c:	4680      	mov	r8, r0
 800e75e:	4689      	mov	r9, r1
 800e760:	f7f2 f9c4 	bl	8000aec <__aeabi_dcmplt>
 800e764:	2800      	cmp	r0, #0
 800e766:	d163      	bne.n	800e830 <_dtoa_r+0x608>
 800e768:	4642      	mov	r2, r8
 800e76a:	464b      	mov	r3, r9
 800e76c:	4936      	ldr	r1, [pc, #216]	; (800e848 <_dtoa_r+0x620>)
 800e76e:	2000      	movs	r0, #0
 800e770:	f7f1 fd92 	bl	8000298 <__aeabi_dsub>
 800e774:	4652      	mov	r2, sl
 800e776:	465b      	mov	r3, fp
 800e778:	f7f2 f9b8 	bl	8000aec <__aeabi_dcmplt>
 800e77c:	2800      	cmp	r0, #0
 800e77e:	f040 80b5 	bne.w	800e8ec <_dtoa_r+0x6c4>
 800e782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e784:	429d      	cmp	r5, r3
 800e786:	d081      	beq.n	800e68c <_dtoa_r+0x464>
 800e788:	4b30      	ldr	r3, [pc, #192]	; (800e84c <_dtoa_r+0x624>)
 800e78a:	2200      	movs	r2, #0
 800e78c:	4650      	mov	r0, sl
 800e78e:	4659      	mov	r1, fp
 800e790:	f7f1 ff3a 	bl	8000608 <__aeabi_dmul>
 800e794:	4b2d      	ldr	r3, [pc, #180]	; (800e84c <_dtoa_r+0x624>)
 800e796:	4682      	mov	sl, r0
 800e798:	468b      	mov	fp, r1
 800e79a:	4640      	mov	r0, r8
 800e79c:	4649      	mov	r1, r9
 800e79e:	2200      	movs	r2, #0
 800e7a0:	f7f1 ff32 	bl	8000608 <__aeabi_dmul>
 800e7a4:	4680      	mov	r8, r0
 800e7a6:	4689      	mov	r9, r1
 800e7a8:	e7c6      	b.n	800e738 <_dtoa_r+0x510>
 800e7aa:	4650      	mov	r0, sl
 800e7ac:	4659      	mov	r1, fp
 800e7ae:	f7f1 ff2b 	bl	8000608 <__aeabi_dmul>
 800e7b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7b4:	9d01      	ldr	r5, [sp, #4]
 800e7b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e7b8:	4682      	mov	sl, r0
 800e7ba:	468b      	mov	fp, r1
 800e7bc:	4649      	mov	r1, r9
 800e7be:	4640      	mov	r0, r8
 800e7c0:	f7f2 f9d2 	bl	8000b68 <__aeabi_d2iz>
 800e7c4:	4606      	mov	r6, r0
 800e7c6:	f7f1 feb5 	bl	8000534 <__aeabi_i2d>
 800e7ca:	3630      	adds	r6, #48	; 0x30
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	4640      	mov	r0, r8
 800e7d2:	4649      	mov	r1, r9
 800e7d4:	f7f1 fd60 	bl	8000298 <__aeabi_dsub>
 800e7d8:	f805 6b01 	strb.w	r6, [r5], #1
 800e7dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7de:	429d      	cmp	r5, r3
 800e7e0:	4680      	mov	r8, r0
 800e7e2:	4689      	mov	r9, r1
 800e7e4:	f04f 0200 	mov.w	r2, #0
 800e7e8:	d124      	bne.n	800e834 <_dtoa_r+0x60c>
 800e7ea:	4b1b      	ldr	r3, [pc, #108]	; (800e858 <_dtoa_r+0x630>)
 800e7ec:	4650      	mov	r0, sl
 800e7ee:	4659      	mov	r1, fp
 800e7f0:	f7f1 fd54 	bl	800029c <__adddf3>
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	4640      	mov	r0, r8
 800e7fa:	4649      	mov	r1, r9
 800e7fc:	f7f2 f994 	bl	8000b28 <__aeabi_dcmpgt>
 800e800:	2800      	cmp	r0, #0
 800e802:	d173      	bne.n	800e8ec <_dtoa_r+0x6c4>
 800e804:	4652      	mov	r2, sl
 800e806:	465b      	mov	r3, fp
 800e808:	4913      	ldr	r1, [pc, #76]	; (800e858 <_dtoa_r+0x630>)
 800e80a:	2000      	movs	r0, #0
 800e80c:	f7f1 fd44 	bl	8000298 <__aeabi_dsub>
 800e810:	4602      	mov	r2, r0
 800e812:	460b      	mov	r3, r1
 800e814:	4640      	mov	r0, r8
 800e816:	4649      	mov	r1, r9
 800e818:	f7f2 f968 	bl	8000aec <__aeabi_dcmplt>
 800e81c:	2800      	cmp	r0, #0
 800e81e:	f43f af35 	beq.w	800e68c <_dtoa_r+0x464>
 800e822:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e824:	1e6b      	subs	r3, r5, #1
 800e826:	930f      	str	r3, [sp, #60]	; 0x3c
 800e828:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e82c:	2b30      	cmp	r3, #48	; 0x30
 800e82e:	d0f8      	beq.n	800e822 <_dtoa_r+0x5fa>
 800e830:	9700      	str	r7, [sp, #0]
 800e832:	e049      	b.n	800e8c8 <_dtoa_r+0x6a0>
 800e834:	4b05      	ldr	r3, [pc, #20]	; (800e84c <_dtoa_r+0x624>)
 800e836:	f7f1 fee7 	bl	8000608 <__aeabi_dmul>
 800e83a:	4680      	mov	r8, r0
 800e83c:	4689      	mov	r9, r1
 800e83e:	e7bd      	b.n	800e7bc <_dtoa_r+0x594>
 800e840:	08011540 	.word	0x08011540
 800e844:	08011518 	.word	0x08011518
 800e848:	3ff00000 	.word	0x3ff00000
 800e84c:	40240000 	.word	0x40240000
 800e850:	401c0000 	.word	0x401c0000
 800e854:	40140000 	.word	0x40140000
 800e858:	3fe00000 	.word	0x3fe00000
 800e85c:	9d01      	ldr	r5, [sp, #4]
 800e85e:	4656      	mov	r6, sl
 800e860:	465f      	mov	r7, fp
 800e862:	4642      	mov	r2, r8
 800e864:	464b      	mov	r3, r9
 800e866:	4630      	mov	r0, r6
 800e868:	4639      	mov	r1, r7
 800e86a:	f7f1 fff7 	bl	800085c <__aeabi_ddiv>
 800e86e:	f7f2 f97b 	bl	8000b68 <__aeabi_d2iz>
 800e872:	4682      	mov	sl, r0
 800e874:	f7f1 fe5e 	bl	8000534 <__aeabi_i2d>
 800e878:	4642      	mov	r2, r8
 800e87a:	464b      	mov	r3, r9
 800e87c:	f7f1 fec4 	bl	8000608 <__aeabi_dmul>
 800e880:	4602      	mov	r2, r0
 800e882:	460b      	mov	r3, r1
 800e884:	4630      	mov	r0, r6
 800e886:	4639      	mov	r1, r7
 800e888:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e88c:	f7f1 fd04 	bl	8000298 <__aeabi_dsub>
 800e890:	f805 6b01 	strb.w	r6, [r5], #1
 800e894:	9e01      	ldr	r6, [sp, #4]
 800e896:	9f03      	ldr	r7, [sp, #12]
 800e898:	1bae      	subs	r6, r5, r6
 800e89a:	42b7      	cmp	r7, r6
 800e89c:	4602      	mov	r2, r0
 800e89e:	460b      	mov	r3, r1
 800e8a0:	d135      	bne.n	800e90e <_dtoa_r+0x6e6>
 800e8a2:	f7f1 fcfb 	bl	800029c <__adddf3>
 800e8a6:	4642      	mov	r2, r8
 800e8a8:	464b      	mov	r3, r9
 800e8aa:	4606      	mov	r6, r0
 800e8ac:	460f      	mov	r7, r1
 800e8ae:	f7f2 f93b 	bl	8000b28 <__aeabi_dcmpgt>
 800e8b2:	b9d0      	cbnz	r0, 800e8ea <_dtoa_r+0x6c2>
 800e8b4:	4642      	mov	r2, r8
 800e8b6:	464b      	mov	r3, r9
 800e8b8:	4630      	mov	r0, r6
 800e8ba:	4639      	mov	r1, r7
 800e8bc:	f7f2 f90c 	bl	8000ad8 <__aeabi_dcmpeq>
 800e8c0:	b110      	cbz	r0, 800e8c8 <_dtoa_r+0x6a0>
 800e8c2:	f01a 0f01 	tst.w	sl, #1
 800e8c6:	d110      	bne.n	800e8ea <_dtoa_r+0x6c2>
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	ee18 1a10 	vmov	r1, s16
 800e8ce:	f000 fe67 	bl	800f5a0 <_Bfree>
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	9800      	ldr	r0, [sp, #0]
 800e8d6:	702b      	strb	r3, [r5, #0]
 800e8d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e8da:	3001      	adds	r0, #1
 800e8dc:	6018      	str	r0, [r3, #0]
 800e8de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	f43f acf1 	beq.w	800e2c8 <_dtoa_r+0xa0>
 800e8e6:	601d      	str	r5, [r3, #0]
 800e8e8:	e4ee      	b.n	800e2c8 <_dtoa_r+0xa0>
 800e8ea:	9f00      	ldr	r7, [sp, #0]
 800e8ec:	462b      	mov	r3, r5
 800e8ee:	461d      	mov	r5, r3
 800e8f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e8f4:	2a39      	cmp	r2, #57	; 0x39
 800e8f6:	d106      	bne.n	800e906 <_dtoa_r+0x6de>
 800e8f8:	9a01      	ldr	r2, [sp, #4]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d1f7      	bne.n	800e8ee <_dtoa_r+0x6c6>
 800e8fe:	9901      	ldr	r1, [sp, #4]
 800e900:	2230      	movs	r2, #48	; 0x30
 800e902:	3701      	adds	r7, #1
 800e904:	700a      	strb	r2, [r1, #0]
 800e906:	781a      	ldrb	r2, [r3, #0]
 800e908:	3201      	adds	r2, #1
 800e90a:	701a      	strb	r2, [r3, #0]
 800e90c:	e790      	b.n	800e830 <_dtoa_r+0x608>
 800e90e:	4ba6      	ldr	r3, [pc, #664]	; (800eba8 <_dtoa_r+0x980>)
 800e910:	2200      	movs	r2, #0
 800e912:	f7f1 fe79 	bl	8000608 <__aeabi_dmul>
 800e916:	2200      	movs	r2, #0
 800e918:	2300      	movs	r3, #0
 800e91a:	4606      	mov	r6, r0
 800e91c:	460f      	mov	r7, r1
 800e91e:	f7f2 f8db 	bl	8000ad8 <__aeabi_dcmpeq>
 800e922:	2800      	cmp	r0, #0
 800e924:	d09d      	beq.n	800e862 <_dtoa_r+0x63a>
 800e926:	e7cf      	b.n	800e8c8 <_dtoa_r+0x6a0>
 800e928:	9a08      	ldr	r2, [sp, #32]
 800e92a:	2a00      	cmp	r2, #0
 800e92c:	f000 80d7 	beq.w	800eade <_dtoa_r+0x8b6>
 800e930:	9a06      	ldr	r2, [sp, #24]
 800e932:	2a01      	cmp	r2, #1
 800e934:	f300 80ba 	bgt.w	800eaac <_dtoa_r+0x884>
 800e938:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e93a:	2a00      	cmp	r2, #0
 800e93c:	f000 80b2 	beq.w	800eaa4 <_dtoa_r+0x87c>
 800e940:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e944:	9e07      	ldr	r6, [sp, #28]
 800e946:	9d04      	ldr	r5, [sp, #16]
 800e948:	9a04      	ldr	r2, [sp, #16]
 800e94a:	441a      	add	r2, r3
 800e94c:	9204      	str	r2, [sp, #16]
 800e94e:	9a05      	ldr	r2, [sp, #20]
 800e950:	2101      	movs	r1, #1
 800e952:	441a      	add	r2, r3
 800e954:	4620      	mov	r0, r4
 800e956:	9205      	str	r2, [sp, #20]
 800e958:	f000 ff24 	bl	800f7a4 <__i2b>
 800e95c:	4607      	mov	r7, r0
 800e95e:	2d00      	cmp	r5, #0
 800e960:	dd0c      	ble.n	800e97c <_dtoa_r+0x754>
 800e962:	9b05      	ldr	r3, [sp, #20]
 800e964:	2b00      	cmp	r3, #0
 800e966:	dd09      	ble.n	800e97c <_dtoa_r+0x754>
 800e968:	42ab      	cmp	r3, r5
 800e96a:	9a04      	ldr	r2, [sp, #16]
 800e96c:	bfa8      	it	ge
 800e96e:	462b      	movge	r3, r5
 800e970:	1ad2      	subs	r2, r2, r3
 800e972:	9204      	str	r2, [sp, #16]
 800e974:	9a05      	ldr	r2, [sp, #20]
 800e976:	1aed      	subs	r5, r5, r3
 800e978:	1ad3      	subs	r3, r2, r3
 800e97a:	9305      	str	r3, [sp, #20]
 800e97c:	9b07      	ldr	r3, [sp, #28]
 800e97e:	b31b      	cbz	r3, 800e9c8 <_dtoa_r+0x7a0>
 800e980:	9b08      	ldr	r3, [sp, #32]
 800e982:	2b00      	cmp	r3, #0
 800e984:	f000 80af 	beq.w	800eae6 <_dtoa_r+0x8be>
 800e988:	2e00      	cmp	r6, #0
 800e98a:	dd13      	ble.n	800e9b4 <_dtoa_r+0x78c>
 800e98c:	4639      	mov	r1, r7
 800e98e:	4632      	mov	r2, r6
 800e990:	4620      	mov	r0, r4
 800e992:	f000 ffc7 	bl	800f924 <__pow5mult>
 800e996:	ee18 2a10 	vmov	r2, s16
 800e99a:	4601      	mov	r1, r0
 800e99c:	4607      	mov	r7, r0
 800e99e:	4620      	mov	r0, r4
 800e9a0:	f000 ff16 	bl	800f7d0 <__multiply>
 800e9a4:	ee18 1a10 	vmov	r1, s16
 800e9a8:	4680      	mov	r8, r0
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	f000 fdf8 	bl	800f5a0 <_Bfree>
 800e9b0:	ee08 8a10 	vmov	s16, r8
 800e9b4:	9b07      	ldr	r3, [sp, #28]
 800e9b6:	1b9a      	subs	r2, r3, r6
 800e9b8:	d006      	beq.n	800e9c8 <_dtoa_r+0x7a0>
 800e9ba:	ee18 1a10 	vmov	r1, s16
 800e9be:	4620      	mov	r0, r4
 800e9c0:	f000 ffb0 	bl	800f924 <__pow5mult>
 800e9c4:	ee08 0a10 	vmov	s16, r0
 800e9c8:	2101      	movs	r1, #1
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	f000 feea 	bl	800f7a4 <__i2b>
 800e9d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	4606      	mov	r6, r0
 800e9d6:	f340 8088 	ble.w	800eaea <_dtoa_r+0x8c2>
 800e9da:	461a      	mov	r2, r3
 800e9dc:	4601      	mov	r1, r0
 800e9de:	4620      	mov	r0, r4
 800e9e0:	f000 ffa0 	bl	800f924 <__pow5mult>
 800e9e4:	9b06      	ldr	r3, [sp, #24]
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	4606      	mov	r6, r0
 800e9ea:	f340 8081 	ble.w	800eaf0 <_dtoa_r+0x8c8>
 800e9ee:	f04f 0800 	mov.w	r8, #0
 800e9f2:	6933      	ldr	r3, [r6, #16]
 800e9f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e9f8:	6918      	ldr	r0, [r3, #16]
 800e9fa:	f000 fe83 	bl	800f704 <__hi0bits>
 800e9fe:	f1c0 0020 	rsb	r0, r0, #32
 800ea02:	9b05      	ldr	r3, [sp, #20]
 800ea04:	4418      	add	r0, r3
 800ea06:	f010 001f 	ands.w	r0, r0, #31
 800ea0a:	f000 8092 	beq.w	800eb32 <_dtoa_r+0x90a>
 800ea0e:	f1c0 0320 	rsb	r3, r0, #32
 800ea12:	2b04      	cmp	r3, #4
 800ea14:	f340 808a 	ble.w	800eb2c <_dtoa_r+0x904>
 800ea18:	f1c0 001c 	rsb	r0, r0, #28
 800ea1c:	9b04      	ldr	r3, [sp, #16]
 800ea1e:	4403      	add	r3, r0
 800ea20:	9304      	str	r3, [sp, #16]
 800ea22:	9b05      	ldr	r3, [sp, #20]
 800ea24:	4403      	add	r3, r0
 800ea26:	4405      	add	r5, r0
 800ea28:	9305      	str	r3, [sp, #20]
 800ea2a:	9b04      	ldr	r3, [sp, #16]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	dd07      	ble.n	800ea40 <_dtoa_r+0x818>
 800ea30:	ee18 1a10 	vmov	r1, s16
 800ea34:	461a      	mov	r2, r3
 800ea36:	4620      	mov	r0, r4
 800ea38:	f000 ffce 	bl	800f9d8 <__lshift>
 800ea3c:	ee08 0a10 	vmov	s16, r0
 800ea40:	9b05      	ldr	r3, [sp, #20]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	dd05      	ble.n	800ea52 <_dtoa_r+0x82a>
 800ea46:	4631      	mov	r1, r6
 800ea48:	461a      	mov	r2, r3
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	f000 ffc4 	bl	800f9d8 <__lshift>
 800ea50:	4606      	mov	r6, r0
 800ea52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d06e      	beq.n	800eb36 <_dtoa_r+0x90e>
 800ea58:	ee18 0a10 	vmov	r0, s16
 800ea5c:	4631      	mov	r1, r6
 800ea5e:	f001 f82b 	bl	800fab8 <__mcmp>
 800ea62:	2800      	cmp	r0, #0
 800ea64:	da67      	bge.n	800eb36 <_dtoa_r+0x90e>
 800ea66:	9b00      	ldr	r3, [sp, #0]
 800ea68:	3b01      	subs	r3, #1
 800ea6a:	ee18 1a10 	vmov	r1, s16
 800ea6e:	9300      	str	r3, [sp, #0]
 800ea70:	220a      	movs	r2, #10
 800ea72:	2300      	movs	r3, #0
 800ea74:	4620      	mov	r0, r4
 800ea76:	f000 fdb5 	bl	800f5e4 <__multadd>
 800ea7a:	9b08      	ldr	r3, [sp, #32]
 800ea7c:	ee08 0a10 	vmov	s16, r0
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	f000 81b1 	beq.w	800ede8 <_dtoa_r+0xbc0>
 800ea86:	2300      	movs	r3, #0
 800ea88:	4639      	mov	r1, r7
 800ea8a:	220a      	movs	r2, #10
 800ea8c:	4620      	mov	r0, r4
 800ea8e:	f000 fda9 	bl	800f5e4 <__multadd>
 800ea92:	9b02      	ldr	r3, [sp, #8]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	4607      	mov	r7, r0
 800ea98:	f300 808e 	bgt.w	800ebb8 <_dtoa_r+0x990>
 800ea9c:	9b06      	ldr	r3, [sp, #24]
 800ea9e:	2b02      	cmp	r3, #2
 800eaa0:	dc51      	bgt.n	800eb46 <_dtoa_r+0x91e>
 800eaa2:	e089      	b.n	800ebb8 <_dtoa_r+0x990>
 800eaa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eaa6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eaaa:	e74b      	b.n	800e944 <_dtoa_r+0x71c>
 800eaac:	9b03      	ldr	r3, [sp, #12]
 800eaae:	1e5e      	subs	r6, r3, #1
 800eab0:	9b07      	ldr	r3, [sp, #28]
 800eab2:	42b3      	cmp	r3, r6
 800eab4:	bfbf      	itttt	lt
 800eab6:	9b07      	ldrlt	r3, [sp, #28]
 800eab8:	9607      	strlt	r6, [sp, #28]
 800eaba:	1af2      	sublt	r2, r6, r3
 800eabc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800eabe:	bfb6      	itet	lt
 800eac0:	189b      	addlt	r3, r3, r2
 800eac2:	1b9e      	subge	r6, r3, r6
 800eac4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800eac6:	9b03      	ldr	r3, [sp, #12]
 800eac8:	bfb8      	it	lt
 800eaca:	2600      	movlt	r6, #0
 800eacc:	2b00      	cmp	r3, #0
 800eace:	bfb7      	itett	lt
 800ead0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ead4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ead8:	1a9d      	sublt	r5, r3, r2
 800eada:	2300      	movlt	r3, #0
 800eadc:	e734      	b.n	800e948 <_dtoa_r+0x720>
 800eade:	9e07      	ldr	r6, [sp, #28]
 800eae0:	9d04      	ldr	r5, [sp, #16]
 800eae2:	9f08      	ldr	r7, [sp, #32]
 800eae4:	e73b      	b.n	800e95e <_dtoa_r+0x736>
 800eae6:	9a07      	ldr	r2, [sp, #28]
 800eae8:	e767      	b.n	800e9ba <_dtoa_r+0x792>
 800eaea:	9b06      	ldr	r3, [sp, #24]
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	dc18      	bgt.n	800eb22 <_dtoa_r+0x8fa>
 800eaf0:	f1ba 0f00 	cmp.w	sl, #0
 800eaf4:	d115      	bne.n	800eb22 <_dtoa_r+0x8fa>
 800eaf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eafa:	b993      	cbnz	r3, 800eb22 <_dtoa_r+0x8fa>
 800eafc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eb00:	0d1b      	lsrs	r3, r3, #20
 800eb02:	051b      	lsls	r3, r3, #20
 800eb04:	b183      	cbz	r3, 800eb28 <_dtoa_r+0x900>
 800eb06:	9b04      	ldr	r3, [sp, #16]
 800eb08:	3301      	adds	r3, #1
 800eb0a:	9304      	str	r3, [sp, #16]
 800eb0c:	9b05      	ldr	r3, [sp, #20]
 800eb0e:	3301      	adds	r3, #1
 800eb10:	9305      	str	r3, [sp, #20]
 800eb12:	f04f 0801 	mov.w	r8, #1
 800eb16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	f47f af6a 	bne.w	800e9f2 <_dtoa_r+0x7ca>
 800eb1e:	2001      	movs	r0, #1
 800eb20:	e76f      	b.n	800ea02 <_dtoa_r+0x7da>
 800eb22:	f04f 0800 	mov.w	r8, #0
 800eb26:	e7f6      	b.n	800eb16 <_dtoa_r+0x8ee>
 800eb28:	4698      	mov	r8, r3
 800eb2a:	e7f4      	b.n	800eb16 <_dtoa_r+0x8ee>
 800eb2c:	f43f af7d 	beq.w	800ea2a <_dtoa_r+0x802>
 800eb30:	4618      	mov	r0, r3
 800eb32:	301c      	adds	r0, #28
 800eb34:	e772      	b.n	800ea1c <_dtoa_r+0x7f4>
 800eb36:	9b03      	ldr	r3, [sp, #12]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	dc37      	bgt.n	800ebac <_dtoa_r+0x984>
 800eb3c:	9b06      	ldr	r3, [sp, #24]
 800eb3e:	2b02      	cmp	r3, #2
 800eb40:	dd34      	ble.n	800ebac <_dtoa_r+0x984>
 800eb42:	9b03      	ldr	r3, [sp, #12]
 800eb44:	9302      	str	r3, [sp, #8]
 800eb46:	9b02      	ldr	r3, [sp, #8]
 800eb48:	b96b      	cbnz	r3, 800eb66 <_dtoa_r+0x93e>
 800eb4a:	4631      	mov	r1, r6
 800eb4c:	2205      	movs	r2, #5
 800eb4e:	4620      	mov	r0, r4
 800eb50:	f000 fd48 	bl	800f5e4 <__multadd>
 800eb54:	4601      	mov	r1, r0
 800eb56:	4606      	mov	r6, r0
 800eb58:	ee18 0a10 	vmov	r0, s16
 800eb5c:	f000 ffac 	bl	800fab8 <__mcmp>
 800eb60:	2800      	cmp	r0, #0
 800eb62:	f73f adbb 	bgt.w	800e6dc <_dtoa_r+0x4b4>
 800eb66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb68:	9d01      	ldr	r5, [sp, #4]
 800eb6a:	43db      	mvns	r3, r3
 800eb6c:	9300      	str	r3, [sp, #0]
 800eb6e:	f04f 0800 	mov.w	r8, #0
 800eb72:	4631      	mov	r1, r6
 800eb74:	4620      	mov	r0, r4
 800eb76:	f000 fd13 	bl	800f5a0 <_Bfree>
 800eb7a:	2f00      	cmp	r7, #0
 800eb7c:	f43f aea4 	beq.w	800e8c8 <_dtoa_r+0x6a0>
 800eb80:	f1b8 0f00 	cmp.w	r8, #0
 800eb84:	d005      	beq.n	800eb92 <_dtoa_r+0x96a>
 800eb86:	45b8      	cmp	r8, r7
 800eb88:	d003      	beq.n	800eb92 <_dtoa_r+0x96a>
 800eb8a:	4641      	mov	r1, r8
 800eb8c:	4620      	mov	r0, r4
 800eb8e:	f000 fd07 	bl	800f5a0 <_Bfree>
 800eb92:	4639      	mov	r1, r7
 800eb94:	4620      	mov	r0, r4
 800eb96:	f000 fd03 	bl	800f5a0 <_Bfree>
 800eb9a:	e695      	b.n	800e8c8 <_dtoa_r+0x6a0>
 800eb9c:	2600      	movs	r6, #0
 800eb9e:	4637      	mov	r7, r6
 800eba0:	e7e1      	b.n	800eb66 <_dtoa_r+0x93e>
 800eba2:	9700      	str	r7, [sp, #0]
 800eba4:	4637      	mov	r7, r6
 800eba6:	e599      	b.n	800e6dc <_dtoa_r+0x4b4>
 800eba8:	40240000 	.word	0x40240000
 800ebac:	9b08      	ldr	r3, [sp, #32]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	f000 80ca 	beq.w	800ed48 <_dtoa_r+0xb20>
 800ebb4:	9b03      	ldr	r3, [sp, #12]
 800ebb6:	9302      	str	r3, [sp, #8]
 800ebb8:	2d00      	cmp	r5, #0
 800ebba:	dd05      	ble.n	800ebc8 <_dtoa_r+0x9a0>
 800ebbc:	4639      	mov	r1, r7
 800ebbe:	462a      	mov	r2, r5
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	f000 ff09 	bl	800f9d8 <__lshift>
 800ebc6:	4607      	mov	r7, r0
 800ebc8:	f1b8 0f00 	cmp.w	r8, #0
 800ebcc:	d05b      	beq.n	800ec86 <_dtoa_r+0xa5e>
 800ebce:	6879      	ldr	r1, [r7, #4]
 800ebd0:	4620      	mov	r0, r4
 800ebd2:	f000 fca5 	bl	800f520 <_Balloc>
 800ebd6:	4605      	mov	r5, r0
 800ebd8:	b928      	cbnz	r0, 800ebe6 <_dtoa_r+0x9be>
 800ebda:	4b87      	ldr	r3, [pc, #540]	; (800edf8 <_dtoa_r+0xbd0>)
 800ebdc:	4602      	mov	r2, r0
 800ebde:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ebe2:	f7ff bb3b 	b.w	800e25c <_dtoa_r+0x34>
 800ebe6:	693a      	ldr	r2, [r7, #16]
 800ebe8:	3202      	adds	r2, #2
 800ebea:	0092      	lsls	r2, r2, #2
 800ebec:	f107 010c 	add.w	r1, r7, #12
 800ebf0:	300c      	adds	r0, #12
 800ebf2:	f7fd fd29 	bl	800c648 <memcpy>
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	4629      	mov	r1, r5
 800ebfa:	4620      	mov	r0, r4
 800ebfc:	f000 feec 	bl	800f9d8 <__lshift>
 800ec00:	9b01      	ldr	r3, [sp, #4]
 800ec02:	f103 0901 	add.w	r9, r3, #1
 800ec06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ec0a:	4413      	add	r3, r2
 800ec0c:	9305      	str	r3, [sp, #20]
 800ec0e:	f00a 0301 	and.w	r3, sl, #1
 800ec12:	46b8      	mov	r8, r7
 800ec14:	9304      	str	r3, [sp, #16]
 800ec16:	4607      	mov	r7, r0
 800ec18:	4631      	mov	r1, r6
 800ec1a:	ee18 0a10 	vmov	r0, s16
 800ec1e:	f7ff fa77 	bl	800e110 <quorem>
 800ec22:	4641      	mov	r1, r8
 800ec24:	9002      	str	r0, [sp, #8]
 800ec26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ec2a:	ee18 0a10 	vmov	r0, s16
 800ec2e:	f000 ff43 	bl	800fab8 <__mcmp>
 800ec32:	463a      	mov	r2, r7
 800ec34:	9003      	str	r0, [sp, #12]
 800ec36:	4631      	mov	r1, r6
 800ec38:	4620      	mov	r0, r4
 800ec3a:	f000 ff59 	bl	800faf0 <__mdiff>
 800ec3e:	68c2      	ldr	r2, [r0, #12]
 800ec40:	f109 3bff 	add.w	fp, r9, #4294967295
 800ec44:	4605      	mov	r5, r0
 800ec46:	bb02      	cbnz	r2, 800ec8a <_dtoa_r+0xa62>
 800ec48:	4601      	mov	r1, r0
 800ec4a:	ee18 0a10 	vmov	r0, s16
 800ec4e:	f000 ff33 	bl	800fab8 <__mcmp>
 800ec52:	4602      	mov	r2, r0
 800ec54:	4629      	mov	r1, r5
 800ec56:	4620      	mov	r0, r4
 800ec58:	9207      	str	r2, [sp, #28]
 800ec5a:	f000 fca1 	bl	800f5a0 <_Bfree>
 800ec5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ec62:	ea43 0102 	orr.w	r1, r3, r2
 800ec66:	9b04      	ldr	r3, [sp, #16]
 800ec68:	430b      	orrs	r3, r1
 800ec6a:	464d      	mov	r5, r9
 800ec6c:	d10f      	bne.n	800ec8e <_dtoa_r+0xa66>
 800ec6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec72:	d02a      	beq.n	800ecca <_dtoa_r+0xaa2>
 800ec74:	9b03      	ldr	r3, [sp, #12]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	dd02      	ble.n	800ec80 <_dtoa_r+0xa58>
 800ec7a:	9b02      	ldr	r3, [sp, #8]
 800ec7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ec80:	f88b a000 	strb.w	sl, [fp]
 800ec84:	e775      	b.n	800eb72 <_dtoa_r+0x94a>
 800ec86:	4638      	mov	r0, r7
 800ec88:	e7ba      	b.n	800ec00 <_dtoa_r+0x9d8>
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	e7e2      	b.n	800ec54 <_dtoa_r+0xa2c>
 800ec8e:	9b03      	ldr	r3, [sp, #12]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	db04      	blt.n	800ec9e <_dtoa_r+0xa76>
 800ec94:	9906      	ldr	r1, [sp, #24]
 800ec96:	430b      	orrs	r3, r1
 800ec98:	9904      	ldr	r1, [sp, #16]
 800ec9a:	430b      	orrs	r3, r1
 800ec9c:	d122      	bne.n	800ece4 <_dtoa_r+0xabc>
 800ec9e:	2a00      	cmp	r2, #0
 800eca0:	ddee      	ble.n	800ec80 <_dtoa_r+0xa58>
 800eca2:	ee18 1a10 	vmov	r1, s16
 800eca6:	2201      	movs	r2, #1
 800eca8:	4620      	mov	r0, r4
 800ecaa:	f000 fe95 	bl	800f9d8 <__lshift>
 800ecae:	4631      	mov	r1, r6
 800ecb0:	ee08 0a10 	vmov	s16, r0
 800ecb4:	f000 ff00 	bl	800fab8 <__mcmp>
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	dc03      	bgt.n	800ecc4 <_dtoa_r+0xa9c>
 800ecbc:	d1e0      	bne.n	800ec80 <_dtoa_r+0xa58>
 800ecbe:	f01a 0f01 	tst.w	sl, #1
 800ecc2:	d0dd      	beq.n	800ec80 <_dtoa_r+0xa58>
 800ecc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ecc8:	d1d7      	bne.n	800ec7a <_dtoa_r+0xa52>
 800ecca:	2339      	movs	r3, #57	; 0x39
 800eccc:	f88b 3000 	strb.w	r3, [fp]
 800ecd0:	462b      	mov	r3, r5
 800ecd2:	461d      	mov	r5, r3
 800ecd4:	3b01      	subs	r3, #1
 800ecd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ecda:	2a39      	cmp	r2, #57	; 0x39
 800ecdc:	d071      	beq.n	800edc2 <_dtoa_r+0xb9a>
 800ecde:	3201      	adds	r2, #1
 800ece0:	701a      	strb	r2, [r3, #0]
 800ece2:	e746      	b.n	800eb72 <_dtoa_r+0x94a>
 800ece4:	2a00      	cmp	r2, #0
 800ece6:	dd07      	ble.n	800ecf8 <_dtoa_r+0xad0>
 800ece8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ecec:	d0ed      	beq.n	800ecca <_dtoa_r+0xaa2>
 800ecee:	f10a 0301 	add.w	r3, sl, #1
 800ecf2:	f88b 3000 	strb.w	r3, [fp]
 800ecf6:	e73c      	b.n	800eb72 <_dtoa_r+0x94a>
 800ecf8:	9b05      	ldr	r3, [sp, #20]
 800ecfa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ecfe:	4599      	cmp	r9, r3
 800ed00:	d047      	beq.n	800ed92 <_dtoa_r+0xb6a>
 800ed02:	ee18 1a10 	vmov	r1, s16
 800ed06:	2300      	movs	r3, #0
 800ed08:	220a      	movs	r2, #10
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f000 fc6a 	bl	800f5e4 <__multadd>
 800ed10:	45b8      	cmp	r8, r7
 800ed12:	ee08 0a10 	vmov	s16, r0
 800ed16:	f04f 0300 	mov.w	r3, #0
 800ed1a:	f04f 020a 	mov.w	r2, #10
 800ed1e:	4641      	mov	r1, r8
 800ed20:	4620      	mov	r0, r4
 800ed22:	d106      	bne.n	800ed32 <_dtoa_r+0xb0a>
 800ed24:	f000 fc5e 	bl	800f5e4 <__multadd>
 800ed28:	4680      	mov	r8, r0
 800ed2a:	4607      	mov	r7, r0
 800ed2c:	f109 0901 	add.w	r9, r9, #1
 800ed30:	e772      	b.n	800ec18 <_dtoa_r+0x9f0>
 800ed32:	f000 fc57 	bl	800f5e4 <__multadd>
 800ed36:	4639      	mov	r1, r7
 800ed38:	4680      	mov	r8, r0
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	220a      	movs	r2, #10
 800ed3e:	4620      	mov	r0, r4
 800ed40:	f000 fc50 	bl	800f5e4 <__multadd>
 800ed44:	4607      	mov	r7, r0
 800ed46:	e7f1      	b.n	800ed2c <_dtoa_r+0xb04>
 800ed48:	9b03      	ldr	r3, [sp, #12]
 800ed4a:	9302      	str	r3, [sp, #8]
 800ed4c:	9d01      	ldr	r5, [sp, #4]
 800ed4e:	ee18 0a10 	vmov	r0, s16
 800ed52:	4631      	mov	r1, r6
 800ed54:	f7ff f9dc 	bl	800e110 <quorem>
 800ed58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ed5c:	9b01      	ldr	r3, [sp, #4]
 800ed5e:	f805 ab01 	strb.w	sl, [r5], #1
 800ed62:	1aea      	subs	r2, r5, r3
 800ed64:	9b02      	ldr	r3, [sp, #8]
 800ed66:	4293      	cmp	r3, r2
 800ed68:	dd09      	ble.n	800ed7e <_dtoa_r+0xb56>
 800ed6a:	ee18 1a10 	vmov	r1, s16
 800ed6e:	2300      	movs	r3, #0
 800ed70:	220a      	movs	r2, #10
 800ed72:	4620      	mov	r0, r4
 800ed74:	f000 fc36 	bl	800f5e4 <__multadd>
 800ed78:	ee08 0a10 	vmov	s16, r0
 800ed7c:	e7e7      	b.n	800ed4e <_dtoa_r+0xb26>
 800ed7e:	9b02      	ldr	r3, [sp, #8]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	bfc8      	it	gt
 800ed84:	461d      	movgt	r5, r3
 800ed86:	9b01      	ldr	r3, [sp, #4]
 800ed88:	bfd8      	it	le
 800ed8a:	2501      	movle	r5, #1
 800ed8c:	441d      	add	r5, r3
 800ed8e:	f04f 0800 	mov.w	r8, #0
 800ed92:	ee18 1a10 	vmov	r1, s16
 800ed96:	2201      	movs	r2, #1
 800ed98:	4620      	mov	r0, r4
 800ed9a:	f000 fe1d 	bl	800f9d8 <__lshift>
 800ed9e:	4631      	mov	r1, r6
 800eda0:	ee08 0a10 	vmov	s16, r0
 800eda4:	f000 fe88 	bl	800fab8 <__mcmp>
 800eda8:	2800      	cmp	r0, #0
 800edaa:	dc91      	bgt.n	800ecd0 <_dtoa_r+0xaa8>
 800edac:	d102      	bne.n	800edb4 <_dtoa_r+0xb8c>
 800edae:	f01a 0f01 	tst.w	sl, #1
 800edb2:	d18d      	bne.n	800ecd0 <_dtoa_r+0xaa8>
 800edb4:	462b      	mov	r3, r5
 800edb6:	461d      	mov	r5, r3
 800edb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800edbc:	2a30      	cmp	r2, #48	; 0x30
 800edbe:	d0fa      	beq.n	800edb6 <_dtoa_r+0xb8e>
 800edc0:	e6d7      	b.n	800eb72 <_dtoa_r+0x94a>
 800edc2:	9a01      	ldr	r2, [sp, #4]
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d184      	bne.n	800ecd2 <_dtoa_r+0xaaa>
 800edc8:	9b00      	ldr	r3, [sp, #0]
 800edca:	3301      	adds	r3, #1
 800edcc:	9300      	str	r3, [sp, #0]
 800edce:	2331      	movs	r3, #49	; 0x31
 800edd0:	7013      	strb	r3, [r2, #0]
 800edd2:	e6ce      	b.n	800eb72 <_dtoa_r+0x94a>
 800edd4:	4b09      	ldr	r3, [pc, #36]	; (800edfc <_dtoa_r+0xbd4>)
 800edd6:	f7ff ba95 	b.w	800e304 <_dtoa_r+0xdc>
 800edda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eddc:	2b00      	cmp	r3, #0
 800edde:	f47f aa6e 	bne.w	800e2be <_dtoa_r+0x96>
 800ede2:	4b07      	ldr	r3, [pc, #28]	; (800ee00 <_dtoa_r+0xbd8>)
 800ede4:	f7ff ba8e 	b.w	800e304 <_dtoa_r+0xdc>
 800ede8:	9b02      	ldr	r3, [sp, #8]
 800edea:	2b00      	cmp	r3, #0
 800edec:	dcae      	bgt.n	800ed4c <_dtoa_r+0xb24>
 800edee:	9b06      	ldr	r3, [sp, #24]
 800edf0:	2b02      	cmp	r3, #2
 800edf2:	f73f aea8 	bgt.w	800eb46 <_dtoa_r+0x91e>
 800edf6:	e7a9      	b.n	800ed4c <_dtoa_r+0xb24>
 800edf8:	08011430 	.word	0x08011430
 800edfc:	08011230 	.word	0x08011230
 800ee00:	080113b1 	.word	0x080113b1

0800ee04 <rshift>:
 800ee04:	6903      	ldr	r3, [r0, #16]
 800ee06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ee0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ee12:	f100 0414 	add.w	r4, r0, #20
 800ee16:	dd45      	ble.n	800eea4 <rshift+0xa0>
 800ee18:	f011 011f 	ands.w	r1, r1, #31
 800ee1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ee20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ee24:	d10c      	bne.n	800ee40 <rshift+0x3c>
 800ee26:	f100 0710 	add.w	r7, r0, #16
 800ee2a:	4629      	mov	r1, r5
 800ee2c:	42b1      	cmp	r1, r6
 800ee2e:	d334      	bcc.n	800ee9a <rshift+0x96>
 800ee30:	1a9b      	subs	r3, r3, r2
 800ee32:	009b      	lsls	r3, r3, #2
 800ee34:	1eea      	subs	r2, r5, #3
 800ee36:	4296      	cmp	r6, r2
 800ee38:	bf38      	it	cc
 800ee3a:	2300      	movcc	r3, #0
 800ee3c:	4423      	add	r3, r4
 800ee3e:	e015      	b.n	800ee6c <rshift+0x68>
 800ee40:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ee44:	f1c1 0820 	rsb	r8, r1, #32
 800ee48:	40cf      	lsrs	r7, r1
 800ee4a:	f105 0e04 	add.w	lr, r5, #4
 800ee4e:	46a1      	mov	r9, r4
 800ee50:	4576      	cmp	r6, lr
 800ee52:	46f4      	mov	ip, lr
 800ee54:	d815      	bhi.n	800ee82 <rshift+0x7e>
 800ee56:	1a9a      	subs	r2, r3, r2
 800ee58:	0092      	lsls	r2, r2, #2
 800ee5a:	3a04      	subs	r2, #4
 800ee5c:	3501      	adds	r5, #1
 800ee5e:	42ae      	cmp	r6, r5
 800ee60:	bf38      	it	cc
 800ee62:	2200      	movcc	r2, #0
 800ee64:	18a3      	adds	r3, r4, r2
 800ee66:	50a7      	str	r7, [r4, r2]
 800ee68:	b107      	cbz	r7, 800ee6c <rshift+0x68>
 800ee6a:	3304      	adds	r3, #4
 800ee6c:	1b1a      	subs	r2, r3, r4
 800ee6e:	42a3      	cmp	r3, r4
 800ee70:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ee74:	bf08      	it	eq
 800ee76:	2300      	moveq	r3, #0
 800ee78:	6102      	str	r2, [r0, #16]
 800ee7a:	bf08      	it	eq
 800ee7c:	6143      	streq	r3, [r0, #20]
 800ee7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee82:	f8dc c000 	ldr.w	ip, [ip]
 800ee86:	fa0c fc08 	lsl.w	ip, ip, r8
 800ee8a:	ea4c 0707 	orr.w	r7, ip, r7
 800ee8e:	f849 7b04 	str.w	r7, [r9], #4
 800ee92:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ee96:	40cf      	lsrs	r7, r1
 800ee98:	e7da      	b.n	800ee50 <rshift+0x4c>
 800ee9a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ee9e:	f847 cf04 	str.w	ip, [r7, #4]!
 800eea2:	e7c3      	b.n	800ee2c <rshift+0x28>
 800eea4:	4623      	mov	r3, r4
 800eea6:	e7e1      	b.n	800ee6c <rshift+0x68>

0800eea8 <__hexdig_fun>:
 800eea8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800eeac:	2b09      	cmp	r3, #9
 800eeae:	d802      	bhi.n	800eeb6 <__hexdig_fun+0xe>
 800eeb0:	3820      	subs	r0, #32
 800eeb2:	b2c0      	uxtb	r0, r0
 800eeb4:	4770      	bx	lr
 800eeb6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800eeba:	2b05      	cmp	r3, #5
 800eebc:	d801      	bhi.n	800eec2 <__hexdig_fun+0x1a>
 800eebe:	3847      	subs	r0, #71	; 0x47
 800eec0:	e7f7      	b.n	800eeb2 <__hexdig_fun+0xa>
 800eec2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800eec6:	2b05      	cmp	r3, #5
 800eec8:	d801      	bhi.n	800eece <__hexdig_fun+0x26>
 800eeca:	3827      	subs	r0, #39	; 0x27
 800eecc:	e7f1      	b.n	800eeb2 <__hexdig_fun+0xa>
 800eece:	2000      	movs	r0, #0
 800eed0:	4770      	bx	lr
	...

0800eed4 <__gethex>:
 800eed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eed8:	ed2d 8b02 	vpush	{d8}
 800eedc:	b089      	sub	sp, #36	; 0x24
 800eede:	ee08 0a10 	vmov	s16, r0
 800eee2:	9304      	str	r3, [sp, #16]
 800eee4:	4bb4      	ldr	r3, [pc, #720]	; (800f1b8 <__gethex+0x2e4>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	9301      	str	r3, [sp, #4]
 800eeea:	4618      	mov	r0, r3
 800eeec:	468b      	mov	fp, r1
 800eeee:	4690      	mov	r8, r2
 800eef0:	f7f1 f976 	bl	80001e0 <strlen>
 800eef4:	9b01      	ldr	r3, [sp, #4]
 800eef6:	f8db 2000 	ldr.w	r2, [fp]
 800eefa:	4403      	add	r3, r0
 800eefc:	4682      	mov	sl, r0
 800eefe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ef02:	9305      	str	r3, [sp, #20]
 800ef04:	1c93      	adds	r3, r2, #2
 800ef06:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ef0a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ef0e:	32fe      	adds	r2, #254	; 0xfe
 800ef10:	18d1      	adds	r1, r2, r3
 800ef12:	461f      	mov	r7, r3
 800ef14:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ef18:	9100      	str	r1, [sp, #0]
 800ef1a:	2830      	cmp	r0, #48	; 0x30
 800ef1c:	d0f8      	beq.n	800ef10 <__gethex+0x3c>
 800ef1e:	f7ff ffc3 	bl	800eea8 <__hexdig_fun>
 800ef22:	4604      	mov	r4, r0
 800ef24:	2800      	cmp	r0, #0
 800ef26:	d13a      	bne.n	800ef9e <__gethex+0xca>
 800ef28:	9901      	ldr	r1, [sp, #4]
 800ef2a:	4652      	mov	r2, sl
 800ef2c:	4638      	mov	r0, r7
 800ef2e:	f001 fa23 	bl	8010378 <strncmp>
 800ef32:	4605      	mov	r5, r0
 800ef34:	2800      	cmp	r0, #0
 800ef36:	d168      	bne.n	800f00a <__gethex+0x136>
 800ef38:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ef3c:	eb07 060a 	add.w	r6, r7, sl
 800ef40:	f7ff ffb2 	bl	800eea8 <__hexdig_fun>
 800ef44:	2800      	cmp	r0, #0
 800ef46:	d062      	beq.n	800f00e <__gethex+0x13a>
 800ef48:	4633      	mov	r3, r6
 800ef4a:	7818      	ldrb	r0, [r3, #0]
 800ef4c:	2830      	cmp	r0, #48	; 0x30
 800ef4e:	461f      	mov	r7, r3
 800ef50:	f103 0301 	add.w	r3, r3, #1
 800ef54:	d0f9      	beq.n	800ef4a <__gethex+0x76>
 800ef56:	f7ff ffa7 	bl	800eea8 <__hexdig_fun>
 800ef5a:	2301      	movs	r3, #1
 800ef5c:	fab0 f480 	clz	r4, r0
 800ef60:	0964      	lsrs	r4, r4, #5
 800ef62:	4635      	mov	r5, r6
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	463a      	mov	r2, r7
 800ef68:	4616      	mov	r6, r2
 800ef6a:	3201      	adds	r2, #1
 800ef6c:	7830      	ldrb	r0, [r6, #0]
 800ef6e:	f7ff ff9b 	bl	800eea8 <__hexdig_fun>
 800ef72:	2800      	cmp	r0, #0
 800ef74:	d1f8      	bne.n	800ef68 <__gethex+0x94>
 800ef76:	9901      	ldr	r1, [sp, #4]
 800ef78:	4652      	mov	r2, sl
 800ef7a:	4630      	mov	r0, r6
 800ef7c:	f001 f9fc 	bl	8010378 <strncmp>
 800ef80:	b980      	cbnz	r0, 800efa4 <__gethex+0xd0>
 800ef82:	b94d      	cbnz	r5, 800ef98 <__gethex+0xc4>
 800ef84:	eb06 050a 	add.w	r5, r6, sl
 800ef88:	462a      	mov	r2, r5
 800ef8a:	4616      	mov	r6, r2
 800ef8c:	3201      	adds	r2, #1
 800ef8e:	7830      	ldrb	r0, [r6, #0]
 800ef90:	f7ff ff8a 	bl	800eea8 <__hexdig_fun>
 800ef94:	2800      	cmp	r0, #0
 800ef96:	d1f8      	bne.n	800ef8a <__gethex+0xb6>
 800ef98:	1bad      	subs	r5, r5, r6
 800ef9a:	00ad      	lsls	r5, r5, #2
 800ef9c:	e004      	b.n	800efa8 <__gethex+0xd4>
 800ef9e:	2400      	movs	r4, #0
 800efa0:	4625      	mov	r5, r4
 800efa2:	e7e0      	b.n	800ef66 <__gethex+0x92>
 800efa4:	2d00      	cmp	r5, #0
 800efa6:	d1f7      	bne.n	800ef98 <__gethex+0xc4>
 800efa8:	7833      	ldrb	r3, [r6, #0]
 800efaa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800efae:	2b50      	cmp	r3, #80	; 0x50
 800efb0:	d13b      	bne.n	800f02a <__gethex+0x156>
 800efb2:	7873      	ldrb	r3, [r6, #1]
 800efb4:	2b2b      	cmp	r3, #43	; 0x2b
 800efb6:	d02c      	beq.n	800f012 <__gethex+0x13e>
 800efb8:	2b2d      	cmp	r3, #45	; 0x2d
 800efba:	d02e      	beq.n	800f01a <__gethex+0x146>
 800efbc:	1c71      	adds	r1, r6, #1
 800efbe:	f04f 0900 	mov.w	r9, #0
 800efc2:	7808      	ldrb	r0, [r1, #0]
 800efc4:	f7ff ff70 	bl	800eea8 <__hexdig_fun>
 800efc8:	1e43      	subs	r3, r0, #1
 800efca:	b2db      	uxtb	r3, r3
 800efcc:	2b18      	cmp	r3, #24
 800efce:	d82c      	bhi.n	800f02a <__gethex+0x156>
 800efd0:	f1a0 0210 	sub.w	r2, r0, #16
 800efd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800efd8:	f7ff ff66 	bl	800eea8 <__hexdig_fun>
 800efdc:	1e43      	subs	r3, r0, #1
 800efde:	b2db      	uxtb	r3, r3
 800efe0:	2b18      	cmp	r3, #24
 800efe2:	d91d      	bls.n	800f020 <__gethex+0x14c>
 800efe4:	f1b9 0f00 	cmp.w	r9, #0
 800efe8:	d000      	beq.n	800efec <__gethex+0x118>
 800efea:	4252      	negs	r2, r2
 800efec:	4415      	add	r5, r2
 800efee:	f8cb 1000 	str.w	r1, [fp]
 800eff2:	b1e4      	cbz	r4, 800f02e <__gethex+0x15a>
 800eff4:	9b00      	ldr	r3, [sp, #0]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	bf14      	ite	ne
 800effa:	2700      	movne	r7, #0
 800effc:	2706      	moveq	r7, #6
 800effe:	4638      	mov	r0, r7
 800f000:	b009      	add	sp, #36	; 0x24
 800f002:	ecbd 8b02 	vpop	{d8}
 800f006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f00a:	463e      	mov	r6, r7
 800f00c:	4625      	mov	r5, r4
 800f00e:	2401      	movs	r4, #1
 800f010:	e7ca      	b.n	800efa8 <__gethex+0xd4>
 800f012:	f04f 0900 	mov.w	r9, #0
 800f016:	1cb1      	adds	r1, r6, #2
 800f018:	e7d3      	b.n	800efc2 <__gethex+0xee>
 800f01a:	f04f 0901 	mov.w	r9, #1
 800f01e:	e7fa      	b.n	800f016 <__gethex+0x142>
 800f020:	230a      	movs	r3, #10
 800f022:	fb03 0202 	mla	r2, r3, r2, r0
 800f026:	3a10      	subs	r2, #16
 800f028:	e7d4      	b.n	800efd4 <__gethex+0x100>
 800f02a:	4631      	mov	r1, r6
 800f02c:	e7df      	b.n	800efee <__gethex+0x11a>
 800f02e:	1bf3      	subs	r3, r6, r7
 800f030:	3b01      	subs	r3, #1
 800f032:	4621      	mov	r1, r4
 800f034:	2b07      	cmp	r3, #7
 800f036:	dc0b      	bgt.n	800f050 <__gethex+0x17c>
 800f038:	ee18 0a10 	vmov	r0, s16
 800f03c:	f000 fa70 	bl	800f520 <_Balloc>
 800f040:	4604      	mov	r4, r0
 800f042:	b940      	cbnz	r0, 800f056 <__gethex+0x182>
 800f044:	4b5d      	ldr	r3, [pc, #372]	; (800f1bc <__gethex+0x2e8>)
 800f046:	4602      	mov	r2, r0
 800f048:	21de      	movs	r1, #222	; 0xde
 800f04a:	485d      	ldr	r0, [pc, #372]	; (800f1c0 <__gethex+0x2ec>)
 800f04c:	f001 f9b6 	bl	80103bc <__assert_func>
 800f050:	3101      	adds	r1, #1
 800f052:	105b      	asrs	r3, r3, #1
 800f054:	e7ee      	b.n	800f034 <__gethex+0x160>
 800f056:	f100 0914 	add.w	r9, r0, #20
 800f05a:	f04f 0b00 	mov.w	fp, #0
 800f05e:	f1ca 0301 	rsb	r3, sl, #1
 800f062:	f8cd 9008 	str.w	r9, [sp, #8]
 800f066:	f8cd b000 	str.w	fp, [sp]
 800f06a:	9306      	str	r3, [sp, #24]
 800f06c:	42b7      	cmp	r7, r6
 800f06e:	d340      	bcc.n	800f0f2 <__gethex+0x21e>
 800f070:	9802      	ldr	r0, [sp, #8]
 800f072:	9b00      	ldr	r3, [sp, #0]
 800f074:	f840 3b04 	str.w	r3, [r0], #4
 800f078:	eba0 0009 	sub.w	r0, r0, r9
 800f07c:	1080      	asrs	r0, r0, #2
 800f07e:	0146      	lsls	r6, r0, #5
 800f080:	6120      	str	r0, [r4, #16]
 800f082:	4618      	mov	r0, r3
 800f084:	f000 fb3e 	bl	800f704 <__hi0bits>
 800f088:	1a30      	subs	r0, r6, r0
 800f08a:	f8d8 6000 	ldr.w	r6, [r8]
 800f08e:	42b0      	cmp	r0, r6
 800f090:	dd63      	ble.n	800f15a <__gethex+0x286>
 800f092:	1b87      	subs	r7, r0, r6
 800f094:	4639      	mov	r1, r7
 800f096:	4620      	mov	r0, r4
 800f098:	f000 fee2 	bl	800fe60 <__any_on>
 800f09c:	4682      	mov	sl, r0
 800f09e:	b1a8      	cbz	r0, 800f0cc <__gethex+0x1f8>
 800f0a0:	1e7b      	subs	r3, r7, #1
 800f0a2:	1159      	asrs	r1, r3, #5
 800f0a4:	f003 021f 	and.w	r2, r3, #31
 800f0a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f0ac:	f04f 0a01 	mov.w	sl, #1
 800f0b0:	fa0a f202 	lsl.w	r2, sl, r2
 800f0b4:	420a      	tst	r2, r1
 800f0b6:	d009      	beq.n	800f0cc <__gethex+0x1f8>
 800f0b8:	4553      	cmp	r3, sl
 800f0ba:	dd05      	ble.n	800f0c8 <__gethex+0x1f4>
 800f0bc:	1eb9      	subs	r1, r7, #2
 800f0be:	4620      	mov	r0, r4
 800f0c0:	f000 fece 	bl	800fe60 <__any_on>
 800f0c4:	2800      	cmp	r0, #0
 800f0c6:	d145      	bne.n	800f154 <__gethex+0x280>
 800f0c8:	f04f 0a02 	mov.w	sl, #2
 800f0cc:	4639      	mov	r1, r7
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	f7ff fe98 	bl	800ee04 <rshift>
 800f0d4:	443d      	add	r5, r7
 800f0d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f0da:	42ab      	cmp	r3, r5
 800f0dc:	da4c      	bge.n	800f178 <__gethex+0x2a4>
 800f0de:	ee18 0a10 	vmov	r0, s16
 800f0e2:	4621      	mov	r1, r4
 800f0e4:	f000 fa5c 	bl	800f5a0 <_Bfree>
 800f0e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	6013      	str	r3, [r2, #0]
 800f0ee:	27a3      	movs	r7, #163	; 0xa3
 800f0f0:	e785      	b.n	800effe <__gethex+0x12a>
 800f0f2:	1e73      	subs	r3, r6, #1
 800f0f4:	9a05      	ldr	r2, [sp, #20]
 800f0f6:	9303      	str	r3, [sp, #12]
 800f0f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f0fc:	4293      	cmp	r3, r2
 800f0fe:	d019      	beq.n	800f134 <__gethex+0x260>
 800f100:	f1bb 0f20 	cmp.w	fp, #32
 800f104:	d107      	bne.n	800f116 <__gethex+0x242>
 800f106:	9b02      	ldr	r3, [sp, #8]
 800f108:	9a00      	ldr	r2, [sp, #0]
 800f10a:	f843 2b04 	str.w	r2, [r3], #4
 800f10e:	9302      	str	r3, [sp, #8]
 800f110:	2300      	movs	r3, #0
 800f112:	9300      	str	r3, [sp, #0]
 800f114:	469b      	mov	fp, r3
 800f116:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f11a:	f7ff fec5 	bl	800eea8 <__hexdig_fun>
 800f11e:	9b00      	ldr	r3, [sp, #0]
 800f120:	f000 000f 	and.w	r0, r0, #15
 800f124:	fa00 f00b 	lsl.w	r0, r0, fp
 800f128:	4303      	orrs	r3, r0
 800f12a:	9300      	str	r3, [sp, #0]
 800f12c:	f10b 0b04 	add.w	fp, fp, #4
 800f130:	9b03      	ldr	r3, [sp, #12]
 800f132:	e00d      	b.n	800f150 <__gethex+0x27c>
 800f134:	9b03      	ldr	r3, [sp, #12]
 800f136:	9a06      	ldr	r2, [sp, #24]
 800f138:	4413      	add	r3, r2
 800f13a:	42bb      	cmp	r3, r7
 800f13c:	d3e0      	bcc.n	800f100 <__gethex+0x22c>
 800f13e:	4618      	mov	r0, r3
 800f140:	9901      	ldr	r1, [sp, #4]
 800f142:	9307      	str	r3, [sp, #28]
 800f144:	4652      	mov	r2, sl
 800f146:	f001 f917 	bl	8010378 <strncmp>
 800f14a:	9b07      	ldr	r3, [sp, #28]
 800f14c:	2800      	cmp	r0, #0
 800f14e:	d1d7      	bne.n	800f100 <__gethex+0x22c>
 800f150:	461e      	mov	r6, r3
 800f152:	e78b      	b.n	800f06c <__gethex+0x198>
 800f154:	f04f 0a03 	mov.w	sl, #3
 800f158:	e7b8      	b.n	800f0cc <__gethex+0x1f8>
 800f15a:	da0a      	bge.n	800f172 <__gethex+0x29e>
 800f15c:	1a37      	subs	r7, r6, r0
 800f15e:	4621      	mov	r1, r4
 800f160:	ee18 0a10 	vmov	r0, s16
 800f164:	463a      	mov	r2, r7
 800f166:	f000 fc37 	bl	800f9d8 <__lshift>
 800f16a:	1bed      	subs	r5, r5, r7
 800f16c:	4604      	mov	r4, r0
 800f16e:	f100 0914 	add.w	r9, r0, #20
 800f172:	f04f 0a00 	mov.w	sl, #0
 800f176:	e7ae      	b.n	800f0d6 <__gethex+0x202>
 800f178:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f17c:	42a8      	cmp	r0, r5
 800f17e:	dd72      	ble.n	800f266 <__gethex+0x392>
 800f180:	1b45      	subs	r5, r0, r5
 800f182:	42ae      	cmp	r6, r5
 800f184:	dc36      	bgt.n	800f1f4 <__gethex+0x320>
 800f186:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f18a:	2b02      	cmp	r3, #2
 800f18c:	d02a      	beq.n	800f1e4 <__gethex+0x310>
 800f18e:	2b03      	cmp	r3, #3
 800f190:	d02c      	beq.n	800f1ec <__gethex+0x318>
 800f192:	2b01      	cmp	r3, #1
 800f194:	d11c      	bne.n	800f1d0 <__gethex+0x2fc>
 800f196:	42ae      	cmp	r6, r5
 800f198:	d11a      	bne.n	800f1d0 <__gethex+0x2fc>
 800f19a:	2e01      	cmp	r6, #1
 800f19c:	d112      	bne.n	800f1c4 <__gethex+0x2f0>
 800f19e:	9a04      	ldr	r2, [sp, #16]
 800f1a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f1a4:	6013      	str	r3, [r2, #0]
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	6123      	str	r3, [r4, #16]
 800f1aa:	f8c9 3000 	str.w	r3, [r9]
 800f1ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f1b0:	2762      	movs	r7, #98	; 0x62
 800f1b2:	601c      	str	r4, [r3, #0]
 800f1b4:	e723      	b.n	800effe <__gethex+0x12a>
 800f1b6:	bf00      	nop
 800f1b8:	080114a8 	.word	0x080114a8
 800f1bc:	08011430 	.word	0x08011430
 800f1c0:	08011441 	.word	0x08011441
 800f1c4:	1e71      	subs	r1, r6, #1
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	f000 fe4a 	bl	800fe60 <__any_on>
 800f1cc:	2800      	cmp	r0, #0
 800f1ce:	d1e6      	bne.n	800f19e <__gethex+0x2ca>
 800f1d0:	ee18 0a10 	vmov	r0, s16
 800f1d4:	4621      	mov	r1, r4
 800f1d6:	f000 f9e3 	bl	800f5a0 <_Bfree>
 800f1da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f1dc:	2300      	movs	r3, #0
 800f1de:	6013      	str	r3, [r2, #0]
 800f1e0:	2750      	movs	r7, #80	; 0x50
 800f1e2:	e70c      	b.n	800effe <__gethex+0x12a>
 800f1e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d1f2      	bne.n	800f1d0 <__gethex+0x2fc>
 800f1ea:	e7d8      	b.n	800f19e <__gethex+0x2ca>
 800f1ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d1d5      	bne.n	800f19e <__gethex+0x2ca>
 800f1f2:	e7ed      	b.n	800f1d0 <__gethex+0x2fc>
 800f1f4:	1e6f      	subs	r7, r5, #1
 800f1f6:	f1ba 0f00 	cmp.w	sl, #0
 800f1fa:	d131      	bne.n	800f260 <__gethex+0x38c>
 800f1fc:	b127      	cbz	r7, 800f208 <__gethex+0x334>
 800f1fe:	4639      	mov	r1, r7
 800f200:	4620      	mov	r0, r4
 800f202:	f000 fe2d 	bl	800fe60 <__any_on>
 800f206:	4682      	mov	sl, r0
 800f208:	117b      	asrs	r3, r7, #5
 800f20a:	2101      	movs	r1, #1
 800f20c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f210:	f007 071f 	and.w	r7, r7, #31
 800f214:	fa01 f707 	lsl.w	r7, r1, r7
 800f218:	421f      	tst	r7, r3
 800f21a:	4629      	mov	r1, r5
 800f21c:	4620      	mov	r0, r4
 800f21e:	bf18      	it	ne
 800f220:	f04a 0a02 	orrne.w	sl, sl, #2
 800f224:	1b76      	subs	r6, r6, r5
 800f226:	f7ff fded 	bl	800ee04 <rshift>
 800f22a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f22e:	2702      	movs	r7, #2
 800f230:	f1ba 0f00 	cmp.w	sl, #0
 800f234:	d048      	beq.n	800f2c8 <__gethex+0x3f4>
 800f236:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f23a:	2b02      	cmp	r3, #2
 800f23c:	d015      	beq.n	800f26a <__gethex+0x396>
 800f23e:	2b03      	cmp	r3, #3
 800f240:	d017      	beq.n	800f272 <__gethex+0x39e>
 800f242:	2b01      	cmp	r3, #1
 800f244:	d109      	bne.n	800f25a <__gethex+0x386>
 800f246:	f01a 0f02 	tst.w	sl, #2
 800f24a:	d006      	beq.n	800f25a <__gethex+0x386>
 800f24c:	f8d9 0000 	ldr.w	r0, [r9]
 800f250:	ea4a 0a00 	orr.w	sl, sl, r0
 800f254:	f01a 0f01 	tst.w	sl, #1
 800f258:	d10e      	bne.n	800f278 <__gethex+0x3a4>
 800f25a:	f047 0710 	orr.w	r7, r7, #16
 800f25e:	e033      	b.n	800f2c8 <__gethex+0x3f4>
 800f260:	f04f 0a01 	mov.w	sl, #1
 800f264:	e7d0      	b.n	800f208 <__gethex+0x334>
 800f266:	2701      	movs	r7, #1
 800f268:	e7e2      	b.n	800f230 <__gethex+0x35c>
 800f26a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f26c:	f1c3 0301 	rsb	r3, r3, #1
 800f270:	9315      	str	r3, [sp, #84]	; 0x54
 800f272:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f274:	2b00      	cmp	r3, #0
 800f276:	d0f0      	beq.n	800f25a <__gethex+0x386>
 800f278:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f27c:	f104 0314 	add.w	r3, r4, #20
 800f280:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f284:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f288:	f04f 0c00 	mov.w	ip, #0
 800f28c:	4618      	mov	r0, r3
 800f28e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f292:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f296:	d01c      	beq.n	800f2d2 <__gethex+0x3fe>
 800f298:	3201      	adds	r2, #1
 800f29a:	6002      	str	r2, [r0, #0]
 800f29c:	2f02      	cmp	r7, #2
 800f29e:	f104 0314 	add.w	r3, r4, #20
 800f2a2:	d13f      	bne.n	800f324 <__gethex+0x450>
 800f2a4:	f8d8 2000 	ldr.w	r2, [r8]
 800f2a8:	3a01      	subs	r2, #1
 800f2aa:	42b2      	cmp	r2, r6
 800f2ac:	d10a      	bne.n	800f2c4 <__gethex+0x3f0>
 800f2ae:	1171      	asrs	r1, r6, #5
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f2b6:	f006 061f 	and.w	r6, r6, #31
 800f2ba:	fa02 f606 	lsl.w	r6, r2, r6
 800f2be:	421e      	tst	r6, r3
 800f2c0:	bf18      	it	ne
 800f2c2:	4617      	movne	r7, r2
 800f2c4:	f047 0720 	orr.w	r7, r7, #32
 800f2c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f2ca:	601c      	str	r4, [r3, #0]
 800f2cc:	9b04      	ldr	r3, [sp, #16]
 800f2ce:	601d      	str	r5, [r3, #0]
 800f2d0:	e695      	b.n	800effe <__gethex+0x12a>
 800f2d2:	4299      	cmp	r1, r3
 800f2d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f2d8:	d8d8      	bhi.n	800f28c <__gethex+0x3b8>
 800f2da:	68a3      	ldr	r3, [r4, #8]
 800f2dc:	459b      	cmp	fp, r3
 800f2de:	db19      	blt.n	800f314 <__gethex+0x440>
 800f2e0:	6861      	ldr	r1, [r4, #4]
 800f2e2:	ee18 0a10 	vmov	r0, s16
 800f2e6:	3101      	adds	r1, #1
 800f2e8:	f000 f91a 	bl	800f520 <_Balloc>
 800f2ec:	4681      	mov	r9, r0
 800f2ee:	b918      	cbnz	r0, 800f2f8 <__gethex+0x424>
 800f2f0:	4b1a      	ldr	r3, [pc, #104]	; (800f35c <__gethex+0x488>)
 800f2f2:	4602      	mov	r2, r0
 800f2f4:	2184      	movs	r1, #132	; 0x84
 800f2f6:	e6a8      	b.n	800f04a <__gethex+0x176>
 800f2f8:	6922      	ldr	r2, [r4, #16]
 800f2fa:	3202      	adds	r2, #2
 800f2fc:	f104 010c 	add.w	r1, r4, #12
 800f300:	0092      	lsls	r2, r2, #2
 800f302:	300c      	adds	r0, #12
 800f304:	f7fd f9a0 	bl	800c648 <memcpy>
 800f308:	4621      	mov	r1, r4
 800f30a:	ee18 0a10 	vmov	r0, s16
 800f30e:	f000 f947 	bl	800f5a0 <_Bfree>
 800f312:	464c      	mov	r4, r9
 800f314:	6923      	ldr	r3, [r4, #16]
 800f316:	1c5a      	adds	r2, r3, #1
 800f318:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f31c:	6122      	str	r2, [r4, #16]
 800f31e:	2201      	movs	r2, #1
 800f320:	615a      	str	r2, [r3, #20]
 800f322:	e7bb      	b.n	800f29c <__gethex+0x3c8>
 800f324:	6922      	ldr	r2, [r4, #16]
 800f326:	455a      	cmp	r2, fp
 800f328:	dd0b      	ble.n	800f342 <__gethex+0x46e>
 800f32a:	2101      	movs	r1, #1
 800f32c:	4620      	mov	r0, r4
 800f32e:	f7ff fd69 	bl	800ee04 <rshift>
 800f332:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f336:	3501      	adds	r5, #1
 800f338:	42ab      	cmp	r3, r5
 800f33a:	f6ff aed0 	blt.w	800f0de <__gethex+0x20a>
 800f33e:	2701      	movs	r7, #1
 800f340:	e7c0      	b.n	800f2c4 <__gethex+0x3f0>
 800f342:	f016 061f 	ands.w	r6, r6, #31
 800f346:	d0fa      	beq.n	800f33e <__gethex+0x46a>
 800f348:	4453      	add	r3, sl
 800f34a:	f1c6 0620 	rsb	r6, r6, #32
 800f34e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f352:	f000 f9d7 	bl	800f704 <__hi0bits>
 800f356:	42b0      	cmp	r0, r6
 800f358:	dbe7      	blt.n	800f32a <__gethex+0x456>
 800f35a:	e7f0      	b.n	800f33e <__gethex+0x46a>
 800f35c:	08011430 	.word	0x08011430

0800f360 <L_shift>:
 800f360:	f1c2 0208 	rsb	r2, r2, #8
 800f364:	0092      	lsls	r2, r2, #2
 800f366:	b570      	push	{r4, r5, r6, lr}
 800f368:	f1c2 0620 	rsb	r6, r2, #32
 800f36c:	6843      	ldr	r3, [r0, #4]
 800f36e:	6804      	ldr	r4, [r0, #0]
 800f370:	fa03 f506 	lsl.w	r5, r3, r6
 800f374:	432c      	orrs	r4, r5
 800f376:	40d3      	lsrs	r3, r2
 800f378:	6004      	str	r4, [r0, #0]
 800f37a:	f840 3f04 	str.w	r3, [r0, #4]!
 800f37e:	4288      	cmp	r0, r1
 800f380:	d3f4      	bcc.n	800f36c <L_shift+0xc>
 800f382:	bd70      	pop	{r4, r5, r6, pc}

0800f384 <__match>:
 800f384:	b530      	push	{r4, r5, lr}
 800f386:	6803      	ldr	r3, [r0, #0]
 800f388:	3301      	adds	r3, #1
 800f38a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f38e:	b914      	cbnz	r4, 800f396 <__match+0x12>
 800f390:	6003      	str	r3, [r0, #0]
 800f392:	2001      	movs	r0, #1
 800f394:	bd30      	pop	{r4, r5, pc}
 800f396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f39a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f39e:	2d19      	cmp	r5, #25
 800f3a0:	bf98      	it	ls
 800f3a2:	3220      	addls	r2, #32
 800f3a4:	42a2      	cmp	r2, r4
 800f3a6:	d0f0      	beq.n	800f38a <__match+0x6>
 800f3a8:	2000      	movs	r0, #0
 800f3aa:	e7f3      	b.n	800f394 <__match+0x10>

0800f3ac <__hexnan>:
 800f3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b0:	680b      	ldr	r3, [r1, #0]
 800f3b2:	115e      	asrs	r6, r3, #5
 800f3b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f3b8:	f013 031f 	ands.w	r3, r3, #31
 800f3bc:	b087      	sub	sp, #28
 800f3be:	bf18      	it	ne
 800f3c0:	3604      	addne	r6, #4
 800f3c2:	2500      	movs	r5, #0
 800f3c4:	1f37      	subs	r7, r6, #4
 800f3c6:	4690      	mov	r8, r2
 800f3c8:	6802      	ldr	r2, [r0, #0]
 800f3ca:	9301      	str	r3, [sp, #4]
 800f3cc:	4682      	mov	sl, r0
 800f3ce:	f846 5c04 	str.w	r5, [r6, #-4]
 800f3d2:	46b9      	mov	r9, r7
 800f3d4:	463c      	mov	r4, r7
 800f3d6:	9502      	str	r5, [sp, #8]
 800f3d8:	46ab      	mov	fp, r5
 800f3da:	7851      	ldrb	r1, [r2, #1]
 800f3dc:	1c53      	adds	r3, r2, #1
 800f3de:	9303      	str	r3, [sp, #12]
 800f3e0:	b341      	cbz	r1, 800f434 <__hexnan+0x88>
 800f3e2:	4608      	mov	r0, r1
 800f3e4:	9205      	str	r2, [sp, #20]
 800f3e6:	9104      	str	r1, [sp, #16]
 800f3e8:	f7ff fd5e 	bl	800eea8 <__hexdig_fun>
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	d14f      	bne.n	800f490 <__hexnan+0xe4>
 800f3f0:	9904      	ldr	r1, [sp, #16]
 800f3f2:	9a05      	ldr	r2, [sp, #20]
 800f3f4:	2920      	cmp	r1, #32
 800f3f6:	d818      	bhi.n	800f42a <__hexnan+0x7e>
 800f3f8:	9b02      	ldr	r3, [sp, #8]
 800f3fa:	459b      	cmp	fp, r3
 800f3fc:	dd13      	ble.n	800f426 <__hexnan+0x7a>
 800f3fe:	454c      	cmp	r4, r9
 800f400:	d206      	bcs.n	800f410 <__hexnan+0x64>
 800f402:	2d07      	cmp	r5, #7
 800f404:	dc04      	bgt.n	800f410 <__hexnan+0x64>
 800f406:	462a      	mov	r2, r5
 800f408:	4649      	mov	r1, r9
 800f40a:	4620      	mov	r0, r4
 800f40c:	f7ff ffa8 	bl	800f360 <L_shift>
 800f410:	4544      	cmp	r4, r8
 800f412:	d950      	bls.n	800f4b6 <__hexnan+0x10a>
 800f414:	2300      	movs	r3, #0
 800f416:	f1a4 0904 	sub.w	r9, r4, #4
 800f41a:	f844 3c04 	str.w	r3, [r4, #-4]
 800f41e:	f8cd b008 	str.w	fp, [sp, #8]
 800f422:	464c      	mov	r4, r9
 800f424:	461d      	mov	r5, r3
 800f426:	9a03      	ldr	r2, [sp, #12]
 800f428:	e7d7      	b.n	800f3da <__hexnan+0x2e>
 800f42a:	2929      	cmp	r1, #41	; 0x29
 800f42c:	d156      	bne.n	800f4dc <__hexnan+0x130>
 800f42e:	3202      	adds	r2, #2
 800f430:	f8ca 2000 	str.w	r2, [sl]
 800f434:	f1bb 0f00 	cmp.w	fp, #0
 800f438:	d050      	beq.n	800f4dc <__hexnan+0x130>
 800f43a:	454c      	cmp	r4, r9
 800f43c:	d206      	bcs.n	800f44c <__hexnan+0xa0>
 800f43e:	2d07      	cmp	r5, #7
 800f440:	dc04      	bgt.n	800f44c <__hexnan+0xa0>
 800f442:	462a      	mov	r2, r5
 800f444:	4649      	mov	r1, r9
 800f446:	4620      	mov	r0, r4
 800f448:	f7ff ff8a 	bl	800f360 <L_shift>
 800f44c:	4544      	cmp	r4, r8
 800f44e:	d934      	bls.n	800f4ba <__hexnan+0x10e>
 800f450:	f1a8 0204 	sub.w	r2, r8, #4
 800f454:	4623      	mov	r3, r4
 800f456:	f853 1b04 	ldr.w	r1, [r3], #4
 800f45a:	f842 1f04 	str.w	r1, [r2, #4]!
 800f45e:	429f      	cmp	r7, r3
 800f460:	d2f9      	bcs.n	800f456 <__hexnan+0xaa>
 800f462:	1b3b      	subs	r3, r7, r4
 800f464:	f023 0303 	bic.w	r3, r3, #3
 800f468:	3304      	adds	r3, #4
 800f46a:	3401      	adds	r4, #1
 800f46c:	3e03      	subs	r6, #3
 800f46e:	42b4      	cmp	r4, r6
 800f470:	bf88      	it	hi
 800f472:	2304      	movhi	r3, #4
 800f474:	4443      	add	r3, r8
 800f476:	2200      	movs	r2, #0
 800f478:	f843 2b04 	str.w	r2, [r3], #4
 800f47c:	429f      	cmp	r7, r3
 800f47e:	d2fb      	bcs.n	800f478 <__hexnan+0xcc>
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	b91b      	cbnz	r3, 800f48c <__hexnan+0xe0>
 800f484:	4547      	cmp	r7, r8
 800f486:	d127      	bne.n	800f4d8 <__hexnan+0x12c>
 800f488:	2301      	movs	r3, #1
 800f48a:	603b      	str	r3, [r7, #0]
 800f48c:	2005      	movs	r0, #5
 800f48e:	e026      	b.n	800f4de <__hexnan+0x132>
 800f490:	3501      	adds	r5, #1
 800f492:	2d08      	cmp	r5, #8
 800f494:	f10b 0b01 	add.w	fp, fp, #1
 800f498:	dd06      	ble.n	800f4a8 <__hexnan+0xfc>
 800f49a:	4544      	cmp	r4, r8
 800f49c:	d9c3      	bls.n	800f426 <__hexnan+0x7a>
 800f49e:	2300      	movs	r3, #0
 800f4a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f4a4:	2501      	movs	r5, #1
 800f4a6:	3c04      	subs	r4, #4
 800f4a8:	6822      	ldr	r2, [r4, #0]
 800f4aa:	f000 000f 	and.w	r0, r0, #15
 800f4ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f4b2:	6022      	str	r2, [r4, #0]
 800f4b4:	e7b7      	b.n	800f426 <__hexnan+0x7a>
 800f4b6:	2508      	movs	r5, #8
 800f4b8:	e7b5      	b.n	800f426 <__hexnan+0x7a>
 800f4ba:	9b01      	ldr	r3, [sp, #4]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d0df      	beq.n	800f480 <__hexnan+0xd4>
 800f4c0:	f04f 32ff 	mov.w	r2, #4294967295
 800f4c4:	f1c3 0320 	rsb	r3, r3, #32
 800f4c8:	fa22 f303 	lsr.w	r3, r2, r3
 800f4cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f4d0:	401a      	ands	r2, r3
 800f4d2:	f846 2c04 	str.w	r2, [r6, #-4]
 800f4d6:	e7d3      	b.n	800f480 <__hexnan+0xd4>
 800f4d8:	3f04      	subs	r7, #4
 800f4da:	e7d1      	b.n	800f480 <__hexnan+0xd4>
 800f4dc:	2004      	movs	r0, #4
 800f4de:	b007      	add	sp, #28
 800f4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4e4 <_localeconv_r>:
 800f4e4:	4800      	ldr	r0, [pc, #0]	; (800f4e8 <_localeconv_r+0x4>)
 800f4e6:	4770      	bx	lr
 800f4e8:	200003b4 	.word	0x200003b4

0800f4ec <malloc>:
 800f4ec:	4b02      	ldr	r3, [pc, #8]	; (800f4f8 <malloc+0xc>)
 800f4ee:	4601      	mov	r1, r0
 800f4f0:	6818      	ldr	r0, [r3, #0]
 800f4f2:	f000 bd59 	b.w	800ffa8 <_malloc_r>
 800f4f6:	bf00      	nop
 800f4f8:	2000025c 	.word	0x2000025c

0800f4fc <__ascii_mbtowc>:
 800f4fc:	b082      	sub	sp, #8
 800f4fe:	b901      	cbnz	r1, 800f502 <__ascii_mbtowc+0x6>
 800f500:	a901      	add	r1, sp, #4
 800f502:	b142      	cbz	r2, 800f516 <__ascii_mbtowc+0x1a>
 800f504:	b14b      	cbz	r3, 800f51a <__ascii_mbtowc+0x1e>
 800f506:	7813      	ldrb	r3, [r2, #0]
 800f508:	600b      	str	r3, [r1, #0]
 800f50a:	7812      	ldrb	r2, [r2, #0]
 800f50c:	1e10      	subs	r0, r2, #0
 800f50e:	bf18      	it	ne
 800f510:	2001      	movne	r0, #1
 800f512:	b002      	add	sp, #8
 800f514:	4770      	bx	lr
 800f516:	4610      	mov	r0, r2
 800f518:	e7fb      	b.n	800f512 <__ascii_mbtowc+0x16>
 800f51a:	f06f 0001 	mvn.w	r0, #1
 800f51e:	e7f8      	b.n	800f512 <__ascii_mbtowc+0x16>

0800f520 <_Balloc>:
 800f520:	b570      	push	{r4, r5, r6, lr}
 800f522:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f524:	4604      	mov	r4, r0
 800f526:	460d      	mov	r5, r1
 800f528:	b976      	cbnz	r6, 800f548 <_Balloc+0x28>
 800f52a:	2010      	movs	r0, #16
 800f52c:	f7ff ffde 	bl	800f4ec <malloc>
 800f530:	4602      	mov	r2, r0
 800f532:	6260      	str	r0, [r4, #36]	; 0x24
 800f534:	b920      	cbnz	r0, 800f540 <_Balloc+0x20>
 800f536:	4b18      	ldr	r3, [pc, #96]	; (800f598 <_Balloc+0x78>)
 800f538:	4818      	ldr	r0, [pc, #96]	; (800f59c <_Balloc+0x7c>)
 800f53a:	2166      	movs	r1, #102	; 0x66
 800f53c:	f000 ff3e 	bl	80103bc <__assert_func>
 800f540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f544:	6006      	str	r6, [r0, #0]
 800f546:	60c6      	str	r6, [r0, #12]
 800f548:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f54a:	68f3      	ldr	r3, [r6, #12]
 800f54c:	b183      	cbz	r3, 800f570 <_Balloc+0x50>
 800f54e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f556:	b9b8      	cbnz	r0, 800f588 <_Balloc+0x68>
 800f558:	2101      	movs	r1, #1
 800f55a:	fa01 f605 	lsl.w	r6, r1, r5
 800f55e:	1d72      	adds	r2, r6, #5
 800f560:	0092      	lsls	r2, r2, #2
 800f562:	4620      	mov	r0, r4
 800f564:	f000 fc9d 	bl	800fea2 <_calloc_r>
 800f568:	b160      	cbz	r0, 800f584 <_Balloc+0x64>
 800f56a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f56e:	e00e      	b.n	800f58e <_Balloc+0x6e>
 800f570:	2221      	movs	r2, #33	; 0x21
 800f572:	2104      	movs	r1, #4
 800f574:	4620      	mov	r0, r4
 800f576:	f000 fc94 	bl	800fea2 <_calloc_r>
 800f57a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f57c:	60f0      	str	r0, [r6, #12]
 800f57e:	68db      	ldr	r3, [r3, #12]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d1e4      	bne.n	800f54e <_Balloc+0x2e>
 800f584:	2000      	movs	r0, #0
 800f586:	bd70      	pop	{r4, r5, r6, pc}
 800f588:	6802      	ldr	r2, [r0, #0]
 800f58a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f58e:	2300      	movs	r3, #0
 800f590:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f594:	e7f7      	b.n	800f586 <_Balloc+0x66>
 800f596:	bf00      	nop
 800f598:	080113be 	.word	0x080113be
 800f59c:	080114bc 	.word	0x080114bc

0800f5a0 <_Bfree>:
 800f5a0:	b570      	push	{r4, r5, r6, lr}
 800f5a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f5a4:	4605      	mov	r5, r0
 800f5a6:	460c      	mov	r4, r1
 800f5a8:	b976      	cbnz	r6, 800f5c8 <_Bfree+0x28>
 800f5aa:	2010      	movs	r0, #16
 800f5ac:	f7ff ff9e 	bl	800f4ec <malloc>
 800f5b0:	4602      	mov	r2, r0
 800f5b2:	6268      	str	r0, [r5, #36]	; 0x24
 800f5b4:	b920      	cbnz	r0, 800f5c0 <_Bfree+0x20>
 800f5b6:	4b09      	ldr	r3, [pc, #36]	; (800f5dc <_Bfree+0x3c>)
 800f5b8:	4809      	ldr	r0, [pc, #36]	; (800f5e0 <_Bfree+0x40>)
 800f5ba:	218a      	movs	r1, #138	; 0x8a
 800f5bc:	f000 fefe 	bl	80103bc <__assert_func>
 800f5c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f5c4:	6006      	str	r6, [r0, #0]
 800f5c6:	60c6      	str	r6, [r0, #12]
 800f5c8:	b13c      	cbz	r4, 800f5da <_Bfree+0x3a>
 800f5ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f5cc:	6862      	ldr	r2, [r4, #4]
 800f5ce:	68db      	ldr	r3, [r3, #12]
 800f5d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f5d4:	6021      	str	r1, [r4, #0]
 800f5d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f5da:	bd70      	pop	{r4, r5, r6, pc}
 800f5dc:	080113be 	.word	0x080113be
 800f5e0:	080114bc 	.word	0x080114bc

0800f5e4 <__multadd>:
 800f5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e8:	690d      	ldr	r5, [r1, #16]
 800f5ea:	4607      	mov	r7, r0
 800f5ec:	460c      	mov	r4, r1
 800f5ee:	461e      	mov	r6, r3
 800f5f0:	f101 0c14 	add.w	ip, r1, #20
 800f5f4:	2000      	movs	r0, #0
 800f5f6:	f8dc 3000 	ldr.w	r3, [ip]
 800f5fa:	b299      	uxth	r1, r3
 800f5fc:	fb02 6101 	mla	r1, r2, r1, r6
 800f600:	0c1e      	lsrs	r6, r3, #16
 800f602:	0c0b      	lsrs	r3, r1, #16
 800f604:	fb02 3306 	mla	r3, r2, r6, r3
 800f608:	b289      	uxth	r1, r1
 800f60a:	3001      	adds	r0, #1
 800f60c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f610:	4285      	cmp	r5, r0
 800f612:	f84c 1b04 	str.w	r1, [ip], #4
 800f616:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f61a:	dcec      	bgt.n	800f5f6 <__multadd+0x12>
 800f61c:	b30e      	cbz	r6, 800f662 <__multadd+0x7e>
 800f61e:	68a3      	ldr	r3, [r4, #8]
 800f620:	42ab      	cmp	r3, r5
 800f622:	dc19      	bgt.n	800f658 <__multadd+0x74>
 800f624:	6861      	ldr	r1, [r4, #4]
 800f626:	4638      	mov	r0, r7
 800f628:	3101      	adds	r1, #1
 800f62a:	f7ff ff79 	bl	800f520 <_Balloc>
 800f62e:	4680      	mov	r8, r0
 800f630:	b928      	cbnz	r0, 800f63e <__multadd+0x5a>
 800f632:	4602      	mov	r2, r0
 800f634:	4b0c      	ldr	r3, [pc, #48]	; (800f668 <__multadd+0x84>)
 800f636:	480d      	ldr	r0, [pc, #52]	; (800f66c <__multadd+0x88>)
 800f638:	21b5      	movs	r1, #181	; 0xb5
 800f63a:	f000 febf 	bl	80103bc <__assert_func>
 800f63e:	6922      	ldr	r2, [r4, #16]
 800f640:	3202      	adds	r2, #2
 800f642:	f104 010c 	add.w	r1, r4, #12
 800f646:	0092      	lsls	r2, r2, #2
 800f648:	300c      	adds	r0, #12
 800f64a:	f7fc fffd 	bl	800c648 <memcpy>
 800f64e:	4621      	mov	r1, r4
 800f650:	4638      	mov	r0, r7
 800f652:	f7ff ffa5 	bl	800f5a0 <_Bfree>
 800f656:	4644      	mov	r4, r8
 800f658:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f65c:	3501      	adds	r5, #1
 800f65e:	615e      	str	r6, [r3, #20]
 800f660:	6125      	str	r5, [r4, #16]
 800f662:	4620      	mov	r0, r4
 800f664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f668:	08011430 	.word	0x08011430
 800f66c:	080114bc 	.word	0x080114bc

0800f670 <__s2b>:
 800f670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f674:	460c      	mov	r4, r1
 800f676:	4615      	mov	r5, r2
 800f678:	461f      	mov	r7, r3
 800f67a:	2209      	movs	r2, #9
 800f67c:	3308      	adds	r3, #8
 800f67e:	4606      	mov	r6, r0
 800f680:	fb93 f3f2 	sdiv	r3, r3, r2
 800f684:	2100      	movs	r1, #0
 800f686:	2201      	movs	r2, #1
 800f688:	429a      	cmp	r2, r3
 800f68a:	db09      	blt.n	800f6a0 <__s2b+0x30>
 800f68c:	4630      	mov	r0, r6
 800f68e:	f7ff ff47 	bl	800f520 <_Balloc>
 800f692:	b940      	cbnz	r0, 800f6a6 <__s2b+0x36>
 800f694:	4602      	mov	r2, r0
 800f696:	4b19      	ldr	r3, [pc, #100]	; (800f6fc <__s2b+0x8c>)
 800f698:	4819      	ldr	r0, [pc, #100]	; (800f700 <__s2b+0x90>)
 800f69a:	21ce      	movs	r1, #206	; 0xce
 800f69c:	f000 fe8e 	bl	80103bc <__assert_func>
 800f6a0:	0052      	lsls	r2, r2, #1
 800f6a2:	3101      	adds	r1, #1
 800f6a4:	e7f0      	b.n	800f688 <__s2b+0x18>
 800f6a6:	9b08      	ldr	r3, [sp, #32]
 800f6a8:	6143      	str	r3, [r0, #20]
 800f6aa:	2d09      	cmp	r5, #9
 800f6ac:	f04f 0301 	mov.w	r3, #1
 800f6b0:	6103      	str	r3, [r0, #16]
 800f6b2:	dd16      	ble.n	800f6e2 <__s2b+0x72>
 800f6b4:	f104 0909 	add.w	r9, r4, #9
 800f6b8:	46c8      	mov	r8, r9
 800f6ba:	442c      	add	r4, r5
 800f6bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f6c0:	4601      	mov	r1, r0
 800f6c2:	3b30      	subs	r3, #48	; 0x30
 800f6c4:	220a      	movs	r2, #10
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	f7ff ff8c 	bl	800f5e4 <__multadd>
 800f6cc:	45a0      	cmp	r8, r4
 800f6ce:	d1f5      	bne.n	800f6bc <__s2b+0x4c>
 800f6d0:	f1a5 0408 	sub.w	r4, r5, #8
 800f6d4:	444c      	add	r4, r9
 800f6d6:	1b2d      	subs	r5, r5, r4
 800f6d8:	1963      	adds	r3, r4, r5
 800f6da:	42bb      	cmp	r3, r7
 800f6dc:	db04      	blt.n	800f6e8 <__s2b+0x78>
 800f6de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6e2:	340a      	adds	r4, #10
 800f6e4:	2509      	movs	r5, #9
 800f6e6:	e7f6      	b.n	800f6d6 <__s2b+0x66>
 800f6e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f6ec:	4601      	mov	r1, r0
 800f6ee:	3b30      	subs	r3, #48	; 0x30
 800f6f0:	220a      	movs	r2, #10
 800f6f2:	4630      	mov	r0, r6
 800f6f4:	f7ff ff76 	bl	800f5e4 <__multadd>
 800f6f8:	e7ee      	b.n	800f6d8 <__s2b+0x68>
 800f6fa:	bf00      	nop
 800f6fc:	08011430 	.word	0x08011430
 800f700:	080114bc 	.word	0x080114bc

0800f704 <__hi0bits>:
 800f704:	0c03      	lsrs	r3, r0, #16
 800f706:	041b      	lsls	r3, r3, #16
 800f708:	b9d3      	cbnz	r3, 800f740 <__hi0bits+0x3c>
 800f70a:	0400      	lsls	r0, r0, #16
 800f70c:	2310      	movs	r3, #16
 800f70e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f712:	bf04      	itt	eq
 800f714:	0200      	lsleq	r0, r0, #8
 800f716:	3308      	addeq	r3, #8
 800f718:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f71c:	bf04      	itt	eq
 800f71e:	0100      	lsleq	r0, r0, #4
 800f720:	3304      	addeq	r3, #4
 800f722:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f726:	bf04      	itt	eq
 800f728:	0080      	lsleq	r0, r0, #2
 800f72a:	3302      	addeq	r3, #2
 800f72c:	2800      	cmp	r0, #0
 800f72e:	db05      	blt.n	800f73c <__hi0bits+0x38>
 800f730:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f734:	f103 0301 	add.w	r3, r3, #1
 800f738:	bf08      	it	eq
 800f73a:	2320      	moveq	r3, #32
 800f73c:	4618      	mov	r0, r3
 800f73e:	4770      	bx	lr
 800f740:	2300      	movs	r3, #0
 800f742:	e7e4      	b.n	800f70e <__hi0bits+0xa>

0800f744 <__lo0bits>:
 800f744:	6803      	ldr	r3, [r0, #0]
 800f746:	f013 0207 	ands.w	r2, r3, #7
 800f74a:	4601      	mov	r1, r0
 800f74c:	d00b      	beq.n	800f766 <__lo0bits+0x22>
 800f74e:	07da      	lsls	r2, r3, #31
 800f750:	d423      	bmi.n	800f79a <__lo0bits+0x56>
 800f752:	0798      	lsls	r0, r3, #30
 800f754:	bf49      	itett	mi
 800f756:	085b      	lsrmi	r3, r3, #1
 800f758:	089b      	lsrpl	r3, r3, #2
 800f75a:	2001      	movmi	r0, #1
 800f75c:	600b      	strmi	r3, [r1, #0]
 800f75e:	bf5c      	itt	pl
 800f760:	600b      	strpl	r3, [r1, #0]
 800f762:	2002      	movpl	r0, #2
 800f764:	4770      	bx	lr
 800f766:	b298      	uxth	r0, r3
 800f768:	b9a8      	cbnz	r0, 800f796 <__lo0bits+0x52>
 800f76a:	0c1b      	lsrs	r3, r3, #16
 800f76c:	2010      	movs	r0, #16
 800f76e:	b2da      	uxtb	r2, r3
 800f770:	b90a      	cbnz	r2, 800f776 <__lo0bits+0x32>
 800f772:	3008      	adds	r0, #8
 800f774:	0a1b      	lsrs	r3, r3, #8
 800f776:	071a      	lsls	r2, r3, #28
 800f778:	bf04      	itt	eq
 800f77a:	091b      	lsreq	r3, r3, #4
 800f77c:	3004      	addeq	r0, #4
 800f77e:	079a      	lsls	r2, r3, #30
 800f780:	bf04      	itt	eq
 800f782:	089b      	lsreq	r3, r3, #2
 800f784:	3002      	addeq	r0, #2
 800f786:	07da      	lsls	r2, r3, #31
 800f788:	d403      	bmi.n	800f792 <__lo0bits+0x4e>
 800f78a:	085b      	lsrs	r3, r3, #1
 800f78c:	f100 0001 	add.w	r0, r0, #1
 800f790:	d005      	beq.n	800f79e <__lo0bits+0x5a>
 800f792:	600b      	str	r3, [r1, #0]
 800f794:	4770      	bx	lr
 800f796:	4610      	mov	r0, r2
 800f798:	e7e9      	b.n	800f76e <__lo0bits+0x2a>
 800f79a:	2000      	movs	r0, #0
 800f79c:	4770      	bx	lr
 800f79e:	2020      	movs	r0, #32
 800f7a0:	4770      	bx	lr
	...

0800f7a4 <__i2b>:
 800f7a4:	b510      	push	{r4, lr}
 800f7a6:	460c      	mov	r4, r1
 800f7a8:	2101      	movs	r1, #1
 800f7aa:	f7ff feb9 	bl	800f520 <_Balloc>
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	b928      	cbnz	r0, 800f7be <__i2b+0x1a>
 800f7b2:	4b05      	ldr	r3, [pc, #20]	; (800f7c8 <__i2b+0x24>)
 800f7b4:	4805      	ldr	r0, [pc, #20]	; (800f7cc <__i2b+0x28>)
 800f7b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f7ba:	f000 fdff 	bl	80103bc <__assert_func>
 800f7be:	2301      	movs	r3, #1
 800f7c0:	6144      	str	r4, [r0, #20]
 800f7c2:	6103      	str	r3, [r0, #16]
 800f7c4:	bd10      	pop	{r4, pc}
 800f7c6:	bf00      	nop
 800f7c8:	08011430 	.word	0x08011430
 800f7cc:	080114bc 	.word	0x080114bc

0800f7d0 <__multiply>:
 800f7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d4:	4691      	mov	r9, r2
 800f7d6:	690a      	ldr	r2, [r1, #16]
 800f7d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	bfb8      	it	lt
 800f7e0:	460b      	movlt	r3, r1
 800f7e2:	460c      	mov	r4, r1
 800f7e4:	bfbc      	itt	lt
 800f7e6:	464c      	movlt	r4, r9
 800f7e8:	4699      	movlt	r9, r3
 800f7ea:	6927      	ldr	r7, [r4, #16]
 800f7ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f7f0:	68a3      	ldr	r3, [r4, #8]
 800f7f2:	6861      	ldr	r1, [r4, #4]
 800f7f4:	eb07 060a 	add.w	r6, r7, sl
 800f7f8:	42b3      	cmp	r3, r6
 800f7fa:	b085      	sub	sp, #20
 800f7fc:	bfb8      	it	lt
 800f7fe:	3101      	addlt	r1, #1
 800f800:	f7ff fe8e 	bl	800f520 <_Balloc>
 800f804:	b930      	cbnz	r0, 800f814 <__multiply+0x44>
 800f806:	4602      	mov	r2, r0
 800f808:	4b44      	ldr	r3, [pc, #272]	; (800f91c <__multiply+0x14c>)
 800f80a:	4845      	ldr	r0, [pc, #276]	; (800f920 <__multiply+0x150>)
 800f80c:	f240 115d 	movw	r1, #349	; 0x15d
 800f810:	f000 fdd4 	bl	80103bc <__assert_func>
 800f814:	f100 0514 	add.w	r5, r0, #20
 800f818:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f81c:	462b      	mov	r3, r5
 800f81e:	2200      	movs	r2, #0
 800f820:	4543      	cmp	r3, r8
 800f822:	d321      	bcc.n	800f868 <__multiply+0x98>
 800f824:	f104 0314 	add.w	r3, r4, #20
 800f828:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f82c:	f109 0314 	add.w	r3, r9, #20
 800f830:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f834:	9202      	str	r2, [sp, #8]
 800f836:	1b3a      	subs	r2, r7, r4
 800f838:	3a15      	subs	r2, #21
 800f83a:	f022 0203 	bic.w	r2, r2, #3
 800f83e:	3204      	adds	r2, #4
 800f840:	f104 0115 	add.w	r1, r4, #21
 800f844:	428f      	cmp	r7, r1
 800f846:	bf38      	it	cc
 800f848:	2204      	movcc	r2, #4
 800f84a:	9201      	str	r2, [sp, #4]
 800f84c:	9a02      	ldr	r2, [sp, #8]
 800f84e:	9303      	str	r3, [sp, #12]
 800f850:	429a      	cmp	r2, r3
 800f852:	d80c      	bhi.n	800f86e <__multiply+0x9e>
 800f854:	2e00      	cmp	r6, #0
 800f856:	dd03      	ble.n	800f860 <__multiply+0x90>
 800f858:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d05a      	beq.n	800f916 <__multiply+0x146>
 800f860:	6106      	str	r6, [r0, #16]
 800f862:	b005      	add	sp, #20
 800f864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f868:	f843 2b04 	str.w	r2, [r3], #4
 800f86c:	e7d8      	b.n	800f820 <__multiply+0x50>
 800f86e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f872:	f1ba 0f00 	cmp.w	sl, #0
 800f876:	d024      	beq.n	800f8c2 <__multiply+0xf2>
 800f878:	f104 0e14 	add.w	lr, r4, #20
 800f87c:	46a9      	mov	r9, r5
 800f87e:	f04f 0c00 	mov.w	ip, #0
 800f882:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f886:	f8d9 1000 	ldr.w	r1, [r9]
 800f88a:	fa1f fb82 	uxth.w	fp, r2
 800f88e:	b289      	uxth	r1, r1
 800f890:	fb0a 110b 	mla	r1, sl, fp, r1
 800f894:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f898:	f8d9 2000 	ldr.w	r2, [r9]
 800f89c:	4461      	add	r1, ip
 800f89e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f8a2:	fb0a c20b 	mla	r2, sl, fp, ip
 800f8a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f8aa:	b289      	uxth	r1, r1
 800f8ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f8b0:	4577      	cmp	r7, lr
 800f8b2:	f849 1b04 	str.w	r1, [r9], #4
 800f8b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f8ba:	d8e2      	bhi.n	800f882 <__multiply+0xb2>
 800f8bc:	9a01      	ldr	r2, [sp, #4]
 800f8be:	f845 c002 	str.w	ip, [r5, r2]
 800f8c2:	9a03      	ldr	r2, [sp, #12]
 800f8c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f8c8:	3304      	adds	r3, #4
 800f8ca:	f1b9 0f00 	cmp.w	r9, #0
 800f8ce:	d020      	beq.n	800f912 <__multiply+0x142>
 800f8d0:	6829      	ldr	r1, [r5, #0]
 800f8d2:	f104 0c14 	add.w	ip, r4, #20
 800f8d6:	46ae      	mov	lr, r5
 800f8d8:	f04f 0a00 	mov.w	sl, #0
 800f8dc:	f8bc b000 	ldrh.w	fp, [ip]
 800f8e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f8e4:	fb09 220b 	mla	r2, r9, fp, r2
 800f8e8:	4492      	add	sl, r2
 800f8ea:	b289      	uxth	r1, r1
 800f8ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f8f0:	f84e 1b04 	str.w	r1, [lr], #4
 800f8f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f8f8:	f8be 1000 	ldrh.w	r1, [lr]
 800f8fc:	0c12      	lsrs	r2, r2, #16
 800f8fe:	fb09 1102 	mla	r1, r9, r2, r1
 800f902:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f906:	4567      	cmp	r7, ip
 800f908:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f90c:	d8e6      	bhi.n	800f8dc <__multiply+0x10c>
 800f90e:	9a01      	ldr	r2, [sp, #4]
 800f910:	50a9      	str	r1, [r5, r2]
 800f912:	3504      	adds	r5, #4
 800f914:	e79a      	b.n	800f84c <__multiply+0x7c>
 800f916:	3e01      	subs	r6, #1
 800f918:	e79c      	b.n	800f854 <__multiply+0x84>
 800f91a:	bf00      	nop
 800f91c:	08011430 	.word	0x08011430
 800f920:	080114bc 	.word	0x080114bc

0800f924 <__pow5mult>:
 800f924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f928:	4615      	mov	r5, r2
 800f92a:	f012 0203 	ands.w	r2, r2, #3
 800f92e:	4606      	mov	r6, r0
 800f930:	460f      	mov	r7, r1
 800f932:	d007      	beq.n	800f944 <__pow5mult+0x20>
 800f934:	4c25      	ldr	r4, [pc, #148]	; (800f9cc <__pow5mult+0xa8>)
 800f936:	3a01      	subs	r2, #1
 800f938:	2300      	movs	r3, #0
 800f93a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f93e:	f7ff fe51 	bl	800f5e4 <__multadd>
 800f942:	4607      	mov	r7, r0
 800f944:	10ad      	asrs	r5, r5, #2
 800f946:	d03d      	beq.n	800f9c4 <__pow5mult+0xa0>
 800f948:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f94a:	b97c      	cbnz	r4, 800f96c <__pow5mult+0x48>
 800f94c:	2010      	movs	r0, #16
 800f94e:	f7ff fdcd 	bl	800f4ec <malloc>
 800f952:	4602      	mov	r2, r0
 800f954:	6270      	str	r0, [r6, #36]	; 0x24
 800f956:	b928      	cbnz	r0, 800f964 <__pow5mult+0x40>
 800f958:	4b1d      	ldr	r3, [pc, #116]	; (800f9d0 <__pow5mult+0xac>)
 800f95a:	481e      	ldr	r0, [pc, #120]	; (800f9d4 <__pow5mult+0xb0>)
 800f95c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f960:	f000 fd2c 	bl	80103bc <__assert_func>
 800f964:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f968:	6004      	str	r4, [r0, #0]
 800f96a:	60c4      	str	r4, [r0, #12]
 800f96c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f970:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f974:	b94c      	cbnz	r4, 800f98a <__pow5mult+0x66>
 800f976:	f240 2171 	movw	r1, #625	; 0x271
 800f97a:	4630      	mov	r0, r6
 800f97c:	f7ff ff12 	bl	800f7a4 <__i2b>
 800f980:	2300      	movs	r3, #0
 800f982:	f8c8 0008 	str.w	r0, [r8, #8]
 800f986:	4604      	mov	r4, r0
 800f988:	6003      	str	r3, [r0, #0]
 800f98a:	f04f 0900 	mov.w	r9, #0
 800f98e:	07eb      	lsls	r3, r5, #31
 800f990:	d50a      	bpl.n	800f9a8 <__pow5mult+0x84>
 800f992:	4639      	mov	r1, r7
 800f994:	4622      	mov	r2, r4
 800f996:	4630      	mov	r0, r6
 800f998:	f7ff ff1a 	bl	800f7d0 <__multiply>
 800f99c:	4639      	mov	r1, r7
 800f99e:	4680      	mov	r8, r0
 800f9a0:	4630      	mov	r0, r6
 800f9a2:	f7ff fdfd 	bl	800f5a0 <_Bfree>
 800f9a6:	4647      	mov	r7, r8
 800f9a8:	106d      	asrs	r5, r5, #1
 800f9aa:	d00b      	beq.n	800f9c4 <__pow5mult+0xa0>
 800f9ac:	6820      	ldr	r0, [r4, #0]
 800f9ae:	b938      	cbnz	r0, 800f9c0 <__pow5mult+0x9c>
 800f9b0:	4622      	mov	r2, r4
 800f9b2:	4621      	mov	r1, r4
 800f9b4:	4630      	mov	r0, r6
 800f9b6:	f7ff ff0b 	bl	800f7d0 <__multiply>
 800f9ba:	6020      	str	r0, [r4, #0]
 800f9bc:	f8c0 9000 	str.w	r9, [r0]
 800f9c0:	4604      	mov	r4, r0
 800f9c2:	e7e4      	b.n	800f98e <__pow5mult+0x6a>
 800f9c4:	4638      	mov	r0, r7
 800f9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9ca:	bf00      	nop
 800f9cc:	08011608 	.word	0x08011608
 800f9d0:	080113be 	.word	0x080113be
 800f9d4:	080114bc 	.word	0x080114bc

0800f9d8 <__lshift>:
 800f9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9dc:	460c      	mov	r4, r1
 800f9de:	6849      	ldr	r1, [r1, #4]
 800f9e0:	6923      	ldr	r3, [r4, #16]
 800f9e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f9e6:	68a3      	ldr	r3, [r4, #8]
 800f9e8:	4607      	mov	r7, r0
 800f9ea:	4691      	mov	r9, r2
 800f9ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f9f0:	f108 0601 	add.w	r6, r8, #1
 800f9f4:	42b3      	cmp	r3, r6
 800f9f6:	db0b      	blt.n	800fa10 <__lshift+0x38>
 800f9f8:	4638      	mov	r0, r7
 800f9fa:	f7ff fd91 	bl	800f520 <_Balloc>
 800f9fe:	4605      	mov	r5, r0
 800fa00:	b948      	cbnz	r0, 800fa16 <__lshift+0x3e>
 800fa02:	4602      	mov	r2, r0
 800fa04:	4b2a      	ldr	r3, [pc, #168]	; (800fab0 <__lshift+0xd8>)
 800fa06:	482b      	ldr	r0, [pc, #172]	; (800fab4 <__lshift+0xdc>)
 800fa08:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fa0c:	f000 fcd6 	bl	80103bc <__assert_func>
 800fa10:	3101      	adds	r1, #1
 800fa12:	005b      	lsls	r3, r3, #1
 800fa14:	e7ee      	b.n	800f9f4 <__lshift+0x1c>
 800fa16:	2300      	movs	r3, #0
 800fa18:	f100 0114 	add.w	r1, r0, #20
 800fa1c:	f100 0210 	add.w	r2, r0, #16
 800fa20:	4618      	mov	r0, r3
 800fa22:	4553      	cmp	r3, sl
 800fa24:	db37      	blt.n	800fa96 <__lshift+0xbe>
 800fa26:	6920      	ldr	r0, [r4, #16]
 800fa28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa2c:	f104 0314 	add.w	r3, r4, #20
 800fa30:	f019 091f 	ands.w	r9, r9, #31
 800fa34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fa38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fa3c:	d02f      	beq.n	800fa9e <__lshift+0xc6>
 800fa3e:	f1c9 0e20 	rsb	lr, r9, #32
 800fa42:	468a      	mov	sl, r1
 800fa44:	f04f 0c00 	mov.w	ip, #0
 800fa48:	681a      	ldr	r2, [r3, #0]
 800fa4a:	fa02 f209 	lsl.w	r2, r2, r9
 800fa4e:	ea42 020c 	orr.w	r2, r2, ip
 800fa52:	f84a 2b04 	str.w	r2, [sl], #4
 800fa56:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa5a:	4298      	cmp	r0, r3
 800fa5c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fa60:	d8f2      	bhi.n	800fa48 <__lshift+0x70>
 800fa62:	1b03      	subs	r3, r0, r4
 800fa64:	3b15      	subs	r3, #21
 800fa66:	f023 0303 	bic.w	r3, r3, #3
 800fa6a:	3304      	adds	r3, #4
 800fa6c:	f104 0215 	add.w	r2, r4, #21
 800fa70:	4290      	cmp	r0, r2
 800fa72:	bf38      	it	cc
 800fa74:	2304      	movcc	r3, #4
 800fa76:	f841 c003 	str.w	ip, [r1, r3]
 800fa7a:	f1bc 0f00 	cmp.w	ip, #0
 800fa7e:	d001      	beq.n	800fa84 <__lshift+0xac>
 800fa80:	f108 0602 	add.w	r6, r8, #2
 800fa84:	3e01      	subs	r6, #1
 800fa86:	4638      	mov	r0, r7
 800fa88:	612e      	str	r6, [r5, #16]
 800fa8a:	4621      	mov	r1, r4
 800fa8c:	f7ff fd88 	bl	800f5a0 <_Bfree>
 800fa90:	4628      	mov	r0, r5
 800fa92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa96:	f842 0f04 	str.w	r0, [r2, #4]!
 800fa9a:	3301      	adds	r3, #1
 800fa9c:	e7c1      	b.n	800fa22 <__lshift+0x4a>
 800fa9e:	3904      	subs	r1, #4
 800faa0:	f853 2b04 	ldr.w	r2, [r3], #4
 800faa4:	f841 2f04 	str.w	r2, [r1, #4]!
 800faa8:	4298      	cmp	r0, r3
 800faaa:	d8f9      	bhi.n	800faa0 <__lshift+0xc8>
 800faac:	e7ea      	b.n	800fa84 <__lshift+0xac>
 800faae:	bf00      	nop
 800fab0:	08011430 	.word	0x08011430
 800fab4:	080114bc 	.word	0x080114bc

0800fab8 <__mcmp>:
 800fab8:	b530      	push	{r4, r5, lr}
 800faba:	6902      	ldr	r2, [r0, #16]
 800fabc:	690c      	ldr	r4, [r1, #16]
 800fabe:	1b12      	subs	r2, r2, r4
 800fac0:	d10e      	bne.n	800fae0 <__mcmp+0x28>
 800fac2:	f100 0314 	add.w	r3, r0, #20
 800fac6:	3114      	adds	r1, #20
 800fac8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800facc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fad0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fad4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fad8:	42a5      	cmp	r5, r4
 800fada:	d003      	beq.n	800fae4 <__mcmp+0x2c>
 800fadc:	d305      	bcc.n	800faea <__mcmp+0x32>
 800fade:	2201      	movs	r2, #1
 800fae0:	4610      	mov	r0, r2
 800fae2:	bd30      	pop	{r4, r5, pc}
 800fae4:	4283      	cmp	r3, r0
 800fae6:	d3f3      	bcc.n	800fad0 <__mcmp+0x18>
 800fae8:	e7fa      	b.n	800fae0 <__mcmp+0x28>
 800faea:	f04f 32ff 	mov.w	r2, #4294967295
 800faee:	e7f7      	b.n	800fae0 <__mcmp+0x28>

0800faf0 <__mdiff>:
 800faf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faf4:	460c      	mov	r4, r1
 800faf6:	4606      	mov	r6, r0
 800faf8:	4611      	mov	r1, r2
 800fafa:	4620      	mov	r0, r4
 800fafc:	4690      	mov	r8, r2
 800fafe:	f7ff ffdb 	bl	800fab8 <__mcmp>
 800fb02:	1e05      	subs	r5, r0, #0
 800fb04:	d110      	bne.n	800fb28 <__mdiff+0x38>
 800fb06:	4629      	mov	r1, r5
 800fb08:	4630      	mov	r0, r6
 800fb0a:	f7ff fd09 	bl	800f520 <_Balloc>
 800fb0e:	b930      	cbnz	r0, 800fb1e <__mdiff+0x2e>
 800fb10:	4b3a      	ldr	r3, [pc, #232]	; (800fbfc <__mdiff+0x10c>)
 800fb12:	4602      	mov	r2, r0
 800fb14:	f240 2132 	movw	r1, #562	; 0x232
 800fb18:	4839      	ldr	r0, [pc, #228]	; (800fc00 <__mdiff+0x110>)
 800fb1a:	f000 fc4f 	bl	80103bc <__assert_func>
 800fb1e:	2301      	movs	r3, #1
 800fb20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fb24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb28:	bfa4      	itt	ge
 800fb2a:	4643      	movge	r3, r8
 800fb2c:	46a0      	movge	r8, r4
 800fb2e:	4630      	mov	r0, r6
 800fb30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fb34:	bfa6      	itte	ge
 800fb36:	461c      	movge	r4, r3
 800fb38:	2500      	movge	r5, #0
 800fb3a:	2501      	movlt	r5, #1
 800fb3c:	f7ff fcf0 	bl	800f520 <_Balloc>
 800fb40:	b920      	cbnz	r0, 800fb4c <__mdiff+0x5c>
 800fb42:	4b2e      	ldr	r3, [pc, #184]	; (800fbfc <__mdiff+0x10c>)
 800fb44:	4602      	mov	r2, r0
 800fb46:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fb4a:	e7e5      	b.n	800fb18 <__mdiff+0x28>
 800fb4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fb50:	6926      	ldr	r6, [r4, #16]
 800fb52:	60c5      	str	r5, [r0, #12]
 800fb54:	f104 0914 	add.w	r9, r4, #20
 800fb58:	f108 0514 	add.w	r5, r8, #20
 800fb5c:	f100 0e14 	add.w	lr, r0, #20
 800fb60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fb64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fb68:	f108 0210 	add.w	r2, r8, #16
 800fb6c:	46f2      	mov	sl, lr
 800fb6e:	2100      	movs	r1, #0
 800fb70:	f859 3b04 	ldr.w	r3, [r9], #4
 800fb74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fb78:	fa1f f883 	uxth.w	r8, r3
 800fb7c:	fa11 f18b 	uxtah	r1, r1, fp
 800fb80:	0c1b      	lsrs	r3, r3, #16
 800fb82:	eba1 0808 	sub.w	r8, r1, r8
 800fb86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fb8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fb8e:	fa1f f888 	uxth.w	r8, r8
 800fb92:	1419      	asrs	r1, r3, #16
 800fb94:	454e      	cmp	r6, r9
 800fb96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fb9a:	f84a 3b04 	str.w	r3, [sl], #4
 800fb9e:	d8e7      	bhi.n	800fb70 <__mdiff+0x80>
 800fba0:	1b33      	subs	r3, r6, r4
 800fba2:	3b15      	subs	r3, #21
 800fba4:	f023 0303 	bic.w	r3, r3, #3
 800fba8:	3304      	adds	r3, #4
 800fbaa:	3415      	adds	r4, #21
 800fbac:	42a6      	cmp	r6, r4
 800fbae:	bf38      	it	cc
 800fbb0:	2304      	movcc	r3, #4
 800fbb2:	441d      	add	r5, r3
 800fbb4:	4473      	add	r3, lr
 800fbb6:	469e      	mov	lr, r3
 800fbb8:	462e      	mov	r6, r5
 800fbba:	4566      	cmp	r6, ip
 800fbbc:	d30e      	bcc.n	800fbdc <__mdiff+0xec>
 800fbbe:	f10c 0203 	add.w	r2, ip, #3
 800fbc2:	1b52      	subs	r2, r2, r5
 800fbc4:	f022 0203 	bic.w	r2, r2, #3
 800fbc8:	3d03      	subs	r5, #3
 800fbca:	45ac      	cmp	ip, r5
 800fbcc:	bf38      	it	cc
 800fbce:	2200      	movcc	r2, #0
 800fbd0:	441a      	add	r2, r3
 800fbd2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fbd6:	b17b      	cbz	r3, 800fbf8 <__mdiff+0x108>
 800fbd8:	6107      	str	r7, [r0, #16]
 800fbda:	e7a3      	b.n	800fb24 <__mdiff+0x34>
 800fbdc:	f856 8b04 	ldr.w	r8, [r6], #4
 800fbe0:	fa11 f288 	uxtah	r2, r1, r8
 800fbe4:	1414      	asrs	r4, r2, #16
 800fbe6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fbea:	b292      	uxth	r2, r2
 800fbec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fbf0:	f84e 2b04 	str.w	r2, [lr], #4
 800fbf4:	1421      	asrs	r1, r4, #16
 800fbf6:	e7e0      	b.n	800fbba <__mdiff+0xca>
 800fbf8:	3f01      	subs	r7, #1
 800fbfa:	e7ea      	b.n	800fbd2 <__mdiff+0xe2>
 800fbfc:	08011430 	.word	0x08011430
 800fc00:	080114bc 	.word	0x080114bc

0800fc04 <__ulp>:
 800fc04:	b082      	sub	sp, #8
 800fc06:	ed8d 0b00 	vstr	d0, [sp]
 800fc0a:	9b01      	ldr	r3, [sp, #4]
 800fc0c:	4912      	ldr	r1, [pc, #72]	; (800fc58 <__ulp+0x54>)
 800fc0e:	4019      	ands	r1, r3
 800fc10:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fc14:	2900      	cmp	r1, #0
 800fc16:	dd05      	ble.n	800fc24 <__ulp+0x20>
 800fc18:	2200      	movs	r2, #0
 800fc1a:	460b      	mov	r3, r1
 800fc1c:	ec43 2b10 	vmov	d0, r2, r3
 800fc20:	b002      	add	sp, #8
 800fc22:	4770      	bx	lr
 800fc24:	4249      	negs	r1, r1
 800fc26:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fc2a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fc2e:	f04f 0200 	mov.w	r2, #0
 800fc32:	f04f 0300 	mov.w	r3, #0
 800fc36:	da04      	bge.n	800fc42 <__ulp+0x3e>
 800fc38:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fc3c:	fa41 f300 	asr.w	r3, r1, r0
 800fc40:	e7ec      	b.n	800fc1c <__ulp+0x18>
 800fc42:	f1a0 0114 	sub.w	r1, r0, #20
 800fc46:	291e      	cmp	r1, #30
 800fc48:	bfda      	itte	le
 800fc4a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fc4e:	fa20 f101 	lsrle.w	r1, r0, r1
 800fc52:	2101      	movgt	r1, #1
 800fc54:	460a      	mov	r2, r1
 800fc56:	e7e1      	b.n	800fc1c <__ulp+0x18>
 800fc58:	7ff00000 	.word	0x7ff00000

0800fc5c <__b2d>:
 800fc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc5e:	6905      	ldr	r5, [r0, #16]
 800fc60:	f100 0714 	add.w	r7, r0, #20
 800fc64:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fc68:	1f2e      	subs	r6, r5, #4
 800fc6a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fc6e:	4620      	mov	r0, r4
 800fc70:	f7ff fd48 	bl	800f704 <__hi0bits>
 800fc74:	f1c0 0320 	rsb	r3, r0, #32
 800fc78:	280a      	cmp	r0, #10
 800fc7a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fcf8 <__b2d+0x9c>
 800fc7e:	600b      	str	r3, [r1, #0]
 800fc80:	dc14      	bgt.n	800fcac <__b2d+0x50>
 800fc82:	f1c0 0e0b 	rsb	lr, r0, #11
 800fc86:	fa24 f10e 	lsr.w	r1, r4, lr
 800fc8a:	42b7      	cmp	r7, r6
 800fc8c:	ea41 030c 	orr.w	r3, r1, ip
 800fc90:	bf34      	ite	cc
 800fc92:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fc96:	2100      	movcs	r1, #0
 800fc98:	3015      	adds	r0, #21
 800fc9a:	fa04 f000 	lsl.w	r0, r4, r0
 800fc9e:	fa21 f10e 	lsr.w	r1, r1, lr
 800fca2:	ea40 0201 	orr.w	r2, r0, r1
 800fca6:	ec43 2b10 	vmov	d0, r2, r3
 800fcaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcac:	42b7      	cmp	r7, r6
 800fcae:	bf3a      	itte	cc
 800fcb0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fcb4:	f1a5 0608 	subcc.w	r6, r5, #8
 800fcb8:	2100      	movcs	r1, #0
 800fcba:	380b      	subs	r0, #11
 800fcbc:	d017      	beq.n	800fcee <__b2d+0x92>
 800fcbe:	f1c0 0c20 	rsb	ip, r0, #32
 800fcc2:	fa04 f500 	lsl.w	r5, r4, r0
 800fcc6:	42be      	cmp	r6, r7
 800fcc8:	fa21 f40c 	lsr.w	r4, r1, ip
 800fccc:	ea45 0504 	orr.w	r5, r5, r4
 800fcd0:	bf8c      	ite	hi
 800fcd2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fcd6:	2400      	movls	r4, #0
 800fcd8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fcdc:	fa01 f000 	lsl.w	r0, r1, r0
 800fce0:	fa24 f40c 	lsr.w	r4, r4, ip
 800fce4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fce8:	ea40 0204 	orr.w	r2, r0, r4
 800fcec:	e7db      	b.n	800fca6 <__b2d+0x4a>
 800fcee:	ea44 030c 	orr.w	r3, r4, ip
 800fcf2:	460a      	mov	r2, r1
 800fcf4:	e7d7      	b.n	800fca6 <__b2d+0x4a>
 800fcf6:	bf00      	nop
 800fcf8:	3ff00000 	.word	0x3ff00000

0800fcfc <__d2b>:
 800fcfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd00:	4689      	mov	r9, r1
 800fd02:	2101      	movs	r1, #1
 800fd04:	ec57 6b10 	vmov	r6, r7, d0
 800fd08:	4690      	mov	r8, r2
 800fd0a:	f7ff fc09 	bl	800f520 <_Balloc>
 800fd0e:	4604      	mov	r4, r0
 800fd10:	b930      	cbnz	r0, 800fd20 <__d2b+0x24>
 800fd12:	4602      	mov	r2, r0
 800fd14:	4b25      	ldr	r3, [pc, #148]	; (800fdac <__d2b+0xb0>)
 800fd16:	4826      	ldr	r0, [pc, #152]	; (800fdb0 <__d2b+0xb4>)
 800fd18:	f240 310a 	movw	r1, #778	; 0x30a
 800fd1c:	f000 fb4e 	bl	80103bc <__assert_func>
 800fd20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fd24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fd28:	bb35      	cbnz	r5, 800fd78 <__d2b+0x7c>
 800fd2a:	2e00      	cmp	r6, #0
 800fd2c:	9301      	str	r3, [sp, #4]
 800fd2e:	d028      	beq.n	800fd82 <__d2b+0x86>
 800fd30:	4668      	mov	r0, sp
 800fd32:	9600      	str	r6, [sp, #0]
 800fd34:	f7ff fd06 	bl	800f744 <__lo0bits>
 800fd38:	9900      	ldr	r1, [sp, #0]
 800fd3a:	b300      	cbz	r0, 800fd7e <__d2b+0x82>
 800fd3c:	9a01      	ldr	r2, [sp, #4]
 800fd3e:	f1c0 0320 	rsb	r3, r0, #32
 800fd42:	fa02 f303 	lsl.w	r3, r2, r3
 800fd46:	430b      	orrs	r3, r1
 800fd48:	40c2      	lsrs	r2, r0
 800fd4a:	6163      	str	r3, [r4, #20]
 800fd4c:	9201      	str	r2, [sp, #4]
 800fd4e:	9b01      	ldr	r3, [sp, #4]
 800fd50:	61a3      	str	r3, [r4, #24]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	bf14      	ite	ne
 800fd56:	2202      	movne	r2, #2
 800fd58:	2201      	moveq	r2, #1
 800fd5a:	6122      	str	r2, [r4, #16]
 800fd5c:	b1d5      	cbz	r5, 800fd94 <__d2b+0x98>
 800fd5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fd62:	4405      	add	r5, r0
 800fd64:	f8c9 5000 	str.w	r5, [r9]
 800fd68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fd6c:	f8c8 0000 	str.w	r0, [r8]
 800fd70:	4620      	mov	r0, r4
 800fd72:	b003      	add	sp, #12
 800fd74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd7c:	e7d5      	b.n	800fd2a <__d2b+0x2e>
 800fd7e:	6161      	str	r1, [r4, #20]
 800fd80:	e7e5      	b.n	800fd4e <__d2b+0x52>
 800fd82:	a801      	add	r0, sp, #4
 800fd84:	f7ff fcde 	bl	800f744 <__lo0bits>
 800fd88:	9b01      	ldr	r3, [sp, #4]
 800fd8a:	6163      	str	r3, [r4, #20]
 800fd8c:	2201      	movs	r2, #1
 800fd8e:	6122      	str	r2, [r4, #16]
 800fd90:	3020      	adds	r0, #32
 800fd92:	e7e3      	b.n	800fd5c <__d2b+0x60>
 800fd94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fd98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fd9c:	f8c9 0000 	str.w	r0, [r9]
 800fda0:	6918      	ldr	r0, [r3, #16]
 800fda2:	f7ff fcaf 	bl	800f704 <__hi0bits>
 800fda6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fdaa:	e7df      	b.n	800fd6c <__d2b+0x70>
 800fdac:	08011430 	.word	0x08011430
 800fdb0:	080114bc 	.word	0x080114bc

0800fdb4 <__ratio>:
 800fdb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdb8:	4688      	mov	r8, r1
 800fdba:	4669      	mov	r1, sp
 800fdbc:	4681      	mov	r9, r0
 800fdbe:	f7ff ff4d 	bl	800fc5c <__b2d>
 800fdc2:	a901      	add	r1, sp, #4
 800fdc4:	4640      	mov	r0, r8
 800fdc6:	ec55 4b10 	vmov	r4, r5, d0
 800fdca:	f7ff ff47 	bl	800fc5c <__b2d>
 800fdce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fdd2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fdd6:	eba3 0c02 	sub.w	ip, r3, r2
 800fdda:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fdde:	1a9b      	subs	r3, r3, r2
 800fde0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fde4:	ec51 0b10 	vmov	r0, r1, d0
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	bfd6      	itet	le
 800fdec:	460a      	movle	r2, r1
 800fdee:	462a      	movgt	r2, r5
 800fdf0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fdf4:	468b      	mov	fp, r1
 800fdf6:	462f      	mov	r7, r5
 800fdf8:	bfd4      	ite	le
 800fdfa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fdfe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fe02:	4620      	mov	r0, r4
 800fe04:	ee10 2a10 	vmov	r2, s0
 800fe08:	465b      	mov	r3, fp
 800fe0a:	4639      	mov	r1, r7
 800fe0c:	f7f0 fd26 	bl	800085c <__aeabi_ddiv>
 800fe10:	ec41 0b10 	vmov	d0, r0, r1
 800fe14:	b003      	add	sp, #12
 800fe16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe1a <__copybits>:
 800fe1a:	3901      	subs	r1, #1
 800fe1c:	b570      	push	{r4, r5, r6, lr}
 800fe1e:	1149      	asrs	r1, r1, #5
 800fe20:	6914      	ldr	r4, [r2, #16]
 800fe22:	3101      	adds	r1, #1
 800fe24:	f102 0314 	add.w	r3, r2, #20
 800fe28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fe2c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fe30:	1f05      	subs	r5, r0, #4
 800fe32:	42a3      	cmp	r3, r4
 800fe34:	d30c      	bcc.n	800fe50 <__copybits+0x36>
 800fe36:	1aa3      	subs	r3, r4, r2
 800fe38:	3b11      	subs	r3, #17
 800fe3a:	f023 0303 	bic.w	r3, r3, #3
 800fe3e:	3211      	adds	r2, #17
 800fe40:	42a2      	cmp	r2, r4
 800fe42:	bf88      	it	hi
 800fe44:	2300      	movhi	r3, #0
 800fe46:	4418      	add	r0, r3
 800fe48:	2300      	movs	r3, #0
 800fe4a:	4288      	cmp	r0, r1
 800fe4c:	d305      	bcc.n	800fe5a <__copybits+0x40>
 800fe4e:	bd70      	pop	{r4, r5, r6, pc}
 800fe50:	f853 6b04 	ldr.w	r6, [r3], #4
 800fe54:	f845 6f04 	str.w	r6, [r5, #4]!
 800fe58:	e7eb      	b.n	800fe32 <__copybits+0x18>
 800fe5a:	f840 3b04 	str.w	r3, [r0], #4
 800fe5e:	e7f4      	b.n	800fe4a <__copybits+0x30>

0800fe60 <__any_on>:
 800fe60:	f100 0214 	add.w	r2, r0, #20
 800fe64:	6900      	ldr	r0, [r0, #16]
 800fe66:	114b      	asrs	r3, r1, #5
 800fe68:	4298      	cmp	r0, r3
 800fe6a:	b510      	push	{r4, lr}
 800fe6c:	db11      	blt.n	800fe92 <__any_on+0x32>
 800fe6e:	dd0a      	ble.n	800fe86 <__any_on+0x26>
 800fe70:	f011 011f 	ands.w	r1, r1, #31
 800fe74:	d007      	beq.n	800fe86 <__any_on+0x26>
 800fe76:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fe7a:	fa24 f001 	lsr.w	r0, r4, r1
 800fe7e:	fa00 f101 	lsl.w	r1, r0, r1
 800fe82:	428c      	cmp	r4, r1
 800fe84:	d10b      	bne.n	800fe9e <__any_on+0x3e>
 800fe86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe8a:	4293      	cmp	r3, r2
 800fe8c:	d803      	bhi.n	800fe96 <__any_on+0x36>
 800fe8e:	2000      	movs	r0, #0
 800fe90:	bd10      	pop	{r4, pc}
 800fe92:	4603      	mov	r3, r0
 800fe94:	e7f7      	b.n	800fe86 <__any_on+0x26>
 800fe96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fe9a:	2900      	cmp	r1, #0
 800fe9c:	d0f5      	beq.n	800fe8a <__any_on+0x2a>
 800fe9e:	2001      	movs	r0, #1
 800fea0:	e7f6      	b.n	800fe90 <__any_on+0x30>

0800fea2 <_calloc_r>:
 800fea2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fea4:	fba1 2402 	umull	r2, r4, r1, r2
 800fea8:	b94c      	cbnz	r4, 800febe <_calloc_r+0x1c>
 800feaa:	4611      	mov	r1, r2
 800feac:	9201      	str	r2, [sp, #4]
 800feae:	f000 f87b 	bl	800ffa8 <_malloc_r>
 800feb2:	9a01      	ldr	r2, [sp, #4]
 800feb4:	4605      	mov	r5, r0
 800feb6:	b930      	cbnz	r0, 800fec6 <_calloc_r+0x24>
 800feb8:	4628      	mov	r0, r5
 800feba:	b003      	add	sp, #12
 800febc:	bd30      	pop	{r4, r5, pc}
 800febe:	220c      	movs	r2, #12
 800fec0:	6002      	str	r2, [r0, #0]
 800fec2:	2500      	movs	r5, #0
 800fec4:	e7f8      	b.n	800feb8 <_calloc_r+0x16>
 800fec6:	4621      	mov	r1, r4
 800fec8:	f7fc fbcc 	bl	800c664 <memset>
 800fecc:	e7f4      	b.n	800feb8 <_calloc_r+0x16>
	...

0800fed0 <_free_r>:
 800fed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fed2:	2900      	cmp	r1, #0
 800fed4:	d044      	beq.n	800ff60 <_free_r+0x90>
 800fed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800feda:	9001      	str	r0, [sp, #4]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	f1a1 0404 	sub.w	r4, r1, #4
 800fee2:	bfb8      	it	lt
 800fee4:	18e4      	addlt	r4, r4, r3
 800fee6:	f000 fab3 	bl	8010450 <__malloc_lock>
 800feea:	4a1e      	ldr	r2, [pc, #120]	; (800ff64 <_free_r+0x94>)
 800feec:	9801      	ldr	r0, [sp, #4]
 800feee:	6813      	ldr	r3, [r2, #0]
 800fef0:	b933      	cbnz	r3, 800ff00 <_free_r+0x30>
 800fef2:	6063      	str	r3, [r4, #4]
 800fef4:	6014      	str	r4, [r2, #0]
 800fef6:	b003      	add	sp, #12
 800fef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fefc:	f000 baae 	b.w	801045c <__malloc_unlock>
 800ff00:	42a3      	cmp	r3, r4
 800ff02:	d908      	bls.n	800ff16 <_free_r+0x46>
 800ff04:	6825      	ldr	r5, [r4, #0]
 800ff06:	1961      	adds	r1, r4, r5
 800ff08:	428b      	cmp	r3, r1
 800ff0a:	bf01      	itttt	eq
 800ff0c:	6819      	ldreq	r1, [r3, #0]
 800ff0e:	685b      	ldreq	r3, [r3, #4]
 800ff10:	1949      	addeq	r1, r1, r5
 800ff12:	6021      	streq	r1, [r4, #0]
 800ff14:	e7ed      	b.n	800fef2 <_free_r+0x22>
 800ff16:	461a      	mov	r2, r3
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	b10b      	cbz	r3, 800ff20 <_free_r+0x50>
 800ff1c:	42a3      	cmp	r3, r4
 800ff1e:	d9fa      	bls.n	800ff16 <_free_r+0x46>
 800ff20:	6811      	ldr	r1, [r2, #0]
 800ff22:	1855      	adds	r5, r2, r1
 800ff24:	42a5      	cmp	r5, r4
 800ff26:	d10b      	bne.n	800ff40 <_free_r+0x70>
 800ff28:	6824      	ldr	r4, [r4, #0]
 800ff2a:	4421      	add	r1, r4
 800ff2c:	1854      	adds	r4, r2, r1
 800ff2e:	42a3      	cmp	r3, r4
 800ff30:	6011      	str	r1, [r2, #0]
 800ff32:	d1e0      	bne.n	800fef6 <_free_r+0x26>
 800ff34:	681c      	ldr	r4, [r3, #0]
 800ff36:	685b      	ldr	r3, [r3, #4]
 800ff38:	6053      	str	r3, [r2, #4]
 800ff3a:	4421      	add	r1, r4
 800ff3c:	6011      	str	r1, [r2, #0]
 800ff3e:	e7da      	b.n	800fef6 <_free_r+0x26>
 800ff40:	d902      	bls.n	800ff48 <_free_r+0x78>
 800ff42:	230c      	movs	r3, #12
 800ff44:	6003      	str	r3, [r0, #0]
 800ff46:	e7d6      	b.n	800fef6 <_free_r+0x26>
 800ff48:	6825      	ldr	r5, [r4, #0]
 800ff4a:	1961      	adds	r1, r4, r5
 800ff4c:	428b      	cmp	r3, r1
 800ff4e:	bf04      	itt	eq
 800ff50:	6819      	ldreq	r1, [r3, #0]
 800ff52:	685b      	ldreq	r3, [r3, #4]
 800ff54:	6063      	str	r3, [r4, #4]
 800ff56:	bf04      	itt	eq
 800ff58:	1949      	addeq	r1, r1, r5
 800ff5a:	6021      	streq	r1, [r4, #0]
 800ff5c:	6054      	str	r4, [r2, #4]
 800ff5e:	e7ca      	b.n	800fef6 <_free_r+0x26>
 800ff60:	b003      	add	sp, #12
 800ff62:	bd30      	pop	{r4, r5, pc}
 800ff64:	200010e4 	.word	0x200010e4

0800ff68 <sbrk_aligned>:
 800ff68:	b570      	push	{r4, r5, r6, lr}
 800ff6a:	4e0e      	ldr	r6, [pc, #56]	; (800ffa4 <sbrk_aligned+0x3c>)
 800ff6c:	460c      	mov	r4, r1
 800ff6e:	6831      	ldr	r1, [r6, #0]
 800ff70:	4605      	mov	r5, r0
 800ff72:	b911      	cbnz	r1, 800ff7a <sbrk_aligned+0x12>
 800ff74:	f000 f9f0 	bl	8010358 <_sbrk_r>
 800ff78:	6030      	str	r0, [r6, #0]
 800ff7a:	4621      	mov	r1, r4
 800ff7c:	4628      	mov	r0, r5
 800ff7e:	f000 f9eb 	bl	8010358 <_sbrk_r>
 800ff82:	1c43      	adds	r3, r0, #1
 800ff84:	d00a      	beq.n	800ff9c <sbrk_aligned+0x34>
 800ff86:	1cc4      	adds	r4, r0, #3
 800ff88:	f024 0403 	bic.w	r4, r4, #3
 800ff8c:	42a0      	cmp	r0, r4
 800ff8e:	d007      	beq.n	800ffa0 <sbrk_aligned+0x38>
 800ff90:	1a21      	subs	r1, r4, r0
 800ff92:	4628      	mov	r0, r5
 800ff94:	f000 f9e0 	bl	8010358 <_sbrk_r>
 800ff98:	3001      	adds	r0, #1
 800ff9a:	d101      	bne.n	800ffa0 <sbrk_aligned+0x38>
 800ff9c:	f04f 34ff 	mov.w	r4, #4294967295
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	bd70      	pop	{r4, r5, r6, pc}
 800ffa4:	200010e8 	.word	0x200010e8

0800ffa8 <_malloc_r>:
 800ffa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffac:	1ccd      	adds	r5, r1, #3
 800ffae:	f025 0503 	bic.w	r5, r5, #3
 800ffb2:	3508      	adds	r5, #8
 800ffb4:	2d0c      	cmp	r5, #12
 800ffb6:	bf38      	it	cc
 800ffb8:	250c      	movcc	r5, #12
 800ffba:	2d00      	cmp	r5, #0
 800ffbc:	4607      	mov	r7, r0
 800ffbe:	db01      	blt.n	800ffc4 <_malloc_r+0x1c>
 800ffc0:	42a9      	cmp	r1, r5
 800ffc2:	d905      	bls.n	800ffd0 <_malloc_r+0x28>
 800ffc4:	230c      	movs	r3, #12
 800ffc6:	603b      	str	r3, [r7, #0]
 800ffc8:	2600      	movs	r6, #0
 800ffca:	4630      	mov	r0, r6
 800ffcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffd0:	4e2e      	ldr	r6, [pc, #184]	; (801008c <_malloc_r+0xe4>)
 800ffd2:	f000 fa3d 	bl	8010450 <__malloc_lock>
 800ffd6:	6833      	ldr	r3, [r6, #0]
 800ffd8:	461c      	mov	r4, r3
 800ffda:	bb34      	cbnz	r4, 801002a <_malloc_r+0x82>
 800ffdc:	4629      	mov	r1, r5
 800ffde:	4638      	mov	r0, r7
 800ffe0:	f7ff ffc2 	bl	800ff68 <sbrk_aligned>
 800ffe4:	1c43      	adds	r3, r0, #1
 800ffe6:	4604      	mov	r4, r0
 800ffe8:	d14d      	bne.n	8010086 <_malloc_r+0xde>
 800ffea:	6834      	ldr	r4, [r6, #0]
 800ffec:	4626      	mov	r6, r4
 800ffee:	2e00      	cmp	r6, #0
 800fff0:	d140      	bne.n	8010074 <_malloc_r+0xcc>
 800fff2:	6823      	ldr	r3, [r4, #0]
 800fff4:	4631      	mov	r1, r6
 800fff6:	4638      	mov	r0, r7
 800fff8:	eb04 0803 	add.w	r8, r4, r3
 800fffc:	f000 f9ac 	bl	8010358 <_sbrk_r>
 8010000:	4580      	cmp	r8, r0
 8010002:	d13a      	bne.n	801007a <_malloc_r+0xd2>
 8010004:	6821      	ldr	r1, [r4, #0]
 8010006:	3503      	adds	r5, #3
 8010008:	1a6d      	subs	r5, r5, r1
 801000a:	f025 0503 	bic.w	r5, r5, #3
 801000e:	3508      	adds	r5, #8
 8010010:	2d0c      	cmp	r5, #12
 8010012:	bf38      	it	cc
 8010014:	250c      	movcc	r5, #12
 8010016:	4629      	mov	r1, r5
 8010018:	4638      	mov	r0, r7
 801001a:	f7ff ffa5 	bl	800ff68 <sbrk_aligned>
 801001e:	3001      	adds	r0, #1
 8010020:	d02b      	beq.n	801007a <_malloc_r+0xd2>
 8010022:	6823      	ldr	r3, [r4, #0]
 8010024:	442b      	add	r3, r5
 8010026:	6023      	str	r3, [r4, #0]
 8010028:	e00e      	b.n	8010048 <_malloc_r+0xa0>
 801002a:	6822      	ldr	r2, [r4, #0]
 801002c:	1b52      	subs	r2, r2, r5
 801002e:	d41e      	bmi.n	801006e <_malloc_r+0xc6>
 8010030:	2a0b      	cmp	r2, #11
 8010032:	d916      	bls.n	8010062 <_malloc_r+0xba>
 8010034:	1961      	adds	r1, r4, r5
 8010036:	42a3      	cmp	r3, r4
 8010038:	6025      	str	r5, [r4, #0]
 801003a:	bf18      	it	ne
 801003c:	6059      	strne	r1, [r3, #4]
 801003e:	6863      	ldr	r3, [r4, #4]
 8010040:	bf08      	it	eq
 8010042:	6031      	streq	r1, [r6, #0]
 8010044:	5162      	str	r2, [r4, r5]
 8010046:	604b      	str	r3, [r1, #4]
 8010048:	4638      	mov	r0, r7
 801004a:	f104 060b 	add.w	r6, r4, #11
 801004e:	f000 fa05 	bl	801045c <__malloc_unlock>
 8010052:	f026 0607 	bic.w	r6, r6, #7
 8010056:	1d23      	adds	r3, r4, #4
 8010058:	1af2      	subs	r2, r6, r3
 801005a:	d0b6      	beq.n	800ffca <_malloc_r+0x22>
 801005c:	1b9b      	subs	r3, r3, r6
 801005e:	50a3      	str	r3, [r4, r2]
 8010060:	e7b3      	b.n	800ffca <_malloc_r+0x22>
 8010062:	6862      	ldr	r2, [r4, #4]
 8010064:	42a3      	cmp	r3, r4
 8010066:	bf0c      	ite	eq
 8010068:	6032      	streq	r2, [r6, #0]
 801006a:	605a      	strne	r2, [r3, #4]
 801006c:	e7ec      	b.n	8010048 <_malloc_r+0xa0>
 801006e:	4623      	mov	r3, r4
 8010070:	6864      	ldr	r4, [r4, #4]
 8010072:	e7b2      	b.n	800ffda <_malloc_r+0x32>
 8010074:	4634      	mov	r4, r6
 8010076:	6876      	ldr	r6, [r6, #4]
 8010078:	e7b9      	b.n	800ffee <_malloc_r+0x46>
 801007a:	230c      	movs	r3, #12
 801007c:	603b      	str	r3, [r7, #0]
 801007e:	4638      	mov	r0, r7
 8010080:	f000 f9ec 	bl	801045c <__malloc_unlock>
 8010084:	e7a1      	b.n	800ffca <_malloc_r+0x22>
 8010086:	6025      	str	r5, [r4, #0]
 8010088:	e7de      	b.n	8010048 <_malloc_r+0xa0>
 801008a:	bf00      	nop
 801008c:	200010e4 	.word	0x200010e4

08010090 <__ssputs_r>:
 8010090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010094:	688e      	ldr	r6, [r1, #8]
 8010096:	429e      	cmp	r6, r3
 8010098:	4682      	mov	sl, r0
 801009a:	460c      	mov	r4, r1
 801009c:	4690      	mov	r8, r2
 801009e:	461f      	mov	r7, r3
 80100a0:	d838      	bhi.n	8010114 <__ssputs_r+0x84>
 80100a2:	898a      	ldrh	r2, [r1, #12]
 80100a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80100a8:	d032      	beq.n	8010110 <__ssputs_r+0x80>
 80100aa:	6825      	ldr	r5, [r4, #0]
 80100ac:	6909      	ldr	r1, [r1, #16]
 80100ae:	eba5 0901 	sub.w	r9, r5, r1
 80100b2:	6965      	ldr	r5, [r4, #20]
 80100b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80100b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80100bc:	3301      	adds	r3, #1
 80100be:	444b      	add	r3, r9
 80100c0:	106d      	asrs	r5, r5, #1
 80100c2:	429d      	cmp	r5, r3
 80100c4:	bf38      	it	cc
 80100c6:	461d      	movcc	r5, r3
 80100c8:	0553      	lsls	r3, r2, #21
 80100ca:	d531      	bpl.n	8010130 <__ssputs_r+0xa0>
 80100cc:	4629      	mov	r1, r5
 80100ce:	f7ff ff6b 	bl	800ffa8 <_malloc_r>
 80100d2:	4606      	mov	r6, r0
 80100d4:	b950      	cbnz	r0, 80100ec <__ssputs_r+0x5c>
 80100d6:	230c      	movs	r3, #12
 80100d8:	f8ca 3000 	str.w	r3, [sl]
 80100dc:	89a3      	ldrh	r3, [r4, #12]
 80100de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100e2:	81a3      	strh	r3, [r4, #12]
 80100e4:	f04f 30ff 	mov.w	r0, #4294967295
 80100e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100ec:	6921      	ldr	r1, [r4, #16]
 80100ee:	464a      	mov	r2, r9
 80100f0:	f7fc faaa 	bl	800c648 <memcpy>
 80100f4:	89a3      	ldrh	r3, [r4, #12]
 80100f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80100fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100fe:	81a3      	strh	r3, [r4, #12]
 8010100:	6126      	str	r6, [r4, #16]
 8010102:	6165      	str	r5, [r4, #20]
 8010104:	444e      	add	r6, r9
 8010106:	eba5 0509 	sub.w	r5, r5, r9
 801010a:	6026      	str	r6, [r4, #0]
 801010c:	60a5      	str	r5, [r4, #8]
 801010e:	463e      	mov	r6, r7
 8010110:	42be      	cmp	r6, r7
 8010112:	d900      	bls.n	8010116 <__ssputs_r+0x86>
 8010114:	463e      	mov	r6, r7
 8010116:	6820      	ldr	r0, [r4, #0]
 8010118:	4632      	mov	r2, r6
 801011a:	4641      	mov	r1, r8
 801011c:	f000 f97e 	bl	801041c <memmove>
 8010120:	68a3      	ldr	r3, [r4, #8]
 8010122:	1b9b      	subs	r3, r3, r6
 8010124:	60a3      	str	r3, [r4, #8]
 8010126:	6823      	ldr	r3, [r4, #0]
 8010128:	4433      	add	r3, r6
 801012a:	6023      	str	r3, [r4, #0]
 801012c:	2000      	movs	r0, #0
 801012e:	e7db      	b.n	80100e8 <__ssputs_r+0x58>
 8010130:	462a      	mov	r2, r5
 8010132:	f000 f999 	bl	8010468 <_realloc_r>
 8010136:	4606      	mov	r6, r0
 8010138:	2800      	cmp	r0, #0
 801013a:	d1e1      	bne.n	8010100 <__ssputs_r+0x70>
 801013c:	6921      	ldr	r1, [r4, #16]
 801013e:	4650      	mov	r0, sl
 8010140:	f7ff fec6 	bl	800fed0 <_free_r>
 8010144:	e7c7      	b.n	80100d6 <__ssputs_r+0x46>
	...

08010148 <_svfiprintf_r>:
 8010148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801014c:	4698      	mov	r8, r3
 801014e:	898b      	ldrh	r3, [r1, #12]
 8010150:	061b      	lsls	r3, r3, #24
 8010152:	b09d      	sub	sp, #116	; 0x74
 8010154:	4607      	mov	r7, r0
 8010156:	460d      	mov	r5, r1
 8010158:	4614      	mov	r4, r2
 801015a:	d50e      	bpl.n	801017a <_svfiprintf_r+0x32>
 801015c:	690b      	ldr	r3, [r1, #16]
 801015e:	b963      	cbnz	r3, 801017a <_svfiprintf_r+0x32>
 8010160:	2140      	movs	r1, #64	; 0x40
 8010162:	f7ff ff21 	bl	800ffa8 <_malloc_r>
 8010166:	6028      	str	r0, [r5, #0]
 8010168:	6128      	str	r0, [r5, #16]
 801016a:	b920      	cbnz	r0, 8010176 <_svfiprintf_r+0x2e>
 801016c:	230c      	movs	r3, #12
 801016e:	603b      	str	r3, [r7, #0]
 8010170:	f04f 30ff 	mov.w	r0, #4294967295
 8010174:	e0d1      	b.n	801031a <_svfiprintf_r+0x1d2>
 8010176:	2340      	movs	r3, #64	; 0x40
 8010178:	616b      	str	r3, [r5, #20]
 801017a:	2300      	movs	r3, #0
 801017c:	9309      	str	r3, [sp, #36]	; 0x24
 801017e:	2320      	movs	r3, #32
 8010180:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010184:	f8cd 800c 	str.w	r8, [sp, #12]
 8010188:	2330      	movs	r3, #48	; 0x30
 801018a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010334 <_svfiprintf_r+0x1ec>
 801018e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010192:	f04f 0901 	mov.w	r9, #1
 8010196:	4623      	mov	r3, r4
 8010198:	469a      	mov	sl, r3
 801019a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801019e:	b10a      	cbz	r2, 80101a4 <_svfiprintf_r+0x5c>
 80101a0:	2a25      	cmp	r2, #37	; 0x25
 80101a2:	d1f9      	bne.n	8010198 <_svfiprintf_r+0x50>
 80101a4:	ebba 0b04 	subs.w	fp, sl, r4
 80101a8:	d00b      	beq.n	80101c2 <_svfiprintf_r+0x7a>
 80101aa:	465b      	mov	r3, fp
 80101ac:	4622      	mov	r2, r4
 80101ae:	4629      	mov	r1, r5
 80101b0:	4638      	mov	r0, r7
 80101b2:	f7ff ff6d 	bl	8010090 <__ssputs_r>
 80101b6:	3001      	adds	r0, #1
 80101b8:	f000 80aa 	beq.w	8010310 <_svfiprintf_r+0x1c8>
 80101bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101be:	445a      	add	r2, fp
 80101c0:	9209      	str	r2, [sp, #36]	; 0x24
 80101c2:	f89a 3000 	ldrb.w	r3, [sl]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	f000 80a2 	beq.w	8010310 <_svfiprintf_r+0x1c8>
 80101cc:	2300      	movs	r3, #0
 80101ce:	f04f 32ff 	mov.w	r2, #4294967295
 80101d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101d6:	f10a 0a01 	add.w	sl, sl, #1
 80101da:	9304      	str	r3, [sp, #16]
 80101dc:	9307      	str	r3, [sp, #28]
 80101de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101e2:	931a      	str	r3, [sp, #104]	; 0x68
 80101e4:	4654      	mov	r4, sl
 80101e6:	2205      	movs	r2, #5
 80101e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101ec:	4851      	ldr	r0, [pc, #324]	; (8010334 <_svfiprintf_r+0x1ec>)
 80101ee:	f7ef ffff 	bl	80001f0 <memchr>
 80101f2:	9a04      	ldr	r2, [sp, #16]
 80101f4:	b9d8      	cbnz	r0, 801022e <_svfiprintf_r+0xe6>
 80101f6:	06d0      	lsls	r0, r2, #27
 80101f8:	bf44      	itt	mi
 80101fa:	2320      	movmi	r3, #32
 80101fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010200:	0711      	lsls	r1, r2, #28
 8010202:	bf44      	itt	mi
 8010204:	232b      	movmi	r3, #43	; 0x2b
 8010206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801020a:	f89a 3000 	ldrb.w	r3, [sl]
 801020e:	2b2a      	cmp	r3, #42	; 0x2a
 8010210:	d015      	beq.n	801023e <_svfiprintf_r+0xf6>
 8010212:	9a07      	ldr	r2, [sp, #28]
 8010214:	4654      	mov	r4, sl
 8010216:	2000      	movs	r0, #0
 8010218:	f04f 0c0a 	mov.w	ip, #10
 801021c:	4621      	mov	r1, r4
 801021e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010222:	3b30      	subs	r3, #48	; 0x30
 8010224:	2b09      	cmp	r3, #9
 8010226:	d94e      	bls.n	80102c6 <_svfiprintf_r+0x17e>
 8010228:	b1b0      	cbz	r0, 8010258 <_svfiprintf_r+0x110>
 801022a:	9207      	str	r2, [sp, #28]
 801022c:	e014      	b.n	8010258 <_svfiprintf_r+0x110>
 801022e:	eba0 0308 	sub.w	r3, r0, r8
 8010232:	fa09 f303 	lsl.w	r3, r9, r3
 8010236:	4313      	orrs	r3, r2
 8010238:	9304      	str	r3, [sp, #16]
 801023a:	46a2      	mov	sl, r4
 801023c:	e7d2      	b.n	80101e4 <_svfiprintf_r+0x9c>
 801023e:	9b03      	ldr	r3, [sp, #12]
 8010240:	1d19      	adds	r1, r3, #4
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	9103      	str	r1, [sp, #12]
 8010246:	2b00      	cmp	r3, #0
 8010248:	bfbb      	ittet	lt
 801024a:	425b      	neglt	r3, r3
 801024c:	f042 0202 	orrlt.w	r2, r2, #2
 8010250:	9307      	strge	r3, [sp, #28]
 8010252:	9307      	strlt	r3, [sp, #28]
 8010254:	bfb8      	it	lt
 8010256:	9204      	strlt	r2, [sp, #16]
 8010258:	7823      	ldrb	r3, [r4, #0]
 801025a:	2b2e      	cmp	r3, #46	; 0x2e
 801025c:	d10c      	bne.n	8010278 <_svfiprintf_r+0x130>
 801025e:	7863      	ldrb	r3, [r4, #1]
 8010260:	2b2a      	cmp	r3, #42	; 0x2a
 8010262:	d135      	bne.n	80102d0 <_svfiprintf_r+0x188>
 8010264:	9b03      	ldr	r3, [sp, #12]
 8010266:	1d1a      	adds	r2, r3, #4
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	9203      	str	r2, [sp, #12]
 801026c:	2b00      	cmp	r3, #0
 801026e:	bfb8      	it	lt
 8010270:	f04f 33ff 	movlt.w	r3, #4294967295
 8010274:	3402      	adds	r4, #2
 8010276:	9305      	str	r3, [sp, #20]
 8010278:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010344 <_svfiprintf_r+0x1fc>
 801027c:	7821      	ldrb	r1, [r4, #0]
 801027e:	2203      	movs	r2, #3
 8010280:	4650      	mov	r0, sl
 8010282:	f7ef ffb5 	bl	80001f0 <memchr>
 8010286:	b140      	cbz	r0, 801029a <_svfiprintf_r+0x152>
 8010288:	2340      	movs	r3, #64	; 0x40
 801028a:	eba0 000a 	sub.w	r0, r0, sl
 801028e:	fa03 f000 	lsl.w	r0, r3, r0
 8010292:	9b04      	ldr	r3, [sp, #16]
 8010294:	4303      	orrs	r3, r0
 8010296:	3401      	adds	r4, #1
 8010298:	9304      	str	r3, [sp, #16]
 801029a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801029e:	4826      	ldr	r0, [pc, #152]	; (8010338 <_svfiprintf_r+0x1f0>)
 80102a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80102a4:	2206      	movs	r2, #6
 80102a6:	f7ef ffa3 	bl	80001f0 <memchr>
 80102aa:	2800      	cmp	r0, #0
 80102ac:	d038      	beq.n	8010320 <_svfiprintf_r+0x1d8>
 80102ae:	4b23      	ldr	r3, [pc, #140]	; (801033c <_svfiprintf_r+0x1f4>)
 80102b0:	bb1b      	cbnz	r3, 80102fa <_svfiprintf_r+0x1b2>
 80102b2:	9b03      	ldr	r3, [sp, #12]
 80102b4:	3307      	adds	r3, #7
 80102b6:	f023 0307 	bic.w	r3, r3, #7
 80102ba:	3308      	adds	r3, #8
 80102bc:	9303      	str	r3, [sp, #12]
 80102be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102c0:	4433      	add	r3, r6
 80102c2:	9309      	str	r3, [sp, #36]	; 0x24
 80102c4:	e767      	b.n	8010196 <_svfiprintf_r+0x4e>
 80102c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80102ca:	460c      	mov	r4, r1
 80102cc:	2001      	movs	r0, #1
 80102ce:	e7a5      	b.n	801021c <_svfiprintf_r+0xd4>
 80102d0:	2300      	movs	r3, #0
 80102d2:	3401      	adds	r4, #1
 80102d4:	9305      	str	r3, [sp, #20]
 80102d6:	4619      	mov	r1, r3
 80102d8:	f04f 0c0a 	mov.w	ip, #10
 80102dc:	4620      	mov	r0, r4
 80102de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102e2:	3a30      	subs	r2, #48	; 0x30
 80102e4:	2a09      	cmp	r2, #9
 80102e6:	d903      	bls.n	80102f0 <_svfiprintf_r+0x1a8>
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d0c5      	beq.n	8010278 <_svfiprintf_r+0x130>
 80102ec:	9105      	str	r1, [sp, #20]
 80102ee:	e7c3      	b.n	8010278 <_svfiprintf_r+0x130>
 80102f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80102f4:	4604      	mov	r4, r0
 80102f6:	2301      	movs	r3, #1
 80102f8:	e7f0      	b.n	80102dc <_svfiprintf_r+0x194>
 80102fa:	ab03      	add	r3, sp, #12
 80102fc:	9300      	str	r3, [sp, #0]
 80102fe:	462a      	mov	r2, r5
 8010300:	4b0f      	ldr	r3, [pc, #60]	; (8010340 <_svfiprintf_r+0x1f8>)
 8010302:	a904      	add	r1, sp, #16
 8010304:	4638      	mov	r0, r7
 8010306:	f7fc fa55 	bl	800c7b4 <_printf_float>
 801030a:	1c42      	adds	r2, r0, #1
 801030c:	4606      	mov	r6, r0
 801030e:	d1d6      	bne.n	80102be <_svfiprintf_r+0x176>
 8010310:	89ab      	ldrh	r3, [r5, #12]
 8010312:	065b      	lsls	r3, r3, #25
 8010314:	f53f af2c 	bmi.w	8010170 <_svfiprintf_r+0x28>
 8010318:	9809      	ldr	r0, [sp, #36]	; 0x24
 801031a:	b01d      	add	sp, #116	; 0x74
 801031c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010320:	ab03      	add	r3, sp, #12
 8010322:	9300      	str	r3, [sp, #0]
 8010324:	462a      	mov	r2, r5
 8010326:	4b06      	ldr	r3, [pc, #24]	; (8010340 <_svfiprintf_r+0x1f8>)
 8010328:	a904      	add	r1, sp, #16
 801032a:	4638      	mov	r0, r7
 801032c:	f7fc fce6 	bl	800ccfc <_printf_i>
 8010330:	e7eb      	b.n	801030a <_svfiprintf_r+0x1c2>
 8010332:	bf00      	nop
 8010334:	08011614 	.word	0x08011614
 8010338:	0801161e 	.word	0x0801161e
 801033c:	0800c7b5 	.word	0x0800c7b5
 8010340:	08010091 	.word	0x08010091
 8010344:	0801161a 	.word	0x0801161a

08010348 <nan>:
 8010348:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010350 <nan+0x8>
 801034c:	4770      	bx	lr
 801034e:	bf00      	nop
 8010350:	00000000 	.word	0x00000000
 8010354:	7ff80000 	.word	0x7ff80000

08010358 <_sbrk_r>:
 8010358:	b538      	push	{r3, r4, r5, lr}
 801035a:	4d06      	ldr	r5, [pc, #24]	; (8010374 <_sbrk_r+0x1c>)
 801035c:	2300      	movs	r3, #0
 801035e:	4604      	mov	r4, r0
 8010360:	4608      	mov	r0, r1
 8010362:	602b      	str	r3, [r5, #0]
 8010364:	f7f4 fe76 	bl	8005054 <_sbrk>
 8010368:	1c43      	adds	r3, r0, #1
 801036a:	d102      	bne.n	8010372 <_sbrk_r+0x1a>
 801036c:	682b      	ldr	r3, [r5, #0]
 801036e:	b103      	cbz	r3, 8010372 <_sbrk_r+0x1a>
 8010370:	6023      	str	r3, [r4, #0]
 8010372:	bd38      	pop	{r3, r4, r5, pc}
 8010374:	200010ec 	.word	0x200010ec

08010378 <strncmp>:
 8010378:	b510      	push	{r4, lr}
 801037a:	b17a      	cbz	r2, 801039c <strncmp+0x24>
 801037c:	4603      	mov	r3, r0
 801037e:	3901      	subs	r1, #1
 8010380:	1884      	adds	r4, r0, r2
 8010382:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010386:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801038a:	4290      	cmp	r0, r2
 801038c:	d101      	bne.n	8010392 <strncmp+0x1a>
 801038e:	42a3      	cmp	r3, r4
 8010390:	d101      	bne.n	8010396 <strncmp+0x1e>
 8010392:	1a80      	subs	r0, r0, r2
 8010394:	bd10      	pop	{r4, pc}
 8010396:	2800      	cmp	r0, #0
 8010398:	d1f3      	bne.n	8010382 <strncmp+0xa>
 801039a:	e7fa      	b.n	8010392 <strncmp+0x1a>
 801039c:	4610      	mov	r0, r2
 801039e:	e7f9      	b.n	8010394 <strncmp+0x1c>

080103a0 <__ascii_wctomb>:
 80103a0:	b149      	cbz	r1, 80103b6 <__ascii_wctomb+0x16>
 80103a2:	2aff      	cmp	r2, #255	; 0xff
 80103a4:	bf85      	ittet	hi
 80103a6:	238a      	movhi	r3, #138	; 0x8a
 80103a8:	6003      	strhi	r3, [r0, #0]
 80103aa:	700a      	strbls	r2, [r1, #0]
 80103ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80103b0:	bf98      	it	ls
 80103b2:	2001      	movls	r0, #1
 80103b4:	4770      	bx	lr
 80103b6:	4608      	mov	r0, r1
 80103b8:	4770      	bx	lr
	...

080103bc <__assert_func>:
 80103bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80103be:	4614      	mov	r4, r2
 80103c0:	461a      	mov	r2, r3
 80103c2:	4b09      	ldr	r3, [pc, #36]	; (80103e8 <__assert_func+0x2c>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	4605      	mov	r5, r0
 80103c8:	68d8      	ldr	r0, [r3, #12]
 80103ca:	b14c      	cbz	r4, 80103e0 <__assert_func+0x24>
 80103cc:	4b07      	ldr	r3, [pc, #28]	; (80103ec <__assert_func+0x30>)
 80103ce:	9100      	str	r1, [sp, #0]
 80103d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80103d4:	4906      	ldr	r1, [pc, #24]	; (80103f0 <__assert_func+0x34>)
 80103d6:	462b      	mov	r3, r5
 80103d8:	f000 f80e 	bl	80103f8 <fiprintf>
 80103dc:	f000 fa8c 	bl	80108f8 <abort>
 80103e0:	4b04      	ldr	r3, [pc, #16]	; (80103f4 <__assert_func+0x38>)
 80103e2:	461c      	mov	r4, r3
 80103e4:	e7f3      	b.n	80103ce <__assert_func+0x12>
 80103e6:	bf00      	nop
 80103e8:	2000025c 	.word	0x2000025c
 80103ec:	08011625 	.word	0x08011625
 80103f0:	08011632 	.word	0x08011632
 80103f4:	08011660 	.word	0x08011660

080103f8 <fiprintf>:
 80103f8:	b40e      	push	{r1, r2, r3}
 80103fa:	b503      	push	{r0, r1, lr}
 80103fc:	4601      	mov	r1, r0
 80103fe:	ab03      	add	r3, sp, #12
 8010400:	4805      	ldr	r0, [pc, #20]	; (8010418 <fiprintf+0x20>)
 8010402:	f853 2b04 	ldr.w	r2, [r3], #4
 8010406:	6800      	ldr	r0, [r0, #0]
 8010408:	9301      	str	r3, [sp, #4]
 801040a:	f000 f885 	bl	8010518 <_vfiprintf_r>
 801040e:	b002      	add	sp, #8
 8010410:	f85d eb04 	ldr.w	lr, [sp], #4
 8010414:	b003      	add	sp, #12
 8010416:	4770      	bx	lr
 8010418:	2000025c 	.word	0x2000025c

0801041c <memmove>:
 801041c:	4288      	cmp	r0, r1
 801041e:	b510      	push	{r4, lr}
 8010420:	eb01 0402 	add.w	r4, r1, r2
 8010424:	d902      	bls.n	801042c <memmove+0x10>
 8010426:	4284      	cmp	r4, r0
 8010428:	4623      	mov	r3, r4
 801042a:	d807      	bhi.n	801043c <memmove+0x20>
 801042c:	1e43      	subs	r3, r0, #1
 801042e:	42a1      	cmp	r1, r4
 8010430:	d008      	beq.n	8010444 <memmove+0x28>
 8010432:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010436:	f803 2f01 	strb.w	r2, [r3, #1]!
 801043a:	e7f8      	b.n	801042e <memmove+0x12>
 801043c:	4402      	add	r2, r0
 801043e:	4601      	mov	r1, r0
 8010440:	428a      	cmp	r2, r1
 8010442:	d100      	bne.n	8010446 <memmove+0x2a>
 8010444:	bd10      	pop	{r4, pc}
 8010446:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801044a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801044e:	e7f7      	b.n	8010440 <memmove+0x24>

08010450 <__malloc_lock>:
 8010450:	4801      	ldr	r0, [pc, #4]	; (8010458 <__malloc_lock+0x8>)
 8010452:	f000 bc11 	b.w	8010c78 <__retarget_lock_acquire_recursive>
 8010456:	bf00      	nop
 8010458:	200010f0 	.word	0x200010f0

0801045c <__malloc_unlock>:
 801045c:	4801      	ldr	r0, [pc, #4]	; (8010464 <__malloc_unlock+0x8>)
 801045e:	f000 bc0c 	b.w	8010c7a <__retarget_lock_release_recursive>
 8010462:	bf00      	nop
 8010464:	200010f0 	.word	0x200010f0

08010468 <_realloc_r>:
 8010468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801046c:	4680      	mov	r8, r0
 801046e:	4614      	mov	r4, r2
 8010470:	460e      	mov	r6, r1
 8010472:	b921      	cbnz	r1, 801047e <_realloc_r+0x16>
 8010474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010478:	4611      	mov	r1, r2
 801047a:	f7ff bd95 	b.w	800ffa8 <_malloc_r>
 801047e:	b92a      	cbnz	r2, 801048c <_realloc_r+0x24>
 8010480:	f7ff fd26 	bl	800fed0 <_free_r>
 8010484:	4625      	mov	r5, r4
 8010486:	4628      	mov	r0, r5
 8010488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801048c:	f000 fc5c 	bl	8010d48 <_malloc_usable_size_r>
 8010490:	4284      	cmp	r4, r0
 8010492:	4607      	mov	r7, r0
 8010494:	d802      	bhi.n	801049c <_realloc_r+0x34>
 8010496:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801049a:	d812      	bhi.n	80104c2 <_realloc_r+0x5a>
 801049c:	4621      	mov	r1, r4
 801049e:	4640      	mov	r0, r8
 80104a0:	f7ff fd82 	bl	800ffa8 <_malloc_r>
 80104a4:	4605      	mov	r5, r0
 80104a6:	2800      	cmp	r0, #0
 80104a8:	d0ed      	beq.n	8010486 <_realloc_r+0x1e>
 80104aa:	42bc      	cmp	r4, r7
 80104ac:	4622      	mov	r2, r4
 80104ae:	4631      	mov	r1, r6
 80104b0:	bf28      	it	cs
 80104b2:	463a      	movcs	r2, r7
 80104b4:	f7fc f8c8 	bl	800c648 <memcpy>
 80104b8:	4631      	mov	r1, r6
 80104ba:	4640      	mov	r0, r8
 80104bc:	f7ff fd08 	bl	800fed0 <_free_r>
 80104c0:	e7e1      	b.n	8010486 <_realloc_r+0x1e>
 80104c2:	4635      	mov	r5, r6
 80104c4:	e7df      	b.n	8010486 <_realloc_r+0x1e>

080104c6 <__sfputc_r>:
 80104c6:	6893      	ldr	r3, [r2, #8]
 80104c8:	3b01      	subs	r3, #1
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	b410      	push	{r4}
 80104ce:	6093      	str	r3, [r2, #8]
 80104d0:	da08      	bge.n	80104e4 <__sfputc_r+0x1e>
 80104d2:	6994      	ldr	r4, [r2, #24]
 80104d4:	42a3      	cmp	r3, r4
 80104d6:	db01      	blt.n	80104dc <__sfputc_r+0x16>
 80104d8:	290a      	cmp	r1, #10
 80104da:	d103      	bne.n	80104e4 <__sfputc_r+0x1e>
 80104dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104e0:	f000 b94a 	b.w	8010778 <__swbuf_r>
 80104e4:	6813      	ldr	r3, [r2, #0]
 80104e6:	1c58      	adds	r0, r3, #1
 80104e8:	6010      	str	r0, [r2, #0]
 80104ea:	7019      	strb	r1, [r3, #0]
 80104ec:	4608      	mov	r0, r1
 80104ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104f2:	4770      	bx	lr

080104f4 <__sfputs_r>:
 80104f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104f6:	4606      	mov	r6, r0
 80104f8:	460f      	mov	r7, r1
 80104fa:	4614      	mov	r4, r2
 80104fc:	18d5      	adds	r5, r2, r3
 80104fe:	42ac      	cmp	r4, r5
 8010500:	d101      	bne.n	8010506 <__sfputs_r+0x12>
 8010502:	2000      	movs	r0, #0
 8010504:	e007      	b.n	8010516 <__sfputs_r+0x22>
 8010506:	f814 1b01 	ldrb.w	r1, [r4], #1
 801050a:	463a      	mov	r2, r7
 801050c:	4630      	mov	r0, r6
 801050e:	f7ff ffda 	bl	80104c6 <__sfputc_r>
 8010512:	1c43      	adds	r3, r0, #1
 8010514:	d1f3      	bne.n	80104fe <__sfputs_r+0xa>
 8010516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010518 <_vfiprintf_r>:
 8010518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801051c:	460d      	mov	r5, r1
 801051e:	b09d      	sub	sp, #116	; 0x74
 8010520:	4614      	mov	r4, r2
 8010522:	4698      	mov	r8, r3
 8010524:	4606      	mov	r6, r0
 8010526:	b118      	cbz	r0, 8010530 <_vfiprintf_r+0x18>
 8010528:	6983      	ldr	r3, [r0, #24]
 801052a:	b90b      	cbnz	r3, 8010530 <_vfiprintf_r+0x18>
 801052c:	f000 fb06 	bl	8010b3c <__sinit>
 8010530:	4b89      	ldr	r3, [pc, #548]	; (8010758 <_vfiprintf_r+0x240>)
 8010532:	429d      	cmp	r5, r3
 8010534:	d11b      	bne.n	801056e <_vfiprintf_r+0x56>
 8010536:	6875      	ldr	r5, [r6, #4]
 8010538:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801053a:	07d9      	lsls	r1, r3, #31
 801053c:	d405      	bmi.n	801054a <_vfiprintf_r+0x32>
 801053e:	89ab      	ldrh	r3, [r5, #12]
 8010540:	059a      	lsls	r2, r3, #22
 8010542:	d402      	bmi.n	801054a <_vfiprintf_r+0x32>
 8010544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010546:	f000 fb97 	bl	8010c78 <__retarget_lock_acquire_recursive>
 801054a:	89ab      	ldrh	r3, [r5, #12]
 801054c:	071b      	lsls	r3, r3, #28
 801054e:	d501      	bpl.n	8010554 <_vfiprintf_r+0x3c>
 8010550:	692b      	ldr	r3, [r5, #16]
 8010552:	b9eb      	cbnz	r3, 8010590 <_vfiprintf_r+0x78>
 8010554:	4629      	mov	r1, r5
 8010556:	4630      	mov	r0, r6
 8010558:	f000 f960 	bl	801081c <__swsetup_r>
 801055c:	b1c0      	cbz	r0, 8010590 <_vfiprintf_r+0x78>
 801055e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010560:	07dc      	lsls	r4, r3, #31
 8010562:	d50e      	bpl.n	8010582 <_vfiprintf_r+0x6a>
 8010564:	f04f 30ff 	mov.w	r0, #4294967295
 8010568:	b01d      	add	sp, #116	; 0x74
 801056a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801056e:	4b7b      	ldr	r3, [pc, #492]	; (801075c <_vfiprintf_r+0x244>)
 8010570:	429d      	cmp	r5, r3
 8010572:	d101      	bne.n	8010578 <_vfiprintf_r+0x60>
 8010574:	68b5      	ldr	r5, [r6, #8]
 8010576:	e7df      	b.n	8010538 <_vfiprintf_r+0x20>
 8010578:	4b79      	ldr	r3, [pc, #484]	; (8010760 <_vfiprintf_r+0x248>)
 801057a:	429d      	cmp	r5, r3
 801057c:	bf08      	it	eq
 801057e:	68f5      	ldreq	r5, [r6, #12]
 8010580:	e7da      	b.n	8010538 <_vfiprintf_r+0x20>
 8010582:	89ab      	ldrh	r3, [r5, #12]
 8010584:	0598      	lsls	r0, r3, #22
 8010586:	d4ed      	bmi.n	8010564 <_vfiprintf_r+0x4c>
 8010588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801058a:	f000 fb76 	bl	8010c7a <__retarget_lock_release_recursive>
 801058e:	e7e9      	b.n	8010564 <_vfiprintf_r+0x4c>
 8010590:	2300      	movs	r3, #0
 8010592:	9309      	str	r3, [sp, #36]	; 0x24
 8010594:	2320      	movs	r3, #32
 8010596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801059a:	f8cd 800c 	str.w	r8, [sp, #12]
 801059e:	2330      	movs	r3, #48	; 0x30
 80105a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010764 <_vfiprintf_r+0x24c>
 80105a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105a8:	f04f 0901 	mov.w	r9, #1
 80105ac:	4623      	mov	r3, r4
 80105ae:	469a      	mov	sl, r3
 80105b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105b4:	b10a      	cbz	r2, 80105ba <_vfiprintf_r+0xa2>
 80105b6:	2a25      	cmp	r2, #37	; 0x25
 80105b8:	d1f9      	bne.n	80105ae <_vfiprintf_r+0x96>
 80105ba:	ebba 0b04 	subs.w	fp, sl, r4
 80105be:	d00b      	beq.n	80105d8 <_vfiprintf_r+0xc0>
 80105c0:	465b      	mov	r3, fp
 80105c2:	4622      	mov	r2, r4
 80105c4:	4629      	mov	r1, r5
 80105c6:	4630      	mov	r0, r6
 80105c8:	f7ff ff94 	bl	80104f4 <__sfputs_r>
 80105cc:	3001      	adds	r0, #1
 80105ce:	f000 80aa 	beq.w	8010726 <_vfiprintf_r+0x20e>
 80105d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105d4:	445a      	add	r2, fp
 80105d6:	9209      	str	r2, [sp, #36]	; 0x24
 80105d8:	f89a 3000 	ldrb.w	r3, [sl]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	f000 80a2 	beq.w	8010726 <_vfiprintf_r+0x20e>
 80105e2:	2300      	movs	r3, #0
 80105e4:	f04f 32ff 	mov.w	r2, #4294967295
 80105e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105ec:	f10a 0a01 	add.w	sl, sl, #1
 80105f0:	9304      	str	r3, [sp, #16]
 80105f2:	9307      	str	r3, [sp, #28]
 80105f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105f8:	931a      	str	r3, [sp, #104]	; 0x68
 80105fa:	4654      	mov	r4, sl
 80105fc:	2205      	movs	r2, #5
 80105fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010602:	4858      	ldr	r0, [pc, #352]	; (8010764 <_vfiprintf_r+0x24c>)
 8010604:	f7ef fdf4 	bl	80001f0 <memchr>
 8010608:	9a04      	ldr	r2, [sp, #16]
 801060a:	b9d8      	cbnz	r0, 8010644 <_vfiprintf_r+0x12c>
 801060c:	06d1      	lsls	r1, r2, #27
 801060e:	bf44      	itt	mi
 8010610:	2320      	movmi	r3, #32
 8010612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010616:	0713      	lsls	r3, r2, #28
 8010618:	bf44      	itt	mi
 801061a:	232b      	movmi	r3, #43	; 0x2b
 801061c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010620:	f89a 3000 	ldrb.w	r3, [sl]
 8010624:	2b2a      	cmp	r3, #42	; 0x2a
 8010626:	d015      	beq.n	8010654 <_vfiprintf_r+0x13c>
 8010628:	9a07      	ldr	r2, [sp, #28]
 801062a:	4654      	mov	r4, sl
 801062c:	2000      	movs	r0, #0
 801062e:	f04f 0c0a 	mov.w	ip, #10
 8010632:	4621      	mov	r1, r4
 8010634:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010638:	3b30      	subs	r3, #48	; 0x30
 801063a:	2b09      	cmp	r3, #9
 801063c:	d94e      	bls.n	80106dc <_vfiprintf_r+0x1c4>
 801063e:	b1b0      	cbz	r0, 801066e <_vfiprintf_r+0x156>
 8010640:	9207      	str	r2, [sp, #28]
 8010642:	e014      	b.n	801066e <_vfiprintf_r+0x156>
 8010644:	eba0 0308 	sub.w	r3, r0, r8
 8010648:	fa09 f303 	lsl.w	r3, r9, r3
 801064c:	4313      	orrs	r3, r2
 801064e:	9304      	str	r3, [sp, #16]
 8010650:	46a2      	mov	sl, r4
 8010652:	e7d2      	b.n	80105fa <_vfiprintf_r+0xe2>
 8010654:	9b03      	ldr	r3, [sp, #12]
 8010656:	1d19      	adds	r1, r3, #4
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	9103      	str	r1, [sp, #12]
 801065c:	2b00      	cmp	r3, #0
 801065e:	bfbb      	ittet	lt
 8010660:	425b      	neglt	r3, r3
 8010662:	f042 0202 	orrlt.w	r2, r2, #2
 8010666:	9307      	strge	r3, [sp, #28]
 8010668:	9307      	strlt	r3, [sp, #28]
 801066a:	bfb8      	it	lt
 801066c:	9204      	strlt	r2, [sp, #16]
 801066e:	7823      	ldrb	r3, [r4, #0]
 8010670:	2b2e      	cmp	r3, #46	; 0x2e
 8010672:	d10c      	bne.n	801068e <_vfiprintf_r+0x176>
 8010674:	7863      	ldrb	r3, [r4, #1]
 8010676:	2b2a      	cmp	r3, #42	; 0x2a
 8010678:	d135      	bne.n	80106e6 <_vfiprintf_r+0x1ce>
 801067a:	9b03      	ldr	r3, [sp, #12]
 801067c:	1d1a      	adds	r2, r3, #4
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	9203      	str	r2, [sp, #12]
 8010682:	2b00      	cmp	r3, #0
 8010684:	bfb8      	it	lt
 8010686:	f04f 33ff 	movlt.w	r3, #4294967295
 801068a:	3402      	adds	r4, #2
 801068c:	9305      	str	r3, [sp, #20]
 801068e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010774 <_vfiprintf_r+0x25c>
 8010692:	7821      	ldrb	r1, [r4, #0]
 8010694:	2203      	movs	r2, #3
 8010696:	4650      	mov	r0, sl
 8010698:	f7ef fdaa 	bl	80001f0 <memchr>
 801069c:	b140      	cbz	r0, 80106b0 <_vfiprintf_r+0x198>
 801069e:	2340      	movs	r3, #64	; 0x40
 80106a0:	eba0 000a 	sub.w	r0, r0, sl
 80106a4:	fa03 f000 	lsl.w	r0, r3, r0
 80106a8:	9b04      	ldr	r3, [sp, #16]
 80106aa:	4303      	orrs	r3, r0
 80106ac:	3401      	adds	r4, #1
 80106ae:	9304      	str	r3, [sp, #16]
 80106b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106b4:	482c      	ldr	r0, [pc, #176]	; (8010768 <_vfiprintf_r+0x250>)
 80106b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106ba:	2206      	movs	r2, #6
 80106bc:	f7ef fd98 	bl	80001f0 <memchr>
 80106c0:	2800      	cmp	r0, #0
 80106c2:	d03f      	beq.n	8010744 <_vfiprintf_r+0x22c>
 80106c4:	4b29      	ldr	r3, [pc, #164]	; (801076c <_vfiprintf_r+0x254>)
 80106c6:	bb1b      	cbnz	r3, 8010710 <_vfiprintf_r+0x1f8>
 80106c8:	9b03      	ldr	r3, [sp, #12]
 80106ca:	3307      	adds	r3, #7
 80106cc:	f023 0307 	bic.w	r3, r3, #7
 80106d0:	3308      	adds	r3, #8
 80106d2:	9303      	str	r3, [sp, #12]
 80106d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106d6:	443b      	add	r3, r7
 80106d8:	9309      	str	r3, [sp, #36]	; 0x24
 80106da:	e767      	b.n	80105ac <_vfiprintf_r+0x94>
 80106dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80106e0:	460c      	mov	r4, r1
 80106e2:	2001      	movs	r0, #1
 80106e4:	e7a5      	b.n	8010632 <_vfiprintf_r+0x11a>
 80106e6:	2300      	movs	r3, #0
 80106e8:	3401      	adds	r4, #1
 80106ea:	9305      	str	r3, [sp, #20]
 80106ec:	4619      	mov	r1, r3
 80106ee:	f04f 0c0a 	mov.w	ip, #10
 80106f2:	4620      	mov	r0, r4
 80106f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106f8:	3a30      	subs	r2, #48	; 0x30
 80106fa:	2a09      	cmp	r2, #9
 80106fc:	d903      	bls.n	8010706 <_vfiprintf_r+0x1ee>
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d0c5      	beq.n	801068e <_vfiprintf_r+0x176>
 8010702:	9105      	str	r1, [sp, #20]
 8010704:	e7c3      	b.n	801068e <_vfiprintf_r+0x176>
 8010706:	fb0c 2101 	mla	r1, ip, r1, r2
 801070a:	4604      	mov	r4, r0
 801070c:	2301      	movs	r3, #1
 801070e:	e7f0      	b.n	80106f2 <_vfiprintf_r+0x1da>
 8010710:	ab03      	add	r3, sp, #12
 8010712:	9300      	str	r3, [sp, #0]
 8010714:	462a      	mov	r2, r5
 8010716:	4b16      	ldr	r3, [pc, #88]	; (8010770 <_vfiprintf_r+0x258>)
 8010718:	a904      	add	r1, sp, #16
 801071a:	4630      	mov	r0, r6
 801071c:	f7fc f84a 	bl	800c7b4 <_printf_float>
 8010720:	4607      	mov	r7, r0
 8010722:	1c78      	adds	r0, r7, #1
 8010724:	d1d6      	bne.n	80106d4 <_vfiprintf_r+0x1bc>
 8010726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010728:	07d9      	lsls	r1, r3, #31
 801072a:	d405      	bmi.n	8010738 <_vfiprintf_r+0x220>
 801072c:	89ab      	ldrh	r3, [r5, #12]
 801072e:	059a      	lsls	r2, r3, #22
 8010730:	d402      	bmi.n	8010738 <_vfiprintf_r+0x220>
 8010732:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010734:	f000 faa1 	bl	8010c7a <__retarget_lock_release_recursive>
 8010738:	89ab      	ldrh	r3, [r5, #12]
 801073a:	065b      	lsls	r3, r3, #25
 801073c:	f53f af12 	bmi.w	8010564 <_vfiprintf_r+0x4c>
 8010740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010742:	e711      	b.n	8010568 <_vfiprintf_r+0x50>
 8010744:	ab03      	add	r3, sp, #12
 8010746:	9300      	str	r3, [sp, #0]
 8010748:	462a      	mov	r2, r5
 801074a:	4b09      	ldr	r3, [pc, #36]	; (8010770 <_vfiprintf_r+0x258>)
 801074c:	a904      	add	r1, sp, #16
 801074e:	4630      	mov	r0, r6
 8010750:	f7fc fad4 	bl	800ccfc <_printf_i>
 8010754:	e7e4      	b.n	8010720 <_vfiprintf_r+0x208>
 8010756:	bf00      	nop
 8010758:	08011684 	.word	0x08011684
 801075c:	080116a4 	.word	0x080116a4
 8010760:	08011664 	.word	0x08011664
 8010764:	08011614 	.word	0x08011614
 8010768:	0801161e 	.word	0x0801161e
 801076c:	0800c7b5 	.word	0x0800c7b5
 8010770:	080104f5 	.word	0x080104f5
 8010774:	0801161a 	.word	0x0801161a

08010778 <__swbuf_r>:
 8010778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801077a:	460e      	mov	r6, r1
 801077c:	4614      	mov	r4, r2
 801077e:	4605      	mov	r5, r0
 8010780:	b118      	cbz	r0, 801078a <__swbuf_r+0x12>
 8010782:	6983      	ldr	r3, [r0, #24]
 8010784:	b90b      	cbnz	r3, 801078a <__swbuf_r+0x12>
 8010786:	f000 f9d9 	bl	8010b3c <__sinit>
 801078a:	4b21      	ldr	r3, [pc, #132]	; (8010810 <__swbuf_r+0x98>)
 801078c:	429c      	cmp	r4, r3
 801078e:	d12b      	bne.n	80107e8 <__swbuf_r+0x70>
 8010790:	686c      	ldr	r4, [r5, #4]
 8010792:	69a3      	ldr	r3, [r4, #24]
 8010794:	60a3      	str	r3, [r4, #8]
 8010796:	89a3      	ldrh	r3, [r4, #12]
 8010798:	071a      	lsls	r2, r3, #28
 801079a:	d52f      	bpl.n	80107fc <__swbuf_r+0x84>
 801079c:	6923      	ldr	r3, [r4, #16]
 801079e:	b36b      	cbz	r3, 80107fc <__swbuf_r+0x84>
 80107a0:	6923      	ldr	r3, [r4, #16]
 80107a2:	6820      	ldr	r0, [r4, #0]
 80107a4:	1ac0      	subs	r0, r0, r3
 80107a6:	6963      	ldr	r3, [r4, #20]
 80107a8:	b2f6      	uxtb	r6, r6
 80107aa:	4283      	cmp	r3, r0
 80107ac:	4637      	mov	r7, r6
 80107ae:	dc04      	bgt.n	80107ba <__swbuf_r+0x42>
 80107b0:	4621      	mov	r1, r4
 80107b2:	4628      	mov	r0, r5
 80107b4:	f000 f92e 	bl	8010a14 <_fflush_r>
 80107b8:	bb30      	cbnz	r0, 8010808 <__swbuf_r+0x90>
 80107ba:	68a3      	ldr	r3, [r4, #8]
 80107bc:	3b01      	subs	r3, #1
 80107be:	60a3      	str	r3, [r4, #8]
 80107c0:	6823      	ldr	r3, [r4, #0]
 80107c2:	1c5a      	adds	r2, r3, #1
 80107c4:	6022      	str	r2, [r4, #0]
 80107c6:	701e      	strb	r6, [r3, #0]
 80107c8:	6963      	ldr	r3, [r4, #20]
 80107ca:	3001      	adds	r0, #1
 80107cc:	4283      	cmp	r3, r0
 80107ce:	d004      	beq.n	80107da <__swbuf_r+0x62>
 80107d0:	89a3      	ldrh	r3, [r4, #12]
 80107d2:	07db      	lsls	r3, r3, #31
 80107d4:	d506      	bpl.n	80107e4 <__swbuf_r+0x6c>
 80107d6:	2e0a      	cmp	r6, #10
 80107d8:	d104      	bne.n	80107e4 <__swbuf_r+0x6c>
 80107da:	4621      	mov	r1, r4
 80107dc:	4628      	mov	r0, r5
 80107de:	f000 f919 	bl	8010a14 <_fflush_r>
 80107e2:	b988      	cbnz	r0, 8010808 <__swbuf_r+0x90>
 80107e4:	4638      	mov	r0, r7
 80107e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107e8:	4b0a      	ldr	r3, [pc, #40]	; (8010814 <__swbuf_r+0x9c>)
 80107ea:	429c      	cmp	r4, r3
 80107ec:	d101      	bne.n	80107f2 <__swbuf_r+0x7a>
 80107ee:	68ac      	ldr	r4, [r5, #8]
 80107f0:	e7cf      	b.n	8010792 <__swbuf_r+0x1a>
 80107f2:	4b09      	ldr	r3, [pc, #36]	; (8010818 <__swbuf_r+0xa0>)
 80107f4:	429c      	cmp	r4, r3
 80107f6:	bf08      	it	eq
 80107f8:	68ec      	ldreq	r4, [r5, #12]
 80107fa:	e7ca      	b.n	8010792 <__swbuf_r+0x1a>
 80107fc:	4621      	mov	r1, r4
 80107fe:	4628      	mov	r0, r5
 8010800:	f000 f80c 	bl	801081c <__swsetup_r>
 8010804:	2800      	cmp	r0, #0
 8010806:	d0cb      	beq.n	80107a0 <__swbuf_r+0x28>
 8010808:	f04f 37ff 	mov.w	r7, #4294967295
 801080c:	e7ea      	b.n	80107e4 <__swbuf_r+0x6c>
 801080e:	bf00      	nop
 8010810:	08011684 	.word	0x08011684
 8010814:	080116a4 	.word	0x080116a4
 8010818:	08011664 	.word	0x08011664

0801081c <__swsetup_r>:
 801081c:	4b32      	ldr	r3, [pc, #200]	; (80108e8 <__swsetup_r+0xcc>)
 801081e:	b570      	push	{r4, r5, r6, lr}
 8010820:	681d      	ldr	r5, [r3, #0]
 8010822:	4606      	mov	r6, r0
 8010824:	460c      	mov	r4, r1
 8010826:	b125      	cbz	r5, 8010832 <__swsetup_r+0x16>
 8010828:	69ab      	ldr	r3, [r5, #24]
 801082a:	b913      	cbnz	r3, 8010832 <__swsetup_r+0x16>
 801082c:	4628      	mov	r0, r5
 801082e:	f000 f985 	bl	8010b3c <__sinit>
 8010832:	4b2e      	ldr	r3, [pc, #184]	; (80108ec <__swsetup_r+0xd0>)
 8010834:	429c      	cmp	r4, r3
 8010836:	d10f      	bne.n	8010858 <__swsetup_r+0x3c>
 8010838:	686c      	ldr	r4, [r5, #4]
 801083a:	89a3      	ldrh	r3, [r4, #12]
 801083c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010840:	0719      	lsls	r1, r3, #28
 8010842:	d42c      	bmi.n	801089e <__swsetup_r+0x82>
 8010844:	06dd      	lsls	r5, r3, #27
 8010846:	d411      	bmi.n	801086c <__swsetup_r+0x50>
 8010848:	2309      	movs	r3, #9
 801084a:	6033      	str	r3, [r6, #0]
 801084c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010850:	81a3      	strh	r3, [r4, #12]
 8010852:	f04f 30ff 	mov.w	r0, #4294967295
 8010856:	e03e      	b.n	80108d6 <__swsetup_r+0xba>
 8010858:	4b25      	ldr	r3, [pc, #148]	; (80108f0 <__swsetup_r+0xd4>)
 801085a:	429c      	cmp	r4, r3
 801085c:	d101      	bne.n	8010862 <__swsetup_r+0x46>
 801085e:	68ac      	ldr	r4, [r5, #8]
 8010860:	e7eb      	b.n	801083a <__swsetup_r+0x1e>
 8010862:	4b24      	ldr	r3, [pc, #144]	; (80108f4 <__swsetup_r+0xd8>)
 8010864:	429c      	cmp	r4, r3
 8010866:	bf08      	it	eq
 8010868:	68ec      	ldreq	r4, [r5, #12]
 801086a:	e7e6      	b.n	801083a <__swsetup_r+0x1e>
 801086c:	0758      	lsls	r0, r3, #29
 801086e:	d512      	bpl.n	8010896 <__swsetup_r+0x7a>
 8010870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010872:	b141      	cbz	r1, 8010886 <__swsetup_r+0x6a>
 8010874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010878:	4299      	cmp	r1, r3
 801087a:	d002      	beq.n	8010882 <__swsetup_r+0x66>
 801087c:	4630      	mov	r0, r6
 801087e:	f7ff fb27 	bl	800fed0 <_free_r>
 8010882:	2300      	movs	r3, #0
 8010884:	6363      	str	r3, [r4, #52]	; 0x34
 8010886:	89a3      	ldrh	r3, [r4, #12]
 8010888:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801088c:	81a3      	strh	r3, [r4, #12]
 801088e:	2300      	movs	r3, #0
 8010890:	6063      	str	r3, [r4, #4]
 8010892:	6923      	ldr	r3, [r4, #16]
 8010894:	6023      	str	r3, [r4, #0]
 8010896:	89a3      	ldrh	r3, [r4, #12]
 8010898:	f043 0308 	orr.w	r3, r3, #8
 801089c:	81a3      	strh	r3, [r4, #12]
 801089e:	6923      	ldr	r3, [r4, #16]
 80108a0:	b94b      	cbnz	r3, 80108b6 <__swsetup_r+0x9a>
 80108a2:	89a3      	ldrh	r3, [r4, #12]
 80108a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80108a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108ac:	d003      	beq.n	80108b6 <__swsetup_r+0x9a>
 80108ae:	4621      	mov	r1, r4
 80108b0:	4630      	mov	r0, r6
 80108b2:	f000 fa09 	bl	8010cc8 <__smakebuf_r>
 80108b6:	89a0      	ldrh	r0, [r4, #12]
 80108b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80108bc:	f010 0301 	ands.w	r3, r0, #1
 80108c0:	d00a      	beq.n	80108d8 <__swsetup_r+0xbc>
 80108c2:	2300      	movs	r3, #0
 80108c4:	60a3      	str	r3, [r4, #8]
 80108c6:	6963      	ldr	r3, [r4, #20]
 80108c8:	425b      	negs	r3, r3
 80108ca:	61a3      	str	r3, [r4, #24]
 80108cc:	6923      	ldr	r3, [r4, #16]
 80108ce:	b943      	cbnz	r3, 80108e2 <__swsetup_r+0xc6>
 80108d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80108d4:	d1ba      	bne.n	801084c <__swsetup_r+0x30>
 80108d6:	bd70      	pop	{r4, r5, r6, pc}
 80108d8:	0781      	lsls	r1, r0, #30
 80108da:	bf58      	it	pl
 80108dc:	6963      	ldrpl	r3, [r4, #20]
 80108de:	60a3      	str	r3, [r4, #8]
 80108e0:	e7f4      	b.n	80108cc <__swsetup_r+0xb0>
 80108e2:	2000      	movs	r0, #0
 80108e4:	e7f7      	b.n	80108d6 <__swsetup_r+0xba>
 80108e6:	bf00      	nop
 80108e8:	2000025c 	.word	0x2000025c
 80108ec:	08011684 	.word	0x08011684
 80108f0:	080116a4 	.word	0x080116a4
 80108f4:	08011664 	.word	0x08011664

080108f8 <abort>:
 80108f8:	b508      	push	{r3, lr}
 80108fa:	2006      	movs	r0, #6
 80108fc:	f000 fa54 	bl	8010da8 <raise>
 8010900:	2001      	movs	r0, #1
 8010902:	f7f4 fb2f 	bl	8004f64 <_exit>
	...

08010908 <__sflush_r>:
 8010908:	898a      	ldrh	r2, [r1, #12]
 801090a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801090e:	4605      	mov	r5, r0
 8010910:	0710      	lsls	r0, r2, #28
 8010912:	460c      	mov	r4, r1
 8010914:	d458      	bmi.n	80109c8 <__sflush_r+0xc0>
 8010916:	684b      	ldr	r3, [r1, #4]
 8010918:	2b00      	cmp	r3, #0
 801091a:	dc05      	bgt.n	8010928 <__sflush_r+0x20>
 801091c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801091e:	2b00      	cmp	r3, #0
 8010920:	dc02      	bgt.n	8010928 <__sflush_r+0x20>
 8010922:	2000      	movs	r0, #0
 8010924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801092a:	2e00      	cmp	r6, #0
 801092c:	d0f9      	beq.n	8010922 <__sflush_r+0x1a>
 801092e:	2300      	movs	r3, #0
 8010930:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010934:	682f      	ldr	r7, [r5, #0]
 8010936:	602b      	str	r3, [r5, #0]
 8010938:	d032      	beq.n	80109a0 <__sflush_r+0x98>
 801093a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801093c:	89a3      	ldrh	r3, [r4, #12]
 801093e:	075a      	lsls	r2, r3, #29
 8010940:	d505      	bpl.n	801094e <__sflush_r+0x46>
 8010942:	6863      	ldr	r3, [r4, #4]
 8010944:	1ac0      	subs	r0, r0, r3
 8010946:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010948:	b10b      	cbz	r3, 801094e <__sflush_r+0x46>
 801094a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801094c:	1ac0      	subs	r0, r0, r3
 801094e:	2300      	movs	r3, #0
 8010950:	4602      	mov	r2, r0
 8010952:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010954:	6a21      	ldr	r1, [r4, #32]
 8010956:	4628      	mov	r0, r5
 8010958:	47b0      	blx	r6
 801095a:	1c43      	adds	r3, r0, #1
 801095c:	89a3      	ldrh	r3, [r4, #12]
 801095e:	d106      	bne.n	801096e <__sflush_r+0x66>
 8010960:	6829      	ldr	r1, [r5, #0]
 8010962:	291d      	cmp	r1, #29
 8010964:	d82c      	bhi.n	80109c0 <__sflush_r+0xb8>
 8010966:	4a2a      	ldr	r2, [pc, #168]	; (8010a10 <__sflush_r+0x108>)
 8010968:	40ca      	lsrs	r2, r1
 801096a:	07d6      	lsls	r6, r2, #31
 801096c:	d528      	bpl.n	80109c0 <__sflush_r+0xb8>
 801096e:	2200      	movs	r2, #0
 8010970:	6062      	str	r2, [r4, #4]
 8010972:	04d9      	lsls	r1, r3, #19
 8010974:	6922      	ldr	r2, [r4, #16]
 8010976:	6022      	str	r2, [r4, #0]
 8010978:	d504      	bpl.n	8010984 <__sflush_r+0x7c>
 801097a:	1c42      	adds	r2, r0, #1
 801097c:	d101      	bne.n	8010982 <__sflush_r+0x7a>
 801097e:	682b      	ldr	r3, [r5, #0]
 8010980:	b903      	cbnz	r3, 8010984 <__sflush_r+0x7c>
 8010982:	6560      	str	r0, [r4, #84]	; 0x54
 8010984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010986:	602f      	str	r7, [r5, #0]
 8010988:	2900      	cmp	r1, #0
 801098a:	d0ca      	beq.n	8010922 <__sflush_r+0x1a>
 801098c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010990:	4299      	cmp	r1, r3
 8010992:	d002      	beq.n	801099a <__sflush_r+0x92>
 8010994:	4628      	mov	r0, r5
 8010996:	f7ff fa9b 	bl	800fed0 <_free_r>
 801099a:	2000      	movs	r0, #0
 801099c:	6360      	str	r0, [r4, #52]	; 0x34
 801099e:	e7c1      	b.n	8010924 <__sflush_r+0x1c>
 80109a0:	6a21      	ldr	r1, [r4, #32]
 80109a2:	2301      	movs	r3, #1
 80109a4:	4628      	mov	r0, r5
 80109a6:	47b0      	blx	r6
 80109a8:	1c41      	adds	r1, r0, #1
 80109aa:	d1c7      	bne.n	801093c <__sflush_r+0x34>
 80109ac:	682b      	ldr	r3, [r5, #0]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d0c4      	beq.n	801093c <__sflush_r+0x34>
 80109b2:	2b1d      	cmp	r3, #29
 80109b4:	d001      	beq.n	80109ba <__sflush_r+0xb2>
 80109b6:	2b16      	cmp	r3, #22
 80109b8:	d101      	bne.n	80109be <__sflush_r+0xb6>
 80109ba:	602f      	str	r7, [r5, #0]
 80109bc:	e7b1      	b.n	8010922 <__sflush_r+0x1a>
 80109be:	89a3      	ldrh	r3, [r4, #12]
 80109c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109c4:	81a3      	strh	r3, [r4, #12]
 80109c6:	e7ad      	b.n	8010924 <__sflush_r+0x1c>
 80109c8:	690f      	ldr	r7, [r1, #16]
 80109ca:	2f00      	cmp	r7, #0
 80109cc:	d0a9      	beq.n	8010922 <__sflush_r+0x1a>
 80109ce:	0793      	lsls	r3, r2, #30
 80109d0:	680e      	ldr	r6, [r1, #0]
 80109d2:	bf08      	it	eq
 80109d4:	694b      	ldreq	r3, [r1, #20]
 80109d6:	600f      	str	r7, [r1, #0]
 80109d8:	bf18      	it	ne
 80109da:	2300      	movne	r3, #0
 80109dc:	eba6 0807 	sub.w	r8, r6, r7
 80109e0:	608b      	str	r3, [r1, #8]
 80109e2:	f1b8 0f00 	cmp.w	r8, #0
 80109e6:	dd9c      	ble.n	8010922 <__sflush_r+0x1a>
 80109e8:	6a21      	ldr	r1, [r4, #32]
 80109ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80109ec:	4643      	mov	r3, r8
 80109ee:	463a      	mov	r2, r7
 80109f0:	4628      	mov	r0, r5
 80109f2:	47b0      	blx	r6
 80109f4:	2800      	cmp	r0, #0
 80109f6:	dc06      	bgt.n	8010a06 <__sflush_r+0xfe>
 80109f8:	89a3      	ldrh	r3, [r4, #12]
 80109fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109fe:	81a3      	strh	r3, [r4, #12]
 8010a00:	f04f 30ff 	mov.w	r0, #4294967295
 8010a04:	e78e      	b.n	8010924 <__sflush_r+0x1c>
 8010a06:	4407      	add	r7, r0
 8010a08:	eba8 0800 	sub.w	r8, r8, r0
 8010a0c:	e7e9      	b.n	80109e2 <__sflush_r+0xda>
 8010a0e:	bf00      	nop
 8010a10:	20400001 	.word	0x20400001

08010a14 <_fflush_r>:
 8010a14:	b538      	push	{r3, r4, r5, lr}
 8010a16:	690b      	ldr	r3, [r1, #16]
 8010a18:	4605      	mov	r5, r0
 8010a1a:	460c      	mov	r4, r1
 8010a1c:	b913      	cbnz	r3, 8010a24 <_fflush_r+0x10>
 8010a1e:	2500      	movs	r5, #0
 8010a20:	4628      	mov	r0, r5
 8010a22:	bd38      	pop	{r3, r4, r5, pc}
 8010a24:	b118      	cbz	r0, 8010a2e <_fflush_r+0x1a>
 8010a26:	6983      	ldr	r3, [r0, #24]
 8010a28:	b90b      	cbnz	r3, 8010a2e <_fflush_r+0x1a>
 8010a2a:	f000 f887 	bl	8010b3c <__sinit>
 8010a2e:	4b14      	ldr	r3, [pc, #80]	; (8010a80 <_fflush_r+0x6c>)
 8010a30:	429c      	cmp	r4, r3
 8010a32:	d11b      	bne.n	8010a6c <_fflush_r+0x58>
 8010a34:	686c      	ldr	r4, [r5, #4]
 8010a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d0ef      	beq.n	8010a1e <_fflush_r+0xa>
 8010a3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010a40:	07d0      	lsls	r0, r2, #31
 8010a42:	d404      	bmi.n	8010a4e <_fflush_r+0x3a>
 8010a44:	0599      	lsls	r1, r3, #22
 8010a46:	d402      	bmi.n	8010a4e <_fflush_r+0x3a>
 8010a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a4a:	f000 f915 	bl	8010c78 <__retarget_lock_acquire_recursive>
 8010a4e:	4628      	mov	r0, r5
 8010a50:	4621      	mov	r1, r4
 8010a52:	f7ff ff59 	bl	8010908 <__sflush_r>
 8010a56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a58:	07da      	lsls	r2, r3, #31
 8010a5a:	4605      	mov	r5, r0
 8010a5c:	d4e0      	bmi.n	8010a20 <_fflush_r+0xc>
 8010a5e:	89a3      	ldrh	r3, [r4, #12]
 8010a60:	059b      	lsls	r3, r3, #22
 8010a62:	d4dd      	bmi.n	8010a20 <_fflush_r+0xc>
 8010a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a66:	f000 f908 	bl	8010c7a <__retarget_lock_release_recursive>
 8010a6a:	e7d9      	b.n	8010a20 <_fflush_r+0xc>
 8010a6c:	4b05      	ldr	r3, [pc, #20]	; (8010a84 <_fflush_r+0x70>)
 8010a6e:	429c      	cmp	r4, r3
 8010a70:	d101      	bne.n	8010a76 <_fflush_r+0x62>
 8010a72:	68ac      	ldr	r4, [r5, #8]
 8010a74:	e7df      	b.n	8010a36 <_fflush_r+0x22>
 8010a76:	4b04      	ldr	r3, [pc, #16]	; (8010a88 <_fflush_r+0x74>)
 8010a78:	429c      	cmp	r4, r3
 8010a7a:	bf08      	it	eq
 8010a7c:	68ec      	ldreq	r4, [r5, #12]
 8010a7e:	e7da      	b.n	8010a36 <_fflush_r+0x22>
 8010a80:	08011684 	.word	0x08011684
 8010a84:	080116a4 	.word	0x080116a4
 8010a88:	08011664 	.word	0x08011664

08010a8c <std>:
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	b510      	push	{r4, lr}
 8010a90:	4604      	mov	r4, r0
 8010a92:	e9c0 3300 	strd	r3, r3, [r0]
 8010a96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010a9a:	6083      	str	r3, [r0, #8]
 8010a9c:	8181      	strh	r1, [r0, #12]
 8010a9e:	6643      	str	r3, [r0, #100]	; 0x64
 8010aa0:	81c2      	strh	r2, [r0, #14]
 8010aa2:	6183      	str	r3, [r0, #24]
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	2208      	movs	r2, #8
 8010aa8:	305c      	adds	r0, #92	; 0x5c
 8010aaa:	f7fb fddb 	bl	800c664 <memset>
 8010aae:	4b05      	ldr	r3, [pc, #20]	; (8010ac4 <std+0x38>)
 8010ab0:	6263      	str	r3, [r4, #36]	; 0x24
 8010ab2:	4b05      	ldr	r3, [pc, #20]	; (8010ac8 <std+0x3c>)
 8010ab4:	62a3      	str	r3, [r4, #40]	; 0x28
 8010ab6:	4b05      	ldr	r3, [pc, #20]	; (8010acc <std+0x40>)
 8010ab8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010aba:	4b05      	ldr	r3, [pc, #20]	; (8010ad0 <std+0x44>)
 8010abc:	6224      	str	r4, [r4, #32]
 8010abe:	6323      	str	r3, [r4, #48]	; 0x30
 8010ac0:	bd10      	pop	{r4, pc}
 8010ac2:	bf00      	nop
 8010ac4:	08010de1 	.word	0x08010de1
 8010ac8:	08010e03 	.word	0x08010e03
 8010acc:	08010e3b 	.word	0x08010e3b
 8010ad0:	08010e5f 	.word	0x08010e5f

08010ad4 <_cleanup_r>:
 8010ad4:	4901      	ldr	r1, [pc, #4]	; (8010adc <_cleanup_r+0x8>)
 8010ad6:	f000 b8af 	b.w	8010c38 <_fwalk_reent>
 8010ada:	bf00      	nop
 8010adc:	08010a15 	.word	0x08010a15

08010ae0 <__sfmoreglue>:
 8010ae0:	b570      	push	{r4, r5, r6, lr}
 8010ae2:	2268      	movs	r2, #104	; 0x68
 8010ae4:	1e4d      	subs	r5, r1, #1
 8010ae6:	4355      	muls	r5, r2
 8010ae8:	460e      	mov	r6, r1
 8010aea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010aee:	f7ff fa5b 	bl	800ffa8 <_malloc_r>
 8010af2:	4604      	mov	r4, r0
 8010af4:	b140      	cbz	r0, 8010b08 <__sfmoreglue+0x28>
 8010af6:	2100      	movs	r1, #0
 8010af8:	e9c0 1600 	strd	r1, r6, [r0]
 8010afc:	300c      	adds	r0, #12
 8010afe:	60a0      	str	r0, [r4, #8]
 8010b00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010b04:	f7fb fdae 	bl	800c664 <memset>
 8010b08:	4620      	mov	r0, r4
 8010b0a:	bd70      	pop	{r4, r5, r6, pc}

08010b0c <__sfp_lock_acquire>:
 8010b0c:	4801      	ldr	r0, [pc, #4]	; (8010b14 <__sfp_lock_acquire+0x8>)
 8010b0e:	f000 b8b3 	b.w	8010c78 <__retarget_lock_acquire_recursive>
 8010b12:	bf00      	nop
 8010b14:	200010f1 	.word	0x200010f1

08010b18 <__sfp_lock_release>:
 8010b18:	4801      	ldr	r0, [pc, #4]	; (8010b20 <__sfp_lock_release+0x8>)
 8010b1a:	f000 b8ae 	b.w	8010c7a <__retarget_lock_release_recursive>
 8010b1e:	bf00      	nop
 8010b20:	200010f1 	.word	0x200010f1

08010b24 <__sinit_lock_acquire>:
 8010b24:	4801      	ldr	r0, [pc, #4]	; (8010b2c <__sinit_lock_acquire+0x8>)
 8010b26:	f000 b8a7 	b.w	8010c78 <__retarget_lock_acquire_recursive>
 8010b2a:	bf00      	nop
 8010b2c:	200010f2 	.word	0x200010f2

08010b30 <__sinit_lock_release>:
 8010b30:	4801      	ldr	r0, [pc, #4]	; (8010b38 <__sinit_lock_release+0x8>)
 8010b32:	f000 b8a2 	b.w	8010c7a <__retarget_lock_release_recursive>
 8010b36:	bf00      	nop
 8010b38:	200010f2 	.word	0x200010f2

08010b3c <__sinit>:
 8010b3c:	b510      	push	{r4, lr}
 8010b3e:	4604      	mov	r4, r0
 8010b40:	f7ff fff0 	bl	8010b24 <__sinit_lock_acquire>
 8010b44:	69a3      	ldr	r3, [r4, #24]
 8010b46:	b11b      	cbz	r3, 8010b50 <__sinit+0x14>
 8010b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b4c:	f7ff bff0 	b.w	8010b30 <__sinit_lock_release>
 8010b50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010b54:	6523      	str	r3, [r4, #80]	; 0x50
 8010b56:	4b13      	ldr	r3, [pc, #76]	; (8010ba4 <__sinit+0x68>)
 8010b58:	4a13      	ldr	r2, [pc, #76]	; (8010ba8 <__sinit+0x6c>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8010b5e:	42a3      	cmp	r3, r4
 8010b60:	bf04      	itt	eq
 8010b62:	2301      	moveq	r3, #1
 8010b64:	61a3      	streq	r3, [r4, #24]
 8010b66:	4620      	mov	r0, r4
 8010b68:	f000 f820 	bl	8010bac <__sfp>
 8010b6c:	6060      	str	r0, [r4, #4]
 8010b6e:	4620      	mov	r0, r4
 8010b70:	f000 f81c 	bl	8010bac <__sfp>
 8010b74:	60a0      	str	r0, [r4, #8]
 8010b76:	4620      	mov	r0, r4
 8010b78:	f000 f818 	bl	8010bac <__sfp>
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	60e0      	str	r0, [r4, #12]
 8010b80:	2104      	movs	r1, #4
 8010b82:	6860      	ldr	r0, [r4, #4]
 8010b84:	f7ff ff82 	bl	8010a8c <std>
 8010b88:	68a0      	ldr	r0, [r4, #8]
 8010b8a:	2201      	movs	r2, #1
 8010b8c:	2109      	movs	r1, #9
 8010b8e:	f7ff ff7d 	bl	8010a8c <std>
 8010b92:	68e0      	ldr	r0, [r4, #12]
 8010b94:	2202      	movs	r2, #2
 8010b96:	2112      	movs	r1, #18
 8010b98:	f7ff ff78 	bl	8010a8c <std>
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	61a3      	str	r3, [r4, #24]
 8010ba0:	e7d2      	b.n	8010b48 <__sinit+0xc>
 8010ba2:	bf00      	nop
 8010ba4:	0801121c 	.word	0x0801121c
 8010ba8:	08010ad5 	.word	0x08010ad5

08010bac <__sfp>:
 8010bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bae:	4607      	mov	r7, r0
 8010bb0:	f7ff ffac 	bl	8010b0c <__sfp_lock_acquire>
 8010bb4:	4b1e      	ldr	r3, [pc, #120]	; (8010c30 <__sfp+0x84>)
 8010bb6:	681e      	ldr	r6, [r3, #0]
 8010bb8:	69b3      	ldr	r3, [r6, #24]
 8010bba:	b913      	cbnz	r3, 8010bc2 <__sfp+0x16>
 8010bbc:	4630      	mov	r0, r6
 8010bbe:	f7ff ffbd 	bl	8010b3c <__sinit>
 8010bc2:	3648      	adds	r6, #72	; 0x48
 8010bc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010bc8:	3b01      	subs	r3, #1
 8010bca:	d503      	bpl.n	8010bd4 <__sfp+0x28>
 8010bcc:	6833      	ldr	r3, [r6, #0]
 8010bce:	b30b      	cbz	r3, 8010c14 <__sfp+0x68>
 8010bd0:	6836      	ldr	r6, [r6, #0]
 8010bd2:	e7f7      	b.n	8010bc4 <__sfp+0x18>
 8010bd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010bd8:	b9d5      	cbnz	r5, 8010c10 <__sfp+0x64>
 8010bda:	4b16      	ldr	r3, [pc, #88]	; (8010c34 <__sfp+0x88>)
 8010bdc:	60e3      	str	r3, [r4, #12]
 8010bde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010be2:	6665      	str	r5, [r4, #100]	; 0x64
 8010be4:	f000 f847 	bl	8010c76 <__retarget_lock_init_recursive>
 8010be8:	f7ff ff96 	bl	8010b18 <__sfp_lock_release>
 8010bec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010bf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010bf4:	6025      	str	r5, [r4, #0]
 8010bf6:	61a5      	str	r5, [r4, #24]
 8010bf8:	2208      	movs	r2, #8
 8010bfa:	4629      	mov	r1, r5
 8010bfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010c00:	f7fb fd30 	bl	800c664 <memset>
 8010c04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010c08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c10:	3468      	adds	r4, #104	; 0x68
 8010c12:	e7d9      	b.n	8010bc8 <__sfp+0x1c>
 8010c14:	2104      	movs	r1, #4
 8010c16:	4638      	mov	r0, r7
 8010c18:	f7ff ff62 	bl	8010ae0 <__sfmoreglue>
 8010c1c:	4604      	mov	r4, r0
 8010c1e:	6030      	str	r0, [r6, #0]
 8010c20:	2800      	cmp	r0, #0
 8010c22:	d1d5      	bne.n	8010bd0 <__sfp+0x24>
 8010c24:	f7ff ff78 	bl	8010b18 <__sfp_lock_release>
 8010c28:	230c      	movs	r3, #12
 8010c2a:	603b      	str	r3, [r7, #0]
 8010c2c:	e7ee      	b.n	8010c0c <__sfp+0x60>
 8010c2e:	bf00      	nop
 8010c30:	0801121c 	.word	0x0801121c
 8010c34:	ffff0001 	.word	0xffff0001

08010c38 <_fwalk_reent>:
 8010c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c3c:	4606      	mov	r6, r0
 8010c3e:	4688      	mov	r8, r1
 8010c40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010c44:	2700      	movs	r7, #0
 8010c46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c4a:	f1b9 0901 	subs.w	r9, r9, #1
 8010c4e:	d505      	bpl.n	8010c5c <_fwalk_reent+0x24>
 8010c50:	6824      	ldr	r4, [r4, #0]
 8010c52:	2c00      	cmp	r4, #0
 8010c54:	d1f7      	bne.n	8010c46 <_fwalk_reent+0xe>
 8010c56:	4638      	mov	r0, r7
 8010c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c5c:	89ab      	ldrh	r3, [r5, #12]
 8010c5e:	2b01      	cmp	r3, #1
 8010c60:	d907      	bls.n	8010c72 <_fwalk_reent+0x3a>
 8010c62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c66:	3301      	adds	r3, #1
 8010c68:	d003      	beq.n	8010c72 <_fwalk_reent+0x3a>
 8010c6a:	4629      	mov	r1, r5
 8010c6c:	4630      	mov	r0, r6
 8010c6e:	47c0      	blx	r8
 8010c70:	4307      	orrs	r7, r0
 8010c72:	3568      	adds	r5, #104	; 0x68
 8010c74:	e7e9      	b.n	8010c4a <_fwalk_reent+0x12>

08010c76 <__retarget_lock_init_recursive>:
 8010c76:	4770      	bx	lr

08010c78 <__retarget_lock_acquire_recursive>:
 8010c78:	4770      	bx	lr

08010c7a <__retarget_lock_release_recursive>:
 8010c7a:	4770      	bx	lr

08010c7c <__swhatbuf_r>:
 8010c7c:	b570      	push	{r4, r5, r6, lr}
 8010c7e:	460e      	mov	r6, r1
 8010c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c84:	2900      	cmp	r1, #0
 8010c86:	b096      	sub	sp, #88	; 0x58
 8010c88:	4614      	mov	r4, r2
 8010c8a:	461d      	mov	r5, r3
 8010c8c:	da08      	bge.n	8010ca0 <__swhatbuf_r+0x24>
 8010c8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010c92:	2200      	movs	r2, #0
 8010c94:	602a      	str	r2, [r5, #0]
 8010c96:	061a      	lsls	r2, r3, #24
 8010c98:	d410      	bmi.n	8010cbc <__swhatbuf_r+0x40>
 8010c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c9e:	e00e      	b.n	8010cbe <__swhatbuf_r+0x42>
 8010ca0:	466a      	mov	r2, sp
 8010ca2:	f000 f903 	bl	8010eac <_fstat_r>
 8010ca6:	2800      	cmp	r0, #0
 8010ca8:	dbf1      	blt.n	8010c8e <__swhatbuf_r+0x12>
 8010caa:	9a01      	ldr	r2, [sp, #4]
 8010cac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010cb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010cb4:	425a      	negs	r2, r3
 8010cb6:	415a      	adcs	r2, r3
 8010cb8:	602a      	str	r2, [r5, #0]
 8010cba:	e7ee      	b.n	8010c9a <__swhatbuf_r+0x1e>
 8010cbc:	2340      	movs	r3, #64	; 0x40
 8010cbe:	2000      	movs	r0, #0
 8010cc0:	6023      	str	r3, [r4, #0]
 8010cc2:	b016      	add	sp, #88	; 0x58
 8010cc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08010cc8 <__smakebuf_r>:
 8010cc8:	898b      	ldrh	r3, [r1, #12]
 8010cca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ccc:	079d      	lsls	r5, r3, #30
 8010cce:	4606      	mov	r6, r0
 8010cd0:	460c      	mov	r4, r1
 8010cd2:	d507      	bpl.n	8010ce4 <__smakebuf_r+0x1c>
 8010cd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010cd8:	6023      	str	r3, [r4, #0]
 8010cda:	6123      	str	r3, [r4, #16]
 8010cdc:	2301      	movs	r3, #1
 8010cde:	6163      	str	r3, [r4, #20]
 8010ce0:	b002      	add	sp, #8
 8010ce2:	bd70      	pop	{r4, r5, r6, pc}
 8010ce4:	ab01      	add	r3, sp, #4
 8010ce6:	466a      	mov	r2, sp
 8010ce8:	f7ff ffc8 	bl	8010c7c <__swhatbuf_r>
 8010cec:	9900      	ldr	r1, [sp, #0]
 8010cee:	4605      	mov	r5, r0
 8010cf0:	4630      	mov	r0, r6
 8010cf2:	f7ff f959 	bl	800ffa8 <_malloc_r>
 8010cf6:	b948      	cbnz	r0, 8010d0c <__smakebuf_r+0x44>
 8010cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cfc:	059a      	lsls	r2, r3, #22
 8010cfe:	d4ef      	bmi.n	8010ce0 <__smakebuf_r+0x18>
 8010d00:	f023 0303 	bic.w	r3, r3, #3
 8010d04:	f043 0302 	orr.w	r3, r3, #2
 8010d08:	81a3      	strh	r3, [r4, #12]
 8010d0a:	e7e3      	b.n	8010cd4 <__smakebuf_r+0xc>
 8010d0c:	4b0d      	ldr	r3, [pc, #52]	; (8010d44 <__smakebuf_r+0x7c>)
 8010d0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010d10:	89a3      	ldrh	r3, [r4, #12]
 8010d12:	6020      	str	r0, [r4, #0]
 8010d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d18:	81a3      	strh	r3, [r4, #12]
 8010d1a:	9b00      	ldr	r3, [sp, #0]
 8010d1c:	6163      	str	r3, [r4, #20]
 8010d1e:	9b01      	ldr	r3, [sp, #4]
 8010d20:	6120      	str	r0, [r4, #16]
 8010d22:	b15b      	cbz	r3, 8010d3c <__smakebuf_r+0x74>
 8010d24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d28:	4630      	mov	r0, r6
 8010d2a:	f000 f8d1 	bl	8010ed0 <_isatty_r>
 8010d2e:	b128      	cbz	r0, 8010d3c <__smakebuf_r+0x74>
 8010d30:	89a3      	ldrh	r3, [r4, #12]
 8010d32:	f023 0303 	bic.w	r3, r3, #3
 8010d36:	f043 0301 	orr.w	r3, r3, #1
 8010d3a:	81a3      	strh	r3, [r4, #12]
 8010d3c:	89a0      	ldrh	r0, [r4, #12]
 8010d3e:	4305      	orrs	r5, r0
 8010d40:	81a5      	strh	r5, [r4, #12]
 8010d42:	e7cd      	b.n	8010ce0 <__smakebuf_r+0x18>
 8010d44:	08010ad5 	.word	0x08010ad5

08010d48 <_malloc_usable_size_r>:
 8010d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d4c:	1f18      	subs	r0, r3, #4
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	bfbc      	itt	lt
 8010d52:	580b      	ldrlt	r3, [r1, r0]
 8010d54:	18c0      	addlt	r0, r0, r3
 8010d56:	4770      	bx	lr

08010d58 <_raise_r>:
 8010d58:	291f      	cmp	r1, #31
 8010d5a:	b538      	push	{r3, r4, r5, lr}
 8010d5c:	4604      	mov	r4, r0
 8010d5e:	460d      	mov	r5, r1
 8010d60:	d904      	bls.n	8010d6c <_raise_r+0x14>
 8010d62:	2316      	movs	r3, #22
 8010d64:	6003      	str	r3, [r0, #0]
 8010d66:	f04f 30ff 	mov.w	r0, #4294967295
 8010d6a:	bd38      	pop	{r3, r4, r5, pc}
 8010d6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010d6e:	b112      	cbz	r2, 8010d76 <_raise_r+0x1e>
 8010d70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d74:	b94b      	cbnz	r3, 8010d8a <_raise_r+0x32>
 8010d76:	4620      	mov	r0, r4
 8010d78:	f000 f830 	bl	8010ddc <_getpid_r>
 8010d7c:	462a      	mov	r2, r5
 8010d7e:	4601      	mov	r1, r0
 8010d80:	4620      	mov	r0, r4
 8010d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d86:	f000 b817 	b.w	8010db8 <_kill_r>
 8010d8a:	2b01      	cmp	r3, #1
 8010d8c:	d00a      	beq.n	8010da4 <_raise_r+0x4c>
 8010d8e:	1c59      	adds	r1, r3, #1
 8010d90:	d103      	bne.n	8010d9a <_raise_r+0x42>
 8010d92:	2316      	movs	r3, #22
 8010d94:	6003      	str	r3, [r0, #0]
 8010d96:	2001      	movs	r0, #1
 8010d98:	e7e7      	b.n	8010d6a <_raise_r+0x12>
 8010d9a:	2400      	movs	r4, #0
 8010d9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010da0:	4628      	mov	r0, r5
 8010da2:	4798      	blx	r3
 8010da4:	2000      	movs	r0, #0
 8010da6:	e7e0      	b.n	8010d6a <_raise_r+0x12>

08010da8 <raise>:
 8010da8:	4b02      	ldr	r3, [pc, #8]	; (8010db4 <raise+0xc>)
 8010daa:	4601      	mov	r1, r0
 8010dac:	6818      	ldr	r0, [r3, #0]
 8010dae:	f7ff bfd3 	b.w	8010d58 <_raise_r>
 8010db2:	bf00      	nop
 8010db4:	2000025c 	.word	0x2000025c

08010db8 <_kill_r>:
 8010db8:	b538      	push	{r3, r4, r5, lr}
 8010dba:	4d07      	ldr	r5, [pc, #28]	; (8010dd8 <_kill_r+0x20>)
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	4604      	mov	r4, r0
 8010dc0:	4608      	mov	r0, r1
 8010dc2:	4611      	mov	r1, r2
 8010dc4:	602b      	str	r3, [r5, #0]
 8010dc6:	f7f4 f8bd 	bl	8004f44 <_kill>
 8010dca:	1c43      	adds	r3, r0, #1
 8010dcc:	d102      	bne.n	8010dd4 <_kill_r+0x1c>
 8010dce:	682b      	ldr	r3, [r5, #0]
 8010dd0:	b103      	cbz	r3, 8010dd4 <_kill_r+0x1c>
 8010dd2:	6023      	str	r3, [r4, #0]
 8010dd4:	bd38      	pop	{r3, r4, r5, pc}
 8010dd6:	bf00      	nop
 8010dd8:	200010ec 	.word	0x200010ec

08010ddc <_getpid_r>:
 8010ddc:	f7f4 b8aa 	b.w	8004f34 <_getpid>

08010de0 <__sread>:
 8010de0:	b510      	push	{r4, lr}
 8010de2:	460c      	mov	r4, r1
 8010de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010de8:	f000 f894 	bl	8010f14 <_read_r>
 8010dec:	2800      	cmp	r0, #0
 8010dee:	bfab      	itete	ge
 8010df0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010df2:	89a3      	ldrhlt	r3, [r4, #12]
 8010df4:	181b      	addge	r3, r3, r0
 8010df6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010dfa:	bfac      	ite	ge
 8010dfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8010dfe:	81a3      	strhlt	r3, [r4, #12]
 8010e00:	bd10      	pop	{r4, pc}

08010e02 <__swrite>:
 8010e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e06:	461f      	mov	r7, r3
 8010e08:	898b      	ldrh	r3, [r1, #12]
 8010e0a:	05db      	lsls	r3, r3, #23
 8010e0c:	4605      	mov	r5, r0
 8010e0e:	460c      	mov	r4, r1
 8010e10:	4616      	mov	r6, r2
 8010e12:	d505      	bpl.n	8010e20 <__swrite+0x1e>
 8010e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e18:	2302      	movs	r3, #2
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f000 f868 	bl	8010ef0 <_lseek_r>
 8010e20:	89a3      	ldrh	r3, [r4, #12]
 8010e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e2a:	81a3      	strh	r3, [r4, #12]
 8010e2c:	4632      	mov	r2, r6
 8010e2e:	463b      	mov	r3, r7
 8010e30:	4628      	mov	r0, r5
 8010e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e36:	f000 b817 	b.w	8010e68 <_write_r>

08010e3a <__sseek>:
 8010e3a:	b510      	push	{r4, lr}
 8010e3c:	460c      	mov	r4, r1
 8010e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e42:	f000 f855 	bl	8010ef0 <_lseek_r>
 8010e46:	1c43      	adds	r3, r0, #1
 8010e48:	89a3      	ldrh	r3, [r4, #12]
 8010e4a:	bf15      	itete	ne
 8010e4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8010e4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010e52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010e56:	81a3      	strheq	r3, [r4, #12]
 8010e58:	bf18      	it	ne
 8010e5a:	81a3      	strhne	r3, [r4, #12]
 8010e5c:	bd10      	pop	{r4, pc}

08010e5e <__sclose>:
 8010e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e62:	f000 b813 	b.w	8010e8c <_close_r>
	...

08010e68 <_write_r>:
 8010e68:	b538      	push	{r3, r4, r5, lr}
 8010e6a:	4d07      	ldr	r5, [pc, #28]	; (8010e88 <_write_r+0x20>)
 8010e6c:	4604      	mov	r4, r0
 8010e6e:	4608      	mov	r0, r1
 8010e70:	4611      	mov	r1, r2
 8010e72:	2200      	movs	r2, #0
 8010e74:	602a      	str	r2, [r5, #0]
 8010e76:	461a      	mov	r2, r3
 8010e78:	f7f4 f89b 	bl	8004fb2 <_write>
 8010e7c:	1c43      	adds	r3, r0, #1
 8010e7e:	d102      	bne.n	8010e86 <_write_r+0x1e>
 8010e80:	682b      	ldr	r3, [r5, #0]
 8010e82:	b103      	cbz	r3, 8010e86 <_write_r+0x1e>
 8010e84:	6023      	str	r3, [r4, #0]
 8010e86:	bd38      	pop	{r3, r4, r5, pc}
 8010e88:	200010ec 	.word	0x200010ec

08010e8c <_close_r>:
 8010e8c:	b538      	push	{r3, r4, r5, lr}
 8010e8e:	4d06      	ldr	r5, [pc, #24]	; (8010ea8 <_close_r+0x1c>)
 8010e90:	2300      	movs	r3, #0
 8010e92:	4604      	mov	r4, r0
 8010e94:	4608      	mov	r0, r1
 8010e96:	602b      	str	r3, [r5, #0]
 8010e98:	f7f4 f8a7 	bl	8004fea <_close>
 8010e9c:	1c43      	adds	r3, r0, #1
 8010e9e:	d102      	bne.n	8010ea6 <_close_r+0x1a>
 8010ea0:	682b      	ldr	r3, [r5, #0]
 8010ea2:	b103      	cbz	r3, 8010ea6 <_close_r+0x1a>
 8010ea4:	6023      	str	r3, [r4, #0]
 8010ea6:	bd38      	pop	{r3, r4, r5, pc}
 8010ea8:	200010ec 	.word	0x200010ec

08010eac <_fstat_r>:
 8010eac:	b538      	push	{r3, r4, r5, lr}
 8010eae:	4d07      	ldr	r5, [pc, #28]	; (8010ecc <_fstat_r+0x20>)
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	4604      	mov	r4, r0
 8010eb4:	4608      	mov	r0, r1
 8010eb6:	4611      	mov	r1, r2
 8010eb8:	602b      	str	r3, [r5, #0]
 8010eba:	f7f4 f8a2 	bl	8005002 <_fstat>
 8010ebe:	1c43      	adds	r3, r0, #1
 8010ec0:	d102      	bne.n	8010ec8 <_fstat_r+0x1c>
 8010ec2:	682b      	ldr	r3, [r5, #0]
 8010ec4:	b103      	cbz	r3, 8010ec8 <_fstat_r+0x1c>
 8010ec6:	6023      	str	r3, [r4, #0]
 8010ec8:	bd38      	pop	{r3, r4, r5, pc}
 8010eca:	bf00      	nop
 8010ecc:	200010ec 	.word	0x200010ec

08010ed0 <_isatty_r>:
 8010ed0:	b538      	push	{r3, r4, r5, lr}
 8010ed2:	4d06      	ldr	r5, [pc, #24]	; (8010eec <_isatty_r+0x1c>)
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	4604      	mov	r4, r0
 8010ed8:	4608      	mov	r0, r1
 8010eda:	602b      	str	r3, [r5, #0]
 8010edc:	f7f4 f8a1 	bl	8005022 <_isatty>
 8010ee0:	1c43      	adds	r3, r0, #1
 8010ee2:	d102      	bne.n	8010eea <_isatty_r+0x1a>
 8010ee4:	682b      	ldr	r3, [r5, #0]
 8010ee6:	b103      	cbz	r3, 8010eea <_isatty_r+0x1a>
 8010ee8:	6023      	str	r3, [r4, #0]
 8010eea:	bd38      	pop	{r3, r4, r5, pc}
 8010eec:	200010ec 	.word	0x200010ec

08010ef0 <_lseek_r>:
 8010ef0:	b538      	push	{r3, r4, r5, lr}
 8010ef2:	4d07      	ldr	r5, [pc, #28]	; (8010f10 <_lseek_r+0x20>)
 8010ef4:	4604      	mov	r4, r0
 8010ef6:	4608      	mov	r0, r1
 8010ef8:	4611      	mov	r1, r2
 8010efa:	2200      	movs	r2, #0
 8010efc:	602a      	str	r2, [r5, #0]
 8010efe:	461a      	mov	r2, r3
 8010f00:	f7f4 f89a 	bl	8005038 <_lseek>
 8010f04:	1c43      	adds	r3, r0, #1
 8010f06:	d102      	bne.n	8010f0e <_lseek_r+0x1e>
 8010f08:	682b      	ldr	r3, [r5, #0]
 8010f0a:	b103      	cbz	r3, 8010f0e <_lseek_r+0x1e>
 8010f0c:	6023      	str	r3, [r4, #0]
 8010f0e:	bd38      	pop	{r3, r4, r5, pc}
 8010f10:	200010ec 	.word	0x200010ec

08010f14 <_read_r>:
 8010f14:	b538      	push	{r3, r4, r5, lr}
 8010f16:	4d07      	ldr	r5, [pc, #28]	; (8010f34 <_read_r+0x20>)
 8010f18:	4604      	mov	r4, r0
 8010f1a:	4608      	mov	r0, r1
 8010f1c:	4611      	mov	r1, r2
 8010f1e:	2200      	movs	r2, #0
 8010f20:	602a      	str	r2, [r5, #0]
 8010f22:	461a      	mov	r2, r3
 8010f24:	f7f4 f828 	bl	8004f78 <_read>
 8010f28:	1c43      	adds	r3, r0, #1
 8010f2a:	d102      	bne.n	8010f32 <_read_r+0x1e>
 8010f2c:	682b      	ldr	r3, [r5, #0]
 8010f2e:	b103      	cbz	r3, 8010f32 <_read_r+0x1e>
 8010f30:	6023      	str	r3, [r4, #0]
 8010f32:	bd38      	pop	{r3, r4, r5, pc}
 8010f34:	200010ec 	.word	0x200010ec

08010f38 <acosf>:
 8010f38:	b508      	push	{r3, lr}
 8010f3a:	ed2d 8b02 	vpush	{d8}
 8010f3e:	eeb0 8a40 	vmov.f32	s16, s0
 8010f42:	f000 f843 	bl	8010fcc <__ieee754_acosf>
 8010f46:	eeb4 8a48 	vcmp.f32	s16, s16
 8010f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f4e:	eef0 8a40 	vmov.f32	s17, s0
 8010f52:	d615      	bvs.n	8010f80 <acosf+0x48>
 8010f54:	eeb0 0a48 	vmov.f32	s0, s16
 8010f58:	f000 f933 	bl	80111c2 <fabsf>
 8010f5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010f60:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f68:	dd0a      	ble.n	8010f80 <acosf+0x48>
 8010f6a:	f7fb fb43 	bl	800c5f4 <__errno>
 8010f6e:	ecbd 8b02 	vpop	{d8}
 8010f72:	2321      	movs	r3, #33	; 0x21
 8010f74:	6003      	str	r3, [r0, #0]
 8010f76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010f7a:	4804      	ldr	r0, [pc, #16]	; (8010f8c <acosf+0x54>)
 8010f7c:	f7fc b9f4 	b.w	800d368 <nanf>
 8010f80:	eeb0 0a68 	vmov.f32	s0, s17
 8010f84:	ecbd 8b02 	vpop	{d8}
 8010f88:	bd08      	pop	{r3, pc}
 8010f8a:	bf00      	nop
 8010f8c:	08011660 	.word	0x08011660

08010f90 <sqrtf>:
 8010f90:	b508      	push	{r3, lr}
 8010f92:	ed2d 8b02 	vpush	{d8}
 8010f96:	eeb0 8a40 	vmov.f32	s16, s0
 8010f9a:	f000 f90f 	bl	80111bc <__ieee754_sqrtf>
 8010f9e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa6:	d60c      	bvs.n	8010fc2 <sqrtf+0x32>
 8010fa8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010fc8 <sqrtf+0x38>
 8010fac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb4:	d505      	bpl.n	8010fc2 <sqrtf+0x32>
 8010fb6:	f7fb fb1d 	bl	800c5f4 <__errno>
 8010fba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010fbe:	2321      	movs	r3, #33	; 0x21
 8010fc0:	6003      	str	r3, [r0, #0]
 8010fc2:	ecbd 8b02 	vpop	{d8}
 8010fc6:	bd08      	pop	{r3, pc}
 8010fc8:	00000000 	.word	0x00000000

08010fcc <__ieee754_acosf>:
 8010fcc:	b508      	push	{r3, lr}
 8010fce:	ee10 3a10 	vmov	r3, s0
 8010fd2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010fd6:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8010fda:	ed2d 8b0c 	vpush	{d8-d13}
 8010fde:	d10a      	bne.n	8010ff6 <__ieee754_acosf+0x2a>
 8010fe0:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8011178 <__ieee754_acosf+0x1ac>
 8010fe4:	ed9f 8a65 	vldr	s16, [pc, #404]	; 801117c <__ieee754_acosf+0x1b0>
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	bfd8      	it	le
 8010fec:	eeb0 0a48 	vmovle.f32	s0, s16
 8010ff0:	ecbd 8b0c 	vpop	{d8-d13}
 8010ff4:	bd08      	pop	{r3, pc}
 8010ff6:	dd04      	ble.n	8011002 <__ieee754_acosf+0x36>
 8010ff8:	ee30 8a40 	vsub.f32	s16, s0, s0
 8010ffc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8011000:	e7f6      	b.n	8010ff0 <__ieee754_acosf+0x24>
 8011002:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8011006:	da3c      	bge.n	8011082 <__ieee754_acosf+0xb6>
 8011008:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 801100c:	f340 80b1 	ble.w	8011172 <__ieee754_acosf+0x1a6>
 8011010:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011014:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8011180 <__ieee754_acosf+0x1b4>
 8011018:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8011184 <__ieee754_acosf+0x1b8>
 801101c:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8011188 <__ieee754_acosf+0x1bc>
 8011020:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 801118c <__ieee754_acosf+0x1c0>
 8011024:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011028:	eddf 6a59 	vldr	s13, [pc, #356]	; 8011190 <__ieee754_acosf+0x1c4>
 801102c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011030:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8011194 <__ieee754_acosf+0x1c8>
 8011034:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011038:	eddf 6a57 	vldr	s13, [pc, #348]	; 8011198 <__ieee754_acosf+0x1cc>
 801103c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011040:	ed9f 7a56 	vldr	s14, [pc, #344]	; 801119c <__ieee754_acosf+0x1d0>
 8011044:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011048:	eddf 6a55 	vldr	s13, [pc, #340]	; 80111a0 <__ieee754_acosf+0x1d4>
 801104c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8011050:	eddf 6a54 	vldr	s13, [pc, #336]	; 80111a4 <__ieee754_acosf+0x1d8>
 8011054:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011058:	ed9f 6a53 	vldr	s12, [pc, #332]	; 80111a8 <__ieee754_acosf+0x1dc>
 801105c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011064:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011068:	ee27 7a27 	vmul.f32	s14, s14, s15
 801106c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011070:	eea0 8a67 	vfms.f32	s16, s0, s15
 8011074:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80111ac <__ieee754_acosf+0x1e0>
 8011078:	ee30 0a48 	vsub.f32	s0, s0, s16
 801107c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011080:	e7b6      	b.n	8010ff0 <__ieee754_acosf+0x24>
 8011082:	2b00      	cmp	r3, #0
 8011084:	eddf da3e 	vldr	s27, [pc, #248]	; 8011180 <__ieee754_acosf+0x1b4>
 8011088:	eddf ca3e 	vldr	s25, [pc, #248]	; 8011184 <__ieee754_acosf+0x1b8>
 801108c:	ed9f ca40 	vldr	s24, [pc, #256]	; 8011190 <__ieee754_acosf+0x1c4>
 8011090:	eddf ba40 	vldr	s23, [pc, #256]	; 8011194 <__ieee754_acosf+0x1c8>
 8011094:	ed9f ba40 	vldr	s22, [pc, #256]	; 8011198 <__ieee754_acosf+0x1cc>
 8011098:	eddf 8a40 	vldr	s17, [pc, #256]	; 801119c <__ieee754_acosf+0x1d0>
 801109c:	ed9f da40 	vldr	s26, [pc, #256]	; 80111a0 <__ieee754_acosf+0x1d4>
 80110a0:	eddf aa39 	vldr	s21, [pc, #228]	; 8011188 <__ieee754_acosf+0x1bc>
 80110a4:	ed9f aa3f 	vldr	s20, [pc, #252]	; 80111a4 <__ieee754_acosf+0x1d8>
 80110a8:	eddf 9a3f 	vldr	s19, [pc, #252]	; 80111a8 <__ieee754_acosf+0x1dc>
 80110ac:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80110b0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80110b4:	da28      	bge.n	8011108 <__ieee754_acosf+0x13c>
 80110b6:	ee30 0a09 	vadd.f32	s0, s0, s18
 80110ba:	ee20 0a27 	vmul.f32	s0, s0, s15
 80110be:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80110c2:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80110c6:	eeac ca80 	vfma.f32	s24, s25, s0
 80110ca:	eeaa aa80 	vfma.f32	s20, s21, s0
 80110ce:	eeec ba00 	vfma.f32	s23, s24, s0
 80110d2:	eeea 9a00 	vfma.f32	s19, s20, s0
 80110d6:	eeab ba80 	vfma.f32	s22, s23, s0
 80110da:	eea9 9a80 	vfma.f32	s18, s19, s0
 80110de:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80110e2:	ee68 8a80 	vmul.f32	s17, s17, s0
 80110e6:	f000 f869 	bl	80111bc <__ieee754_sqrtf>
 80110ea:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80110ee:	eddf 7a30 	vldr	s15, [pc, #192]	; 80111b0 <__ieee754_acosf+0x1e4>
 80110f2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80110f6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80110fa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80110fe:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80111b4 <__ieee754_acosf+0x1e8>
 8011102:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011106:	e773      	b.n	8010ff0 <__ieee754_acosf+0x24>
 8011108:	ee39 8a40 	vsub.f32	s16, s18, s0
 801110c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011110:	eeb0 0a48 	vmov.f32	s0, s16
 8011114:	f000 f852 	bl	80111bc <__ieee754_sqrtf>
 8011118:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801111c:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8011120:	eeac ca88 	vfma.f32	s24, s25, s16
 8011124:	eeaa aa88 	vfma.f32	s20, s21, s16
 8011128:	eeec ba08 	vfma.f32	s23, s24, s16
 801112c:	ee10 3a10 	vmov	r3, s0
 8011130:	eeab ba88 	vfma.f32	s22, s23, s16
 8011134:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011138:	f023 030f 	bic.w	r3, r3, #15
 801113c:	eeea 9a08 	vfma.f32	s19, s20, s16
 8011140:	ee07 3a90 	vmov	s15, r3
 8011144:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8011148:	eeb0 6a48 	vmov.f32	s12, s16
 801114c:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8011150:	eea9 9a88 	vfma.f32	s18, s19, s16
 8011154:	ee70 6a27 	vadd.f32	s13, s0, s15
 8011158:	ee68 8a88 	vmul.f32	s17, s17, s16
 801115c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8011160:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8011164:	eea0 7a26 	vfma.f32	s14, s0, s13
 8011168:	ee37 0a87 	vadd.f32	s0, s15, s14
 801116c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011170:	e73e      	b.n	8010ff0 <__ieee754_acosf+0x24>
 8011172:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80111b8 <__ieee754_acosf+0x1ec>
 8011176:	e73b      	b.n	8010ff0 <__ieee754_acosf+0x24>
 8011178:	00000000 	.word	0x00000000
 801117c:	40490fdb 	.word	0x40490fdb
 8011180:	3811ef08 	.word	0x3811ef08
 8011184:	3a4f7f04 	.word	0x3a4f7f04
 8011188:	bf303361 	.word	0xbf303361
 801118c:	33a22168 	.word	0x33a22168
 8011190:	bd241146 	.word	0xbd241146
 8011194:	3e4e0aa8 	.word	0x3e4e0aa8
 8011198:	bea6b090 	.word	0xbea6b090
 801119c:	3e2aaaab 	.word	0x3e2aaaab
 80111a0:	3d9dc62e 	.word	0x3d9dc62e
 80111a4:	4001572d 	.word	0x4001572d
 80111a8:	c019d139 	.word	0xc019d139
 80111ac:	3fc90fda 	.word	0x3fc90fda
 80111b0:	b3a22168 	.word	0xb3a22168
 80111b4:	40490fda 	.word	0x40490fda
 80111b8:	3fc90fdb 	.word	0x3fc90fdb

080111bc <__ieee754_sqrtf>:
 80111bc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80111c0:	4770      	bx	lr

080111c2 <fabsf>:
 80111c2:	ee10 3a10 	vmov	r3, s0
 80111c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80111ca:	ee00 3a10 	vmov	s0, r3
 80111ce:	4770      	bx	lr

080111d0 <_init>:
 80111d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111d2:	bf00      	nop
 80111d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111d6:	bc08      	pop	{r3}
 80111d8:	469e      	mov	lr, r3
 80111da:	4770      	bx	lr

080111dc <_fini>:
 80111dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111de:	bf00      	nop
 80111e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111e2:	bc08      	pop	{r3}
 80111e4:	469e      	mov	lr, r3
 80111e6:	4770      	bx	lr
