
FRA262_G4_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08010130  08010130  00020130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010604  08010604  00030400  2**0
                  CONTENTS
  4 .ARM          00000008  08010604  08010604  00020604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801060c  0801060c  00030400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801060c  0801060c  0002060c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010610  08010610  00020610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000400  20000000  08010614  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cc0  20000400  08010a14  00030400  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c0  08010a14  000310c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030400  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001558a  00000000  00000000  00030430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002740  00000000  00000000  000459ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00048100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  00049308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192eb  00000000  00000000  0004a440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159b3  00000000  00000000  0006372b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0212  00000000  00000000  000790de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001192f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006414  00000000  00000000  00119340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000400 	.word	0x20000400
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010118 	.word	0x08010118

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000404 	.word	0x20000404
 80001dc:	08010118 	.word	0x08010118

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <modbus_1t5_Timeout+0x1c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	751a      	strb	r2, [r3, #20]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	2000041c 	.word	0x2000041c

08001028 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <modbus_3t5_Timeout+0x1c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	755a      	strb	r2, [r3, #21]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	2000041c 	.word	0x2000041c

08001048 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <modbus_UART_Recived+0x60>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001062:	1c59      	adds	r1, r3, #1
 8001064:	b289      	uxth	r1, r1
 8001066:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 800106a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800106e:	d210      	bcs.n	8001092 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68d8      	ldr	r0, [r3, #12]
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <modbus_UART_Recived+0x60>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001082:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001086:	4413      	add	r3, r2
 8001088:	3302      	adds	r3, #2
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	f009 f8bc 	bl	800a20a <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000041c 	.word	0x2000041c

080010ac <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80010b6:	4a24      	ldr	r2, [pc, #144]	; (8001148 <Modbus_init+0x9c>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <Modbus_init+0x9c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <Modbus_init+0x9c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	4a20      	ldr	r2, [pc, #128]	; (800114c <Modbus_init+0xa0>)
 80010cc:	2114      	movs	r1, #20
 80010ce:	4618      	mov	r0, r3
 80010d0:	f008 fa08 	bl	80094e4 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <Modbus_init+0x9c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <Modbus_init+0xa4>)
 80010dc:	210e      	movs	r1, #14
 80010de:	4618      	mov	r0, r3
 80010e0:	f008 fa00 	bl	80094e4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <Modbus_init+0x9c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <Modbus_init+0xa8>)
 80010ec:	2103      	movs	r1, #3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f008 ff9e 	bl	800a030 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <Modbus_init+0x9c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d8      	ldr	r0, [r3, #12]
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <Modbus_init+0x9c>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <Modbus_init+0x9c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001106:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800110a:	4413      	add	r3, r2
 800110c:	3302      	adds	r3, #2
 800110e:	2201      	movs	r2, #1
 8001110:	4619      	mov	r1, r3
 8001112:	f009 f87a 	bl	800a20a <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <Modbus_init+0x9c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10c      	bne.n	8001140 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <Modbus_init+0x9c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	4618      	mov	r0, r3
 800112e:	f007 fa8d 	bl	800864c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <Modbus_init+0x9c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f007 fcc2 	bl	8008ac4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000041c 	.word	0x2000041c
 800114c:	08001009 	.word	0x08001009
 8001150:	08001029 	.word	0x08001029
 8001154:	08001049 	.word	0x08001049

08001158 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001164:	23ff      	movs	r3, #255	; 0xff
 8001166:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800116c:	e013      	b.n	8001196 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	4053      	eors	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <CRC16+0x64>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4413      	add	r3, r2
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	4053      	eors	r3, r2
 800118a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <CRC16+0x68>)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001196:	883b      	ldrh	r3, [r7, #0]
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	803a      	strh	r2, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e6      	bne.n	800116e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000100 	.word	0x20000100
 80011c0:	20000000 	.word	0x20000000

080011c4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80011ca:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	7e1b      	ldrb	r3, [r3, #24]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d80a      	bhi.n	80011ec <Modbus_Protocal_Worker+0x28>
 80011d6:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <Modbus_Protocal_Worker+0x18>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	080011f7 	.word	0x080011f7
 80011e0:	08001397 	.word	0x08001397
 80011e4:	08001283 	.word	0x08001283
 80011e8:	080012a9 	.word	0x080012a9
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80011ec:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	761a      	strb	r2, [r3, #24]
		break;
 80011f4:	e0e8      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001202:	f000 f9d7 	bl	80015b4 <Modbus_Emission>
 8001206:	e01c      	b.n	8001242 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001208:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	7d9b      	ldrb	r3, [r3, #22]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d017      	beq.n	8001242 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800121a:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001222:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2203      	movs	r2, #3
 8001240:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b20      	cmp	r3, #32
 8001250:	f040 80b3 	bne.w	80013ba <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800125e:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001270:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001274:	4413      	add	r3, r2
 8001276:	3302      	adds	r3, #2
 8001278:	2201      	movs	r2, #1
 800127a:	4619      	mov	r1, r3
 800127c:	f008 ffc5 	bl	800a20a <HAL_UART_Receive_IT>
		}
		break;
 8001280:	e09b      	b.n	80013ba <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001282:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7d1b      	ldrb	r3, [r3, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8098 	beq.w	80013be <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001296:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	22fe      	movs	r2, #254	; 0xfe
 800129c:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2204      	movs	r2, #4
 80012a4:	761a      	strb	r2, [r3, #24]
		}
		break;
 80012a6:	e08a      	b.n	80013be <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	7d9b      	ldrb	r3, [r3, #22]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80012c6:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ce:	f113 0f02 	cmn.w	r3, #2
 80012d2:	d150      	bne.n	8001376 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80012d4:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f203 2272 	addw	r2, r3, #626	; 0x272
 80012e4:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80012ec:	3b02      	subs	r3, #2
 80012ee:	4619      	mov	r1, r3
 80012f0:	4610      	mov	r0, r2
 80012f2:	f7ff ff31 	bl	8001158 <CRC16>
 80012f6:	4603      	mov	r3, r0
 80012f8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012fa:	793a      	ldrb	r2, [r7, #4]
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001308:	3b02      	subs	r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001310:	429a      	cmp	r2, r3
 8001312:	d10c      	bne.n	800132e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001314:	797a      	ldrb	r2, [r7, #5]
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001322:	3b01      	subs	r3, #1
 8001324:	440b      	add	r3, r1
 8001326:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800132a:	429a      	cmp	r2, r3
 800132c:	d004      	beq.n	8001338 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	22ff      	movs	r2, #255	; 0xff
 8001334:	75da      	strb	r2, [r3, #23]
				break;
 8001336:	e047      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d113      	bne.n	8001372 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800135a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001364:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001366:	461a      	mov	r2, r3
 8001368:	f00a f912 	bl	800b590 <memcpy>

			//execute command
			Modbus_frame_response();
 800136c:	f000 f90a 	bl	8001584 <Modbus_frame_response>
 8001370:	e001      	b.n	8001376 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001372:	bf00      	nop
					}
		break;


	}
}
 8001374:	e028      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7d5b      	ldrb	r3, [r3, #21]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	4618      	mov	r0, r3
 8001390:	f008 ffea 	bl	800a368 <HAL_UART_AbortReceive>
		break;
 8001394:	e015      	b.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d10f      	bne.n	80013c6 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	761a      	strb	r2, [r3, #24]
		break;
 80013b8:	e005      	b.n	80013c6 <Modbus_Protocal_Worker+0x202>
		break;
 80013ba:	bf00      	nop
 80013bc:	e004      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013be:	bf00      	nop
 80013c0:	e002      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c6:	bf00      	nop
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000041c 	.word	0x2000041c

080013d4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <modbusWrite1Register+0x80>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	7e9b      	ldrb	r3, [r3, #26]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <modbusWrite1Register+0x80>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	7edb      	ldrb	r3, [r3, #27]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <modbusWrite1Register+0x80>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d903      	bls.n	8001406 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013fe:	2002      	movs	r0, #2
 8001400:	f000 f8a4 	bl	800154c <ModbusErrorReply>
			 return;
 8001404:	e023      	b.n	800144e <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <modbusWrite1Register+0x80>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <modbusWrite1Register+0x80>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	7f12      	ldrb	r2, [r2, #28]
 8001418:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <modbusWrite1Register+0x80>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <modbusWrite1Register+0x80>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6859      	ldr	r1, [r3, #4]
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	440b      	add	r3, r1
 800142a:	7f52      	ldrb	r2, [r2, #29]
 800142c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <modbusWrite1Register+0x80>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <modbusWrite1Register+0x80>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 800143c:	2208      	movs	r2, #8
 800143e:	4619      	mov	r1, r3
 8001440:	f00a f8a6 	bl	800b590 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <modbusWrite1Register+0x80>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2205      	movs	r2, #5
 800144a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000041c 	.word	0x2000041c

08001458 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <modbusRead1Register+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	7f1b      	ldrb	r3, [r3, #28]
 8001464:	b29b      	uxth	r3, r3
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <modbusRead1Register+0xf0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	7f5b      	ldrb	r3, [r3, #29]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4413      	add	r3, r2
 8001474:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <modbusRead1Register+0xf0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7e9b      	ldrb	r3, [r3, #26]
 800147c:	b29b      	uxth	r3, r3
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <modbusRead1Register+0xf0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	7edb      	ldrb	r3, [r3, #27]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <modbusRead1Register+0x42>
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	2b7d      	cmp	r3, #125	; 0x7d
 8001498:	d903      	bls.n	80014a2 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f856 	bl	800154c <ModbusErrorReply>
		 return;
 80014a0:	e04e      	b.n	8001540 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80014a2:	88ba      	ldrh	r2, [r7, #4]
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <modbusRead1Register+0xf0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d808      	bhi.n	80014c0 <modbusRead1Register+0x68>
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4413      	add	r3, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <modbusRead1Register+0xf0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d903      	bls.n	80014c8 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f000 f843 	bl	800154c <ModbusErrorReply>
		 return;
 80014c6:	e03b      	b.n	8001540 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <modbusRead1Register+0xf0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <modbusRead1Register+0xf0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	0052      	lsls	r2, r2, #1
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80014e2:	2400      	movs	r4, #0
 80014e4:	e020      	b.n	8001528 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <modbusRead1Register+0xf0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	88bb      	ldrh	r3, [r7, #4]
 80014ee:	4423      	add	r3, r4
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	18d1      	adds	r1, r2, r3
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <modbusRead1Register+0xf0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	1c63      	adds	r3, r4, #1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	7849      	ldrb	r1, [r1, #1]
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <modbusRead1Register+0xf0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	4423      	add	r3, r4
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <modbusRead1Register+0xf0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	0063      	lsls	r3, r4, #1
 800151a:	3303      	adds	r3, #3
 800151c:	7809      	ldrb	r1, [r1, #0]
 800151e:	4413      	add	r3, r2
 8001520:	460a      	mov	r2, r1
 8001522:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001526:	3401      	adds	r4, #1
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	429c      	cmp	r4, r3
 800152c:	dbdb      	blt.n	80014e6 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <modbusRead1Register+0xf0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	2000041c 	.word	0x2000041c

0800154c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register | 0x80;
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <ModbusErrorReply+0x34>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2283      	movs	r2, #131	; 0x83
 800155c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <ModbusErrorReply+0x34>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	79fa      	ldrb	r2, [r7, #7]
 8001566:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <ModbusErrorReply+0x34>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	2000041c 	.word	0x2000041c

08001584 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <Modbus_frame_response+0x2c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	7e5b      	ldrb	r3, [r3, #25]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d004      	beq.n	800159c <Modbus_frame_response+0x18>
 8001592:	2b06      	cmp	r3, #6
 8001594:	d105      	bne.n	80015a2 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001596:	f7ff ff1d 	bl	80013d4 <modbusWrite1Register>
		break;
 800159a:	e006      	b.n	80015aa <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800159c:	f7ff ff5c 	bl	8001458 <modbusRead1Register>
		break;
 80015a0:	e003      	b.n	80015aa <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff ffd2 	bl	800154c <ModbusErrorReply>
		break;
 80015a8:	bf00      	nop

	}
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000041c 	.word	0x2000041c

080015b4 <Modbus_Emission>:

void Modbus_Emission()
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <Modbus_Emission+0xfc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b20      	cmp	r3, #32
 80015c8:	d15e      	bne.n	8001688 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80015ca:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <Modbus_Emission+0xfc>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <Modbus_Emission+0xfc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <Modbus_Emission+0xfc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80015e0:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80015e2:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <Modbus_Emission+0xfc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <Modbus_Emission+0xfc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 80015f2:	461a      	mov	r2, r3
 80015f4:	f009 ffcc 	bl	800b590 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80015f8:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <Modbus_Emission+0xfc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <Modbus_Emission+0xfc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3203      	adds	r2, #3
 8001608:	b292      	uxth	r2, r2
 800160a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <Modbus_Emission+0xfc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <Modbus_Emission+0xfc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800161e:	3b02      	subs	r3, #2
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f7ff fd98 	bl	8001158 <CRC16>
 8001628:	4603      	mov	r3, r0
 800162a:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <Modbus_Emission+0xfc>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <Modbus_Emission+0xfc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001638:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800163a:	7939      	ldrb	r1, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	460a      	mov	r2, r1
 8001640:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <Modbus_Emission+0xfc>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <Modbus_Emission+0xfc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001650:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001652:	7979      	ldrb	r1, [r7, #5]
 8001654:	4413      	add	r3, r2
 8001656:	460a      	mov	r2, r1
 8001658:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <Modbus_Emission+0xfc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b20      	cmp	r3, #32
 800166a:	d10d      	bne.n	8001688 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <Modbus_Emission+0xfc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <Modbus_Emission+0xfc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <Modbus_Emission+0xfc>)
 800167c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800167e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001682:	461a      	mov	r2, r3
 8001684:	f008 fdf2 	bl	800a26c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <Modbus_Emission+0xfc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <Modbus_Emission+0xfc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <Modbus_Emission+0xfc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <Modbus_Emission+0xfc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2202      	movs	r2, #2
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000041c 	.word	0x2000041c
 80016b4:	00000000 	.word	0x00000000

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016be:	f003 f8db 	bl	8004878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c2:	f000 fa97 	bl	8001bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c6:	f000 fd89 	bl	80021dc <MX_GPIO_Init>
  MX_DMA_Init();
 80016ca:	f000 fd51 	bl	8002170 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016ce:	f000 fd23 	bl	8002118 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80016d2:	f000 fc15 	bl	8001f00 <MX_TIM3_Init>
  MX_TIM1_Init();
 80016d6:	f000 fb83 	bl	8001de0 <MX_TIM1_Init>
  MX_ADC1_Init();
 80016da:	f000 faf3 	bl	8001cc4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80016de:	f000 fcf1 	bl	80020c4 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 80016e2:	f000 fc9b 	bl	800201c <MX_TIM11_Init>
  MX_TIM9_Init();
 80016e6:	f000 fc5f 	bl	8001fa8 <MX_TIM9_Init>
  MX_I2C1_Init();
 80016ea:	f000 fb4b 	bl	8001d84 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  hmodbus.huart = &huart2;
 80016ee:	4ba0      	ldr	r3, [pc, #640]	; (8001970 <main+0x2b8>)
 80016f0:	4aa0      	ldr	r2, [pc, #640]	; (8001974 <main+0x2bc>)
 80016f2:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 80016f4:	4b9e      	ldr	r3, [pc, #632]	; (8001970 <main+0x2b8>)
 80016f6:	4aa0      	ldr	r2, [pc, #640]	; (8001978 <main+0x2c0>)
 80016f8:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80016fa:	4b9d      	ldr	r3, [pc, #628]	; (8001970 <main+0x2b8>)
 80016fc:	2215      	movs	r2, #21
 80016fe:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 70;
 8001700:	4b9b      	ldr	r3, [pc, #620]	; (8001970 <main+0x2b8>)
 8001702:	2246      	movs	r2, #70	; 0x46
 8001704:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001706:	499d      	ldr	r1, [pc, #628]	; (800197c <main+0x2c4>)
 8001708:	4899      	ldr	r0, [pc, #612]	; (8001970 <main+0x2b8>)
 800170a:	f7ff fccf 	bl	80010ac <Modbus_init>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 800170e:	2104      	movs	r1, #4
 8001710:	489b      	ldr	r0, [pc, #620]	; (8001980 <main+0x2c8>)
 8001712:	f007 faf1 	bl	8008cf8 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Start Timer1
 8001716:	489b      	ldr	r0, [pc, #620]	; (8001984 <main+0x2cc>)
 8001718:	f006 ff3e 	bl	8008598 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800171c:	2100      	movs	r1, #0
 800171e:	4899      	ldr	r0, [pc, #612]	; (8001984 <main+0x2cc>)
 8001720:	f007 f8b8 	bl	8008894 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001724:	2104      	movs	r1, #4
 8001726:	4897      	ldr	r0, [pc, #604]	; (8001984 <main+0x2cc>)
 8001728:	f007 f8b4 	bl	8008894 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 800172c:	4896      	ldr	r0, [pc, #600]	; (8001988 <main+0x2d0>)
 800172e:	f006 ff8d 	bl	800864c <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, L_EN);
 8001732:	4b96      	ldr	r3, [pc, #600]	; (800198c <main+0x2d4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	461a      	mov	r2, r3
 800173a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800173e:	4894      	ldr	r0, [pc, #592]	; (8001990 <main+0x2d8>)
 8001740:	f004 fbfc 	bl	8005f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, R_EN);
 8001744:	4b93      	ldr	r3, [pc, #588]	; (8001994 <main+0x2dc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	2110      	movs	r1, #16
 800174e:	4890      	ldr	r0, [pc, #576]	; (8001990 <main+0x2d8>)
 8001750:	f004 fbf4 	bl	8005f3c <HAL_GPIO_WritePin>

  HAL_ADC_Start_DMA(&hadc1, XYSwitch, 2);
 8001754:	2202      	movs	r2, #2
 8001756:	4990      	ldr	r1, [pc, #576]	; (8001998 <main+0x2e0>)
 8001758:	4890      	ldr	r0, [pc, #576]	; (800199c <main+0x2e4>)
 800175a:	f003 f967 	bl	8004a2c <HAL_ADC_Start_DMA>

  registerFrame[1].U16 = 0;
 800175e:	4b87      	ldr	r3, [pc, #540]	; (800197c <main+0x2c4>)
 8001760:	2200      	movs	r2, #0
 8001762:	805a      	strh	r2, [r3, #2]
  EndEffectorState = 0;	//SoftReset
 8001764:	4b8e      	ldr	r3, [pc, #568]	; (80019a0 <main+0x2e8>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
  EndEffectorWriteFlag = 1;
 800176a:	4b8e      	ldr	r3, [pc, #568]	; (80019a4 <main+0x2ec>)
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Protocal_Worker();
 8001770:	f7ff fd28 	bl	80011c4 <Modbus_Protocal_Worker>
	  static uint32_t heartbeat = 0;
	  static uint32_t uart_time = 0;
	  if(heartbeat < HAL_GetTick())
 8001774:	f003 f8e6 	bl	8004944 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	4b8b      	ldr	r3, [pc, #556]	; (80019a8 <main+0x2f0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d909      	bls.n	8001796 <main+0xde>
	  {
		  heartbeat = HAL_GetTick()+100;
 8001782:	f003 f8df 	bl	8004944 <HAL_GetTick>
 8001786:	4603      	mov	r3, r0
 8001788:	3364      	adds	r3, #100	; 0x64
 800178a:	4a87      	ldr	r2, [pc, #540]	; (80019a8 <main+0x2f0>)
 800178c:	6013      	str	r3, [r2, #0]
		  registerFrame[0].U16 = 22881;
 800178e:	4b7b      	ldr	r3, [pc, #492]	; (800197c <main+0x2c4>)
 8001790:	f645 1261 	movw	r2, #22881	; 0x5961
 8001794:	801a      	strh	r2, [r3, #0]
	  }

	  if (huart1.gState == HAL_UART_STATE_READY && (HAL_GetTick() >= uart_time))
 8001796:	4b85      	ldr	r3, [pc, #532]	; (80019ac <main+0x2f4>)
 8001798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b20      	cmp	r3, #32
 80017a0:	d130      	bne.n	8001804 <main+0x14c>
 80017a2:	f003 f8cf 	bl	8004944 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	4b81      	ldr	r3, [pc, #516]	; (80019b0 <main+0x2f8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d329      	bcc.n	8001804 <main+0x14c>
	  {
		  sprintf(TxBuffer,"%d %.2f %.2f\r\n",position, setposition, setvelocity);
 80017b0:	4b80      	ldr	r3, [pc, #512]	; (80019b4 <main+0x2fc>)
 80017b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b6:	461e      	mov	r6, r3
 80017b8:	4b7f      	ldr	r3, [pc, #508]	; (80019b8 <main+0x300>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fecb 	bl	8000558 <__aeabi_f2d>
 80017c2:	4604      	mov	r4, r0
 80017c4:	460d      	mov	r5, r1
 80017c6:	4b7d      	ldr	r3, [pc, #500]	; (80019bc <main+0x304>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fec4 	bl	8000558 <__aeabi_f2d>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017d8:	e9cd 4500 	strd	r4, r5, [sp]
 80017dc:	4632      	mov	r2, r6
 80017de:	4978      	ldr	r1, [pc, #480]	; (80019c0 <main+0x308>)
 80017e0:	4878      	ldr	r0, [pc, #480]	; (80019c4 <main+0x30c>)
 80017e2:	f00a fd6b 	bl	800c2bc <siprintf>
		  HAL_UART_Transmit_IT(&huart1, (uint8_t *)TxBuffer, strlen(TxBuffer));
 80017e6:	4877      	ldr	r0, [pc, #476]	; (80019c4 <main+0x30c>)
 80017e8:	f7fe fcfa 	bl	80001e0 <strlen>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	4974      	ldr	r1, [pc, #464]	; (80019c4 <main+0x30c>)
 80017f4:	486d      	ldr	r0, [pc, #436]	; (80019ac <main+0x2f4>)
 80017f6:	f008 fcc3 	bl	800a180 <HAL_UART_Transmit_IT>
		  uart_time += 20;
 80017fa:	4b6d      	ldr	r3, [pc, #436]	; (80019b0 <main+0x2f8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3314      	adds	r3, #20
 8001800:	4a6b      	ldr	r2, [pc, #428]	; (80019b0 <main+0x2f8>)
 8001802:	6013      	str	r3, [r2, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  VelocityApprox();
 8001804:	f000 fdc0 	bl	8002388 <VelocityApprox>
	  AccelerationApprox();
 8001808:	f000 fdec 	bl	80023e4 <AccelerationApprox>
	  Routine(); //Sent Y Actual Position Velocity Acceleration to Base System
 800180c:	f000 fe08 	bl	8002420 <Routine>

	  JoystickPinUpdate(); //Check Pin Flag
 8001810:	f000 fece 	bl	80025b0 <JoystickPinUpdate>

	  switch(scheduler)
 8001814:	4b6c      	ldr	r3, [pc, #432]	; (80019c8 <main+0x310>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b05      	cmp	r3, #5
 800181a:	d8a9      	bhi.n	8001770 <main+0xb8>
 800181c:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <main+0x16c>)
 800181e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001822:	bf00      	nop
 8001824:	0800183d 	.word	0x0800183d
 8001828:	08001853 	.word	0x08001853
 800182c:	080018db 	.word	0x080018db
 8001830:	080019e1 	.word	0x080019e1
 8001834:	08001b1d 	.word	0x08001b1d
 8001838:	08001bab 	.word	0x08001bab
	  {
	  //JoyStick
	  case 0:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 800183c:	4b50      	ldr	r3, [pc, #320]	; (8001980 <main+0x2c8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	b21a      	sxth	r2, r3
 8001844:	4b5b      	ldr	r3, [pc, #364]	; (80019b4 <main+0x2fc>)
 8001846:	801a      	strh	r2, [r3, #0]
		  JoystickControl(); //Read Pin form JoyStick
 8001848:	f000 ff4e 	bl	80026e8 <JoystickControl>
		  JoystickLocationState();
 800184c:	f001 f820 	bl	8002890 <JoystickLocationState>
		  break;
 8001850:	e1b1      	b.n	8001bb6 <main+0x4fe>

	  //Go Pick
	  case 1 :
		  registerFrame[16].U16 = 8; //Y Moving Status: Go Pick
 8001852:	4b4a      	ldr	r3, [pc, #296]	; (800197c <main+0x2c4>)
 8001854:	2208      	movs	r2, #8
 8001856:	841a      	strh	r2, [r3, #32]
		  qf = (PickTray.hole_y[HoleSequence])/0.045;
 8001858:	4b5c      	ldr	r3, [pc, #368]	; (80019cc <main+0x314>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a5c      	ldr	r2, [pc, #368]	; (80019d0 <main+0x318>)
 800185e:	330c      	adds	r3, #12
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	3304      	adds	r3, #4
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe75 	bl	8000558 <__aeabi_f2d>
 800186e:	a33e      	add	r3, pc, #248	; (adr r3, 8001968 <main+0x2b0>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe fff2 	bl	800085c <__aeabi_ddiv>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f7ff f9ba 	bl	8000bf8 <__aeabi_d2f>
 8001884:	4603      	mov	r3, r0
 8001886:	4a53      	ldr	r2, [pc, #332]	; (80019d4 <main+0x31c>)
 8001888:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PickTray.hole_x[HoleSequence]*10; //X-Axis Target Position Pick Tray
 800188a:	4b50      	ldr	r3, [pc, #320]	; (80019cc <main+0x314>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a50      	ldr	r2, [pc, #320]	; (80019d0 <main+0x318>)
 8001890:	3304      	adds	r3, #4
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	edd3 7a00 	vldr	s15, [r3]
 800189a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800189e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018a6:	ee17 3a90 	vmov	r3, s15
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	4b33      	ldr	r3, [pc, #204]	; (800197c <main+0x2c4>)
 80018ae:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 80018b2:	4b32      	ldr	r3, [pc, #200]	; (800197c <main+0x2c4>)
 80018b4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80018b8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 3;
 80018bc:	4b2f      	ldr	r3, [pc, #188]	; (800197c <main+0x2c4>)
 80018be:	2203      	movs	r2, #3
 80018c0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  registerFrame[64].U16 = 2; //X Moving Status: Run
 80018c4:	4b2d      	ldr	r3, [pc, #180]	; (800197c <main+0x2c4>)
 80018c6:	2202      	movs	r2, #2
 80018c8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  Trajectstate = 0;
 80018cc:	4b42      	ldr	r3, [pc, #264]	; (80019d8 <main+0x320>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
		  scheduler = 3;
 80018d2:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <main+0x310>)
 80018d4:	2203      	movs	r2, #3
 80018d6:	601a      	str	r2, [r3, #0]
		  break;
 80018d8:	e16d      	b.n	8001bb6 <main+0x4fe>

	  //Go Place
	  case 2 :
		  registerFrame[16].U16 = 16; //Y Moving Status: Go Place
 80018da:	4b28      	ldr	r3, [pc, #160]	; (800197c <main+0x2c4>)
 80018dc:	2210      	movs	r2, #16
 80018de:	841a      	strh	r2, [r3, #32]
		  qf = (PlaceTray.hole_y[HoleSequence])/0.045;
 80018e0:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <main+0x314>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a3d      	ldr	r2, [pc, #244]	; (80019dc <main+0x324>)
 80018e6:	330c      	adds	r3, #12
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	3304      	adds	r3, #4
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe31 	bl	8000558 <__aeabi_f2d>
 80018f6:	a31c      	add	r3, pc, #112	; (adr r3, 8001968 <main+0x2b0>)
 80018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fc:	f7fe ffae 	bl	800085c <__aeabi_ddiv>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f976 	bl	8000bf8 <__aeabi_d2f>
 800190c:	4603      	mov	r3, r0
 800190e:	4a31      	ldr	r2, [pc, #196]	; (80019d4 <main+0x31c>)
 8001910:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PlaceTray.hole_x[HoleSequence]*10; //X-Axis Target Position Place Tray
 8001912:	4b2e      	ldr	r3, [pc, #184]	; (80019cc <main+0x314>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a31      	ldr	r2, [pc, #196]	; (80019dc <main+0x324>)
 8001918:	3304      	adds	r3, #4
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	edd3 7a00 	vldr	s15, [r3]
 8001922:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800192a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800192e:	ee17 3a90 	vmov	r3, s15
 8001932:	b29a      	uxth	r2, r3
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <main+0x2c4>)
 8001936:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <main+0x2c4>)
 800193c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001940:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 3;
 8001944:	4b0d      	ldr	r3, [pc, #52]	; (800197c <main+0x2c4>)
 8001946:	2203      	movs	r2, #3
 8001948:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  registerFrame[64].U16 = 2; //X Moving Status: Run
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <main+0x2c4>)
 800194e:	2202      	movs	r2, #2
 8001950:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  Trajectstate = 0;
 8001954:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <main+0x320>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
		  scheduler = 3;
 800195a:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <main+0x310>)
 800195c:	2203      	movs	r2, #3
 800195e:	601a      	str	r2, [r3, #0]
		  break;
 8001960:	e129      	b.n	8001bb6 <main+0x4fe>
 8001962:	bf00      	nop
 8001964:	f3af 8000 	nop.w
 8001968:	70a3d70a 	.word	0x70a3d70a
 800196c:	3fa70a3d 	.word	0x3fa70a3d
 8001970:	20000adc 	.word	0x20000adc
 8001974:	20000860 	.word	0x20000860
 8001978:	20000738 	.word	0x20000738
 800197c:	20000fb4 	.word	0x20000fb4
 8001980:	200005d0 	.word	0x200005d0
 8001984:	2000051c 	.word	0x2000051c
 8001988:	20000684 	.word	0x20000684
 800198c:	20000208 	.word	0x20000208
 8001990:	40020400 	.word	0x40020400
 8001994:	20000204 	.word	0x20000204
 8001998:	20000ac4 	.word	0x20000ac4
 800199c:	20000420 	.word	0x20000420
 80019a0:	20000ad4 	.word	0x20000ad4
 80019a4:	20000ad0 	.word	0x20000ad0
 80019a8:	20001090 	.word	0x20001090
 80019ac:	200007ec 	.word	0x200007ec
 80019b0:	20001094 	.word	0x20001094
 80019b4:	20000980 	.word	0x20000980
 80019b8:	2000098c 	.word	0x2000098c
 80019bc:	200009ac 	.word	0x200009ac
 80019c0:	08010130 	.word	0x08010130
 80019c4:	20001040 	.word	0x20001040
 80019c8:	20000934 	.word	0x20000934
 80019cc:	20000938 	.word	0x20000938
 80019d0:	200009b8 	.word	0x200009b8
 80019d4:	20000948 	.word	0x20000948
 80019d8:	20000940 	.word	0x20000940
 80019dc:	20000a1c 	.word	0x20000a1c

	  //Trajectory
	  case 3:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 80019e0:	4b75      	ldr	r3, [pc, #468]	; (8001bb8 <main+0x500>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	b21a      	sxth	r2, r3
 80019e8:	4b74      	ldr	r3, [pc, #464]	; (8001bbc <main+0x504>)
 80019ea:	801a      	strh	r2, [r3, #0]
		  static uint32_t timestamp0 = 0;
		  if(HAL_GetTick() > timestamp0)
 80019ec:	f002 ffaa 	bl	8004944 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	4b73      	ldr	r3, [pc, #460]	; (8001bc0 <main+0x508>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d909      	bls.n	8001a0e <main+0x356>
		  {
			  timestamp0 = HAL_GetTick() + 1;
 80019fa:	f002 ffa3 	bl	8004944 <HAL_GetTick>
 80019fe:	4603      	mov	r3, r0
 8001a00:	3301      	adds	r3, #1
 8001a02:	4a6f      	ldr	r2, [pc, #444]	; (8001bc0 <main+0x508>)
 8001a04:	6013      	str	r3, [r2, #0]
			  VelocityApprox();
 8001a06:	f000 fcbf 	bl	8002388 <VelocityApprox>
			  AccelerationApprox();
 8001a0a:	f000 fceb 	bl	80023e4 <AccelerationApprox>
//			  TrajectoryGenerator();
//		  }

		  //PWM & Motor drive & PID
		  static uint32_t timestamp2 = 0;
		  if (HAL_GetTick()>= timestamp2)
 8001a0e:	f002 ff99 	bl	8004944 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	4b6b      	ldr	r3, [pc, #428]	; (8001bc4 <main+0x50c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d33b      	bcc.n	8001a94 <main+0x3dc>
		  {
			  timestamp2 = HAL_GetTick() + 1;
 8001a1c:	f002 ff92 	bl	8004944 <HAL_GetTick>
 8001a20:	4603      	mov	r3, r0
 8001a22:	3301      	adds	r3, #1
 8001a24:	4a67      	ldr	r2, [pc, #412]	; (8001bc4 <main+0x50c>)
 8001a26:	6013      	str	r3, [r2, #0]
			  duty = PIDcal();
 8001a28:	f000 fd5a 	bl	80024e0 <PIDcal>
 8001a2c:	eef0 7a40 	vmov.f32	s15, s0
 8001a30:	4b65      	ldr	r3, [pc, #404]	; (8001bc8 <main+0x510>)
 8001a32:	edc3 7a00 	vstr	s15, [r3]
			  if (duty >= 0)
 8001a36:	4b64      	ldr	r3, [pc, #400]	; (8001bc8 <main+0x510>)
 8001a38:	edd3 7a00 	vldr	s15, [r3]
 8001a3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a44:	db0e      	blt.n	8001a64 <main+0x3ac>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001a46:	4b61      	ldr	r3, [pc, #388]	; (8001bcc <main+0x514>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 8001a4e:	4b5e      	ldr	r3, [pc, #376]	; (8001bc8 <main+0x510>)
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	4b5d      	ldr	r3, [pc, #372]	; (8001bcc <main+0x514>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a5c:	ee17 2a90 	vmov	r2, s15
 8001a60:	635a      	str	r2, [r3, #52]	; 0x34
 8001a62:	e017      	b.n	8001a94 <main+0x3dc>
			  }
			  else if (duty < 0)
 8001a64:	4b58      	ldr	r3, [pc, #352]	; (8001bc8 <main+0x510>)
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a72:	d50f      	bpl.n	8001a94 <main+0x3dc>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001a74:	4b55      	ldr	r3, [pc, #340]	; (8001bcc <main+0x514>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
 8001a7c:	4b52      	ldr	r3, [pc, #328]	; (8001bc8 <main+0x510>)
 8001a7e:	edd3 7a00 	vldr	s15, [r3]
 8001a82:	eef1 7a67 	vneg.f32	s15, s15
 8001a86:	4b51      	ldr	r3, [pc, #324]	; (8001bcc <main+0x514>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a8e:	ee17 2a90 	vmov	r2, s15
 8001a92:	639a      	str	r2, [r3, #56]	; 0x38
			  }
		  }

		  // Check Final Position
		  if(position >= qf - 20 && position <= qf + 20 && registerFrame[64].U16 == 0) //4
 8001a94:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <main+0x504>)
 8001a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa2:	4b4b      	ldr	r3, [pc, #300]	; (8001bd0 <main+0x518>)
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001aac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001ab0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab8:	db25      	blt.n	8001b06 <main+0x44e>
 8001aba:	4b40      	ldr	r3, [pc, #256]	; (8001bbc <main+0x504>)
 8001abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac8:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <main+0x518>)
 8001aca:	edd3 7a00 	vldr	s15, [r3]
 8001ace:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ad6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ade:	d812      	bhi.n	8001b06 <main+0x44e>
 8001ae0:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <main+0x51c>)
 8001ae2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10d      	bne.n	8001b06 <main+0x44e>
		  {
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001aea:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <main+0x514>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2200      	movs	r2, #0
 8001af0:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001af2:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <main+0x514>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	639a      	str	r2, [r3, #56]	; 0x38
			  Trajectstate = 3;
 8001afa:	4b37      	ldr	r3, [pc, #220]	; (8001bd8 <main+0x520>)
 8001afc:	2203      	movs	r2, #3
 8001afe:	601a      	str	r2, [r3, #0]
			  // End Effector
			  scheduler = 4;
 8001b00:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <main+0x524>)
 8001b02:	2204      	movs	r2, #4
 8001b04:	601a      	str	r2, [r3, #0]
		  }

		  // Reset Button
		  if (ResetButton.flag == 1)
 8001b06:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <main+0x528>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d150      	bne.n	8001bb0 <main+0x4f8>
		  {
			  ResetButton.flag = 0;
 8001b0e:	4b34      	ldr	r3, [pc, #208]	; (8001be0 <main+0x528>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
			  scheduler = 0;
 8001b14:	4b31      	ldr	r3, [pc, #196]	; (8001bdc <main+0x524>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8001b1a:	e049      	b.n	8001bb0 <main+0x4f8>

	  //Proximity
	  case 4 :
		  if (HoleSequence == 9)
 8001b1c:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <main+0x52c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b09      	cmp	r3, #9
 8001b22:	d103      	bne.n	8001b2c <main+0x474>
		  {
			  scheduler = 0;
 8001b24:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <main+0x524>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e033      	b.n	8001b94 <main+0x4dc>
		  }
		  else if (HoleSequence < 9)
 8001b2c:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <main+0x52c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	dc2f      	bgt.n	8001b94 <main+0x4dc>
		  {
			  if (TaskType == 1)
 8001b34:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <main+0x530>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d111      	bne.n	8001b60 <main+0x4a8>
			  {
				  EndEffectorState = 4;			//Pick
 8001b3c:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <main+0x534>)
 8001b3e:	2204      	movs	r2, #4
 8001b40:	601a      	str	r2, [r3, #0]
				  EndEffectorWriteFlag = 1;
 8001b42:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <main+0x538>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
//				  EndEffectorWrite();
				  TaskType = -1; ////// TestYesterday
 8001b48:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <main+0x530>)
 8001b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4e:	601a      	str	r2, [r3, #0]
				  HAL_Delay(2000); ////// TestYesterday
 8001b50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b54:	f002 ff02 	bl	800495c <HAL_Delay>
				  scheduler = 2; ////// TestYesterday
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <main+0x524>)
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	e019      	b.n	8001b94 <main+0x4dc>
			  }
			  else if (TaskType == -1)
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <main+0x530>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b68:	d114      	bne.n	8001b94 <main+0x4dc>
			  {
				  EndEffectorState = 5;			//Place
 8001b6a:	4b20      	ldr	r3, [pc, #128]	; (8001bec <main+0x534>)
 8001b6c:	2205      	movs	r2, #5
 8001b6e:	601a      	str	r2, [r3, #0]
				  EndEffectorWriteFlag = 1;
 8001b70:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <main+0x538>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	701a      	strb	r2, [r3, #0]
//				  EndEffectorWrite();
				  TaskType = 1; ////// TestYesterday
 8001b76:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <main+0x530>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
				  HoleSequence += 1; ////// TestYesterday
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <main+0x52c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	4a18      	ldr	r2, [pc, #96]	; (8001be4 <main+0x52c>)
 8001b84:	6013      	str	r3, [r2, #0]
				  HAL_Delay(2000); ////// TestYesterday
 8001b86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b8a:	f002 fee7 	bl	800495c <HAL_Delay>
				  scheduler = 1; ////// TestYesterday
 8001b8e:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <main+0x524>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
			  }
		  }
		  if (ResetButton.flag == 1)
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <main+0x528>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d10b      	bne.n	8001bb4 <main+0x4fc>
			  {
				  ResetButton.flag = 0;
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <main+0x528>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
				  scheduler = 0;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <main+0x524>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
			  }

		  break;
 8001ba8:	e004      	b.n	8001bb4 <main+0x4fc>

	  //Emergency
	  case 5:
		  Homing();
 8001baa:	f000 fbad 	bl	8002308 <Homing>
		  break;
 8001bae:	e002      	b.n	8001bb6 <main+0x4fe>
		  break;
 8001bb0:	bf00      	nop
 8001bb2:	e5dd      	b.n	8001770 <main+0xb8>
		  break;
 8001bb4:	bf00      	nop
  {
 8001bb6:	e5db      	b.n	8001770 <main+0xb8>
 8001bb8:	200005d0 	.word	0x200005d0
 8001bbc:	20000980 	.word	0x20000980
 8001bc0:	20001098 	.word	0x20001098
 8001bc4:	2000109c 	.word	0x2000109c
 8001bc8:	2000093c 	.word	0x2000093c
 8001bcc:	2000051c 	.word	0x2000051c
 8001bd0:	20000948 	.word	0x20000948
 8001bd4:	20000fb4 	.word	0x20000fb4
 8001bd8:	20000940 	.word	0x20000940
 8001bdc:	20000934 	.word	0x20000934
 8001be0:	20000a94 	.word	0x20000a94
 8001be4:	20000938 	.word	0x20000938
 8001be8:	20000200 	.word	0x20000200
 8001bec:	20000ad4 	.word	0x20000ad4
 8001bf0:	20000ad0 	.word	0x20000ad0

08001bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b094      	sub	sp, #80	; 0x50
 8001bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfa:	f107 0320 	add.w	r3, r7, #32
 8001bfe:	2230      	movs	r2, #48	; 0x30
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f009 fcd2 	bl	800b5ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <SystemClock_Config+0xc8>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	4a26      	ldr	r2, [pc, #152]	; (8001cbc <SystemClock_Config+0xc8>)
 8001c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c26:	6413      	str	r3, [r2, #64]	; 0x40
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <SystemClock_Config+0xc8>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <SystemClock_Config+0xcc>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a20      	ldr	r2, [pc, #128]	; (8001cc0 <SystemClock_Config+0xcc>)
 8001c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <SystemClock_Config+0xcc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c50:	2302      	movs	r3, #2
 8001c52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c54:	2301      	movs	r3, #1
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c58:	2310      	movs	r3, #16
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c60:	2300      	movs	r3, #0
 8001c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c64:	2308      	movs	r3, #8
 8001c66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001c68:	2364      	movs	r3, #100	; 0x64
 8001c6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c70:	2304      	movs	r3, #4
 8001c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c74:	f107 0320 	add.w	r3, r7, #32
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f005 ff99 	bl	8007bb0 <HAL_RCC_OscConfig>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c84:	f002 f9a0 	bl	8003fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c88:	230f      	movs	r3, #15
 8001c8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c9e:	f107 030c 	add.w	r3, r7, #12
 8001ca2:	2103      	movs	r1, #3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f006 f9fb 	bl	80080a0 <HAL_RCC_ClockConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001cb0:	f002 f98a 	bl	8003fc8 <Error_Handler>
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3750      	adds	r7, #80	; 0x50
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40007000 	.word	0x40007000

08001cc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cca:	463b      	mov	r3, r7
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001cd6:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <MX_ADC1_Init+0xb4>)
 8001cd8:	4a28      	ldr	r2, [pc, #160]	; (8001d7c <MX_ADC1_Init+0xb8>)
 8001cda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cdc:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <MX_ADC1_Init+0xb4>)
 8001cde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ce2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <MX_ADC1_Init+0xb4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001cea:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <MX_ADC1_Init+0xb4>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001cf0:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <MX_ADC1_Init+0xb4>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <MX_ADC1_Init+0xb4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <MX_ADC1_Init+0xb4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <MX_ADC1_Init+0xb4>)
 8001d06:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <MX_ADC1_Init+0xbc>)
 8001d08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <MX_ADC1_Init+0xb4>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <MX_ADC1_Init+0xb4>)
 8001d12:	2202      	movs	r2, #2
 8001d14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <MX_ADC1_Init+0xb4>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d1e:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <MX_ADC1_Init+0xb4>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d24:	4814      	ldr	r0, [pc, #80]	; (8001d78 <MX_ADC1_Init+0xb4>)
 8001d26:	f002 fe3d 	bl	80049a4 <HAL_ADC_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d30:	f002 f94a 	bl	8003fc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d40:	463b      	mov	r3, r7
 8001d42:	4619      	mov	r1, r3
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <MX_ADC1_Init+0xb4>)
 8001d46:	f002 ff7f 	bl	8004c48 <HAL_ADC_ConfigChannel>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d50:	f002 f93a 	bl	8003fc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d54:	2301      	movs	r3, #1
 8001d56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4805      	ldr	r0, [pc, #20]	; (8001d78 <MX_ADC1_Init+0xb4>)
 8001d62:	f002 ff71 	bl	8004c48 <HAL_ADC_ConfigChannel>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001d6c:	f002 f92c 	bl	8003fc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000420 	.word	0x20000420
 8001d7c:	40012000 	.word	0x40012000
 8001d80:	0f000001 	.word	0x0f000001

08001d84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <MX_I2C1_Init+0x50>)
 8001d8a:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <MX_I2C1_Init+0x54>)
 8001d8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <MX_I2C1_Init+0x50>)
 8001d90:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <MX_I2C1_Init+0x58>)
 8001d92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <MX_I2C1_Init+0x50>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <MX_I2C1_Init+0x50>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <MX_I2C1_Init+0x50>)
 8001da2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001da6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <MX_I2C1_Init+0x50>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <MX_I2C1_Init+0x50>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001db4:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <MX_I2C1_Init+0x50>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <MX_I2C1_Init+0x50>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dc0:	4804      	ldr	r0, [pc, #16]	; (8001dd4 <MX_I2C1_Init+0x50>)
 8001dc2:	f004 f8d5 	bl	8005f70 <HAL_I2C_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dcc:	f002 f8fc 	bl	8003fc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	200004c8 	.word	0x200004c8
 8001dd8:	40005400 	.word	0x40005400
 8001ddc:	000186a0 	.word	0x000186a0

08001de0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b092      	sub	sp, #72	; 0x48
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
 8001e00:	615a      	str	r2, [r3, #20]
 8001e02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	2220      	movs	r2, #32
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f009 fbce 	bl	800b5ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e10:	4b39      	ldr	r3, [pc, #228]	; (8001ef8 <MX_TIM1_Init+0x118>)
 8001e12:	4a3a      	ldr	r2, [pc, #232]	; (8001efc <MX_TIM1_Init+0x11c>)
 8001e14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e16:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <MX_TIM1_Init+0x118>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1c:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <MX_TIM1_Init+0x118>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8001e22:	4b35      	ldr	r3, [pc, #212]	; (8001ef8 <MX_TIM1_Init+0x118>)
 8001e24:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001e28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2a:	4b33      	ldr	r3, [pc, #204]	; (8001ef8 <MX_TIM1_Init+0x118>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e30:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <MX_TIM1_Init+0x118>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e36:	4b30      	ldr	r3, [pc, #192]	; (8001ef8 <MX_TIM1_Init+0x118>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e3c:	482e      	ldr	r0, [pc, #184]	; (8001ef8 <MX_TIM1_Init+0x118>)
 8001e3e:	f006 fccd 	bl	80087dc <HAL_TIM_PWM_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001e48:	f002 f8be 	bl	8003fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4827      	ldr	r0, [pc, #156]	; (8001ef8 <MX_TIM1_Init+0x118>)
 8001e5c:	f007 ffb0 	bl	8009dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001e66:	f002 f8af 	bl	8003fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e6a:	2360      	movs	r3, #96	; 0x60
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e76:	2300      	movs	r3, #0
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	481a      	ldr	r0, [pc, #104]	; (8001ef8 <MX_TIM1_Init+0x118>)
 8001e90:	f007 f944 	bl	800911c <HAL_TIM_PWM_ConfigChannel>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001e9a:	f002 f895 	bl	8003fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <MX_TIM1_Init+0x118>)
 8001ea8:	f007 f938 	bl	800911c <HAL_TIM_PWM_ConfigChannel>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001eb2:	f002 f889 	bl	8003fc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ece:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4807      	ldr	r0, [pc, #28]	; (8001ef8 <MX_TIM1_Init+0x118>)
 8001eda:	f007 ffdf 	bl	8009e9c <HAL_TIMEx_ConfigBreakDeadTime>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001ee4:	f002 f870 	bl	8003fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ee8:	4803      	ldr	r0, [pc, #12]	; (8001ef8 <MX_TIM1_Init+0x118>)
 8001eea:	f002 fa29 	bl	8004340 <HAL_TIM_MspPostInit>

}
 8001eee:	bf00      	nop
 8001ef0:	3748      	adds	r7, #72	; 0x48
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000051c 	.word	0x2000051c
 8001efc:	40010000 	.word	0x40010000

08001f00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08c      	sub	sp, #48	; 0x30
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	2224      	movs	r2, #36	; 0x24
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f009 fb4c 	bl	800b5ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f1c:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <MX_TIM3_Init+0xa0>)
 8001f1e:	4a21      	ldr	r2, [pc, #132]	; (8001fa4 <MX_TIM3_Init+0xa4>)
 8001f20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f22:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <MX_TIM3_Init+0xa0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f28:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <MX_TIM3_Init+0xa0>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD-1;
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <MX_TIM3_Init+0xa0>)
 8001f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f36:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <MX_TIM3_Init+0xa0>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3c:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <MX_TIM3_Init+0xa0>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f42:	2303      	movs	r3, #3
 8001f44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	480c      	ldr	r0, [pc, #48]	; (8001fa0 <MX_TIM3_Init+0xa0>)
 8001f6e:	f006 fe0f 	bl	8008b90 <HAL_TIM_Encoder_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f78:	f002 f826 	bl	8003fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	4619      	mov	r1, r3
 8001f88:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <MX_TIM3_Init+0xa0>)
 8001f8a:	f007 ff19 	bl	8009dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001f94:	f002 f818 	bl	8003fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	3730      	adds	r7, #48	; 0x30
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	200005d0 	.word	0x200005d0
 8001fa4:	40000400 	.word	0x40000400

08001fa8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fae:	463b      	mov	r3, r7
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <MX_TIM9_Init+0x6c>)
 8001fbc:	4a16      	ldr	r2, [pc, #88]	; (8002018 <MX_TIM9_Init+0x70>)
 8001fbe:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <MX_TIM9_Init+0x6c>)
 8001fc2:	2263      	movs	r2, #99	; 0x63
 8001fc4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <MX_TIM9_Init+0x6c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <MX_TIM9_Init+0x6c>)
 8001fce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fd2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <MX_TIM9_Init+0x6c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MX_TIM9_Init+0x6c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001fe0:	480c      	ldr	r0, [pc, #48]	; (8002014 <MX_TIM9_Init+0x6c>)
 8001fe2:	f006 fa7d 	bl	80084e0 <HAL_TIM_Base_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001fec:	f001 ffec 	bl	8003fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4806      	ldr	r0, [pc, #24]	; (8002014 <MX_TIM9_Init+0x6c>)
 8001ffc:	f007 f950 	bl	80092a0 <HAL_TIM_ConfigClockSource>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8002006:	f001 ffdf 	bl	8003fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000684 	.word	0x20000684
 8002018:	40014000 	.word	0x40014000

0800201c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
 8002030:	615a      	str	r2, [r3, #20]
 8002032:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002034:	4b21      	ldr	r3, [pc, #132]	; (80020bc <MX_TIM11_Init+0xa0>)
 8002036:	4a22      	ldr	r2, [pc, #136]	; (80020c0 <MX_TIM11_Init+0xa4>)
 8002038:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <MX_TIM11_Init+0xa0>)
 800203c:	2263      	movs	r2, #99	; 0x63
 800203e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002040:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <MX_TIM11_Init+0xa0>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <MX_TIM11_Init+0xa0>)
 8002048:	f240 72d5 	movw	r2, #2005	; 0x7d5
 800204c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204e:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <MX_TIM11_Init+0xa0>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <MX_TIM11_Init+0xa0>)
 8002056:	2200      	movs	r2, #0
 8002058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800205a:	4818      	ldr	r0, [pc, #96]	; (80020bc <MX_TIM11_Init+0xa0>)
 800205c:	f006 fa40 	bl	80084e0 <HAL_TIM_Base_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002066:	f001 ffaf 	bl	8003fc8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 800206a:	4814      	ldr	r0, [pc, #80]	; (80020bc <MX_TIM11_Init+0xa0>)
 800206c:	f006 fb50 	bl	8008710 <HAL_TIM_OC_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002076:	f001 ffa7 	bl	8003fc8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 800207a:	2108      	movs	r1, #8
 800207c:	480f      	ldr	r0, [pc, #60]	; (80020bc <MX_TIM11_Init+0xa0>)
 800207e:	f006 fcb9 	bl	80089f4 <HAL_TIM_OnePulse_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8002088:	f001 ff9e 	bl	8003fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800208c:	2310      	movs	r3, #16
 800208e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8002090:	f240 5399 	movw	r3, #1433	; 0x599
 8002094:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800209e:	1d3b      	adds	r3, r7, #4
 80020a0:	2200      	movs	r2, #0
 80020a2:	4619      	mov	r1, r3
 80020a4:	4805      	ldr	r0, [pc, #20]	; (80020bc <MX_TIM11_Init+0xa0>)
 80020a6:	f006 ffdd 	bl	8009064 <HAL_TIM_OC_ConfigChannel>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 80020b0:	f001 ff8a 	bl	8003fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80020b4:	bf00      	nop
 80020b6:	3720      	adds	r7, #32
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000738 	.word	0x20000738
 80020c0:	40014800 	.word	0x40014800

080020c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020c8:	4b11      	ldr	r3, [pc, #68]	; (8002110 <MX_USART1_UART_Init+0x4c>)
 80020ca:	4a12      	ldr	r2, [pc, #72]	; (8002114 <MX_USART1_UART_Init+0x50>)
 80020cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <MX_USART1_UART_Init+0x4c>)
 80020d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <MX_USART1_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <MX_USART1_UART_Init+0x4c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <MX_USART1_UART_Init+0x4c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020e8:	4b09      	ldr	r3, [pc, #36]	; (8002110 <MX_USART1_UART_Init+0x4c>)
 80020ea:	220c      	movs	r2, #12
 80020ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <MX_USART1_UART_Init+0x4c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <MX_USART1_UART_Init+0x4c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020fa:	4805      	ldr	r0, [pc, #20]	; (8002110 <MX_USART1_UART_Init+0x4c>)
 80020fc:	f007 ff3e 	bl	8009f7c <HAL_UART_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002106:	f001 ff5f 	bl	8003fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200007ec 	.word	0x200007ec
 8002114:	40011000 	.word	0x40011000

08002118 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <MX_USART2_UART_Init+0x50>)
 800211e:	4a13      	ldr	r2, [pc, #76]	; (800216c <MX_USART2_UART_Init+0x54>)
 8002120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <MX_USART2_UART_Init+0x50>)
 8002124:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <MX_USART2_UART_Init+0x50>)
 800212c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002130:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <MX_USART2_UART_Init+0x50>)
 8002134:	2200      	movs	r2, #0
 8002136:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <MX_USART2_UART_Init+0x50>)
 800213a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800213e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <MX_USART2_UART_Init+0x50>)
 8002142:	220c      	movs	r2, #12
 8002144:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <MX_USART2_UART_Init+0x50>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <MX_USART2_UART_Init+0x50>)
 800214e:	2200      	movs	r2, #0
 8002150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002152:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_USART2_UART_Init+0x50>)
 8002154:	f007 ff12 	bl	8009f7c <HAL_UART_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800215e:	f001 ff33 	bl	8003fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000860 	.word	0x20000860
 800216c:	40004400 	.word	0x40004400

08002170 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <MX_DMA_Init+0x68>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a16      	ldr	r2, [pc, #88]	; (80021d8 <MX_DMA_Init+0x68>)
 8002180:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <MX_DMA_Init+0x68>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <MX_DMA_Init+0x68>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a0f      	ldr	r2, [pc, #60]	; (80021d8 <MX_DMA_Init+0x68>)
 800219c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <MX_DMA_Init+0x68>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2100      	movs	r1, #0
 80021b2:	2011      	movs	r0, #17
 80021b4:	f003 f8d3 	bl	800535e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80021b8:	2011      	movs	r0, #17
 80021ba:	f003 f8ec 	bl	8005396 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	2038      	movs	r0, #56	; 0x38
 80021c4:	f003 f8cb 	bl	800535e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021c8:	2038      	movs	r0, #56	; 0x38
 80021ca:	f003 f8e4 	bl	8005396 <HAL_NVIC_EnableIRQ>

}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800

080021dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]
 80021f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	4b40      	ldr	r3, [pc, #256]	; (80022f8 <MX_GPIO_Init+0x11c>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a3f      	ldr	r2, [pc, #252]	; (80022f8 <MX_GPIO_Init+0x11c>)
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b3d      	ldr	r3, [pc, #244]	; (80022f8 <MX_GPIO_Init+0x11c>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	4b39      	ldr	r3, [pc, #228]	; (80022f8 <MX_GPIO_Init+0x11c>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a38      	ldr	r2, [pc, #224]	; (80022f8 <MX_GPIO_Init+0x11c>)
 8002218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <MX_GPIO_Init+0x11c>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	4b32      	ldr	r3, [pc, #200]	; (80022f8 <MX_GPIO_Init+0x11c>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a31      	ldr	r2, [pc, #196]	; (80022f8 <MX_GPIO_Init+0x11c>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b2f      	ldr	r3, [pc, #188]	; (80022f8 <MX_GPIO_Init+0x11c>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <MX_GPIO_Init+0x11c>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a2a      	ldr	r2, [pc, #168]	; (80022f8 <MX_GPIO_Init+0x11c>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <MX_GPIO_Init+0x11c>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8002268:	4824      	ldr	r0, [pc, #144]	; (80022fc <MX_GPIO_Init+0x120>)
 800226a:	f003 fe67 	bl	8005f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800226e:	2302      	movs	r3, #2
 8002270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002276:	2301      	movs	r3, #1
 8002278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	4619      	mov	r1, r3
 8002280:	481f      	ldr	r0, [pc, #124]	; (8002300 <MX_GPIO_Init+0x124>)
 8002282:	f003 fcbf 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002286:	230c      	movs	r3, #12
 8002288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800228a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800228e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002290:	2301      	movs	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4619      	mov	r1, r3
 800229a:	4819      	ldr	r0, [pc, #100]	; (8002300 <MX_GPIO_Init+0x124>)
 800229c:	f003 fcb2 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80022a0:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80022a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	4813      	ldr	r0, [pc, #76]	; (8002304 <MX_GPIO_Init+0x128>)
 80022b6:	f003 fca5 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 80022ba:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80022be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c0:	2301      	movs	r3, #1
 80022c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	4619      	mov	r1, r3
 80022d2:	480a      	ldr	r0, [pc, #40]	; (80022fc <MX_GPIO_Init+0x120>)
 80022d4:	f003 fc96 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022d8:	2360      	movs	r3, #96	; 0x60
 80022da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022dc:	2300      	movs	r3, #0
 80022de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	4619      	mov	r1, r3
 80022ea:	4804      	ldr	r0, [pc, #16]	; (80022fc <MX_GPIO_Init+0x120>)
 80022ec:	f003 fc8a 	bl	8005c04 <HAL_GPIO_Init>

}
 80022f0:	bf00      	nop
 80022f2:	3728      	adds	r7, #40	; 0x28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020400 	.word	0x40020400
 8002300:	40020800 	.word	0x40020800
 8002304:	40020000 	.word	0x40020000

08002308 <Homing>:
		Proximity = 2;
	}
}

void Homing()
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
	if (Proximity == 1)
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <Homing+0x6c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d108      	bne.n	8002326 <Homing+0x1e>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002314:	4b18      	ldr	r3, [pc, #96]	; (8002378 <Homing+0x70>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2200      	movs	r2, #0
 800231a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800231c:	4b16      	ldr	r3, [pc, #88]	; (8002378 <Homing+0x70>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2200      	movs	r2, #0
 8002322:	635a      	str	r2, [r3, #52]	; 0x34
 8002324:	e00b      	b.n	800233e <Homing+0x36>
	}

	else if (Proximity == 2)
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <Homing+0x6c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d107      	bne.n	800233e <Homing+0x36>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800232e:	4b12      	ldr	r3, [pc, #72]	; (8002378 <Homing+0x70>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2200      	movs	r2, #0
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <Homing+0x70>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2200      	movs	r2, #0
 800233c:	635a      	str	r2, [r3, #52]	; 0x34
	}

	//Proximity Home
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 1)
 800233e:	2102      	movs	r1, #2
 8002340:	480e      	ldr	r0, [pc, #56]	; (800237c <Homing+0x74>)
 8002342:	f003 fde3 	bl	8005f0c <HAL_GPIO_ReadPin>
 8002346:	4603      	mov	r3, r0
 8002348:	2b01      	cmp	r3, #1
 800234a:	d110      	bne.n	800236e <Homing+0x66>
	{
		Proximity = 0;
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <Homing+0x6c>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <Homing+0x70>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2200      	movs	r2, #0
 8002358:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <Homing+0x70>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2200      	movs	r2, #0
 8002360:	635a      	str	r2, [r3, #52]	; 0x34
		JoySpeed = 0;
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <Homing+0x78>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
		scheduler = 0;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <Homing+0x7c>)
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
	}
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000ad8 	.word	0x20000ad8
 8002378:	2000051c 	.word	0x2000051c
 800237c:	40020800 	.word	0x40020800
 8002380:	20000acc 	.word	0x20000acc
 8002384:	20000934 	.word	0x20000934

08002388 <VelocityApprox>:
		break;
	}
}

void VelocityApprox()
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	static int16_t lastposition = 0;
	velocity = (position - lastposition)/0.001; //pulse/s
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <VelocityApprox+0x50>)
 800238e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002392:	461a      	mov	r2, r3
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <VelocityApprox+0x54>)
 8002396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe f8c9 	bl	8000534 <__aeabi_i2d>
 80023a2:	a30b      	add	r3, pc, #44	; (adr r3, 80023d0 <VelocityApprox+0x48>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fe fa58 	bl	800085c <__aeabi_ddiv>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	f7fe fc20 	bl	8000bf8 <__aeabi_d2f>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <VelocityApprox+0x58>)
 80023bc:	6013      	str	r3, [r2, #0]
	lastposition = position;
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <VelocityApprox+0x50>)
 80023c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <VelocityApprox+0x54>)
 80023c6:	801a      	strh	r2, [r3, #0]
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	f3af 8000 	nop.w
 80023d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80023d4:	3f50624d 	.word	0x3f50624d
 80023d8:	20000980 	.word	0x20000980
 80023dc:	200010a0 	.word	0x200010a0
 80023e0:	200009a4 	.word	0x200009a4

080023e4 <AccelerationApprox>:

void AccelerationApprox()
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
	static float LastVelo = 0;
	Accel = (velocity - LastVelo);	//pulse/s^2
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <AccelerationApprox+0x2c>)
 80023ea:	ed93 7a00 	vldr	s14, [r3]
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <AccelerationApprox+0x30>)
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <AccelerationApprox+0x34>)
 80023fa:	edc3 7a00 	vstr	s15, [r3]
	LastVelo = velocity;
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <AccelerationApprox+0x2c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a04      	ldr	r2, [pc, #16]	; (8002414 <AccelerationApprox+0x30>)
 8002404:	6013      	str	r3, [r2, #0]

}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	200009a4 	.word	0x200009a4
 8002414:	200010a4 	.word	0x200010a4
 8002418:	200009a8 	.word	0x200009a8
 800241c:	00000000 	.word	0x00000000

08002420 <Routine>:

void Routine()
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	position_f = position;
 8002424:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <Routine+0xa8>)
 8002426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800242a:	ee07 3a90 	vmov	s15, r3
 800242e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002432:	4b26      	ldr	r3, [pc, #152]	; (80024cc <Routine+0xac>)
 8002434:	edc3 7a00 	vstr	s15, [r3]
	Yactualposition = position_f*0.45;			//mm*10
 8002438:	4b24      	ldr	r3, [pc, #144]	; (80024cc <Routine+0xac>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe f88b 	bl	8000558 <__aeabi_f2d>
 8002442:	a31f      	add	r3, pc, #124	; (adr r3, 80024c0 <Routine+0xa0>)
 8002444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002448:	f7fe f8de 	bl	8000608 <__aeabi_dmul>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4610      	mov	r0, r2
 8002452:	4619      	mov	r1, r3
 8002454:	f7fe fb88 	bl	8000b68 <__aeabi_d2iz>
 8002458:	4603      	mov	r3, r0
 800245a:	b21a      	sxth	r2, r3
 800245c:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <Routine+0xb0>)
 800245e:	801a      	strh	r2, [r3, #0]
	registerFrame[17].U16 = Yactualposition;	//mm*10			//Y Actual Position
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <Routine+0xb0>)
 8002462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002466:	b29a      	uxth	r2, r3
 8002468:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <Routine+0xb4>)
 800246a:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[18].U16 = velocity*0.45;		//mm/s*10		//Y Actual Speed
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <Routine+0xb8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe f871 	bl	8000558 <__aeabi_f2d>
 8002476:	a312      	add	r3, pc, #72	; (adr r3, 80024c0 <Routine+0xa0>)
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	f7fe f8c4 	bl	8000608 <__aeabi_dmul>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	f7fe fb96 	bl	8000bb8 <__aeabi_d2uiz>
 800248c:	4603      	mov	r3, r0
 800248e:	b29a      	uxth	r2, r3
 8002490:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <Routine+0xb4>)
 8002492:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[19].U16 = Accel*0.45; 		//mm/s^2*10		//Y Actual Acceleration
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <Routine+0xbc>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe f85d 	bl	8000558 <__aeabi_f2d>
 800249e:	a308      	add	r3, pc, #32	; (adr r3, 80024c0 <Routine+0xa0>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fe f8b0 	bl	8000608 <__aeabi_dmul>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7fe fb82 	bl	8000bb8 <__aeabi_d2uiz>
 80024b4:	4603      	mov	r3, r0
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <Routine+0xb4>)
 80024ba:	84da      	strh	r2, [r3, #38]	; 0x26
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	cccccccd 	.word	0xcccccccd
 80024c4:	3fdccccc 	.word	0x3fdccccc
 80024c8:	20000980 	.word	0x20000980
 80024cc:	20000984 	.word	0x20000984
 80024d0:	20000988 	.word	0x20000988
 80024d4:	20000fb4 	.word	0x20000fb4
 80024d8:	200009a4 	.word	0x200009a4
 80024dc:	200009a8 	.word	0x200009a8

080024e0 <PIDcal>:

float PIDcal()
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
	//position control
	errorposition = setposition - position;
 80024e4:	4b28      	ldr	r3, [pc, #160]	; (8002588 <PIDcal+0xa8>)
 80024e6:	ed93 7a00 	vldr	s14, [r3]
 80024ea:	4b28      	ldr	r3, [pc, #160]	; (800258c <PIDcal+0xac>)
 80024ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024fc:	4b24      	ldr	r3, [pc, #144]	; (8002590 <PIDcal+0xb0>)
 80024fe:	edc3 7a00 	vstr	s15, [r3]

	integral_p = integral_p + errorposition;
 8002502:	4b24      	ldr	r3, [pc, #144]	; (8002594 <PIDcal+0xb4>)
 8002504:	ed93 7a00 	vldr	s14, [r3]
 8002508:	4b21      	ldr	r3, [pc, #132]	; (8002590 <PIDcal+0xb0>)
 800250a:	edd3 7a00 	vldr	s15, [r3]
 800250e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <PIDcal+0xb4>)
 8002514:	edc3 7a00 	vstr	s15, [r3]
	derivative_p = errorposition - pre_errorposition;
 8002518:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <PIDcal+0xb0>)
 800251a:	ed93 7a00 	vldr	s14, [r3]
 800251e:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <PIDcal+0xb8>)
 8002520:	edd3 7a00 	vldr	s15, [r3]
 8002524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002528:	4b1c      	ldr	r3, [pc, #112]	; (800259c <PIDcal+0xbc>)
 800252a:	edc3 7a00 	vstr	s15, [r3]
	u_position = Kp_p*errorposition + Ki_p*integral_p + Kd_p*derivative_p;
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <PIDcal+0xc0>)
 8002530:	ed93 7a00 	vldr	s14, [r3]
 8002534:	4b16      	ldr	r3, [pc, #88]	; (8002590 <PIDcal+0xb0>)
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800253e:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <PIDcal+0xc4>)
 8002540:	edd3 6a00 	vldr	s13, [r3]
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <PIDcal+0xb4>)
 8002546:	edd3 7a00 	vldr	s15, [r3]
 800254a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800254e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <PIDcal+0xc8>)
 8002554:	edd3 6a00 	vldr	s13, [r3]
 8002558:	4b10      	ldr	r3, [pc, #64]	; (800259c <PIDcal+0xbc>)
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <PIDcal+0xcc>)
 8002568:	edc3 7a00 	vstr	s15, [r3]

	pre_errorposition = errorposition;
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <PIDcal+0xb0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a09      	ldr	r2, [pc, #36]	; (8002598 <PIDcal+0xb8>)
 8002572:	6013      	str	r3, [r2, #0]
//	duty = Kp_v*errorvelocity + Ki_v*integral_v + Kd_v*derivative_v;
//
//	pre_errorvelocity = errorvelocity;

//	return duty;
	return u_position;
 8002574:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <PIDcal+0xcc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	ee07 3a90 	vmov	s15, r3
}
 800257c:	eeb0 0a67 	vmov.f32	s0, s15
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	2000098c 	.word	0x2000098c
 800258c:	20000980 	.word	0x20000980
 8002590:	20000990 	.word	0x20000990
 8002594:	2000099c 	.word	0x2000099c
 8002598:	20000998 	.word	0x20000998
 800259c:	200009a0 	.word	0x200009a0
 80025a0:	20000214 	.word	0x20000214
 80025a4:	20000218 	.word	0x20000218
 80025a8:	200009b4 	.word	0x200009b4
 80025ac:	20000994 	.word	0x20000994

080025b0 <JoystickPinUpdate>:

void JoystickPinUpdate()
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
	  GetPositionButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 80025b4:	2140      	movs	r1, #64	; 0x40
 80025b6:	4845      	ldr	r0, [pc, #276]	; (80026cc <JoystickPinUpdate+0x11c>)
 80025b8:	f003 fca8 	bl	8005f0c <HAL_GPIO_ReadPin>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	4b43      	ldr	r3, [pc, #268]	; (80026d0 <JoystickPinUpdate+0x120>)
 80025c2:	605a      	str	r2, [r3, #4]
	  if (GetPositionButton.last == 1 && GetPositionButton.current == 0)
 80025c4:	4b42      	ldr	r3, [pc, #264]	; (80026d0 <JoystickPinUpdate+0x120>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d107      	bne.n	80025dc <JoystickPinUpdate+0x2c>
 80025cc:	4b40      	ldr	r3, [pc, #256]	; (80026d0 <JoystickPinUpdate+0x120>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d103      	bne.n	80025dc <JoystickPinUpdate+0x2c>
	  {
		  GetPositionButton.flag = 1;
 80025d4:	4b3e      	ldr	r3, [pc, #248]	; (80026d0 <JoystickPinUpdate+0x120>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	e002      	b.n	80025e2 <JoystickPinUpdate+0x32>
	  }
	  else
	  {
		  GetPositionButton.flag = 0;
 80025dc:	4b3c      	ldr	r3, [pc, #240]	; (80026d0 <JoystickPinUpdate+0x120>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
	  }
	  GetPositionButton.last = GetPositionButton.current;
 80025e2:	4b3b      	ldr	r3, [pc, #236]	; (80026d0 <JoystickPinUpdate+0x120>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4a3a      	ldr	r2, [pc, #232]	; (80026d0 <JoystickPinUpdate+0x120>)
 80025e8:	6013      	str	r3, [r2, #0]

	  ResetButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80025ea:	2120      	movs	r1, #32
 80025ec:	4839      	ldr	r0, [pc, #228]	; (80026d4 <JoystickPinUpdate+0x124>)
 80025ee:	f003 fc8d 	bl	8005f0c <HAL_GPIO_ReadPin>
 80025f2:	4603      	mov	r3, r0
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b38      	ldr	r3, [pc, #224]	; (80026d8 <JoystickPinUpdate+0x128>)
 80025f8:	605a      	str	r2, [r3, #4]
	  if (ResetButton.last == 1 && ResetButton.current == 0)
 80025fa:	4b37      	ldr	r3, [pc, #220]	; (80026d8 <JoystickPinUpdate+0x128>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d107      	bne.n	8002612 <JoystickPinUpdate+0x62>
 8002602:	4b35      	ldr	r3, [pc, #212]	; (80026d8 <JoystickPinUpdate+0x128>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d103      	bne.n	8002612 <JoystickPinUpdate+0x62>
	  {
		ResetButton.flag = 1;
 800260a:	4b33      	ldr	r3, [pc, #204]	; (80026d8 <JoystickPinUpdate+0x128>)
 800260c:	2201      	movs	r2, #1
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	e002      	b.n	8002618 <JoystickPinUpdate+0x68>
	  }
	  else
	  {
		  ResetButton.flag = 0;
 8002612:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <JoystickPinUpdate+0x128>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
	  }
	  ResetButton.last = ResetButton.current;
 8002618:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <JoystickPinUpdate+0x128>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a2e      	ldr	r2, [pc, #184]	; (80026d8 <JoystickPinUpdate+0x128>)
 800261e:	6013      	str	r3, [r2, #0]

	  FineButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8002620:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002624:	482b      	ldr	r0, [pc, #172]	; (80026d4 <JoystickPinUpdate+0x124>)
 8002626:	f003 fc71 	bl	8005f0c <HAL_GPIO_ReadPin>
 800262a:	4603      	mov	r3, r0
 800262c:	461a      	mov	r2, r3
 800262e:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <JoystickPinUpdate+0x12c>)
 8002630:	605a      	str	r2, [r3, #4]
	  if (FineButton.last == 1 && FineButton.current == 0)
 8002632:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <JoystickPinUpdate+0x12c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d107      	bne.n	800264a <JoystickPinUpdate+0x9a>
 800263a:	4b28      	ldr	r3, [pc, #160]	; (80026dc <JoystickPinUpdate+0x12c>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d103      	bne.n	800264a <JoystickPinUpdate+0x9a>
	  {
		  FineButton.flag = 1;
 8002642:	4b26      	ldr	r3, [pc, #152]	; (80026dc <JoystickPinUpdate+0x12c>)
 8002644:	2201      	movs	r2, #1
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	e002      	b.n	8002650 <JoystickPinUpdate+0xa0>
	  }
	  else
	  {
		  FineButton.flag = 0;
 800264a:	4b24      	ldr	r3, [pc, #144]	; (80026dc <JoystickPinUpdate+0x12c>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
	  }
	  FineButton.last = FineButton.current;
 8002650:	4b22      	ldr	r3, [pc, #136]	; (80026dc <JoystickPinUpdate+0x12c>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4a21      	ldr	r2, [pc, #132]	; (80026dc <JoystickPinUpdate+0x12c>)
 8002656:	6013      	str	r3, [r2, #0]

	  RoughButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8002658:	2120      	movs	r1, #32
 800265a:	481c      	ldr	r0, [pc, #112]	; (80026cc <JoystickPinUpdate+0x11c>)
 800265c:	f003 fc56 	bl	8005f0c <HAL_GPIO_ReadPin>
 8002660:	4603      	mov	r3, r0
 8002662:	461a      	mov	r2, r3
 8002664:	4b1e      	ldr	r3, [pc, #120]	; (80026e0 <JoystickPinUpdate+0x130>)
 8002666:	605a      	str	r2, [r3, #4]
	  if (RoughButton.last == 1 && RoughButton.current == 0)
 8002668:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <JoystickPinUpdate+0x130>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d107      	bne.n	8002680 <JoystickPinUpdate+0xd0>
 8002670:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <JoystickPinUpdate+0x130>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d103      	bne.n	8002680 <JoystickPinUpdate+0xd0>
	  {
		  RoughButton.flag = 1;
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <JoystickPinUpdate+0x130>)
 800267a:	2201      	movs	r2, #1
 800267c:	609a      	str	r2, [r3, #8]
 800267e:	e002      	b.n	8002686 <JoystickPinUpdate+0xd6>
	  }
	  else
	  {
		  RoughButton.flag = 0;
 8002680:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <JoystickPinUpdate+0x130>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
	  }
	  RoughButton.last = RoughButton.current;
 8002686:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <JoystickPinUpdate+0x130>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a15      	ldr	r2, [pc, #84]	; (80026e0 <JoystickPinUpdate+0x130>)
 800268c:	6013      	str	r3, [r2, #0]

	  HomingButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 800268e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002692:	480e      	ldr	r0, [pc, #56]	; (80026cc <JoystickPinUpdate+0x11c>)
 8002694:	f003 fc3a 	bl	8005f0c <HAL_GPIO_ReadPin>
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <JoystickPinUpdate+0x134>)
 800269e:	605a      	str	r2, [r3, #4]
	  if (HomingButton.last == 1 && HomingButton.current == 0)
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <JoystickPinUpdate+0x134>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d107      	bne.n	80026b8 <JoystickPinUpdate+0x108>
 80026a8:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <JoystickPinUpdate+0x134>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d103      	bne.n	80026b8 <JoystickPinUpdate+0x108>
	  {
		  HomingButton.flag = 1;
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <JoystickPinUpdate+0x134>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	e002      	b.n	80026be <JoystickPinUpdate+0x10e>
	  }
	  else
	  {
		  HomingButton.flag = 0;
 80026b8:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <JoystickPinUpdate+0x134>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
	  }
	  HomingButton.last = HomingButton.current;
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <JoystickPinUpdate+0x134>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4a08      	ldr	r2, [pc, #32]	; (80026e4 <JoystickPinUpdate+0x134>)
 80026c4:	6013      	str	r3, [r2, #0]
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40020400 	.word	0x40020400
 80026d0:	20000a88 	.word	0x20000a88
 80026d4:	40020000 	.word	0x40020000
 80026d8:	20000a94 	.word	0x20000a94
 80026dc:	20000aa0 	.word	0x20000aa0
 80026e0:	20000aac 	.word	0x20000aac
 80026e4:	20000ab8 	.word	0x20000ab8

080026e8 <JoystickControl>:

void JoystickControl()
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	if(RoughButton.flag == 1)
 80026ec:	4b60      	ldr	r3, [pc, #384]	; (8002870 <JoystickControl+0x188>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d106      	bne.n	8002702 <JoystickControl+0x1a>
	{
		JoySpeed = 0;
 80026f4:	4b5f      	ldr	r3, [pc, #380]	; (8002874 <JoystickControl+0x18c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
		RoughButton.flag = 0;
 80026fa:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <JoystickControl+0x188>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	e014      	b.n	800272c <JoystickControl+0x44>
	}
	else if(FineButton.flag == 1)
 8002702:	4b5d      	ldr	r3, [pc, #372]	; (8002878 <JoystickControl+0x190>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d106      	bne.n	8002718 <JoystickControl+0x30>
	{
		JoySpeed = 1;
 800270a:	4b5a      	ldr	r3, [pc, #360]	; (8002874 <JoystickControl+0x18c>)
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]
		FineButton.flag = 0;
 8002710:	4b59      	ldr	r3, [pc, #356]	; (8002878 <JoystickControl+0x190>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	e009      	b.n	800272c <JoystickControl+0x44>
	}
	else if(HomingButton.flag == 1)
 8002718:	4b58      	ldr	r3, [pc, #352]	; (800287c <JoystickControl+0x194>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d105      	bne.n	800272c <JoystickControl+0x44>
	{
		JoySpeed = 2;
 8002720:	4b54      	ldr	r3, [pc, #336]	; (8002874 <JoystickControl+0x18c>)
 8002722:	2202      	movs	r2, #2
 8002724:	601a      	str	r2, [r3, #0]
		HomingButton.flag = 0;
 8002726:	4b55      	ldr	r3, [pc, #340]	; (800287c <JoystickControl+0x194>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
	}

	switch(JoySpeed)
 800272c:	4b51      	ldr	r3, [pc, #324]	; (8002874 <JoystickControl+0x18c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b02      	cmp	r3, #2
 8002732:	f000 808e 	beq.w	8002852 <JoystickControl+0x16a>
 8002736:	2b02      	cmp	r3, #2
 8002738:	f300 8097 	bgt.w	800286a <JoystickControl+0x182>
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <JoystickControl+0x5e>
 8002740:	2b01      	cmp	r3, #1
 8002742:	d043      	beq.n	80027cc <JoystickControl+0xe4>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
		Homing();
		break;
	}
}
 8002744:	e091      	b.n	800286a <JoystickControl+0x182>
		if(XYSwitch[1] > 2200)
 8002746:	4b4e      	ldr	r3, [pc, #312]	; (8002880 <JoystickControl+0x198>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f640 0298 	movw	r2, #2200	; 0x898
 800274e:	4293      	cmp	r3, r2
 8002750:	dd09      	ble.n	8002766 <JoystickControl+0x7e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002752:	4b4c      	ldr	r3, [pc, #304]	; (8002884 <JoystickControl+0x19c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2200      	movs	r2, #0
 8002758:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,15000);
 800275a:	4b4a      	ldr	r3, [pc, #296]	; (8002884 <JoystickControl+0x19c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002762:	635a      	str	r2, [r3, #52]	; 0x34
 8002764:	e017      	b.n	8002796 <JoystickControl+0xae>
		else if(XYSwitch[1] < 1950)
 8002766:	4b46      	ldr	r3, [pc, #280]	; (8002880 <JoystickControl+0x198>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f240 729d 	movw	r2, #1949	; 0x79d
 800276e:	4293      	cmp	r3, r2
 8002770:	dc09      	bgt.n	8002786 <JoystickControl+0x9e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,15000);
 8002772:	4b44      	ldr	r3, [pc, #272]	; (8002884 <JoystickControl+0x19c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f643 2298 	movw	r2, #15000	; 0x3a98
 800277a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800277c:	4b41      	ldr	r3, [pc, #260]	; (8002884 <JoystickControl+0x19c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2200      	movs	r2, #0
 8002782:	635a      	str	r2, [r3, #52]	; 0x34
 8002784:	e007      	b.n	8002796 <JoystickControl+0xae>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002786:	4b3f      	ldr	r3, [pc, #252]	; (8002884 <JoystickControl+0x19c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2200      	movs	r2, #0
 800278c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800278e:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <JoystickControl+0x19c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2200      	movs	r2, #0
 8002794:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 2200)
 8002796:	4b3a      	ldr	r3, [pc, #232]	; (8002880 <JoystickControl+0x198>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f640 0298 	movw	r2, #2200	; 0x898
 800279e:	4293      	cmp	r3, r2
 80027a0:	dd04      	ble.n	80027ac <JoystickControl+0xc4>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 80027a2:	4b39      	ldr	r3, [pc, #228]	; (8002888 <JoystickControl+0x1a0>)
 80027a4:	2204      	movs	r2, #4
 80027a6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 80027aa:	e05e      	b.n	800286a <JoystickControl+0x182>
		else if(XYSwitch[0] < 1950)
 80027ac:	4b34      	ldr	r3, [pc, #208]	; (8002880 <JoystickControl+0x198>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f240 729d 	movw	r2, #1949	; 0x79d
 80027b4:	4293      	cmp	r3, r2
 80027b6:	dc04      	bgt.n	80027c2 <JoystickControl+0xda>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 80027b8:	4b33      	ldr	r3, [pc, #204]	; (8002888 <JoystickControl+0x1a0>)
 80027ba:	2208      	movs	r2, #8
 80027bc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 80027c0:	e053      	b.n	800286a <JoystickControl+0x182>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 80027c2:	4b31      	ldr	r3, [pc, #196]	; (8002888 <JoystickControl+0x1a0>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 80027ca:	e04e      	b.n	800286a <JoystickControl+0x182>
		if(XYSwitch[1] > 2200)
 80027cc:	4b2c      	ldr	r3, [pc, #176]	; (8002880 <JoystickControl+0x198>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f640 0298 	movw	r2, #2200	; 0x898
 80027d4:	4293      	cmp	r3, r2
 80027d6:	dd09      	ble.n	80027ec <JoystickControl+0x104>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80027d8:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <JoystickControl+0x19c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2200      	movs	r2, #0
 80027de:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
 80027e0:	4b28      	ldr	r3, [pc, #160]	; (8002884 <JoystickControl+0x19c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80027e8:	635a      	str	r2, [r3, #52]	; 0x34
 80027ea:	e017      	b.n	800281c <JoystickControl+0x134>
		else if(XYSwitch[1] < 1950)
 80027ec:	4b24      	ldr	r3, [pc, #144]	; (8002880 <JoystickControl+0x198>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f240 729d 	movw	r2, #1949	; 0x79d
 80027f4:	4293      	cmp	r3, r2
 80027f6:	dc09      	bgt.n	800280c <JoystickControl+0x124>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,10000);
 80027f8:	4b22      	ldr	r3, [pc, #136]	; (8002884 <JoystickControl+0x19c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8002800:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <JoystickControl+0x19c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2200      	movs	r2, #0
 8002808:	635a      	str	r2, [r3, #52]	; 0x34
 800280a:	e007      	b.n	800281c <JoystickControl+0x134>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800280c:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <JoystickControl+0x19c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2200      	movs	r2, #0
 8002812:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002814:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <JoystickControl+0x19c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2200      	movs	r2, #0
 800281a:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 2200)
 800281c:	4b18      	ldr	r3, [pc, #96]	; (8002880 <JoystickControl+0x198>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f640 0298 	movw	r2, #2200	; 0x898
 8002824:	4293      	cmp	r3, r2
 8002826:	dd04      	ble.n	8002832 <JoystickControl+0x14a>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 8002828:	4b17      	ldr	r3, [pc, #92]	; (8002888 <JoystickControl+0x1a0>)
 800282a:	2204      	movs	r2, #4
 800282c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002830:	e01b      	b.n	800286a <JoystickControl+0x182>
		else if(XYSwitch[0] < 1950)
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <JoystickControl+0x198>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f240 729d 	movw	r2, #1949	; 0x79d
 800283a:	4293      	cmp	r3, r2
 800283c:	dc04      	bgt.n	8002848 <JoystickControl+0x160>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <JoystickControl+0x1a0>)
 8002840:	2208      	movs	r2, #8
 8002842:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002846:	e010      	b.n	800286a <JoystickControl+0x182>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <JoystickControl+0x1a0>)
 800284a:	2200      	movs	r2, #0
 800284c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002850:	e00b      	b.n	800286a <JoystickControl+0x182>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <JoystickControl+0x19c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2200      	movs	r2, #0
 8002858:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <JoystickControl+0x19c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002862:	635a      	str	r2, [r3, #52]	; 0x34
		Homing();
 8002864:	f7ff fd50 	bl	8002308 <Homing>
		break;
 8002868:	bf00      	nop
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000aac 	.word	0x20000aac
 8002874:	20000acc 	.word	0x20000acc
 8002878:	20000aa0 	.word	0x20000aa0
 800287c:	20000ab8 	.word	0x20000ab8
 8002880:	20000ac4 	.word	0x20000ac4
 8002884:	2000051c 	.word	0x2000051c
 8002888:	20000fb4 	.word	0x20000fb4
 800288c:	00000000 	.word	0x00000000

08002890 <JoystickLocationState>:

void JoystickLocationState()
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
	if(registerFrame[1].U16 == 1)	//Base System Status: Set Pick Tray
 8002894:	4b46      	ldr	r3, [pc, #280]	; (80029b0 <JoystickLocationState+0x120>)
 8002896:	885b      	ldrh	r3, [r3, #2]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d112      	bne.n	80028c2 <JoystickLocationState+0x32>
	{
		registerFrame[1].U16 = 0;
 800289c:	4b44      	ldr	r3, [pc, #272]	; (80029b0 <JoystickLocationState+0x120>)
 800289e:	2200      	movs	r2, #0
 80028a0:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 1;	//Y Moving Status: Jog Pick
 80028a2:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <JoystickLocationState+0x120>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	841a      	strh	r2, [r3, #32]
		EndEffectorState = 1;		//TestModeOn
 80028a8:	4b42      	ldr	r3, [pc, #264]	; (80029b4 <JoystickLocationState+0x124>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 1;	//End Effector Status: Laser On
 80028ae:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <JoystickLocationState+0x120>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 80028b4:	4b40      	ldr	r3, [pc, #256]	; (80029b8 <JoystickLocationState+0x128>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
		state = 1;					//Go Pick state
 80028ba:	4b40      	ldr	r3, [pc, #256]	; (80029bc <JoystickLocationState+0x12c>)
 80028bc:	2201      	movs	r2, #1
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e015      	b.n	80028ee <JoystickLocationState+0x5e>
	}
	else if(registerFrame[1].U16 == 2)	//Base System Status: Set Place Tray
 80028c2:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <JoystickLocationState+0x120>)
 80028c4:	885b      	ldrh	r3, [r3, #2]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d111      	bne.n	80028ee <JoystickLocationState+0x5e>
	{
		registerFrame[1].U16 = 0;
 80028ca:	4b39      	ldr	r3, [pc, #228]	; (80029b0 <JoystickLocationState+0x120>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 2;	//Y Moving Status: Jog Place
 80028d0:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <JoystickLocationState+0x120>)
 80028d2:	2202      	movs	r2, #2
 80028d4:	841a      	strh	r2, [r3, #32]
		EndEffectorState = 1;		//TestModeOn
 80028d6:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <JoystickLocationState+0x124>)
 80028d8:	2201      	movs	r2, #1
 80028da:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 1;	//Laser On
 80028dc:	4b34      	ldr	r3, [pc, #208]	; (80029b0 <JoystickLocationState+0x120>)
 80028de:	2201      	movs	r2, #1
 80028e0:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 80028e2:	4b35      	ldr	r3, [pc, #212]	; (80029b8 <JoystickLocationState+0x128>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
		state = 3;					//Go Place state
 80028e8:	4b34      	ldr	r3, [pc, #208]	; (80029bc <JoystickLocationState+0x12c>)
 80028ea:	2203      	movs	r2, #3
 80028ec:	601a      	str	r2, [r3, #0]
	}
	if(registerFrame[1].U16 == 8)	//Run Tray Mode
 80028ee:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <JoystickLocationState+0x120>)
 80028f0:	885b      	ldrh	r3, [r3, #2]
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d102      	bne.n	80028fc <JoystickLocationState+0x6c>
	{
		state = 5;
 80028f6:	4b31      	ldr	r3, [pc, #196]	; (80029bc <JoystickLocationState+0x12c>)
 80028f8:	2205      	movs	r2, #5
 80028fa:	601a      	str	r2, [r3, #0]
	}


	switch(state)
 80028fc:	4b2f      	ldr	r3, [pc, #188]	; (80029bc <JoystickLocationState+0x12c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	3b01      	subs	r3, #1
 8002902:	2b04      	cmp	r3, #4
 8002904:	f200 8613 	bhi.w	800352e <JoystickLocationState+0xc9e>
 8002908:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <JoystickLocationState+0x80>)
 800290a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290e:	bf00      	nop
 8002910:	08002925 	.word	0x08002925
 8002914:	080029d1 	.word	0x080029d1
 8002918:	08002ee3 	.word	0x08002ee3
 800291c:	08002fc1 	.word	0x08002fc1
 8002920:	080034d1 	.word	0x080034d1
	{
	//Get Pick Tray 1st Point
	case 1:
		PickTray.L1[0] = 0;
 8002924:	4b26      	ldr	r3, [pc, #152]	; (80029c0 <JoystickLocationState+0x130>)
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
		PickTray.L2[0] = 0;
 800292c:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <JoystickLocationState+0x130>)
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
		PickTray.L1[1] = 0;
 8002934:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <JoystickLocationState+0x130>)
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	605a      	str	r2, [r3, #4]
		PickTray.L2[1] = 0;
 800293c:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <JoystickLocationState+0x130>)
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8002944:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <JoystickLocationState+0x134>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b01      	cmp	r3, #1
 800294a:	f040 85e7 	bne.w	800351c <JoystickLocationState+0xc8c>
		{
			PickTray.L1[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 800294e:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <JoystickLocationState+0x120>)
 8002950:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002954:	4a1c      	ldr	r2, [pc, #112]	; (80029c8 <JoystickLocationState+0x138>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	08db      	lsrs	r3, r3, #3
 800295c:	b29b      	uxth	r3, r3
 800295e:	ee07 3a90 	vmov	s15, r3
 8002962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <JoystickLocationState+0x130>)
 8002968:	edc3 7a00 	vstr	s15, [r3]
			PickTray.L1[1] = position*0.045; //Pick Tray Y Position 1 //mm
 800296c:	4b17      	ldr	r3, [pc, #92]	; (80029cc <JoystickLocationState+0x13c>)
 800296e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002972:	4618      	mov	r0, r3
 8002974:	f7fd fdde 	bl	8000534 <__aeabi_i2d>
 8002978:	a30b      	add	r3, pc, #44	; (adr r3, 80029a8 <JoystickLocationState+0x118>)
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	f7fd fe43 	bl	8000608 <__aeabi_dmul>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4610      	mov	r0, r2
 8002988:	4619      	mov	r1, r3
 800298a:	f7fe f935 	bl	8000bf8 <__aeabi_d2f>
 800298e:	4603      	mov	r3, r0
 8002990:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <JoystickLocationState+0x130>)
 8002992:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <JoystickLocationState+0x134>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
			state = 2;
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <JoystickLocationState+0x12c>)
 800299c:	2202      	movs	r2, #2
 800299e:	601a      	str	r2, [r3, #0]
		}
		break;
 80029a0:	f000 bdbc 	b.w	800351c <JoystickLocationState+0xc8c>
 80029a4:	f3af 8000 	nop.w
 80029a8:	70a3d70a 	.word	0x70a3d70a
 80029ac:	3fa70a3d 	.word	0x3fa70a3d
 80029b0:	20000fb4 	.word	0x20000fb4
 80029b4:	20000ad4 	.word	0x20000ad4
 80029b8:	20000ad0 	.word	0x20000ad0
 80029bc:	2000021c 	.word	0x2000021c
 80029c0:	200009b8 	.word	0x200009b8
 80029c4:	20000a88 	.word	0x20000a88
 80029c8:	cccccccd 	.word	0xcccccccd
 80029cc:	20000980 	.word	0x20000980

	//Get Pick Tray 2nd Point
	case 2:
		if (GetPositionButton.flag == 1)
 80029d0:	4bd5      	ldr	r3, [pc, #852]	; (8002d28 <JoystickLocationState+0x498>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	f040 8278 	bne.w	8002eca <JoystickLocationState+0x63a>
		{
			PickTray.L2[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 2 //mm
 80029da:	4bd4      	ldr	r3, [pc, #848]	; (8002d2c <JoystickLocationState+0x49c>)
 80029dc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80029e0:	4ad3      	ldr	r2, [pc, #844]	; (8002d30 <JoystickLocationState+0x4a0>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	08db      	lsrs	r3, r3, #3
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	ee07 3a90 	vmov	s15, r3
 80029ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029f2:	4bd0      	ldr	r3, [pc, #832]	; (8002d34 <JoystickLocationState+0x4a4>)
 80029f4:	edc3 7a02 	vstr	s15, [r3, #8]
			PickTray.L2[1] = position*0.045; //Pick Tray Y Position 2 //mm
 80029f8:	4bcf      	ldr	r3, [pc, #828]	; (8002d38 <JoystickLocationState+0x4a8>)
 80029fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fd fd98 	bl	8000534 <__aeabi_i2d>
 8002a04:	a3c6      	add	r3, pc, #792	; (adr r3, 8002d20 <JoystickLocationState+0x490>)
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	f7fd fdfd 	bl	8000608 <__aeabi_dmul>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4610      	mov	r0, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	f7fe f8ef 	bl	8000bf8 <__aeabi_d2f>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4ac5      	ldr	r2, [pc, #788]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002a1e:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 8002a20:	4bc1      	ldr	r3, [pc, #772]	; (8002d28 <JoystickLocationState+0x498>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]

			cos_Theta = (PickTray.L2[0]-PickTray.L1[0])/60;
 8002a26:	4bc3      	ldr	r3, [pc, #780]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002a28:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a2c:	4bc1      	ldr	r3, [pc, #772]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002a2e:	edd3 7a00 	vldr	s15, [r3]
 8002a32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a36:	eddf 6ac1 	vldr	s13, [pc, #772]	; 8002d3c <JoystickLocationState+0x4ac>
 8002a3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a3e:	4bc0      	ldr	r3, [pc, #768]	; (8002d40 <JoystickLocationState+0x4b0>)
 8002a40:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PickTray.L2[1]-PickTray.L1[1])/60;
 8002a44:	4bbb      	ldr	r3, [pc, #748]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002a46:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a4a:	4bba      	ldr	r3, [pc, #744]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002a4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a54:	eddf 6ab9 	vldr	s13, [pc, #740]	; 8002d3c <JoystickLocationState+0x4ac>
 8002a58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a5c:	4bb9      	ldr	r3, [pc, #740]	; (8002d44 <JoystickLocationState+0x4b4>)
 8002a5e:	edc3 7a00 	vstr	s15, [r3]

			PickTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PickTray.L1[0];
 8002a62:	4bb7      	ldr	r3, [pc, #732]	; (8002d40 <JoystickLocationState+0x4b0>)
 8002a64:	edd3 7a00 	vldr	s15, [r3]
 8002a68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a70:	4bb4      	ldr	r3, [pc, #720]	; (8002d44 <JoystickLocationState+0x4b4>)
 8002a72:	edd3 7a00 	vldr	s15, [r3]
 8002a76:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002a7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a82:	4bac      	ldr	r3, [pc, #688]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002a84:	edd3 7a00 	vldr	s15, [r3]
 8002a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a8c:	4ba9      	ldr	r3, [pc, #676]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002a8e:	edc3 7a04 	vstr	s15, [r3, #16]
			PickTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PickTray.L1[1];
 8002a92:	4bac      	ldr	r3, [pc, #688]	; (8002d44 <JoystickLocationState+0x4b4>)
 8002a94:	edd3 7a00 	vldr	s15, [r3]
 8002a98:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002aa0:	4ba7      	ldr	r3, [pc, #668]	; (8002d40 <JoystickLocationState+0x4b0>)
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002aaa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002aae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ab2:	4ba0      	ldr	r3, [pc, #640]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002ab4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002abc:	4b9d      	ldr	r3, [pc, #628]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002abe:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PickTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PickTray.L1[0];
 8002ac2:	4b9f      	ldr	r3, [pc, #636]	; (8002d40 <JoystickLocationState+0x4b0>)
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002acc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ad0:	4b9c      	ldr	r3, [pc, #624]	; (8002d44 <JoystickLocationState+0x4b4>)
 8002ad2:	edd3 7a00 	vldr	s15, [r3]
 8002ad6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002ada:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ade:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae2:	4b94      	ldr	r3, [pc, #592]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002ae4:	edd3 7a00 	vldr	s15, [r3]
 8002ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aec:	4b91      	ldr	r3, [pc, #580]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002aee:	edc3 7a05 	vstr	s15, [r3, #20]
			PickTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PickTray.L1[1];
 8002af2:	4b94      	ldr	r3, [pc, #592]	; (8002d44 <JoystickLocationState+0x4b4>)
 8002af4:	edd3 7a00 	vldr	s15, [r3]
 8002af8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002afc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b00:	4b8f      	ldr	r3, [pc, #572]	; (8002d40 <JoystickLocationState+0x4b0>)
 8002b02:	edd3 7a00 	vldr	s15, [r3]
 8002b06:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002b0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b12:	4b88      	ldr	r3, [pc, #544]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002b14:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b1c:	4b85      	ldr	r3, [pc, #532]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002b1e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PickTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PickTray.L1[0];
 8002b22:	4b87      	ldr	r3, [pc, #540]	; (8002d40 <JoystickLocationState+0x4b0>)
 8002b24:	edd3 7a00 	vldr	s15, [r3]
 8002b28:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002d48 <JoystickLocationState+0x4b8>
 8002b2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b30:	4b84      	ldr	r3, [pc, #528]	; (8002d44 <JoystickLocationState+0x4b4>)
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002b3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b42:	4b7c      	ldr	r3, [pc, #496]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b4c:	4b79      	ldr	r3, [pc, #484]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002b4e:	edc3 7a06 	vstr	s15, [r3, #24]
			PickTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PickTray.L1[1];
 8002b52:	4b7c      	ldr	r3, [pc, #496]	; (8002d44 <JoystickLocationState+0x4b4>)
 8002b54:	edd3 7a00 	vldr	s15, [r3]
 8002b58:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8002d48 <JoystickLocationState+0x4b8>
 8002b5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b60:	4b77      	ldr	r3, [pc, #476]	; (8002d40 <JoystickLocationState+0x4b0>)
 8002b62:	edd3 7a00 	vldr	s15, [r3]
 8002b66:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002b6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b72:	4b70      	ldr	r3, [pc, #448]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002b74:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b7c:	4b6d      	ldr	r3, [pc, #436]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002b7e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PickTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PickTray.L1[0];
 8002b82:	4b6f      	ldr	r3, [pc, #444]	; (8002d40 <JoystickLocationState+0x4b0>)
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b90:	4b6c      	ldr	r3, [pc, #432]	; (8002d44 <JoystickLocationState+0x4b4>)
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002b9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ba2:	4b64      	ldr	r3, [pc, #400]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bac:	4b61      	ldr	r3, [pc, #388]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002bae:	edc3 7a07 	vstr	s15, [r3, #28]
			PickTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PickTray.L1[1];
 8002bb2:	4b64      	ldr	r3, [pc, #400]	; (8002d44 <JoystickLocationState+0x4b4>)
 8002bb4:	edd3 7a00 	vldr	s15, [r3]
 8002bb8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002bbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bc0:	4b5f      	ldr	r3, [pc, #380]	; (8002d40 <JoystickLocationState+0x4b0>)
 8002bc2:	edd3 7a00 	vldr	s15, [r3]
 8002bc6:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002bca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bd2:	4b58      	ldr	r3, [pc, #352]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002bd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bdc:	4b55      	ldr	r3, [pc, #340]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002bde:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PickTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PickTray.L1[0];
 8002be2:	4b57      	ldr	r3, [pc, #348]	; (8002d40 <JoystickLocationState+0x4b0>)
 8002be4:	edd3 7a00 	vldr	s15, [r3]
 8002be8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002bec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bf0:	4b54      	ldr	r3, [pc, #336]	; (8002d44 <JoystickLocationState+0x4b4>)
 8002bf2:	edd3 7a00 	vldr	s15, [r3]
 8002bf6:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002bfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c02:	4b4c      	ldr	r3, [pc, #304]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002c04:	edd3 7a00 	vldr	s15, [r3]
 8002c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c0c:	4b49      	ldr	r3, [pc, #292]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002c0e:	edc3 7a08 	vstr	s15, [r3, #32]
			PickTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PickTray.L1[1];
 8002c12:	4b4c      	ldr	r3, [pc, #304]	; (8002d44 <JoystickLocationState+0x4b4>)
 8002c14:	edd3 7a00 	vldr	s15, [r3]
 8002c18:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002c1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c20:	4b47      	ldr	r3, [pc, #284]	; (8002d40 <JoystickLocationState+0x4b0>)
 8002c22:	edd3 7a00 	vldr	s15, [r3]
 8002c26:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002c2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c32:	4b40      	ldr	r3, [pc, #256]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002c34:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c3c:	4b3d      	ldr	r3, [pc, #244]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002c3e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PickTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PickTray.L1[0];
 8002c42:	4b3f      	ldr	r3, [pc, #252]	; (8002d40 <JoystickLocationState+0x4b0>)
 8002c44:	edd3 7a00 	vldr	s15, [r3]
 8002c48:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002d48 <JoystickLocationState+0x4b8>
 8002c4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c50:	4b3c      	ldr	r3, [pc, #240]	; (8002d44 <JoystickLocationState+0x4b4>)
 8002c52:	edd3 7a00 	vldr	s15, [r3]
 8002c56:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002c5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c62:	4b34      	ldr	r3, [pc, #208]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002c64:	edd3 7a00 	vldr	s15, [r3]
 8002c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6c:	4b31      	ldr	r3, [pc, #196]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002c6e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PickTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PickTray.L1[1];
 8002c72:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <JoystickLocationState+0x4b4>)
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002d48 <JoystickLocationState+0x4b8>
 8002c7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c80:	4b2f      	ldr	r3, [pc, #188]	; (8002d40 <JoystickLocationState+0x4b0>)
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002c8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c92:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002c94:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c9c:	4b25      	ldr	r3, [pc, #148]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002c9e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PickTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PickTray.L1[0];
 8002ca2:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <JoystickLocationState+0x4b0>)
 8002ca4:	edd3 7a00 	vldr	s15, [r3]
 8002ca8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cb0:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <JoystickLocationState+0x4b4>)
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002d4c <JoystickLocationState+0x4bc>
 8002cba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cc2:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ccc:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002cce:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PickTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PickTray.L1[1];
 8002cd2:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <JoystickLocationState+0x4b4>)
 8002cd4:	edd3 7a00 	vldr	s15, [r3]
 8002cd8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cdc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ce0:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <JoystickLocationState+0x4b0>)
 8002ce2:	edd3 7a00 	vldr	s15, [r3]
 8002ce6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002d50 <JoystickLocationState+0x4c0>
 8002cea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cf2:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002cf4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <JoystickLocationState+0x4a4>)
 8002cfe:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PickTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PickTray.L1[0];
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <JoystickLocationState+0x4b0>)
 8002d04:	edd3 7a00 	vldr	s15, [r3]
 8002d08:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002d0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d10:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <JoystickLocationState+0x4b4>)
 8002d12:	edd3 7a00 	vldr	s15, [r3]
 8002d16:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002d4c <JoystickLocationState+0x4bc>
 8002d1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d1e:	e019      	b.n	8002d54 <JoystickLocationState+0x4c4>
 8002d20:	70a3d70a 	.word	0x70a3d70a
 8002d24:	3fa70a3d 	.word	0x3fa70a3d
 8002d28:	20000a88 	.word	0x20000a88
 8002d2c:	20000fb4 	.word	0x20000fb4
 8002d30:	cccccccd 	.word	0xcccccccd
 8002d34:	200009b8 	.word	0x200009b8
 8002d38:	20000980 	.word	0x20000980
 8002d3c:	42700000 	.word	0x42700000
 8002d40:	20000a80 	.word	0x20000a80
 8002d44:	20000a84 	.word	0x20000a84
 8002d48:	42480000 	.word	0x42480000
 8002d4c:	42200000 	.word	0x42200000
 8002d50:	c2200000 	.word	0xc2200000
 8002d54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d58:	4b8b      	ldr	r3, [pc, #556]	; (8002f88 <JoystickLocationState+0x6f8>)
 8002d5a:	edd3 7a00 	vldr	s15, [r3]
 8002d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d62:	4b89      	ldr	r3, [pc, #548]	; (8002f88 <JoystickLocationState+0x6f8>)
 8002d64:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PickTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PickTray.L1[1];
 8002d68:	4b88      	ldr	r3, [pc, #544]	; (8002f8c <JoystickLocationState+0x6fc>)
 8002d6a:	edd3 7a00 	vldr	s15, [r3]
 8002d6e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002d72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d76:	4b86      	ldr	r3, [pc, #536]	; (8002f90 <JoystickLocationState+0x700>)
 8002d78:	edd3 7a00 	vldr	s15, [r3]
 8002d7c:	eddf 6a85 	vldr	s13, [pc, #532]	; 8002f94 <JoystickLocationState+0x704>
 8002d80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d88:	4b7f      	ldr	r3, [pc, #508]	; (8002f88 <JoystickLocationState+0x6f8>)
 8002d8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d92:	4b7d      	ldr	r3, [pc, #500]	; (8002f88 <JoystickLocationState+0x6f8>)
 8002d94:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PickTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PickTray.L1[0];
 8002d98:	4b7d      	ldr	r3, [pc, #500]	; (8002f90 <JoystickLocationState+0x700>)
 8002d9a:	edd3 7a00 	vldr	s15, [r3]
 8002d9e:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002f98 <JoystickLocationState+0x708>
 8002da2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002da6:	4b79      	ldr	r3, [pc, #484]	; (8002f8c <JoystickLocationState+0x6fc>)
 8002da8:	edd3 7a00 	vldr	s15, [r3]
 8002dac:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8002f9c <JoystickLocationState+0x70c>
 8002db0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002db4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db8:	4b73      	ldr	r3, [pc, #460]	; (8002f88 <JoystickLocationState+0x6f8>)
 8002dba:	edd3 7a00 	vldr	s15, [r3]
 8002dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc2:	4b71      	ldr	r3, [pc, #452]	; (8002f88 <JoystickLocationState+0x6f8>)
 8002dc4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PickTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PickTray.L1[1];
 8002dc8:	4b70      	ldr	r3, [pc, #448]	; (8002f8c <JoystickLocationState+0x6fc>)
 8002dca:	edd3 7a00 	vldr	s15, [r3]
 8002dce:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002f98 <JoystickLocationState+0x708>
 8002dd2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dd6:	4b6e      	ldr	r3, [pc, #440]	; (8002f90 <JoystickLocationState+0x700>)
 8002dd8:	edd3 7a00 	vldr	s15, [r3]
 8002ddc:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8002f94 <JoystickLocationState+0x704>
 8002de0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002de4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002de8:	4b67      	ldr	r3, [pc, #412]	; (8002f88 <JoystickLocationState+0x6f8>)
 8002dea:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df2:	4b65      	ldr	r3, [pc, #404]	; (8002f88 <JoystickLocationState+0x6f8>)
 8002df4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PickTray.origin_x = PickTray.L1[0]+(50*sin_Theta);
 8002df8:	4b63      	ldr	r3, [pc, #396]	; (8002f88 <JoystickLocationState+0x6f8>)
 8002dfa:	ed93 7a00 	vldr	s14, [r3]
 8002dfe:	4b63      	ldr	r3, [pc, #396]	; (8002f8c <JoystickLocationState+0x6fc>)
 8002e00:	edd3 7a00 	vldr	s15, [r3]
 8002e04:	eddf 6a64 	vldr	s13, [pc, #400]	; 8002f98 <JoystickLocationState+0x708>
 8002e08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e10:	4b5d      	ldr	r3, [pc, #372]	; (8002f88 <JoystickLocationState+0x6f8>)
 8002e12:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			PickTray.origin_y = PickTray.L1[1]-(50*cos_Theta);
 8002e16:	4b5c      	ldr	r3, [pc, #368]	; (8002f88 <JoystickLocationState+0x6f8>)
 8002e18:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e1c:	4b5c      	ldr	r3, [pc, #368]	; (8002f90 <JoystickLocationState+0x700>)
 8002e1e:	edd3 7a00 	vldr	s15, [r3]
 8002e22:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8002f98 <JoystickLocationState+0x708>
 8002e26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e2e:	4b56      	ldr	r3, [pc, #344]	; (8002f88 <JoystickLocationState+0x6f8>)
 8002e30:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			PickTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 8002e34:	4b56      	ldr	r3, [pc, #344]	; (8002f90 <JoystickLocationState+0x700>)
 8002e36:	edd3 7a00 	vldr	s15, [r3]
 8002e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e3e:	f00d f81f 	bl	800fe80 <acosf>
 8002e42:	ee10 3a10 	vmov	r3, s0
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd fb86 	bl	8000558 <__aeabi_f2d>
 8002e4c:	a34a      	add	r3, pc, #296	; (adr r3, 8002f78 <JoystickLocationState+0x6e8>)
 8002e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e52:	f7fd fbd9 	bl	8000608 <__aeabi_dmul>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f7fd fecb 	bl	8000bf8 <__aeabi_d2f>
 8002e62:	4603      	mov	r3, r0
 8002e64:	4a48      	ldr	r2, [pc, #288]	; (8002f88 <JoystickLocationState+0x6f8>)
 8002e66:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[32].U16 = PickTray.origin_x * 10;
 8002e68:	4b47      	ldr	r3, [pc, #284]	; (8002f88 <JoystickLocationState+0x6f8>)
 8002e6a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002e6e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e7a:	ee17 3a90 	vmov	r3, s15
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	4b47      	ldr	r3, [pc, #284]	; (8002fa0 <JoystickLocationState+0x710>)
 8002e82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			registerFrame[33].U16 = PickTray.origin_y * 10;
 8002e86:	4b40      	ldr	r3, [pc, #256]	; (8002f88 <JoystickLocationState+0x6f8>)
 8002e88:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002e8c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e98:	ee17 3a90 	vmov	r3, s15
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	4b40      	ldr	r3, [pc, #256]	; (8002fa0 <JoystickLocationState+0x710>)
 8002ea0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			registerFrame[34].U16 = PickTray.orientation * 100;
 8002ea4:	4b38      	ldr	r3, [pc, #224]	; (8002f88 <JoystickLocationState+0x6f8>)
 8002ea6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002eaa:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002fa4 <JoystickLocationState+0x714>
 8002eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eb6:	ee17 3a90 	vmov	r3, s15
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	4b38      	ldr	r3, [pc, #224]	; (8002fa0 <JoystickLocationState+0x710>)
 8002ebe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			registerFrame[16].U16 = 0;
 8002ec2:	4b37      	ldr	r3, [pc, #220]	; (8002fa0 <JoystickLocationState+0x710>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8002ec8:	e32a      	b.n	8003520 <JoystickLocationState+0xc90>
		else if (ResetButton.flag == 1)
 8002eca:	4b37      	ldr	r3, [pc, #220]	; (8002fa8 <JoystickLocationState+0x718>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	f040 8326 	bne.w	8003520 <JoystickLocationState+0xc90>
			ResetButton.flag = 0;
 8002ed4:	4b34      	ldr	r3, [pc, #208]	; (8002fa8 <JoystickLocationState+0x718>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
			state = 1;
 8002eda:	4b34      	ldr	r3, [pc, #208]	; (8002fac <JoystickLocationState+0x71c>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]
		break;
 8002ee0:	e31e      	b.n	8003520 <JoystickLocationState+0xc90>

	//Get Place Tray 1st Point
	case 3:
		PlaceTray.L1[0] = 0;
 8002ee2:	4b33      	ldr	r3, [pc, #204]	; (8002fb0 <JoystickLocationState+0x720>)
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
		PlaceTray.L2[0] = 0;
 8002eea:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <JoystickLocationState+0x720>)
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
		PlaceTray.L1[1] = 0;
 8002ef2:	4b2f      	ldr	r3, [pc, #188]	; (8002fb0 <JoystickLocationState+0x720>)
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	605a      	str	r2, [r3, #4]
		PlaceTray.L2[1] = 0;
 8002efa:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <JoystickLocationState+0x720>)
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8002f02:	4b2c      	ldr	r3, [pc, #176]	; (8002fb4 <JoystickLocationState+0x724>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d129      	bne.n	8002f5e <JoystickLocationState+0x6ce>
		{
			PlaceTray.L1[0] = (registerFrame[68].U16)/10; //Place Tray X Position 1 //mm
 8002f0a:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <JoystickLocationState+0x710>)
 8002f0c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f10:	4a29      	ldr	r2, [pc, #164]	; (8002fb8 <JoystickLocationState+0x728>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	08db      	lsrs	r3, r3, #3
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	ee07 3a90 	vmov	s15, r3
 8002f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f22:	4b23      	ldr	r3, [pc, #140]	; (8002fb0 <JoystickLocationState+0x720>)
 8002f24:	edc3 7a00 	vstr	s15, [r3]
			PlaceTray.L1[1] = position*0.045; //Place Tray Y Position 1 //mm
 8002f28:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <JoystickLocationState+0x72c>)
 8002f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fd fb00 	bl	8000534 <__aeabi_i2d>
 8002f34:	a312      	add	r3, pc, #72	; (adr r3, 8002f80 <JoystickLocationState+0x6f0>)
 8002f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3a:	f7fd fb65 	bl	8000608 <__aeabi_dmul>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4610      	mov	r0, r2
 8002f44:	4619      	mov	r1, r3
 8002f46:	f7fd fe57 	bl	8000bf8 <__aeabi_d2f>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	4a18      	ldr	r2, [pc, #96]	; (8002fb0 <JoystickLocationState+0x720>)
 8002f4e:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 8002f50:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <JoystickLocationState+0x724>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
			state = 4;
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <JoystickLocationState+0x71c>)
 8002f58:	2204      	movs	r2, #4
 8002f5a:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8002f5c:	e2e2      	b.n	8003524 <JoystickLocationState+0xc94>
		else if (ResetButton.flag == 1)
 8002f5e:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <JoystickLocationState+0x718>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	f040 82de 	bne.w	8003524 <JoystickLocationState+0xc94>
			ResetButton.flag = 0;
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <JoystickLocationState+0x718>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
			state = 1;
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <JoystickLocationState+0x71c>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
		break;
 8002f74:	e2d6      	b.n	8003524 <JoystickLocationState+0xc94>
 8002f76:	bf00      	nop
 8002f78:	1a63c1f8 	.word	0x1a63c1f8
 8002f7c:	404ca5dc 	.word	0x404ca5dc
 8002f80:	70a3d70a 	.word	0x70a3d70a
 8002f84:	3fa70a3d 	.word	0x3fa70a3d
 8002f88:	200009b8 	.word	0x200009b8
 8002f8c:	20000a84 	.word	0x20000a84
 8002f90:	20000a80 	.word	0x20000a80
 8002f94:	c2200000 	.word	0xc2200000
 8002f98:	42480000 	.word	0x42480000
 8002f9c:	42200000 	.word	0x42200000
 8002fa0:	20000fb4 	.word	0x20000fb4
 8002fa4:	42c80000 	.word	0x42c80000
 8002fa8:	20000a94 	.word	0x20000a94
 8002fac:	2000021c 	.word	0x2000021c
 8002fb0:	20000a1c 	.word	0x20000a1c
 8002fb4:	20000a88 	.word	0x20000a88
 8002fb8:	cccccccd 	.word	0xcccccccd
 8002fbc:	20000980 	.word	0x20000980

	//Get Place Tray 2nd Point
	case 4:
		if (GetPositionButton.flag == 1)
 8002fc0:	4bd5      	ldr	r3, [pc, #852]	; (8003318 <JoystickLocationState+0xa88>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	f040 8278 	bne.w	80034ba <JoystickLocationState+0xc2a>
		{
			PlaceTray.L2[0] = (registerFrame[68].U16)/10; //Place Tray X Position 2 //mm
 8002fca:	4bd4      	ldr	r3, [pc, #848]	; (800331c <JoystickLocationState+0xa8c>)
 8002fcc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002fd0:	4ad3      	ldr	r2, [pc, #844]	; (8003320 <JoystickLocationState+0xa90>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	08db      	lsrs	r3, r3, #3
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	ee07 3a90 	vmov	s15, r3
 8002fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fe2:	4bd0      	ldr	r3, [pc, #832]	; (8003324 <JoystickLocationState+0xa94>)
 8002fe4:	edc3 7a02 	vstr	s15, [r3, #8]
			PlaceTray.L2[1] = position*0.045; //Place Tray Y Position 2 //mm
 8002fe8:	4bcf      	ldr	r3, [pc, #828]	; (8003328 <JoystickLocationState+0xa98>)
 8002fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd faa0 	bl	8000534 <__aeabi_i2d>
 8002ff4:	a3c6      	add	r3, pc, #792	; (adr r3, 8003310 <JoystickLocationState+0xa80>)
 8002ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffa:	f7fd fb05 	bl	8000608 <__aeabi_dmul>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4610      	mov	r0, r2
 8003004:	4619      	mov	r1, r3
 8003006:	f7fd fdf7 	bl	8000bf8 <__aeabi_d2f>
 800300a:	4603      	mov	r3, r0
 800300c:	4ac5      	ldr	r2, [pc, #788]	; (8003324 <JoystickLocationState+0xa94>)
 800300e:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 8003010:	4bc1      	ldr	r3, [pc, #772]	; (8003318 <JoystickLocationState+0xa88>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]

			cos_Theta = (PlaceTray.L2[0]-PlaceTray.L1[0])/60;
 8003016:	4bc3      	ldr	r3, [pc, #780]	; (8003324 <JoystickLocationState+0xa94>)
 8003018:	ed93 7a02 	vldr	s14, [r3, #8]
 800301c:	4bc1      	ldr	r3, [pc, #772]	; (8003324 <JoystickLocationState+0xa94>)
 800301e:	edd3 7a00 	vldr	s15, [r3]
 8003022:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003026:	eddf 6ac1 	vldr	s13, [pc, #772]	; 800332c <JoystickLocationState+0xa9c>
 800302a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800302e:	4bc0      	ldr	r3, [pc, #768]	; (8003330 <JoystickLocationState+0xaa0>)
 8003030:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PlaceTray.L2[1]-PlaceTray.L1[1])/60;
 8003034:	4bbb      	ldr	r3, [pc, #748]	; (8003324 <JoystickLocationState+0xa94>)
 8003036:	ed93 7a03 	vldr	s14, [r3, #12]
 800303a:	4bba      	ldr	r3, [pc, #744]	; (8003324 <JoystickLocationState+0xa94>)
 800303c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003040:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003044:	eddf 6ab9 	vldr	s13, [pc, #740]	; 800332c <JoystickLocationState+0xa9c>
 8003048:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800304c:	4bb9      	ldr	r3, [pc, #740]	; (8003334 <JoystickLocationState+0xaa4>)
 800304e:	edc3 7a00 	vstr	s15, [r3]

			PlaceTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8003052:	4bb7      	ldr	r3, [pc, #732]	; (8003330 <JoystickLocationState+0xaa0>)
 8003054:	edd3 7a00 	vldr	s15, [r3]
 8003058:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800305c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003060:	4bb4      	ldr	r3, [pc, #720]	; (8003334 <JoystickLocationState+0xaa4>)
 8003062:	edd3 7a00 	vldr	s15, [r3]
 8003066:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800306a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800306e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003072:	4bac      	ldr	r3, [pc, #688]	; (8003324 <JoystickLocationState+0xa94>)
 8003074:	edd3 7a00 	vldr	s15, [r3]
 8003078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307c:	4ba9      	ldr	r3, [pc, #676]	; (8003324 <JoystickLocationState+0xa94>)
 800307e:	edc3 7a04 	vstr	s15, [r3, #16]
			PlaceTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PlaceTray.L1[1];
 8003082:	4bac      	ldr	r3, [pc, #688]	; (8003334 <JoystickLocationState+0xaa4>)
 8003084:	edd3 7a00 	vldr	s15, [r3]
 8003088:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800308c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003090:	4ba7      	ldr	r3, [pc, #668]	; (8003330 <JoystickLocationState+0xaa0>)
 8003092:	edd3 7a00 	vldr	s15, [r3]
 8003096:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 800309a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800309e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030a2:	4ba0      	ldr	r3, [pc, #640]	; (8003324 <JoystickLocationState+0xa94>)
 80030a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80030a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ac:	4b9d      	ldr	r3, [pc, #628]	; (8003324 <JoystickLocationState+0xa94>)
 80030ae:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PlaceTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PlaceTray.L1[0];
 80030b2:	4b9f      	ldr	r3, [pc, #636]	; (8003330 <JoystickLocationState+0xaa0>)
 80030b4:	edd3 7a00 	vldr	s15, [r3]
 80030b8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80030bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030c0:	4b9c      	ldr	r3, [pc, #624]	; (8003334 <JoystickLocationState+0xaa4>)
 80030c2:	edd3 7a00 	vldr	s15, [r3]
 80030c6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80030ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030d2:	4b94      	ldr	r3, [pc, #592]	; (8003324 <JoystickLocationState+0xa94>)
 80030d4:	edd3 7a00 	vldr	s15, [r3]
 80030d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030dc:	4b91      	ldr	r3, [pc, #580]	; (8003324 <JoystickLocationState+0xa94>)
 80030de:	edc3 7a05 	vstr	s15, [r3, #20]
			PlaceTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PlaceTray.L1[1];
 80030e2:	4b94      	ldr	r3, [pc, #592]	; (8003334 <JoystickLocationState+0xaa4>)
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80030ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030f0:	4b8f      	ldr	r3, [pc, #572]	; (8003330 <JoystickLocationState+0xaa0>)
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80030fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003102:	4b88      	ldr	r3, [pc, #544]	; (8003324 <JoystickLocationState+0xa94>)
 8003104:	edd3 7a01 	vldr	s15, [r3, #4]
 8003108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800310c:	4b85      	ldr	r3, [pc, #532]	; (8003324 <JoystickLocationState+0xa94>)
 800310e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PlaceTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8003112:	4b87      	ldr	r3, [pc, #540]	; (8003330 <JoystickLocationState+0xaa0>)
 8003114:	edd3 7a00 	vldr	s15, [r3]
 8003118:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8003338 <JoystickLocationState+0xaa8>
 800311c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003120:	4b84      	ldr	r3, [pc, #528]	; (8003334 <JoystickLocationState+0xaa4>)
 8003122:	edd3 7a00 	vldr	s15, [r3]
 8003126:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800312a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800312e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003132:	4b7c      	ldr	r3, [pc, #496]	; (8003324 <JoystickLocationState+0xa94>)
 8003134:	edd3 7a00 	vldr	s15, [r3]
 8003138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800313c:	4b79      	ldr	r3, [pc, #484]	; (8003324 <JoystickLocationState+0xa94>)
 800313e:	edc3 7a06 	vstr	s15, [r3, #24]
			PlaceTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PlaceTray.L1[1];
 8003142:	4b7c      	ldr	r3, [pc, #496]	; (8003334 <JoystickLocationState+0xaa4>)
 8003144:	edd3 7a00 	vldr	s15, [r3]
 8003148:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8003338 <JoystickLocationState+0xaa8>
 800314c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003150:	4b77      	ldr	r3, [pc, #476]	; (8003330 <JoystickLocationState+0xaa0>)
 8003152:	edd3 7a00 	vldr	s15, [r3]
 8003156:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 800315a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800315e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003162:	4b70      	ldr	r3, [pc, #448]	; (8003324 <JoystickLocationState+0xa94>)
 8003164:	edd3 7a01 	vldr	s15, [r3, #4]
 8003168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800316c:	4b6d      	ldr	r3, [pc, #436]	; (8003324 <JoystickLocationState+0xa94>)
 800316e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PlaceTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PlaceTray.L1[0];
 8003172:	4b6f      	ldr	r3, [pc, #444]	; (8003330 <JoystickLocationState+0xaa0>)
 8003174:	edd3 7a00 	vldr	s15, [r3]
 8003178:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800317c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003180:	4b6c      	ldr	r3, [pc, #432]	; (8003334 <JoystickLocationState+0xaa4>)
 8003182:	edd3 7a00 	vldr	s15, [r3]
 8003186:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800318a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800318e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003192:	4b64      	ldr	r3, [pc, #400]	; (8003324 <JoystickLocationState+0xa94>)
 8003194:	edd3 7a00 	vldr	s15, [r3]
 8003198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800319c:	4b61      	ldr	r3, [pc, #388]	; (8003324 <JoystickLocationState+0xa94>)
 800319e:	edc3 7a07 	vstr	s15, [r3, #28]
			PlaceTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PlaceTray.L1[1];
 80031a2:	4b64      	ldr	r3, [pc, #400]	; (8003334 <JoystickLocationState+0xaa4>)
 80031a4:	edd3 7a00 	vldr	s15, [r3]
 80031a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031b0:	4b5f      	ldr	r3, [pc, #380]	; (8003330 <JoystickLocationState+0xaa0>)
 80031b2:	edd3 7a00 	vldr	s15, [r3]
 80031b6:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 80031ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031c2:	4b58      	ldr	r3, [pc, #352]	; (8003324 <JoystickLocationState+0xa94>)
 80031c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80031c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031cc:	4b55      	ldr	r3, [pc, #340]	; (8003324 <JoystickLocationState+0xa94>)
 80031ce:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PlaceTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PlaceTray.L1[0];
 80031d2:	4b57      	ldr	r3, [pc, #348]	; (8003330 <JoystickLocationState+0xaa0>)
 80031d4:	edd3 7a00 	vldr	s15, [r3]
 80031d8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80031dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031e0:	4b54      	ldr	r3, [pc, #336]	; (8003334 <JoystickLocationState+0xaa4>)
 80031e2:	edd3 7a00 	vldr	s15, [r3]
 80031e6:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80031ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031f2:	4b4c      	ldr	r3, [pc, #304]	; (8003324 <JoystickLocationState+0xa94>)
 80031f4:	edd3 7a00 	vldr	s15, [r3]
 80031f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fc:	4b49      	ldr	r3, [pc, #292]	; (8003324 <JoystickLocationState+0xa94>)
 80031fe:	edc3 7a08 	vstr	s15, [r3, #32]
			PlaceTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PlaceTray.L1[1];
 8003202:	4b4c      	ldr	r3, [pc, #304]	; (8003334 <JoystickLocationState+0xaa4>)
 8003204:	edd3 7a00 	vldr	s15, [r3]
 8003208:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800320c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003210:	4b47      	ldr	r3, [pc, #284]	; (8003330 <JoystickLocationState+0xaa0>)
 8003212:	edd3 7a00 	vldr	s15, [r3]
 8003216:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 800321a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800321e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003222:	4b40      	ldr	r3, [pc, #256]	; (8003324 <JoystickLocationState+0xa94>)
 8003224:	edd3 7a01 	vldr	s15, [r3, #4]
 8003228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322c:	4b3d      	ldr	r3, [pc, #244]	; (8003324 <JoystickLocationState+0xa94>)
 800322e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PlaceTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PlaceTray.L1[0];
 8003232:	4b3f      	ldr	r3, [pc, #252]	; (8003330 <JoystickLocationState+0xaa0>)
 8003234:	edd3 7a00 	vldr	s15, [r3]
 8003238:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003338 <JoystickLocationState+0xaa8>
 800323c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003240:	4b3c      	ldr	r3, [pc, #240]	; (8003334 <JoystickLocationState+0xaa4>)
 8003242:	edd3 7a00 	vldr	s15, [r3]
 8003246:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800324a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800324e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003252:	4b34      	ldr	r3, [pc, #208]	; (8003324 <JoystickLocationState+0xa94>)
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800325c:	4b31      	ldr	r3, [pc, #196]	; (8003324 <JoystickLocationState+0xa94>)
 800325e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PlaceTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PlaceTray.L1[1];
 8003262:	4b34      	ldr	r3, [pc, #208]	; (8003334 <JoystickLocationState+0xaa4>)
 8003264:	edd3 7a00 	vldr	s15, [r3]
 8003268:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003338 <JoystickLocationState+0xaa8>
 800326c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003270:	4b2f      	ldr	r3, [pc, #188]	; (8003330 <JoystickLocationState+0xaa0>)
 8003272:	edd3 7a00 	vldr	s15, [r3]
 8003276:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 800327a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800327e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003282:	4b28      	ldr	r3, [pc, #160]	; (8003324 <JoystickLocationState+0xa94>)
 8003284:	edd3 7a01 	vldr	s15, [r3, #4]
 8003288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800328c:	4b25      	ldr	r3, [pc, #148]	; (8003324 <JoystickLocationState+0xa94>)
 800328e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PlaceTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003292:	4b27      	ldr	r3, [pc, #156]	; (8003330 <JoystickLocationState+0xaa0>)
 8003294:	edd3 7a00 	vldr	s15, [r3]
 8003298:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800329c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032a0:	4b24      	ldr	r3, [pc, #144]	; (8003334 <JoystickLocationState+0xaa4>)
 80032a2:	edd3 7a00 	vldr	s15, [r3]
 80032a6:	eddf 6a25 	vldr	s13, [pc, #148]	; 800333c <JoystickLocationState+0xaac>
 80032aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032b2:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <JoystickLocationState+0xa94>)
 80032b4:	edd3 7a00 	vldr	s15, [r3]
 80032b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032bc:	4b19      	ldr	r3, [pc, #100]	; (8003324 <JoystickLocationState+0xa94>)
 80032be:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PlaceTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PlaceTray.L1[1];
 80032c2:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <JoystickLocationState+0xaa4>)
 80032c4:	edd3 7a00 	vldr	s15, [r3]
 80032c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <JoystickLocationState+0xaa0>)
 80032d2:	edd3 7a00 	vldr	s15, [r3]
 80032d6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003340 <JoystickLocationState+0xab0>
 80032da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032e2:	4b10      	ldr	r3, [pc, #64]	; (8003324 <JoystickLocationState+0xa94>)
 80032e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80032e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ec:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <JoystickLocationState+0xa94>)
 80032ee:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PlaceTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PlaceTray.L1[0];
 80032f2:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <JoystickLocationState+0xaa0>)
 80032f4:	edd3 7a00 	vldr	s15, [r3]
 80032f8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80032fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <JoystickLocationState+0xaa4>)
 8003302:	edd3 7a00 	vldr	s15, [r3]
 8003306:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800333c <JoystickLocationState+0xaac>
 800330a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800330e:	e019      	b.n	8003344 <JoystickLocationState+0xab4>
 8003310:	70a3d70a 	.word	0x70a3d70a
 8003314:	3fa70a3d 	.word	0x3fa70a3d
 8003318:	20000a88 	.word	0x20000a88
 800331c:	20000fb4 	.word	0x20000fb4
 8003320:	cccccccd 	.word	0xcccccccd
 8003324:	20000a1c 	.word	0x20000a1c
 8003328:	20000980 	.word	0x20000980
 800332c:	42700000 	.word	0x42700000
 8003330:	20000a80 	.word	0x20000a80
 8003334:	20000a84 	.word	0x20000a84
 8003338:	42480000 	.word	0x42480000
 800333c:	42200000 	.word	0x42200000
 8003340:	c2200000 	.word	0xc2200000
 8003344:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003348:	4b7d      	ldr	r3, [pc, #500]	; (8003540 <JoystickLocationState+0xcb0>)
 800334a:	edd3 7a00 	vldr	s15, [r3]
 800334e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003352:	4b7b      	ldr	r3, [pc, #492]	; (8003540 <JoystickLocationState+0xcb0>)
 8003354:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PlaceTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003358:	4b7a      	ldr	r3, [pc, #488]	; (8003544 <JoystickLocationState+0xcb4>)
 800335a:	edd3 7a00 	vldr	s15, [r3]
 800335e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003362:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003366:	4b78      	ldr	r3, [pc, #480]	; (8003548 <JoystickLocationState+0xcb8>)
 8003368:	edd3 7a00 	vldr	s15, [r3]
 800336c:	eddf 6a77 	vldr	s13, [pc, #476]	; 800354c <JoystickLocationState+0xcbc>
 8003370:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003374:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003378:	4b71      	ldr	r3, [pc, #452]	; (8003540 <JoystickLocationState+0xcb0>)
 800337a:	edd3 7a01 	vldr	s15, [r3, #4]
 800337e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003382:	4b6f      	ldr	r3, [pc, #444]	; (8003540 <JoystickLocationState+0xcb0>)
 8003384:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PlaceTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003388:	4b6f      	ldr	r3, [pc, #444]	; (8003548 <JoystickLocationState+0xcb8>)
 800338a:	edd3 7a00 	vldr	s15, [r3]
 800338e:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003550 <JoystickLocationState+0xcc0>
 8003392:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003396:	4b6b      	ldr	r3, [pc, #428]	; (8003544 <JoystickLocationState+0xcb4>)
 8003398:	edd3 7a00 	vldr	s15, [r3]
 800339c:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8003554 <JoystickLocationState+0xcc4>
 80033a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033a8:	4b65      	ldr	r3, [pc, #404]	; (8003540 <JoystickLocationState+0xcb0>)
 80033aa:	edd3 7a00 	vldr	s15, [r3]
 80033ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b2:	4b63      	ldr	r3, [pc, #396]	; (8003540 <JoystickLocationState+0xcb0>)
 80033b4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PlaceTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PlaceTray.L1[1];
 80033b8:	4b62      	ldr	r3, [pc, #392]	; (8003544 <JoystickLocationState+0xcb4>)
 80033ba:	edd3 7a00 	vldr	s15, [r3]
 80033be:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003550 <JoystickLocationState+0xcc0>
 80033c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033c6:	4b60      	ldr	r3, [pc, #384]	; (8003548 <JoystickLocationState+0xcb8>)
 80033c8:	edd3 7a00 	vldr	s15, [r3]
 80033cc:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800354c <JoystickLocationState+0xcbc>
 80033d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033d8:	4b59      	ldr	r3, [pc, #356]	; (8003540 <JoystickLocationState+0xcb0>)
 80033da:	edd3 7a01 	vldr	s15, [r3, #4]
 80033de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e2:	4b57      	ldr	r3, [pc, #348]	; (8003540 <JoystickLocationState+0xcb0>)
 80033e4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PlaceTray.origin_x = PlaceTray.L1[0]+(50*sin_Theta);
 80033e8:	4b55      	ldr	r3, [pc, #340]	; (8003540 <JoystickLocationState+0xcb0>)
 80033ea:	ed93 7a00 	vldr	s14, [r3]
 80033ee:	4b55      	ldr	r3, [pc, #340]	; (8003544 <JoystickLocationState+0xcb4>)
 80033f0:	edd3 7a00 	vldr	s15, [r3]
 80033f4:	eddf 6a56 	vldr	s13, [pc, #344]	; 8003550 <JoystickLocationState+0xcc0>
 80033f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003400:	4b4f      	ldr	r3, [pc, #316]	; (8003540 <JoystickLocationState+0xcb0>)
 8003402:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			PlaceTray.origin_y = PlaceTray.L1[1]-(50*cos_Theta);
 8003406:	4b4e      	ldr	r3, [pc, #312]	; (8003540 <JoystickLocationState+0xcb0>)
 8003408:	ed93 7a01 	vldr	s14, [r3, #4]
 800340c:	4b4e      	ldr	r3, [pc, #312]	; (8003548 <JoystickLocationState+0xcb8>)
 800340e:	edd3 7a00 	vldr	s15, [r3]
 8003412:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003550 <JoystickLocationState+0xcc0>
 8003416:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800341a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800341e:	4b48      	ldr	r3, [pc, #288]	; (8003540 <JoystickLocationState+0xcb0>)
 8003420:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			PlaceTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 8003424:	4b48      	ldr	r3, [pc, #288]	; (8003548 <JoystickLocationState+0xcb8>)
 8003426:	edd3 7a00 	vldr	s15, [r3]
 800342a:	eeb0 0a67 	vmov.f32	s0, s15
 800342e:	f00c fd27 	bl	800fe80 <acosf>
 8003432:	ee10 3a10 	vmov	r3, s0
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd f88e 	bl	8000558 <__aeabi_f2d>
 800343c:	a33e      	add	r3, pc, #248	; (adr r3, 8003538 <JoystickLocationState+0xca8>)
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	f7fd f8e1 	bl	8000608 <__aeabi_dmul>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	f7fd fbd3 	bl	8000bf8 <__aeabi_d2f>
 8003452:	4603      	mov	r3, r0
 8003454:	4a3a      	ldr	r2, [pc, #232]	; (8003540 <JoystickLocationState+0xcb0>)
 8003456:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[35].U16 = PlaceTray.origin_x * 10;
 8003458:	4b39      	ldr	r3, [pc, #228]	; (8003540 <JoystickLocationState+0xcb0>)
 800345a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800345e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800346a:	ee17 3a90 	vmov	r3, s15
 800346e:	b29a      	uxth	r2, r3
 8003470:	4b39      	ldr	r3, [pc, #228]	; (8003558 <JoystickLocationState+0xcc8>)
 8003472:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[36].U16 = PlaceTray.origin_y * 10;
 8003476:	4b32      	ldr	r3, [pc, #200]	; (8003540 <JoystickLocationState+0xcb0>)
 8003478:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800347c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003488:	ee17 3a90 	vmov	r3, s15
 800348c:	b29a      	uxth	r2, r3
 800348e:	4b32      	ldr	r3, [pc, #200]	; (8003558 <JoystickLocationState+0xcc8>)
 8003490:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[37].U16 = PlaceTray.orientation * 100;
 8003494:	4b2a      	ldr	r3, [pc, #168]	; (8003540 <JoystickLocationState+0xcb0>)
 8003496:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800349a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800355c <JoystickLocationState+0xccc>
 800349e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034a6:	ee17 3a90 	vmov	r3, s15
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	4b2a      	ldr	r3, [pc, #168]	; (8003558 <JoystickLocationState+0xcc8>)
 80034ae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			registerFrame[16].U16 = 0;
 80034b2:	4b29      	ldr	r3, [pc, #164]	; (8003558 <JoystickLocationState+0xcc8>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 80034b8:	e036      	b.n	8003528 <JoystickLocationState+0xc98>
		else if (ResetButton.flag == 1)
 80034ba:	4b29      	ldr	r3, [pc, #164]	; (8003560 <JoystickLocationState+0xcd0>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d132      	bne.n	8003528 <JoystickLocationState+0xc98>
			ResetButton.flag = 0;
 80034c2:	4b27      	ldr	r3, [pc, #156]	; (8003560 <JoystickLocationState+0xcd0>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	609a      	str	r2, [r3, #8]
			state = 1;
 80034c8:	4b26      	ldr	r3, [pc, #152]	; (8003564 <JoystickLocationState+0xcd4>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
		break;
 80034ce:	e02b      	b.n	8003528 <JoystickLocationState+0xc98>
	case 5:
		EndEffectorState = 2;		//TestModeOff
 80034d0:	4b25      	ldr	r3, [pc, #148]	; (8003568 <JoystickLocationState+0xcd8>)
 80034d2:	2202      	movs	r2, #2
 80034d4:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 0;	//End Effector Status: Laser Off
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <JoystickLocationState+0xcc8>)
 80034d8:	2200      	movs	r2, #0
 80034da:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 80034dc:	4b23      	ldr	r3, [pc, #140]	; (800356c <JoystickLocationState+0xcdc>)
 80034de:	2201      	movs	r2, #1
 80034e0:	701a      	strb	r2, [r3, #0]

		HAL_Delay(10);
 80034e2:	200a      	movs	r0, #10
 80034e4:	f001 fa3a 	bl	800495c <HAL_Delay>

		EndEffectorState = 3;		//RunModeOn
 80034e8:	4b1f      	ldr	r3, [pc, #124]	; (8003568 <JoystickLocationState+0xcd8>)
 80034ea:	2203      	movs	r2, #3
 80034ec:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 2;	//End Effector Status: Gripper Power
 80034ee:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <JoystickLocationState+0xcc8>)
 80034f0:	2202      	movs	r2, #2
 80034f2:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 80034f4:	4b1d      	ldr	r3, [pc, #116]	; (800356c <JoystickLocationState+0xcdc>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]

		state = 1;
 80034fa:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <JoystickLocationState+0xcd4>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
		scheduler = 1;				//Go Pick
 8003500:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <JoystickLocationState+0xce0>)
 8003502:	2201      	movs	r2, #1
 8003504:	601a      	str	r2, [r3, #0]
		if (ResetButton.flag == 1)
 8003506:	4b16      	ldr	r3, [pc, #88]	; (8003560 <JoystickLocationState+0xcd0>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d10e      	bne.n	800352c <JoystickLocationState+0xc9c>
		{
			ResetButton.flag = 0;
 800350e:	4b14      	ldr	r3, [pc, #80]	; (8003560 <JoystickLocationState+0xcd0>)
 8003510:	2200      	movs	r2, #0
 8003512:	609a      	str	r2, [r3, #8]
			state = 1;
 8003514:	4b13      	ldr	r3, [pc, #76]	; (8003564 <JoystickLocationState+0xcd4>)
 8003516:	2201      	movs	r2, #1
 8003518:	601a      	str	r2, [r3, #0]
		}
		break;
 800351a:	e007      	b.n	800352c <JoystickLocationState+0xc9c>
		break;
 800351c:	bf00      	nop
 800351e:	e006      	b.n	800352e <JoystickLocationState+0xc9e>
		break;
 8003520:	bf00      	nop
 8003522:	e004      	b.n	800352e <JoystickLocationState+0xc9e>
		break;
 8003524:	bf00      	nop
 8003526:	e002      	b.n	800352e <JoystickLocationState+0xc9e>
		break;
 8003528:	bf00      	nop
 800352a:	e000      	b.n	800352e <JoystickLocationState+0xc9e>
		break;
 800352c:	bf00      	nop
	}
}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	f3af 8000 	nop.w
 8003538:	1a63c1f8 	.word	0x1a63c1f8
 800353c:	404ca5dc 	.word	0x404ca5dc
 8003540:	20000a1c 	.word	0x20000a1c
 8003544:	20000a84 	.word	0x20000a84
 8003548:	20000a80 	.word	0x20000a80
 800354c:	c2200000 	.word	0xc2200000
 8003550:	42480000 	.word	0x42480000
 8003554:	42200000 	.word	0x42200000
 8003558:	20000fb4 	.word	0x20000fb4
 800355c:	42c80000 	.word	0x42c80000
 8003560:	20000a94 	.word	0x20000a94
 8003564:	2000021c 	.word	0x2000021c
 8003568:	20000ad4 	.word	0x20000ad4
 800356c:	20000ad0 	.word	0x20000ad0
 8003570:	20000934 	.word	0x20000934

08003574 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	if(htim == &htim9) //check call back from timer9
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a06      	ldr	r2, [pc, #24]	; (8003598 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d105      	bne.n	8003590 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		if(scheduler == 3)
 8003584:	4b05      	ldr	r3, [pc, #20]	; (800359c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b03      	cmp	r3, #3
 800358a:	d101      	bne.n	8003590 <HAL_TIM_PeriodElapsedCallback+0x1c>
		{
			TrajectoryGenerator();
 800358c:	f000 f808 	bl	80035a0 <TrajectoryGenerator>
		}
	}
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20000684 	.word	0x20000684
 800359c:	20000934 	.word	0x20000934

080035a0 <TrajectoryGenerator>:


void TrajectoryGenerator()
{
 80035a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035a4:	af00      	add	r7, sp, #0
	switch(Trajectstate)
 80035a6:	4b93      	ldr	r3, [pc, #588]	; (80037f4 <TrajectoryGenerator+0x254>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	f200 84eb 	bhi.w	8003f86 <TrajectoryGenerator+0x9e6>
 80035b0:	a201      	add	r2, pc, #4	; (adr r2, 80035b8 <TrajectoryGenerator+0x18>)
 80035b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b6:	bf00      	nop
 80035b8:	080035c9 	.word	0x080035c9
 80035bc:	0800383d 	.word	0x0800383d
 80035c0:	08003b49 	.word	0x08003b49
 80035c4:	08003f71 	.word	0x08003f71
	{
	case 0: //initial Condition & Case Check
			qi = position;
 80035c8:	4b8b      	ldr	r3, [pc, #556]	; (80037f8 <TrajectoryGenerator+0x258>)
 80035ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ce:	ee07 3a90 	vmov	s15, r3
 80035d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035d6:	4b89      	ldr	r3, [pc, #548]	; (80037fc <TrajectoryGenerator+0x25c>)
 80035d8:	edc3 7a00 	vstr	s15, [r3]
			qdi = 0;
 80035dc:	4b88      	ldr	r3, [pc, #544]	; (8003800 <TrajectoryGenerator+0x260>)
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
			qd_max = 22222.22;  //1000 pulse/s
 80035e4:	4b87      	ldr	r3, [pc, #540]	; (8003804 <TrajectoryGenerator+0x264>)
 80035e6:	4a88      	ldr	r2, [pc, #544]	; (8003808 <TrajectoryGenerator+0x268>)
 80035e8:	601a      	str	r2, [r3, #0]
			qdd_max = 66666.67; //3000 pulse/s^2
 80035ea:	4b88      	ldr	r3, [pc, #544]	; (800380c <TrajectoryGenerator+0x26c>)
 80035ec:	4a88      	ldr	r2, [pc, #544]	; (8003810 <TrajectoryGenerator+0x270>)
 80035ee:	601a      	str	r2, [r3, #0]

		  if(qf > qi)
 80035f0:	4b88      	ldr	r3, [pc, #544]	; (8003814 <TrajectoryGenerator+0x274>)
 80035f2:	ed93 7a00 	vldr	s14, [r3]
 80035f6:	4b81      	ldr	r3, [pc, #516]	; (80037fc <TrajectoryGenerator+0x25c>)
 80035f8:	edd3 7a00 	vldr	s15, [r3]
 80035fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003604:	dd16      	ble.n	8003634 <TrajectoryGenerator+0x94>
		  {
			  t_half = sqrtf((qf-qi)/qdd_max);
 8003606:	4b83      	ldr	r3, [pc, #524]	; (8003814 <TrajectoryGenerator+0x274>)
 8003608:	ed93 7a00 	vldr	s14, [r3]
 800360c:	4b7b      	ldr	r3, [pc, #492]	; (80037fc <TrajectoryGenerator+0x25c>)
 800360e:	edd3 7a00 	vldr	s15, [r3]
 8003612:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003616:	4b7d      	ldr	r3, [pc, #500]	; (800380c <TrajectoryGenerator+0x26c>)
 8003618:	edd3 7a00 	vldr	s15, [r3]
 800361c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003620:	eeb0 0a66 	vmov.f32	s0, s13
 8003624:	f00c fc58 	bl	800fed8 <sqrtf>
 8003628:	eef0 7a40 	vmov.f32	s15, s0
 800362c:	4b7a      	ldr	r3, [pc, #488]	; (8003818 <TrajectoryGenerator+0x278>)
 800362e:	edc3 7a00 	vstr	s15, [r3]
 8003632:	e022      	b.n	800367a <TrajectoryGenerator+0xda>
		  }
		  else if(qf < qi)
 8003634:	4b77      	ldr	r3, [pc, #476]	; (8003814 <TrajectoryGenerator+0x274>)
 8003636:	ed93 7a00 	vldr	s14, [r3]
 800363a:	4b70      	ldr	r3, [pc, #448]	; (80037fc <TrajectoryGenerator+0x25c>)
 800363c:	edd3 7a00 	vldr	s15, [r3]
 8003640:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003648:	d517      	bpl.n	800367a <TrajectoryGenerator+0xda>
		  {
			  t_half = sqrtf(-1*(qf-qi)/qdd_max);
 800364a:	4b72      	ldr	r3, [pc, #456]	; (8003814 <TrajectoryGenerator+0x274>)
 800364c:	ed93 7a00 	vldr	s14, [r3]
 8003650:	4b6a      	ldr	r3, [pc, #424]	; (80037fc <TrajectoryGenerator+0x25c>)
 8003652:	edd3 7a00 	vldr	s15, [r3]
 8003656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800365a:	eeb1 7a67 	vneg.f32	s14, s15
 800365e:	4b6b      	ldr	r3, [pc, #428]	; (800380c <TrajectoryGenerator+0x26c>)
 8003660:	edd3 7a00 	vldr	s15, [r3]
 8003664:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003668:	eeb0 0a66 	vmov.f32	s0, s13
 800366c:	f00c fc34 	bl	800fed8 <sqrtf>
 8003670:	eef0 7a40 	vmov.f32	s15, s0
 8003674:	4b68      	ldr	r3, [pc, #416]	; (8003818 <TrajectoryGenerator+0x278>)
 8003676:	edc3 7a00 	vstr	s15, [r3]
		  }

		  if(qf-qi < 0)
 800367a:	4b66      	ldr	r3, [pc, #408]	; (8003814 <TrajectoryGenerator+0x274>)
 800367c:	ed93 7a00 	vldr	s14, [r3]
 8003680:	4b5e      	ldr	r3, [pc, #376]	; (80037fc <TrajectoryGenerator+0x25c>)
 8003682:	edd3 7a00 	vldr	s15, [r3]
 8003686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800368a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800368e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003692:	d50f      	bpl.n	80036b4 <TrajectoryGenerator+0x114>
		  {
			  qd_max = -1*qd_max;
 8003694:	4b5b      	ldr	r3, [pc, #364]	; (8003804 <TrajectoryGenerator+0x264>)
 8003696:	edd3 7a00 	vldr	s15, [r3]
 800369a:	eef1 7a67 	vneg.f32	s15, s15
 800369e:	4b59      	ldr	r3, [pc, #356]	; (8003804 <TrajectoryGenerator+0x264>)
 80036a0:	edc3 7a00 	vstr	s15, [r3]
			  qdd_max = -1*qdd_max;
 80036a4:	4b59      	ldr	r3, [pc, #356]	; (800380c <TrajectoryGenerator+0x26c>)
 80036a6:	edd3 7a00 	vldr	s15, [r3]
 80036aa:	eef1 7a67 	vneg.f32	s15, s15
 80036ae:	4b57      	ldr	r3, [pc, #348]	; (800380c <TrajectoryGenerator+0x26c>)
 80036b0:	edc3 7a00 	vstr	s15, [r3]
		  }

		  tacc = (qd_max-qdi)/qdd_max;
 80036b4:	4b53      	ldr	r3, [pc, #332]	; (8003804 <TrajectoryGenerator+0x264>)
 80036b6:	ed93 7a00 	vldr	s14, [r3]
 80036ba:	4b51      	ldr	r3, [pc, #324]	; (8003800 <TrajectoryGenerator+0x260>)
 80036bc:	edd3 7a00 	vldr	s15, [r3]
 80036c0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80036c4:	4b51      	ldr	r3, [pc, #324]	; (800380c <TrajectoryGenerator+0x26c>)
 80036c6:	ed93 7a00 	vldr	s14, [r3]
 80036ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ce:	4b53      	ldr	r3, [pc, #332]	; (800381c <TrajectoryGenerator+0x27c>)
 80036d0:	edc3 7a00 	vstr	s15, [r3]
		  qacc = qdi*tacc + 0.5*qdd_max*tacc*tacc;
 80036d4:	4b4a      	ldr	r3, [pc, #296]	; (8003800 <TrajectoryGenerator+0x260>)
 80036d6:	ed93 7a00 	vldr	s14, [r3]
 80036da:	4b50      	ldr	r3, [pc, #320]	; (800381c <TrajectoryGenerator+0x27c>)
 80036dc:	edd3 7a00 	vldr	s15, [r3]
 80036e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e4:	ee17 0a90 	vmov	r0, s15
 80036e8:	f7fc ff36 	bl	8000558 <__aeabi_f2d>
 80036ec:	4604      	mov	r4, r0
 80036ee:	460d      	mov	r5, r1
 80036f0:	4b46      	ldr	r3, [pc, #280]	; (800380c <TrajectoryGenerator+0x26c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fc ff2f 	bl	8000558 <__aeabi_f2d>
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	4b48      	ldr	r3, [pc, #288]	; (8003820 <TrajectoryGenerator+0x280>)
 8003700:	f7fc ff82 	bl	8000608 <__aeabi_dmul>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4690      	mov	r8, r2
 800370a:	4699      	mov	r9, r3
 800370c:	4b43      	ldr	r3, [pc, #268]	; (800381c <TrajectoryGenerator+0x27c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7fc ff21 	bl	8000558 <__aeabi_f2d>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4640      	mov	r0, r8
 800371c:	4649      	mov	r1, r9
 800371e:	f7fc ff73 	bl	8000608 <__aeabi_dmul>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4690      	mov	r8, r2
 8003728:	4699      	mov	r9, r3
 800372a:	4b3c      	ldr	r3, [pc, #240]	; (800381c <TrajectoryGenerator+0x27c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fc ff12 	bl	8000558 <__aeabi_f2d>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4640      	mov	r0, r8
 800373a:	4649      	mov	r1, r9
 800373c:	f7fc ff64 	bl	8000608 <__aeabi_dmul>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4620      	mov	r0, r4
 8003746:	4629      	mov	r1, r5
 8003748:	f7fc fda8 	bl	800029c <__adddf3>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	f7fd fa50 	bl	8000bf8 <__aeabi_d2f>
 8003758:	4603      	mov	r3, r0
 800375a:	4a32      	ldr	r2, [pc, #200]	; (8003824 <TrajectoryGenerator+0x284>)
 800375c:	6013      	str	r3, [r2, #0]
		  qdec = qacc;
 800375e:	4b31      	ldr	r3, [pc, #196]	; (8003824 <TrajectoryGenerator+0x284>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a31      	ldr	r2, [pc, #196]	; (8003828 <TrajectoryGenerator+0x288>)
 8003764:	6013      	str	r3, [r2, #0]
		  tconst = ((qf-qi)-qacc-qdec)/qd_max;
 8003766:	4b2b      	ldr	r3, [pc, #172]	; (8003814 <TrajectoryGenerator+0x274>)
 8003768:	ed93 7a00 	vldr	s14, [r3]
 800376c:	4b23      	ldr	r3, [pc, #140]	; (80037fc <TrajectoryGenerator+0x25c>)
 800376e:	edd3 7a00 	vldr	s15, [r3]
 8003772:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003776:	4b2b      	ldr	r3, [pc, #172]	; (8003824 <TrajectoryGenerator+0x284>)
 8003778:	edd3 7a00 	vldr	s15, [r3]
 800377c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003780:	4b29      	ldr	r3, [pc, #164]	; (8003828 <TrajectoryGenerator+0x288>)
 8003782:	edd3 7a00 	vldr	s15, [r3]
 8003786:	ee77 6a67 	vsub.f32	s13, s14, s15
 800378a:	4b1e      	ldr	r3, [pc, #120]	; (8003804 <TrajectoryGenerator+0x264>)
 800378c:	ed93 7a00 	vldr	s14, [r3]
 8003790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003794:	4b25      	ldr	r3, [pc, #148]	; (800382c <TrajectoryGenerator+0x28c>)
 8003796:	edc3 7a00 	vstr	s15, [r3]
		  tdec = tacc;
 800379a:	4b20      	ldr	r3, [pc, #128]	; (800381c <TrajectoryGenerator+0x27c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a24      	ldr	r2, [pc, #144]	; (8003830 <TrajectoryGenerator+0x290>)
 80037a0:	6013      	str	r3, [r2, #0]

		  if(fabs(qdi+qdd_max*t_half) >= fabs(qd_max))
 80037a2:	4b1a      	ldr	r3, [pc, #104]	; (800380c <TrajectoryGenerator+0x26c>)
 80037a4:	ed93 7a00 	vldr	s14, [r3]
 80037a8:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <TrajectoryGenerator+0x278>)
 80037aa:	edd3 7a00 	vldr	s15, [r3]
 80037ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037b2:	4b13      	ldr	r3, [pc, #76]	; (8003800 <TrajectoryGenerator+0x260>)
 80037b4:	edd3 7a00 	vldr	s15, [r3]
 80037b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037bc:	eeb0 7ae7 	vabs.f32	s14, s15
 80037c0:	4b10      	ldr	r3, [pc, #64]	; (8003804 <TrajectoryGenerator+0x264>)
 80037c2:	edd3 7a00 	vldr	s15, [r3]
 80037c6:	eef0 7ae7 	vabs.f32	s15, s15
 80037ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d2:	db07      	blt.n	80037e4 <TrajectoryGenerator+0x244>
		  {
			  initime = time;
 80037d4:	4b17      	ldr	r3, [pc, #92]	; (8003834 <TrajectoryGenerator+0x294>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a17      	ldr	r2, [pc, #92]	; (8003838 <TrajectoryGenerator+0x298>)
 80037da:	6013      	str	r3, [r2, #0]
			  Trajectstate = 2;
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <TrajectoryGenerator+0x254>)
 80037de:	2202      	movs	r2, #2
 80037e0:	601a      	str	r2, [r3, #0]
		  else
		  {
			  initime = time;
			  Trajectstate = 1;
		  }
		  break;
 80037e2:	e3d0      	b.n	8003f86 <TrajectoryGenerator+0x9e6>
			  initime = time;
 80037e4:	4b13      	ldr	r3, [pc, #76]	; (8003834 <TrajectoryGenerator+0x294>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a13      	ldr	r2, [pc, #76]	; (8003838 <TrajectoryGenerator+0x298>)
 80037ea:	6013      	str	r3, [r2, #0]
			  Trajectstate = 1;
 80037ec:	4b01      	ldr	r3, [pc, #4]	; (80037f4 <TrajectoryGenerator+0x254>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]
		  break;
 80037f2:	e3c8      	b.n	8003f86 <TrajectoryGenerator+0x9e6>
 80037f4:	20000940 	.word	0x20000940
 80037f8:	20000980 	.word	0x20000980
 80037fc:	2000094c 	.word	0x2000094c
 8003800:	20000950 	.word	0x20000950
 8003804:	2000020c 	.word	0x2000020c
 8003808:	46ad9c71 	.word	0x46ad9c71
 800380c:	20000210 	.word	0x20000210
 8003810:	47823556 	.word	0x47823556
 8003814:	20000948 	.word	0x20000948
 8003818:	20000958 	.word	0x20000958
 800381c:	2000096c 	.word	0x2000096c
 8003820:	3fe00000 	.word	0x3fe00000
 8003824:	20000970 	.word	0x20000970
 8003828:	20000974 	.word	0x20000974
 800382c:	20000978 	.word	0x20000978
 8003830:	2000097c 	.word	0x2000097c
 8003834:	20000944 	.word	0x20000944
 8003838:	20000954 	.word	0x20000954

	case 1:
		  if(time <= t_half + initime)
 800383c:	4bb6      	ldr	r3, [pc, #728]	; (8003b18 <TrajectoryGenerator+0x578>)
 800383e:	ed93 7a00 	vldr	s14, [r3]
 8003842:	4bb6      	ldr	r3, [pc, #728]	; (8003b1c <TrajectoryGenerator+0x57c>)
 8003844:	edd3 7a00 	vldr	s15, [r3]
 8003848:	ee37 7a27 	vadd.f32	s14, s14, s15
 800384c:	4bb4      	ldr	r3, [pc, #720]	; (8003b20 <TrajectoryGenerator+0x580>)
 800384e:	edd3 7a00 	vldr	s15, [r3]
 8003852:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385a:	f2c0 8092 	blt.w	8003982 <TrajectoryGenerator+0x3e2>
		  {
			  setacc = qdd_max;
 800385e:	4bb1      	ldr	r3, [pc, #708]	; (8003b24 <TrajectoryGenerator+0x584>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4ab1      	ldr	r2, [pc, #708]	; (8003b28 <TrajectoryGenerator+0x588>)
 8003864:	6013      	str	r3, [r2, #0]
			  setvelocity = qdi + setacc*(time-initime);
 8003866:	4bae      	ldr	r3, [pc, #696]	; (8003b20 <TrajectoryGenerator+0x580>)
 8003868:	ed93 7a00 	vldr	s14, [r3]
 800386c:	4bab      	ldr	r3, [pc, #684]	; (8003b1c <TrajectoryGenerator+0x57c>)
 800386e:	edd3 7a00 	vldr	s15, [r3]
 8003872:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003876:	4bac      	ldr	r3, [pc, #688]	; (8003b28 <TrajectoryGenerator+0x588>)
 8003878:	edd3 7a00 	vldr	s15, [r3]
 800387c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003880:	4baa      	ldr	r3, [pc, #680]	; (8003b2c <TrajectoryGenerator+0x58c>)
 8003882:	edd3 7a00 	vldr	s15, [r3]
 8003886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800388a:	4ba9      	ldr	r3, [pc, #676]	; (8003b30 <TrajectoryGenerator+0x590>)
 800388c:	edc3 7a00 	vstr	s15, [r3]
			  setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 8003890:	4ba3      	ldr	r3, [pc, #652]	; (8003b20 <TrajectoryGenerator+0x580>)
 8003892:	ed93 7a00 	vldr	s14, [r3]
 8003896:	4ba1      	ldr	r3, [pc, #644]	; (8003b1c <TrajectoryGenerator+0x57c>)
 8003898:	edd3 7a00 	vldr	s15, [r3]
 800389c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038a0:	4ba2      	ldr	r3, [pc, #648]	; (8003b2c <TrajectoryGenerator+0x58c>)
 80038a2:	edd3 7a00 	vldr	s15, [r3]
 80038a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038aa:	4ba2      	ldr	r3, [pc, #648]	; (8003b34 <TrajectoryGenerator+0x594>)
 80038ac:	edd3 7a00 	vldr	s15, [r3]
 80038b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038b4:	ee17 0a90 	vmov	r0, s15
 80038b8:	f7fc fe4e 	bl	8000558 <__aeabi_f2d>
 80038bc:	4604      	mov	r4, r0
 80038be:	460d      	mov	r5, r1
 80038c0:	4b99      	ldr	r3, [pc, #612]	; (8003b28 <TrajectoryGenerator+0x588>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fc fe47 	bl	8000558 <__aeabi_f2d>
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	4b9a      	ldr	r3, [pc, #616]	; (8003b38 <TrajectoryGenerator+0x598>)
 80038d0:	f7fc fe9a 	bl	8000608 <__aeabi_dmul>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4690      	mov	r8, r2
 80038da:	4699      	mov	r9, r3
 80038dc:	4b90      	ldr	r3, [pc, #576]	; (8003b20 <TrajectoryGenerator+0x580>)
 80038de:	ed93 7a00 	vldr	s14, [r3]
 80038e2:	4b8e      	ldr	r3, [pc, #568]	; (8003b1c <TrajectoryGenerator+0x57c>)
 80038e4:	edd3 7a00 	vldr	s15, [r3]
 80038e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038ec:	ee17 0a90 	vmov	r0, s15
 80038f0:	f7fc fe32 	bl	8000558 <__aeabi_f2d>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4640      	mov	r0, r8
 80038fa:	4649      	mov	r1, r9
 80038fc:	f7fc fe84 	bl	8000608 <__aeabi_dmul>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4690      	mov	r8, r2
 8003906:	4699      	mov	r9, r3
 8003908:	4b85      	ldr	r3, [pc, #532]	; (8003b20 <TrajectoryGenerator+0x580>)
 800390a:	ed93 7a00 	vldr	s14, [r3]
 800390e:	4b83      	ldr	r3, [pc, #524]	; (8003b1c <TrajectoryGenerator+0x57c>)
 8003910:	edd3 7a00 	vldr	s15, [r3]
 8003914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003918:	ee17 0a90 	vmov	r0, s15
 800391c:	f7fc fe1c 	bl	8000558 <__aeabi_f2d>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4640      	mov	r0, r8
 8003926:	4649      	mov	r1, r9
 8003928:	f7fc fe6e 	bl	8000608 <__aeabi_dmul>
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	4620      	mov	r0, r4
 8003932:	4629      	mov	r1, r5
 8003934:	f7fc fcb2 	bl	800029c <__adddf3>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4610      	mov	r0, r2
 800393e:	4619      	mov	r1, r3
 8003940:	f7fd f95a 	bl	8000bf8 <__aeabi_d2f>
 8003944:	4603      	mov	r3, r0
 8003946:	4a7d      	ldr	r2, [pc, #500]	; (8003b3c <TrajectoryGenerator+0x59c>)
 8003948:	6013      	str	r3, [r2, #0]

			  qi_1 = setposition;
 800394a:	4b7c      	ldr	r3, [pc, #496]	; (8003b3c <TrajectoryGenerator+0x59c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a7c      	ldr	r2, [pc, #496]	; (8003b40 <TrajectoryGenerator+0x5a0>)
 8003950:	6013      	str	r3, [r2, #0]
			  qdi_1 = setvelocity;
 8003952:	4b77      	ldr	r3, [pc, #476]	; (8003b30 <TrajectoryGenerator+0x590>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a7b      	ldr	r2, [pc, #492]	; (8003b44 <TrajectoryGenerator+0x5a4>)
 8003958:	6013      	str	r3, [r2, #0]
			  time += 0.001;
 800395a:	4b71      	ldr	r3, [pc, #452]	; (8003b20 <TrajectoryGenerator+0x580>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7fc fdfa 	bl	8000558 <__aeabi_f2d>
 8003964:	a36a      	add	r3, pc, #424	; (adr r3, 8003b10 <TrajectoryGenerator+0x570>)
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	f7fc fc97 	bl	800029c <__adddf3>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	f7fd f93f 	bl	8000bf8 <__aeabi_d2f>
 800397a:	4603      	mov	r3, r0
 800397c:	4a68      	ldr	r2, [pc, #416]	; (8003b20 <TrajectoryGenerator+0x580>)
 800397e:	6013      	str	r3, [r2, #0]
			  setacc = -qdd_max;
			  setvelocity = qdi_1 + setacc*(time-initime-t_half);
			  setposition = qi_1 + qdi_1*(time-initime-t_half)+0.5*setacc*(time-initime-t_half)*(time-initime-t_half);
			  time += 0.001;
		  }
		break;
 8003980:	e301      	b.n	8003f86 <TrajectoryGenerator+0x9e6>
		  else if(t_half + initime < time && time <= (2*t_half) + initime)
 8003982:	4b65      	ldr	r3, [pc, #404]	; (8003b18 <TrajectoryGenerator+0x578>)
 8003984:	ed93 7a00 	vldr	s14, [r3]
 8003988:	4b64      	ldr	r3, [pc, #400]	; (8003b1c <TrajectoryGenerator+0x57c>)
 800398a:	edd3 7a00 	vldr	s15, [r3]
 800398e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003992:	4b63      	ldr	r3, [pc, #396]	; (8003b20 <TrajectoryGenerator+0x580>)
 8003994:	edd3 7a00 	vldr	s15, [r3]
 8003998:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800399c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a0:	d400      	bmi.n	80039a4 <TrajectoryGenerator+0x404>
		break;
 80039a2:	e2f0      	b.n	8003f86 <TrajectoryGenerator+0x9e6>
		  else if(t_half + initime < time && time <= (2*t_half) + initime)
 80039a4:	4b5c      	ldr	r3, [pc, #368]	; (8003b18 <TrajectoryGenerator+0x578>)
 80039a6:	edd3 7a00 	vldr	s15, [r3]
 80039aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80039ae:	4b5b      	ldr	r3, [pc, #364]	; (8003b1c <TrajectoryGenerator+0x57c>)
 80039b0:	edd3 7a00 	vldr	s15, [r3]
 80039b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039b8:	4b59      	ldr	r3, [pc, #356]	; (8003b20 <TrajectoryGenerator+0x580>)
 80039ba:	edd3 7a00 	vldr	s15, [r3]
 80039be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c6:	da00      	bge.n	80039ca <TrajectoryGenerator+0x42a>
		break;
 80039c8:	e2dd      	b.n	8003f86 <TrajectoryGenerator+0x9e6>
			  setacc = -qdd_max;
 80039ca:	4b56      	ldr	r3, [pc, #344]	; (8003b24 <TrajectoryGenerator+0x584>)
 80039cc:	edd3 7a00 	vldr	s15, [r3]
 80039d0:	eef1 7a67 	vneg.f32	s15, s15
 80039d4:	4b54      	ldr	r3, [pc, #336]	; (8003b28 <TrajectoryGenerator+0x588>)
 80039d6:	edc3 7a00 	vstr	s15, [r3]
			  setvelocity = qdi_1 + setacc*(time-initime-t_half);
 80039da:	4b51      	ldr	r3, [pc, #324]	; (8003b20 <TrajectoryGenerator+0x580>)
 80039dc:	ed93 7a00 	vldr	s14, [r3]
 80039e0:	4b4e      	ldr	r3, [pc, #312]	; (8003b1c <TrajectoryGenerator+0x57c>)
 80039e2:	edd3 7a00 	vldr	s15, [r3]
 80039e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039ea:	4b4b      	ldr	r3, [pc, #300]	; (8003b18 <TrajectoryGenerator+0x578>)
 80039ec:	edd3 7a00 	vldr	s15, [r3]
 80039f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039f4:	4b4c      	ldr	r3, [pc, #304]	; (8003b28 <TrajectoryGenerator+0x588>)
 80039f6:	edd3 7a00 	vldr	s15, [r3]
 80039fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039fe:	4b51      	ldr	r3, [pc, #324]	; (8003b44 <TrajectoryGenerator+0x5a4>)
 8003a00:	edd3 7a00 	vldr	s15, [r3]
 8003a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a08:	4b49      	ldr	r3, [pc, #292]	; (8003b30 <TrajectoryGenerator+0x590>)
 8003a0a:	edc3 7a00 	vstr	s15, [r3]
			  setposition = qi_1 + qdi_1*(time-initime-t_half)+0.5*setacc*(time-initime-t_half)*(time-initime-t_half);
 8003a0e:	4b44      	ldr	r3, [pc, #272]	; (8003b20 <TrajectoryGenerator+0x580>)
 8003a10:	ed93 7a00 	vldr	s14, [r3]
 8003a14:	4b41      	ldr	r3, [pc, #260]	; (8003b1c <TrajectoryGenerator+0x57c>)
 8003a16:	edd3 7a00 	vldr	s15, [r3]
 8003a1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a1e:	4b3e      	ldr	r3, [pc, #248]	; (8003b18 <TrajectoryGenerator+0x578>)
 8003a20:	edd3 7a00 	vldr	s15, [r3]
 8003a24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a28:	4b46      	ldr	r3, [pc, #280]	; (8003b44 <TrajectoryGenerator+0x5a4>)
 8003a2a:	edd3 7a00 	vldr	s15, [r3]
 8003a2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a32:	4b43      	ldr	r3, [pc, #268]	; (8003b40 <TrajectoryGenerator+0x5a0>)
 8003a34:	edd3 7a00 	vldr	s15, [r3]
 8003a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a3c:	ee17 0a90 	vmov	r0, s15
 8003a40:	f7fc fd8a 	bl	8000558 <__aeabi_f2d>
 8003a44:	4604      	mov	r4, r0
 8003a46:	460d      	mov	r5, r1
 8003a48:	4b37      	ldr	r3, [pc, #220]	; (8003b28 <TrajectoryGenerator+0x588>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fc fd83 	bl	8000558 <__aeabi_f2d>
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	4b38      	ldr	r3, [pc, #224]	; (8003b38 <TrajectoryGenerator+0x598>)
 8003a58:	f7fc fdd6 	bl	8000608 <__aeabi_dmul>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4690      	mov	r8, r2
 8003a62:	4699      	mov	r9, r3
 8003a64:	4b2e      	ldr	r3, [pc, #184]	; (8003b20 <TrajectoryGenerator+0x580>)
 8003a66:	ed93 7a00 	vldr	s14, [r3]
 8003a6a:	4b2c      	ldr	r3, [pc, #176]	; (8003b1c <TrajectoryGenerator+0x57c>)
 8003a6c:	edd3 7a00 	vldr	s15, [r3]
 8003a70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a74:	4b28      	ldr	r3, [pc, #160]	; (8003b18 <TrajectoryGenerator+0x578>)
 8003a76:	edd3 7a00 	vldr	s15, [r3]
 8003a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a7e:	ee17 0a90 	vmov	r0, s15
 8003a82:	f7fc fd69 	bl	8000558 <__aeabi_f2d>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4640      	mov	r0, r8
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	f7fc fdbb 	bl	8000608 <__aeabi_dmul>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4690      	mov	r8, r2
 8003a98:	4699      	mov	r9, r3
 8003a9a:	4b21      	ldr	r3, [pc, #132]	; (8003b20 <TrajectoryGenerator+0x580>)
 8003a9c:	ed93 7a00 	vldr	s14, [r3]
 8003aa0:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <TrajectoryGenerator+0x57c>)
 8003aa2:	edd3 7a00 	vldr	s15, [r3]
 8003aa6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003aaa:	4b1b      	ldr	r3, [pc, #108]	; (8003b18 <TrajectoryGenerator+0x578>)
 8003aac:	edd3 7a00 	vldr	s15, [r3]
 8003ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ab4:	ee17 0a90 	vmov	r0, s15
 8003ab8:	f7fc fd4e 	bl	8000558 <__aeabi_f2d>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4640      	mov	r0, r8
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	f7fc fda0 	bl	8000608 <__aeabi_dmul>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4620      	mov	r0, r4
 8003ace:	4629      	mov	r1, r5
 8003ad0:	f7fc fbe4 	bl	800029c <__adddf3>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4619      	mov	r1, r3
 8003adc:	f7fd f88c 	bl	8000bf8 <__aeabi_d2f>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	4a16      	ldr	r2, [pc, #88]	; (8003b3c <TrajectoryGenerator+0x59c>)
 8003ae4:	6013      	str	r3, [r2, #0]
			  time += 0.001;
 8003ae6:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <TrajectoryGenerator+0x580>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fc fd34 	bl	8000558 <__aeabi_f2d>
 8003af0:	a307      	add	r3, pc, #28	; (adr r3, 8003b10 <TrajectoryGenerator+0x570>)
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	f7fc fbd1 	bl	800029c <__adddf3>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4610      	mov	r0, r2
 8003b00:	4619      	mov	r1, r3
 8003b02:	f7fd f879 	bl	8000bf8 <__aeabi_d2f>
 8003b06:	4603      	mov	r3, r0
 8003b08:	4a05      	ldr	r2, [pc, #20]	; (8003b20 <TrajectoryGenerator+0x580>)
 8003b0a:	6013      	str	r3, [r2, #0]
		break;
 8003b0c:	e23b      	b.n	8003f86 <TrajectoryGenerator+0x9e6>
 8003b0e:	bf00      	nop
 8003b10:	d2f1a9fc 	.word	0xd2f1a9fc
 8003b14:	3f50624d 	.word	0x3f50624d
 8003b18:	20000958 	.word	0x20000958
 8003b1c:	20000954 	.word	0x20000954
 8003b20:	20000944 	.word	0x20000944
 8003b24:	20000210 	.word	0x20000210
 8003b28:	200009b0 	.word	0x200009b0
 8003b2c:	20000950 	.word	0x20000950
 8003b30:	200009ac 	.word	0x200009ac
 8003b34:	2000094c 	.word	0x2000094c
 8003b38:	3fe00000 	.word	0x3fe00000
 8003b3c:	2000098c 	.word	0x2000098c
 8003b40:	20000964 	.word	0x20000964
 8003b44:	2000095c 	.word	0x2000095c

	case 2:
		 if(time <= tacc + initime)
 8003b48:	4b9d      	ldr	r3, [pc, #628]	; (8003dc0 <TrajectoryGenerator+0x820>)
 8003b4a:	ed93 7a00 	vldr	s14, [r3]
 8003b4e:	4b9d      	ldr	r3, [pc, #628]	; (8003dc4 <TrajectoryGenerator+0x824>)
 8003b50:	edd3 7a00 	vldr	s15, [r3]
 8003b54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b58:	4b9b      	ldr	r3, [pc, #620]	; (8003dc8 <TrajectoryGenerator+0x828>)
 8003b5a:	edd3 7a00 	vldr	s15, [r3]
 8003b5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b66:	f2c0 8092 	blt.w	8003c8e <TrajectoryGenerator+0x6ee>
		 {
			 setacc = qdd_max;
 8003b6a:	4b98      	ldr	r3, [pc, #608]	; (8003dcc <TrajectoryGenerator+0x82c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a98      	ldr	r2, [pc, #608]	; (8003dd0 <TrajectoryGenerator+0x830>)
 8003b70:	6013      	str	r3, [r2, #0]
			 setvelocity = qdi + setacc*(time-initime);
 8003b72:	4b95      	ldr	r3, [pc, #596]	; (8003dc8 <TrajectoryGenerator+0x828>)
 8003b74:	ed93 7a00 	vldr	s14, [r3]
 8003b78:	4b92      	ldr	r3, [pc, #584]	; (8003dc4 <TrajectoryGenerator+0x824>)
 8003b7a:	edd3 7a00 	vldr	s15, [r3]
 8003b7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b82:	4b93      	ldr	r3, [pc, #588]	; (8003dd0 <TrajectoryGenerator+0x830>)
 8003b84:	edd3 7a00 	vldr	s15, [r3]
 8003b88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b8c:	4b91      	ldr	r3, [pc, #580]	; (8003dd4 <TrajectoryGenerator+0x834>)
 8003b8e:	edd3 7a00 	vldr	s15, [r3]
 8003b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b96:	4b90      	ldr	r3, [pc, #576]	; (8003dd8 <TrajectoryGenerator+0x838>)
 8003b98:	edc3 7a00 	vstr	s15, [r3]
			 setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 8003b9c:	4b8a      	ldr	r3, [pc, #552]	; (8003dc8 <TrajectoryGenerator+0x828>)
 8003b9e:	ed93 7a00 	vldr	s14, [r3]
 8003ba2:	4b88      	ldr	r3, [pc, #544]	; (8003dc4 <TrajectoryGenerator+0x824>)
 8003ba4:	edd3 7a00 	vldr	s15, [r3]
 8003ba8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003bac:	4b89      	ldr	r3, [pc, #548]	; (8003dd4 <TrajectoryGenerator+0x834>)
 8003bae:	edd3 7a00 	vldr	s15, [r3]
 8003bb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bb6:	4b89      	ldr	r3, [pc, #548]	; (8003ddc <TrajectoryGenerator+0x83c>)
 8003bb8:	edd3 7a00 	vldr	s15, [r3]
 8003bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc0:	ee17 0a90 	vmov	r0, s15
 8003bc4:	f7fc fcc8 	bl	8000558 <__aeabi_f2d>
 8003bc8:	4604      	mov	r4, r0
 8003bca:	460d      	mov	r5, r1
 8003bcc:	4b80      	ldr	r3, [pc, #512]	; (8003dd0 <TrajectoryGenerator+0x830>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fc fcc1 	bl	8000558 <__aeabi_f2d>
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	4b81      	ldr	r3, [pc, #516]	; (8003de0 <TrajectoryGenerator+0x840>)
 8003bdc:	f7fc fd14 	bl	8000608 <__aeabi_dmul>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4690      	mov	r8, r2
 8003be6:	4699      	mov	r9, r3
 8003be8:	4b77      	ldr	r3, [pc, #476]	; (8003dc8 <TrajectoryGenerator+0x828>)
 8003bea:	ed93 7a00 	vldr	s14, [r3]
 8003bee:	4b75      	ldr	r3, [pc, #468]	; (8003dc4 <TrajectoryGenerator+0x824>)
 8003bf0:	edd3 7a00 	vldr	s15, [r3]
 8003bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bf8:	ee17 0a90 	vmov	r0, s15
 8003bfc:	f7fc fcac 	bl	8000558 <__aeabi_f2d>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4640      	mov	r0, r8
 8003c06:	4649      	mov	r1, r9
 8003c08:	f7fc fcfe 	bl	8000608 <__aeabi_dmul>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4690      	mov	r8, r2
 8003c12:	4699      	mov	r9, r3
 8003c14:	4b6c      	ldr	r3, [pc, #432]	; (8003dc8 <TrajectoryGenerator+0x828>)
 8003c16:	ed93 7a00 	vldr	s14, [r3]
 8003c1a:	4b6a      	ldr	r3, [pc, #424]	; (8003dc4 <TrajectoryGenerator+0x824>)
 8003c1c:	edd3 7a00 	vldr	s15, [r3]
 8003c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c24:	ee17 0a90 	vmov	r0, s15
 8003c28:	f7fc fc96 	bl	8000558 <__aeabi_f2d>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4640      	mov	r0, r8
 8003c32:	4649      	mov	r1, r9
 8003c34:	f7fc fce8 	bl	8000608 <__aeabi_dmul>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	4629      	mov	r1, r5
 8003c40:	f7fc fb2c 	bl	800029c <__adddf3>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f7fc ffd4 	bl	8000bf8 <__aeabi_d2f>
 8003c50:	4603      	mov	r3, r0
 8003c52:	4a64      	ldr	r2, [pc, #400]	; (8003de4 <TrajectoryGenerator+0x844>)
 8003c54:	6013      	str	r3, [r2, #0]

			 qi_1 = setposition;
 8003c56:	4b63      	ldr	r3, [pc, #396]	; (8003de4 <TrajectoryGenerator+0x844>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a63      	ldr	r2, [pc, #396]	; (8003de8 <TrajectoryGenerator+0x848>)
 8003c5c:	6013      	str	r3, [r2, #0]
			 qdi_1 = setvelocity;
 8003c5e:	4b5e      	ldr	r3, [pc, #376]	; (8003dd8 <TrajectoryGenerator+0x838>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a62      	ldr	r2, [pc, #392]	; (8003dec <TrajectoryGenerator+0x84c>)
 8003c64:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 8003c66:	4b58      	ldr	r3, [pc, #352]	; (8003dc8 <TrajectoryGenerator+0x828>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fc fc74 	bl	8000558 <__aeabi_f2d>
 8003c70:	a351      	add	r3, pc, #324	; (adr r3, 8003db8 <TrajectoryGenerator+0x818>)
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	f7fc fb11 	bl	800029c <__adddf3>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4610      	mov	r0, r2
 8003c80:	4619      	mov	r1, r3
 8003c82:	f7fc ffb9 	bl	8000bf8 <__aeabi_d2f>
 8003c86:	4603      	mov	r3, r0
 8003c88:	4a4f      	ldr	r2, [pc, #316]	; (8003dc8 <TrajectoryGenerator+0x828>)
 8003c8a:	6013      	str	r3, [r2, #0]
			 setacc = -qdd_max;
			 setvelocity = qdi_2 + setacc*(time-initime-tacc-tconst);
			 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
			 time += 0.001;
		 }
		 break;
 8003c8c:	e17b      	b.n	8003f86 <TrajectoryGenerator+0x9e6>
		 else if(tacc+initime < time && time <= initime+tacc+tconst)
 8003c8e:	4b4c      	ldr	r3, [pc, #304]	; (8003dc0 <TrajectoryGenerator+0x820>)
 8003c90:	ed93 7a00 	vldr	s14, [r3]
 8003c94:	4b4b      	ldr	r3, [pc, #300]	; (8003dc4 <TrajectoryGenerator+0x824>)
 8003c96:	edd3 7a00 	vldr	s15, [r3]
 8003c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c9e:	4b4a      	ldr	r3, [pc, #296]	; (8003dc8 <TrajectoryGenerator+0x828>)
 8003ca0:	edd3 7a00 	vldr	s15, [r3]
 8003ca4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cac:	d552      	bpl.n	8003d54 <TrajectoryGenerator+0x7b4>
 8003cae:	4b45      	ldr	r3, [pc, #276]	; (8003dc4 <TrajectoryGenerator+0x824>)
 8003cb0:	ed93 7a00 	vldr	s14, [r3]
 8003cb4:	4b42      	ldr	r3, [pc, #264]	; (8003dc0 <TrajectoryGenerator+0x820>)
 8003cb6:	edd3 7a00 	vldr	s15, [r3]
 8003cba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cbe:	4b4c      	ldr	r3, [pc, #304]	; (8003df0 <TrajectoryGenerator+0x850>)
 8003cc0:	edd3 7a00 	vldr	s15, [r3]
 8003cc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cc8:	4b3f      	ldr	r3, [pc, #252]	; (8003dc8 <TrajectoryGenerator+0x828>)
 8003cca:	edd3 7a00 	vldr	s15, [r3]
 8003cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd6:	db3d      	blt.n	8003d54 <TrajectoryGenerator+0x7b4>
			 setacc = 0;
 8003cd8:	4b3d      	ldr	r3, [pc, #244]	; (8003dd0 <TrajectoryGenerator+0x830>)
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
			 setvelocity = qd_max;
 8003ce0:	4b44      	ldr	r3, [pc, #272]	; (8003df4 <TrajectoryGenerator+0x854>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a3c      	ldr	r2, [pc, #240]	; (8003dd8 <TrajectoryGenerator+0x838>)
 8003ce6:	6013      	str	r3, [r2, #0]
			 setposition = qi_1 + qd_max*(time-initime-tacc);
 8003ce8:	4b37      	ldr	r3, [pc, #220]	; (8003dc8 <TrajectoryGenerator+0x828>)
 8003cea:	ed93 7a00 	vldr	s14, [r3]
 8003cee:	4b35      	ldr	r3, [pc, #212]	; (8003dc4 <TrajectoryGenerator+0x824>)
 8003cf0:	edd3 7a00 	vldr	s15, [r3]
 8003cf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cf8:	4b31      	ldr	r3, [pc, #196]	; (8003dc0 <TrajectoryGenerator+0x820>)
 8003cfa:	edd3 7a00 	vldr	s15, [r3]
 8003cfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d02:	4b3c      	ldr	r3, [pc, #240]	; (8003df4 <TrajectoryGenerator+0x854>)
 8003d04:	edd3 7a00 	vldr	s15, [r3]
 8003d08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d0c:	4b36      	ldr	r3, [pc, #216]	; (8003de8 <TrajectoryGenerator+0x848>)
 8003d0e:	edd3 7a00 	vldr	s15, [r3]
 8003d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d16:	4b33      	ldr	r3, [pc, #204]	; (8003de4 <TrajectoryGenerator+0x844>)
 8003d18:	edc3 7a00 	vstr	s15, [r3]
			 qi_2 = setposition;
 8003d1c:	4b31      	ldr	r3, [pc, #196]	; (8003de4 <TrajectoryGenerator+0x844>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a35      	ldr	r2, [pc, #212]	; (8003df8 <TrajectoryGenerator+0x858>)
 8003d22:	6013      	str	r3, [r2, #0]
			 qdi_2 = setvelocity;
 8003d24:	4b2c      	ldr	r3, [pc, #176]	; (8003dd8 <TrajectoryGenerator+0x838>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a34      	ldr	r2, [pc, #208]	; (8003dfc <TrajectoryGenerator+0x85c>)
 8003d2a:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 8003d2c:	4b26      	ldr	r3, [pc, #152]	; (8003dc8 <TrajectoryGenerator+0x828>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fc fc11 	bl	8000558 <__aeabi_f2d>
 8003d36:	a320      	add	r3, pc, #128	; (adr r3, 8003db8 <TrajectoryGenerator+0x818>)
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f7fc faae 	bl	800029c <__adddf3>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4610      	mov	r0, r2
 8003d46:	4619      	mov	r1, r3
 8003d48:	f7fc ff56 	bl	8000bf8 <__aeabi_d2f>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	4a1e      	ldr	r2, [pc, #120]	; (8003dc8 <TrajectoryGenerator+0x828>)
 8003d50:	6013      	str	r3, [r2, #0]
		 break;
 8003d52:	e118      	b.n	8003f86 <TrajectoryGenerator+0x9e6>
		 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8003d54:	4b1a      	ldr	r3, [pc, #104]	; (8003dc0 <TrajectoryGenerator+0x820>)
 8003d56:	ed93 7a00 	vldr	s14, [r3]
 8003d5a:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <TrajectoryGenerator+0x850>)
 8003d5c:	edd3 7a00 	vldr	s15, [r3]
 8003d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d64:	4b17      	ldr	r3, [pc, #92]	; (8003dc4 <TrajectoryGenerator+0x824>)
 8003d66:	edd3 7a00 	vldr	s15, [r3]
 8003d6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d6e:	4b16      	ldr	r3, [pc, #88]	; (8003dc8 <TrajectoryGenerator+0x828>)
 8003d70:	edd3 7a00 	vldr	s15, [r3]
 8003d74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7c:	d400      	bmi.n	8003d80 <TrajectoryGenerator+0x7e0>
		 break;
 8003d7e:	e102      	b.n	8003f86 <TrajectoryGenerator+0x9e6>
		 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <TrajectoryGenerator+0x820>)
 8003d82:	ed93 7a00 	vldr	s14, [r3]
 8003d86:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <TrajectoryGenerator+0x850>)
 8003d88:	edd3 7a00 	vldr	s15, [r3]
 8003d8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d90:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <TrajectoryGenerator+0x860>)
 8003d92:	edd3 7a00 	vldr	s15, [r3]
 8003d96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d9a:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <TrajectoryGenerator+0x824>)
 8003d9c:	edd3 7a00 	vldr	s15, [r3]
 8003da0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003da4:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <TrajectoryGenerator+0x828>)
 8003da6:	edd3 7a00 	vldr	s15, [r3]
 8003daa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db2:	da27      	bge.n	8003e04 <TrajectoryGenerator+0x864>
		 break;
 8003db4:	e0e7      	b.n	8003f86 <TrajectoryGenerator+0x9e6>
 8003db6:	bf00      	nop
 8003db8:	d2f1a9fc 	.word	0xd2f1a9fc
 8003dbc:	3f50624d 	.word	0x3f50624d
 8003dc0:	2000096c 	.word	0x2000096c
 8003dc4:	20000954 	.word	0x20000954
 8003dc8:	20000944 	.word	0x20000944
 8003dcc:	20000210 	.word	0x20000210
 8003dd0:	200009b0 	.word	0x200009b0
 8003dd4:	20000950 	.word	0x20000950
 8003dd8:	200009ac 	.word	0x200009ac
 8003ddc:	2000094c 	.word	0x2000094c
 8003de0:	3fe00000 	.word	0x3fe00000
 8003de4:	2000098c 	.word	0x2000098c
 8003de8:	20000964 	.word	0x20000964
 8003dec:	2000095c 	.word	0x2000095c
 8003df0:	20000978 	.word	0x20000978
 8003df4:	2000020c 	.word	0x2000020c
 8003df8:	20000968 	.word	0x20000968
 8003dfc:	20000960 	.word	0x20000960
 8003e00:	2000097c 	.word	0x2000097c
			 setacc = -qdd_max;
 8003e04:	4b64      	ldr	r3, [pc, #400]	; (8003f98 <TrajectoryGenerator+0x9f8>)
 8003e06:	edd3 7a00 	vldr	s15, [r3]
 8003e0a:	eef1 7a67 	vneg.f32	s15, s15
 8003e0e:	4b63      	ldr	r3, [pc, #396]	; (8003f9c <TrajectoryGenerator+0x9fc>)
 8003e10:	edc3 7a00 	vstr	s15, [r3]
			 setvelocity = qdi_2 + setacc*(time-initime-tacc-tconst);
 8003e14:	4b62      	ldr	r3, [pc, #392]	; (8003fa0 <TrajectoryGenerator+0xa00>)
 8003e16:	ed93 7a00 	vldr	s14, [r3]
 8003e1a:	4b62      	ldr	r3, [pc, #392]	; (8003fa4 <TrajectoryGenerator+0xa04>)
 8003e1c:	edd3 7a00 	vldr	s15, [r3]
 8003e20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e24:	4b60      	ldr	r3, [pc, #384]	; (8003fa8 <TrajectoryGenerator+0xa08>)
 8003e26:	edd3 7a00 	vldr	s15, [r3]
 8003e2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e2e:	4b5f      	ldr	r3, [pc, #380]	; (8003fac <TrajectoryGenerator+0xa0c>)
 8003e30:	edd3 7a00 	vldr	s15, [r3]
 8003e34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e38:	4b58      	ldr	r3, [pc, #352]	; (8003f9c <TrajectoryGenerator+0x9fc>)
 8003e3a:	edd3 7a00 	vldr	s15, [r3]
 8003e3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e42:	4b5b      	ldr	r3, [pc, #364]	; (8003fb0 <TrajectoryGenerator+0xa10>)
 8003e44:	edd3 7a00 	vldr	s15, [r3]
 8003e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e4c:	4b59      	ldr	r3, [pc, #356]	; (8003fb4 <TrajectoryGenerator+0xa14>)
 8003e4e:	edc3 7a00 	vstr	s15, [r3]
			 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
 8003e52:	4b53      	ldr	r3, [pc, #332]	; (8003fa0 <TrajectoryGenerator+0xa00>)
 8003e54:	ed93 7a00 	vldr	s14, [r3]
 8003e58:	4b52      	ldr	r3, [pc, #328]	; (8003fa4 <TrajectoryGenerator+0xa04>)
 8003e5a:	edd3 7a00 	vldr	s15, [r3]
 8003e5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e62:	4b51      	ldr	r3, [pc, #324]	; (8003fa8 <TrajectoryGenerator+0xa08>)
 8003e64:	edd3 7a00 	vldr	s15, [r3]
 8003e68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e6c:	4b4f      	ldr	r3, [pc, #316]	; (8003fac <TrajectoryGenerator+0xa0c>)
 8003e6e:	edd3 7a00 	vldr	s15, [r3]
 8003e72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e76:	4b4e      	ldr	r3, [pc, #312]	; (8003fb0 <TrajectoryGenerator+0xa10>)
 8003e78:	edd3 7a00 	vldr	s15, [r3]
 8003e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e80:	4b4d      	ldr	r3, [pc, #308]	; (8003fb8 <TrajectoryGenerator+0xa18>)
 8003e82:	edd3 7a00 	vldr	s15, [r3]
 8003e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e8a:	ee17 0a90 	vmov	r0, s15
 8003e8e:	f7fc fb63 	bl	8000558 <__aeabi_f2d>
 8003e92:	4604      	mov	r4, r0
 8003e94:	460d      	mov	r5, r1
 8003e96:	4b41      	ldr	r3, [pc, #260]	; (8003f9c <TrajectoryGenerator+0x9fc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fc fb5c 	bl	8000558 <__aeabi_f2d>
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	4b45      	ldr	r3, [pc, #276]	; (8003fbc <TrajectoryGenerator+0xa1c>)
 8003ea6:	f7fc fbaf 	bl	8000608 <__aeabi_dmul>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4690      	mov	r8, r2
 8003eb0:	4699      	mov	r9, r3
 8003eb2:	4b3b      	ldr	r3, [pc, #236]	; (8003fa0 <TrajectoryGenerator+0xa00>)
 8003eb4:	ed93 7a00 	vldr	s14, [r3]
 8003eb8:	4b3a      	ldr	r3, [pc, #232]	; (8003fa4 <TrajectoryGenerator+0xa04>)
 8003eba:	edd3 7a00 	vldr	s15, [r3]
 8003ebe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ec2:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <TrajectoryGenerator+0xa08>)
 8003ec4:	edd3 7a00 	vldr	s15, [r3]
 8003ec8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ecc:	4b37      	ldr	r3, [pc, #220]	; (8003fac <TrajectoryGenerator+0xa0c>)
 8003ece:	edd3 7a00 	vldr	s15, [r3]
 8003ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ed6:	ee17 0a90 	vmov	r0, s15
 8003eda:	f7fc fb3d 	bl	8000558 <__aeabi_f2d>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4640      	mov	r0, r8
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	f7fc fb8f 	bl	8000608 <__aeabi_dmul>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4690      	mov	r8, r2
 8003ef0:	4699      	mov	r9, r3
 8003ef2:	4b2b      	ldr	r3, [pc, #172]	; (8003fa0 <TrajectoryGenerator+0xa00>)
 8003ef4:	ed93 7a00 	vldr	s14, [r3]
 8003ef8:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <TrajectoryGenerator+0xa04>)
 8003efa:	edd3 7a00 	vldr	s15, [r3]
 8003efe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f02:	4b29      	ldr	r3, [pc, #164]	; (8003fa8 <TrajectoryGenerator+0xa08>)
 8003f04:	edd3 7a00 	vldr	s15, [r3]
 8003f08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f0c:	4b27      	ldr	r3, [pc, #156]	; (8003fac <TrajectoryGenerator+0xa0c>)
 8003f0e:	edd3 7a00 	vldr	s15, [r3]
 8003f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f16:	ee17 0a90 	vmov	r0, s15
 8003f1a:	f7fc fb1d 	bl	8000558 <__aeabi_f2d>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4640      	mov	r0, r8
 8003f24:	4649      	mov	r1, r9
 8003f26:	f7fc fb6f 	bl	8000608 <__aeabi_dmul>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4620      	mov	r0, r4
 8003f30:	4629      	mov	r1, r5
 8003f32:	f7fc f9b3 	bl	800029c <__adddf3>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f7fc fe5b 	bl	8000bf8 <__aeabi_d2f>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4a1e      	ldr	r2, [pc, #120]	; (8003fc0 <TrajectoryGenerator+0xa20>)
 8003f46:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 8003f48:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <TrajectoryGenerator+0xa00>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fc fb03 	bl	8000558 <__aeabi_f2d>
 8003f52:	a30f      	add	r3, pc, #60	; (adr r3, 8003f90 <TrajectoryGenerator+0x9f0>)
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	f7fc f9a0 	bl	800029c <__adddf3>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4610      	mov	r0, r2
 8003f62:	4619      	mov	r1, r3
 8003f64:	f7fc fe48 	bl	8000bf8 <__aeabi_d2f>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	4a0d      	ldr	r2, [pc, #52]	; (8003fa0 <TrajectoryGenerator+0xa00>)
 8003f6c:	6013      	str	r3, [r2, #0]
		 break;
 8003f6e:	e00a      	b.n	8003f86 <TrajectoryGenerator+0x9e6>
	case 3: // wait state
		setposition = position;
 8003f70:	4b14      	ldr	r3, [pc, #80]	; (8003fc4 <TrajectoryGenerator+0xa24>)
 8003f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f76:	ee07 3a90 	vmov	s15, r3
 8003f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f7e:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <TrajectoryGenerator+0xa20>)
 8003f80:	edc3 7a00 	vstr	s15, [r3]
		break;
 8003f84:	bf00      	nop
	}
}
 8003f86:	bf00      	nop
 8003f88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f8c:	f3af 8000 	nop.w
 8003f90:	d2f1a9fc 	.word	0xd2f1a9fc
 8003f94:	3f50624d 	.word	0x3f50624d
 8003f98:	20000210 	.word	0x20000210
 8003f9c:	200009b0 	.word	0x200009b0
 8003fa0:	20000944 	.word	0x20000944
 8003fa4:	20000954 	.word	0x20000954
 8003fa8:	2000096c 	.word	0x2000096c
 8003fac:	20000978 	.word	0x20000978
 8003fb0:	20000960 	.word	0x20000960
 8003fb4:	200009ac 	.word	0x200009ac
 8003fb8:	20000968 	.word	0x20000968
 8003fbc:	3fe00000 	.word	0x3fe00000
 8003fc0:	2000098c 	.word	0x2000098c
 8003fc4:	20000980 	.word	0x20000980

08003fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fcc:	b672      	cpsid	i
}
 8003fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fd0:	e7fe      	b.n	8003fd0 <Error_Handler+0x8>
	...

08003fd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	4b10      	ldr	r3, [pc, #64]	; (8004020 <HAL_MspInit+0x4c>)
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	4a0f      	ldr	r2, [pc, #60]	; (8004020 <HAL_MspInit+0x4c>)
 8003fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fea:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <HAL_MspInit+0x4c>)
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff2:	607b      	str	r3, [r7, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	603b      	str	r3, [r7, #0]
 8003ffa:	4b09      	ldr	r3, [pc, #36]	; (8004020 <HAL_MspInit+0x4c>)
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	4a08      	ldr	r2, [pc, #32]	; (8004020 <HAL_MspInit+0x4c>)
 8004000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004004:	6413      	str	r3, [r2, #64]	; 0x40
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_MspInit+0x4c>)
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004012:	2007      	movs	r0, #7
 8004014:	f001 f998 	bl	8005348 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004018:	bf00      	nop
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40023800 	.word	0x40023800

08004024 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08a      	sub	sp, #40	; 0x28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402c:	f107 0314 	add.w	r3, r7, #20
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a2f      	ldr	r2, [pc, #188]	; (8004100 <HAL_ADC_MspInit+0xdc>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d157      	bne.n	80040f6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	4b2e      	ldr	r3, [pc, #184]	; (8004104 <HAL_ADC_MspInit+0xe0>)
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	4a2d      	ldr	r2, [pc, #180]	; (8004104 <HAL_ADC_MspInit+0xe0>)
 8004050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004054:	6453      	str	r3, [r2, #68]	; 0x44
 8004056:	4b2b      	ldr	r3, [pc, #172]	; (8004104 <HAL_ADC_MspInit+0xe0>)
 8004058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	4b27      	ldr	r3, [pc, #156]	; (8004104 <HAL_ADC_MspInit+0xe0>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	4a26      	ldr	r2, [pc, #152]	; (8004104 <HAL_ADC_MspInit+0xe0>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	6313      	str	r3, [r2, #48]	; 0x30
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <HAL_ADC_MspInit+0xe0>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800407e:	2303      	movs	r3, #3
 8004080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004082:	2303      	movs	r3, #3
 8004084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800408a:	f107 0314 	add.w	r3, r7, #20
 800408e:	4619      	mov	r1, r3
 8004090:	481d      	ldr	r0, [pc, #116]	; (8004108 <HAL_ADC_MspInit+0xe4>)
 8004092:	f001 fdb7 	bl	8005c04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004096:	4b1d      	ldr	r3, [pc, #116]	; (800410c <HAL_ADC_MspInit+0xe8>)
 8004098:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <HAL_ADC_MspInit+0xec>)
 800409a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800409c:	4b1b      	ldr	r3, [pc, #108]	; (800410c <HAL_ADC_MspInit+0xe8>)
 800409e:	2200      	movs	r2, #0
 80040a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040a2:	4b1a      	ldr	r3, [pc, #104]	; (800410c <HAL_ADC_MspInit+0xe8>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80040a8:	4b18      	ldr	r3, [pc, #96]	; (800410c <HAL_ADC_MspInit+0xe8>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80040ae:	4b17      	ldr	r3, [pc, #92]	; (800410c <HAL_ADC_MspInit+0xe8>)
 80040b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040b4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80040b6:	4b15      	ldr	r3, [pc, #84]	; (800410c <HAL_ADC_MspInit+0xe8>)
 80040b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040bc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80040be:	4b13      	ldr	r3, [pc, #76]	; (800410c <HAL_ADC_MspInit+0xe8>)
 80040c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80040c6:	4b11      	ldr	r3, [pc, #68]	; (800410c <HAL_ADC_MspInit+0xe8>)
 80040c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80040ce:	4b0f      	ldr	r3, [pc, #60]	; (800410c <HAL_ADC_MspInit+0xe8>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040d4:	4b0d      	ldr	r3, [pc, #52]	; (800410c <HAL_ADC_MspInit+0xe8>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80040da:	480c      	ldr	r0, [pc, #48]	; (800410c <HAL_ADC_MspInit+0xe8>)
 80040dc:	f001 f976 	bl	80053cc <HAL_DMA_Init>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80040e6:	f7ff ff6f 	bl	8003fc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a07      	ldr	r2, [pc, #28]	; (800410c <HAL_ADC_MspInit+0xe8>)
 80040ee:	639a      	str	r2, [r3, #56]	; 0x38
 80040f0:	4a06      	ldr	r2, [pc, #24]	; (800410c <HAL_ADC_MspInit+0xe8>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80040f6:	bf00      	nop
 80040f8:	3728      	adds	r7, #40	; 0x28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40012000 	.word	0x40012000
 8004104:	40023800 	.word	0x40023800
 8004108:	40020000 	.word	0x40020000
 800410c:	20000468 	.word	0x20000468
 8004110:	40026410 	.word	0x40026410

08004114 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08a      	sub	sp, #40	; 0x28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800411c:	f107 0314 	add.w	r3, r7, #20
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a21      	ldr	r2, [pc, #132]	; (80041b8 <HAL_I2C_MspInit+0xa4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d13c      	bne.n	80041b0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	4b20      	ldr	r3, [pc, #128]	; (80041bc <HAL_I2C_MspInit+0xa8>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	4a1f      	ldr	r2, [pc, #124]	; (80041bc <HAL_I2C_MspInit+0xa8>)
 8004140:	f043 0302 	orr.w	r3, r3, #2
 8004144:	6313      	str	r3, [r2, #48]	; 0x30
 8004146:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <HAL_I2C_MspInit+0xa8>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004152:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004158:	2312      	movs	r3, #18
 800415a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415c:	2300      	movs	r3, #0
 800415e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004160:	2303      	movs	r3, #3
 8004162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004164:	2304      	movs	r3, #4
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004168:	f107 0314 	add.w	r3, r7, #20
 800416c:	4619      	mov	r1, r3
 800416e:	4814      	ldr	r0, [pc, #80]	; (80041c0 <HAL_I2C_MspInit+0xac>)
 8004170:	f001 fd48 	bl	8005c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	4b10      	ldr	r3, [pc, #64]	; (80041bc <HAL_I2C_MspInit+0xa8>)
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	4a0f      	ldr	r2, [pc, #60]	; (80041bc <HAL_I2C_MspInit+0xa8>)
 800417e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004182:	6413      	str	r3, [r2, #64]	; 0x40
 8004184:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <HAL_I2C_MspInit+0xa8>)
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004190:	2200      	movs	r2, #0
 8004192:	2100      	movs	r1, #0
 8004194:	201f      	movs	r0, #31
 8004196:	f001 f8e2 	bl	800535e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800419a:	201f      	movs	r0, #31
 800419c:	f001 f8fb 	bl	8005396 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80041a0:	2200      	movs	r2, #0
 80041a2:	2100      	movs	r1, #0
 80041a4:	2020      	movs	r0, #32
 80041a6:	f001 f8da 	bl	800535e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80041aa:	2020      	movs	r0, #32
 80041ac:	f001 f8f3 	bl	8005396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80041b0:	bf00      	nop
 80041b2:	3728      	adds	r7, #40	; 0x28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40005400 	.word	0x40005400
 80041bc:	40023800 	.word	0x40023800
 80041c0:	40020400 	.word	0x40020400

080041c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a12      	ldr	r2, [pc, #72]	; (800421c <HAL_TIM_PWM_MspInit+0x58>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d11d      	bne.n	8004212 <HAL_TIM_PWM_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	4b11      	ldr	r3, [pc, #68]	; (8004220 <HAL_TIM_PWM_MspInit+0x5c>)
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	4a10      	ldr	r2, [pc, #64]	; (8004220 <HAL_TIM_PWM_MspInit+0x5c>)
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	6453      	str	r3, [r2, #68]	; 0x44
 80041e6:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <HAL_TIM_PWM_MspInit+0x5c>)
 80041e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80041f2:	2200      	movs	r2, #0
 80041f4:	2100      	movs	r1, #0
 80041f6:	2018      	movs	r0, #24
 80041f8:	f001 f8b1 	bl	800535e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80041fc:	2018      	movs	r0, #24
 80041fe:	f001 f8ca 	bl	8005396 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004202:	2200      	movs	r2, #0
 8004204:	2100      	movs	r1, #0
 8004206:	201a      	movs	r0, #26
 8004208:	f001 f8a9 	bl	800535e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800420c:	201a      	movs	r0, #26
 800420e:	f001 f8c2 	bl	8005396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40023800 	.word	0x40023800

08004224 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08a      	sub	sp, #40	; 0x28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800422c:	f107 0314 	add.w	r3, r7, #20
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	60da      	str	r2, [r3, #12]
 800423a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a19      	ldr	r2, [pc, #100]	; (80042a8 <HAL_TIM_Encoder_MspInit+0x84>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d12b      	bne.n	800429e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	4b18      	ldr	r3, [pc, #96]	; (80042ac <HAL_TIM_Encoder_MspInit+0x88>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	4a17      	ldr	r2, [pc, #92]	; (80042ac <HAL_TIM_Encoder_MspInit+0x88>)
 8004250:	f043 0302 	orr.w	r3, r3, #2
 8004254:	6413      	str	r3, [r2, #64]	; 0x40
 8004256:	4b15      	ldr	r3, [pc, #84]	; (80042ac <HAL_TIM_Encoder_MspInit+0x88>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	4b11      	ldr	r3, [pc, #68]	; (80042ac <HAL_TIM_Encoder_MspInit+0x88>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	4a10      	ldr	r2, [pc, #64]	; (80042ac <HAL_TIM_Encoder_MspInit+0x88>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	6313      	str	r3, [r2, #48]	; 0x30
 8004272:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <HAL_TIM_Encoder_MspInit+0x88>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800427e:	23c0      	movs	r3, #192	; 0xc0
 8004280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004282:	2302      	movs	r3, #2
 8004284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800428a:	2300      	movs	r3, #0
 800428c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800428e:	2302      	movs	r3, #2
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004292:	f107 0314 	add.w	r3, r7, #20
 8004296:	4619      	mov	r1, r3
 8004298:	4805      	ldr	r0, [pc, #20]	; (80042b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800429a:	f001 fcb3 	bl	8005c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800429e:	bf00      	nop
 80042a0:	3728      	adds	r7, #40	; 0x28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40000400 	.word	0x40000400
 80042ac:	40023800 	.word	0x40023800
 80042b0:	40020000 	.word	0x40020000

080042b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <HAL_TIM_Base_MspInit+0x80>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d116      	bne.n	80042f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	4b1b      	ldr	r3, [pc, #108]	; (8004338 <HAL_TIM_Base_MspInit+0x84>)
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	4a1a      	ldr	r2, [pc, #104]	; (8004338 <HAL_TIM_Base_MspInit+0x84>)
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d4:	6453      	str	r3, [r2, #68]	; 0x44
 80042d6:	4b18      	ldr	r3, [pc, #96]	; (8004338 <HAL_TIM_Base_MspInit+0x84>)
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80042e2:	2200      	movs	r2, #0
 80042e4:	2100      	movs	r1, #0
 80042e6:	2018      	movs	r0, #24
 80042e8:	f001 f839 	bl	800535e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80042ec:	2018      	movs	r0, #24
 80042ee:	f001 f852 	bl	8005396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80042f2:	e01a      	b.n	800432a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a10      	ldr	r2, [pc, #64]	; (800433c <HAL_TIM_Base_MspInit+0x88>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d115      	bne.n	800432a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80042fe:	2300      	movs	r3, #0
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <HAL_TIM_Base_MspInit+0x84>)
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	4a0c      	ldr	r2, [pc, #48]	; (8004338 <HAL_TIM_Base_MspInit+0x84>)
 8004308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800430c:	6453      	str	r3, [r2, #68]	; 0x44
 800430e:	4b0a      	ldr	r3, [pc, #40]	; (8004338 <HAL_TIM_Base_MspInit+0x84>)
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800431a:	2200      	movs	r2, #0
 800431c:	2100      	movs	r1, #0
 800431e:	201a      	movs	r0, #26
 8004320:	f001 f81d 	bl	800535e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004324:	201a      	movs	r0, #26
 8004326:	f001 f836 	bl	8005396 <HAL_NVIC_EnableIRQ>
}
 800432a:	bf00      	nop
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40014000 	.word	0x40014000
 8004338:	40023800 	.word	0x40023800
 800433c:	40014800 	.word	0x40014800

08004340 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004348:	f107 030c 	add.w	r3, r7, #12
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	605a      	str	r2, [r3, #4]
 8004352:	609a      	str	r2, [r3, #8]
 8004354:	60da      	str	r2, [r3, #12]
 8004356:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a12      	ldr	r2, [pc, #72]	; (80043a8 <HAL_TIM_MspPostInit+0x68>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d11e      	bne.n	80043a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004362:	2300      	movs	r3, #0
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	4b11      	ldr	r3, [pc, #68]	; (80043ac <HAL_TIM_MspPostInit+0x6c>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	4a10      	ldr	r2, [pc, #64]	; (80043ac <HAL_TIM_MspPostInit+0x6c>)
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	6313      	str	r3, [r2, #48]	; 0x30
 8004372:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <HAL_TIM_MspPostInit+0x6c>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	60bb      	str	r3, [r7, #8]
 800437c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800437e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004382:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004384:	2302      	movs	r3, #2
 8004386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800438c:	2300      	movs	r3, #0
 800438e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004390:	2301      	movs	r3, #1
 8004392:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004394:	f107 030c 	add.w	r3, r7, #12
 8004398:	4619      	mov	r1, r3
 800439a:	4805      	ldr	r0, [pc, #20]	; (80043b0 <HAL_TIM_MspPostInit+0x70>)
 800439c:	f001 fc32 	bl	8005c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80043a0:	bf00      	nop
 80043a2:	3720      	adds	r7, #32
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40010000 	.word	0x40010000
 80043ac:	40023800 	.word	0x40023800
 80043b0:	40020000 	.word	0x40020000

080043b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08c      	sub	sp, #48	; 0x30
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043bc:	f107 031c 	add.w	r3, r7, #28
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	605a      	str	r2, [r3, #4]
 80043c6:	609a      	str	r2, [r3, #8]
 80043c8:	60da      	str	r2, [r3, #12]
 80043ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a60      	ldr	r2, [pc, #384]	; (8004554 <HAL_UART_MspInit+0x1a0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d153      	bne.n	800447e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043d6:	2300      	movs	r3, #0
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	4b5f      	ldr	r3, [pc, #380]	; (8004558 <HAL_UART_MspInit+0x1a4>)
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	4a5e      	ldr	r2, [pc, #376]	; (8004558 <HAL_UART_MspInit+0x1a4>)
 80043e0:	f043 0310 	orr.w	r3, r3, #16
 80043e4:	6453      	str	r3, [r2, #68]	; 0x44
 80043e6:	4b5c      	ldr	r3, [pc, #368]	; (8004558 <HAL_UART_MspInit+0x1a4>)
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	f003 0310 	and.w	r3, r3, #16
 80043ee:	61bb      	str	r3, [r7, #24]
 80043f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	4b58      	ldr	r3, [pc, #352]	; (8004558 <HAL_UART_MspInit+0x1a4>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	4a57      	ldr	r2, [pc, #348]	; (8004558 <HAL_UART_MspInit+0x1a4>)
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	6313      	str	r3, [r2, #48]	; 0x30
 8004402:	4b55      	ldr	r3, [pc, #340]	; (8004558 <HAL_UART_MspInit+0x1a4>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	4b51      	ldr	r3, [pc, #324]	; (8004558 <HAL_UART_MspInit+0x1a4>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	4a50      	ldr	r2, [pc, #320]	; (8004558 <HAL_UART_MspInit+0x1a4>)
 8004418:	f043 0302 	orr.w	r3, r3, #2
 800441c:	6313      	str	r3, [r2, #48]	; 0x30
 800441e:	4b4e      	ldr	r3, [pc, #312]	; (8004558 <HAL_UART_MspInit+0x1a4>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	613b      	str	r3, [r7, #16]
 8004428:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800442a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004430:	2302      	movs	r3, #2
 8004432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004434:	2300      	movs	r3, #0
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004438:	2303      	movs	r3, #3
 800443a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800443c:	2307      	movs	r3, #7
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004440:	f107 031c 	add.w	r3, r7, #28
 8004444:	4619      	mov	r1, r3
 8004446:	4845      	ldr	r0, [pc, #276]	; (800455c <HAL_UART_MspInit+0x1a8>)
 8004448:	f001 fbdc 	bl	8005c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004450:	2302      	movs	r3, #2
 8004452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004454:	2300      	movs	r3, #0
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004458:	2303      	movs	r3, #3
 800445a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800445c:	2307      	movs	r3, #7
 800445e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004460:	f107 031c 	add.w	r3, r7, #28
 8004464:	4619      	mov	r1, r3
 8004466:	483e      	ldr	r0, [pc, #248]	; (8004560 <HAL_UART_MspInit+0x1ac>)
 8004468:	f001 fbcc 	bl	8005c04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800446c:	2200      	movs	r2, #0
 800446e:	2100      	movs	r1, #0
 8004470:	2025      	movs	r0, #37	; 0x25
 8004472:	f000 ff74 	bl	800535e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004476:	2025      	movs	r0, #37	; 0x25
 8004478:	f000 ff8d 	bl	8005396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800447c:	e066      	b.n	800454c <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART2)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a38      	ldr	r2, [pc, #224]	; (8004564 <HAL_UART_MspInit+0x1b0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d161      	bne.n	800454c <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	4b32      	ldr	r3, [pc, #200]	; (8004558 <HAL_UART_MspInit+0x1a4>)
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	4a31      	ldr	r2, [pc, #196]	; (8004558 <HAL_UART_MspInit+0x1a4>)
 8004492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004496:	6413      	str	r3, [r2, #64]	; 0x40
 8004498:	4b2f      	ldr	r3, [pc, #188]	; (8004558 <HAL_UART_MspInit+0x1a4>)
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044a4:	2300      	movs	r3, #0
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	4b2b      	ldr	r3, [pc, #172]	; (8004558 <HAL_UART_MspInit+0x1a4>)
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	4a2a      	ldr	r2, [pc, #168]	; (8004558 <HAL_UART_MspInit+0x1a4>)
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	6313      	str	r3, [r2, #48]	; 0x30
 80044b4:	4b28      	ldr	r3, [pc, #160]	; (8004558 <HAL_UART_MspInit+0x1a4>)
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80044c0:	230c      	movs	r3, #12
 80044c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c4:	2302      	movs	r3, #2
 80044c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044cc:	2303      	movs	r3, #3
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80044d0:	2307      	movs	r3, #7
 80044d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d4:	f107 031c 	add.w	r3, r7, #28
 80044d8:	4619      	mov	r1, r3
 80044da:	4820      	ldr	r0, [pc, #128]	; (800455c <HAL_UART_MspInit+0x1a8>)
 80044dc:	f001 fb92 	bl	8005c04 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80044e0:	4b21      	ldr	r3, [pc, #132]	; (8004568 <HAL_UART_MspInit+0x1b4>)
 80044e2:	4a22      	ldr	r2, [pc, #136]	; (800456c <HAL_UART_MspInit+0x1b8>)
 80044e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80044e6:	4b20      	ldr	r3, [pc, #128]	; (8004568 <HAL_UART_MspInit+0x1b4>)
 80044e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044ee:	4b1e      	ldr	r3, [pc, #120]	; (8004568 <HAL_UART_MspInit+0x1b4>)
 80044f0:	2240      	movs	r2, #64	; 0x40
 80044f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044f4:	4b1c      	ldr	r3, [pc, #112]	; (8004568 <HAL_UART_MspInit+0x1b4>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044fa:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <HAL_UART_MspInit+0x1b4>)
 80044fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004500:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004502:	4b19      	ldr	r3, [pc, #100]	; (8004568 <HAL_UART_MspInit+0x1b4>)
 8004504:	2200      	movs	r2, #0
 8004506:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004508:	4b17      	ldr	r3, [pc, #92]	; (8004568 <HAL_UART_MspInit+0x1b4>)
 800450a:	2200      	movs	r2, #0
 800450c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800450e:	4b16      	ldr	r3, [pc, #88]	; (8004568 <HAL_UART_MspInit+0x1b4>)
 8004510:	2200      	movs	r2, #0
 8004512:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004514:	4b14      	ldr	r3, [pc, #80]	; (8004568 <HAL_UART_MspInit+0x1b4>)
 8004516:	2200      	movs	r2, #0
 8004518:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800451a:	4b13      	ldr	r3, [pc, #76]	; (8004568 <HAL_UART_MspInit+0x1b4>)
 800451c:	2200      	movs	r2, #0
 800451e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004520:	4811      	ldr	r0, [pc, #68]	; (8004568 <HAL_UART_MspInit+0x1b4>)
 8004522:	f000 ff53 	bl	80053cc <HAL_DMA_Init>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 800452c:	f7ff fd4c 	bl	8003fc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a0d      	ldr	r2, [pc, #52]	; (8004568 <HAL_UART_MspInit+0x1b4>)
 8004534:	635a      	str	r2, [r3, #52]	; 0x34
 8004536:	4a0c      	ldr	r2, [pc, #48]	; (8004568 <HAL_UART_MspInit+0x1b4>)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800453c:	2200      	movs	r2, #0
 800453e:	2100      	movs	r1, #0
 8004540:	2026      	movs	r0, #38	; 0x26
 8004542:	f000 ff0c 	bl	800535e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004546:	2026      	movs	r0, #38	; 0x26
 8004548:	f000 ff25 	bl	8005396 <HAL_NVIC_EnableIRQ>
}
 800454c:	bf00      	nop
 800454e:	3730      	adds	r7, #48	; 0x30
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40011000 	.word	0x40011000
 8004558:	40023800 	.word	0x40023800
 800455c:	40020000 	.word	0x40020000
 8004560:	40020400 	.word	0x40020400
 8004564:	40004400 	.word	0x40004400
 8004568:	200008d4 	.word	0x200008d4
 800456c:	400260a0 	.word	0x400260a0

08004570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004574:	e7fe      	b.n	8004574 <NMI_Handler+0x4>

08004576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004576:	b480      	push	{r7}
 8004578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800457a:	e7fe      	b.n	800457a <HardFault_Handler+0x4>

0800457c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004580:	e7fe      	b.n	8004580 <MemManage_Handler+0x4>

08004582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004582:	b480      	push	{r7}
 8004584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004586:	e7fe      	b.n	8004586 <BusFault_Handler+0x4>

08004588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800458c:	e7fe      	b.n	800458c <UsageFault_Handler+0x4>

0800458e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800458e:	b480      	push	{r7}
 8004590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004592:	bf00      	nop
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045a0:	bf00      	nop
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045aa:	b480      	push	{r7}
 80045ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045ae:	bf00      	nop
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045bc:	f000 f9ae 	bl	800491c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045c0:	bf00      	nop
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80045c8:	4802      	ldr	r0, [pc, #8]	; (80045d4 <DMA1_Stream6_IRQHandler+0x10>)
 80045ca:	f001 f897 	bl	80056fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80045ce:	bf00      	nop
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	200008d4 	.word	0x200008d4

080045d8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80045dc:	4803      	ldr	r0, [pc, #12]	; (80045ec <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80045de:	f004 fc19 	bl	8008e14 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80045e2:	4803      	ldr	r0, [pc, #12]	; (80045f0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80045e4:	f004 fc16 	bl	8008e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80045e8:	bf00      	nop
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	2000051c 	.word	0x2000051c
 80045f0:	20000684 	.word	0x20000684

080045f4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80045f8:	4803      	ldr	r0, [pc, #12]	; (8004608 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80045fa:	f004 fc0b 	bl	8008e14 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80045fe:	4803      	ldr	r0, [pc, #12]	; (800460c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004600:	f004 fc08 	bl	8008e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004604:	bf00      	nop
 8004606:	bd80      	pop	{r7, pc}
 8004608:	2000051c 	.word	0x2000051c
 800460c:	20000738 	.word	0x20000738

08004610 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004614:	4802      	ldr	r0, [pc, #8]	; (8004620 <I2C1_EV_IRQHandler+0x10>)
 8004616:	f001 fdef 	bl	80061f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800461a:	bf00      	nop
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	200004c8 	.word	0x200004c8

08004624 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004628:	4802      	ldr	r0, [pc, #8]	; (8004634 <I2C1_ER_IRQHandler+0x10>)
 800462a:	f001 ff56 	bl	80064da <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800462e:	bf00      	nop
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	200004c8 	.word	0x200004c8

08004638 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800463c:	4802      	ldr	r0, [pc, #8]	; (8004648 <USART1_IRQHandler+0x10>)
 800463e:	f005 ff37 	bl	800a4b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004642:	bf00      	nop
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	200007ec 	.word	0x200007ec

0800464c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004650:	4802      	ldr	r0, [pc, #8]	; (800465c <USART2_IRQHandler+0x10>)
 8004652:	f005 ff2d 	bl	800a4b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004656:	bf00      	nop
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000860 	.word	0x20000860

08004660 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004664:	4802      	ldr	r0, [pc, #8]	; (8004670 <DMA2_Stream0_IRQHandler+0x10>)
 8004666:	f001 f849 	bl	80056fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800466a:	bf00      	nop
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000468 	.word	0x20000468

08004674 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return 1;
 8004678:	2301      	movs	r3, #1
}
 800467a:	4618      	mov	r0, r3
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <_kill>:

int _kill(int pid, int sig)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800468e:	f006 ff55 	bl	800b53c <__errno>
 8004692:	4603      	mov	r3, r0
 8004694:	2216      	movs	r2, #22
 8004696:	601a      	str	r2, [r3, #0]
  return -1;
 8004698:	f04f 33ff 	mov.w	r3, #4294967295
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <_exit>:

void _exit (int status)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80046ac:	f04f 31ff 	mov.w	r1, #4294967295
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff ffe7 	bl	8004684 <_kill>
  while (1) {}    /* Make sure we hang here */
 80046b6:	e7fe      	b.n	80046b6 <_exit+0x12>

080046b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	e00a      	b.n	80046e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80046ca:	f3af 8000 	nop.w
 80046ce:	4601      	mov	r1, r0
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	60ba      	str	r2, [r7, #8]
 80046d6:	b2ca      	uxtb	r2, r1
 80046d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	3301      	adds	r3, #1
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	dbf0      	blt.n	80046ca <_read+0x12>
  }

  return len;
 80046e8:	687b      	ldr	r3, [r7, #4]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b086      	sub	sp, #24
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	60f8      	str	r0, [r7, #12]
 80046fa:	60b9      	str	r1, [r7, #8]
 80046fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]
 8004702:	e009      	b.n	8004718 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	60ba      	str	r2, [r7, #8]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	4618      	mov	r0, r3
 800470e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	3301      	adds	r3, #1
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	429a      	cmp	r2, r3
 800471e:	dbf1      	blt.n	8004704 <_write+0x12>
  }
  return len;
 8004720:	687b      	ldr	r3, [r7, #4]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <_close>:

int _close(int file)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004732:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004736:	4618      	mov	r0, r3
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004752:	605a      	str	r2, [r3, #4]
  return 0;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <_isatty>:

int _isatty(int file)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800476a:	2301      	movs	r3, #1
}
 800476c:	4618      	mov	r0, r3
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
	...

08004794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800479c:	4a14      	ldr	r2, [pc, #80]	; (80047f0 <_sbrk+0x5c>)
 800479e:	4b15      	ldr	r3, [pc, #84]	; (80047f4 <_sbrk+0x60>)
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047a8:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <_sbrk+0x64>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d102      	bne.n	80047b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047b0:	4b11      	ldr	r3, [pc, #68]	; (80047f8 <_sbrk+0x64>)
 80047b2:	4a12      	ldr	r2, [pc, #72]	; (80047fc <_sbrk+0x68>)
 80047b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047b6:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <_sbrk+0x64>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4413      	add	r3, r2
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d207      	bcs.n	80047d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047c4:	f006 feba 	bl	800b53c <__errno>
 80047c8:	4603      	mov	r3, r0
 80047ca:	220c      	movs	r2, #12
 80047cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047ce:	f04f 33ff 	mov.w	r3, #4294967295
 80047d2:	e009      	b.n	80047e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047d4:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <_sbrk+0x64>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047da:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <_sbrk+0x64>)
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4413      	add	r3, r2
 80047e2:	4a05      	ldr	r2, [pc, #20]	; (80047f8 <_sbrk+0x64>)
 80047e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047e6:	68fb      	ldr	r3, [r7, #12]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20020000 	.word	0x20020000
 80047f4:	00000400 	.word	0x00000400
 80047f8:	200010a8 	.word	0x200010a8
 80047fc:	200010c0 	.word	0x200010c0

08004800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004804:	4b06      	ldr	r3, [pc, #24]	; (8004820 <SystemInit+0x20>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480a:	4a05      	ldr	r2, [pc, #20]	; (8004820 <SystemInit+0x20>)
 800480c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004814:	bf00      	nop
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	e000ed00 	.word	0xe000ed00

08004824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8004824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800485c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004828:	480d      	ldr	r0, [pc, #52]	; (8004860 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800482a:	490e      	ldr	r1, [pc, #56]	; (8004864 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800482c:	4a0e      	ldr	r2, [pc, #56]	; (8004868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800482e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004830:	e002      	b.n	8004838 <LoopCopyDataInit>

08004832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004836:	3304      	adds	r3, #4

08004838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800483a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800483c:	d3f9      	bcc.n	8004832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800483e:	4a0b      	ldr	r2, [pc, #44]	; (800486c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004840:	4c0b      	ldr	r4, [pc, #44]	; (8004870 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004844:	e001      	b.n	800484a <LoopFillZerobss>

08004846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004848:	3204      	adds	r2, #4

0800484a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800484a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800484c:	d3fb      	bcc.n	8004846 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800484e:	f7ff ffd7 	bl	8004800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004852:	f006 fe79 	bl	800b548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004856:	f7fc ff2f 	bl	80016b8 <main>
  bx  lr    
 800485a:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 800485c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004864:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 8004868:	08010614 	.word	0x08010614
  ldr r2, =_sbss
 800486c:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 8004870:	200010c0 	.word	0x200010c0

08004874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004874:	e7fe      	b.n	8004874 <ADC_IRQHandler>
	...

08004878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800487c:	4b0e      	ldr	r3, [pc, #56]	; (80048b8 <HAL_Init+0x40>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a0d      	ldr	r2, [pc, #52]	; (80048b8 <HAL_Init+0x40>)
 8004882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004886:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004888:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <HAL_Init+0x40>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <HAL_Init+0x40>)
 800488e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004892:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004894:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <HAL_Init+0x40>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a07      	ldr	r2, [pc, #28]	; (80048b8 <HAL_Init+0x40>)
 800489a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800489e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048a0:	2003      	movs	r0, #3
 80048a2:	f000 fd51 	bl	8005348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048a6:	2000      	movs	r0, #0
 80048a8:	f000 f808 	bl	80048bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048ac:	f7ff fb92 	bl	8003fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40023c00 	.word	0x40023c00

080048bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048c4:	4b12      	ldr	r3, [pc, #72]	; (8004910 <HAL_InitTick+0x54>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4b12      	ldr	r3, [pc, #72]	; (8004914 <HAL_InitTick+0x58>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	4619      	mov	r1, r3
 80048ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80048d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fd69 	bl	80053b2 <HAL_SYSTICK_Config>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e00e      	b.n	8004908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b0f      	cmp	r3, #15
 80048ee:	d80a      	bhi.n	8004906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048f0:	2200      	movs	r2, #0
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295
 80048f8:	f000 fd31 	bl	800535e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048fc:	4a06      	ldr	r2, [pc, #24]	; (8004918 <HAL_InitTick+0x5c>)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	e000      	b.n	8004908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	20000220 	.word	0x20000220
 8004914:	20000228 	.word	0x20000228
 8004918:	20000224 	.word	0x20000224

0800491c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004920:	4b06      	ldr	r3, [pc, #24]	; (800493c <HAL_IncTick+0x20>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	4b06      	ldr	r3, [pc, #24]	; (8004940 <HAL_IncTick+0x24>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4413      	add	r3, r2
 800492c:	4a04      	ldr	r2, [pc, #16]	; (8004940 <HAL_IncTick+0x24>)
 800492e:	6013      	str	r3, [r2, #0]
}
 8004930:	bf00      	nop
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	20000228 	.word	0x20000228
 8004940:	200010ac 	.word	0x200010ac

08004944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  return uwTick;
 8004948:	4b03      	ldr	r3, [pc, #12]	; (8004958 <HAL_GetTick+0x14>)
 800494a:	681b      	ldr	r3, [r3, #0]
}
 800494c:	4618      	mov	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	200010ac 	.word	0x200010ac

0800495c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004964:	f7ff ffee 	bl	8004944 <HAL_GetTick>
 8004968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d005      	beq.n	8004982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004976:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <HAL_Delay+0x44>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004982:	bf00      	nop
 8004984:	f7ff ffde 	bl	8004944 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	429a      	cmp	r2, r3
 8004992:	d8f7      	bhi.n	8004984 <HAL_Delay+0x28>
  {
  }
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000228 	.word	0x20000228

080049a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e033      	b.n	8004a22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff fb2e 	bl	8004024 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d118      	bne.n	8004a14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049ea:	f023 0302 	bic.w	r3, r3, #2
 80049ee:	f043 0202 	orr.w	r2, r3, #2
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fa58 	bl	8004eac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f023 0303 	bic.w	r3, r3, #3
 8004a0a:	f043 0201 	orr.w	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	641a      	str	r2, [r3, #64]	; 0x40
 8004a12:	e001      	b.n	8004a18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_ADC_Start_DMA+0x1e>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e0ce      	b.n	8004be8 <HAL_ADC_Start_DMA+0x1bc>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d018      	beq.n	8004a92 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
 8004a6e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a70:	4b5f      	ldr	r3, [pc, #380]	; (8004bf0 <HAL_ADC_Start_DMA+0x1c4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a5f      	ldr	r2, [pc, #380]	; (8004bf4 <HAL_ADC_Start_DMA+0x1c8>)
 8004a76:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7a:	0c9a      	lsrs	r2, r3, #18
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	4413      	add	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004a84:	e002      	b.n	8004a8c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f9      	bne.n	8004a86 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa0:	d107      	bne.n	8004ab2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ab0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	f040 8086 	bne.w	8004bce <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d007      	beq.n	8004af4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004aec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b00:	d106      	bne.n	8004b10 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	f023 0206 	bic.w	r2, r3, #6
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	645a      	str	r2, [r3, #68]	; 0x44
 8004b0e:	e002      	b.n	8004b16 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b1e:	4b36      	ldr	r3, [pc, #216]	; (8004bf8 <HAL_ADC_Start_DMA+0x1cc>)
 8004b20:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b26:	4a35      	ldr	r2, [pc, #212]	; (8004bfc <HAL_ADC_Start_DMA+0x1d0>)
 8004b28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	4a34      	ldr	r2, [pc, #208]	; (8004c00 <HAL_ADC_Start_DMA+0x1d4>)
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	4a33      	ldr	r2, [pc, #204]	; (8004c04 <HAL_ADC_Start_DMA+0x1d8>)
 8004b38:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004b42:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004b52:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b62:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	334c      	adds	r3, #76	; 0x4c
 8004b6e:	4619      	mov	r1, r3
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f000 fcd8 	bl	8005528 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f003 031f 	and.w	r3, r3, #31
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10f      	bne.n	8004ba4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d129      	bne.n	8004be6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ba0:	609a      	str	r2, [r3, #8]
 8004ba2:	e020      	b.n	8004be6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a17      	ldr	r2, [pc, #92]	; (8004c08 <HAL_ADC_Start_DMA+0x1dc>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d11b      	bne.n	8004be6 <HAL_ADC_Start_DMA+0x1ba>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d114      	bne.n	8004be6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004bca:	609a      	str	r2, [r3, #8]
 8004bcc:	e00b      	b.n	8004be6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f043 0210 	orr.w	r2, r3, #16
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bde:	f043 0201 	orr.w	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	20000220 	.word	0x20000220
 8004bf4:	431bde83 	.word	0x431bde83
 8004bf8:	40012300 	.word	0x40012300
 8004bfc:	080050a5 	.word	0x080050a5
 8004c00:	0800515f 	.word	0x0800515f
 8004c04:	0800517b 	.word	0x0800517b
 8004c08:	40012000 	.word	0x40012000

08004c0c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_ADC_ConfigChannel+0x1c>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e113      	b.n	8004e8c <HAL_ADC_ConfigChannel+0x244>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b09      	cmp	r3, #9
 8004c72:	d925      	bls.n	8004cc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68d9      	ldr	r1, [r3, #12]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	461a      	mov	r2, r3
 8004c82:	4613      	mov	r3, r2
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	4413      	add	r3, r2
 8004c88:	3b1e      	subs	r3, #30
 8004c8a:	2207      	movs	r2, #7
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	43da      	mvns	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	400a      	ands	r2, r1
 8004c98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68d9      	ldr	r1, [r3, #12]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	4618      	mov	r0, r3
 8004cac:	4603      	mov	r3, r0
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	4403      	add	r3, r0
 8004cb2:	3b1e      	subs	r3, #30
 8004cb4:	409a      	lsls	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	60da      	str	r2, [r3, #12]
 8004cbe:	e022      	b.n	8004d06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6919      	ldr	r1, [r3, #16]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4613      	mov	r3, r2
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	4413      	add	r3, r2
 8004cd4:	2207      	movs	r2, #7
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	43da      	mvns	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6919      	ldr	r1, [r3, #16]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	4403      	add	r3, r0
 8004cfc:	409a      	lsls	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b06      	cmp	r3, #6
 8004d0c:	d824      	bhi.n	8004d58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	3b05      	subs	r3, #5
 8004d20:	221f      	movs	r2, #31
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	43da      	mvns	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	400a      	ands	r2, r1
 8004d2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	3b05      	subs	r3, #5
 8004d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	635a      	str	r2, [r3, #52]	; 0x34
 8004d56:	e04c      	b.n	8004df2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b0c      	cmp	r3, #12
 8004d5e:	d824      	bhi.n	8004daa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	3b23      	subs	r3, #35	; 0x23
 8004d72:	221f      	movs	r2, #31
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	43da      	mvns	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	400a      	ands	r2, r1
 8004d80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	4618      	mov	r0, r3
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	3b23      	subs	r3, #35	; 0x23
 8004d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
 8004da8:	e023      	b.n	8004df2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	3b41      	subs	r3, #65	; 0x41
 8004dbc:	221f      	movs	r2, #31
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	43da      	mvns	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	400a      	ands	r2, r1
 8004dca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	4618      	mov	r0, r3
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	4613      	mov	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	3b41      	subs	r3, #65	; 0x41
 8004de6:	fa00 f203 	lsl.w	r2, r0, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004df2:	4b29      	ldr	r3, [pc, #164]	; (8004e98 <HAL_ADC_ConfigChannel+0x250>)
 8004df4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a28      	ldr	r2, [pc, #160]	; (8004e9c <HAL_ADC_ConfigChannel+0x254>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d10f      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0x1d8>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b12      	cmp	r3, #18
 8004e06:	d10b      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1d      	ldr	r2, [pc, #116]	; (8004e9c <HAL_ADC_ConfigChannel+0x254>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d12b      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x23a>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a1c      	ldr	r2, [pc, #112]	; (8004ea0 <HAL_ADC_ConfigChannel+0x258>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d003      	beq.n	8004e3c <HAL_ADC_ConfigChannel+0x1f4>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b11      	cmp	r3, #17
 8004e3a:	d122      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a11      	ldr	r2, [pc, #68]	; (8004ea0 <HAL_ADC_ConfigChannel+0x258>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d111      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e5e:	4b11      	ldr	r3, [pc, #68]	; (8004ea4 <HAL_ADC_ConfigChannel+0x25c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a11      	ldr	r2, [pc, #68]	; (8004ea8 <HAL_ADC_ConfigChannel+0x260>)
 8004e64:	fba2 2303 	umull	r2, r3, r2, r3
 8004e68:	0c9a      	lsrs	r2, r3, #18
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e74:	e002      	b.n	8004e7c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f9      	bne.n	8004e76 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	40012300 	.word	0x40012300
 8004e9c:	40012000 	.word	0x40012000
 8004ea0:	10000012 	.word	0x10000012
 8004ea4:	20000220 	.word	0x20000220
 8004ea8:	431bde83 	.word	0x431bde83

08004eac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004eb4:	4b79      	ldr	r3, [pc, #484]	; (800509c <ADC_Init+0x1f0>)
 8004eb6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ee0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6859      	ldr	r1, [r3, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	021a      	lsls	r2, r3, #8
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004f04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6859      	ldr	r1, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6899      	ldr	r1, [r3, #8]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	4a58      	ldr	r2, [pc, #352]	; (80050a0 <ADC_Init+0x1f4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d022      	beq.n	8004f8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6899      	ldr	r1, [r3, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6899      	ldr	r1, [r3, #8]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	609a      	str	r2, [r3, #8]
 8004f88:	e00f      	b.n	8004faa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004fa8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0202 	bic.w	r2, r2, #2
 8004fb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6899      	ldr	r1, [r3, #8]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	7e1b      	ldrb	r3, [r3, #24]
 8004fc4:	005a      	lsls	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01b      	beq.n	8005010 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fe6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004ff6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6859      	ldr	r1, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	3b01      	subs	r3, #1
 8005004:	035a      	lsls	r2, r3, #13
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
 800500e:	e007      	b.n	8005020 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800501e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800502e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	3b01      	subs	r3, #1
 800503c:	051a      	lsls	r2, r3, #20
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005054:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6899      	ldr	r1, [r3, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005062:	025a      	lsls	r2, r3, #9
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800507a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6899      	ldr	r1, [r3, #8]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	029a      	lsls	r2, r3, #10
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	609a      	str	r2, [r3, #8]
}
 8005090:	bf00      	nop
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	40012300 	.word	0x40012300
 80050a0:	0f000001 	.word	0x0f000001

080050a4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d13c      	bne.n	8005138 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d12b      	bne.n	8005130 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d127      	bne.n	8005130 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d006      	beq.n	80050fc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d119      	bne.n	8005130 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0220 	bic.w	r2, r2, #32
 800510a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d105      	bne.n	8005130 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	f043 0201 	orr.w	r2, r3, #1
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff fd6b 	bl	8004c0c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005136:	e00e      	b.n	8005156 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	f003 0310 	and.w	r3, r3, #16
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7ff fd75 	bl	8004c34 <HAL_ADC_ErrorCallback>
}
 800514a:	e004      	b.n	8005156 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	4798      	blx	r3
}
 8005156:	bf00      	nop
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f7ff fd57 	bl	8004c20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005172:	bf00      	nop
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2240      	movs	r2, #64	; 0x40
 800518c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005192:	f043 0204 	orr.w	r2, r3, #4
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f7ff fd4a 	bl	8004c34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80051a0:	bf00      	nop
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051b8:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <__NVIC_SetPriorityGrouping+0x44>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051c4:	4013      	ands	r3, r2
 80051c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051da:	4a04      	ldr	r2, [pc, #16]	; (80051ec <__NVIC_SetPriorityGrouping+0x44>)
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	60d3      	str	r3, [r2, #12]
}
 80051e0:	bf00      	nop
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	e000ed00 	.word	0xe000ed00

080051f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051f4:	4b04      	ldr	r3, [pc, #16]	; (8005208 <__NVIC_GetPriorityGrouping+0x18>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	0a1b      	lsrs	r3, r3, #8
 80051fa:	f003 0307 	and.w	r3, r3, #7
}
 80051fe:	4618      	mov	r0, r3
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	e000ed00 	.word	0xe000ed00

0800520c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521a:	2b00      	cmp	r3, #0
 800521c:	db0b      	blt.n	8005236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	f003 021f 	and.w	r2, r3, #31
 8005224:	4907      	ldr	r1, [pc, #28]	; (8005244 <__NVIC_EnableIRQ+0x38>)
 8005226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800522a:	095b      	lsrs	r3, r3, #5
 800522c:	2001      	movs	r0, #1
 800522e:	fa00 f202 	lsl.w	r2, r0, r2
 8005232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	e000e100 	.word	0xe000e100

08005248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	4603      	mov	r3, r0
 8005250:	6039      	str	r1, [r7, #0]
 8005252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005258:	2b00      	cmp	r3, #0
 800525a:	db0a      	blt.n	8005272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	b2da      	uxtb	r2, r3
 8005260:	490c      	ldr	r1, [pc, #48]	; (8005294 <__NVIC_SetPriority+0x4c>)
 8005262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005266:	0112      	lsls	r2, r2, #4
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	440b      	add	r3, r1
 800526c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005270:	e00a      	b.n	8005288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	b2da      	uxtb	r2, r3
 8005276:	4908      	ldr	r1, [pc, #32]	; (8005298 <__NVIC_SetPriority+0x50>)
 8005278:	79fb      	ldrb	r3, [r7, #7]
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	3b04      	subs	r3, #4
 8005280:	0112      	lsls	r2, r2, #4
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	440b      	add	r3, r1
 8005286:	761a      	strb	r2, [r3, #24]
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	e000e100 	.word	0xe000e100
 8005298:	e000ed00 	.word	0xe000ed00

0800529c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800529c:	b480      	push	{r7}
 800529e:	b089      	sub	sp, #36	; 0x24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f1c3 0307 	rsb	r3, r3, #7
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	bf28      	it	cs
 80052ba:	2304      	movcs	r3, #4
 80052bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	3304      	adds	r3, #4
 80052c2:	2b06      	cmp	r3, #6
 80052c4:	d902      	bls.n	80052cc <NVIC_EncodePriority+0x30>
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	3b03      	subs	r3, #3
 80052ca:	e000      	b.n	80052ce <NVIC_EncodePriority+0x32>
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052d0:	f04f 32ff 	mov.w	r2, #4294967295
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	fa02 f303 	lsl.w	r3, r2, r3
 80052da:	43da      	mvns	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	401a      	ands	r2, r3
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052e4:	f04f 31ff 	mov.w	r1, #4294967295
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	fa01 f303 	lsl.w	r3, r1, r3
 80052ee:	43d9      	mvns	r1, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052f4:	4313      	orrs	r3, r2
         );
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3724      	adds	r7, #36	; 0x24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
	...

08005304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3b01      	subs	r3, #1
 8005310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005314:	d301      	bcc.n	800531a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005316:	2301      	movs	r3, #1
 8005318:	e00f      	b.n	800533a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800531a:	4a0a      	ldr	r2, [pc, #40]	; (8005344 <SysTick_Config+0x40>)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3b01      	subs	r3, #1
 8005320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005322:	210f      	movs	r1, #15
 8005324:	f04f 30ff 	mov.w	r0, #4294967295
 8005328:	f7ff ff8e 	bl	8005248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800532c:	4b05      	ldr	r3, [pc, #20]	; (8005344 <SysTick_Config+0x40>)
 800532e:	2200      	movs	r2, #0
 8005330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005332:	4b04      	ldr	r3, [pc, #16]	; (8005344 <SysTick_Config+0x40>)
 8005334:	2207      	movs	r2, #7
 8005336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	e000e010 	.word	0xe000e010

08005348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7ff ff29 	bl	80051a8 <__NVIC_SetPriorityGrouping>
}
 8005356:	bf00      	nop
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800535e:	b580      	push	{r7, lr}
 8005360:	b086      	sub	sp, #24
 8005362:	af00      	add	r7, sp, #0
 8005364:	4603      	mov	r3, r0
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	607a      	str	r2, [r7, #4]
 800536a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800536c:	2300      	movs	r3, #0
 800536e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005370:	f7ff ff3e 	bl	80051f0 <__NVIC_GetPriorityGrouping>
 8005374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	68b9      	ldr	r1, [r7, #8]
 800537a:	6978      	ldr	r0, [r7, #20]
 800537c:	f7ff ff8e 	bl	800529c <NVIC_EncodePriority>
 8005380:	4602      	mov	r2, r0
 8005382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005386:	4611      	mov	r1, r2
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff ff5d 	bl	8005248 <__NVIC_SetPriority>
}
 800538e:	bf00      	nop
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b082      	sub	sp, #8
 800539a:	af00      	add	r7, sp, #0
 800539c:	4603      	mov	r3, r0
 800539e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff ff31 	bl	800520c <__NVIC_EnableIRQ>
}
 80053aa:	bf00      	nop
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b082      	sub	sp, #8
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7ff ffa2 	bl	8005304 <SysTick_Config>
 80053c0:	4603      	mov	r3, r0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80053d8:	f7ff fab4 	bl	8004944 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e099      	b.n	800551c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0201 	bic.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005408:	e00f      	b.n	800542a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800540a:	f7ff fa9b 	bl	8004944 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b05      	cmp	r3, #5
 8005416:	d908      	bls.n	800542a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2220      	movs	r2, #32
 800541c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2203      	movs	r2, #3
 8005422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e078      	b.n	800551c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e8      	bne.n	800540a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	4b38      	ldr	r3, [pc, #224]	; (8005524 <HAL_DMA_Init+0x158>)
 8005444:	4013      	ands	r3, r2
 8005446:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005456:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800546e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	2b04      	cmp	r3, #4
 8005482:	d107      	bne.n	8005494 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548c:	4313      	orrs	r3, r2
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f023 0307 	bic.w	r3, r3, #7
 80054aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d117      	bne.n	80054ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00e      	beq.n	80054ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fb1b 	bl	8005b0c <DMA_CheckFifoParam>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2240      	movs	r2, #64	; 0x40
 80054e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80054ea:	2301      	movs	r3, #1
 80054ec:	e016      	b.n	800551c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fad2 	bl	8005aa0 <DMA_CalcBaseAndBitshift>
 80054fc:	4603      	mov	r3, r0
 80054fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005504:	223f      	movs	r2, #63	; 0x3f
 8005506:	409a      	lsls	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	f010803f 	.word	0xf010803f

08005528 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005546:	2b01      	cmp	r3, #1
 8005548:	d101      	bne.n	800554e <HAL_DMA_Start_IT+0x26>
 800554a:	2302      	movs	r3, #2
 800554c:	e040      	b.n	80055d0 <HAL_DMA_Start_IT+0xa8>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b01      	cmp	r3, #1
 8005560:	d12f      	bne.n	80055c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2202      	movs	r2, #2
 8005566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	68b9      	ldr	r1, [r7, #8]
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 fa64 	bl	8005a44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005580:	223f      	movs	r2, #63	; 0x3f
 8005582:	409a      	lsls	r2, r3
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0216 	orr.w	r2, r2, #22
 8005596:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559c:	2b00      	cmp	r3, #0
 800559e:	d007      	beq.n	80055b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0208 	orr.w	r2, r2, #8
 80055ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0201 	orr.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	e005      	b.n	80055ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80055ca:	2302      	movs	r3, #2
 80055cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80055ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80055e6:	f7ff f9ad 	bl	8004944 <HAL_GetTick>
 80055ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d008      	beq.n	800560a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2280      	movs	r2, #128	; 0x80
 80055fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e052      	b.n	80056b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0216 	bic.w	r2, r2, #22
 8005618:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695a      	ldr	r2, [r3, #20]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005628:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d103      	bne.n	800563a <HAL_DMA_Abort+0x62>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0208 	bic.w	r2, r2, #8
 8005648:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0201 	bic.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800565a:	e013      	b.n	8005684 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800565c:	f7ff f972 	bl	8004944 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b05      	cmp	r3, #5
 8005668:	d90c      	bls.n	8005684 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2203      	movs	r2, #3
 8005674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e015      	b.n	80056b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e4      	bne.n	800565c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005696:	223f      	movs	r2, #63	; 0x3f
 8005698:	409a      	lsls	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d004      	beq.n	80056d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2280      	movs	r2, #128	; 0x80
 80056d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e00c      	b.n	80056f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2205      	movs	r2, #5
 80056da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0201 	bic.w	r2, r2, #1
 80056ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005708:	4b8e      	ldr	r3, [pc, #568]	; (8005944 <HAL_DMA_IRQHandler+0x248>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a8e      	ldr	r2, [pc, #568]	; (8005948 <HAL_DMA_IRQHandler+0x24c>)
 800570e:	fba2 2303 	umull	r2, r3, r2, r3
 8005712:	0a9b      	lsrs	r3, r3, #10
 8005714:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005726:	2208      	movs	r2, #8
 8005728:	409a      	lsls	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4013      	ands	r3, r2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d01a      	beq.n	8005768 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	d013      	beq.n	8005768 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0204 	bic.w	r2, r2, #4
 800574e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005754:	2208      	movs	r2, #8
 8005756:	409a      	lsls	r2, r3
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005760:	f043 0201 	orr.w	r2, r3, #1
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576c:	2201      	movs	r2, #1
 800576e:	409a      	lsls	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4013      	ands	r3, r2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d012      	beq.n	800579e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00b      	beq.n	800579e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578a:	2201      	movs	r2, #1
 800578c:	409a      	lsls	r2, r3
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005796:	f043 0202 	orr.w	r2, r3, #2
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a2:	2204      	movs	r2, #4
 80057a4:	409a      	lsls	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4013      	ands	r3, r2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d012      	beq.n	80057d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00b      	beq.n	80057d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c0:	2204      	movs	r2, #4
 80057c2:	409a      	lsls	r2, r3
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057cc:	f043 0204 	orr.w	r2, r3, #4
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d8:	2210      	movs	r2, #16
 80057da:	409a      	lsls	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4013      	ands	r3, r2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d043      	beq.n	800586c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d03c      	beq.n	800586c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f6:	2210      	movs	r2, #16
 80057f8:	409a      	lsls	r2, r3
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d018      	beq.n	800583e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d108      	bne.n	800582c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	2b00      	cmp	r3, #0
 8005820:	d024      	beq.n	800586c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	4798      	blx	r3
 800582a:	e01f      	b.n	800586c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005830:	2b00      	cmp	r3, #0
 8005832:	d01b      	beq.n	800586c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	4798      	blx	r3
 800583c:	e016      	b.n	800586c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005848:	2b00      	cmp	r3, #0
 800584a:	d107      	bne.n	800585c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0208 	bic.w	r2, r2, #8
 800585a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005870:	2220      	movs	r2, #32
 8005872:	409a      	lsls	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4013      	ands	r3, r2
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 808f 	beq.w	800599c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0310 	and.w	r3, r3, #16
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 8087 	beq.w	800599c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005892:	2220      	movs	r2, #32
 8005894:	409a      	lsls	r2, r3
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b05      	cmp	r3, #5
 80058a4:	d136      	bne.n	8005914 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0216 	bic.w	r2, r2, #22
 80058b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	695a      	ldr	r2, [r3, #20]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d103      	bne.n	80058d6 <HAL_DMA_IRQHandler+0x1da>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0208 	bic.w	r2, r2, #8
 80058e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ea:	223f      	movs	r2, #63	; 0x3f
 80058ec:	409a      	lsls	r2, r3
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005906:	2b00      	cmp	r3, #0
 8005908:	d07e      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	4798      	blx	r3
        }
        return;
 8005912:	e079      	b.n	8005a08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d01d      	beq.n	800595e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10d      	bne.n	800594c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005934:	2b00      	cmp	r3, #0
 8005936:	d031      	beq.n	800599c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
 8005940:	e02c      	b.n	800599c <HAL_DMA_IRQHandler+0x2a0>
 8005942:	bf00      	nop
 8005944:	20000220 	.word	0x20000220
 8005948:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d023      	beq.n	800599c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	4798      	blx	r3
 800595c:	e01e      	b.n	800599c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10f      	bne.n	800598c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0210 	bic.w	r2, r2, #16
 800597a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d032      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d022      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2205      	movs	r2, #5
 80059b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0201 	bic.w	r2, r2, #1
 80059c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	3301      	adds	r3, #1
 80059cc:	60bb      	str	r3, [r7, #8]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d307      	bcc.n	80059e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1f2      	bne.n	80059c8 <HAL_DMA_IRQHandler+0x2cc>
 80059e2:	e000      	b.n	80059e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80059e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
 8005a06:	e000      	b.n	8005a0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005a08:	bf00      	nop
    }
  }
}
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a1e:	b2db      	uxtb	r3, r3
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d108      	bne.n	8005a84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005a82:	e007      	b.n	8005a94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	60da      	str	r2, [r3, #12]
}
 8005a94:	bf00      	nop
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	3b10      	subs	r3, #16
 8005ab0:	4a14      	ldr	r2, [pc, #80]	; (8005b04 <DMA_CalcBaseAndBitshift+0x64>)
 8005ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab6:	091b      	lsrs	r3, r3, #4
 8005ab8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005aba:	4a13      	ldr	r2, [pc, #76]	; (8005b08 <DMA_CalcBaseAndBitshift+0x68>)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d909      	bls.n	8005ae2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ad6:	f023 0303 	bic.w	r3, r3, #3
 8005ada:	1d1a      	adds	r2, r3, #4
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	659a      	str	r2, [r3, #88]	; 0x58
 8005ae0:	e007      	b.n	8005af2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005aea:	f023 0303 	bic.w	r3, r3, #3
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	aaaaaaab 	.word	0xaaaaaaab
 8005b08:	08010158 	.word	0x08010158

08005b0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d11f      	bne.n	8005b66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b03      	cmp	r3, #3
 8005b2a:	d856      	bhi.n	8005bda <DMA_CheckFifoParam+0xce>
 8005b2c:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <DMA_CheckFifoParam+0x28>)
 8005b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b32:	bf00      	nop
 8005b34:	08005b45 	.word	0x08005b45
 8005b38:	08005b57 	.word	0x08005b57
 8005b3c:	08005b45 	.word	0x08005b45
 8005b40:	08005bdb 	.word	0x08005bdb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d046      	beq.n	8005bde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b54:	e043      	b.n	8005bde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b5e:	d140      	bne.n	8005be2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b64:	e03d      	b.n	8005be2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b6e:	d121      	bne.n	8005bb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b03      	cmp	r3, #3
 8005b74:	d837      	bhi.n	8005be6 <DMA_CheckFifoParam+0xda>
 8005b76:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <DMA_CheckFifoParam+0x70>)
 8005b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7c:	08005b8d 	.word	0x08005b8d
 8005b80:	08005b93 	.word	0x08005b93
 8005b84:	08005b8d 	.word	0x08005b8d
 8005b88:	08005ba5 	.word	0x08005ba5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b90:	e030      	b.n	8005bf4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d025      	beq.n	8005bea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ba2:	e022      	b.n	8005bea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bac:	d11f      	bne.n	8005bee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005bb2:	e01c      	b.n	8005bee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d903      	bls.n	8005bc2 <DMA_CheckFifoParam+0xb6>
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d003      	beq.n	8005bc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005bc0:	e018      	b.n	8005bf4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8005bc6:	e015      	b.n	8005bf4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00e      	beq.n	8005bf2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd8:	e00b      	b.n	8005bf2 <DMA_CheckFifoParam+0xe6>
      break;
 8005bda:	bf00      	nop
 8005bdc:	e00a      	b.n	8005bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8005bde:	bf00      	nop
 8005be0:	e008      	b.n	8005bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8005be2:	bf00      	nop
 8005be4:	e006      	b.n	8005bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8005be6:	bf00      	nop
 8005be8:	e004      	b.n	8005bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8005bea:	bf00      	nop
 8005bec:	e002      	b.n	8005bf4 <DMA_CheckFifoParam+0xe8>
      break;   
 8005bee:	bf00      	nop
 8005bf0:	e000      	b.n	8005bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8005bf2:	bf00      	nop
    }
  } 
  
  return status; 
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop

08005c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b089      	sub	sp, #36	; 0x24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
 8005c1e:	e159      	b.n	8005ed4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c20:	2201      	movs	r2, #1
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4013      	ands	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	f040 8148 	bne.w	8005ece <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d005      	beq.n	8005c56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d130      	bne.n	8005cb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	2203      	movs	r2, #3
 8005c62:	fa02 f303 	lsl.w	r3, r2, r3
 8005c66:	43db      	mvns	r3, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	fa02 f303 	lsl.w	r3, r2, r3
 8005c94:	43db      	mvns	r3, r3
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	091b      	lsrs	r3, r3, #4
 8005ca2:	f003 0201 	and.w	r2, r3, #1
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f003 0303 	and.w	r3, r3, #3
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d017      	beq.n	8005cf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	2203      	movs	r2, #3
 8005cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f003 0303 	and.w	r3, r3, #3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d123      	bne.n	8005d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	08da      	lsrs	r2, r3, #3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3208      	adds	r2, #8
 8005d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	f003 0307 	and.w	r3, r3, #7
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	220f      	movs	r2, #15
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	4013      	ands	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	08da      	lsrs	r2, r3, #3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	3208      	adds	r2, #8
 8005d42:	69b9      	ldr	r1, [r7, #24]
 8005d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	2203      	movs	r2, #3
 8005d54:	fa02 f303 	lsl.w	r3, r2, r3
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f003 0203 	and.w	r2, r3, #3
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 80a2 	beq.w	8005ece <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	4b57      	ldr	r3, [pc, #348]	; (8005eec <HAL_GPIO_Init+0x2e8>)
 8005d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d92:	4a56      	ldr	r2, [pc, #344]	; (8005eec <HAL_GPIO_Init+0x2e8>)
 8005d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d98:	6453      	str	r3, [r2, #68]	; 0x44
 8005d9a:	4b54      	ldr	r3, [pc, #336]	; (8005eec <HAL_GPIO_Init+0x2e8>)
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005da6:	4a52      	ldr	r2, [pc, #328]	; (8005ef0 <HAL_GPIO_Init+0x2ec>)
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	089b      	lsrs	r3, r3, #2
 8005dac:	3302      	adds	r3, #2
 8005dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	f003 0303 	and.w	r3, r3, #3
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	220f      	movs	r2, #15
 8005dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc2:	43db      	mvns	r3, r3
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a49      	ldr	r2, [pc, #292]	; (8005ef4 <HAL_GPIO_Init+0x2f0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d019      	beq.n	8005e06 <HAL_GPIO_Init+0x202>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a48      	ldr	r2, [pc, #288]	; (8005ef8 <HAL_GPIO_Init+0x2f4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d013      	beq.n	8005e02 <HAL_GPIO_Init+0x1fe>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a47      	ldr	r2, [pc, #284]	; (8005efc <HAL_GPIO_Init+0x2f8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00d      	beq.n	8005dfe <HAL_GPIO_Init+0x1fa>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a46      	ldr	r2, [pc, #280]	; (8005f00 <HAL_GPIO_Init+0x2fc>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d007      	beq.n	8005dfa <HAL_GPIO_Init+0x1f6>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a45      	ldr	r2, [pc, #276]	; (8005f04 <HAL_GPIO_Init+0x300>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d101      	bne.n	8005df6 <HAL_GPIO_Init+0x1f2>
 8005df2:	2304      	movs	r3, #4
 8005df4:	e008      	b.n	8005e08 <HAL_GPIO_Init+0x204>
 8005df6:	2307      	movs	r3, #7
 8005df8:	e006      	b.n	8005e08 <HAL_GPIO_Init+0x204>
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e004      	b.n	8005e08 <HAL_GPIO_Init+0x204>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e002      	b.n	8005e08 <HAL_GPIO_Init+0x204>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <HAL_GPIO_Init+0x204>
 8005e06:	2300      	movs	r3, #0
 8005e08:	69fa      	ldr	r2, [r7, #28]
 8005e0a:	f002 0203 	and.w	r2, r2, #3
 8005e0e:	0092      	lsls	r2, r2, #2
 8005e10:	4093      	lsls	r3, r2
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e18:	4935      	ldr	r1, [pc, #212]	; (8005ef0 <HAL_GPIO_Init+0x2ec>)
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	089b      	lsrs	r3, r3, #2
 8005e1e:	3302      	adds	r3, #2
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e26:	4b38      	ldr	r3, [pc, #224]	; (8005f08 <HAL_GPIO_Init+0x304>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	43db      	mvns	r3, r3
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	4013      	ands	r3, r2
 8005e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e4a:	4a2f      	ldr	r2, [pc, #188]	; (8005f08 <HAL_GPIO_Init+0x304>)
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e50:	4b2d      	ldr	r3, [pc, #180]	; (8005f08 <HAL_GPIO_Init+0x304>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	43db      	mvns	r3, r3
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e74:	4a24      	ldr	r2, [pc, #144]	; (8005f08 <HAL_GPIO_Init+0x304>)
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e7a:	4b23      	ldr	r3, [pc, #140]	; (8005f08 <HAL_GPIO_Init+0x304>)
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	43db      	mvns	r3, r3
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	4013      	ands	r3, r2
 8005e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e9e:	4a1a      	ldr	r2, [pc, #104]	; (8005f08 <HAL_GPIO_Init+0x304>)
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ea4:	4b18      	ldr	r3, [pc, #96]	; (8005f08 <HAL_GPIO_Init+0x304>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	43db      	mvns	r3, r3
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ec8:	4a0f      	ldr	r2, [pc, #60]	; (8005f08 <HAL_GPIO_Init+0x304>)
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	61fb      	str	r3, [r7, #28]
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	2b0f      	cmp	r3, #15
 8005ed8:	f67f aea2 	bls.w	8005c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005edc:	bf00      	nop
 8005ede:	bf00      	nop
 8005ee0:	3724      	adds	r7, #36	; 0x24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	40013800 	.word	0x40013800
 8005ef4:	40020000 	.word	0x40020000
 8005ef8:	40020400 	.word	0x40020400
 8005efc:	40020800 	.word	0x40020800
 8005f00:	40020c00 	.word	0x40020c00
 8005f04:	40021000 	.word	0x40021000
 8005f08:	40013c00 	.word	0x40013c00

08005f0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691a      	ldr	r2, [r3, #16]
 8005f1c:	887b      	ldrh	r3, [r7, #2]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f24:	2301      	movs	r3, #1
 8005f26:	73fb      	strb	r3, [r7, #15]
 8005f28:	e001      	b.n	8005f2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	807b      	strh	r3, [r7, #2]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f4c:	787b      	ldrb	r3, [r7, #1]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f52:	887a      	ldrh	r2, [r7, #2]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f58:	e003      	b.n	8005f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f5a:	887b      	ldrh	r3, [r7, #2]
 8005f5c:	041a      	lsls	r2, r3, #16
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	619a      	str	r2, [r3, #24]
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
	...

08005f70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e12b      	b.n	80061da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d106      	bne.n	8005f9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7fe f8bc 	bl	8004114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2224      	movs	r2, #36	; 0x24
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0201 	bic.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005fd4:	f002 fa5c 	bl	8008490 <HAL_RCC_GetPCLK1Freq>
 8005fd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	4a81      	ldr	r2, [pc, #516]	; (80061e4 <HAL_I2C_Init+0x274>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d807      	bhi.n	8005ff4 <HAL_I2C_Init+0x84>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4a80      	ldr	r2, [pc, #512]	; (80061e8 <HAL_I2C_Init+0x278>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	bf94      	ite	ls
 8005fec:	2301      	movls	r3, #1
 8005fee:	2300      	movhi	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	e006      	b.n	8006002 <HAL_I2C_Init+0x92>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4a7d      	ldr	r2, [pc, #500]	; (80061ec <HAL_I2C_Init+0x27c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	bf94      	ite	ls
 8005ffc:	2301      	movls	r3, #1
 8005ffe:	2300      	movhi	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e0e7      	b.n	80061da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	4a78      	ldr	r2, [pc, #480]	; (80061f0 <HAL_I2C_Init+0x280>)
 800600e:	fba2 2303 	umull	r2, r3, r2, r3
 8006012:	0c9b      	lsrs	r3, r3, #18
 8006014:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	430a      	orrs	r2, r1
 8006028:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	4a6a      	ldr	r2, [pc, #424]	; (80061e4 <HAL_I2C_Init+0x274>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d802      	bhi.n	8006044 <HAL_I2C_Init+0xd4>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	3301      	adds	r3, #1
 8006042:	e009      	b.n	8006058 <HAL_I2C_Init+0xe8>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800604a:	fb02 f303 	mul.w	r3, r2, r3
 800604e:	4a69      	ldr	r2, [pc, #420]	; (80061f4 <HAL_I2C_Init+0x284>)
 8006050:	fba2 2303 	umull	r2, r3, r2, r3
 8006054:	099b      	lsrs	r3, r3, #6
 8006056:	3301      	adds	r3, #1
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6812      	ldr	r2, [r2, #0]
 800605c:	430b      	orrs	r3, r1
 800605e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800606a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	495c      	ldr	r1, [pc, #368]	; (80061e4 <HAL_I2C_Init+0x274>)
 8006074:	428b      	cmp	r3, r1
 8006076:	d819      	bhi.n	80060ac <HAL_I2C_Init+0x13c>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	1e59      	subs	r1, r3, #1
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	fbb1 f3f3 	udiv	r3, r1, r3
 8006086:	1c59      	adds	r1, r3, #1
 8006088:	f640 73fc 	movw	r3, #4092	; 0xffc
 800608c:	400b      	ands	r3, r1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <HAL_I2C_Init+0x138>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	1e59      	subs	r1, r3, #1
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	fbb1 f3f3 	udiv	r3, r1, r3
 80060a0:	3301      	adds	r3, #1
 80060a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060a6:	e051      	b.n	800614c <HAL_I2C_Init+0x1dc>
 80060a8:	2304      	movs	r3, #4
 80060aa:	e04f      	b.n	800614c <HAL_I2C_Init+0x1dc>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d111      	bne.n	80060d8 <HAL_I2C_Init+0x168>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	1e58      	subs	r0, r3, #1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6859      	ldr	r1, [r3, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	440b      	add	r3, r1
 80060c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80060c6:	3301      	adds	r3, #1
 80060c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	bf0c      	ite	eq
 80060d0:	2301      	moveq	r3, #1
 80060d2:	2300      	movne	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	e012      	b.n	80060fe <HAL_I2C_Init+0x18e>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	1e58      	subs	r0, r3, #1
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6859      	ldr	r1, [r3, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	440b      	add	r3, r1
 80060e6:	0099      	lsls	r1, r3, #2
 80060e8:	440b      	add	r3, r1
 80060ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ee:	3301      	adds	r3, #1
 80060f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	bf0c      	ite	eq
 80060f8:	2301      	moveq	r3, #1
 80060fa:	2300      	movne	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <HAL_I2C_Init+0x196>
 8006102:	2301      	movs	r3, #1
 8006104:	e022      	b.n	800614c <HAL_I2C_Init+0x1dc>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10e      	bne.n	800612c <HAL_I2C_Init+0x1bc>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	1e58      	subs	r0, r3, #1
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6859      	ldr	r1, [r3, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	440b      	add	r3, r1
 800611c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006120:	3301      	adds	r3, #1
 8006122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800612a:	e00f      	b.n	800614c <HAL_I2C_Init+0x1dc>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	1e58      	subs	r0, r3, #1
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6859      	ldr	r1, [r3, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	440b      	add	r3, r1
 800613a:	0099      	lsls	r1, r3, #2
 800613c:	440b      	add	r3, r1
 800613e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006142:	3301      	adds	r3, #1
 8006144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	6809      	ldr	r1, [r1, #0]
 8006150:	4313      	orrs	r3, r2
 8006152:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	69da      	ldr	r2, [r3, #28]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800617a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	6911      	ldr	r1, [r2, #16]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	68d2      	ldr	r2, [r2, #12]
 8006186:	4311      	orrs	r1, r2
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	430b      	orrs	r3, r1
 800618e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695a      	ldr	r2, [r3, #20]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	431a      	orrs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0201 	orr.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	000186a0 	.word	0x000186a0
 80061e8:	001e847f 	.word	0x001e847f
 80061ec:	003d08ff 	.word	0x003d08ff
 80061f0:	431bde83 	.word	0x431bde83
 80061f4:	10624dd3 	.word	0x10624dd3

080061f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006218:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006220:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	2b10      	cmp	r3, #16
 8006226:	d003      	beq.n	8006230 <HAL_I2C_EV_IRQHandler+0x38>
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	2b40      	cmp	r3, #64	; 0x40
 800622c:	f040 80c1 	bne.w	80063b2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10d      	bne.n	8006266 <HAL_I2C_EV_IRQHandler+0x6e>
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006250:	d003      	beq.n	800625a <HAL_I2C_EV_IRQHandler+0x62>
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006258:	d101      	bne.n	800625e <HAL_I2C_EV_IRQHandler+0x66>
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <HAL_I2C_EV_IRQHandler+0x68>
 800625e:	2300      	movs	r3, #0
 8006260:	2b01      	cmp	r3, #1
 8006262:	f000 8132 	beq.w	80064ca <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00c      	beq.n	800628a <HAL_I2C_EV_IRQHandler+0x92>
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	0a5b      	lsrs	r3, r3, #9
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d006      	beq.n	800628a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f001 fc7b 	bl	8007b78 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fd83 	bl	8006d8e <I2C_Master_SB>
 8006288:	e092      	b.n	80063b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	08db      	lsrs	r3, r3, #3
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d009      	beq.n	80062aa <HAL_I2C_EV_IRQHandler+0xb2>
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	0a5b      	lsrs	r3, r3, #9
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fdf9 	bl	8006e9a <I2C_Master_ADD10>
 80062a8:	e082      	b.n	80063b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	085b      	lsrs	r3, r3, #1
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d009      	beq.n	80062ca <HAL_I2C_EV_IRQHandler+0xd2>
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	0a5b      	lsrs	r3, r3, #9
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fe13 	bl	8006eee <I2C_Master_ADDR>
 80062c8:	e072      	b.n	80063b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	089b      	lsrs	r3, r3, #2
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d03b      	beq.n	800634e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062e4:	f000 80f3 	beq.w	80064ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	09db      	lsrs	r3, r3, #7
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00f      	beq.n	8006314 <HAL_I2C_EV_IRQHandler+0x11c>
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	0a9b      	lsrs	r3, r3, #10
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d009      	beq.n	8006314 <HAL_I2C_EV_IRQHandler+0x11c>
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	089b      	lsrs	r3, r3, #2
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d103      	bne.n	8006314 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f9f3 	bl	80066f8 <I2C_MasterTransmit_TXE>
 8006312:	e04d      	b.n	80063b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	089b      	lsrs	r3, r3, #2
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 80d6 	beq.w	80064ce <HAL_I2C_EV_IRQHandler+0x2d6>
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	0a5b      	lsrs	r3, r3, #9
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 80cf 	beq.w	80064ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	2b21      	cmp	r3, #33	; 0x21
 8006334:	d103      	bne.n	800633e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fa7a 	bl	8006830 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800633c:	e0c7      	b.n	80064ce <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	2b40      	cmp	r3, #64	; 0x40
 8006342:	f040 80c4 	bne.w	80064ce <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fae8 	bl	800691c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800634c:	e0bf      	b.n	80064ce <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800635c:	f000 80b7 	beq.w	80064ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	099b      	lsrs	r3, r3, #6
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00f      	beq.n	800638c <HAL_I2C_EV_IRQHandler+0x194>
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	0a9b      	lsrs	r3, r3, #10
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d009      	beq.n	800638c <HAL_I2C_EV_IRQHandler+0x194>
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	089b      	lsrs	r3, r3, #2
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	d103      	bne.n	800638c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fb5d 	bl	8006a44 <I2C_MasterReceive_RXNE>
 800638a:	e011      	b.n	80063b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	089b      	lsrs	r3, r3, #2
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 809a 	beq.w	80064ce <HAL_I2C_EV_IRQHandler+0x2d6>
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	0a5b      	lsrs	r3, r3, #9
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 8093 	beq.w	80064ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fc06 	bl	8006bba <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063ae:	e08e      	b.n	80064ce <HAL_I2C_EV_IRQHandler+0x2d6>
 80063b0:	e08d      	b.n	80064ce <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d004      	beq.n	80063c4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	61fb      	str	r3, [r7, #28]
 80063c2:	e007      	b.n	80063d4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	085b      	lsrs	r3, r3, #1
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d012      	beq.n	8006406 <HAL_I2C_EV_IRQHandler+0x20e>
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	0a5b      	lsrs	r3, r3, #9
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00c      	beq.n	8006406 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80063fc:	69b9      	ldr	r1, [r7, #24]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 ffc4 	bl	800738c <I2C_Slave_ADDR>
 8006404:	e066      	b.n	80064d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	091b      	lsrs	r3, r3, #4
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d009      	beq.n	8006426 <HAL_I2C_EV_IRQHandler+0x22e>
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	0a5b      	lsrs	r3, r3, #9
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fffe 	bl	8007420 <I2C_Slave_STOPF>
 8006424:	e056      	b.n	80064d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006426:	7bbb      	ldrb	r3, [r7, #14]
 8006428:	2b21      	cmp	r3, #33	; 0x21
 800642a:	d002      	beq.n	8006432 <HAL_I2C_EV_IRQHandler+0x23a>
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	2b29      	cmp	r3, #41	; 0x29
 8006430:	d125      	bne.n	800647e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	09db      	lsrs	r3, r3, #7
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00f      	beq.n	800645e <HAL_I2C_EV_IRQHandler+0x266>
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	0a9b      	lsrs	r3, r3, #10
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d009      	beq.n	800645e <HAL_I2C_EV_IRQHandler+0x266>
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	089b      	lsrs	r3, r3, #2
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d103      	bne.n	800645e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 feda 	bl	8007210 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800645c:	e039      	b.n	80064d2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	089b      	lsrs	r3, r3, #2
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d033      	beq.n	80064d2 <HAL_I2C_EV_IRQHandler+0x2da>
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	0a5b      	lsrs	r3, r3, #9
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d02d      	beq.n	80064d2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 ff07 	bl	800728a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800647c:	e029      	b.n	80064d2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	099b      	lsrs	r3, r3, #6
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00f      	beq.n	80064aa <HAL_I2C_EV_IRQHandler+0x2b2>
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	0a9b      	lsrs	r3, r3, #10
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d009      	beq.n	80064aa <HAL_I2C_EV_IRQHandler+0x2b2>
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	089b      	lsrs	r3, r3, #2
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d103      	bne.n	80064aa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 ff12 	bl	80072cc <I2C_SlaveReceive_RXNE>
 80064a8:	e014      	b.n	80064d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	089b      	lsrs	r3, r3, #2
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00e      	beq.n	80064d4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	0a5b      	lsrs	r3, r3, #9
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d008      	beq.n	80064d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 ff40 	bl	8007348 <I2C_SlaveReceive_BTF>
 80064c8:	e004      	b.n	80064d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80064ca:	bf00      	nop
 80064cc:	e002      	b.n	80064d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064ce:	bf00      	nop
 80064d0:	e000      	b.n	80064d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80064d2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80064d4:	3720      	adds	r7, #32
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b08a      	sub	sp, #40	; 0x28
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80064f2:	2300      	movs	r3, #0
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064fc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	0a1b      	lsrs	r3, r3, #8
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00e      	beq.n	8006528 <HAL_I2C_ER_IRQHandler+0x4e>
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	0a1b      	lsrs	r3, r3, #8
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	d008      	beq.n	8006528 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	f043 0301 	orr.w	r3, r3, #1
 800651c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006526:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	0a5b      	lsrs	r3, r3, #9
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00e      	beq.n	8006552 <HAL_I2C_ER_IRQHandler+0x78>
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	0a1b      	lsrs	r3, r3, #8
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b00      	cmp	r3, #0
 800653e:	d008      	beq.n	8006552 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	f043 0302 	orr.w	r3, r3, #2
 8006546:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006550:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	0a9b      	lsrs	r3, r3, #10
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d03f      	beq.n	80065de <HAL_I2C_ER_IRQHandler+0x104>
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	0a1b      	lsrs	r3, r3, #8
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	d039      	beq.n	80065de <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800656a:	7efb      	ldrb	r3, [r7, #27]
 800656c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006572:	b29b      	uxth	r3, r3
 8006574:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006582:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006584:	7ebb      	ldrb	r3, [r7, #26]
 8006586:	2b20      	cmp	r3, #32
 8006588:	d112      	bne.n	80065b0 <HAL_I2C_ER_IRQHandler+0xd6>
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10f      	bne.n	80065b0 <HAL_I2C_ER_IRQHandler+0xd6>
 8006590:	7cfb      	ldrb	r3, [r7, #19]
 8006592:	2b21      	cmp	r3, #33	; 0x21
 8006594:	d008      	beq.n	80065a8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006596:	7cfb      	ldrb	r3, [r7, #19]
 8006598:	2b29      	cmp	r3, #41	; 0x29
 800659a:	d005      	beq.n	80065a8 <HAL_I2C_ER_IRQHandler+0xce>
 800659c:	7cfb      	ldrb	r3, [r7, #19]
 800659e:	2b28      	cmp	r3, #40	; 0x28
 80065a0:	d106      	bne.n	80065b0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b21      	cmp	r3, #33	; 0x21
 80065a6:	d103      	bne.n	80065b0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f001 f869 	bl	8007680 <I2C_Slave_AF>
 80065ae:	e016      	b.n	80065de <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065b8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	f043 0304 	orr.w	r3, r3, #4
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80065c2:	7efb      	ldrb	r3, [r7, #27]
 80065c4:	2b10      	cmp	r3, #16
 80065c6:	d002      	beq.n	80065ce <HAL_I2C_ER_IRQHandler+0xf4>
 80065c8:	7efb      	ldrb	r3, [r7, #27]
 80065ca:	2b40      	cmp	r3, #64	; 0x40
 80065cc:	d107      	bne.n	80065de <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065dc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	0adb      	lsrs	r3, r3, #11
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00e      	beq.n	8006608 <HAL_I2C_ER_IRQHandler+0x12e>
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	0a1b      	lsrs	r3, r3, #8
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d008      	beq.n	8006608 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	f043 0308 	orr.w	r3, r3, #8
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006606:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	2b00      	cmp	r3, #0
 800660c:	d008      	beq.n	8006620 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	431a      	orrs	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f001 f8a0 	bl	8007760 <I2C_ITError>
  }
}
 8006620:	bf00      	nop
 8006622:	3728      	adds	r7, #40	; 0x28
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	70fb      	strb	r3, [r7, #3]
 8006684:	4613      	mov	r3, r2
 8006686:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006706:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800670e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800671a:	2b00      	cmp	r3, #0
 800671c:	d150      	bne.n	80067c0 <I2C_MasterTransmit_TXE+0xc8>
 800671e:	7bfb      	ldrb	r3, [r7, #15]
 8006720:	2b21      	cmp	r3, #33	; 0x21
 8006722:	d14d      	bne.n	80067c0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2b08      	cmp	r3, #8
 8006728:	d01d      	beq.n	8006766 <I2C_MasterTransmit_TXE+0x6e>
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2b20      	cmp	r3, #32
 800672e:	d01a      	beq.n	8006766 <I2C_MasterTransmit_TXE+0x6e>
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006736:	d016      	beq.n	8006766 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006746:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2211      	movs	r2, #17
 800674c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2220      	movs	r2, #32
 800675a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff ff62 	bl	8006628 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006764:	e060      	b.n	8006828 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006774:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006784:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	d107      	bne.n	80067b0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7ff ff7d 	bl	80066a8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80067ae:	e03b      	b.n	8006828 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7ff ff35 	bl	8006628 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80067be:	e033      	b.n	8006828 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
 80067c2:	2b21      	cmp	r3, #33	; 0x21
 80067c4:	d005      	beq.n	80067d2 <I2C_MasterTransmit_TXE+0xda>
 80067c6:	7bbb      	ldrb	r3, [r7, #14]
 80067c8:	2b40      	cmp	r3, #64	; 0x40
 80067ca:	d12d      	bne.n	8006828 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	2b22      	cmp	r3, #34	; 0x22
 80067d0:	d12a      	bne.n	8006828 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d108      	bne.n	80067ee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80067ec:	e01c      	b.n	8006828 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b40      	cmp	r3, #64	; 0x40
 80067f8:	d103      	bne.n	8006802 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f88e 	bl	800691c <I2C_MemoryTransmit_TXE_BTF>
}
 8006800:	e012      	b.n	8006828 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	781a      	ldrb	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800681c:	b29b      	uxth	r3, r3
 800681e:	3b01      	subs	r3, #1
 8006820:	b29a      	uxth	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006826:	e7ff      	b.n	8006828 <I2C_MasterTransmit_TXE+0x130>
 8006828:	bf00      	nop
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b21      	cmp	r3, #33	; 0x21
 8006848:	d164      	bne.n	8006914 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684e:	b29b      	uxth	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d012      	beq.n	800687a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	781a      	ldrb	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686e:	b29b      	uxth	r3, r3
 8006870:	3b01      	subs	r3, #1
 8006872:	b29a      	uxth	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006878:	e04c      	b.n	8006914 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b08      	cmp	r3, #8
 800687e:	d01d      	beq.n	80068bc <I2C_MasterTransmit_BTF+0x8c>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b20      	cmp	r3, #32
 8006884:	d01a      	beq.n	80068bc <I2C_MasterTransmit_BTF+0x8c>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800688c:	d016      	beq.n	80068bc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800689c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2211      	movs	r2, #17
 80068a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff feb7 	bl	8006628 <HAL_I2C_MasterTxCpltCallback>
}
 80068ba:	e02b      	b.n	8006914 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068ca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068da:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2220      	movs	r2, #32
 80068e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b40      	cmp	r3, #64	; 0x40
 80068f4:	d107      	bne.n	8006906 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7ff fed2 	bl	80066a8 <HAL_I2C_MemTxCpltCallback>
}
 8006904:	e006      	b.n	8006914 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff fe8a 	bl	8006628 <HAL_I2C_MasterTxCpltCallback>
}
 8006914:	bf00      	nop
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006930:	2b00      	cmp	r3, #0
 8006932:	d11d      	bne.n	8006970 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006938:	2b01      	cmp	r3, #1
 800693a:	d10b      	bne.n	8006954 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006940:	b2da      	uxtb	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800694c:	1c9a      	adds	r2, r3, #2
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006952:	e073      	b.n	8006a3c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006958:	b29b      	uxth	r3, r3
 800695a:	121b      	asrs	r3, r3, #8
 800695c:	b2da      	uxtb	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800696e:	e065      	b.n	8006a3c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006974:	2b01      	cmp	r3, #1
 8006976:	d10b      	bne.n	8006990 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800697c:	b2da      	uxtb	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800698e:	e055      	b.n	8006a3c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006994:	2b02      	cmp	r3, #2
 8006996:	d151      	bne.n	8006a3c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	2b22      	cmp	r3, #34	; 0x22
 800699c:	d10d      	bne.n	80069ba <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069ac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80069b8:	e040      	b.n	8006a3c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069be:	b29b      	uxth	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d015      	beq.n	80069f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	2b21      	cmp	r3, #33	; 0x21
 80069c8:	d112      	bne.n	80069f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	781a      	ldrb	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80069ee:	e025      	b.n	8006a3c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d120      	bne.n	8006a3c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
 80069fc:	2b21      	cmp	r3, #33	; 0x21
 80069fe:	d11d      	bne.n	8006a3c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a0e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a1e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff fe36 	bl	80066a8 <HAL_I2C_MemTxCpltCallback>
}
 8006a3c:	bf00      	nop
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b22      	cmp	r3, #34	; 0x22
 8006a56:	f040 80ac 	bne.w	8006bb2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2b03      	cmp	r3, #3
 8006a66:	d921      	bls.n	8006aac <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	691a      	ldr	r2, [r3, #16]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	b2d2      	uxtb	r2, r2
 8006a74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	f040 808c 	bne.w	8006bb2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aa8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006aaa:	e082      	b.n	8006bb2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d075      	beq.n	8006ba0 <I2C_MasterReceive_RXNE+0x15c>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d002      	beq.n	8006ac0 <I2C_MasterReceive_RXNE+0x7c>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d16f      	bne.n	8006ba0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f001 f827 	bl	8007b14 <I2C_WaitOnSTOPRequestThroughIT>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d142      	bne.n	8006b52 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ada:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006aea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	691a      	ldr	r2, [r3, #16]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b40      	cmp	r3, #64	; 0x40
 8006b24:	d10a      	bne.n	8006b3c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7ff fdc1 	bl	80066bc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006b3a:	e03a      	b.n	8006bb2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2212      	movs	r2, #18
 8006b48:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff fd76 	bl	800663c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006b50:	e02f      	b.n	8006bb2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b60:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	691a      	ldr	r2, [r3, #16]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	3b01      	subs	r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7ff fd99 	bl	80066d0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006b9e:	e008      	b.n	8006bb2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bae:	605a      	str	r2, [r3, #4]
}
 8006bb0:	e7ff      	b.n	8006bb2 <I2C_MasterReceive_RXNE+0x16e>
 8006bb2:	bf00      	nop
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d11b      	bne.n	8006c0a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	691a      	ldr	r2, [r3, #16]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006c08:	e0bd      	b.n	8006d86 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d129      	bne.n	8006c68 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c22:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	d00a      	beq.n	8006c40 <I2C_MasterReceive_BTF+0x86>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d007      	beq.n	8006c40 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c3e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	691a      	ldr	r2, [r3, #16]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006c66:	e08e      	b.n	8006d86 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d176      	bne.n	8006d60 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d002      	beq.n	8006c7e <I2C_MasterReceive_BTF+0xc4>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b10      	cmp	r3, #16
 8006c7c:	d108      	bne.n	8006c90 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	e019      	b.n	8006cc4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d002      	beq.n	8006c9c <I2C_MasterReceive_BTF+0xe2>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d108      	bne.n	8006cae <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	e00a      	b.n	8006cc4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b10      	cmp	r3, #16
 8006cb2:	d007      	beq.n	8006cc4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cc2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	691a      	ldr	r2, [r3, #16]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	1c5a      	adds	r2, r3, #1
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	691a      	ldr	r2, [r3, #16]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	b2d2      	uxtb	r2, r2
 8006cf6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006d1e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b40      	cmp	r3, #64	; 0x40
 8006d32:	d10a      	bne.n	8006d4a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff fcba 	bl	80066bc <HAL_I2C_MemRxCpltCallback>
}
 8006d48:	e01d      	b.n	8006d86 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2212      	movs	r2, #18
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff fc6f 	bl	800663c <HAL_I2C_MasterRxCpltCallback>
}
 8006d5e:	e012      	b.n	8006d86 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	691a      	ldr	r2, [r3, #16]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006d86:	bf00      	nop
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b40      	cmp	r3, #64	; 0x40
 8006da0:	d117      	bne.n	8006dd2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d109      	bne.n	8006dbe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	461a      	mov	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006dba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006dbc:	e067      	b.n	8006e8e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	f043 0301 	orr.w	r3, r3, #1
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	611a      	str	r2, [r3, #16]
}
 8006dd0:	e05d      	b.n	8006e8e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dda:	d133      	bne.n	8006e44 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b21      	cmp	r3, #33	; 0x21
 8006de6:	d109      	bne.n	8006dfc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	461a      	mov	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006df8:	611a      	str	r2, [r3, #16]
 8006dfa:	e008      	b.n	8006e0e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	f043 0301 	orr.w	r3, r3, #1
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d004      	beq.n	8006e20 <I2C_Master_SB+0x92>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d108      	bne.n	8006e32 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d032      	beq.n	8006e8e <I2C_Master_SB+0x100>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d02d      	beq.n	8006e8e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e40:	605a      	str	r2, [r3, #4]
}
 8006e42:	e024      	b.n	8006e8e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10e      	bne.n	8006e6a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	11db      	asrs	r3, r3, #7
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	f003 0306 	and.w	r3, r3, #6
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f063 030f 	orn	r3, r3, #15
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	611a      	str	r2, [r3, #16]
}
 8006e68:	e011      	b.n	8006e8e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d10d      	bne.n	8006e8e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	11db      	asrs	r3, r3, #7
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	f003 0306 	and.w	r3, r3, #6
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	f063 030e 	orn	r3, r3, #14
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	611a      	str	r2, [r3, #16]
}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d004      	beq.n	8006ec0 <I2C_Master_ADD10+0x26>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d108      	bne.n	8006ed2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00c      	beq.n	8006ee2 <I2C_Master_ADD10+0x48>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d007      	beq.n	8006ee2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ee0:	605a      	str	r2, [r3, #4]
  }
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b091      	sub	sp, #68	; 0x44
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006efc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f04:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b22      	cmp	r3, #34	; 0x22
 8006f16:	f040 8169 	bne.w	80071ec <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10f      	bne.n	8006f42 <I2C_Master_ADDR+0x54>
 8006f22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006f26:	2b40      	cmp	r3, #64	; 0x40
 8006f28:	d10b      	bne.n	8006f42 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	633b      	str	r3, [r7, #48]	; 0x30
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f40:	e160      	b.n	8007204 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d11d      	bne.n	8006f86 <I2C_Master_ADDR+0x98>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f52:	d118      	bne.n	8006f86 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f54:	2300      	movs	r3, #0
 8006f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f78:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	651a      	str	r2, [r3, #80]	; 0x50
 8006f84:	e13e      	b.n	8007204 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d113      	bne.n	8006fb8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f90:	2300      	movs	r3, #0
 8006f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	e115      	b.n	80071e4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	f040 808a 	bne.w	80070d8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fca:	d137      	bne.n	800703c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fda:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fea:	d113      	bne.n	8007014 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ffa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	627b      	str	r3, [r7, #36]	; 0x24
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	627b      	str	r3, [r7, #36]	; 0x24
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	e0e7      	b.n	80071e4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007014:	2300      	movs	r3, #0
 8007016:	623b      	str	r3, [r7, #32]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	623b      	str	r3, [r7, #32]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	623b      	str	r3, [r7, #32]
 8007028:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	e0d3      	b.n	80071e4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800703c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703e:	2b08      	cmp	r3, #8
 8007040:	d02e      	beq.n	80070a0 <I2C_Master_ADDR+0x1b2>
 8007042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007044:	2b20      	cmp	r3, #32
 8007046:	d02b      	beq.n	80070a0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704a:	2b12      	cmp	r3, #18
 800704c:	d102      	bne.n	8007054 <I2C_Master_ADDR+0x166>
 800704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007050:	2b01      	cmp	r3, #1
 8007052:	d125      	bne.n	80070a0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007056:	2b04      	cmp	r3, #4
 8007058:	d00e      	beq.n	8007078 <I2C_Master_ADDR+0x18a>
 800705a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705c:	2b02      	cmp	r3, #2
 800705e:	d00b      	beq.n	8007078 <I2C_Master_ADDR+0x18a>
 8007060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007062:	2b10      	cmp	r3, #16
 8007064:	d008      	beq.n	8007078 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	e007      	b.n	8007088 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007086:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007088:	2300      	movs	r3, #0
 800708a:	61fb      	str	r3, [r7, #28]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	61fb      	str	r3, [r7, #28]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	61fb      	str	r3, [r7, #28]
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	e0a1      	b.n	80071e4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070b0:	2300      	movs	r3, #0
 80070b2:	61bb      	str	r3, [r7, #24]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	61bb      	str	r3, [r7, #24]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	61bb      	str	r3, [r7, #24]
 80070c4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	e085      	b.n	80071e4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d14d      	bne.n	800717e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80070e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	d016      	beq.n	8007116 <I2C_Master_ADDR+0x228>
 80070e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d013      	beq.n	8007116 <I2C_Master_ADDR+0x228>
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	2b10      	cmp	r3, #16
 80070f2:	d010      	beq.n	8007116 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007102:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	e007      	b.n	8007126 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007124:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007134:	d117      	bne.n	8007166 <I2C_Master_ADDR+0x278>
 8007136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007138:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800713c:	d00b      	beq.n	8007156 <I2C_Master_ADDR+0x268>
 800713e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007140:	2b01      	cmp	r3, #1
 8007142:	d008      	beq.n	8007156 <I2C_Master_ADDR+0x268>
 8007144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007146:	2b08      	cmp	r3, #8
 8007148:	d005      	beq.n	8007156 <I2C_Master_ADDR+0x268>
 800714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714c:	2b10      	cmp	r3, #16
 800714e:	d002      	beq.n	8007156 <I2C_Master_ADDR+0x268>
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	2b20      	cmp	r3, #32
 8007154:	d107      	bne.n	8007166 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007164:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007166:	2300      	movs	r3, #0
 8007168:	617b      	str	r3, [r7, #20]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	617b      	str	r3, [r7, #20]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	617b      	str	r3, [r7, #20]
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	e032      	b.n	80071e4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800718c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800719c:	d117      	bne.n	80071ce <I2C_Master_ADDR+0x2e0>
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071a4:	d00b      	beq.n	80071be <I2C_Master_ADDR+0x2d0>
 80071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d008      	beq.n	80071be <I2C_Master_ADDR+0x2d0>
 80071ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ae:	2b08      	cmp	r3, #8
 80071b0:	d005      	beq.n	80071be <I2C_Master_ADDR+0x2d0>
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	2b10      	cmp	r3, #16
 80071b6:	d002      	beq.n	80071be <I2C_Master_ADDR+0x2d0>
 80071b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ba:	2b20      	cmp	r3, #32
 80071bc:	d107      	bne.n	80071ce <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071ce:	2300      	movs	r3, #0
 80071d0:	613b      	str	r3, [r7, #16]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	613b      	str	r3, [r7, #16]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	613b      	str	r3, [r7, #16]
 80071e2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80071ea:	e00b      	b.n	8007204 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071ec:	2300      	movs	r3, #0
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	68fb      	ldr	r3, [r7, #12]
}
 8007202:	e7ff      	b.n	8007204 <I2C_Master_ADDR+0x316>
 8007204:	bf00      	nop
 8007206:	3744      	adds	r7, #68	; 0x44
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d02b      	beq.n	8007282 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	781a      	ldrb	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007244:	b29b      	uxth	r3, r3
 8007246:	3b01      	subs	r3, #1
 8007248:	b29a      	uxth	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d114      	bne.n	8007282 <I2C_SlaveTransmit_TXE+0x72>
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	2b29      	cmp	r3, #41	; 0x29
 800725c:	d111      	bne.n	8007282 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800726c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2221      	movs	r2, #33	; 0x21
 8007272:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2228      	movs	r2, #40	; 0x28
 8007278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7ff f9e7 	bl	8006650 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007282:	bf00      	nop
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007296:	b29b      	uxth	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d011      	beq.n	80072c0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a0:	781a      	ldrb	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	3b01      	subs	r3, #1
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d02c      	beq.n	8007340 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	691a      	ldr	r2, [r3, #16]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	b2d2      	uxtb	r2, r2
 80072f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007302:	b29b      	uxth	r3, r3
 8007304:	3b01      	subs	r3, #1
 8007306:	b29a      	uxth	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d114      	bne.n	8007340 <I2C_SlaveReceive_RXNE+0x74>
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	2b2a      	cmp	r3, #42	; 0x2a
 800731a:	d111      	bne.n	8007340 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800732a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2222      	movs	r2, #34	; 0x22
 8007330:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2228      	movs	r2, #40	; 0x28
 8007336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7ff f992 	bl	8006664 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007340:	bf00      	nop
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007354:	b29b      	uxth	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d012      	beq.n	8007380 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	691a      	ldr	r2, [r3, #16]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	b2d2      	uxtb	r2, r2
 8007366:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007376:	b29b      	uxth	r3, r3
 8007378:	3b01      	subs	r3, #1
 800737a:	b29a      	uxth	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007396:	2300      	movs	r3, #0
 8007398:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073a6:	2b28      	cmp	r3, #40	; 0x28
 80073a8:	d127      	bne.n	80073fa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	089b      	lsrs	r3, r3, #2
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80073c6:	2301      	movs	r3, #1
 80073c8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	09db      	lsrs	r3, r3, #7
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d103      	bne.n	80073de <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	81bb      	strh	r3, [r7, #12]
 80073dc:	e002      	b.n	80073e4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80073ec:	89ba      	ldrh	r2, [r7, #12]
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7ff f940 	bl	8006678 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80073f8:	e00e      	b.n	8007418 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073fa:	2300      	movs	r3, #0
 80073fc:	60bb      	str	r3, [r7, #8]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	60bb      	str	r3, [r7, #8]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	60bb      	str	r3, [r7, #8]
 800740e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007418:	bf00      	nop
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800742e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800743e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007440:	2300      	movs	r3, #0
 8007442:	60bb      	str	r3, [r7, #8]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	60bb      	str	r3, [r7, #8]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0201 	orr.w	r2, r2, #1
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800746c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800747c:	d172      	bne.n	8007564 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800747e:	7bfb      	ldrb	r3, [r7, #15]
 8007480:	2b22      	cmp	r3, #34	; 0x22
 8007482:	d002      	beq.n	800748a <I2C_Slave_STOPF+0x6a>
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	2b2a      	cmp	r3, #42	; 0x2a
 8007488:	d135      	bne.n	80074f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	b29a      	uxth	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800749c:	b29b      	uxth	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d005      	beq.n	80074ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a6:	f043 0204 	orr.w	r2, r3, #4
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fe faa4 	bl	8005a10 <HAL_DMA_GetState>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d049      	beq.n	8007562 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d2:	4a69      	ldr	r2, [pc, #420]	; (8007678 <I2C_Slave_STOPF+0x258>)
 80074d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe f8ec 	bl	80056b8 <HAL_DMA_Abort_IT>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d03d      	beq.n	8007562 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074f0:	4610      	mov	r0, r2
 80074f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80074f4:	e035      	b.n	8007562 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	b29a      	uxth	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d005      	beq.n	800751a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f043 0204 	orr.w	r2, r3, #4
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007528:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe fa6e 	bl	8005a10 <HAL_DMA_GetState>
 8007534:	4603      	mov	r3, r0
 8007536:	2b01      	cmp	r3, #1
 8007538:	d014      	beq.n	8007564 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753e:	4a4e      	ldr	r2, [pc, #312]	; (8007678 <I2C_Slave_STOPF+0x258>)
 8007540:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007546:	4618      	mov	r0, r3
 8007548:	f7fe f8b6 	bl	80056b8 <HAL_DMA_Abort_IT>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d008      	beq.n	8007564 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800755c:	4610      	mov	r0, r2
 800755e:	4798      	blx	r3
 8007560:	e000      	b.n	8007564 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007562:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007568:	b29b      	uxth	r3, r3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d03e      	beq.n	80075ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b04      	cmp	r3, #4
 800757a:	d112      	bne.n	80075a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691a      	ldr	r2, [r3, #16]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	1c5a      	adds	r2, r3, #1
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007598:	b29b      	uxth	r3, r3
 800759a:	3b01      	subs	r3, #1
 800759c:	b29a      	uxth	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ac:	2b40      	cmp	r3, #64	; 0x40
 80075ae:	d112      	bne.n	80075d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	691a      	ldr	r2, [r3, #16]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	b2d2      	uxtb	r2, r2
 80075bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075da:	b29b      	uxth	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d005      	beq.n	80075ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	f043 0204 	orr.w	r2, r3, #4
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f8b3 	bl	8007760 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80075fa:	e039      	b.n	8007670 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007600:	d109      	bne.n	8007616 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2228      	movs	r2, #40	; 0x28
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff f827 	bl	8006664 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b28      	cmp	r3, #40	; 0x28
 8007620:	d111      	bne.n	8007646 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a15      	ldr	r2, [pc, #84]	; (800767c <I2C_Slave_STOPF+0x25c>)
 8007626:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2220      	movs	r2, #32
 8007632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7ff f828 	bl	8006694 <HAL_I2C_ListenCpltCallback>
}
 8007644:	e014      	b.n	8007670 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	2b22      	cmp	r3, #34	; 0x22
 800764c:	d002      	beq.n	8007654 <I2C_Slave_STOPF+0x234>
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	2b22      	cmp	r3, #34	; 0x22
 8007652:	d10d      	bne.n	8007670 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2220      	movs	r2, #32
 800765e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7fe fffa 	bl	8006664 <HAL_I2C_SlaveRxCpltCallback>
}
 8007670:	bf00      	nop
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	080079c5 	.word	0x080079c5
 800767c:	ffff0000 	.word	0xffff0000

08007680 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800768e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007694:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2b08      	cmp	r3, #8
 800769a:	d002      	beq.n	80076a2 <I2C_Slave_AF+0x22>
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b20      	cmp	r3, #32
 80076a0:	d129      	bne.n	80076f6 <I2C_Slave_AF+0x76>
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
 80076a4:	2b28      	cmp	r3, #40	; 0x28
 80076a6:	d126      	bne.n	80076f6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a2c      	ldr	r2, [pc, #176]	; (800775c <I2C_Slave_AF+0xdc>)
 80076ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80076bc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076c6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076d6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7fe ffd0 	bl	8006694 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80076f4:	e02e      	b.n	8007754 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	2b21      	cmp	r3, #33	; 0x21
 80076fa:	d126      	bne.n	800774a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a17      	ldr	r2, [pc, #92]	; (800775c <I2C_Slave_AF+0xdc>)
 8007700:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2221      	movs	r2, #33	; 0x21
 8007706:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2220      	movs	r2, #32
 800770c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007726:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007730:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007740:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7fe ff84 	bl	8006650 <HAL_I2C_SlaveTxCpltCallback>
}
 8007748:	e004      	b.n	8007754 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007752:	615a      	str	r2, [r3, #20]
}
 8007754:	bf00      	nop
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	ffff0000 	.word	0xffff0000

08007760 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800776e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007776:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	2b10      	cmp	r3, #16
 800777c:	d002      	beq.n	8007784 <I2C_ITError+0x24>
 800777e:	7bbb      	ldrb	r3, [r7, #14]
 8007780:	2b40      	cmp	r3, #64	; 0x40
 8007782:	d10a      	bne.n	800779a <I2C_ITError+0x3a>
 8007784:	7bfb      	ldrb	r3, [r7, #15]
 8007786:	2b22      	cmp	r3, #34	; 0x22
 8007788:	d107      	bne.n	800779a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007798:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80077a0:	2b28      	cmp	r3, #40	; 0x28
 80077a2:	d107      	bne.n	80077b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2228      	movs	r2, #40	; 0x28
 80077ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80077b2:	e015      	b.n	80077e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077c2:	d00a      	beq.n	80077da <I2C_ITError+0x7a>
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	2b60      	cmp	r3, #96	; 0x60
 80077c8:	d007      	beq.n	80077da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ee:	d162      	bne.n	80078b6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b01      	cmp	r3, #1
 800780c:	d020      	beq.n	8007850 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007812:	4a6a      	ldr	r2, [pc, #424]	; (80079bc <I2C_ITError+0x25c>)
 8007814:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781a:	4618      	mov	r0, r3
 800781c:	f7fd ff4c 	bl	80056b8 <HAL_DMA_Abort_IT>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 8089 	beq.w	800793a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0201 	bic.w	r2, r2, #1
 8007836:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2220      	movs	r2, #32
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800784a:	4610      	mov	r0, r2
 800784c:	4798      	blx	r3
 800784e:	e074      	b.n	800793a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007854:	4a59      	ldr	r2, [pc, #356]	; (80079bc <I2C_ITError+0x25c>)
 8007856:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785c:	4618      	mov	r0, r3
 800785e:	f7fd ff2b 	bl	80056b8 <HAL_DMA_Abort_IT>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d068      	beq.n	800793a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007872:	2b40      	cmp	r3, #64	; 0x40
 8007874:	d10b      	bne.n	800788e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	691a      	ldr	r2, [r3, #16]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	b2d2      	uxtb	r2, r2
 8007882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 0201 	bic.w	r2, r2, #1
 800789c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2220      	movs	r2, #32
 80078a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078b0:	4610      	mov	r0, r2
 80078b2:	4798      	blx	r3
 80078b4:	e041      	b.n	800793a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b60      	cmp	r3, #96	; 0x60
 80078c0:	d125      	bne.n	800790e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2220      	movs	r2, #32
 80078c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078da:	2b40      	cmp	r3, #64	; 0x40
 80078dc:	d10b      	bne.n	80078f6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	691a      	ldr	r2, [r3, #16]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	b2d2      	uxtb	r2, r2
 80078ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	1c5a      	adds	r2, r3, #1
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0201 	bic.w	r2, r2, #1
 8007904:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7fe feec 	bl	80066e4 <HAL_I2C_AbortCpltCallback>
 800790c:	e015      	b.n	800793a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007918:	2b40      	cmp	r3, #64	; 0x40
 800791a:	d10b      	bne.n	8007934 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	691a      	ldr	r2, [r3, #16]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	b2d2      	uxtb	r2, r2
 8007928:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	1c5a      	adds	r2, r3, #1
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7fe fecb 	bl	80066d0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10e      	bne.n	8007968 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007950:	2b00      	cmp	r3, #0
 8007952:	d109      	bne.n	8007968 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800795a:	2b00      	cmp	r3, #0
 800795c:	d104      	bne.n	8007968 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007964:	2b00      	cmp	r3, #0
 8007966:	d007      	beq.n	8007978 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007976:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800797e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007984:	f003 0304 	and.w	r3, r3, #4
 8007988:	2b04      	cmp	r3, #4
 800798a:	d113      	bne.n	80079b4 <I2C_ITError+0x254>
 800798c:	7bfb      	ldrb	r3, [r7, #15]
 800798e:	2b28      	cmp	r3, #40	; 0x28
 8007990:	d110      	bne.n	80079b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a0a      	ldr	r2, [pc, #40]	; (80079c0 <I2C_ITError+0x260>)
 8007996:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7fe fe70 	bl	8006694 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80079b4:	bf00      	nop
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	080079c5 	.word	0x080079c5
 80079c0:	ffff0000 	.word	0xffff0000

080079c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079dc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80079de:	4b4b      	ldr	r3, [pc, #300]	; (8007b0c <I2C_DMAAbort+0x148>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	08db      	lsrs	r3, r3, #3
 80079e4:	4a4a      	ldr	r2, [pc, #296]	; (8007b10 <I2C_DMAAbort+0x14c>)
 80079e6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ea:	0a1a      	lsrs	r2, r3, #8
 80079ec:	4613      	mov	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	00da      	lsls	r2, r3, #3
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d106      	bne.n	8007a0c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	f043 0220 	orr.w	r2, r3, #32
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007a0a:	e00a      	b.n	8007a22 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a20:	d0ea      	beq.n	80079f8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2e:	2200      	movs	r2, #0
 8007a30:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3e:	2200      	movs	r2, #0
 8007a40:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a50:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2200      	movs	r2, #0
 8007a56:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a64:	2200      	movs	r2, #0
 8007a66:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	2200      	movs	r2, #0
 8007a76:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 0201 	bic.w	r2, r2, #1
 8007a86:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b60      	cmp	r3, #96	; 0x60
 8007a92:	d10e      	bne.n	8007ab2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2220      	movs	r2, #32
 8007a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007aaa:	6978      	ldr	r0, [r7, #20]
 8007aac:	f7fe fe1a 	bl	80066e4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ab0:	e027      	b.n	8007b02 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ab2:	7cfb      	ldrb	r3, [r7, #19]
 8007ab4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ab8:	2b28      	cmp	r3, #40	; 0x28
 8007aba:	d117      	bne.n	8007aec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f042 0201 	orr.w	r2, r2, #1
 8007aca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ada:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2228      	movs	r2, #40	; 0x28
 8007ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007aea:	e007      	b.n	8007afc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2220      	movs	r2, #32
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007afc:	6978      	ldr	r0, [r7, #20]
 8007afe:	f7fe fde7 	bl	80066d0 <HAL_I2C_ErrorCallback>
}
 8007b02:	bf00      	nop
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20000220 	.word	0x20000220
 8007b10:	14f8b589 	.word	0x14f8b589

08007b14 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b20:	4b13      	ldr	r3, [pc, #76]	; (8007b70 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	08db      	lsrs	r3, r3, #3
 8007b26:	4a13      	ldr	r2, [pc, #76]	; (8007b74 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007b28:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2c:	0a1a      	lsrs	r2, r3, #8
 8007b2e:	4613      	mov	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d107      	bne.n	8007b52 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	f043 0220 	orr.w	r2, r3, #32
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e008      	b.n	8007b64 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b60:	d0e9      	beq.n	8007b36 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	20000220 	.word	0x20000220
 8007b74:	14f8b589 	.word	0x14f8b589

08007b78 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b84:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007b88:	d103      	bne.n	8007b92 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007b90:	e007      	b.n	8007ba2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b96:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007b9a:	d102      	bne.n	8007ba2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2208      	movs	r2, #8
 8007ba0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007ba2:	bf00      	nop
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
	...

08007bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d101      	bne.n	8007bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e267      	b.n	8008092 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d075      	beq.n	8007cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007bce:	4b88      	ldr	r3, [pc, #544]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f003 030c 	and.w	r3, r3, #12
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	d00c      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bda:	4b85      	ldr	r3, [pc, #532]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007be2:	2b08      	cmp	r3, #8
 8007be4:	d112      	bne.n	8007c0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007be6:	4b82      	ldr	r3, [pc, #520]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bf2:	d10b      	bne.n	8007c0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bf4:	4b7e      	ldr	r3, [pc, #504]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d05b      	beq.n	8007cb8 <HAL_RCC_OscConfig+0x108>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d157      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e242      	b.n	8008092 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c14:	d106      	bne.n	8007c24 <HAL_RCC_OscConfig+0x74>
 8007c16:	4b76      	ldr	r3, [pc, #472]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a75      	ldr	r2, [pc, #468]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c20:	6013      	str	r3, [r2, #0]
 8007c22:	e01d      	b.n	8007c60 <HAL_RCC_OscConfig+0xb0>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c2c:	d10c      	bne.n	8007c48 <HAL_RCC_OscConfig+0x98>
 8007c2e:	4b70      	ldr	r3, [pc, #448]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a6f      	ldr	r2, [pc, #444]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	4b6d      	ldr	r3, [pc, #436]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a6c      	ldr	r2, [pc, #432]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	e00b      	b.n	8007c60 <HAL_RCC_OscConfig+0xb0>
 8007c48:	4b69      	ldr	r3, [pc, #420]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a68      	ldr	r2, [pc, #416]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	4b66      	ldr	r3, [pc, #408]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a65      	ldr	r2, [pc, #404]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d013      	beq.n	8007c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c68:	f7fc fe6c 	bl	8004944 <HAL_GetTick>
 8007c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c6e:	e008      	b.n	8007c82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c70:	f7fc fe68 	bl	8004944 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	2b64      	cmp	r3, #100	; 0x64
 8007c7c:	d901      	bls.n	8007c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e207      	b.n	8008092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c82:	4b5b      	ldr	r3, [pc, #364]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0f0      	beq.n	8007c70 <HAL_RCC_OscConfig+0xc0>
 8007c8e:	e014      	b.n	8007cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c90:	f7fc fe58 	bl	8004944 <HAL_GetTick>
 8007c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c96:	e008      	b.n	8007caa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c98:	f7fc fe54 	bl	8004944 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b64      	cmp	r3, #100	; 0x64
 8007ca4:	d901      	bls.n	8007caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e1f3      	b.n	8008092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007caa:	4b51      	ldr	r3, [pc, #324]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1f0      	bne.n	8007c98 <HAL_RCC_OscConfig+0xe8>
 8007cb6:	e000      	b.n	8007cba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0302 	and.w	r3, r3, #2
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d063      	beq.n	8007d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007cc6:	4b4a      	ldr	r3, [pc, #296]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f003 030c 	and.w	r3, r3, #12
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00b      	beq.n	8007cea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cd2:	4b47      	ldr	r3, [pc, #284]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007cda:	2b08      	cmp	r3, #8
 8007cdc:	d11c      	bne.n	8007d18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cde:	4b44      	ldr	r3, [pc, #272]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d116      	bne.n	8007d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cea:	4b41      	ldr	r3, [pc, #260]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d005      	beq.n	8007d02 <HAL_RCC_OscConfig+0x152>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d001      	beq.n	8007d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e1c7      	b.n	8008092 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d02:	4b3b      	ldr	r3, [pc, #236]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	00db      	lsls	r3, r3, #3
 8007d10:	4937      	ldr	r1, [pc, #220]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d16:	e03a      	b.n	8007d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d020      	beq.n	8007d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d20:	4b34      	ldr	r3, [pc, #208]	; (8007df4 <HAL_RCC_OscConfig+0x244>)
 8007d22:	2201      	movs	r2, #1
 8007d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d26:	f7fc fe0d 	bl	8004944 <HAL_GetTick>
 8007d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d2c:	e008      	b.n	8007d40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d2e:	f7fc fe09 	bl	8004944 <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d901      	bls.n	8007d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e1a8      	b.n	8008092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d40:	4b2b      	ldr	r3, [pc, #172]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d0f0      	beq.n	8007d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d4c:	4b28      	ldr	r3, [pc, #160]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	00db      	lsls	r3, r3, #3
 8007d5a:	4925      	ldr	r1, [pc, #148]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	600b      	str	r3, [r1, #0]
 8007d60:	e015      	b.n	8007d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d62:	4b24      	ldr	r3, [pc, #144]	; (8007df4 <HAL_RCC_OscConfig+0x244>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d68:	f7fc fdec 	bl	8004944 <HAL_GetTick>
 8007d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d6e:	e008      	b.n	8007d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d70:	f7fc fde8 	bl	8004944 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d901      	bls.n	8007d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e187      	b.n	8008092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d82:	4b1b      	ldr	r3, [pc, #108]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 0302 	and.w	r3, r3, #2
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1f0      	bne.n	8007d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0308 	and.w	r3, r3, #8
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d036      	beq.n	8007e08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d016      	beq.n	8007dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007da2:	4b15      	ldr	r3, [pc, #84]	; (8007df8 <HAL_RCC_OscConfig+0x248>)
 8007da4:	2201      	movs	r2, #1
 8007da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007da8:	f7fc fdcc 	bl	8004944 <HAL_GetTick>
 8007dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dae:	e008      	b.n	8007dc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007db0:	f7fc fdc8 	bl	8004944 <HAL_GetTick>
 8007db4:	4602      	mov	r2, r0
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d901      	bls.n	8007dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e167      	b.n	8008092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dc2:	4b0b      	ldr	r3, [pc, #44]	; (8007df0 <HAL_RCC_OscConfig+0x240>)
 8007dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0f0      	beq.n	8007db0 <HAL_RCC_OscConfig+0x200>
 8007dce:	e01b      	b.n	8007e08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007dd0:	4b09      	ldr	r3, [pc, #36]	; (8007df8 <HAL_RCC_OscConfig+0x248>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dd6:	f7fc fdb5 	bl	8004944 <HAL_GetTick>
 8007dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ddc:	e00e      	b.n	8007dfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dde:	f7fc fdb1 	bl	8004944 <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d907      	bls.n	8007dfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e150      	b.n	8008092 <HAL_RCC_OscConfig+0x4e2>
 8007df0:	40023800 	.word	0x40023800
 8007df4:	42470000 	.word	0x42470000
 8007df8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dfc:	4b88      	ldr	r3, [pc, #544]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e00:	f003 0302 	and.w	r3, r3, #2
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1ea      	bne.n	8007dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0304 	and.w	r3, r3, #4
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 8097 	beq.w	8007f44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e16:	2300      	movs	r3, #0
 8007e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e1a:	4b81      	ldr	r3, [pc, #516]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10f      	bne.n	8007e46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e26:	2300      	movs	r3, #0
 8007e28:	60bb      	str	r3, [r7, #8]
 8007e2a:	4b7d      	ldr	r3, [pc, #500]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2e:	4a7c      	ldr	r2, [pc, #496]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e34:	6413      	str	r3, [r2, #64]	; 0x40
 8007e36:	4b7a      	ldr	r3, [pc, #488]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e3e:	60bb      	str	r3, [r7, #8]
 8007e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e42:	2301      	movs	r3, #1
 8007e44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e46:	4b77      	ldr	r3, [pc, #476]	; (8008024 <HAL_RCC_OscConfig+0x474>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d118      	bne.n	8007e84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e52:	4b74      	ldr	r3, [pc, #464]	; (8008024 <HAL_RCC_OscConfig+0x474>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a73      	ldr	r2, [pc, #460]	; (8008024 <HAL_RCC_OscConfig+0x474>)
 8007e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e5e:	f7fc fd71 	bl	8004944 <HAL_GetTick>
 8007e62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e64:	e008      	b.n	8007e78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e66:	f7fc fd6d 	bl	8004944 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d901      	bls.n	8007e78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e10c      	b.n	8008092 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e78:	4b6a      	ldr	r3, [pc, #424]	; (8008024 <HAL_RCC_OscConfig+0x474>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d0f0      	beq.n	8007e66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d106      	bne.n	8007e9a <HAL_RCC_OscConfig+0x2ea>
 8007e8c:	4b64      	ldr	r3, [pc, #400]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e90:	4a63      	ldr	r2, [pc, #396]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007e92:	f043 0301 	orr.w	r3, r3, #1
 8007e96:	6713      	str	r3, [r2, #112]	; 0x70
 8007e98:	e01c      	b.n	8007ed4 <HAL_RCC_OscConfig+0x324>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	2b05      	cmp	r3, #5
 8007ea0:	d10c      	bne.n	8007ebc <HAL_RCC_OscConfig+0x30c>
 8007ea2:	4b5f      	ldr	r3, [pc, #380]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea6:	4a5e      	ldr	r2, [pc, #376]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007ea8:	f043 0304 	orr.w	r3, r3, #4
 8007eac:	6713      	str	r3, [r2, #112]	; 0x70
 8007eae:	4b5c      	ldr	r3, [pc, #368]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb2:	4a5b      	ldr	r2, [pc, #364]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007eb4:	f043 0301 	orr.w	r3, r3, #1
 8007eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8007eba:	e00b      	b.n	8007ed4 <HAL_RCC_OscConfig+0x324>
 8007ebc:	4b58      	ldr	r3, [pc, #352]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec0:	4a57      	ldr	r2, [pc, #348]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007ec2:	f023 0301 	bic.w	r3, r3, #1
 8007ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ec8:	4b55      	ldr	r3, [pc, #340]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ecc:	4a54      	ldr	r2, [pc, #336]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007ece:	f023 0304 	bic.w	r3, r3, #4
 8007ed2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d015      	beq.n	8007f08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007edc:	f7fc fd32 	bl	8004944 <HAL_GetTick>
 8007ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ee2:	e00a      	b.n	8007efa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ee4:	f7fc fd2e 	bl	8004944 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d901      	bls.n	8007efa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e0cb      	b.n	8008092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007efa:	4b49      	ldr	r3, [pc, #292]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007efe:	f003 0302 	and.w	r3, r3, #2
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d0ee      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x334>
 8007f06:	e014      	b.n	8007f32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f08:	f7fc fd1c 	bl	8004944 <HAL_GetTick>
 8007f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f0e:	e00a      	b.n	8007f26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f10:	f7fc fd18 	bl	8004944 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d901      	bls.n	8007f26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e0b5      	b.n	8008092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f26:	4b3e      	ldr	r3, [pc, #248]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f2a:	f003 0302 	and.w	r3, r3, #2
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1ee      	bne.n	8007f10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f32:	7dfb      	ldrb	r3, [r7, #23]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d105      	bne.n	8007f44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f38:	4b39      	ldr	r3, [pc, #228]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3c:	4a38      	ldr	r2, [pc, #224]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 80a1 	beq.w	8008090 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f4e:	4b34      	ldr	r3, [pc, #208]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 030c 	and.w	r3, r3, #12
 8007f56:	2b08      	cmp	r3, #8
 8007f58:	d05c      	beq.n	8008014 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d141      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f62:	4b31      	ldr	r3, [pc, #196]	; (8008028 <HAL_RCC_OscConfig+0x478>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f68:	f7fc fcec 	bl	8004944 <HAL_GetTick>
 8007f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f6e:	e008      	b.n	8007f82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f70:	f7fc fce8 	bl	8004944 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d901      	bls.n	8007f82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e087      	b.n	8008092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f82:	4b27      	ldr	r3, [pc, #156]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1f0      	bne.n	8007f70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	69da      	ldr	r2, [r3, #28]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	431a      	orrs	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9c:	019b      	lsls	r3, r3, #6
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa4:	085b      	lsrs	r3, r3, #1
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	041b      	lsls	r3, r3, #16
 8007faa:	431a      	orrs	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb0:	061b      	lsls	r3, r3, #24
 8007fb2:	491b      	ldr	r1, [pc, #108]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007fb8:	4b1b      	ldr	r3, [pc, #108]	; (8008028 <HAL_RCC_OscConfig+0x478>)
 8007fba:	2201      	movs	r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fbe:	f7fc fcc1 	bl	8004944 <HAL_GetTick>
 8007fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fc4:	e008      	b.n	8007fd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fc6:	f7fc fcbd 	bl	8004944 <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d901      	bls.n	8007fd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e05c      	b.n	8008092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fd8:	4b11      	ldr	r3, [pc, #68]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d0f0      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x416>
 8007fe4:	e054      	b.n	8008090 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fe6:	4b10      	ldr	r3, [pc, #64]	; (8008028 <HAL_RCC_OscConfig+0x478>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fec:	f7fc fcaa 	bl	8004944 <HAL_GetTick>
 8007ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ff2:	e008      	b.n	8008006 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ff4:	f7fc fca6 	bl	8004944 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d901      	bls.n	8008006 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e045      	b.n	8008092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008006:	4b06      	ldr	r3, [pc, #24]	; (8008020 <HAL_RCC_OscConfig+0x470>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1f0      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x444>
 8008012:	e03d      	b.n	8008090 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d107      	bne.n	800802c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e038      	b.n	8008092 <HAL_RCC_OscConfig+0x4e2>
 8008020:	40023800 	.word	0x40023800
 8008024:	40007000 	.word	0x40007000
 8008028:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800802c:	4b1b      	ldr	r3, [pc, #108]	; (800809c <HAL_RCC_OscConfig+0x4ec>)
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d028      	beq.n	800808c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008044:	429a      	cmp	r2, r3
 8008046:	d121      	bne.n	800808c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008052:	429a      	cmp	r2, r3
 8008054:	d11a      	bne.n	800808c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800805c:	4013      	ands	r3, r2
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008062:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008064:	4293      	cmp	r3, r2
 8008066:	d111      	bne.n	800808c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008072:	085b      	lsrs	r3, r3, #1
 8008074:	3b01      	subs	r3, #1
 8008076:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008078:	429a      	cmp	r2, r3
 800807a:	d107      	bne.n	800808c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008086:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008088:	429a      	cmp	r2, r3
 800808a:	d001      	beq.n	8008090 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e000      	b.n	8008092 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3718      	adds	r7, #24
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	40023800 	.word	0x40023800

080080a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d101      	bne.n	80080b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e0cc      	b.n	800824e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80080b4:	4b68      	ldr	r3, [pc, #416]	; (8008258 <HAL_RCC_ClockConfig+0x1b8>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 0307 	and.w	r3, r3, #7
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d90c      	bls.n	80080dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080c2:	4b65      	ldr	r3, [pc, #404]	; (8008258 <HAL_RCC_ClockConfig+0x1b8>)
 80080c4:	683a      	ldr	r2, [r7, #0]
 80080c6:	b2d2      	uxtb	r2, r2
 80080c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080ca:	4b63      	ldr	r3, [pc, #396]	; (8008258 <HAL_RCC_ClockConfig+0x1b8>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0307 	and.w	r3, r3, #7
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d001      	beq.n	80080dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e0b8      	b.n	800824e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d020      	beq.n	800812a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0304 	and.w	r3, r3, #4
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d005      	beq.n	8008100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080f4:	4b59      	ldr	r3, [pc, #356]	; (800825c <HAL_RCC_ClockConfig+0x1bc>)
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	4a58      	ldr	r2, [pc, #352]	; (800825c <HAL_RCC_ClockConfig+0x1bc>)
 80080fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80080fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0308 	and.w	r3, r3, #8
 8008108:	2b00      	cmp	r3, #0
 800810a:	d005      	beq.n	8008118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800810c:	4b53      	ldr	r3, [pc, #332]	; (800825c <HAL_RCC_ClockConfig+0x1bc>)
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	4a52      	ldr	r2, [pc, #328]	; (800825c <HAL_RCC_ClockConfig+0x1bc>)
 8008112:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008118:	4b50      	ldr	r3, [pc, #320]	; (800825c <HAL_RCC_ClockConfig+0x1bc>)
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	494d      	ldr	r1, [pc, #308]	; (800825c <HAL_RCC_ClockConfig+0x1bc>)
 8008126:	4313      	orrs	r3, r2
 8008128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	2b00      	cmp	r3, #0
 8008134:	d044      	beq.n	80081c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d107      	bne.n	800814e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800813e:	4b47      	ldr	r3, [pc, #284]	; (800825c <HAL_RCC_ClockConfig+0x1bc>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d119      	bne.n	800817e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e07f      	b.n	800824e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	2b02      	cmp	r3, #2
 8008154:	d003      	beq.n	800815e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800815a:	2b03      	cmp	r3, #3
 800815c:	d107      	bne.n	800816e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800815e:	4b3f      	ldr	r3, [pc, #252]	; (800825c <HAL_RCC_ClockConfig+0x1bc>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d109      	bne.n	800817e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e06f      	b.n	800824e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800816e:	4b3b      	ldr	r3, [pc, #236]	; (800825c <HAL_RCC_ClockConfig+0x1bc>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0302 	and.w	r3, r3, #2
 8008176:	2b00      	cmp	r3, #0
 8008178:	d101      	bne.n	800817e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e067      	b.n	800824e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800817e:	4b37      	ldr	r3, [pc, #220]	; (800825c <HAL_RCC_ClockConfig+0x1bc>)
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f023 0203 	bic.w	r2, r3, #3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	4934      	ldr	r1, [pc, #208]	; (800825c <HAL_RCC_ClockConfig+0x1bc>)
 800818c:	4313      	orrs	r3, r2
 800818e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008190:	f7fc fbd8 	bl	8004944 <HAL_GetTick>
 8008194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008196:	e00a      	b.n	80081ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008198:	f7fc fbd4 	bl	8004944 <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d901      	bls.n	80081ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e04f      	b.n	800824e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081ae:	4b2b      	ldr	r3, [pc, #172]	; (800825c <HAL_RCC_ClockConfig+0x1bc>)
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f003 020c 	and.w	r2, r3, #12
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	429a      	cmp	r2, r3
 80081be:	d1eb      	bne.n	8008198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80081c0:	4b25      	ldr	r3, [pc, #148]	; (8008258 <HAL_RCC_ClockConfig+0x1b8>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0307 	and.w	r3, r3, #7
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d20c      	bcs.n	80081e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ce:	4b22      	ldr	r3, [pc, #136]	; (8008258 <HAL_RCC_ClockConfig+0x1b8>)
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	b2d2      	uxtb	r2, r2
 80081d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081d6:	4b20      	ldr	r3, [pc, #128]	; (8008258 <HAL_RCC_ClockConfig+0x1b8>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 0307 	and.w	r3, r3, #7
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d001      	beq.n	80081e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e032      	b.n	800824e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0304 	and.w	r3, r3, #4
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d008      	beq.n	8008206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081f4:	4b19      	ldr	r3, [pc, #100]	; (800825c <HAL_RCC_ClockConfig+0x1bc>)
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	4916      	ldr	r1, [pc, #88]	; (800825c <HAL_RCC_ClockConfig+0x1bc>)
 8008202:	4313      	orrs	r3, r2
 8008204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0308 	and.w	r3, r3, #8
 800820e:	2b00      	cmp	r3, #0
 8008210:	d009      	beq.n	8008226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008212:	4b12      	ldr	r3, [pc, #72]	; (800825c <HAL_RCC_ClockConfig+0x1bc>)
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	00db      	lsls	r3, r3, #3
 8008220:	490e      	ldr	r1, [pc, #56]	; (800825c <HAL_RCC_ClockConfig+0x1bc>)
 8008222:	4313      	orrs	r3, r2
 8008224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008226:	f000 f821 	bl	800826c <HAL_RCC_GetSysClockFreq>
 800822a:	4602      	mov	r2, r0
 800822c:	4b0b      	ldr	r3, [pc, #44]	; (800825c <HAL_RCC_ClockConfig+0x1bc>)
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	091b      	lsrs	r3, r3, #4
 8008232:	f003 030f 	and.w	r3, r3, #15
 8008236:	490a      	ldr	r1, [pc, #40]	; (8008260 <HAL_RCC_ClockConfig+0x1c0>)
 8008238:	5ccb      	ldrb	r3, [r1, r3]
 800823a:	fa22 f303 	lsr.w	r3, r2, r3
 800823e:	4a09      	ldr	r2, [pc, #36]	; (8008264 <HAL_RCC_ClockConfig+0x1c4>)
 8008240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008242:	4b09      	ldr	r3, [pc, #36]	; (8008268 <HAL_RCC_ClockConfig+0x1c8>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4618      	mov	r0, r3
 8008248:	f7fc fb38 	bl	80048bc <HAL_InitTick>

  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	40023c00 	.word	0x40023c00
 800825c:	40023800 	.word	0x40023800
 8008260:	08010140 	.word	0x08010140
 8008264:	20000220 	.word	0x20000220
 8008268:	20000224 	.word	0x20000224

0800826c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800826c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008270:	b094      	sub	sp, #80	; 0x50
 8008272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	647b      	str	r3, [r7, #68]	; 0x44
 8008278:	2300      	movs	r3, #0
 800827a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800827c:	2300      	movs	r3, #0
 800827e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008284:	4b79      	ldr	r3, [pc, #484]	; (800846c <HAL_RCC_GetSysClockFreq+0x200>)
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f003 030c 	and.w	r3, r3, #12
 800828c:	2b08      	cmp	r3, #8
 800828e:	d00d      	beq.n	80082ac <HAL_RCC_GetSysClockFreq+0x40>
 8008290:	2b08      	cmp	r3, #8
 8008292:	f200 80e1 	bhi.w	8008458 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008296:	2b00      	cmp	r3, #0
 8008298:	d002      	beq.n	80082a0 <HAL_RCC_GetSysClockFreq+0x34>
 800829a:	2b04      	cmp	r3, #4
 800829c:	d003      	beq.n	80082a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800829e:	e0db      	b.n	8008458 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80082a0:	4b73      	ldr	r3, [pc, #460]	; (8008470 <HAL_RCC_GetSysClockFreq+0x204>)
 80082a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80082a4:	e0db      	b.n	800845e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80082a6:	4b73      	ldr	r3, [pc, #460]	; (8008474 <HAL_RCC_GetSysClockFreq+0x208>)
 80082a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80082aa:	e0d8      	b.n	800845e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80082ac:	4b6f      	ldr	r3, [pc, #444]	; (800846c <HAL_RCC_GetSysClockFreq+0x200>)
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80082b6:	4b6d      	ldr	r3, [pc, #436]	; (800846c <HAL_RCC_GetSysClockFreq+0x200>)
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d063      	beq.n	800838a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082c2:	4b6a      	ldr	r3, [pc, #424]	; (800846c <HAL_RCC_GetSysClockFreq+0x200>)
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	099b      	lsrs	r3, r3, #6
 80082c8:	2200      	movs	r2, #0
 80082ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80082cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80082ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d4:	633b      	str	r3, [r7, #48]	; 0x30
 80082d6:	2300      	movs	r3, #0
 80082d8:	637b      	str	r3, [r7, #52]	; 0x34
 80082da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80082de:	4622      	mov	r2, r4
 80082e0:	462b      	mov	r3, r5
 80082e2:	f04f 0000 	mov.w	r0, #0
 80082e6:	f04f 0100 	mov.w	r1, #0
 80082ea:	0159      	lsls	r1, r3, #5
 80082ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80082f0:	0150      	lsls	r0, r2, #5
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	4621      	mov	r1, r4
 80082f8:	1a51      	subs	r1, r2, r1
 80082fa:	6139      	str	r1, [r7, #16]
 80082fc:	4629      	mov	r1, r5
 80082fe:	eb63 0301 	sbc.w	r3, r3, r1
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	f04f 0200 	mov.w	r2, #0
 8008308:	f04f 0300 	mov.w	r3, #0
 800830c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008310:	4659      	mov	r1, fp
 8008312:	018b      	lsls	r3, r1, #6
 8008314:	4651      	mov	r1, sl
 8008316:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800831a:	4651      	mov	r1, sl
 800831c:	018a      	lsls	r2, r1, #6
 800831e:	4651      	mov	r1, sl
 8008320:	ebb2 0801 	subs.w	r8, r2, r1
 8008324:	4659      	mov	r1, fp
 8008326:	eb63 0901 	sbc.w	r9, r3, r1
 800832a:	f04f 0200 	mov.w	r2, #0
 800832e:	f04f 0300 	mov.w	r3, #0
 8008332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800833a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800833e:	4690      	mov	r8, r2
 8008340:	4699      	mov	r9, r3
 8008342:	4623      	mov	r3, r4
 8008344:	eb18 0303 	adds.w	r3, r8, r3
 8008348:	60bb      	str	r3, [r7, #8]
 800834a:	462b      	mov	r3, r5
 800834c:	eb49 0303 	adc.w	r3, r9, r3
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	f04f 0200 	mov.w	r2, #0
 8008356:	f04f 0300 	mov.w	r3, #0
 800835a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800835e:	4629      	mov	r1, r5
 8008360:	024b      	lsls	r3, r1, #9
 8008362:	4621      	mov	r1, r4
 8008364:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008368:	4621      	mov	r1, r4
 800836a:	024a      	lsls	r2, r1, #9
 800836c:	4610      	mov	r0, r2
 800836e:	4619      	mov	r1, r3
 8008370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008372:	2200      	movs	r2, #0
 8008374:	62bb      	str	r3, [r7, #40]	; 0x28
 8008376:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008378:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800837c:	f7f8 fc8c 	bl	8000c98 <__aeabi_uldivmod>
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	4613      	mov	r3, r2
 8008386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008388:	e058      	b.n	800843c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800838a:	4b38      	ldr	r3, [pc, #224]	; (800846c <HAL_RCC_GetSysClockFreq+0x200>)
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	099b      	lsrs	r3, r3, #6
 8008390:	2200      	movs	r2, #0
 8008392:	4618      	mov	r0, r3
 8008394:	4611      	mov	r1, r2
 8008396:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800839a:	623b      	str	r3, [r7, #32]
 800839c:	2300      	movs	r3, #0
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
 80083a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80083a4:	4642      	mov	r2, r8
 80083a6:	464b      	mov	r3, r9
 80083a8:	f04f 0000 	mov.w	r0, #0
 80083ac:	f04f 0100 	mov.w	r1, #0
 80083b0:	0159      	lsls	r1, r3, #5
 80083b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083b6:	0150      	lsls	r0, r2, #5
 80083b8:	4602      	mov	r2, r0
 80083ba:	460b      	mov	r3, r1
 80083bc:	4641      	mov	r1, r8
 80083be:	ebb2 0a01 	subs.w	sl, r2, r1
 80083c2:	4649      	mov	r1, r9
 80083c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80083c8:	f04f 0200 	mov.w	r2, #0
 80083cc:	f04f 0300 	mov.w	r3, #0
 80083d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80083d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80083d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80083dc:	ebb2 040a 	subs.w	r4, r2, sl
 80083e0:	eb63 050b 	sbc.w	r5, r3, fp
 80083e4:	f04f 0200 	mov.w	r2, #0
 80083e8:	f04f 0300 	mov.w	r3, #0
 80083ec:	00eb      	lsls	r3, r5, #3
 80083ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083f2:	00e2      	lsls	r2, r4, #3
 80083f4:	4614      	mov	r4, r2
 80083f6:	461d      	mov	r5, r3
 80083f8:	4643      	mov	r3, r8
 80083fa:	18e3      	adds	r3, r4, r3
 80083fc:	603b      	str	r3, [r7, #0]
 80083fe:	464b      	mov	r3, r9
 8008400:	eb45 0303 	adc.w	r3, r5, r3
 8008404:	607b      	str	r3, [r7, #4]
 8008406:	f04f 0200 	mov.w	r2, #0
 800840a:	f04f 0300 	mov.w	r3, #0
 800840e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008412:	4629      	mov	r1, r5
 8008414:	028b      	lsls	r3, r1, #10
 8008416:	4621      	mov	r1, r4
 8008418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800841c:	4621      	mov	r1, r4
 800841e:	028a      	lsls	r2, r1, #10
 8008420:	4610      	mov	r0, r2
 8008422:	4619      	mov	r1, r3
 8008424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008426:	2200      	movs	r2, #0
 8008428:	61bb      	str	r3, [r7, #24]
 800842a:	61fa      	str	r2, [r7, #28]
 800842c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008430:	f7f8 fc32 	bl	8000c98 <__aeabi_uldivmod>
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	4613      	mov	r3, r2
 800843a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800843c:	4b0b      	ldr	r3, [pc, #44]	; (800846c <HAL_RCC_GetSysClockFreq+0x200>)
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	0c1b      	lsrs	r3, r3, #16
 8008442:	f003 0303 	and.w	r3, r3, #3
 8008446:	3301      	adds	r3, #1
 8008448:	005b      	lsls	r3, r3, #1
 800844a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800844c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800844e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008450:	fbb2 f3f3 	udiv	r3, r2, r3
 8008454:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008456:	e002      	b.n	800845e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008458:	4b05      	ldr	r3, [pc, #20]	; (8008470 <HAL_RCC_GetSysClockFreq+0x204>)
 800845a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800845c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800845e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008460:	4618      	mov	r0, r3
 8008462:	3750      	adds	r7, #80	; 0x50
 8008464:	46bd      	mov	sp, r7
 8008466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800846a:	bf00      	nop
 800846c:	40023800 	.word	0x40023800
 8008470:	00f42400 	.word	0x00f42400
 8008474:	007a1200 	.word	0x007a1200

08008478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008478:	b480      	push	{r7}
 800847a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800847c:	4b03      	ldr	r3, [pc, #12]	; (800848c <HAL_RCC_GetHCLKFreq+0x14>)
 800847e:	681b      	ldr	r3, [r3, #0]
}
 8008480:	4618      	mov	r0, r3
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	20000220 	.word	0x20000220

08008490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008494:	f7ff fff0 	bl	8008478 <HAL_RCC_GetHCLKFreq>
 8008498:	4602      	mov	r2, r0
 800849a:	4b05      	ldr	r3, [pc, #20]	; (80084b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	0a9b      	lsrs	r3, r3, #10
 80084a0:	f003 0307 	and.w	r3, r3, #7
 80084a4:	4903      	ldr	r1, [pc, #12]	; (80084b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80084a6:	5ccb      	ldrb	r3, [r1, r3]
 80084a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	40023800 	.word	0x40023800
 80084b4:	08010150 	.word	0x08010150

080084b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80084bc:	f7ff ffdc 	bl	8008478 <HAL_RCC_GetHCLKFreq>
 80084c0:	4602      	mov	r2, r0
 80084c2:	4b05      	ldr	r3, [pc, #20]	; (80084d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	0b5b      	lsrs	r3, r3, #13
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	4903      	ldr	r1, [pc, #12]	; (80084dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80084ce:	5ccb      	ldrb	r3, [r1, r3]
 80084d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	40023800 	.word	0x40023800
 80084dc:	08010150 	.word	0x08010150

080084e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e04c      	b.n	800858c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d111      	bne.n	8008522 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f001 fc02 	bl	8009d10 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008510:	2b00      	cmp	r3, #0
 8008512:	d102      	bne.n	800851a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a1f      	ldr	r2, [pc, #124]	; (8008594 <HAL_TIM_Base_Init+0xb4>)
 8008518:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2202      	movs	r2, #2
 8008526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	3304      	adds	r3, #4
 8008532:	4619      	mov	r1, r3
 8008534:	4610      	mov	r0, r2
 8008536:	f001 f91f 	bl	8009778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	080042b5 	.word	0x080042b5

08008598 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d001      	beq.n	80085b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e03c      	b.n	800862a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2202      	movs	r2, #2
 80085b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a1e      	ldr	r2, [pc, #120]	; (8008638 <HAL_TIM_Base_Start+0xa0>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d018      	beq.n	80085f4 <HAL_TIM_Base_Start+0x5c>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ca:	d013      	beq.n	80085f4 <HAL_TIM_Base_Start+0x5c>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a1a      	ldr	r2, [pc, #104]	; (800863c <HAL_TIM_Base_Start+0xa4>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d00e      	beq.n	80085f4 <HAL_TIM_Base_Start+0x5c>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a19      	ldr	r2, [pc, #100]	; (8008640 <HAL_TIM_Base_Start+0xa8>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d009      	beq.n	80085f4 <HAL_TIM_Base_Start+0x5c>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a17      	ldr	r2, [pc, #92]	; (8008644 <HAL_TIM_Base_Start+0xac>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d004      	beq.n	80085f4 <HAL_TIM_Base_Start+0x5c>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a16      	ldr	r2, [pc, #88]	; (8008648 <HAL_TIM_Base_Start+0xb0>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d111      	bne.n	8008618 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f003 0307 	and.w	r3, r3, #7
 80085fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2b06      	cmp	r3, #6
 8008604:	d010      	beq.n	8008628 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f042 0201 	orr.w	r2, r2, #1
 8008614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008616:	e007      	b.n	8008628 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f042 0201 	orr.w	r2, r2, #1
 8008626:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	40010000 	.word	0x40010000
 800863c:	40000400 	.word	0x40000400
 8008640:	40000800 	.word	0x40000800
 8008644:	40000c00 	.word	0x40000c00
 8008648:	40014000 	.word	0x40014000

0800864c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800865a:	b2db      	uxtb	r3, r3
 800865c:	2b01      	cmp	r3, #1
 800865e:	d001      	beq.n	8008664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	e044      	b.n	80086ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2202      	movs	r2, #2
 8008668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68da      	ldr	r2, [r3, #12]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f042 0201 	orr.w	r2, r2, #1
 800867a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a1e      	ldr	r2, [pc, #120]	; (80086fc <HAL_TIM_Base_Start_IT+0xb0>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d018      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x6c>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800868e:	d013      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x6c>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a1a      	ldr	r2, [pc, #104]	; (8008700 <HAL_TIM_Base_Start_IT+0xb4>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d00e      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x6c>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a19      	ldr	r2, [pc, #100]	; (8008704 <HAL_TIM_Base_Start_IT+0xb8>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d009      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x6c>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a17      	ldr	r2, [pc, #92]	; (8008708 <HAL_TIM_Base_Start_IT+0xbc>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d004      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x6c>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a16      	ldr	r2, [pc, #88]	; (800870c <HAL_TIM_Base_Start_IT+0xc0>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d111      	bne.n	80086dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	f003 0307 	and.w	r3, r3, #7
 80086c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b06      	cmp	r3, #6
 80086c8:	d010      	beq.n	80086ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f042 0201 	orr.w	r2, r2, #1
 80086d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086da:	e007      	b.n	80086ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 0201 	orr.w	r2, r2, #1
 80086ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	40010000 	.word	0x40010000
 8008700:	40000400 	.word	0x40000400
 8008704:	40000800 	.word	0x40000800
 8008708:	40000c00 	.word	0x40000c00
 800870c:	40014000 	.word	0x40014000

08008710 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e04c      	b.n	80087bc <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	d111      	bne.n	8008752 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f001 faea 	bl	8009d10 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008740:	2b00      	cmp	r3, #0
 8008742:	d102      	bne.n	800874a <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a1f      	ldr	r2, [pc, #124]	; (80087c4 <HAL_TIM_OC_Init+0xb4>)
 8008748:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2202      	movs	r2, #2
 8008756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	3304      	adds	r3, #4
 8008762:	4619      	mov	r1, r3
 8008764:	4610      	mov	r0, r2
 8008766:	f001 f807 	bl	8009778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2201      	movs	r2, #1
 800879e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	080087c9 	.word	0x080087c9

080087c8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e04c      	b.n	8008888 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d111      	bne.n	800881e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f001 fa84 	bl	8009d10 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800880c:	2b00      	cmp	r3, #0
 800880e:	d102      	bne.n	8008816 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a1f      	ldr	r2, [pc, #124]	; (8008890 <HAL_TIM_PWM_Init+0xb4>)
 8008814:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2202      	movs	r2, #2
 8008822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	3304      	adds	r3, #4
 800882e:	4619      	mov	r1, r3
 8008830:	4610      	mov	r0, r2
 8008832:	f000 ffa1 	bl	8009778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2201      	movs	r2, #1
 8008842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2201      	movs	r2, #1
 800885a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	080041c5 	.word	0x080041c5

08008894 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d109      	bne.n	80088b8 <HAL_TIM_PWM_Start+0x24>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	bf14      	ite	ne
 80088b0:	2301      	movne	r3, #1
 80088b2:	2300      	moveq	r3, #0
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	e022      	b.n	80088fe <HAL_TIM_PWM_Start+0x6a>
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	2b04      	cmp	r3, #4
 80088bc:	d109      	bne.n	80088d2 <HAL_TIM_PWM_Start+0x3e>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	bf14      	ite	ne
 80088ca:	2301      	movne	r3, #1
 80088cc:	2300      	moveq	r3, #0
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	e015      	b.n	80088fe <HAL_TIM_PWM_Start+0x6a>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b08      	cmp	r3, #8
 80088d6:	d109      	bne.n	80088ec <HAL_TIM_PWM_Start+0x58>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	bf14      	ite	ne
 80088e4:	2301      	movne	r3, #1
 80088e6:	2300      	moveq	r3, #0
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	e008      	b.n	80088fe <HAL_TIM_PWM_Start+0x6a>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	bf14      	ite	ne
 80088f8:	2301      	movne	r3, #1
 80088fa:	2300      	moveq	r3, #0
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d001      	beq.n	8008906 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e068      	b.n	80089d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d104      	bne.n	8008916 <HAL_TIM_PWM_Start+0x82>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2202      	movs	r2, #2
 8008910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008914:	e013      	b.n	800893e <HAL_TIM_PWM_Start+0xaa>
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	2b04      	cmp	r3, #4
 800891a:	d104      	bne.n	8008926 <HAL_TIM_PWM_Start+0x92>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2202      	movs	r2, #2
 8008920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008924:	e00b      	b.n	800893e <HAL_TIM_PWM_Start+0xaa>
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	2b08      	cmp	r3, #8
 800892a:	d104      	bne.n	8008936 <HAL_TIM_PWM_Start+0xa2>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2202      	movs	r2, #2
 8008930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008934:	e003      	b.n	800893e <HAL_TIM_PWM_Start+0xaa>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2202      	movs	r2, #2
 800893a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2201      	movs	r2, #1
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	4618      	mov	r0, r3
 8008948:	f001 f9bc 	bl	8009cc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a23      	ldr	r2, [pc, #140]	; (80089e0 <HAL_TIM_PWM_Start+0x14c>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d107      	bne.n	8008966 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008964:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a1d      	ldr	r2, [pc, #116]	; (80089e0 <HAL_TIM_PWM_Start+0x14c>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d018      	beq.n	80089a2 <HAL_TIM_PWM_Start+0x10e>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008978:	d013      	beq.n	80089a2 <HAL_TIM_PWM_Start+0x10e>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a19      	ldr	r2, [pc, #100]	; (80089e4 <HAL_TIM_PWM_Start+0x150>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d00e      	beq.n	80089a2 <HAL_TIM_PWM_Start+0x10e>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a17      	ldr	r2, [pc, #92]	; (80089e8 <HAL_TIM_PWM_Start+0x154>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d009      	beq.n	80089a2 <HAL_TIM_PWM_Start+0x10e>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a16      	ldr	r2, [pc, #88]	; (80089ec <HAL_TIM_PWM_Start+0x158>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d004      	beq.n	80089a2 <HAL_TIM_PWM_Start+0x10e>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a14      	ldr	r2, [pc, #80]	; (80089f0 <HAL_TIM_PWM_Start+0x15c>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d111      	bne.n	80089c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f003 0307 	and.w	r3, r3, #7
 80089ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2b06      	cmp	r3, #6
 80089b2:	d010      	beq.n	80089d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f042 0201 	orr.w	r2, r2, #1
 80089c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089c4:	e007      	b.n	80089d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f042 0201 	orr.w	r2, r2, #1
 80089d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	40010000 	.word	0x40010000
 80089e4:	40000400 	.word	0x40000400
 80089e8:	40000800 	.word	0x40000800
 80089ec:	40000c00 	.word	0x40000c00
 80089f0:	40014000 	.word	0x40014000

080089f4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e04c      	b.n	8008aa2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d111      	bne.n	8008a38 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f001 f977 	bl	8009d10 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d102      	bne.n	8008a30 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a1f      	ldr	r2, [pc, #124]	; (8008aac <HAL_TIM_OnePulse_Init+0xb8>)
 8008a2e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	3304      	adds	r3, #4
 8008a48:	4619      	mov	r1, r3
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	f000 fe94 	bl	8009778 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f022 0208 	bic.w	r2, r2, #8
 8008a5e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6819      	ldr	r1, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	08008ab1 	.word	0x08008ab1

08008ab0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ad4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008adc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ae4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008aec:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d108      	bne.n	8008b06 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d105      	bne.n	8008b06 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008afa:	7b7b      	ldrb	r3, [r7, #13]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d102      	bne.n	8008b06 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b00:	7b3b      	ldrb	r3, [r7, #12]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d001      	beq.n	8008b0a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e03b      	b.n	8008b82 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2202      	movs	r2, #2
 8008b16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2202      	movs	r2, #2
 8008b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2202      	movs	r2, #2
 8008b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68da      	ldr	r2, [r3, #12]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f042 0202 	orr.w	r2, r2, #2
 8008b38:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68da      	ldr	r2, [r3, #12]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f042 0204 	orr.w	r2, r2, #4
 8008b48:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	2100      	movs	r1, #0
 8008b52:	4618      	mov	r0, r3
 8008b54:	f001 f8b6 	bl	8009cc4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	2104      	movs	r1, #4
 8008b60:	4618      	mov	r0, r3
 8008b62:	f001 f8af 	bl	8009cc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a08      	ldr	r2, [pc, #32]	; (8008b8c <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d107      	bne.n	8008b80 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b7e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	40010000 	.word	0x40010000

08008b90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e0a2      	b.n	8008cea <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d111      	bne.n	8008bd4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f001 f8a9 	bl	8009d10 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d102      	bne.n	8008bcc <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a4a      	ldr	r2, [pc, #296]	; (8008cf4 <HAL_TIM_Encoder_Init+0x164>)
 8008bca:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	6812      	ldr	r2, [r2, #0]
 8008be6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bea:	f023 0307 	bic.w	r3, r3, #7
 8008bee:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	f000 fdbc 	bl	8009778 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6a1b      	ldr	r3, [r3, #32]
 8008c16:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c28:	f023 0303 	bic.w	r3, r3, #3
 8008c2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	689a      	ldr	r2, [r3, #8]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	021b      	lsls	r3, r3, #8
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	693a      	ldr	r2, [r7, #16]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008c46:	f023 030c 	bic.w	r3, r3, #12
 8008c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	68da      	ldr	r2, [r3, #12]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	69db      	ldr	r3, [r3, #28]
 8008c60:	021b      	lsls	r3, r3, #8
 8008c62:	4313      	orrs	r3, r2
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	011a      	lsls	r2, r3, #4
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	031b      	lsls	r3, r3, #12
 8008c76:	4313      	orrs	r3, r2
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008c84:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008c8c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	011b      	lsls	r3, r3, #4
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3718      	adds	r7, #24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	08004225 	.word	0x08004225

08008cf8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008d20:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d110      	bne.n	8008d4a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d102      	bne.n	8008d34 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d2e:	7b7b      	ldrb	r3, [r7, #13]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d001      	beq.n	8008d38 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e069      	b.n	8008e0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2202      	movs	r2, #2
 8008d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d48:	e031      	b.n	8008dae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	2b04      	cmp	r3, #4
 8008d4e:	d110      	bne.n	8008d72 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d102      	bne.n	8008d5c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d56:	7b3b      	ldrb	r3, [r7, #12]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d001      	beq.n	8008d60 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e055      	b.n	8008e0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2202      	movs	r2, #2
 8008d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d70:	e01d      	b.n	8008dae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d108      	bne.n	8008d8a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d105      	bne.n	8008d8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d7e:	7b7b      	ldrb	r3, [r7, #13]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d102      	bne.n	8008d8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d84:	7b3b      	ldrb	r3, [r7, #12]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d001      	beq.n	8008d8e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e03e      	b.n	8008e0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2202      	movs	r2, #2
 8008d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2202      	movs	r2, #2
 8008d9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2202      	movs	r2, #2
 8008da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2202      	movs	r2, #2
 8008daa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <HAL_TIM_Encoder_Start+0xc4>
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	2b04      	cmp	r3, #4
 8008db8:	d008      	beq.n	8008dcc <HAL_TIM_Encoder_Start+0xd4>
 8008dba:	e00f      	b.n	8008ddc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 ff7d 	bl	8009cc4 <TIM_CCxChannelCmd>
      break;
 8008dca:	e016      	b.n	8008dfa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	2104      	movs	r1, #4
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 ff75 	bl	8009cc4 <TIM_CCxChannelCmd>
      break;
 8008dda:	e00e      	b.n	8008dfa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2201      	movs	r2, #1
 8008de2:	2100      	movs	r1, #0
 8008de4:	4618      	mov	r0, r3
 8008de6:	f000 ff6d 	bl	8009cc4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2201      	movs	r2, #1
 8008df0:	2104      	movs	r1, #4
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 ff66 	bl	8009cc4 <TIM_CCxChannelCmd>
      break;
 8008df8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f042 0201 	orr.w	r2, r2, #1
 8008e08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	f003 0302 	and.w	r3, r3, #2
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d128      	bne.n	8008e7c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f003 0302 	and.w	r3, r3, #2
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d121      	bne.n	8008e7c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f06f 0202 	mvn.w	r2, #2
 8008e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	f003 0303 	and.w	r3, r3, #3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d005      	beq.n	8008e62 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	4798      	blx	r3
 8008e60:	e009      	b.n	8008e76 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	f003 0304 	and.w	r3, r3, #4
 8008e86:	2b04      	cmp	r3, #4
 8008e88:	d128      	bne.n	8008edc <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	f003 0304 	and.w	r3, r3, #4
 8008e94:	2b04      	cmp	r3, #4
 8008e96:	d121      	bne.n	8008edc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f06f 0204 	mvn.w	r2, #4
 8008ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2202      	movs	r2, #2
 8008ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d005      	beq.n	8008ec2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	4798      	blx	r3
 8008ec0:	e009      	b.n	8008ed6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	f003 0308 	and.w	r3, r3, #8
 8008ee6:	2b08      	cmp	r3, #8
 8008ee8:	d128      	bne.n	8008f3c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	f003 0308 	and.w	r3, r3, #8
 8008ef4:	2b08      	cmp	r3, #8
 8008ef6:	d121      	bne.n	8008f3c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f06f 0208 	mvn.w	r2, #8
 8008f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2204      	movs	r2, #4
 8008f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	f003 0303 	and.w	r3, r3, #3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d005      	beq.n	8008f22 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	4798      	blx	r3
 8008f20:	e009      	b.n	8008f36 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	f003 0310 	and.w	r3, r3, #16
 8008f46:	2b10      	cmp	r3, #16
 8008f48:	d128      	bne.n	8008f9c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	f003 0310 	and.w	r3, r3, #16
 8008f54:	2b10      	cmp	r3, #16
 8008f56:	d121      	bne.n	8008f9c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f06f 0210 	mvn.w	r2, #16
 8008f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2208      	movs	r2, #8
 8008f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	69db      	ldr	r3, [r3, #28]
 8008f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d005      	beq.n	8008f82 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	4798      	blx	r3
 8008f80:	e009      	b.n	8008f96 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d110      	bne.n	8008fcc <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	f003 0301 	and.w	r3, r3, #1
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d109      	bne.n	8008fcc <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f06f 0201 	mvn.w	r2, #1
 8008fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd6:	2b80      	cmp	r3, #128	; 0x80
 8008fd8:	d110      	bne.n	8008ffc <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe4:	2b80      	cmp	r3, #128	; 0x80
 8008fe6:	d109      	bne.n	8008ffc <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009006:	2b40      	cmp	r3, #64	; 0x40
 8009008:	d110      	bne.n	800902c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009014:	2b40      	cmp	r3, #64	; 0x40
 8009016:	d109      	bne.n	800902c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	f003 0320 	and.w	r3, r3, #32
 8009036:	2b20      	cmp	r3, #32
 8009038:	d110      	bne.n	800905c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	f003 0320 	and.w	r3, r3, #32
 8009044:	2b20      	cmp	r3, #32
 8009046:	d109      	bne.n	800905c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f06f 0220 	mvn.w	r2, #32
 8009050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800905c:	bf00      	nop
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800907a:	2b01      	cmp	r3, #1
 800907c:	d101      	bne.n	8009082 <HAL_TIM_OC_ConfigChannel+0x1e>
 800907e:	2302      	movs	r3, #2
 8009080:	e048      	b.n	8009114 <HAL_TIM_OC_ConfigChannel+0xb0>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b0c      	cmp	r3, #12
 800908e:	d839      	bhi.n	8009104 <HAL_TIM_OC_ConfigChannel+0xa0>
 8009090:	a201      	add	r2, pc, #4	; (adr r2, 8009098 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009096:	bf00      	nop
 8009098:	080090cd 	.word	0x080090cd
 800909c:	08009105 	.word	0x08009105
 80090a0:	08009105 	.word	0x08009105
 80090a4:	08009105 	.word	0x08009105
 80090a8:	080090db 	.word	0x080090db
 80090ac:	08009105 	.word	0x08009105
 80090b0:	08009105 	.word	0x08009105
 80090b4:	08009105 	.word	0x08009105
 80090b8:	080090e9 	.word	0x080090e9
 80090bc:	08009105 	.word	0x08009105
 80090c0:	08009105 	.word	0x08009105
 80090c4:	08009105 	.word	0x08009105
 80090c8:	080090f7 	.word	0x080090f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68b9      	ldr	r1, [r7, #8]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fbd0 	bl	8009878 <TIM_OC1_SetConfig>
      break;
 80090d8:	e017      	b.n	800910a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68b9      	ldr	r1, [r7, #8]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 fc2f 	bl	8009944 <TIM_OC2_SetConfig>
      break;
 80090e6:	e010      	b.n	800910a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68b9      	ldr	r1, [r7, #8]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 fc94 	bl	8009a1c <TIM_OC3_SetConfig>
      break;
 80090f4:	e009      	b.n	800910a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68b9      	ldr	r1, [r7, #8]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 fcf7 	bl	8009af0 <TIM_OC4_SetConfig>
      break;
 8009102:	e002      	b.n	800910a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	75fb      	strb	r3, [r7, #23]
      break;
 8009108:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009112:	7dfb      	ldrb	r3, [r7, #23]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3718      	adds	r7, #24
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b086      	sub	sp, #24
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009132:	2b01      	cmp	r3, #1
 8009134:	d101      	bne.n	800913a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009136:	2302      	movs	r3, #2
 8009138:	e0ae      	b.n	8009298 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2201      	movs	r2, #1
 800913e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2b0c      	cmp	r3, #12
 8009146:	f200 809f 	bhi.w	8009288 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800914a:	a201      	add	r2, pc, #4	; (adr r2, 8009150 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800914c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009150:	08009185 	.word	0x08009185
 8009154:	08009289 	.word	0x08009289
 8009158:	08009289 	.word	0x08009289
 800915c:	08009289 	.word	0x08009289
 8009160:	080091c5 	.word	0x080091c5
 8009164:	08009289 	.word	0x08009289
 8009168:	08009289 	.word	0x08009289
 800916c:	08009289 	.word	0x08009289
 8009170:	08009207 	.word	0x08009207
 8009174:	08009289 	.word	0x08009289
 8009178:	08009289 	.word	0x08009289
 800917c:	08009289 	.word	0x08009289
 8009180:	08009247 	.word	0x08009247
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68b9      	ldr	r1, [r7, #8]
 800918a:	4618      	mov	r0, r3
 800918c:	f000 fb74 	bl	8009878 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	699a      	ldr	r2, [r3, #24]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f042 0208 	orr.w	r2, r2, #8
 800919e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	699a      	ldr	r2, [r3, #24]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f022 0204 	bic.w	r2, r2, #4
 80091ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6999      	ldr	r1, [r3, #24]
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	691a      	ldr	r2, [r3, #16]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	430a      	orrs	r2, r1
 80091c0:	619a      	str	r2, [r3, #24]
      break;
 80091c2:	e064      	b.n	800928e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68b9      	ldr	r1, [r7, #8]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 fbba 	bl	8009944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	699a      	ldr	r2, [r3, #24]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	699a      	ldr	r2, [r3, #24]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6999      	ldr	r1, [r3, #24]
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	021a      	lsls	r2, r3, #8
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	430a      	orrs	r2, r1
 8009202:	619a      	str	r2, [r3, #24]
      break;
 8009204:	e043      	b.n	800928e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68b9      	ldr	r1, [r7, #8]
 800920c:	4618      	mov	r0, r3
 800920e:	f000 fc05 	bl	8009a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	69da      	ldr	r2, [r3, #28]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f042 0208 	orr.w	r2, r2, #8
 8009220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	69da      	ldr	r2, [r3, #28]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f022 0204 	bic.w	r2, r2, #4
 8009230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	69d9      	ldr	r1, [r3, #28]
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	691a      	ldr	r2, [r3, #16]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	430a      	orrs	r2, r1
 8009242:	61da      	str	r2, [r3, #28]
      break;
 8009244:	e023      	b.n	800928e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68b9      	ldr	r1, [r7, #8]
 800924c:	4618      	mov	r0, r3
 800924e:	f000 fc4f 	bl	8009af0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	69da      	ldr	r2, [r3, #28]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	69da      	ldr	r2, [r3, #28]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	69d9      	ldr	r1, [r3, #28]
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	021a      	lsls	r2, r3, #8
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	430a      	orrs	r2, r1
 8009284:	61da      	str	r2, [r3, #28]
      break;
 8009286:	e002      	b.n	800928e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	75fb      	strb	r3, [r7, #23]
      break;
 800928c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009296:	7dfb      	ldrb	r3, [r7, #23]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3718      	adds	r7, #24
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d101      	bne.n	80092bc <HAL_TIM_ConfigClockSource+0x1c>
 80092b8:	2302      	movs	r3, #2
 80092ba:	e0b4      	b.n	8009426 <HAL_TIM_ConfigClockSource+0x186>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2202      	movs	r2, #2
 80092c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80092da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092f4:	d03e      	beq.n	8009374 <HAL_TIM_ConfigClockSource+0xd4>
 80092f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092fa:	f200 8087 	bhi.w	800940c <HAL_TIM_ConfigClockSource+0x16c>
 80092fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009302:	f000 8086 	beq.w	8009412 <HAL_TIM_ConfigClockSource+0x172>
 8009306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800930a:	d87f      	bhi.n	800940c <HAL_TIM_ConfigClockSource+0x16c>
 800930c:	2b70      	cmp	r3, #112	; 0x70
 800930e:	d01a      	beq.n	8009346 <HAL_TIM_ConfigClockSource+0xa6>
 8009310:	2b70      	cmp	r3, #112	; 0x70
 8009312:	d87b      	bhi.n	800940c <HAL_TIM_ConfigClockSource+0x16c>
 8009314:	2b60      	cmp	r3, #96	; 0x60
 8009316:	d050      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0x11a>
 8009318:	2b60      	cmp	r3, #96	; 0x60
 800931a:	d877      	bhi.n	800940c <HAL_TIM_ConfigClockSource+0x16c>
 800931c:	2b50      	cmp	r3, #80	; 0x50
 800931e:	d03c      	beq.n	800939a <HAL_TIM_ConfigClockSource+0xfa>
 8009320:	2b50      	cmp	r3, #80	; 0x50
 8009322:	d873      	bhi.n	800940c <HAL_TIM_ConfigClockSource+0x16c>
 8009324:	2b40      	cmp	r3, #64	; 0x40
 8009326:	d058      	beq.n	80093da <HAL_TIM_ConfigClockSource+0x13a>
 8009328:	2b40      	cmp	r3, #64	; 0x40
 800932a:	d86f      	bhi.n	800940c <HAL_TIM_ConfigClockSource+0x16c>
 800932c:	2b30      	cmp	r3, #48	; 0x30
 800932e:	d064      	beq.n	80093fa <HAL_TIM_ConfigClockSource+0x15a>
 8009330:	2b30      	cmp	r3, #48	; 0x30
 8009332:	d86b      	bhi.n	800940c <HAL_TIM_ConfigClockSource+0x16c>
 8009334:	2b20      	cmp	r3, #32
 8009336:	d060      	beq.n	80093fa <HAL_TIM_ConfigClockSource+0x15a>
 8009338:	2b20      	cmp	r3, #32
 800933a:	d867      	bhi.n	800940c <HAL_TIM_ConfigClockSource+0x16c>
 800933c:	2b00      	cmp	r3, #0
 800933e:	d05c      	beq.n	80093fa <HAL_TIM_ConfigClockSource+0x15a>
 8009340:	2b10      	cmp	r3, #16
 8009342:	d05a      	beq.n	80093fa <HAL_TIM_ConfigClockSource+0x15a>
 8009344:	e062      	b.n	800940c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6818      	ldr	r0, [r3, #0]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	6899      	ldr	r1, [r3, #8]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	f000 fc95 	bl	8009c84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009368:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	609a      	str	r2, [r3, #8]
      break;
 8009372:	e04f      	b.n	8009414 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6818      	ldr	r0, [r3, #0]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	6899      	ldr	r1, [r3, #8]
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	f000 fc7e 	bl	8009c84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	689a      	ldr	r2, [r3, #8]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009396:	609a      	str	r2, [r3, #8]
      break;
 8009398:	e03c      	b.n	8009414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6818      	ldr	r0, [r3, #0]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	6859      	ldr	r1, [r3, #4]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	461a      	mov	r2, r3
 80093a8:	f000 fbf2 	bl	8009b90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2150      	movs	r1, #80	; 0x50
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 fc4b 	bl	8009c4e <TIM_ITRx_SetConfig>
      break;
 80093b8:	e02c      	b.n	8009414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6818      	ldr	r0, [r3, #0]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	6859      	ldr	r1, [r3, #4]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	461a      	mov	r2, r3
 80093c8:	f000 fc11 	bl	8009bee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2160      	movs	r1, #96	; 0x60
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 fc3b 	bl	8009c4e <TIM_ITRx_SetConfig>
      break;
 80093d8:	e01c      	b.n	8009414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6818      	ldr	r0, [r3, #0]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	6859      	ldr	r1, [r3, #4]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	461a      	mov	r2, r3
 80093e8:	f000 fbd2 	bl	8009b90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2140      	movs	r1, #64	; 0x40
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 fc2b 	bl	8009c4e <TIM_ITRx_SetConfig>
      break;
 80093f8:	e00c      	b.n	8009414 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4619      	mov	r1, r3
 8009404:	4610      	mov	r0, r2
 8009406:	f000 fc22 	bl	8009c4e <TIM_ITRx_SetConfig>
      break;
 800940a:	e003      	b.n	8009414 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	73fb      	strb	r3, [r7, #15]
      break;
 8009410:	e000      	b.n	8009414 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009424:	7bfb      	ldrb	r3, [r7, #15]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800942e:	b480      	push	{r7}
 8009430:	b083      	sub	sp, #12
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009436:	bf00      	nop
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009442:	b480      	push	{r7}
 8009444:	b083      	sub	sp, #12
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800944a:	bf00      	nop
 800944c:	370c      	adds	r7, #12
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009456:	b480      	push	{r7}
 8009458:	b083      	sub	sp, #12
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800945e:	bf00      	nop
 8009460:	370c      	adds	r7, #12
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800946a:	b480      	push	{r7}
 800946c:	b083      	sub	sp, #12
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009472:	bf00      	nop
 8009474:	370c      	adds	r7, #12
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr

0800947e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800947e:	b480      	push	{r7}
 8009480:	b083      	sub	sp, #12
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800949a:	bf00      	nop
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b083      	sub	sp, #12
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094ae:	bf00      	nop
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b083      	sub	sp, #12
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80094c2:	bf00      	nop
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b083      	sub	sp, #12
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80094d6:	bf00      	nop
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
	...

080094e4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b087      	sub	sp, #28
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	460b      	mov	r3, r1
 80094ee:	607a      	str	r2, [r7, #4]
 80094f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d101      	bne.n	8009500 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e135      	b.n	800976c <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009506:	2b01      	cmp	r3, #1
 8009508:	d101      	bne.n	800950e <HAL_TIM_RegisterCallback+0x2a>
 800950a:	2302      	movs	r3, #2
 800950c:	e12e      	b.n	800976c <HAL_TIM_RegisterCallback+0x288>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2201      	movs	r2, #1
 8009512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b01      	cmp	r3, #1
 8009520:	f040 80ba 	bne.w	8009698 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8009524:	7afb      	ldrb	r3, [r7, #11]
 8009526:	2b1a      	cmp	r3, #26
 8009528:	f200 80b3 	bhi.w	8009692 <HAL_TIM_RegisterCallback+0x1ae>
 800952c:	a201      	add	r2, pc, #4	; (adr r2, 8009534 <HAL_TIM_RegisterCallback+0x50>)
 800952e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009532:	bf00      	nop
 8009534:	080095a1 	.word	0x080095a1
 8009538:	080095a9 	.word	0x080095a9
 800953c:	080095b1 	.word	0x080095b1
 8009540:	080095b9 	.word	0x080095b9
 8009544:	080095c1 	.word	0x080095c1
 8009548:	080095c9 	.word	0x080095c9
 800954c:	080095d1 	.word	0x080095d1
 8009550:	080095d9 	.word	0x080095d9
 8009554:	080095e1 	.word	0x080095e1
 8009558:	080095e9 	.word	0x080095e9
 800955c:	080095f1 	.word	0x080095f1
 8009560:	080095f9 	.word	0x080095f9
 8009564:	08009601 	.word	0x08009601
 8009568:	08009609 	.word	0x08009609
 800956c:	08009611 	.word	0x08009611
 8009570:	0800961b 	.word	0x0800961b
 8009574:	08009625 	.word	0x08009625
 8009578:	0800962f 	.word	0x0800962f
 800957c:	08009639 	.word	0x08009639
 8009580:	08009643 	.word	0x08009643
 8009584:	0800964d 	.word	0x0800964d
 8009588:	08009657 	.word	0x08009657
 800958c:	08009661 	.word	0x08009661
 8009590:	0800966b 	.word	0x0800966b
 8009594:	08009675 	.word	0x08009675
 8009598:	0800967f 	.word	0x0800967f
 800959c:	08009689 	.word	0x08009689
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80095a6:	e0dc      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80095ae:	e0d8      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80095b6:	e0d4      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80095be:	e0d0      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80095c6:	e0cc      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80095ce:	e0c8      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80095d6:	e0c4      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80095de:	e0c0      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80095e6:	e0bc      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80095ee:	e0b8      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80095f6:	e0b4      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80095fe:	e0b0      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009606:	e0ac      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800960e:	e0a8      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009618:	e0a3      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8009622:	e09e      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800962c:	e099      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8009636:	e094      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8009640:	e08f      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800964a:	e08a      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8009654:	e085      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800965e:	e080      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8009668:	e07b      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8009672:	e076      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800967c:	e071      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8009686:	e06c      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8009690:	e067      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	75fb      	strb	r3, [r7, #23]
        break;
 8009696:	e064      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d15c      	bne.n	800975e <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 80096a4:	7afb      	ldrb	r3, [r7, #11]
 80096a6:	2b0d      	cmp	r3, #13
 80096a8:	d856      	bhi.n	8009758 <HAL_TIM_RegisterCallback+0x274>
 80096aa:	a201      	add	r2, pc, #4	; (adr r2, 80096b0 <HAL_TIM_RegisterCallback+0x1cc>)
 80096ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b0:	080096e9 	.word	0x080096e9
 80096b4:	080096f1 	.word	0x080096f1
 80096b8:	080096f9 	.word	0x080096f9
 80096bc:	08009701 	.word	0x08009701
 80096c0:	08009709 	.word	0x08009709
 80096c4:	08009711 	.word	0x08009711
 80096c8:	08009719 	.word	0x08009719
 80096cc:	08009721 	.word	0x08009721
 80096d0:	08009729 	.word	0x08009729
 80096d4:	08009731 	.word	0x08009731
 80096d8:	08009739 	.word	0x08009739
 80096dc:	08009741 	.word	0x08009741
 80096e0:	08009749 	.word	0x08009749
 80096e4:	08009751 	.word	0x08009751
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80096ee:	e038      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80096f6:	e034      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80096fe:	e030      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009706:	e02c      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800970e:	e028      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009716:	e024      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800971e:	e020      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009726:	e01c      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800972e:	e018      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009736:	e014      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800973e:	e010      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009746:	e00c      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800974e:	e008      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009756:	e004      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	75fb      	strb	r3, [r7, #23]
        break;
 800975c:	e001      	b.n	8009762 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800976a:	7dfb      	ldrb	r3, [r7, #23]
}
 800976c:	4618      	mov	r0, r3
 800976e:	371c      	adds	r7, #28
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a34      	ldr	r2, [pc, #208]	; (800985c <TIM_Base_SetConfig+0xe4>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d00f      	beq.n	80097b0 <TIM_Base_SetConfig+0x38>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009796:	d00b      	beq.n	80097b0 <TIM_Base_SetConfig+0x38>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a31      	ldr	r2, [pc, #196]	; (8009860 <TIM_Base_SetConfig+0xe8>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d007      	beq.n	80097b0 <TIM_Base_SetConfig+0x38>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a30      	ldr	r2, [pc, #192]	; (8009864 <TIM_Base_SetConfig+0xec>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d003      	beq.n	80097b0 <TIM_Base_SetConfig+0x38>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a2f      	ldr	r2, [pc, #188]	; (8009868 <TIM_Base_SetConfig+0xf0>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d108      	bne.n	80097c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	4313      	orrs	r3, r2
 80097c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a25      	ldr	r2, [pc, #148]	; (800985c <TIM_Base_SetConfig+0xe4>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d01b      	beq.n	8009802 <TIM_Base_SetConfig+0x8a>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097d0:	d017      	beq.n	8009802 <TIM_Base_SetConfig+0x8a>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a22      	ldr	r2, [pc, #136]	; (8009860 <TIM_Base_SetConfig+0xe8>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d013      	beq.n	8009802 <TIM_Base_SetConfig+0x8a>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a21      	ldr	r2, [pc, #132]	; (8009864 <TIM_Base_SetConfig+0xec>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d00f      	beq.n	8009802 <TIM_Base_SetConfig+0x8a>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a20      	ldr	r2, [pc, #128]	; (8009868 <TIM_Base_SetConfig+0xf0>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d00b      	beq.n	8009802 <TIM_Base_SetConfig+0x8a>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a1f      	ldr	r2, [pc, #124]	; (800986c <TIM_Base_SetConfig+0xf4>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d007      	beq.n	8009802 <TIM_Base_SetConfig+0x8a>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a1e      	ldr	r2, [pc, #120]	; (8009870 <TIM_Base_SetConfig+0xf8>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d003      	beq.n	8009802 <TIM_Base_SetConfig+0x8a>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a1d      	ldr	r2, [pc, #116]	; (8009874 <TIM_Base_SetConfig+0xfc>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d108      	bne.n	8009814 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	4313      	orrs	r3, r2
 8009812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	695b      	ldr	r3, [r3, #20]
 800981e:	4313      	orrs	r3, r2
 8009820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	689a      	ldr	r2, [r3, #8]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a08      	ldr	r2, [pc, #32]	; (800985c <TIM_Base_SetConfig+0xe4>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d103      	bne.n	8009848 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	691a      	ldr	r2, [r3, #16]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	615a      	str	r2, [r3, #20]
}
 800984e:	bf00      	nop
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	40010000 	.word	0x40010000
 8009860:	40000400 	.word	0x40000400
 8009864:	40000800 	.word	0x40000800
 8009868:	40000c00 	.word	0x40000c00
 800986c:	40014000 	.word	0x40014000
 8009870:	40014400 	.word	0x40014400
 8009874:	40014800 	.word	0x40014800

08009878 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009878:	b480      	push	{r7}
 800987a:	b087      	sub	sp, #28
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	f023 0201 	bic.w	r2, r3, #1
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a1b      	ldr	r3, [r3, #32]
 8009892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f023 0303 	bic.w	r3, r3, #3
 80098ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	f023 0302 	bic.w	r3, r3, #2
 80098c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	4313      	orrs	r3, r2
 80098ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a1c      	ldr	r2, [pc, #112]	; (8009940 <TIM_OC1_SetConfig+0xc8>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d10c      	bne.n	80098ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	f023 0308 	bic.w	r3, r3, #8
 80098da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f023 0304 	bic.w	r3, r3, #4
 80098ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a13      	ldr	r2, [pc, #76]	; (8009940 <TIM_OC1_SetConfig+0xc8>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d111      	bne.n	800991a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	4313      	orrs	r3, r2
 800990e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	693a      	ldr	r2, [r7, #16]
 8009916:	4313      	orrs	r3, r2
 8009918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	693a      	ldr	r2, [r7, #16]
 800991e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	685a      	ldr	r2, [r3, #4]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	697a      	ldr	r2, [r7, #20]
 8009932:	621a      	str	r2, [r3, #32]
}
 8009934:	bf00      	nop
 8009936:	371c      	adds	r7, #28
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	40010000 	.word	0x40010000

08009944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009944:	b480      	push	{r7}
 8009946:	b087      	sub	sp, #28
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	f023 0210 	bic.w	r2, r3, #16
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a1b      	ldr	r3, [r3, #32]
 800995e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800997a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	021b      	lsls	r3, r3, #8
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	4313      	orrs	r3, r2
 8009986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	f023 0320 	bic.w	r3, r3, #32
 800998e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	011b      	lsls	r3, r3, #4
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	4313      	orrs	r3, r2
 800999a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a1e      	ldr	r2, [pc, #120]	; (8009a18 <TIM_OC2_SetConfig+0xd4>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d10d      	bne.n	80099c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	011b      	lsls	r3, r3, #4
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a15      	ldr	r2, [pc, #84]	; (8009a18 <TIM_OC2_SetConfig+0xd4>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d113      	bne.n	80099f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	693a      	ldr	r2, [r7, #16]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	693a      	ldr	r2, [r7, #16]
 80099ec:	4313      	orrs	r3, r2
 80099ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	697a      	ldr	r2, [r7, #20]
 8009a08:	621a      	str	r2, [r3, #32]
}
 8009a0a:	bf00      	nop
 8009a0c:	371c      	adds	r7, #28
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	40010000 	.word	0x40010000

08009a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b087      	sub	sp, #28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a1b      	ldr	r3, [r3, #32]
 8009a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f023 0303 	bic.w	r3, r3, #3
 8009a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	021b      	lsls	r3, r3, #8
 8009a6c:	697a      	ldr	r2, [r7, #20]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a1d      	ldr	r2, [pc, #116]	; (8009aec <TIM_OC3_SetConfig+0xd0>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d10d      	bne.n	8009a96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	021b      	lsls	r3, r3, #8
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a14      	ldr	r2, [pc, #80]	; (8009aec <TIM_OC3_SetConfig+0xd0>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d113      	bne.n	8009ac6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	011b      	lsls	r3, r3, #4
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	011b      	lsls	r3, r3, #4
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	697a      	ldr	r2, [r7, #20]
 8009ade:	621a      	str	r2, [r3, #32]
}
 8009ae0:	bf00      	nop
 8009ae2:	371c      	adds	r7, #28
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr
 8009aec:	40010000 	.word	0x40010000

08009af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b087      	sub	sp, #28
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a1b      	ldr	r3, [r3, #32]
 8009b0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	69db      	ldr	r3, [r3, #28]
 8009b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	021b      	lsls	r3, r3, #8
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	031b      	lsls	r3, r3, #12
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a10      	ldr	r2, [pc, #64]	; (8009b8c <TIM_OC4_SetConfig+0x9c>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d109      	bne.n	8009b64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	695b      	ldr	r3, [r3, #20]
 8009b5c:	019b      	lsls	r3, r3, #6
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	685a      	ldr	r2, [r3, #4]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	621a      	str	r2, [r3, #32]
}
 8009b7e:	bf00      	nop
 8009b80:	371c      	adds	r7, #28
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	40010000 	.word	0x40010000

08009b90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b087      	sub	sp, #28
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6a1b      	ldr	r3, [r3, #32]
 8009ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	f023 0201 	bic.w	r2, r3, #1
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	011b      	lsls	r3, r3, #4
 8009bc0:	693a      	ldr	r2, [r7, #16]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f023 030a 	bic.w	r3, r3, #10
 8009bcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	693a      	ldr	r2, [r7, #16]
 8009bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	621a      	str	r2, [r3, #32]
}
 8009be2:	bf00      	nop
 8009be4:	371c      	adds	r7, #28
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr

08009bee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bee:	b480      	push	{r7}
 8009bf0:	b087      	sub	sp, #28
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	60f8      	str	r0, [r7, #12]
 8009bf6:	60b9      	str	r1, [r7, #8]
 8009bf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6a1b      	ldr	r3, [r3, #32]
 8009bfe:	f023 0210 	bic.w	r2, r3, #16
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6a1b      	ldr	r3, [r3, #32]
 8009c10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	031b      	lsls	r3, r3, #12
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	011b      	lsls	r3, r3, #4
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	697a      	ldr	r2, [r7, #20]
 8009c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	693a      	ldr	r2, [r7, #16]
 8009c40:	621a      	str	r2, [r3, #32]
}
 8009c42:	bf00      	nop
 8009c44:	371c      	adds	r7, #28
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b085      	sub	sp, #20
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	f043 0307 	orr.w	r3, r3, #7
 8009c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	609a      	str	r2, [r3, #8]
}
 8009c78:	bf00      	nop
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b087      	sub	sp, #28
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
 8009c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	021a      	lsls	r2, r3, #8
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	431a      	orrs	r2, r3
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	609a      	str	r2, [r3, #8]
}
 8009cb8:	bf00      	nop
 8009cba:	371c      	adds	r7, #28
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b087      	sub	sp, #28
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	f003 031f 	and.w	r3, r3, #31
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6a1a      	ldr	r2, [r3, #32]
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	43db      	mvns	r3, r3
 8009ce6:	401a      	ands	r2, r3
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6a1a      	ldr	r2, [r3, #32]
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f003 031f 	and.w	r3, r3, #31
 8009cf6:	6879      	ldr	r1, [r7, #4]
 8009cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cfc:	431a      	orrs	r2, r3
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	621a      	str	r2, [r3, #32]
}
 8009d02:	bf00      	nop
 8009d04:	371c      	adds	r7, #28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
	...

08009d10 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a1c      	ldr	r2, [pc, #112]	; (8009d8c <TIM_ResetCallback+0x7c>)
 8009d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a1b      	ldr	r2, [pc, #108]	; (8009d90 <TIM_ResetCallback+0x80>)
 8009d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a1a      	ldr	r2, [pc, #104]	; (8009d94 <TIM_ResetCallback+0x84>)
 8009d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a19      	ldr	r2, [pc, #100]	; (8009d98 <TIM_ResetCallback+0x88>)
 8009d34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a18      	ldr	r2, [pc, #96]	; (8009d9c <TIM_ResetCallback+0x8c>)
 8009d3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a17      	ldr	r2, [pc, #92]	; (8009da0 <TIM_ResetCallback+0x90>)
 8009d44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a16      	ldr	r2, [pc, #88]	; (8009da4 <TIM_ResetCallback+0x94>)
 8009d4c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a15      	ldr	r2, [pc, #84]	; (8009da8 <TIM_ResetCallback+0x98>)
 8009d54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a14      	ldr	r2, [pc, #80]	; (8009dac <TIM_ResetCallback+0x9c>)
 8009d5c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a13      	ldr	r2, [pc, #76]	; (8009db0 <TIM_ResetCallback+0xa0>)
 8009d64:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a12      	ldr	r2, [pc, #72]	; (8009db4 <TIM_ResetCallback+0xa4>)
 8009d6c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a11      	ldr	r2, [pc, #68]	; (8009db8 <TIM_ResetCallback+0xa8>)
 8009d74:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a10      	ldr	r2, [pc, #64]	; (8009dbc <TIM_ResetCallback+0xac>)
 8009d7c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8009d80:	bf00      	nop
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr
 8009d8c:	08003575 	.word	0x08003575
 8009d90:	0800942f 	.word	0x0800942f
 8009d94:	080094a7 	.word	0x080094a7
 8009d98:	080094bb 	.word	0x080094bb
 8009d9c:	08009457 	.word	0x08009457
 8009da0:	0800946b 	.word	0x0800946b
 8009da4:	08009443 	.word	0x08009443
 8009da8:	0800947f 	.word	0x0800947f
 8009dac:	08009493 	.word	0x08009493
 8009db0:	080094cf 	.word	0x080094cf
 8009db4:	08009f41 	.word	0x08009f41
 8009db8:	08009f55 	.word	0x08009f55
 8009dbc:	08009f69 	.word	0x08009f69

08009dc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d101      	bne.n	8009dd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	e050      	b.n	8009e7a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2202      	movs	r2, #2
 8009de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a1c      	ldr	r2, [pc, #112]	; (8009e88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d018      	beq.n	8009e4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e24:	d013      	beq.n	8009e4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a18      	ldr	r2, [pc, #96]	; (8009e8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d00e      	beq.n	8009e4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a16      	ldr	r2, [pc, #88]	; (8009e90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d009      	beq.n	8009e4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a15      	ldr	r2, [pc, #84]	; (8009e94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d004      	beq.n	8009e4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a13      	ldr	r2, [pc, #76]	; (8009e98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d10c      	bne.n	8009e68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68ba      	ldr	r2, [r7, #8]
 8009e66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3714      	adds	r7, #20
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr
 8009e86:	bf00      	nop
 8009e88:	40010000 	.word	0x40010000
 8009e8c:	40000400 	.word	0x40000400
 8009e90:	40000800 	.word	0x40000800
 8009e94:	40000c00 	.word	0x40000c00
 8009e98:	40014000 	.word	0x40014000

08009e9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d101      	bne.n	8009eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	e03d      	b.n	8009f34 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	69db      	ldr	r3, [r3, #28]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f48:	bf00      	nop
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009f5c:	bf00      	nop
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d101      	bne.n	8009f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e04a      	b.n	800a024 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d111      	bne.n	8009fbe <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fd72 	bl	800aa8c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d102      	bne.n	8009fb6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a1e      	ldr	r2, [pc, #120]	; (800a02c <HAL_UART_Init+0xb0>)
 8009fb4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2224      	movs	r2, #36	; 0x24
 8009fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68da      	ldr	r2, [r3, #12]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009fd4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f001 f83c 	bl	800b054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	691a      	ldr	r2, [r3, #16]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009fea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	695a      	ldr	r2, [r3, #20]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ffa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68da      	ldr	r2, [r3, #12]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a00a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2220      	movs	r2, #32
 800a016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2220      	movs	r2, #32
 800a01e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	080043b5 	.word	0x080043b5

0800a030 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a030:	b480      	push	{r7}
 800a032:	b087      	sub	sp, #28
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	460b      	mov	r3, r1
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d107      	bne.n	800a058 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04c:	f043 0220 	orr.w	r2, r3, #32
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e08c      	b.n	800a172 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d101      	bne.n	800a066 <HAL_UART_RegisterCallback+0x36>
 800a062:	2302      	movs	r3, #2
 800a064:	e085      	b.n	800a172 <HAL_UART_RegisterCallback+0x142>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b20      	cmp	r3, #32
 800a078:	d151      	bne.n	800a11e <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800a07a:	7afb      	ldrb	r3, [r7, #11]
 800a07c:	2b0c      	cmp	r3, #12
 800a07e:	d845      	bhi.n	800a10c <HAL_UART_RegisterCallback+0xdc>
 800a080:	a201      	add	r2, pc, #4	; (adr r2, 800a088 <HAL_UART_RegisterCallback+0x58>)
 800a082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a086:	bf00      	nop
 800a088:	0800a0bd 	.word	0x0800a0bd
 800a08c:	0800a0c5 	.word	0x0800a0c5
 800a090:	0800a0cd 	.word	0x0800a0cd
 800a094:	0800a0d5 	.word	0x0800a0d5
 800a098:	0800a0dd 	.word	0x0800a0dd
 800a09c:	0800a0e5 	.word	0x0800a0e5
 800a0a0:	0800a0ed 	.word	0x0800a0ed
 800a0a4:	0800a0f5 	.word	0x0800a0f5
 800a0a8:	0800a10d 	.word	0x0800a10d
 800a0ac:	0800a10d 	.word	0x0800a10d
 800a0b0:	0800a10d 	.word	0x0800a10d
 800a0b4:	0800a0fd 	.word	0x0800a0fd
 800a0b8:	0800a105 	.word	0x0800a105
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800a0c2:	e051      	b.n	800a168 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a0ca:	e04d      	b.n	800a168 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a0d2:	e049      	b.n	800a168 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a0da:	e045      	b.n	800a168 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a0e2:	e041      	b.n	800a168 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a0ea:	e03d      	b.n	800a168 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a0f2:	e039      	b.n	800a168 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a0fa:	e035      	b.n	800a168 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a102:	e031      	b.n	800a168 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a10a:	e02d      	b.n	800a168 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a110:	f043 0220 	orr.w	r2, r3, #32
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	75fb      	strb	r3, [r7, #23]
        break;
 800a11c:	e024      	b.n	800a168 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a124:	b2db      	uxtb	r3, r3
 800a126:	2b00      	cmp	r3, #0
 800a128:	d116      	bne.n	800a158 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800a12a:	7afb      	ldrb	r3, [r7, #11]
 800a12c:	2b0b      	cmp	r3, #11
 800a12e:	d002      	beq.n	800a136 <HAL_UART_RegisterCallback+0x106>
 800a130:	2b0c      	cmp	r3, #12
 800a132:	d004      	beq.n	800a13e <HAL_UART_RegisterCallback+0x10e>
 800a134:	e007      	b.n	800a146 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a13c:	e014      	b.n	800a168 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a144:	e010      	b.n	800a168 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14a:	f043 0220 	orr.w	r2, r3, #32
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	75fb      	strb	r3, [r7, #23]
        break;
 800a156:	e007      	b.n	800a168 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15c:	f043 0220 	orr.w	r2, r3, #32
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a170:	7dfb      	ldrb	r3, [r7, #23]
}
 800a172:	4618      	mov	r0, r3
 800a174:	371c      	adds	r7, #28
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop

0800a180 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	4613      	mov	r3, r2
 800a18c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b20      	cmp	r3, #32
 800a198:	d130      	bne.n	800a1fc <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d002      	beq.n	800a1a6 <HAL_UART_Transmit_IT+0x26>
 800a1a0:	88fb      	ldrh	r3, [r7, #6]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e029      	b.n	800a1fe <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d101      	bne.n	800a1b8 <HAL_UART_Transmit_IT+0x38>
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	e022      	b.n	800a1fe <HAL_UART_Transmit_IT+0x7e>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	88fa      	ldrh	r2, [r7, #6]
 800a1ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	88fa      	ldrh	r2, [r7, #6]
 800a1d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2221      	movs	r2, #33	; 0x21
 800a1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68da      	ldr	r2, [r3, #12]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a1f6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	e000      	b.n	800a1fe <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a1fc:	2302      	movs	r3, #2
  }
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	60f8      	str	r0, [r7, #12]
 800a212:	60b9      	str	r1, [r7, #8]
 800a214:	4613      	mov	r3, r2
 800a216:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	2b20      	cmp	r3, #32
 800a222:	d11d      	bne.n	800a260 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d002      	beq.n	800a230 <HAL_UART_Receive_IT+0x26>
 800a22a:	88fb      	ldrh	r3, [r7, #6]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d101      	bne.n	800a234 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	e016      	b.n	800a262 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d101      	bne.n	800a242 <HAL_UART_Receive_IT+0x38>
 800a23e:	2302      	movs	r3, #2
 800a240:	e00f      	b.n	800a262 <HAL_UART_Receive_IT+0x58>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a250:	88fb      	ldrh	r3, [r7, #6]
 800a252:	461a      	mov	r2, r3
 800a254:	68b9      	ldr	r1, [r7, #8]
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f000 fcf8 	bl	800ac4c <UART_Start_Receive_IT>
 800a25c:	4603      	mov	r3, r0
 800a25e:	e000      	b.n	800a262 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a260:	2302      	movs	r3, #2
  }
}
 800a262:	4618      	mov	r0, r3
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
	...

0800a26c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b08c      	sub	sp, #48	; 0x30
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	4613      	mov	r3, r2
 800a278:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a280:	b2db      	uxtb	r3, r3
 800a282:	2b20      	cmp	r3, #32
 800a284:	d165      	bne.n	800a352 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d002      	beq.n	800a292 <HAL_UART_Transmit_DMA+0x26>
 800a28c:	88fb      	ldrh	r3, [r7, #6]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d101      	bne.n	800a296 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e05e      	b.n	800a354 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d101      	bne.n	800a2a4 <HAL_UART_Transmit_DMA+0x38>
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	e057      	b.n	800a354 <HAL_UART_Transmit_DMA+0xe8>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	88fa      	ldrh	r2, [r7, #6]
 800a2b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	88fa      	ldrh	r2, [r7, #6]
 800a2bc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2221      	movs	r2, #33	; 0x21
 800a2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d0:	4a22      	ldr	r2, [pc, #136]	; (800a35c <HAL_UART_Transmit_DMA+0xf0>)
 800a2d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d8:	4a21      	ldr	r2, [pc, #132]	; (800a360 <HAL_UART_Transmit_DMA+0xf4>)
 800a2da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e0:	4a20      	ldr	r2, [pc, #128]	; (800a364 <HAL_UART_Transmit_DMA+0xf8>)
 800a2e2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a2ec:	f107 0308 	add.w	r3, r7, #8
 800a2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f8:	6819      	ldr	r1, [r3, #0]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	3304      	adds	r3, #4
 800a300:	461a      	mov	r2, r3
 800a302:	88fb      	ldrh	r3, [r7, #6]
 800a304:	f7fb f910 	bl	8005528 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a310:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	3314      	adds	r3, #20
 800a320:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	e853 3f00 	ldrex	r3, [r3]
 800a328:	617b      	str	r3, [r7, #20]
   return(result);
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a330:	62bb      	str	r3, [r7, #40]	; 0x28
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3314      	adds	r3, #20
 800a338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a33a:	627a      	str	r2, [r7, #36]	; 0x24
 800a33c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33e:	6a39      	ldr	r1, [r7, #32]
 800a340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a342:	e841 2300 	strex	r3, r2, [r1]
 800a346:	61fb      	str	r3, [r7, #28]
   return(result);
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1e5      	bne.n	800a31a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a34e:	2300      	movs	r3, #0
 800a350:	e000      	b.n	800a354 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a352:	2302      	movs	r3, #2
  }
}
 800a354:	4618      	mov	r0, r3
 800a356:	3730      	adds	r7, #48	; 0x30
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	0800aafd 	.word	0x0800aafd
 800a360:	0800ab99 	.word	0x0800ab99
 800a364:	0800abb7 	.word	0x0800abb7

0800a368 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b09a      	sub	sp, #104	; 0x68
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	330c      	adds	r3, #12
 800a376:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a37a:	e853 3f00 	ldrex	r3, [r3]
 800a37e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a382:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a386:	667b      	str	r3, [r7, #100]	; 0x64
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	330c      	adds	r3, #12
 800a38e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a390:	657a      	str	r2, [r7, #84]	; 0x54
 800a392:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a394:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a396:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a398:	e841 2300 	strex	r3, r2, [r1]
 800a39c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a39e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1e5      	bne.n	800a370 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3314      	adds	r3, #20
 800a3aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ae:	e853 3f00 	ldrex	r3, [r3]
 800a3b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b6:	f023 0301 	bic.w	r3, r3, #1
 800a3ba:	663b      	str	r3, [r7, #96]	; 0x60
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	3314      	adds	r3, #20
 800a3c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a3c4:	643a      	str	r2, [r7, #64]	; 0x40
 800a3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3cc:	e841 2300 	strex	r3, r2, [r1]
 800a3d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1e5      	bne.n	800a3a4 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d119      	bne.n	800a414 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	330c      	adds	r3, #12
 800a3e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e8:	6a3b      	ldr	r3, [r7, #32]
 800a3ea:	e853 3f00 	ldrex	r3, [r3]
 800a3ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	f023 0310 	bic.w	r3, r3, #16
 800a3f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	330c      	adds	r3, #12
 800a3fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a400:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a408:	e841 2300 	strex	r3, r2, [r1]
 800a40c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a410:	2b00      	cmp	r3, #0
 800a412:	d1e5      	bne.n	800a3e0 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a41e:	2b40      	cmp	r3, #64	; 0x40
 800a420:	d136      	bne.n	800a490 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	3314      	adds	r3, #20
 800a428:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	e853 3f00 	ldrex	r3, [r3]
 800a430:	60bb      	str	r3, [r7, #8]
   return(result);
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a438:	65bb      	str	r3, [r7, #88]	; 0x58
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	3314      	adds	r3, #20
 800a440:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a442:	61ba      	str	r2, [r7, #24]
 800a444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a446:	6979      	ldr	r1, [r7, #20]
 800a448:	69ba      	ldr	r2, [r7, #24]
 800a44a:	e841 2300 	strex	r3, r2, [r1]
 800a44e:	613b      	str	r3, [r7, #16]
   return(result);
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1e5      	bne.n	800a422 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d018      	beq.n	800a490 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a462:	2200      	movs	r2, #0
 800a464:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7fb f8b4 	bl	80055d8 <HAL_DMA_Abort>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00c      	beq.n	800a490 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fb fad6 	bl	8005a2c <HAL_DMA_GetError>
 800a480:	4603      	mov	r3, r0
 800a482:	2b20      	cmp	r3, #32
 800a484:	d104      	bne.n	800a490 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2210      	movs	r2, #16
 800a48a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800a48c:	2303      	movs	r3, #3
 800a48e:	e00a      	b.n	800a4a6 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2220      	movs	r2, #32
 800a49a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3768      	adds	r7, #104	; 0x68
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
	...

0800a4b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b0ba      	sub	sp, #232	; 0xe8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a4e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4e6:	f003 030f 	and.w	r3, r3, #15
 800a4ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a4ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10f      	bne.n	800a516 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4fa:	f003 0320 	and.w	r3, r3, #32
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d009      	beq.n	800a516 <HAL_UART_IRQHandler+0x66>
 800a502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a506:	f003 0320 	and.w	r3, r3, #32
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d003      	beq.n	800a516 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 fce3 	bl	800aeda <UART_Receive_IT>
      return;
 800a514:	e25b      	b.n	800a9ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f000 80e1 	beq.w	800a6e2 <HAL_UART_IRQHandler+0x232>
 800a520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a524:	f003 0301 	and.w	r3, r3, #1
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d106      	bne.n	800a53a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a52c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a530:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 80d4 	beq.w	800a6e2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a53a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a53e:	f003 0301 	and.w	r3, r3, #1
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00b      	beq.n	800a55e <HAL_UART_IRQHandler+0xae>
 800a546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a54a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d005      	beq.n	800a55e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a556:	f043 0201 	orr.w	r2, r3, #1
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a55e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a562:	f003 0304 	and.w	r3, r3, #4
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00b      	beq.n	800a582 <HAL_UART_IRQHandler+0xd2>
 800a56a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a56e:	f003 0301 	and.w	r3, r3, #1
 800a572:	2b00      	cmp	r3, #0
 800a574:	d005      	beq.n	800a582 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57a:	f043 0202 	orr.w	r2, r3, #2
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a586:	f003 0302 	and.w	r3, r3, #2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00b      	beq.n	800a5a6 <HAL_UART_IRQHandler+0xf6>
 800a58e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a592:	f003 0301 	and.w	r3, r3, #1
 800a596:	2b00      	cmp	r3, #0
 800a598:	d005      	beq.n	800a5a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59e:	f043 0204 	orr.w	r2, r3, #4
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a5a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5aa:	f003 0308 	and.w	r3, r3, #8
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d011      	beq.n	800a5d6 <HAL_UART_IRQHandler+0x126>
 800a5b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5b6:	f003 0320 	and.w	r3, r3, #32
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d105      	bne.n	800a5ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a5be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5c2:	f003 0301 	and.w	r3, r3, #1
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d005      	beq.n	800a5d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ce:	f043 0208 	orr.w	r2, r3, #8
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f000 81f2 	beq.w	800a9c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5e4:	f003 0320 	and.w	r3, r3, #32
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d008      	beq.n	800a5fe <HAL_UART_IRQHandler+0x14e>
 800a5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5f0:	f003 0320 	and.w	r3, r3, #32
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d002      	beq.n	800a5fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 fc6e 	bl	800aeda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	695b      	ldr	r3, [r3, #20]
 800a604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a608:	2b40      	cmp	r3, #64	; 0x40
 800a60a:	bf0c      	ite	eq
 800a60c:	2301      	moveq	r3, #1
 800a60e:	2300      	movne	r3, #0
 800a610:	b2db      	uxtb	r3, r3
 800a612:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61a:	f003 0308 	and.w	r3, r3, #8
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d103      	bne.n	800a62a <HAL_UART_IRQHandler+0x17a>
 800a622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a626:	2b00      	cmp	r3, #0
 800a628:	d051      	beq.n	800a6ce <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 fb74 	bl	800ad18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	695b      	ldr	r3, [r3, #20]
 800a636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a63a:	2b40      	cmp	r3, #64	; 0x40
 800a63c:	d142      	bne.n	800a6c4 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	3314      	adds	r3, #20
 800a644:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a648:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a64c:	e853 3f00 	ldrex	r3, [r3]
 800a650:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a654:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a65c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	3314      	adds	r3, #20
 800a666:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a66a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a66e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a672:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a676:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a67a:	e841 2300 	strex	r3, r2, [r1]
 800a67e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d1d9      	bne.n	800a63e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d013      	beq.n	800a6ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a696:	4a7f      	ldr	r2, [pc, #508]	; (800a894 <HAL_UART_IRQHandler+0x3e4>)
 800a698:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7fb f80a 	bl	80056b8 <HAL_DMA_Abort_IT>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d019      	beq.n	800a6de <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6b8:	e011      	b.n	800a6de <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c2:	e00c      	b.n	800a6de <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6cc:	e007      	b.n	800a6de <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a6dc:	e172      	b.n	800a9c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6de:	bf00      	nop
    return;
 800a6e0:	e170      	b.n	800a9c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	f040 814c 	bne.w	800a984 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a6ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6f0:	f003 0310 	and.w	r3, r3, #16
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f000 8145 	beq.w	800a984 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a6fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6fe:	f003 0310 	and.w	r3, r3, #16
 800a702:	2b00      	cmp	r3, #0
 800a704:	f000 813e 	beq.w	800a984 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a708:	2300      	movs	r3, #0
 800a70a:	60bb      	str	r3, [r7, #8]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	60bb      	str	r3, [r7, #8]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	60bb      	str	r3, [r7, #8]
 800a71c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	695b      	ldr	r3, [r3, #20]
 800a724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a728:	2b40      	cmp	r3, #64	; 0x40
 800a72a:	f040 80b5 	bne.w	800a898 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a73a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f000 8142 	beq.w	800a9c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a748:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a74c:	429a      	cmp	r2, r3
 800a74e:	f080 813b 	bcs.w	800a9c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a758:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75e:	69db      	ldr	r3, [r3, #28]
 800a760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a764:	f000 8088 	beq.w	800a878 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	330c      	adds	r3, #12
 800a76e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a772:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a776:	e853 3f00 	ldrex	r3, [r3]
 800a77a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a77e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a782:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a786:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	330c      	adds	r3, #12
 800a790:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a794:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a798:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a7a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a7a4:	e841 2300 	strex	r3, r2, [r1]
 800a7a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a7ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1d9      	bne.n	800a768 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	3314      	adds	r3, #20
 800a7ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7be:	e853 3f00 	ldrex	r3, [r3]
 800a7c2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a7c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7c6:	f023 0301 	bic.w	r3, r3, #1
 800a7ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	3314      	adds	r3, #20
 800a7d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a7d8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a7dc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a7e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a7e4:	e841 2300 	strex	r3, r2, [r1]
 800a7e8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a7ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1e1      	bne.n	800a7b4 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	3314      	adds	r3, #20
 800a7f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7fa:	e853 3f00 	ldrex	r3, [r3]
 800a7fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a806:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3314      	adds	r3, #20
 800a810:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a814:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a816:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a818:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a81a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a81c:	e841 2300 	strex	r3, r2, [r1]
 800a820:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1e3      	bne.n	800a7f0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2220      	movs	r2, #32
 800a82c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	330c      	adds	r3, #12
 800a83c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a840:	e853 3f00 	ldrex	r3, [r3]
 800a844:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a848:	f023 0310 	bic.w	r3, r3, #16
 800a84c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	330c      	adds	r3, #12
 800a856:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a85a:	65ba      	str	r2, [r7, #88]	; 0x58
 800a85c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a860:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a862:	e841 2300 	strex	r3, r2, [r1]
 800a866:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1e3      	bne.n	800a836 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a872:	4618      	mov	r0, r3
 800a874:	f7fa feb0 	bl	80055d8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800a884:	b292      	uxth	r2, r2
 800a886:	1a8a      	subs	r2, r1, r2
 800a888:	b292      	uxth	r2, r2
 800a88a:	4611      	mov	r1, r2
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a890:	e09a      	b.n	800a9c8 <HAL_UART_IRQHandler+0x518>
 800a892:	bf00      	nop
 800a894:	0800addf 	.word	0x0800addf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f000 808c 	beq.w	800a9cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a8b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f000 8087 	beq.w	800a9cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	330c      	adds	r3, #12
 800a8c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c8:	e853 3f00 	ldrex	r3, [r3]
 800a8cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	330c      	adds	r3, #12
 800a8de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a8e2:	647a      	str	r2, [r7, #68]	; 0x44
 800a8e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a8e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8ea:	e841 2300 	strex	r3, r2, [r1]
 800a8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1e3      	bne.n	800a8be <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	3314      	adds	r3, #20
 800a8fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a900:	e853 3f00 	ldrex	r3, [r3]
 800a904:	623b      	str	r3, [r7, #32]
   return(result);
 800a906:	6a3b      	ldr	r3, [r7, #32]
 800a908:	f023 0301 	bic.w	r3, r3, #1
 800a90c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3314      	adds	r3, #20
 800a916:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a91a:	633a      	str	r2, [r7, #48]	; 0x30
 800a91c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a922:	e841 2300 	strex	r3, r2, [r1]
 800a926:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d1e3      	bne.n	800a8f6 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2220      	movs	r2, #32
 800a932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	330c      	adds	r3, #12
 800a942:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	e853 3f00 	ldrex	r3, [r3]
 800a94a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f023 0310 	bic.w	r3, r3, #16
 800a952:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	330c      	adds	r3, #12
 800a95c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a960:	61fa      	str	r2, [r7, #28]
 800a962:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a964:	69b9      	ldr	r1, [r7, #24]
 800a966:	69fa      	ldr	r2, [r7, #28]
 800a968:	e841 2300 	strex	r3, r2, [r1]
 800a96c:	617b      	str	r3, [r7, #20]
   return(result);
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1e3      	bne.n	800a93c <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a978:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800a97c:	4611      	mov	r1, r2
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a982:	e023      	b.n	800a9cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d009      	beq.n	800a9a4 <HAL_UART_IRQHandler+0x4f4>
 800a990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d003      	beq.n	800a9a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fa33 	bl	800ae08 <UART_Transmit_IT>
    return;
 800a9a2:	e014      	b.n	800a9ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a9a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00e      	beq.n	800a9ce <HAL_UART_IRQHandler+0x51e>
 800a9b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d008      	beq.n	800a9ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fa73 	bl	800aea8 <UART_EndTransmit_IT>
    return;
 800a9c2:	e004      	b.n	800a9ce <HAL_UART_IRQHandler+0x51e>
    return;
 800a9c4:	bf00      	nop
 800a9c6:	e002      	b.n	800a9ce <HAL_UART_IRQHandler+0x51e>
      return;
 800a9c8:	bf00      	nop
 800a9ca:	e000      	b.n	800a9ce <HAL_UART_IRQHandler+0x51e>
      return;
 800a9cc:	bf00      	nop
  }
}
 800a9ce:	37e8      	adds	r7, #232	; 0xe8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a9dc:	bf00      	nop
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a9f0:	bf00      	nop
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800aa04:	bf00      	nop
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800aa68:	bf00      	nop
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a10      	ldr	r2, [pc, #64]	; (800aad8 <UART_InitCallbacksToDefault+0x4c>)
 800aa98:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a0f      	ldr	r2, [pc, #60]	; (800aadc <UART_InitCallbacksToDefault+0x50>)
 800aa9e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a0f      	ldr	r2, [pc, #60]	; (800aae0 <UART_InitCallbacksToDefault+0x54>)
 800aaa4:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a0e      	ldr	r2, [pc, #56]	; (800aae4 <UART_InitCallbacksToDefault+0x58>)
 800aaaa:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a0e      	ldr	r2, [pc, #56]	; (800aae8 <UART_InitCallbacksToDefault+0x5c>)
 800aab0:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a0d      	ldr	r2, [pc, #52]	; (800aaec <UART_InitCallbacksToDefault+0x60>)
 800aab6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a0d      	ldr	r2, [pc, #52]	; (800aaf0 <UART_InitCallbacksToDefault+0x64>)
 800aabc:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a0c      	ldr	r2, [pc, #48]	; (800aaf4 <UART_InitCallbacksToDefault+0x68>)
 800aac2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a0c      	ldr	r2, [pc, #48]	; (800aaf8 <UART_InitCallbacksToDefault+0x6c>)
 800aac8:	669a      	str	r2, [r3, #104]	; 0x68

}
 800aaca:	bf00      	nop
 800aacc:	370c      	adds	r7, #12
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop
 800aad8:	0800a9e9 	.word	0x0800a9e9
 800aadc:	0800a9d5 	.word	0x0800a9d5
 800aae0:	0800aa11 	.word	0x0800aa11
 800aae4:	0800a9fd 	.word	0x0800a9fd
 800aae8:	0800aa25 	.word	0x0800aa25
 800aaec:	0800aa39 	.word	0x0800aa39
 800aaf0:	0800aa4d 	.word	0x0800aa4d
 800aaf4:	0800aa61 	.word	0x0800aa61
 800aaf8:	0800aa75 	.word	0x0800aa75

0800aafc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b090      	sub	sp, #64	; 0x40
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab08:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d137      	bne.n	800ab88 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ab18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	3314      	adds	r3, #20
 800ab24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab28:	e853 3f00 	ldrex	r3, [r3]
 800ab2c:	623b      	str	r3, [r7, #32]
   return(result);
 800ab2e:	6a3b      	ldr	r3, [r7, #32]
 800ab30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab34:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	3314      	adds	r3, #20
 800ab3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab3e:	633a      	str	r2, [r7, #48]	; 0x30
 800ab40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab46:	e841 2300 	strex	r3, r2, [r1]
 800ab4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1e5      	bne.n	800ab1e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	330c      	adds	r3, #12
 800ab58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	e853 3f00 	ldrex	r3, [r3]
 800ab60:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab68:	637b      	str	r3, [r7, #52]	; 0x34
 800ab6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	330c      	adds	r3, #12
 800ab70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab72:	61fa      	str	r2, [r7, #28]
 800ab74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab76:	69b9      	ldr	r1, [r7, #24]
 800ab78:	69fa      	ldr	r2, [r7, #28]
 800ab7a:	e841 2300 	strex	r3, r2, [r1]
 800ab7e:	617b      	str	r3, [r7, #20]
   return(result);
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d1e5      	bne.n	800ab52 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab86:	e003      	b.n	800ab90 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800ab88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab8c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ab8e:	4798      	blx	r3
}
 800ab90:	bf00      	nop
 800ab92:	3740      	adds	r7, #64	; 0x40
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abae:	bf00      	nop
 800abb0:	3710      	adds	r7, #16
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b084      	sub	sp, #16
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800abbe:	2300      	movs	r3, #0
 800abc0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd2:	2b80      	cmp	r3, #128	; 0x80
 800abd4:	bf0c      	ite	eq
 800abd6:	2301      	moveq	r3, #1
 800abd8:	2300      	movne	r3, #0
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	2b21      	cmp	r3, #33	; 0x21
 800abe8:	d108      	bne.n	800abfc <UART_DMAError+0x46>
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d005      	beq.n	800abfc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	2200      	movs	r2, #0
 800abf4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800abf6:	68b8      	ldr	r0, [r7, #8]
 800abf8:	f000 f866 	bl	800acc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	695b      	ldr	r3, [r3, #20]
 800ac02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac06:	2b40      	cmp	r3, #64	; 0x40
 800ac08:	bf0c      	ite	eq
 800ac0a:	2301      	moveq	r3, #1
 800ac0c:	2300      	movne	r3, #0
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	2b22      	cmp	r3, #34	; 0x22
 800ac1c:	d108      	bne.n	800ac30 <UART_DMAError+0x7a>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d005      	beq.n	800ac30 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	2200      	movs	r2, #0
 800ac28:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ac2a:	68b8      	ldr	r0, [r7, #8]
 800ac2c:	f000 f874 	bl	800ad18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac34:	f043 0210 	orr.w	r2, r3, #16
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac40:	68b8      	ldr	r0, [r7, #8]
 800ac42:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac44:	bf00      	nop
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	4613      	mov	r3, r2
 800ac58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	68ba      	ldr	r2, [r7, #8]
 800ac5e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	88fa      	ldrh	r2, [r7, #6]
 800ac64:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	88fa      	ldrh	r2, [r7, #6]
 800ac6a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2222      	movs	r2, #34	; 0x22
 800ac76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d007      	beq.n	800ac9a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	68da      	ldr	r2, [r3, #12]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac98:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	695a      	ldr	r2, [r3, #20]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f042 0201 	orr.w	r2, r2, #1
 800aca8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68da      	ldr	r2, [r3, #12]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f042 0220 	orr.w	r2, r2, #32
 800acb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800acba:	2300      	movs	r3, #0
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800acc8:	b480      	push	{r7}
 800acca:	b089      	sub	sp, #36	; 0x24
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	330c      	adds	r3, #12
 800acd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	e853 3f00 	ldrex	r3, [r3]
 800acde:	60bb      	str	r3, [r7, #8]
   return(result);
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ace6:	61fb      	str	r3, [r7, #28]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	330c      	adds	r3, #12
 800acee:	69fa      	ldr	r2, [r7, #28]
 800acf0:	61ba      	str	r2, [r7, #24]
 800acf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf4:	6979      	ldr	r1, [r7, #20]
 800acf6:	69ba      	ldr	r2, [r7, #24]
 800acf8:	e841 2300 	strex	r3, r2, [r1]
 800acfc:	613b      	str	r3, [r7, #16]
   return(result);
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d1e5      	bne.n	800acd0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2220      	movs	r2, #32
 800ad08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ad0c:	bf00      	nop
 800ad0e:	3724      	adds	r7, #36	; 0x24
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b095      	sub	sp, #84	; 0x54
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	330c      	adds	r3, #12
 800ad26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad2a:	e853 3f00 	ldrex	r3, [r3]
 800ad2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	330c      	adds	r3, #12
 800ad3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad40:	643a      	str	r2, [r7, #64]	; 0x40
 800ad42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad48:	e841 2300 	strex	r3, r2, [r1]
 800ad4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1e5      	bne.n	800ad20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	3314      	adds	r3, #20
 800ad5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5c:	6a3b      	ldr	r3, [r7, #32]
 800ad5e:	e853 3f00 	ldrex	r3, [r3]
 800ad62:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	f023 0301 	bic.w	r3, r3, #1
 800ad6a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	3314      	adds	r3, #20
 800ad72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad74:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad7c:	e841 2300 	strex	r3, r2, [r1]
 800ad80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d1e5      	bne.n	800ad54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d119      	bne.n	800adc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	330c      	adds	r3, #12
 800ad96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	e853 3f00 	ldrex	r3, [r3]
 800ad9e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	f023 0310 	bic.w	r3, r3, #16
 800ada6:	647b      	str	r3, [r7, #68]	; 0x44
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	330c      	adds	r3, #12
 800adae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adb0:	61ba      	str	r2, [r7, #24]
 800adb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb4:	6979      	ldr	r1, [r7, #20]
 800adb6:	69ba      	ldr	r2, [r7, #24]
 800adb8:	e841 2300 	strex	r3, r2, [r1]
 800adbc:	613b      	str	r3, [r7, #16]
   return(result);
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d1e5      	bne.n	800ad90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2220      	movs	r2, #32
 800adc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800add2:	bf00      	nop
 800add4:	3754      	adds	r7, #84	; 0x54
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b084      	sub	sp, #16
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2200      	movs	r2, #0
 800adf0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2200      	movs	r2, #0
 800adf6:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae00:	bf00      	nop
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	2b21      	cmp	r3, #33	; 0x21
 800ae1a:	d13e      	bne.n	800ae9a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae24:	d114      	bne.n	800ae50 <UART_Transmit_IT+0x48>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	691b      	ldr	r3, [r3, #16]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d110      	bne.n	800ae50 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	881b      	ldrh	r3, [r3, #0]
 800ae38:	461a      	mov	r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae42:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6a1b      	ldr	r3, [r3, #32]
 800ae48:	1c9a      	adds	r2, r3, #2
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	621a      	str	r2, [r3, #32]
 800ae4e:	e008      	b.n	800ae62 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	1c59      	adds	r1, r3, #1
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	6211      	str	r1, [r2, #32]
 800ae5a:	781a      	ldrb	r2, [r3, #0]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	4619      	mov	r1, r3
 800ae70:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10f      	bne.n	800ae96 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68da      	ldr	r2, [r3, #12]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68da      	ldr	r2, [r3, #12]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ae96:	2300      	movs	r3, #0
 800ae98:	e000      	b.n	800ae9c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ae9a:	2302      	movs	r3, #2
  }
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	68da      	ldr	r2, [r3, #12]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aebe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2220      	movs	r2, #32
 800aec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b08c      	sub	sp, #48	; 0x30
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	2b22      	cmp	r3, #34	; 0x22
 800aeec:	f040 80ad 	bne.w	800b04a <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aef8:	d117      	bne.n	800af2a <UART_Receive_IT+0x50>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d113      	bne.n	800af2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800af02:	2300      	movs	r3, #0
 800af04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	b29b      	uxth	r3, r3
 800af14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af18:	b29a      	uxth	r2, r3
 800af1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af22:	1c9a      	adds	r2, r3, #2
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	629a      	str	r2, [r3, #40]	; 0x28
 800af28:	e026      	b.n	800af78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800af30:	2300      	movs	r3, #0
 800af32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af3c:	d007      	beq.n	800af4e <UART_Receive_IT+0x74>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d10a      	bne.n	800af5c <UART_Receive_IT+0x82>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d106      	bne.n	800af5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	b2da      	uxtb	r2, r3
 800af56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af58:	701a      	strb	r2, [r3, #0]
 800af5a:	e008      	b.n	800af6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	b2db      	uxtb	r3, r3
 800af64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af68:	b2da      	uxtb	r2, r3
 800af6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af72:	1c5a      	adds	r2, r3, #1
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	3b01      	subs	r3, #1
 800af80:	b29b      	uxth	r3, r3
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	4619      	mov	r1, r3
 800af86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d15c      	bne.n	800b046 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68da      	ldr	r2, [r3, #12]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f022 0220 	bic.w	r2, r2, #32
 800af9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68da      	ldr	r2, [r3, #12]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800afaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	695a      	ldr	r2, [r3, #20]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f022 0201 	bic.w	r2, r2, #1
 800afba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2220      	movs	r2, #32
 800afc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d136      	bne.n	800b03a <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	330c      	adds	r3, #12
 800afd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	e853 3f00 	ldrex	r3, [r3]
 800afe0:	613b      	str	r3, [r7, #16]
   return(result);
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	f023 0310 	bic.w	r3, r3, #16
 800afe8:	627b      	str	r3, [r7, #36]	; 0x24
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	330c      	adds	r3, #12
 800aff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aff2:	623a      	str	r2, [r7, #32]
 800aff4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff6:	69f9      	ldr	r1, [r7, #28]
 800aff8:	6a3a      	ldr	r2, [r7, #32]
 800affa:	e841 2300 	strex	r3, r2, [r1]
 800affe:	61bb      	str	r3, [r7, #24]
   return(result);
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1e5      	bne.n	800afd2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f003 0310 	and.w	r3, r3, #16
 800b010:	2b10      	cmp	r3, #16
 800b012:	d10a      	bne.n	800b02a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b014:	2300      	movs	r3, #0
 800b016:	60fb      	str	r3, [r7, #12]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	60fb      	str	r3, [r7, #12]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	60fb      	str	r3, [r7, #12]
 800b028:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b032:	4611      	mov	r1, r2
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	4798      	blx	r3
 800b038:	e003      	b.n	800b042 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b042:	2300      	movs	r3, #0
 800b044:	e002      	b.n	800b04c <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b046:	2300      	movs	r3, #0
 800b048:	e000      	b.n	800b04c <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b04a:	2302      	movs	r3, #2
  }
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3730      	adds	r7, #48	; 0x30
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b058:	b0c0      	sub	sp, #256	; 0x100
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b06c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b070:	68d9      	ldr	r1, [r3, #12]
 800b072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	ea40 0301 	orr.w	r3, r0, r1
 800b07c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b07e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b082:	689a      	ldr	r2, [r3, #8]
 800b084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b088:	691b      	ldr	r3, [r3, #16]
 800b08a:	431a      	orrs	r2, r3
 800b08c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b090:	695b      	ldr	r3, [r3, #20]
 800b092:	431a      	orrs	r2, r3
 800b094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b098:	69db      	ldr	r3, [r3, #28]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b0a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b0ac:	f021 010c 	bic.w	r1, r1, #12
 800b0b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b0ba:	430b      	orrs	r3, r1
 800b0bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b0be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	695b      	ldr	r3, [r3, #20]
 800b0c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b0ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0ce:	6999      	ldr	r1, [r3, #24]
 800b0d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	ea40 0301 	orr.w	r3, r0, r1
 800b0da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b0dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	4b8f      	ldr	r3, [pc, #572]	; (800b320 <UART_SetConfig+0x2cc>)
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d005      	beq.n	800b0f4 <UART_SetConfig+0xa0>
 800b0e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	4b8d      	ldr	r3, [pc, #564]	; (800b324 <UART_SetConfig+0x2d0>)
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d104      	bne.n	800b0fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b0f4:	f7fd f9e0 	bl	80084b8 <HAL_RCC_GetPCLK2Freq>
 800b0f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b0fc:	e003      	b.n	800b106 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b0fe:	f7fd f9c7 	bl	8008490 <HAL_RCC_GetPCLK1Freq>
 800b102:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b10a:	69db      	ldr	r3, [r3, #28]
 800b10c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b110:	f040 810c 	bne.w	800b32c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b118:	2200      	movs	r2, #0
 800b11a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b11e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b122:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b126:	4622      	mov	r2, r4
 800b128:	462b      	mov	r3, r5
 800b12a:	1891      	adds	r1, r2, r2
 800b12c:	65b9      	str	r1, [r7, #88]	; 0x58
 800b12e:	415b      	adcs	r3, r3
 800b130:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b132:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b136:	4621      	mov	r1, r4
 800b138:	eb12 0801 	adds.w	r8, r2, r1
 800b13c:	4629      	mov	r1, r5
 800b13e:	eb43 0901 	adc.w	r9, r3, r1
 800b142:	f04f 0200 	mov.w	r2, #0
 800b146:	f04f 0300 	mov.w	r3, #0
 800b14a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b14e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b152:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b156:	4690      	mov	r8, r2
 800b158:	4699      	mov	r9, r3
 800b15a:	4623      	mov	r3, r4
 800b15c:	eb18 0303 	adds.w	r3, r8, r3
 800b160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b164:	462b      	mov	r3, r5
 800b166:	eb49 0303 	adc.w	r3, r9, r3
 800b16a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b16e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b17a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b17e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b182:	460b      	mov	r3, r1
 800b184:	18db      	adds	r3, r3, r3
 800b186:	653b      	str	r3, [r7, #80]	; 0x50
 800b188:	4613      	mov	r3, r2
 800b18a:	eb42 0303 	adc.w	r3, r2, r3
 800b18e:	657b      	str	r3, [r7, #84]	; 0x54
 800b190:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b194:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b198:	f7f5 fd7e 	bl	8000c98 <__aeabi_uldivmod>
 800b19c:	4602      	mov	r2, r0
 800b19e:	460b      	mov	r3, r1
 800b1a0:	4b61      	ldr	r3, [pc, #388]	; (800b328 <UART_SetConfig+0x2d4>)
 800b1a2:	fba3 2302 	umull	r2, r3, r3, r2
 800b1a6:	095b      	lsrs	r3, r3, #5
 800b1a8:	011c      	lsls	r4, r3, #4
 800b1aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b1b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b1b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b1bc:	4642      	mov	r2, r8
 800b1be:	464b      	mov	r3, r9
 800b1c0:	1891      	adds	r1, r2, r2
 800b1c2:	64b9      	str	r1, [r7, #72]	; 0x48
 800b1c4:	415b      	adcs	r3, r3
 800b1c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b1cc:	4641      	mov	r1, r8
 800b1ce:	eb12 0a01 	adds.w	sl, r2, r1
 800b1d2:	4649      	mov	r1, r9
 800b1d4:	eb43 0b01 	adc.w	fp, r3, r1
 800b1d8:	f04f 0200 	mov.w	r2, #0
 800b1dc:	f04f 0300 	mov.w	r3, #0
 800b1e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b1e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b1e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b1ec:	4692      	mov	sl, r2
 800b1ee:	469b      	mov	fp, r3
 800b1f0:	4643      	mov	r3, r8
 800b1f2:	eb1a 0303 	adds.w	r3, sl, r3
 800b1f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b1fa:	464b      	mov	r3, r9
 800b1fc:	eb4b 0303 	adc.w	r3, fp, r3
 800b200:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b210:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b214:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b218:	460b      	mov	r3, r1
 800b21a:	18db      	adds	r3, r3, r3
 800b21c:	643b      	str	r3, [r7, #64]	; 0x40
 800b21e:	4613      	mov	r3, r2
 800b220:	eb42 0303 	adc.w	r3, r2, r3
 800b224:	647b      	str	r3, [r7, #68]	; 0x44
 800b226:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b22a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b22e:	f7f5 fd33 	bl	8000c98 <__aeabi_uldivmod>
 800b232:	4602      	mov	r2, r0
 800b234:	460b      	mov	r3, r1
 800b236:	4611      	mov	r1, r2
 800b238:	4b3b      	ldr	r3, [pc, #236]	; (800b328 <UART_SetConfig+0x2d4>)
 800b23a:	fba3 2301 	umull	r2, r3, r3, r1
 800b23e:	095b      	lsrs	r3, r3, #5
 800b240:	2264      	movs	r2, #100	; 0x64
 800b242:	fb02 f303 	mul.w	r3, r2, r3
 800b246:	1acb      	subs	r3, r1, r3
 800b248:	00db      	lsls	r3, r3, #3
 800b24a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b24e:	4b36      	ldr	r3, [pc, #216]	; (800b328 <UART_SetConfig+0x2d4>)
 800b250:	fba3 2302 	umull	r2, r3, r3, r2
 800b254:	095b      	lsrs	r3, r3, #5
 800b256:	005b      	lsls	r3, r3, #1
 800b258:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b25c:	441c      	add	r4, r3
 800b25e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b262:	2200      	movs	r2, #0
 800b264:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b268:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b26c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b270:	4642      	mov	r2, r8
 800b272:	464b      	mov	r3, r9
 800b274:	1891      	adds	r1, r2, r2
 800b276:	63b9      	str	r1, [r7, #56]	; 0x38
 800b278:	415b      	adcs	r3, r3
 800b27a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b27c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b280:	4641      	mov	r1, r8
 800b282:	1851      	adds	r1, r2, r1
 800b284:	6339      	str	r1, [r7, #48]	; 0x30
 800b286:	4649      	mov	r1, r9
 800b288:	414b      	adcs	r3, r1
 800b28a:	637b      	str	r3, [r7, #52]	; 0x34
 800b28c:	f04f 0200 	mov.w	r2, #0
 800b290:	f04f 0300 	mov.w	r3, #0
 800b294:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b298:	4659      	mov	r1, fp
 800b29a:	00cb      	lsls	r3, r1, #3
 800b29c:	4651      	mov	r1, sl
 800b29e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2a2:	4651      	mov	r1, sl
 800b2a4:	00ca      	lsls	r2, r1, #3
 800b2a6:	4610      	mov	r0, r2
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	4642      	mov	r2, r8
 800b2ae:	189b      	adds	r3, r3, r2
 800b2b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b2b4:	464b      	mov	r3, r9
 800b2b6:	460a      	mov	r2, r1
 800b2b8:	eb42 0303 	adc.w	r3, r2, r3
 800b2bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b2cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b2d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	18db      	adds	r3, r3, r3
 800b2d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2da:	4613      	mov	r3, r2
 800b2dc:	eb42 0303 	adc.w	r3, r2, r3
 800b2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b2e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b2ea:	f7f5 fcd5 	bl	8000c98 <__aeabi_uldivmod>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	4b0d      	ldr	r3, [pc, #52]	; (800b328 <UART_SetConfig+0x2d4>)
 800b2f4:	fba3 1302 	umull	r1, r3, r3, r2
 800b2f8:	095b      	lsrs	r3, r3, #5
 800b2fa:	2164      	movs	r1, #100	; 0x64
 800b2fc:	fb01 f303 	mul.w	r3, r1, r3
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	00db      	lsls	r3, r3, #3
 800b304:	3332      	adds	r3, #50	; 0x32
 800b306:	4a08      	ldr	r2, [pc, #32]	; (800b328 <UART_SetConfig+0x2d4>)
 800b308:	fba2 2303 	umull	r2, r3, r2, r3
 800b30c:	095b      	lsrs	r3, r3, #5
 800b30e:	f003 0207 	and.w	r2, r3, #7
 800b312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4422      	add	r2, r4
 800b31a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b31c:	e105      	b.n	800b52a <UART_SetConfig+0x4d6>
 800b31e:	bf00      	nop
 800b320:	40011000 	.word	0x40011000
 800b324:	40011400 	.word	0x40011400
 800b328:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b32c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b330:	2200      	movs	r2, #0
 800b332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b336:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b33a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b33e:	4642      	mov	r2, r8
 800b340:	464b      	mov	r3, r9
 800b342:	1891      	adds	r1, r2, r2
 800b344:	6239      	str	r1, [r7, #32]
 800b346:	415b      	adcs	r3, r3
 800b348:	627b      	str	r3, [r7, #36]	; 0x24
 800b34a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b34e:	4641      	mov	r1, r8
 800b350:	1854      	adds	r4, r2, r1
 800b352:	4649      	mov	r1, r9
 800b354:	eb43 0501 	adc.w	r5, r3, r1
 800b358:	f04f 0200 	mov.w	r2, #0
 800b35c:	f04f 0300 	mov.w	r3, #0
 800b360:	00eb      	lsls	r3, r5, #3
 800b362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b366:	00e2      	lsls	r2, r4, #3
 800b368:	4614      	mov	r4, r2
 800b36a:	461d      	mov	r5, r3
 800b36c:	4643      	mov	r3, r8
 800b36e:	18e3      	adds	r3, r4, r3
 800b370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b374:	464b      	mov	r3, r9
 800b376:	eb45 0303 	adc.w	r3, r5, r3
 800b37a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b37e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b38a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b38e:	f04f 0200 	mov.w	r2, #0
 800b392:	f04f 0300 	mov.w	r3, #0
 800b396:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b39a:	4629      	mov	r1, r5
 800b39c:	008b      	lsls	r3, r1, #2
 800b39e:	4621      	mov	r1, r4
 800b3a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3a4:	4621      	mov	r1, r4
 800b3a6:	008a      	lsls	r2, r1, #2
 800b3a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b3ac:	f7f5 fc74 	bl	8000c98 <__aeabi_uldivmod>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	4b60      	ldr	r3, [pc, #384]	; (800b538 <UART_SetConfig+0x4e4>)
 800b3b6:	fba3 2302 	umull	r2, r3, r3, r2
 800b3ba:	095b      	lsrs	r3, r3, #5
 800b3bc:	011c      	lsls	r4, r3, #4
 800b3be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b3c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b3cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b3d0:	4642      	mov	r2, r8
 800b3d2:	464b      	mov	r3, r9
 800b3d4:	1891      	adds	r1, r2, r2
 800b3d6:	61b9      	str	r1, [r7, #24]
 800b3d8:	415b      	adcs	r3, r3
 800b3da:	61fb      	str	r3, [r7, #28]
 800b3dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b3e0:	4641      	mov	r1, r8
 800b3e2:	1851      	adds	r1, r2, r1
 800b3e4:	6139      	str	r1, [r7, #16]
 800b3e6:	4649      	mov	r1, r9
 800b3e8:	414b      	adcs	r3, r1
 800b3ea:	617b      	str	r3, [r7, #20]
 800b3ec:	f04f 0200 	mov.w	r2, #0
 800b3f0:	f04f 0300 	mov.w	r3, #0
 800b3f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b3f8:	4659      	mov	r1, fp
 800b3fa:	00cb      	lsls	r3, r1, #3
 800b3fc:	4651      	mov	r1, sl
 800b3fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b402:	4651      	mov	r1, sl
 800b404:	00ca      	lsls	r2, r1, #3
 800b406:	4610      	mov	r0, r2
 800b408:	4619      	mov	r1, r3
 800b40a:	4603      	mov	r3, r0
 800b40c:	4642      	mov	r2, r8
 800b40e:	189b      	adds	r3, r3, r2
 800b410:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b414:	464b      	mov	r3, r9
 800b416:	460a      	mov	r2, r1
 800b418:	eb42 0303 	adc.w	r3, r2, r3
 800b41c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	67bb      	str	r3, [r7, #120]	; 0x78
 800b42a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b42c:	f04f 0200 	mov.w	r2, #0
 800b430:	f04f 0300 	mov.w	r3, #0
 800b434:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b438:	4649      	mov	r1, r9
 800b43a:	008b      	lsls	r3, r1, #2
 800b43c:	4641      	mov	r1, r8
 800b43e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b442:	4641      	mov	r1, r8
 800b444:	008a      	lsls	r2, r1, #2
 800b446:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b44a:	f7f5 fc25 	bl	8000c98 <__aeabi_uldivmod>
 800b44e:	4602      	mov	r2, r0
 800b450:	460b      	mov	r3, r1
 800b452:	4b39      	ldr	r3, [pc, #228]	; (800b538 <UART_SetConfig+0x4e4>)
 800b454:	fba3 1302 	umull	r1, r3, r3, r2
 800b458:	095b      	lsrs	r3, r3, #5
 800b45a:	2164      	movs	r1, #100	; 0x64
 800b45c:	fb01 f303 	mul.w	r3, r1, r3
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	011b      	lsls	r3, r3, #4
 800b464:	3332      	adds	r3, #50	; 0x32
 800b466:	4a34      	ldr	r2, [pc, #208]	; (800b538 <UART_SetConfig+0x4e4>)
 800b468:	fba2 2303 	umull	r2, r3, r2, r3
 800b46c:	095b      	lsrs	r3, r3, #5
 800b46e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b472:	441c      	add	r4, r3
 800b474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b478:	2200      	movs	r2, #0
 800b47a:	673b      	str	r3, [r7, #112]	; 0x70
 800b47c:	677a      	str	r2, [r7, #116]	; 0x74
 800b47e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b482:	4642      	mov	r2, r8
 800b484:	464b      	mov	r3, r9
 800b486:	1891      	adds	r1, r2, r2
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	415b      	adcs	r3, r3
 800b48c:	60fb      	str	r3, [r7, #12]
 800b48e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b492:	4641      	mov	r1, r8
 800b494:	1851      	adds	r1, r2, r1
 800b496:	6039      	str	r1, [r7, #0]
 800b498:	4649      	mov	r1, r9
 800b49a:	414b      	adcs	r3, r1
 800b49c:	607b      	str	r3, [r7, #4]
 800b49e:	f04f 0200 	mov.w	r2, #0
 800b4a2:	f04f 0300 	mov.w	r3, #0
 800b4a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b4aa:	4659      	mov	r1, fp
 800b4ac:	00cb      	lsls	r3, r1, #3
 800b4ae:	4651      	mov	r1, sl
 800b4b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4b4:	4651      	mov	r1, sl
 800b4b6:	00ca      	lsls	r2, r1, #3
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	4603      	mov	r3, r0
 800b4be:	4642      	mov	r2, r8
 800b4c0:	189b      	adds	r3, r3, r2
 800b4c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4c4:	464b      	mov	r3, r9
 800b4c6:	460a      	mov	r2, r1
 800b4c8:	eb42 0303 	adc.w	r3, r2, r3
 800b4cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b4ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	663b      	str	r3, [r7, #96]	; 0x60
 800b4d8:	667a      	str	r2, [r7, #100]	; 0x64
 800b4da:	f04f 0200 	mov.w	r2, #0
 800b4de:	f04f 0300 	mov.w	r3, #0
 800b4e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b4e6:	4649      	mov	r1, r9
 800b4e8:	008b      	lsls	r3, r1, #2
 800b4ea:	4641      	mov	r1, r8
 800b4ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4f0:	4641      	mov	r1, r8
 800b4f2:	008a      	lsls	r2, r1, #2
 800b4f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b4f8:	f7f5 fbce 	bl	8000c98 <__aeabi_uldivmod>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	4b0d      	ldr	r3, [pc, #52]	; (800b538 <UART_SetConfig+0x4e4>)
 800b502:	fba3 1302 	umull	r1, r3, r3, r2
 800b506:	095b      	lsrs	r3, r3, #5
 800b508:	2164      	movs	r1, #100	; 0x64
 800b50a:	fb01 f303 	mul.w	r3, r1, r3
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	011b      	lsls	r3, r3, #4
 800b512:	3332      	adds	r3, #50	; 0x32
 800b514:	4a08      	ldr	r2, [pc, #32]	; (800b538 <UART_SetConfig+0x4e4>)
 800b516:	fba2 2303 	umull	r2, r3, r2, r3
 800b51a:	095b      	lsrs	r3, r3, #5
 800b51c:	f003 020f 	and.w	r2, r3, #15
 800b520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4422      	add	r2, r4
 800b528:	609a      	str	r2, [r3, #8]
}
 800b52a:	bf00      	nop
 800b52c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b530:	46bd      	mov	sp, r7
 800b532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b536:	bf00      	nop
 800b538:	51eb851f 	.word	0x51eb851f

0800b53c <__errno>:
 800b53c:	4b01      	ldr	r3, [pc, #4]	; (800b544 <__errno+0x8>)
 800b53e:	6818      	ldr	r0, [r3, #0]
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	2000022c 	.word	0x2000022c

0800b548 <__libc_init_array>:
 800b548:	b570      	push	{r4, r5, r6, lr}
 800b54a:	4d0d      	ldr	r5, [pc, #52]	; (800b580 <__libc_init_array+0x38>)
 800b54c:	4c0d      	ldr	r4, [pc, #52]	; (800b584 <__libc_init_array+0x3c>)
 800b54e:	1b64      	subs	r4, r4, r5
 800b550:	10a4      	asrs	r4, r4, #2
 800b552:	2600      	movs	r6, #0
 800b554:	42a6      	cmp	r6, r4
 800b556:	d109      	bne.n	800b56c <__libc_init_array+0x24>
 800b558:	4d0b      	ldr	r5, [pc, #44]	; (800b588 <__libc_init_array+0x40>)
 800b55a:	4c0c      	ldr	r4, [pc, #48]	; (800b58c <__libc_init_array+0x44>)
 800b55c:	f004 fddc 	bl	8010118 <_init>
 800b560:	1b64      	subs	r4, r4, r5
 800b562:	10a4      	asrs	r4, r4, #2
 800b564:	2600      	movs	r6, #0
 800b566:	42a6      	cmp	r6, r4
 800b568:	d105      	bne.n	800b576 <__libc_init_array+0x2e>
 800b56a:	bd70      	pop	{r4, r5, r6, pc}
 800b56c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b570:	4798      	blx	r3
 800b572:	3601      	adds	r6, #1
 800b574:	e7ee      	b.n	800b554 <__libc_init_array+0xc>
 800b576:	f855 3b04 	ldr.w	r3, [r5], #4
 800b57a:	4798      	blx	r3
 800b57c:	3601      	adds	r6, #1
 800b57e:	e7f2      	b.n	800b566 <__libc_init_array+0x1e>
 800b580:	0801060c 	.word	0x0801060c
 800b584:	0801060c 	.word	0x0801060c
 800b588:	0801060c 	.word	0x0801060c
 800b58c:	08010610 	.word	0x08010610

0800b590 <memcpy>:
 800b590:	440a      	add	r2, r1
 800b592:	4291      	cmp	r1, r2
 800b594:	f100 33ff 	add.w	r3, r0, #4294967295
 800b598:	d100      	bne.n	800b59c <memcpy+0xc>
 800b59a:	4770      	bx	lr
 800b59c:	b510      	push	{r4, lr}
 800b59e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5a6:	4291      	cmp	r1, r2
 800b5a8:	d1f9      	bne.n	800b59e <memcpy+0xe>
 800b5aa:	bd10      	pop	{r4, pc}

0800b5ac <memset>:
 800b5ac:	4402      	add	r2, r0
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d100      	bne.n	800b5b6 <memset+0xa>
 800b5b4:	4770      	bx	lr
 800b5b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b5ba:	e7f9      	b.n	800b5b0 <memset+0x4>

0800b5bc <__cvt>:
 800b5bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c0:	ec55 4b10 	vmov	r4, r5, d0
 800b5c4:	2d00      	cmp	r5, #0
 800b5c6:	460e      	mov	r6, r1
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	462b      	mov	r3, r5
 800b5cc:	bfbb      	ittet	lt
 800b5ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b5d2:	461d      	movlt	r5, r3
 800b5d4:	2300      	movge	r3, #0
 800b5d6:	232d      	movlt	r3, #45	; 0x2d
 800b5d8:	700b      	strb	r3, [r1, #0]
 800b5da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b5e0:	4691      	mov	r9, r2
 800b5e2:	f023 0820 	bic.w	r8, r3, #32
 800b5e6:	bfbc      	itt	lt
 800b5e8:	4622      	movlt	r2, r4
 800b5ea:	4614      	movlt	r4, r2
 800b5ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b5f0:	d005      	beq.n	800b5fe <__cvt+0x42>
 800b5f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b5f6:	d100      	bne.n	800b5fa <__cvt+0x3e>
 800b5f8:	3601      	adds	r6, #1
 800b5fa:	2102      	movs	r1, #2
 800b5fc:	e000      	b.n	800b600 <__cvt+0x44>
 800b5fe:	2103      	movs	r1, #3
 800b600:	ab03      	add	r3, sp, #12
 800b602:	9301      	str	r3, [sp, #4]
 800b604:	ab02      	add	r3, sp, #8
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	ec45 4b10 	vmov	d0, r4, r5
 800b60c:	4653      	mov	r3, sl
 800b60e:	4632      	mov	r2, r6
 800b610:	f001 fdae 	bl	800d170 <_dtoa_r>
 800b614:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b618:	4607      	mov	r7, r0
 800b61a:	d102      	bne.n	800b622 <__cvt+0x66>
 800b61c:	f019 0f01 	tst.w	r9, #1
 800b620:	d022      	beq.n	800b668 <__cvt+0xac>
 800b622:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b626:	eb07 0906 	add.w	r9, r7, r6
 800b62a:	d110      	bne.n	800b64e <__cvt+0x92>
 800b62c:	783b      	ldrb	r3, [r7, #0]
 800b62e:	2b30      	cmp	r3, #48	; 0x30
 800b630:	d10a      	bne.n	800b648 <__cvt+0x8c>
 800b632:	2200      	movs	r2, #0
 800b634:	2300      	movs	r3, #0
 800b636:	4620      	mov	r0, r4
 800b638:	4629      	mov	r1, r5
 800b63a:	f7f5 fa4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b63e:	b918      	cbnz	r0, 800b648 <__cvt+0x8c>
 800b640:	f1c6 0601 	rsb	r6, r6, #1
 800b644:	f8ca 6000 	str.w	r6, [sl]
 800b648:	f8da 3000 	ldr.w	r3, [sl]
 800b64c:	4499      	add	r9, r3
 800b64e:	2200      	movs	r2, #0
 800b650:	2300      	movs	r3, #0
 800b652:	4620      	mov	r0, r4
 800b654:	4629      	mov	r1, r5
 800b656:	f7f5 fa3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b65a:	b108      	cbz	r0, 800b660 <__cvt+0xa4>
 800b65c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b660:	2230      	movs	r2, #48	; 0x30
 800b662:	9b03      	ldr	r3, [sp, #12]
 800b664:	454b      	cmp	r3, r9
 800b666:	d307      	bcc.n	800b678 <__cvt+0xbc>
 800b668:	9b03      	ldr	r3, [sp, #12]
 800b66a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b66c:	1bdb      	subs	r3, r3, r7
 800b66e:	4638      	mov	r0, r7
 800b670:	6013      	str	r3, [r2, #0]
 800b672:	b004      	add	sp, #16
 800b674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b678:	1c59      	adds	r1, r3, #1
 800b67a:	9103      	str	r1, [sp, #12]
 800b67c:	701a      	strb	r2, [r3, #0]
 800b67e:	e7f0      	b.n	800b662 <__cvt+0xa6>

0800b680 <__exponent>:
 800b680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b682:	4603      	mov	r3, r0
 800b684:	2900      	cmp	r1, #0
 800b686:	bfb8      	it	lt
 800b688:	4249      	neglt	r1, r1
 800b68a:	f803 2b02 	strb.w	r2, [r3], #2
 800b68e:	bfb4      	ite	lt
 800b690:	222d      	movlt	r2, #45	; 0x2d
 800b692:	222b      	movge	r2, #43	; 0x2b
 800b694:	2909      	cmp	r1, #9
 800b696:	7042      	strb	r2, [r0, #1]
 800b698:	dd2a      	ble.n	800b6f0 <__exponent+0x70>
 800b69a:	f10d 0407 	add.w	r4, sp, #7
 800b69e:	46a4      	mov	ip, r4
 800b6a0:	270a      	movs	r7, #10
 800b6a2:	46a6      	mov	lr, r4
 800b6a4:	460a      	mov	r2, r1
 800b6a6:	fb91 f6f7 	sdiv	r6, r1, r7
 800b6aa:	fb07 1516 	mls	r5, r7, r6, r1
 800b6ae:	3530      	adds	r5, #48	; 0x30
 800b6b0:	2a63      	cmp	r2, #99	; 0x63
 800b6b2:	f104 34ff 	add.w	r4, r4, #4294967295
 800b6b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b6ba:	4631      	mov	r1, r6
 800b6bc:	dcf1      	bgt.n	800b6a2 <__exponent+0x22>
 800b6be:	3130      	adds	r1, #48	; 0x30
 800b6c0:	f1ae 0502 	sub.w	r5, lr, #2
 800b6c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b6c8:	1c44      	adds	r4, r0, #1
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	4561      	cmp	r1, ip
 800b6ce:	d30a      	bcc.n	800b6e6 <__exponent+0x66>
 800b6d0:	f10d 0209 	add.w	r2, sp, #9
 800b6d4:	eba2 020e 	sub.w	r2, r2, lr
 800b6d8:	4565      	cmp	r5, ip
 800b6da:	bf88      	it	hi
 800b6dc:	2200      	movhi	r2, #0
 800b6de:	4413      	add	r3, r2
 800b6e0:	1a18      	subs	r0, r3, r0
 800b6e2:	b003      	add	sp, #12
 800b6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b6ee:	e7ed      	b.n	800b6cc <__exponent+0x4c>
 800b6f0:	2330      	movs	r3, #48	; 0x30
 800b6f2:	3130      	adds	r1, #48	; 0x30
 800b6f4:	7083      	strb	r3, [r0, #2]
 800b6f6:	70c1      	strb	r1, [r0, #3]
 800b6f8:	1d03      	adds	r3, r0, #4
 800b6fa:	e7f1      	b.n	800b6e0 <__exponent+0x60>

0800b6fc <_printf_float>:
 800b6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b700:	ed2d 8b02 	vpush	{d8}
 800b704:	b08d      	sub	sp, #52	; 0x34
 800b706:	460c      	mov	r4, r1
 800b708:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b70c:	4616      	mov	r6, r2
 800b70e:	461f      	mov	r7, r3
 800b710:	4605      	mov	r5, r0
 800b712:	f002 fe8b 	bl	800e42c <_localeconv_r>
 800b716:	f8d0 a000 	ldr.w	sl, [r0]
 800b71a:	4650      	mov	r0, sl
 800b71c:	f7f4 fd60 	bl	80001e0 <strlen>
 800b720:	2300      	movs	r3, #0
 800b722:	930a      	str	r3, [sp, #40]	; 0x28
 800b724:	6823      	ldr	r3, [r4, #0]
 800b726:	9305      	str	r3, [sp, #20]
 800b728:	f8d8 3000 	ldr.w	r3, [r8]
 800b72c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b730:	3307      	adds	r3, #7
 800b732:	f023 0307 	bic.w	r3, r3, #7
 800b736:	f103 0208 	add.w	r2, r3, #8
 800b73a:	f8c8 2000 	str.w	r2, [r8]
 800b73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b742:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b746:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b74a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b74e:	9307      	str	r3, [sp, #28]
 800b750:	f8cd 8018 	str.w	r8, [sp, #24]
 800b754:	ee08 0a10 	vmov	s16, r0
 800b758:	4b9f      	ldr	r3, [pc, #636]	; (800b9d8 <_printf_float+0x2dc>)
 800b75a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b75e:	f04f 32ff 	mov.w	r2, #4294967295
 800b762:	f7f5 f9eb 	bl	8000b3c <__aeabi_dcmpun>
 800b766:	bb88      	cbnz	r0, 800b7cc <_printf_float+0xd0>
 800b768:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b76c:	4b9a      	ldr	r3, [pc, #616]	; (800b9d8 <_printf_float+0x2dc>)
 800b76e:	f04f 32ff 	mov.w	r2, #4294967295
 800b772:	f7f5 f9c5 	bl	8000b00 <__aeabi_dcmple>
 800b776:	bb48      	cbnz	r0, 800b7cc <_printf_float+0xd0>
 800b778:	2200      	movs	r2, #0
 800b77a:	2300      	movs	r3, #0
 800b77c:	4640      	mov	r0, r8
 800b77e:	4649      	mov	r1, r9
 800b780:	f7f5 f9b4 	bl	8000aec <__aeabi_dcmplt>
 800b784:	b110      	cbz	r0, 800b78c <_printf_float+0x90>
 800b786:	232d      	movs	r3, #45	; 0x2d
 800b788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b78c:	4b93      	ldr	r3, [pc, #588]	; (800b9dc <_printf_float+0x2e0>)
 800b78e:	4894      	ldr	r0, [pc, #592]	; (800b9e0 <_printf_float+0x2e4>)
 800b790:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b794:	bf94      	ite	ls
 800b796:	4698      	movls	r8, r3
 800b798:	4680      	movhi	r8, r0
 800b79a:	2303      	movs	r3, #3
 800b79c:	6123      	str	r3, [r4, #16]
 800b79e:	9b05      	ldr	r3, [sp, #20]
 800b7a0:	f023 0204 	bic.w	r2, r3, #4
 800b7a4:	6022      	str	r2, [r4, #0]
 800b7a6:	f04f 0900 	mov.w	r9, #0
 800b7aa:	9700      	str	r7, [sp, #0]
 800b7ac:	4633      	mov	r3, r6
 800b7ae:	aa0b      	add	r2, sp, #44	; 0x2c
 800b7b0:	4621      	mov	r1, r4
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	f000 f9d8 	bl	800bb68 <_printf_common>
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	f040 8090 	bne.w	800b8de <_printf_float+0x1e2>
 800b7be:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c2:	b00d      	add	sp, #52	; 0x34
 800b7c4:	ecbd 8b02 	vpop	{d8}
 800b7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7cc:	4642      	mov	r2, r8
 800b7ce:	464b      	mov	r3, r9
 800b7d0:	4640      	mov	r0, r8
 800b7d2:	4649      	mov	r1, r9
 800b7d4:	f7f5 f9b2 	bl	8000b3c <__aeabi_dcmpun>
 800b7d8:	b140      	cbz	r0, 800b7ec <_printf_float+0xf0>
 800b7da:	464b      	mov	r3, r9
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	bfbc      	itt	lt
 800b7e0:	232d      	movlt	r3, #45	; 0x2d
 800b7e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b7e6:	487f      	ldr	r0, [pc, #508]	; (800b9e4 <_printf_float+0x2e8>)
 800b7e8:	4b7f      	ldr	r3, [pc, #508]	; (800b9e8 <_printf_float+0x2ec>)
 800b7ea:	e7d1      	b.n	800b790 <_printf_float+0x94>
 800b7ec:	6863      	ldr	r3, [r4, #4]
 800b7ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b7f2:	9206      	str	r2, [sp, #24]
 800b7f4:	1c5a      	adds	r2, r3, #1
 800b7f6:	d13f      	bne.n	800b878 <_printf_float+0x17c>
 800b7f8:	2306      	movs	r3, #6
 800b7fa:	6063      	str	r3, [r4, #4]
 800b7fc:	9b05      	ldr	r3, [sp, #20]
 800b7fe:	6861      	ldr	r1, [r4, #4]
 800b800:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b804:	2300      	movs	r3, #0
 800b806:	9303      	str	r3, [sp, #12]
 800b808:	ab0a      	add	r3, sp, #40	; 0x28
 800b80a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b80e:	ab09      	add	r3, sp, #36	; 0x24
 800b810:	ec49 8b10 	vmov	d0, r8, r9
 800b814:	9300      	str	r3, [sp, #0]
 800b816:	6022      	str	r2, [r4, #0]
 800b818:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b81c:	4628      	mov	r0, r5
 800b81e:	f7ff fecd 	bl	800b5bc <__cvt>
 800b822:	9b06      	ldr	r3, [sp, #24]
 800b824:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b826:	2b47      	cmp	r3, #71	; 0x47
 800b828:	4680      	mov	r8, r0
 800b82a:	d108      	bne.n	800b83e <_printf_float+0x142>
 800b82c:	1cc8      	adds	r0, r1, #3
 800b82e:	db02      	blt.n	800b836 <_printf_float+0x13a>
 800b830:	6863      	ldr	r3, [r4, #4]
 800b832:	4299      	cmp	r1, r3
 800b834:	dd41      	ble.n	800b8ba <_printf_float+0x1be>
 800b836:	f1ab 0b02 	sub.w	fp, fp, #2
 800b83a:	fa5f fb8b 	uxtb.w	fp, fp
 800b83e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b842:	d820      	bhi.n	800b886 <_printf_float+0x18a>
 800b844:	3901      	subs	r1, #1
 800b846:	465a      	mov	r2, fp
 800b848:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b84c:	9109      	str	r1, [sp, #36]	; 0x24
 800b84e:	f7ff ff17 	bl	800b680 <__exponent>
 800b852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b854:	1813      	adds	r3, r2, r0
 800b856:	2a01      	cmp	r2, #1
 800b858:	4681      	mov	r9, r0
 800b85a:	6123      	str	r3, [r4, #16]
 800b85c:	dc02      	bgt.n	800b864 <_printf_float+0x168>
 800b85e:	6822      	ldr	r2, [r4, #0]
 800b860:	07d2      	lsls	r2, r2, #31
 800b862:	d501      	bpl.n	800b868 <_printf_float+0x16c>
 800b864:	3301      	adds	r3, #1
 800b866:	6123      	str	r3, [r4, #16]
 800b868:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d09c      	beq.n	800b7aa <_printf_float+0xae>
 800b870:	232d      	movs	r3, #45	; 0x2d
 800b872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b876:	e798      	b.n	800b7aa <_printf_float+0xae>
 800b878:	9a06      	ldr	r2, [sp, #24]
 800b87a:	2a47      	cmp	r2, #71	; 0x47
 800b87c:	d1be      	bne.n	800b7fc <_printf_float+0x100>
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d1bc      	bne.n	800b7fc <_printf_float+0x100>
 800b882:	2301      	movs	r3, #1
 800b884:	e7b9      	b.n	800b7fa <_printf_float+0xfe>
 800b886:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b88a:	d118      	bne.n	800b8be <_printf_float+0x1c2>
 800b88c:	2900      	cmp	r1, #0
 800b88e:	6863      	ldr	r3, [r4, #4]
 800b890:	dd0b      	ble.n	800b8aa <_printf_float+0x1ae>
 800b892:	6121      	str	r1, [r4, #16]
 800b894:	b913      	cbnz	r3, 800b89c <_printf_float+0x1a0>
 800b896:	6822      	ldr	r2, [r4, #0]
 800b898:	07d0      	lsls	r0, r2, #31
 800b89a:	d502      	bpl.n	800b8a2 <_printf_float+0x1a6>
 800b89c:	3301      	adds	r3, #1
 800b89e:	440b      	add	r3, r1
 800b8a0:	6123      	str	r3, [r4, #16]
 800b8a2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b8a4:	f04f 0900 	mov.w	r9, #0
 800b8a8:	e7de      	b.n	800b868 <_printf_float+0x16c>
 800b8aa:	b913      	cbnz	r3, 800b8b2 <_printf_float+0x1b6>
 800b8ac:	6822      	ldr	r2, [r4, #0]
 800b8ae:	07d2      	lsls	r2, r2, #31
 800b8b0:	d501      	bpl.n	800b8b6 <_printf_float+0x1ba>
 800b8b2:	3302      	adds	r3, #2
 800b8b4:	e7f4      	b.n	800b8a0 <_printf_float+0x1a4>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e7f2      	b.n	800b8a0 <_printf_float+0x1a4>
 800b8ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b8be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8c0:	4299      	cmp	r1, r3
 800b8c2:	db05      	blt.n	800b8d0 <_printf_float+0x1d4>
 800b8c4:	6823      	ldr	r3, [r4, #0]
 800b8c6:	6121      	str	r1, [r4, #16]
 800b8c8:	07d8      	lsls	r0, r3, #31
 800b8ca:	d5ea      	bpl.n	800b8a2 <_printf_float+0x1a6>
 800b8cc:	1c4b      	adds	r3, r1, #1
 800b8ce:	e7e7      	b.n	800b8a0 <_printf_float+0x1a4>
 800b8d0:	2900      	cmp	r1, #0
 800b8d2:	bfd4      	ite	le
 800b8d4:	f1c1 0202 	rsble	r2, r1, #2
 800b8d8:	2201      	movgt	r2, #1
 800b8da:	4413      	add	r3, r2
 800b8dc:	e7e0      	b.n	800b8a0 <_printf_float+0x1a4>
 800b8de:	6823      	ldr	r3, [r4, #0]
 800b8e0:	055a      	lsls	r2, r3, #21
 800b8e2:	d407      	bmi.n	800b8f4 <_printf_float+0x1f8>
 800b8e4:	6923      	ldr	r3, [r4, #16]
 800b8e6:	4642      	mov	r2, r8
 800b8e8:	4631      	mov	r1, r6
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	47b8      	blx	r7
 800b8ee:	3001      	adds	r0, #1
 800b8f0:	d12c      	bne.n	800b94c <_printf_float+0x250>
 800b8f2:	e764      	b.n	800b7be <_printf_float+0xc2>
 800b8f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b8f8:	f240 80e0 	bls.w	800babc <_printf_float+0x3c0>
 800b8fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b900:	2200      	movs	r2, #0
 800b902:	2300      	movs	r3, #0
 800b904:	f7f5 f8e8 	bl	8000ad8 <__aeabi_dcmpeq>
 800b908:	2800      	cmp	r0, #0
 800b90a:	d034      	beq.n	800b976 <_printf_float+0x27a>
 800b90c:	4a37      	ldr	r2, [pc, #220]	; (800b9ec <_printf_float+0x2f0>)
 800b90e:	2301      	movs	r3, #1
 800b910:	4631      	mov	r1, r6
 800b912:	4628      	mov	r0, r5
 800b914:	47b8      	blx	r7
 800b916:	3001      	adds	r0, #1
 800b918:	f43f af51 	beq.w	800b7be <_printf_float+0xc2>
 800b91c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b920:	429a      	cmp	r2, r3
 800b922:	db02      	blt.n	800b92a <_printf_float+0x22e>
 800b924:	6823      	ldr	r3, [r4, #0]
 800b926:	07d8      	lsls	r0, r3, #31
 800b928:	d510      	bpl.n	800b94c <_printf_float+0x250>
 800b92a:	ee18 3a10 	vmov	r3, s16
 800b92e:	4652      	mov	r2, sl
 800b930:	4631      	mov	r1, r6
 800b932:	4628      	mov	r0, r5
 800b934:	47b8      	blx	r7
 800b936:	3001      	adds	r0, #1
 800b938:	f43f af41 	beq.w	800b7be <_printf_float+0xc2>
 800b93c:	f04f 0800 	mov.w	r8, #0
 800b940:	f104 091a 	add.w	r9, r4, #26
 800b944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b946:	3b01      	subs	r3, #1
 800b948:	4543      	cmp	r3, r8
 800b94a:	dc09      	bgt.n	800b960 <_printf_float+0x264>
 800b94c:	6823      	ldr	r3, [r4, #0]
 800b94e:	079b      	lsls	r3, r3, #30
 800b950:	f100 8105 	bmi.w	800bb5e <_printf_float+0x462>
 800b954:	68e0      	ldr	r0, [r4, #12]
 800b956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b958:	4298      	cmp	r0, r3
 800b95a:	bfb8      	it	lt
 800b95c:	4618      	movlt	r0, r3
 800b95e:	e730      	b.n	800b7c2 <_printf_float+0xc6>
 800b960:	2301      	movs	r3, #1
 800b962:	464a      	mov	r2, r9
 800b964:	4631      	mov	r1, r6
 800b966:	4628      	mov	r0, r5
 800b968:	47b8      	blx	r7
 800b96a:	3001      	adds	r0, #1
 800b96c:	f43f af27 	beq.w	800b7be <_printf_float+0xc2>
 800b970:	f108 0801 	add.w	r8, r8, #1
 800b974:	e7e6      	b.n	800b944 <_printf_float+0x248>
 800b976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b978:	2b00      	cmp	r3, #0
 800b97a:	dc39      	bgt.n	800b9f0 <_printf_float+0x2f4>
 800b97c:	4a1b      	ldr	r2, [pc, #108]	; (800b9ec <_printf_float+0x2f0>)
 800b97e:	2301      	movs	r3, #1
 800b980:	4631      	mov	r1, r6
 800b982:	4628      	mov	r0, r5
 800b984:	47b8      	blx	r7
 800b986:	3001      	adds	r0, #1
 800b988:	f43f af19 	beq.w	800b7be <_printf_float+0xc2>
 800b98c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b990:	4313      	orrs	r3, r2
 800b992:	d102      	bne.n	800b99a <_printf_float+0x29e>
 800b994:	6823      	ldr	r3, [r4, #0]
 800b996:	07d9      	lsls	r1, r3, #31
 800b998:	d5d8      	bpl.n	800b94c <_printf_float+0x250>
 800b99a:	ee18 3a10 	vmov	r3, s16
 800b99e:	4652      	mov	r2, sl
 800b9a0:	4631      	mov	r1, r6
 800b9a2:	4628      	mov	r0, r5
 800b9a4:	47b8      	blx	r7
 800b9a6:	3001      	adds	r0, #1
 800b9a8:	f43f af09 	beq.w	800b7be <_printf_float+0xc2>
 800b9ac:	f04f 0900 	mov.w	r9, #0
 800b9b0:	f104 0a1a 	add.w	sl, r4, #26
 800b9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9b6:	425b      	negs	r3, r3
 800b9b8:	454b      	cmp	r3, r9
 800b9ba:	dc01      	bgt.n	800b9c0 <_printf_float+0x2c4>
 800b9bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9be:	e792      	b.n	800b8e6 <_printf_float+0x1ea>
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	4652      	mov	r2, sl
 800b9c4:	4631      	mov	r1, r6
 800b9c6:	4628      	mov	r0, r5
 800b9c8:	47b8      	blx	r7
 800b9ca:	3001      	adds	r0, #1
 800b9cc:	f43f aef7 	beq.w	800b7be <_printf_float+0xc2>
 800b9d0:	f109 0901 	add.w	r9, r9, #1
 800b9d4:	e7ee      	b.n	800b9b4 <_printf_float+0x2b8>
 800b9d6:	bf00      	nop
 800b9d8:	7fefffff 	.word	0x7fefffff
 800b9dc:	08010164 	.word	0x08010164
 800b9e0:	08010168 	.word	0x08010168
 800b9e4:	08010170 	.word	0x08010170
 800b9e8:	0801016c 	.word	0x0801016c
 800b9ec:	08010174 	.word	0x08010174
 800b9f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	bfa8      	it	ge
 800b9f8:	461a      	movge	r2, r3
 800b9fa:	2a00      	cmp	r2, #0
 800b9fc:	4691      	mov	r9, r2
 800b9fe:	dc37      	bgt.n	800ba70 <_printf_float+0x374>
 800ba00:	f04f 0b00 	mov.w	fp, #0
 800ba04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba08:	f104 021a 	add.w	r2, r4, #26
 800ba0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba0e:	9305      	str	r3, [sp, #20]
 800ba10:	eba3 0309 	sub.w	r3, r3, r9
 800ba14:	455b      	cmp	r3, fp
 800ba16:	dc33      	bgt.n	800ba80 <_printf_float+0x384>
 800ba18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	db3b      	blt.n	800ba98 <_printf_float+0x39c>
 800ba20:	6823      	ldr	r3, [r4, #0]
 800ba22:	07da      	lsls	r2, r3, #31
 800ba24:	d438      	bmi.n	800ba98 <_printf_float+0x39c>
 800ba26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba28:	9a05      	ldr	r2, [sp, #20]
 800ba2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba2c:	1a9a      	subs	r2, r3, r2
 800ba2e:	eba3 0901 	sub.w	r9, r3, r1
 800ba32:	4591      	cmp	r9, r2
 800ba34:	bfa8      	it	ge
 800ba36:	4691      	movge	r9, r2
 800ba38:	f1b9 0f00 	cmp.w	r9, #0
 800ba3c:	dc35      	bgt.n	800baaa <_printf_float+0x3ae>
 800ba3e:	f04f 0800 	mov.w	r8, #0
 800ba42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba46:	f104 0a1a 	add.w	sl, r4, #26
 800ba4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba4e:	1a9b      	subs	r3, r3, r2
 800ba50:	eba3 0309 	sub.w	r3, r3, r9
 800ba54:	4543      	cmp	r3, r8
 800ba56:	f77f af79 	ble.w	800b94c <_printf_float+0x250>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	4652      	mov	r2, sl
 800ba5e:	4631      	mov	r1, r6
 800ba60:	4628      	mov	r0, r5
 800ba62:	47b8      	blx	r7
 800ba64:	3001      	adds	r0, #1
 800ba66:	f43f aeaa 	beq.w	800b7be <_printf_float+0xc2>
 800ba6a:	f108 0801 	add.w	r8, r8, #1
 800ba6e:	e7ec      	b.n	800ba4a <_printf_float+0x34e>
 800ba70:	4613      	mov	r3, r2
 800ba72:	4631      	mov	r1, r6
 800ba74:	4642      	mov	r2, r8
 800ba76:	4628      	mov	r0, r5
 800ba78:	47b8      	blx	r7
 800ba7a:	3001      	adds	r0, #1
 800ba7c:	d1c0      	bne.n	800ba00 <_printf_float+0x304>
 800ba7e:	e69e      	b.n	800b7be <_printf_float+0xc2>
 800ba80:	2301      	movs	r3, #1
 800ba82:	4631      	mov	r1, r6
 800ba84:	4628      	mov	r0, r5
 800ba86:	9205      	str	r2, [sp, #20]
 800ba88:	47b8      	blx	r7
 800ba8a:	3001      	adds	r0, #1
 800ba8c:	f43f ae97 	beq.w	800b7be <_printf_float+0xc2>
 800ba90:	9a05      	ldr	r2, [sp, #20]
 800ba92:	f10b 0b01 	add.w	fp, fp, #1
 800ba96:	e7b9      	b.n	800ba0c <_printf_float+0x310>
 800ba98:	ee18 3a10 	vmov	r3, s16
 800ba9c:	4652      	mov	r2, sl
 800ba9e:	4631      	mov	r1, r6
 800baa0:	4628      	mov	r0, r5
 800baa2:	47b8      	blx	r7
 800baa4:	3001      	adds	r0, #1
 800baa6:	d1be      	bne.n	800ba26 <_printf_float+0x32a>
 800baa8:	e689      	b.n	800b7be <_printf_float+0xc2>
 800baaa:	9a05      	ldr	r2, [sp, #20]
 800baac:	464b      	mov	r3, r9
 800baae:	4442      	add	r2, r8
 800bab0:	4631      	mov	r1, r6
 800bab2:	4628      	mov	r0, r5
 800bab4:	47b8      	blx	r7
 800bab6:	3001      	adds	r0, #1
 800bab8:	d1c1      	bne.n	800ba3e <_printf_float+0x342>
 800baba:	e680      	b.n	800b7be <_printf_float+0xc2>
 800babc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800babe:	2a01      	cmp	r2, #1
 800bac0:	dc01      	bgt.n	800bac6 <_printf_float+0x3ca>
 800bac2:	07db      	lsls	r3, r3, #31
 800bac4:	d538      	bpl.n	800bb38 <_printf_float+0x43c>
 800bac6:	2301      	movs	r3, #1
 800bac8:	4642      	mov	r2, r8
 800baca:	4631      	mov	r1, r6
 800bacc:	4628      	mov	r0, r5
 800bace:	47b8      	blx	r7
 800bad0:	3001      	adds	r0, #1
 800bad2:	f43f ae74 	beq.w	800b7be <_printf_float+0xc2>
 800bad6:	ee18 3a10 	vmov	r3, s16
 800bada:	4652      	mov	r2, sl
 800badc:	4631      	mov	r1, r6
 800bade:	4628      	mov	r0, r5
 800bae0:	47b8      	blx	r7
 800bae2:	3001      	adds	r0, #1
 800bae4:	f43f ae6b 	beq.w	800b7be <_printf_float+0xc2>
 800bae8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800baec:	2200      	movs	r2, #0
 800baee:	2300      	movs	r3, #0
 800baf0:	f7f4 fff2 	bl	8000ad8 <__aeabi_dcmpeq>
 800baf4:	b9d8      	cbnz	r0, 800bb2e <_printf_float+0x432>
 800baf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baf8:	f108 0201 	add.w	r2, r8, #1
 800bafc:	3b01      	subs	r3, #1
 800bafe:	4631      	mov	r1, r6
 800bb00:	4628      	mov	r0, r5
 800bb02:	47b8      	blx	r7
 800bb04:	3001      	adds	r0, #1
 800bb06:	d10e      	bne.n	800bb26 <_printf_float+0x42a>
 800bb08:	e659      	b.n	800b7be <_printf_float+0xc2>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	4652      	mov	r2, sl
 800bb0e:	4631      	mov	r1, r6
 800bb10:	4628      	mov	r0, r5
 800bb12:	47b8      	blx	r7
 800bb14:	3001      	adds	r0, #1
 800bb16:	f43f ae52 	beq.w	800b7be <_printf_float+0xc2>
 800bb1a:	f108 0801 	add.w	r8, r8, #1
 800bb1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb20:	3b01      	subs	r3, #1
 800bb22:	4543      	cmp	r3, r8
 800bb24:	dcf1      	bgt.n	800bb0a <_printf_float+0x40e>
 800bb26:	464b      	mov	r3, r9
 800bb28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bb2c:	e6dc      	b.n	800b8e8 <_printf_float+0x1ec>
 800bb2e:	f04f 0800 	mov.w	r8, #0
 800bb32:	f104 0a1a 	add.w	sl, r4, #26
 800bb36:	e7f2      	b.n	800bb1e <_printf_float+0x422>
 800bb38:	2301      	movs	r3, #1
 800bb3a:	4642      	mov	r2, r8
 800bb3c:	e7df      	b.n	800bafe <_printf_float+0x402>
 800bb3e:	2301      	movs	r3, #1
 800bb40:	464a      	mov	r2, r9
 800bb42:	4631      	mov	r1, r6
 800bb44:	4628      	mov	r0, r5
 800bb46:	47b8      	blx	r7
 800bb48:	3001      	adds	r0, #1
 800bb4a:	f43f ae38 	beq.w	800b7be <_printf_float+0xc2>
 800bb4e:	f108 0801 	add.w	r8, r8, #1
 800bb52:	68e3      	ldr	r3, [r4, #12]
 800bb54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb56:	1a5b      	subs	r3, r3, r1
 800bb58:	4543      	cmp	r3, r8
 800bb5a:	dcf0      	bgt.n	800bb3e <_printf_float+0x442>
 800bb5c:	e6fa      	b.n	800b954 <_printf_float+0x258>
 800bb5e:	f04f 0800 	mov.w	r8, #0
 800bb62:	f104 0919 	add.w	r9, r4, #25
 800bb66:	e7f4      	b.n	800bb52 <_printf_float+0x456>

0800bb68 <_printf_common>:
 800bb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb6c:	4616      	mov	r6, r2
 800bb6e:	4699      	mov	r9, r3
 800bb70:	688a      	ldr	r2, [r1, #8]
 800bb72:	690b      	ldr	r3, [r1, #16]
 800bb74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	bfb8      	it	lt
 800bb7c:	4613      	movlt	r3, r2
 800bb7e:	6033      	str	r3, [r6, #0]
 800bb80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb84:	4607      	mov	r7, r0
 800bb86:	460c      	mov	r4, r1
 800bb88:	b10a      	cbz	r2, 800bb8e <_printf_common+0x26>
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	6033      	str	r3, [r6, #0]
 800bb8e:	6823      	ldr	r3, [r4, #0]
 800bb90:	0699      	lsls	r1, r3, #26
 800bb92:	bf42      	ittt	mi
 800bb94:	6833      	ldrmi	r3, [r6, #0]
 800bb96:	3302      	addmi	r3, #2
 800bb98:	6033      	strmi	r3, [r6, #0]
 800bb9a:	6825      	ldr	r5, [r4, #0]
 800bb9c:	f015 0506 	ands.w	r5, r5, #6
 800bba0:	d106      	bne.n	800bbb0 <_printf_common+0x48>
 800bba2:	f104 0a19 	add.w	sl, r4, #25
 800bba6:	68e3      	ldr	r3, [r4, #12]
 800bba8:	6832      	ldr	r2, [r6, #0]
 800bbaa:	1a9b      	subs	r3, r3, r2
 800bbac:	42ab      	cmp	r3, r5
 800bbae:	dc26      	bgt.n	800bbfe <_printf_common+0x96>
 800bbb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bbb4:	1e13      	subs	r3, r2, #0
 800bbb6:	6822      	ldr	r2, [r4, #0]
 800bbb8:	bf18      	it	ne
 800bbba:	2301      	movne	r3, #1
 800bbbc:	0692      	lsls	r2, r2, #26
 800bbbe:	d42b      	bmi.n	800bc18 <_printf_common+0xb0>
 800bbc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbc4:	4649      	mov	r1, r9
 800bbc6:	4638      	mov	r0, r7
 800bbc8:	47c0      	blx	r8
 800bbca:	3001      	adds	r0, #1
 800bbcc:	d01e      	beq.n	800bc0c <_printf_common+0xa4>
 800bbce:	6823      	ldr	r3, [r4, #0]
 800bbd0:	68e5      	ldr	r5, [r4, #12]
 800bbd2:	6832      	ldr	r2, [r6, #0]
 800bbd4:	f003 0306 	and.w	r3, r3, #6
 800bbd8:	2b04      	cmp	r3, #4
 800bbda:	bf08      	it	eq
 800bbdc:	1aad      	subeq	r5, r5, r2
 800bbde:	68a3      	ldr	r3, [r4, #8]
 800bbe0:	6922      	ldr	r2, [r4, #16]
 800bbe2:	bf0c      	ite	eq
 800bbe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbe8:	2500      	movne	r5, #0
 800bbea:	4293      	cmp	r3, r2
 800bbec:	bfc4      	itt	gt
 800bbee:	1a9b      	subgt	r3, r3, r2
 800bbf0:	18ed      	addgt	r5, r5, r3
 800bbf2:	2600      	movs	r6, #0
 800bbf4:	341a      	adds	r4, #26
 800bbf6:	42b5      	cmp	r5, r6
 800bbf8:	d11a      	bne.n	800bc30 <_printf_common+0xc8>
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	e008      	b.n	800bc10 <_printf_common+0xa8>
 800bbfe:	2301      	movs	r3, #1
 800bc00:	4652      	mov	r2, sl
 800bc02:	4649      	mov	r1, r9
 800bc04:	4638      	mov	r0, r7
 800bc06:	47c0      	blx	r8
 800bc08:	3001      	adds	r0, #1
 800bc0a:	d103      	bne.n	800bc14 <_printf_common+0xac>
 800bc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc14:	3501      	adds	r5, #1
 800bc16:	e7c6      	b.n	800bba6 <_printf_common+0x3e>
 800bc18:	18e1      	adds	r1, r4, r3
 800bc1a:	1c5a      	adds	r2, r3, #1
 800bc1c:	2030      	movs	r0, #48	; 0x30
 800bc1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc22:	4422      	add	r2, r4
 800bc24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc2c:	3302      	adds	r3, #2
 800bc2e:	e7c7      	b.n	800bbc0 <_printf_common+0x58>
 800bc30:	2301      	movs	r3, #1
 800bc32:	4622      	mov	r2, r4
 800bc34:	4649      	mov	r1, r9
 800bc36:	4638      	mov	r0, r7
 800bc38:	47c0      	blx	r8
 800bc3a:	3001      	adds	r0, #1
 800bc3c:	d0e6      	beq.n	800bc0c <_printf_common+0xa4>
 800bc3e:	3601      	adds	r6, #1
 800bc40:	e7d9      	b.n	800bbf6 <_printf_common+0x8e>
	...

0800bc44 <_printf_i>:
 800bc44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc48:	7e0f      	ldrb	r7, [r1, #24]
 800bc4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc4c:	2f78      	cmp	r7, #120	; 0x78
 800bc4e:	4691      	mov	r9, r2
 800bc50:	4680      	mov	r8, r0
 800bc52:	460c      	mov	r4, r1
 800bc54:	469a      	mov	sl, r3
 800bc56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc5a:	d807      	bhi.n	800bc6c <_printf_i+0x28>
 800bc5c:	2f62      	cmp	r7, #98	; 0x62
 800bc5e:	d80a      	bhi.n	800bc76 <_printf_i+0x32>
 800bc60:	2f00      	cmp	r7, #0
 800bc62:	f000 80d8 	beq.w	800be16 <_printf_i+0x1d2>
 800bc66:	2f58      	cmp	r7, #88	; 0x58
 800bc68:	f000 80a3 	beq.w	800bdb2 <_printf_i+0x16e>
 800bc6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc74:	e03a      	b.n	800bcec <_printf_i+0xa8>
 800bc76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc7a:	2b15      	cmp	r3, #21
 800bc7c:	d8f6      	bhi.n	800bc6c <_printf_i+0x28>
 800bc7e:	a101      	add	r1, pc, #4	; (adr r1, 800bc84 <_printf_i+0x40>)
 800bc80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc84:	0800bcdd 	.word	0x0800bcdd
 800bc88:	0800bcf1 	.word	0x0800bcf1
 800bc8c:	0800bc6d 	.word	0x0800bc6d
 800bc90:	0800bc6d 	.word	0x0800bc6d
 800bc94:	0800bc6d 	.word	0x0800bc6d
 800bc98:	0800bc6d 	.word	0x0800bc6d
 800bc9c:	0800bcf1 	.word	0x0800bcf1
 800bca0:	0800bc6d 	.word	0x0800bc6d
 800bca4:	0800bc6d 	.word	0x0800bc6d
 800bca8:	0800bc6d 	.word	0x0800bc6d
 800bcac:	0800bc6d 	.word	0x0800bc6d
 800bcb0:	0800bdfd 	.word	0x0800bdfd
 800bcb4:	0800bd21 	.word	0x0800bd21
 800bcb8:	0800bddf 	.word	0x0800bddf
 800bcbc:	0800bc6d 	.word	0x0800bc6d
 800bcc0:	0800bc6d 	.word	0x0800bc6d
 800bcc4:	0800be1f 	.word	0x0800be1f
 800bcc8:	0800bc6d 	.word	0x0800bc6d
 800bccc:	0800bd21 	.word	0x0800bd21
 800bcd0:	0800bc6d 	.word	0x0800bc6d
 800bcd4:	0800bc6d 	.word	0x0800bc6d
 800bcd8:	0800bde7 	.word	0x0800bde7
 800bcdc:	682b      	ldr	r3, [r5, #0]
 800bcde:	1d1a      	adds	r2, r3, #4
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	602a      	str	r2, [r5, #0]
 800bce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bcec:	2301      	movs	r3, #1
 800bcee:	e0a3      	b.n	800be38 <_printf_i+0x1f4>
 800bcf0:	6820      	ldr	r0, [r4, #0]
 800bcf2:	6829      	ldr	r1, [r5, #0]
 800bcf4:	0606      	lsls	r6, r0, #24
 800bcf6:	f101 0304 	add.w	r3, r1, #4
 800bcfa:	d50a      	bpl.n	800bd12 <_printf_i+0xce>
 800bcfc:	680e      	ldr	r6, [r1, #0]
 800bcfe:	602b      	str	r3, [r5, #0]
 800bd00:	2e00      	cmp	r6, #0
 800bd02:	da03      	bge.n	800bd0c <_printf_i+0xc8>
 800bd04:	232d      	movs	r3, #45	; 0x2d
 800bd06:	4276      	negs	r6, r6
 800bd08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd0c:	485e      	ldr	r0, [pc, #376]	; (800be88 <_printf_i+0x244>)
 800bd0e:	230a      	movs	r3, #10
 800bd10:	e019      	b.n	800bd46 <_printf_i+0x102>
 800bd12:	680e      	ldr	r6, [r1, #0]
 800bd14:	602b      	str	r3, [r5, #0]
 800bd16:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bd1a:	bf18      	it	ne
 800bd1c:	b236      	sxthne	r6, r6
 800bd1e:	e7ef      	b.n	800bd00 <_printf_i+0xbc>
 800bd20:	682b      	ldr	r3, [r5, #0]
 800bd22:	6820      	ldr	r0, [r4, #0]
 800bd24:	1d19      	adds	r1, r3, #4
 800bd26:	6029      	str	r1, [r5, #0]
 800bd28:	0601      	lsls	r1, r0, #24
 800bd2a:	d501      	bpl.n	800bd30 <_printf_i+0xec>
 800bd2c:	681e      	ldr	r6, [r3, #0]
 800bd2e:	e002      	b.n	800bd36 <_printf_i+0xf2>
 800bd30:	0646      	lsls	r6, r0, #25
 800bd32:	d5fb      	bpl.n	800bd2c <_printf_i+0xe8>
 800bd34:	881e      	ldrh	r6, [r3, #0]
 800bd36:	4854      	ldr	r0, [pc, #336]	; (800be88 <_printf_i+0x244>)
 800bd38:	2f6f      	cmp	r7, #111	; 0x6f
 800bd3a:	bf0c      	ite	eq
 800bd3c:	2308      	moveq	r3, #8
 800bd3e:	230a      	movne	r3, #10
 800bd40:	2100      	movs	r1, #0
 800bd42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd46:	6865      	ldr	r5, [r4, #4]
 800bd48:	60a5      	str	r5, [r4, #8]
 800bd4a:	2d00      	cmp	r5, #0
 800bd4c:	bfa2      	ittt	ge
 800bd4e:	6821      	ldrge	r1, [r4, #0]
 800bd50:	f021 0104 	bicge.w	r1, r1, #4
 800bd54:	6021      	strge	r1, [r4, #0]
 800bd56:	b90e      	cbnz	r6, 800bd5c <_printf_i+0x118>
 800bd58:	2d00      	cmp	r5, #0
 800bd5a:	d04d      	beq.n	800bdf8 <_printf_i+0x1b4>
 800bd5c:	4615      	mov	r5, r2
 800bd5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd62:	fb03 6711 	mls	r7, r3, r1, r6
 800bd66:	5dc7      	ldrb	r7, [r0, r7]
 800bd68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd6c:	4637      	mov	r7, r6
 800bd6e:	42bb      	cmp	r3, r7
 800bd70:	460e      	mov	r6, r1
 800bd72:	d9f4      	bls.n	800bd5e <_printf_i+0x11a>
 800bd74:	2b08      	cmp	r3, #8
 800bd76:	d10b      	bne.n	800bd90 <_printf_i+0x14c>
 800bd78:	6823      	ldr	r3, [r4, #0]
 800bd7a:	07de      	lsls	r6, r3, #31
 800bd7c:	d508      	bpl.n	800bd90 <_printf_i+0x14c>
 800bd7e:	6923      	ldr	r3, [r4, #16]
 800bd80:	6861      	ldr	r1, [r4, #4]
 800bd82:	4299      	cmp	r1, r3
 800bd84:	bfde      	ittt	le
 800bd86:	2330      	movle	r3, #48	; 0x30
 800bd88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd90:	1b52      	subs	r2, r2, r5
 800bd92:	6122      	str	r2, [r4, #16]
 800bd94:	f8cd a000 	str.w	sl, [sp]
 800bd98:	464b      	mov	r3, r9
 800bd9a:	aa03      	add	r2, sp, #12
 800bd9c:	4621      	mov	r1, r4
 800bd9e:	4640      	mov	r0, r8
 800bda0:	f7ff fee2 	bl	800bb68 <_printf_common>
 800bda4:	3001      	adds	r0, #1
 800bda6:	d14c      	bne.n	800be42 <_printf_i+0x1fe>
 800bda8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdac:	b004      	add	sp, #16
 800bdae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdb2:	4835      	ldr	r0, [pc, #212]	; (800be88 <_printf_i+0x244>)
 800bdb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bdb8:	6829      	ldr	r1, [r5, #0]
 800bdba:	6823      	ldr	r3, [r4, #0]
 800bdbc:	f851 6b04 	ldr.w	r6, [r1], #4
 800bdc0:	6029      	str	r1, [r5, #0]
 800bdc2:	061d      	lsls	r5, r3, #24
 800bdc4:	d514      	bpl.n	800bdf0 <_printf_i+0x1ac>
 800bdc6:	07df      	lsls	r7, r3, #31
 800bdc8:	bf44      	itt	mi
 800bdca:	f043 0320 	orrmi.w	r3, r3, #32
 800bdce:	6023      	strmi	r3, [r4, #0]
 800bdd0:	b91e      	cbnz	r6, 800bdda <_printf_i+0x196>
 800bdd2:	6823      	ldr	r3, [r4, #0]
 800bdd4:	f023 0320 	bic.w	r3, r3, #32
 800bdd8:	6023      	str	r3, [r4, #0]
 800bdda:	2310      	movs	r3, #16
 800bddc:	e7b0      	b.n	800bd40 <_printf_i+0xfc>
 800bdde:	6823      	ldr	r3, [r4, #0]
 800bde0:	f043 0320 	orr.w	r3, r3, #32
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	2378      	movs	r3, #120	; 0x78
 800bde8:	4828      	ldr	r0, [pc, #160]	; (800be8c <_printf_i+0x248>)
 800bdea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bdee:	e7e3      	b.n	800bdb8 <_printf_i+0x174>
 800bdf0:	0659      	lsls	r1, r3, #25
 800bdf2:	bf48      	it	mi
 800bdf4:	b2b6      	uxthmi	r6, r6
 800bdf6:	e7e6      	b.n	800bdc6 <_printf_i+0x182>
 800bdf8:	4615      	mov	r5, r2
 800bdfa:	e7bb      	b.n	800bd74 <_printf_i+0x130>
 800bdfc:	682b      	ldr	r3, [r5, #0]
 800bdfe:	6826      	ldr	r6, [r4, #0]
 800be00:	6961      	ldr	r1, [r4, #20]
 800be02:	1d18      	adds	r0, r3, #4
 800be04:	6028      	str	r0, [r5, #0]
 800be06:	0635      	lsls	r5, r6, #24
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	d501      	bpl.n	800be10 <_printf_i+0x1cc>
 800be0c:	6019      	str	r1, [r3, #0]
 800be0e:	e002      	b.n	800be16 <_printf_i+0x1d2>
 800be10:	0670      	lsls	r0, r6, #25
 800be12:	d5fb      	bpl.n	800be0c <_printf_i+0x1c8>
 800be14:	8019      	strh	r1, [r3, #0]
 800be16:	2300      	movs	r3, #0
 800be18:	6123      	str	r3, [r4, #16]
 800be1a:	4615      	mov	r5, r2
 800be1c:	e7ba      	b.n	800bd94 <_printf_i+0x150>
 800be1e:	682b      	ldr	r3, [r5, #0]
 800be20:	1d1a      	adds	r2, r3, #4
 800be22:	602a      	str	r2, [r5, #0]
 800be24:	681d      	ldr	r5, [r3, #0]
 800be26:	6862      	ldr	r2, [r4, #4]
 800be28:	2100      	movs	r1, #0
 800be2a:	4628      	mov	r0, r5
 800be2c:	f7f4 f9e0 	bl	80001f0 <memchr>
 800be30:	b108      	cbz	r0, 800be36 <_printf_i+0x1f2>
 800be32:	1b40      	subs	r0, r0, r5
 800be34:	6060      	str	r0, [r4, #4]
 800be36:	6863      	ldr	r3, [r4, #4]
 800be38:	6123      	str	r3, [r4, #16]
 800be3a:	2300      	movs	r3, #0
 800be3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be40:	e7a8      	b.n	800bd94 <_printf_i+0x150>
 800be42:	6923      	ldr	r3, [r4, #16]
 800be44:	462a      	mov	r2, r5
 800be46:	4649      	mov	r1, r9
 800be48:	4640      	mov	r0, r8
 800be4a:	47d0      	blx	sl
 800be4c:	3001      	adds	r0, #1
 800be4e:	d0ab      	beq.n	800bda8 <_printf_i+0x164>
 800be50:	6823      	ldr	r3, [r4, #0]
 800be52:	079b      	lsls	r3, r3, #30
 800be54:	d413      	bmi.n	800be7e <_printf_i+0x23a>
 800be56:	68e0      	ldr	r0, [r4, #12]
 800be58:	9b03      	ldr	r3, [sp, #12]
 800be5a:	4298      	cmp	r0, r3
 800be5c:	bfb8      	it	lt
 800be5e:	4618      	movlt	r0, r3
 800be60:	e7a4      	b.n	800bdac <_printf_i+0x168>
 800be62:	2301      	movs	r3, #1
 800be64:	4632      	mov	r2, r6
 800be66:	4649      	mov	r1, r9
 800be68:	4640      	mov	r0, r8
 800be6a:	47d0      	blx	sl
 800be6c:	3001      	adds	r0, #1
 800be6e:	d09b      	beq.n	800bda8 <_printf_i+0x164>
 800be70:	3501      	adds	r5, #1
 800be72:	68e3      	ldr	r3, [r4, #12]
 800be74:	9903      	ldr	r1, [sp, #12]
 800be76:	1a5b      	subs	r3, r3, r1
 800be78:	42ab      	cmp	r3, r5
 800be7a:	dcf2      	bgt.n	800be62 <_printf_i+0x21e>
 800be7c:	e7eb      	b.n	800be56 <_printf_i+0x212>
 800be7e:	2500      	movs	r5, #0
 800be80:	f104 0619 	add.w	r6, r4, #25
 800be84:	e7f5      	b.n	800be72 <_printf_i+0x22e>
 800be86:	bf00      	nop
 800be88:	08010176 	.word	0x08010176
 800be8c:	08010187 	.word	0x08010187

0800be90 <_scanf_float>:
 800be90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be94:	b087      	sub	sp, #28
 800be96:	4617      	mov	r7, r2
 800be98:	9303      	str	r3, [sp, #12]
 800be9a:	688b      	ldr	r3, [r1, #8]
 800be9c:	1e5a      	subs	r2, r3, #1
 800be9e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bea2:	bf83      	ittte	hi
 800bea4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bea8:	195b      	addhi	r3, r3, r5
 800beaa:	9302      	strhi	r3, [sp, #8]
 800beac:	2300      	movls	r3, #0
 800beae:	bf86      	itte	hi
 800beb0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800beb4:	608b      	strhi	r3, [r1, #8]
 800beb6:	9302      	strls	r3, [sp, #8]
 800beb8:	680b      	ldr	r3, [r1, #0]
 800beba:	468b      	mov	fp, r1
 800bebc:	2500      	movs	r5, #0
 800bebe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bec2:	f84b 3b1c 	str.w	r3, [fp], #28
 800bec6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800beca:	4680      	mov	r8, r0
 800becc:	460c      	mov	r4, r1
 800bece:	465e      	mov	r6, fp
 800bed0:	46aa      	mov	sl, r5
 800bed2:	46a9      	mov	r9, r5
 800bed4:	9501      	str	r5, [sp, #4]
 800bed6:	68a2      	ldr	r2, [r4, #8]
 800bed8:	b152      	cbz	r2, 800bef0 <_scanf_float+0x60>
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	2b4e      	cmp	r3, #78	; 0x4e
 800bee0:	d864      	bhi.n	800bfac <_scanf_float+0x11c>
 800bee2:	2b40      	cmp	r3, #64	; 0x40
 800bee4:	d83c      	bhi.n	800bf60 <_scanf_float+0xd0>
 800bee6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800beea:	b2c8      	uxtb	r0, r1
 800beec:	280e      	cmp	r0, #14
 800beee:	d93a      	bls.n	800bf66 <_scanf_float+0xd6>
 800bef0:	f1b9 0f00 	cmp.w	r9, #0
 800bef4:	d003      	beq.n	800befe <_scanf_float+0x6e>
 800bef6:	6823      	ldr	r3, [r4, #0]
 800bef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf02:	f1ba 0f01 	cmp.w	sl, #1
 800bf06:	f200 8113 	bhi.w	800c130 <_scanf_float+0x2a0>
 800bf0a:	455e      	cmp	r6, fp
 800bf0c:	f200 8105 	bhi.w	800c11a <_scanf_float+0x28a>
 800bf10:	2501      	movs	r5, #1
 800bf12:	4628      	mov	r0, r5
 800bf14:	b007      	add	sp, #28
 800bf16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf1a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800bf1e:	2a0d      	cmp	r2, #13
 800bf20:	d8e6      	bhi.n	800bef0 <_scanf_float+0x60>
 800bf22:	a101      	add	r1, pc, #4	; (adr r1, 800bf28 <_scanf_float+0x98>)
 800bf24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bf28:	0800c067 	.word	0x0800c067
 800bf2c:	0800bef1 	.word	0x0800bef1
 800bf30:	0800bef1 	.word	0x0800bef1
 800bf34:	0800bef1 	.word	0x0800bef1
 800bf38:	0800c0c7 	.word	0x0800c0c7
 800bf3c:	0800c09f 	.word	0x0800c09f
 800bf40:	0800bef1 	.word	0x0800bef1
 800bf44:	0800bef1 	.word	0x0800bef1
 800bf48:	0800c075 	.word	0x0800c075
 800bf4c:	0800bef1 	.word	0x0800bef1
 800bf50:	0800bef1 	.word	0x0800bef1
 800bf54:	0800bef1 	.word	0x0800bef1
 800bf58:	0800bef1 	.word	0x0800bef1
 800bf5c:	0800c02d 	.word	0x0800c02d
 800bf60:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bf64:	e7db      	b.n	800bf1e <_scanf_float+0x8e>
 800bf66:	290e      	cmp	r1, #14
 800bf68:	d8c2      	bhi.n	800bef0 <_scanf_float+0x60>
 800bf6a:	a001      	add	r0, pc, #4	; (adr r0, 800bf70 <_scanf_float+0xe0>)
 800bf6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bf70:	0800c01f 	.word	0x0800c01f
 800bf74:	0800bef1 	.word	0x0800bef1
 800bf78:	0800c01f 	.word	0x0800c01f
 800bf7c:	0800c0b3 	.word	0x0800c0b3
 800bf80:	0800bef1 	.word	0x0800bef1
 800bf84:	0800bfcd 	.word	0x0800bfcd
 800bf88:	0800c009 	.word	0x0800c009
 800bf8c:	0800c009 	.word	0x0800c009
 800bf90:	0800c009 	.word	0x0800c009
 800bf94:	0800c009 	.word	0x0800c009
 800bf98:	0800c009 	.word	0x0800c009
 800bf9c:	0800c009 	.word	0x0800c009
 800bfa0:	0800c009 	.word	0x0800c009
 800bfa4:	0800c009 	.word	0x0800c009
 800bfa8:	0800c009 	.word	0x0800c009
 800bfac:	2b6e      	cmp	r3, #110	; 0x6e
 800bfae:	d809      	bhi.n	800bfc4 <_scanf_float+0x134>
 800bfb0:	2b60      	cmp	r3, #96	; 0x60
 800bfb2:	d8b2      	bhi.n	800bf1a <_scanf_float+0x8a>
 800bfb4:	2b54      	cmp	r3, #84	; 0x54
 800bfb6:	d077      	beq.n	800c0a8 <_scanf_float+0x218>
 800bfb8:	2b59      	cmp	r3, #89	; 0x59
 800bfba:	d199      	bne.n	800bef0 <_scanf_float+0x60>
 800bfbc:	2d07      	cmp	r5, #7
 800bfbe:	d197      	bne.n	800bef0 <_scanf_float+0x60>
 800bfc0:	2508      	movs	r5, #8
 800bfc2:	e029      	b.n	800c018 <_scanf_float+0x188>
 800bfc4:	2b74      	cmp	r3, #116	; 0x74
 800bfc6:	d06f      	beq.n	800c0a8 <_scanf_float+0x218>
 800bfc8:	2b79      	cmp	r3, #121	; 0x79
 800bfca:	e7f6      	b.n	800bfba <_scanf_float+0x12a>
 800bfcc:	6821      	ldr	r1, [r4, #0]
 800bfce:	05c8      	lsls	r0, r1, #23
 800bfd0:	d51a      	bpl.n	800c008 <_scanf_float+0x178>
 800bfd2:	9b02      	ldr	r3, [sp, #8]
 800bfd4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bfd8:	6021      	str	r1, [r4, #0]
 800bfda:	f109 0901 	add.w	r9, r9, #1
 800bfde:	b11b      	cbz	r3, 800bfe8 <_scanf_float+0x158>
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	3201      	adds	r2, #1
 800bfe4:	9302      	str	r3, [sp, #8]
 800bfe6:	60a2      	str	r2, [r4, #8]
 800bfe8:	68a3      	ldr	r3, [r4, #8]
 800bfea:	3b01      	subs	r3, #1
 800bfec:	60a3      	str	r3, [r4, #8]
 800bfee:	6923      	ldr	r3, [r4, #16]
 800bff0:	3301      	adds	r3, #1
 800bff2:	6123      	str	r3, [r4, #16]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	3b01      	subs	r3, #1
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	607b      	str	r3, [r7, #4]
 800bffc:	f340 8084 	ble.w	800c108 <_scanf_float+0x278>
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	3301      	adds	r3, #1
 800c004:	603b      	str	r3, [r7, #0]
 800c006:	e766      	b.n	800bed6 <_scanf_float+0x46>
 800c008:	eb1a 0f05 	cmn.w	sl, r5
 800c00c:	f47f af70 	bne.w	800bef0 <_scanf_float+0x60>
 800c010:	6822      	ldr	r2, [r4, #0]
 800c012:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c016:	6022      	str	r2, [r4, #0]
 800c018:	f806 3b01 	strb.w	r3, [r6], #1
 800c01c:	e7e4      	b.n	800bfe8 <_scanf_float+0x158>
 800c01e:	6822      	ldr	r2, [r4, #0]
 800c020:	0610      	lsls	r0, r2, #24
 800c022:	f57f af65 	bpl.w	800bef0 <_scanf_float+0x60>
 800c026:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c02a:	e7f4      	b.n	800c016 <_scanf_float+0x186>
 800c02c:	f1ba 0f00 	cmp.w	sl, #0
 800c030:	d10e      	bne.n	800c050 <_scanf_float+0x1c0>
 800c032:	f1b9 0f00 	cmp.w	r9, #0
 800c036:	d10e      	bne.n	800c056 <_scanf_float+0x1c6>
 800c038:	6822      	ldr	r2, [r4, #0]
 800c03a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c03e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c042:	d108      	bne.n	800c056 <_scanf_float+0x1c6>
 800c044:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c048:	6022      	str	r2, [r4, #0]
 800c04a:	f04f 0a01 	mov.w	sl, #1
 800c04e:	e7e3      	b.n	800c018 <_scanf_float+0x188>
 800c050:	f1ba 0f02 	cmp.w	sl, #2
 800c054:	d055      	beq.n	800c102 <_scanf_float+0x272>
 800c056:	2d01      	cmp	r5, #1
 800c058:	d002      	beq.n	800c060 <_scanf_float+0x1d0>
 800c05a:	2d04      	cmp	r5, #4
 800c05c:	f47f af48 	bne.w	800bef0 <_scanf_float+0x60>
 800c060:	3501      	adds	r5, #1
 800c062:	b2ed      	uxtb	r5, r5
 800c064:	e7d8      	b.n	800c018 <_scanf_float+0x188>
 800c066:	f1ba 0f01 	cmp.w	sl, #1
 800c06a:	f47f af41 	bne.w	800bef0 <_scanf_float+0x60>
 800c06e:	f04f 0a02 	mov.w	sl, #2
 800c072:	e7d1      	b.n	800c018 <_scanf_float+0x188>
 800c074:	b97d      	cbnz	r5, 800c096 <_scanf_float+0x206>
 800c076:	f1b9 0f00 	cmp.w	r9, #0
 800c07a:	f47f af3c 	bne.w	800bef6 <_scanf_float+0x66>
 800c07e:	6822      	ldr	r2, [r4, #0]
 800c080:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c084:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c088:	f47f af39 	bne.w	800befe <_scanf_float+0x6e>
 800c08c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c090:	6022      	str	r2, [r4, #0]
 800c092:	2501      	movs	r5, #1
 800c094:	e7c0      	b.n	800c018 <_scanf_float+0x188>
 800c096:	2d03      	cmp	r5, #3
 800c098:	d0e2      	beq.n	800c060 <_scanf_float+0x1d0>
 800c09a:	2d05      	cmp	r5, #5
 800c09c:	e7de      	b.n	800c05c <_scanf_float+0x1cc>
 800c09e:	2d02      	cmp	r5, #2
 800c0a0:	f47f af26 	bne.w	800bef0 <_scanf_float+0x60>
 800c0a4:	2503      	movs	r5, #3
 800c0a6:	e7b7      	b.n	800c018 <_scanf_float+0x188>
 800c0a8:	2d06      	cmp	r5, #6
 800c0aa:	f47f af21 	bne.w	800bef0 <_scanf_float+0x60>
 800c0ae:	2507      	movs	r5, #7
 800c0b0:	e7b2      	b.n	800c018 <_scanf_float+0x188>
 800c0b2:	6822      	ldr	r2, [r4, #0]
 800c0b4:	0591      	lsls	r1, r2, #22
 800c0b6:	f57f af1b 	bpl.w	800bef0 <_scanf_float+0x60>
 800c0ba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c0be:	6022      	str	r2, [r4, #0]
 800c0c0:	f8cd 9004 	str.w	r9, [sp, #4]
 800c0c4:	e7a8      	b.n	800c018 <_scanf_float+0x188>
 800c0c6:	6822      	ldr	r2, [r4, #0]
 800c0c8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c0cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c0d0:	d006      	beq.n	800c0e0 <_scanf_float+0x250>
 800c0d2:	0550      	lsls	r0, r2, #21
 800c0d4:	f57f af0c 	bpl.w	800bef0 <_scanf_float+0x60>
 800c0d8:	f1b9 0f00 	cmp.w	r9, #0
 800c0dc:	f43f af0f 	beq.w	800befe <_scanf_float+0x6e>
 800c0e0:	0591      	lsls	r1, r2, #22
 800c0e2:	bf58      	it	pl
 800c0e4:	9901      	ldrpl	r1, [sp, #4]
 800c0e6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c0ea:	bf58      	it	pl
 800c0ec:	eba9 0101 	subpl.w	r1, r9, r1
 800c0f0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c0f4:	bf58      	it	pl
 800c0f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c0fa:	6022      	str	r2, [r4, #0]
 800c0fc:	f04f 0900 	mov.w	r9, #0
 800c100:	e78a      	b.n	800c018 <_scanf_float+0x188>
 800c102:	f04f 0a03 	mov.w	sl, #3
 800c106:	e787      	b.n	800c018 <_scanf_float+0x188>
 800c108:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c10c:	4639      	mov	r1, r7
 800c10e:	4640      	mov	r0, r8
 800c110:	4798      	blx	r3
 800c112:	2800      	cmp	r0, #0
 800c114:	f43f aedf 	beq.w	800bed6 <_scanf_float+0x46>
 800c118:	e6ea      	b.n	800bef0 <_scanf_float+0x60>
 800c11a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c11e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c122:	463a      	mov	r2, r7
 800c124:	4640      	mov	r0, r8
 800c126:	4798      	blx	r3
 800c128:	6923      	ldr	r3, [r4, #16]
 800c12a:	3b01      	subs	r3, #1
 800c12c:	6123      	str	r3, [r4, #16]
 800c12e:	e6ec      	b.n	800bf0a <_scanf_float+0x7a>
 800c130:	1e6b      	subs	r3, r5, #1
 800c132:	2b06      	cmp	r3, #6
 800c134:	d825      	bhi.n	800c182 <_scanf_float+0x2f2>
 800c136:	2d02      	cmp	r5, #2
 800c138:	d836      	bhi.n	800c1a8 <_scanf_float+0x318>
 800c13a:	455e      	cmp	r6, fp
 800c13c:	f67f aee8 	bls.w	800bf10 <_scanf_float+0x80>
 800c140:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c144:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c148:	463a      	mov	r2, r7
 800c14a:	4640      	mov	r0, r8
 800c14c:	4798      	blx	r3
 800c14e:	6923      	ldr	r3, [r4, #16]
 800c150:	3b01      	subs	r3, #1
 800c152:	6123      	str	r3, [r4, #16]
 800c154:	e7f1      	b.n	800c13a <_scanf_float+0x2aa>
 800c156:	9802      	ldr	r0, [sp, #8]
 800c158:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c15c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c160:	9002      	str	r0, [sp, #8]
 800c162:	463a      	mov	r2, r7
 800c164:	4640      	mov	r0, r8
 800c166:	4798      	blx	r3
 800c168:	6923      	ldr	r3, [r4, #16]
 800c16a:	3b01      	subs	r3, #1
 800c16c:	6123      	str	r3, [r4, #16]
 800c16e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c172:	fa5f fa8a 	uxtb.w	sl, sl
 800c176:	f1ba 0f02 	cmp.w	sl, #2
 800c17a:	d1ec      	bne.n	800c156 <_scanf_float+0x2c6>
 800c17c:	3d03      	subs	r5, #3
 800c17e:	b2ed      	uxtb	r5, r5
 800c180:	1b76      	subs	r6, r6, r5
 800c182:	6823      	ldr	r3, [r4, #0]
 800c184:	05da      	lsls	r2, r3, #23
 800c186:	d52f      	bpl.n	800c1e8 <_scanf_float+0x358>
 800c188:	055b      	lsls	r3, r3, #21
 800c18a:	d510      	bpl.n	800c1ae <_scanf_float+0x31e>
 800c18c:	455e      	cmp	r6, fp
 800c18e:	f67f aebf 	bls.w	800bf10 <_scanf_float+0x80>
 800c192:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c196:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c19a:	463a      	mov	r2, r7
 800c19c:	4640      	mov	r0, r8
 800c19e:	4798      	blx	r3
 800c1a0:	6923      	ldr	r3, [r4, #16]
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	6123      	str	r3, [r4, #16]
 800c1a6:	e7f1      	b.n	800c18c <_scanf_float+0x2fc>
 800c1a8:	46aa      	mov	sl, r5
 800c1aa:	9602      	str	r6, [sp, #8]
 800c1ac:	e7df      	b.n	800c16e <_scanf_float+0x2de>
 800c1ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c1b2:	6923      	ldr	r3, [r4, #16]
 800c1b4:	2965      	cmp	r1, #101	; 0x65
 800c1b6:	f103 33ff 	add.w	r3, r3, #4294967295
 800c1ba:	f106 35ff 	add.w	r5, r6, #4294967295
 800c1be:	6123      	str	r3, [r4, #16]
 800c1c0:	d00c      	beq.n	800c1dc <_scanf_float+0x34c>
 800c1c2:	2945      	cmp	r1, #69	; 0x45
 800c1c4:	d00a      	beq.n	800c1dc <_scanf_float+0x34c>
 800c1c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c1ca:	463a      	mov	r2, r7
 800c1cc:	4640      	mov	r0, r8
 800c1ce:	4798      	blx	r3
 800c1d0:	6923      	ldr	r3, [r4, #16]
 800c1d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	1eb5      	subs	r5, r6, #2
 800c1da:	6123      	str	r3, [r4, #16]
 800c1dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c1e0:	463a      	mov	r2, r7
 800c1e2:	4640      	mov	r0, r8
 800c1e4:	4798      	blx	r3
 800c1e6:	462e      	mov	r6, r5
 800c1e8:	6825      	ldr	r5, [r4, #0]
 800c1ea:	f015 0510 	ands.w	r5, r5, #16
 800c1ee:	d159      	bne.n	800c2a4 <_scanf_float+0x414>
 800c1f0:	7035      	strb	r5, [r6, #0]
 800c1f2:	6823      	ldr	r3, [r4, #0]
 800c1f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c1f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1fc:	d11b      	bne.n	800c236 <_scanf_float+0x3a6>
 800c1fe:	9b01      	ldr	r3, [sp, #4]
 800c200:	454b      	cmp	r3, r9
 800c202:	eba3 0209 	sub.w	r2, r3, r9
 800c206:	d123      	bne.n	800c250 <_scanf_float+0x3c0>
 800c208:	2200      	movs	r2, #0
 800c20a:	4659      	mov	r1, fp
 800c20c:	4640      	mov	r0, r8
 800c20e:	f000 fe99 	bl	800cf44 <_strtod_r>
 800c212:	6822      	ldr	r2, [r4, #0]
 800c214:	9b03      	ldr	r3, [sp, #12]
 800c216:	f012 0f02 	tst.w	r2, #2
 800c21a:	ec57 6b10 	vmov	r6, r7, d0
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	d021      	beq.n	800c266 <_scanf_float+0x3d6>
 800c222:	9903      	ldr	r1, [sp, #12]
 800c224:	1d1a      	adds	r2, r3, #4
 800c226:	600a      	str	r2, [r1, #0]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	e9c3 6700 	strd	r6, r7, [r3]
 800c22e:	68e3      	ldr	r3, [r4, #12]
 800c230:	3301      	adds	r3, #1
 800c232:	60e3      	str	r3, [r4, #12]
 800c234:	e66d      	b.n	800bf12 <_scanf_float+0x82>
 800c236:	9b04      	ldr	r3, [sp, #16]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d0e5      	beq.n	800c208 <_scanf_float+0x378>
 800c23c:	9905      	ldr	r1, [sp, #20]
 800c23e:	230a      	movs	r3, #10
 800c240:	462a      	mov	r2, r5
 800c242:	3101      	adds	r1, #1
 800c244:	4640      	mov	r0, r8
 800c246:	f000 ff05 	bl	800d054 <_strtol_r>
 800c24a:	9b04      	ldr	r3, [sp, #16]
 800c24c:	9e05      	ldr	r6, [sp, #20]
 800c24e:	1ac2      	subs	r2, r0, r3
 800c250:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c254:	429e      	cmp	r6, r3
 800c256:	bf28      	it	cs
 800c258:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c25c:	4912      	ldr	r1, [pc, #72]	; (800c2a8 <_scanf_float+0x418>)
 800c25e:	4630      	mov	r0, r6
 800c260:	f000 f82c 	bl	800c2bc <siprintf>
 800c264:	e7d0      	b.n	800c208 <_scanf_float+0x378>
 800c266:	9903      	ldr	r1, [sp, #12]
 800c268:	f012 0f04 	tst.w	r2, #4
 800c26c:	f103 0204 	add.w	r2, r3, #4
 800c270:	600a      	str	r2, [r1, #0]
 800c272:	d1d9      	bne.n	800c228 <_scanf_float+0x398>
 800c274:	f8d3 8000 	ldr.w	r8, [r3]
 800c278:	ee10 2a10 	vmov	r2, s0
 800c27c:	ee10 0a10 	vmov	r0, s0
 800c280:	463b      	mov	r3, r7
 800c282:	4639      	mov	r1, r7
 800c284:	f7f4 fc5a 	bl	8000b3c <__aeabi_dcmpun>
 800c288:	b128      	cbz	r0, 800c296 <_scanf_float+0x406>
 800c28a:	4808      	ldr	r0, [pc, #32]	; (800c2ac <_scanf_float+0x41c>)
 800c28c:	f000 f810 	bl	800c2b0 <nanf>
 800c290:	ed88 0a00 	vstr	s0, [r8]
 800c294:	e7cb      	b.n	800c22e <_scanf_float+0x39e>
 800c296:	4630      	mov	r0, r6
 800c298:	4639      	mov	r1, r7
 800c29a:	f7f4 fcad 	bl	8000bf8 <__aeabi_d2f>
 800c29e:	f8c8 0000 	str.w	r0, [r8]
 800c2a2:	e7c4      	b.n	800c22e <_scanf_float+0x39e>
 800c2a4:	2500      	movs	r5, #0
 800c2a6:	e634      	b.n	800bf12 <_scanf_float+0x82>
 800c2a8:	08010198 	.word	0x08010198
 800c2ac:	080105a0 	.word	0x080105a0

0800c2b0 <nanf>:
 800c2b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c2b8 <nanf+0x8>
 800c2b4:	4770      	bx	lr
 800c2b6:	bf00      	nop
 800c2b8:	7fc00000 	.word	0x7fc00000

0800c2bc <siprintf>:
 800c2bc:	b40e      	push	{r1, r2, r3}
 800c2be:	b500      	push	{lr}
 800c2c0:	b09c      	sub	sp, #112	; 0x70
 800c2c2:	ab1d      	add	r3, sp, #116	; 0x74
 800c2c4:	9002      	str	r0, [sp, #8]
 800c2c6:	9006      	str	r0, [sp, #24]
 800c2c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c2cc:	4809      	ldr	r0, [pc, #36]	; (800c2f4 <siprintf+0x38>)
 800c2ce:	9107      	str	r1, [sp, #28]
 800c2d0:	9104      	str	r1, [sp, #16]
 800c2d2:	4909      	ldr	r1, [pc, #36]	; (800c2f8 <siprintf+0x3c>)
 800c2d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2d8:	9105      	str	r1, [sp, #20]
 800c2da:	6800      	ldr	r0, [r0, #0]
 800c2dc:	9301      	str	r3, [sp, #4]
 800c2de:	a902      	add	r1, sp, #8
 800c2e0:	f002 fed6 	bl	800f090 <_svfiprintf_r>
 800c2e4:	9b02      	ldr	r3, [sp, #8]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	701a      	strb	r2, [r3, #0]
 800c2ea:	b01c      	add	sp, #112	; 0x70
 800c2ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2f0:	b003      	add	sp, #12
 800c2f2:	4770      	bx	lr
 800c2f4:	2000022c 	.word	0x2000022c
 800c2f8:	ffff0208 	.word	0xffff0208

0800c2fc <sulp>:
 800c2fc:	b570      	push	{r4, r5, r6, lr}
 800c2fe:	4604      	mov	r4, r0
 800c300:	460d      	mov	r5, r1
 800c302:	ec45 4b10 	vmov	d0, r4, r5
 800c306:	4616      	mov	r6, r2
 800c308:	f002 fc20 	bl	800eb4c <__ulp>
 800c30c:	ec51 0b10 	vmov	r0, r1, d0
 800c310:	b17e      	cbz	r6, 800c332 <sulp+0x36>
 800c312:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c316:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	dd09      	ble.n	800c332 <sulp+0x36>
 800c31e:	051b      	lsls	r3, r3, #20
 800c320:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c324:	2400      	movs	r4, #0
 800c326:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c32a:	4622      	mov	r2, r4
 800c32c:	462b      	mov	r3, r5
 800c32e:	f7f4 f96b 	bl	8000608 <__aeabi_dmul>
 800c332:	bd70      	pop	{r4, r5, r6, pc}
 800c334:	0000      	movs	r0, r0
	...

0800c338 <_strtod_l>:
 800c338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c33c:	ed2d 8b02 	vpush	{d8}
 800c340:	b09d      	sub	sp, #116	; 0x74
 800c342:	461f      	mov	r7, r3
 800c344:	2300      	movs	r3, #0
 800c346:	9318      	str	r3, [sp, #96]	; 0x60
 800c348:	4ba2      	ldr	r3, [pc, #648]	; (800c5d4 <_strtod_l+0x29c>)
 800c34a:	9213      	str	r2, [sp, #76]	; 0x4c
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	9305      	str	r3, [sp, #20]
 800c350:	4604      	mov	r4, r0
 800c352:	4618      	mov	r0, r3
 800c354:	4688      	mov	r8, r1
 800c356:	f7f3 ff43 	bl	80001e0 <strlen>
 800c35a:	f04f 0a00 	mov.w	sl, #0
 800c35e:	4605      	mov	r5, r0
 800c360:	f04f 0b00 	mov.w	fp, #0
 800c364:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c36a:	781a      	ldrb	r2, [r3, #0]
 800c36c:	2a2b      	cmp	r2, #43	; 0x2b
 800c36e:	d04e      	beq.n	800c40e <_strtod_l+0xd6>
 800c370:	d83b      	bhi.n	800c3ea <_strtod_l+0xb2>
 800c372:	2a0d      	cmp	r2, #13
 800c374:	d834      	bhi.n	800c3e0 <_strtod_l+0xa8>
 800c376:	2a08      	cmp	r2, #8
 800c378:	d834      	bhi.n	800c3e4 <_strtod_l+0xac>
 800c37a:	2a00      	cmp	r2, #0
 800c37c:	d03e      	beq.n	800c3fc <_strtod_l+0xc4>
 800c37e:	2300      	movs	r3, #0
 800c380:	930a      	str	r3, [sp, #40]	; 0x28
 800c382:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c384:	7833      	ldrb	r3, [r6, #0]
 800c386:	2b30      	cmp	r3, #48	; 0x30
 800c388:	f040 80b0 	bne.w	800c4ec <_strtod_l+0x1b4>
 800c38c:	7873      	ldrb	r3, [r6, #1]
 800c38e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c392:	2b58      	cmp	r3, #88	; 0x58
 800c394:	d168      	bne.n	800c468 <_strtod_l+0x130>
 800c396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c398:	9301      	str	r3, [sp, #4]
 800c39a:	ab18      	add	r3, sp, #96	; 0x60
 800c39c:	9702      	str	r7, [sp, #8]
 800c39e:	9300      	str	r3, [sp, #0]
 800c3a0:	4a8d      	ldr	r2, [pc, #564]	; (800c5d8 <_strtod_l+0x2a0>)
 800c3a2:	ab19      	add	r3, sp, #100	; 0x64
 800c3a4:	a917      	add	r1, sp, #92	; 0x5c
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	f001 fd38 	bl	800de1c <__gethex>
 800c3ac:	f010 0707 	ands.w	r7, r0, #7
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	d005      	beq.n	800c3c0 <_strtod_l+0x88>
 800c3b4:	2f06      	cmp	r7, #6
 800c3b6:	d12c      	bne.n	800c412 <_strtod_l+0xda>
 800c3b8:	3601      	adds	r6, #1
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	9617      	str	r6, [sp, #92]	; 0x5c
 800c3be:	930a      	str	r3, [sp, #40]	; 0x28
 800c3c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f040 8590 	bne.w	800cee8 <_strtod_l+0xbb0>
 800c3c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3ca:	b1eb      	cbz	r3, 800c408 <_strtod_l+0xd0>
 800c3cc:	4652      	mov	r2, sl
 800c3ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c3d2:	ec43 2b10 	vmov	d0, r2, r3
 800c3d6:	b01d      	add	sp, #116	; 0x74
 800c3d8:	ecbd 8b02 	vpop	{d8}
 800c3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e0:	2a20      	cmp	r2, #32
 800c3e2:	d1cc      	bne.n	800c37e <_strtod_l+0x46>
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	9317      	str	r3, [sp, #92]	; 0x5c
 800c3e8:	e7be      	b.n	800c368 <_strtod_l+0x30>
 800c3ea:	2a2d      	cmp	r2, #45	; 0x2d
 800c3ec:	d1c7      	bne.n	800c37e <_strtod_l+0x46>
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	920a      	str	r2, [sp, #40]	; 0x28
 800c3f2:	1c5a      	adds	r2, r3, #1
 800c3f4:	9217      	str	r2, [sp, #92]	; 0x5c
 800c3f6:	785b      	ldrb	r3, [r3, #1]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d1c2      	bne.n	800c382 <_strtod_l+0x4a>
 800c3fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c3fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c402:	2b00      	cmp	r3, #0
 800c404:	f040 856e 	bne.w	800cee4 <_strtod_l+0xbac>
 800c408:	4652      	mov	r2, sl
 800c40a:	465b      	mov	r3, fp
 800c40c:	e7e1      	b.n	800c3d2 <_strtod_l+0x9a>
 800c40e:	2200      	movs	r2, #0
 800c410:	e7ee      	b.n	800c3f0 <_strtod_l+0xb8>
 800c412:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c414:	b13a      	cbz	r2, 800c426 <_strtod_l+0xee>
 800c416:	2135      	movs	r1, #53	; 0x35
 800c418:	a81a      	add	r0, sp, #104	; 0x68
 800c41a:	f002 fca2 	bl	800ed62 <__copybits>
 800c41e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c420:	4620      	mov	r0, r4
 800c422:	f002 f861 	bl	800e4e8 <_Bfree>
 800c426:	3f01      	subs	r7, #1
 800c428:	2f04      	cmp	r7, #4
 800c42a:	d806      	bhi.n	800c43a <_strtod_l+0x102>
 800c42c:	e8df f007 	tbb	[pc, r7]
 800c430:	1714030a 	.word	0x1714030a
 800c434:	0a          	.byte	0x0a
 800c435:	00          	.byte	0x00
 800c436:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c43a:	0728      	lsls	r0, r5, #28
 800c43c:	d5c0      	bpl.n	800c3c0 <_strtod_l+0x88>
 800c43e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c442:	e7bd      	b.n	800c3c0 <_strtod_l+0x88>
 800c444:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c448:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c44a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c44e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c452:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c456:	e7f0      	b.n	800c43a <_strtod_l+0x102>
 800c458:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c5dc <_strtod_l+0x2a4>
 800c45c:	e7ed      	b.n	800c43a <_strtod_l+0x102>
 800c45e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c462:	f04f 3aff 	mov.w	sl, #4294967295
 800c466:	e7e8      	b.n	800c43a <_strtod_l+0x102>
 800c468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c46a:	1c5a      	adds	r2, r3, #1
 800c46c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c46e:	785b      	ldrb	r3, [r3, #1]
 800c470:	2b30      	cmp	r3, #48	; 0x30
 800c472:	d0f9      	beq.n	800c468 <_strtod_l+0x130>
 800c474:	2b00      	cmp	r3, #0
 800c476:	d0a3      	beq.n	800c3c0 <_strtod_l+0x88>
 800c478:	2301      	movs	r3, #1
 800c47a:	f04f 0900 	mov.w	r9, #0
 800c47e:	9304      	str	r3, [sp, #16]
 800c480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c482:	9308      	str	r3, [sp, #32]
 800c484:	f8cd 901c 	str.w	r9, [sp, #28]
 800c488:	464f      	mov	r7, r9
 800c48a:	220a      	movs	r2, #10
 800c48c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c48e:	7806      	ldrb	r6, [r0, #0]
 800c490:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c494:	b2d9      	uxtb	r1, r3
 800c496:	2909      	cmp	r1, #9
 800c498:	d92a      	bls.n	800c4f0 <_strtod_l+0x1b8>
 800c49a:	9905      	ldr	r1, [sp, #20]
 800c49c:	462a      	mov	r2, r5
 800c49e:	f002 ff0f 	bl	800f2c0 <strncmp>
 800c4a2:	b398      	cbz	r0, 800c50c <_strtod_l+0x1d4>
 800c4a4:	2000      	movs	r0, #0
 800c4a6:	4632      	mov	r2, r6
 800c4a8:	463d      	mov	r5, r7
 800c4aa:	9005      	str	r0, [sp, #20]
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2a65      	cmp	r2, #101	; 0x65
 800c4b0:	d001      	beq.n	800c4b6 <_strtod_l+0x17e>
 800c4b2:	2a45      	cmp	r2, #69	; 0x45
 800c4b4:	d118      	bne.n	800c4e8 <_strtod_l+0x1b0>
 800c4b6:	b91d      	cbnz	r5, 800c4c0 <_strtod_l+0x188>
 800c4b8:	9a04      	ldr	r2, [sp, #16]
 800c4ba:	4302      	orrs	r2, r0
 800c4bc:	d09e      	beq.n	800c3fc <_strtod_l+0xc4>
 800c4be:	2500      	movs	r5, #0
 800c4c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c4c4:	f108 0201 	add.w	r2, r8, #1
 800c4c8:	9217      	str	r2, [sp, #92]	; 0x5c
 800c4ca:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c4ce:	2a2b      	cmp	r2, #43	; 0x2b
 800c4d0:	d075      	beq.n	800c5be <_strtod_l+0x286>
 800c4d2:	2a2d      	cmp	r2, #45	; 0x2d
 800c4d4:	d07b      	beq.n	800c5ce <_strtod_l+0x296>
 800c4d6:	f04f 0c00 	mov.w	ip, #0
 800c4da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c4de:	2909      	cmp	r1, #9
 800c4e0:	f240 8082 	bls.w	800c5e8 <_strtod_l+0x2b0>
 800c4e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c4e8:	2600      	movs	r6, #0
 800c4ea:	e09d      	b.n	800c628 <_strtod_l+0x2f0>
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	e7c4      	b.n	800c47a <_strtod_l+0x142>
 800c4f0:	2f08      	cmp	r7, #8
 800c4f2:	bfd8      	it	le
 800c4f4:	9907      	ldrle	r1, [sp, #28]
 800c4f6:	f100 0001 	add.w	r0, r0, #1
 800c4fa:	bfda      	itte	le
 800c4fc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c500:	9307      	strle	r3, [sp, #28]
 800c502:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c506:	3701      	adds	r7, #1
 800c508:	9017      	str	r0, [sp, #92]	; 0x5c
 800c50a:	e7bf      	b.n	800c48c <_strtod_l+0x154>
 800c50c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c50e:	195a      	adds	r2, r3, r5
 800c510:	9217      	str	r2, [sp, #92]	; 0x5c
 800c512:	5d5a      	ldrb	r2, [r3, r5]
 800c514:	2f00      	cmp	r7, #0
 800c516:	d037      	beq.n	800c588 <_strtod_l+0x250>
 800c518:	9005      	str	r0, [sp, #20]
 800c51a:	463d      	mov	r5, r7
 800c51c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c520:	2b09      	cmp	r3, #9
 800c522:	d912      	bls.n	800c54a <_strtod_l+0x212>
 800c524:	2301      	movs	r3, #1
 800c526:	e7c2      	b.n	800c4ae <_strtod_l+0x176>
 800c528:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c52a:	1c5a      	adds	r2, r3, #1
 800c52c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c52e:	785a      	ldrb	r2, [r3, #1]
 800c530:	3001      	adds	r0, #1
 800c532:	2a30      	cmp	r2, #48	; 0x30
 800c534:	d0f8      	beq.n	800c528 <_strtod_l+0x1f0>
 800c536:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c53a:	2b08      	cmp	r3, #8
 800c53c:	f200 84d9 	bhi.w	800cef2 <_strtod_l+0xbba>
 800c540:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c542:	9005      	str	r0, [sp, #20]
 800c544:	2000      	movs	r0, #0
 800c546:	9308      	str	r3, [sp, #32]
 800c548:	4605      	mov	r5, r0
 800c54a:	3a30      	subs	r2, #48	; 0x30
 800c54c:	f100 0301 	add.w	r3, r0, #1
 800c550:	d014      	beq.n	800c57c <_strtod_l+0x244>
 800c552:	9905      	ldr	r1, [sp, #20]
 800c554:	4419      	add	r1, r3
 800c556:	9105      	str	r1, [sp, #20]
 800c558:	462b      	mov	r3, r5
 800c55a:	eb00 0e05 	add.w	lr, r0, r5
 800c55e:	210a      	movs	r1, #10
 800c560:	4573      	cmp	r3, lr
 800c562:	d113      	bne.n	800c58c <_strtod_l+0x254>
 800c564:	182b      	adds	r3, r5, r0
 800c566:	2b08      	cmp	r3, #8
 800c568:	f105 0501 	add.w	r5, r5, #1
 800c56c:	4405      	add	r5, r0
 800c56e:	dc1c      	bgt.n	800c5aa <_strtod_l+0x272>
 800c570:	9907      	ldr	r1, [sp, #28]
 800c572:	230a      	movs	r3, #10
 800c574:	fb03 2301 	mla	r3, r3, r1, r2
 800c578:	9307      	str	r3, [sp, #28]
 800c57a:	2300      	movs	r3, #0
 800c57c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c57e:	1c51      	adds	r1, r2, #1
 800c580:	9117      	str	r1, [sp, #92]	; 0x5c
 800c582:	7852      	ldrb	r2, [r2, #1]
 800c584:	4618      	mov	r0, r3
 800c586:	e7c9      	b.n	800c51c <_strtod_l+0x1e4>
 800c588:	4638      	mov	r0, r7
 800c58a:	e7d2      	b.n	800c532 <_strtod_l+0x1fa>
 800c58c:	2b08      	cmp	r3, #8
 800c58e:	dc04      	bgt.n	800c59a <_strtod_l+0x262>
 800c590:	9e07      	ldr	r6, [sp, #28]
 800c592:	434e      	muls	r6, r1
 800c594:	9607      	str	r6, [sp, #28]
 800c596:	3301      	adds	r3, #1
 800c598:	e7e2      	b.n	800c560 <_strtod_l+0x228>
 800c59a:	f103 0c01 	add.w	ip, r3, #1
 800c59e:	f1bc 0f10 	cmp.w	ip, #16
 800c5a2:	bfd8      	it	le
 800c5a4:	fb01 f909 	mulle.w	r9, r1, r9
 800c5a8:	e7f5      	b.n	800c596 <_strtod_l+0x25e>
 800c5aa:	2d10      	cmp	r5, #16
 800c5ac:	bfdc      	itt	le
 800c5ae:	230a      	movle	r3, #10
 800c5b0:	fb03 2909 	mlale	r9, r3, r9, r2
 800c5b4:	e7e1      	b.n	800c57a <_strtod_l+0x242>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	9305      	str	r3, [sp, #20]
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	e77c      	b.n	800c4b8 <_strtod_l+0x180>
 800c5be:	f04f 0c00 	mov.w	ip, #0
 800c5c2:	f108 0202 	add.w	r2, r8, #2
 800c5c6:	9217      	str	r2, [sp, #92]	; 0x5c
 800c5c8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c5cc:	e785      	b.n	800c4da <_strtod_l+0x1a2>
 800c5ce:	f04f 0c01 	mov.w	ip, #1
 800c5d2:	e7f6      	b.n	800c5c2 <_strtod_l+0x28a>
 800c5d4:	080103e8 	.word	0x080103e8
 800c5d8:	080101a0 	.word	0x080101a0
 800c5dc:	7ff00000 	.word	0x7ff00000
 800c5e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c5e2:	1c51      	adds	r1, r2, #1
 800c5e4:	9117      	str	r1, [sp, #92]	; 0x5c
 800c5e6:	7852      	ldrb	r2, [r2, #1]
 800c5e8:	2a30      	cmp	r2, #48	; 0x30
 800c5ea:	d0f9      	beq.n	800c5e0 <_strtod_l+0x2a8>
 800c5ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c5f0:	2908      	cmp	r1, #8
 800c5f2:	f63f af79 	bhi.w	800c4e8 <_strtod_l+0x1b0>
 800c5f6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c5fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c5fc:	9206      	str	r2, [sp, #24]
 800c5fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c600:	1c51      	adds	r1, r2, #1
 800c602:	9117      	str	r1, [sp, #92]	; 0x5c
 800c604:	7852      	ldrb	r2, [r2, #1]
 800c606:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c60a:	2e09      	cmp	r6, #9
 800c60c:	d937      	bls.n	800c67e <_strtod_l+0x346>
 800c60e:	9e06      	ldr	r6, [sp, #24]
 800c610:	1b89      	subs	r1, r1, r6
 800c612:	2908      	cmp	r1, #8
 800c614:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c618:	dc02      	bgt.n	800c620 <_strtod_l+0x2e8>
 800c61a:	4576      	cmp	r6, lr
 800c61c:	bfa8      	it	ge
 800c61e:	4676      	movge	r6, lr
 800c620:	f1bc 0f00 	cmp.w	ip, #0
 800c624:	d000      	beq.n	800c628 <_strtod_l+0x2f0>
 800c626:	4276      	negs	r6, r6
 800c628:	2d00      	cmp	r5, #0
 800c62a:	d14d      	bne.n	800c6c8 <_strtod_l+0x390>
 800c62c:	9904      	ldr	r1, [sp, #16]
 800c62e:	4301      	orrs	r1, r0
 800c630:	f47f aec6 	bne.w	800c3c0 <_strtod_l+0x88>
 800c634:	2b00      	cmp	r3, #0
 800c636:	f47f aee1 	bne.w	800c3fc <_strtod_l+0xc4>
 800c63a:	2a69      	cmp	r2, #105	; 0x69
 800c63c:	d027      	beq.n	800c68e <_strtod_l+0x356>
 800c63e:	dc24      	bgt.n	800c68a <_strtod_l+0x352>
 800c640:	2a49      	cmp	r2, #73	; 0x49
 800c642:	d024      	beq.n	800c68e <_strtod_l+0x356>
 800c644:	2a4e      	cmp	r2, #78	; 0x4e
 800c646:	f47f aed9 	bne.w	800c3fc <_strtod_l+0xc4>
 800c64a:	499f      	ldr	r1, [pc, #636]	; (800c8c8 <_strtod_l+0x590>)
 800c64c:	a817      	add	r0, sp, #92	; 0x5c
 800c64e:	f001 fe3d 	bl	800e2cc <__match>
 800c652:	2800      	cmp	r0, #0
 800c654:	f43f aed2 	beq.w	800c3fc <_strtod_l+0xc4>
 800c658:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	2b28      	cmp	r3, #40	; 0x28
 800c65e:	d12d      	bne.n	800c6bc <_strtod_l+0x384>
 800c660:	499a      	ldr	r1, [pc, #616]	; (800c8cc <_strtod_l+0x594>)
 800c662:	aa1a      	add	r2, sp, #104	; 0x68
 800c664:	a817      	add	r0, sp, #92	; 0x5c
 800c666:	f001 fe45 	bl	800e2f4 <__hexnan>
 800c66a:	2805      	cmp	r0, #5
 800c66c:	d126      	bne.n	800c6bc <_strtod_l+0x384>
 800c66e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c670:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c674:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c678:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c67c:	e6a0      	b.n	800c3c0 <_strtod_l+0x88>
 800c67e:	210a      	movs	r1, #10
 800c680:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c684:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c688:	e7b9      	b.n	800c5fe <_strtod_l+0x2c6>
 800c68a:	2a6e      	cmp	r2, #110	; 0x6e
 800c68c:	e7db      	b.n	800c646 <_strtod_l+0x30e>
 800c68e:	4990      	ldr	r1, [pc, #576]	; (800c8d0 <_strtod_l+0x598>)
 800c690:	a817      	add	r0, sp, #92	; 0x5c
 800c692:	f001 fe1b 	bl	800e2cc <__match>
 800c696:	2800      	cmp	r0, #0
 800c698:	f43f aeb0 	beq.w	800c3fc <_strtod_l+0xc4>
 800c69c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c69e:	498d      	ldr	r1, [pc, #564]	; (800c8d4 <_strtod_l+0x59c>)
 800c6a0:	3b01      	subs	r3, #1
 800c6a2:	a817      	add	r0, sp, #92	; 0x5c
 800c6a4:	9317      	str	r3, [sp, #92]	; 0x5c
 800c6a6:	f001 fe11 	bl	800e2cc <__match>
 800c6aa:	b910      	cbnz	r0, 800c6b2 <_strtod_l+0x37a>
 800c6ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	9317      	str	r3, [sp, #92]	; 0x5c
 800c6b2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c8e4 <_strtod_l+0x5ac>
 800c6b6:	f04f 0a00 	mov.w	sl, #0
 800c6ba:	e681      	b.n	800c3c0 <_strtod_l+0x88>
 800c6bc:	4886      	ldr	r0, [pc, #536]	; (800c8d8 <_strtod_l+0x5a0>)
 800c6be:	f002 fde7 	bl	800f290 <nan>
 800c6c2:	ec5b ab10 	vmov	sl, fp, d0
 800c6c6:	e67b      	b.n	800c3c0 <_strtod_l+0x88>
 800c6c8:	9b05      	ldr	r3, [sp, #20]
 800c6ca:	9807      	ldr	r0, [sp, #28]
 800c6cc:	1af3      	subs	r3, r6, r3
 800c6ce:	2f00      	cmp	r7, #0
 800c6d0:	bf08      	it	eq
 800c6d2:	462f      	moveq	r7, r5
 800c6d4:	2d10      	cmp	r5, #16
 800c6d6:	9306      	str	r3, [sp, #24]
 800c6d8:	46a8      	mov	r8, r5
 800c6da:	bfa8      	it	ge
 800c6dc:	f04f 0810 	movge.w	r8, #16
 800c6e0:	f7f3 ff18 	bl	8000514 <__aeabi_ui2d>
 800c6e4:	2d09      	cmp	r5, #9
 800c6e6:	4682      	mov	sl, r0
 800c6e8:	468b      	mov	fp, r1
 800c6ea:	dd13      	ble.n	800c714 <_strtod_l+0x3dc>
 800c6ec:	4b7b      	ldr	r3, [pc, #492]	; (800c8dc <_strtod_l+0x5a4>)
 800c6ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c6f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c6f6:	f7f3 ff87 	bl	8000608 <__aeabi_dmul>
 800c6fa:	4682      	mov	sl, r0
 800c6fc:	4648      	mov	r0, r9
 800c6fe:	468b      	mov	fp, r1
 800c700:	f7f3 ff08 	bl	8000514 <__aeabi_ui2d>
 800c704:	4602      	mov	r2, r0
 800c706:	460b      	mov	r3, r1
 800c708:	4650      	mov	r0, sl
 800c70a:	4659      	mov	r1, fp
 800c70c:	f7f3 fdc6 	bl	800029c <__adddf3>
 800c710:	4682      	mov	sl, r0
 800c712:	468b      	mov	fp, r1
 800c714:	2d0f      	cmp	r5, #15
 800c716:	dc38      	bgt.n	800c78a <_strtod_l+0x452>
 800c718:	9b06      	ldr	r3, [sp, #24]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f43f ae50 	beq.w	800c3c0 <_strtod_l+0x88>
 800c720:	dd24      	ble.n	800c76c <_strtod_l+0x434>
 800c722:	2b16      	cmp	r3, #22
 800c724:	dc0b      	bgt.n	800c73e <_strtod_l+0x406>
 800c726:	496d      	ldr	r1, [pc, #436]	; (800c8dc <_strtod_l+0x5a4>)
 800c728:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c72c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c730:	4652      	mov	r2, sl
 800c732:	465b      	mov	r3, fp
 800c734:	f7f3 ff68 	bl	8000608 <__aeabi_dmul>
 800c738:	4682      	mov	sl, r0
 800c73a:	468b      	mov	fp, r1
 800c73c:	e640      	b.n	800c3c0 <_strtod_l+0x88>
 800c73e:	9a06      	ldr	r2, [sp, #24]
 800c740:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c744:	4293      	cmp	r3, r2
 800c746:	db20      	blt.n	800c78a <_strtod_l+0x452>
 800c748:	4c64      	ldr	r4, [pc, #400]	; (800c8dc <_strtod_l+0x5a4>)
 800c74a:	f1c5 050f 	rsb	r5, r5, #15
 800c74e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c752:	4652      	mov	r2, sl
 800c754:	465b      	mov	r3, fp
 800c756:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c75a:	f7f3 ff55 	bl	8000608 <__aeabi_dmul>
 800c75e:	9b06      	ldr	r3, [sp, #24]
 800c760:	1b5d      	subs	r5, r3, r5
 800c762:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c766:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c76a:	e7e3      	b.n	800c734 <_strtod_l+0x3fc>
 800c76c:	9b06      	ldr	r3, [sp, #24]
 800c76e:	3316      	adds	r3, #22
 800c770:	db0b      	blt.n	800c78a <_strtod_l+0x452>
 800c772:	9b05      	ldr	r3, [sp, #20]
 800c774:	1b9e      	subs	r6, r3, r6
 800c776:	4b59      	ldr	r3, [pc, #356]	; (800c8dc <_strtod_l+0x5a4>)
 800c778:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c77c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c780:	4650      	mov	r0, sl
 800c782:	4659      	mov	r1, fp
 800c784:	f7f4 f86a 	bl	800085c <__aeabi_ddiv>
 800c788:	e7d6      	b.n	800c738 <_strtod_l+0x400>
 800c78a:	9b06      	ldr	r3, [sp, #24]
 800c78c:	eba5 0808 	sub.w	r8, r5, r8
 800c790:	4498      	add	r8, r3
 800c792:	f1b8 0f00 	cmp.w	r8, #0
 800c796:	dd74      	ble.n	800c882 <_strtod_l+0x54a>
 800c798:	f018 030f 	ands.w	r3, r8, #15
 800c79c:	d00a      	beq.n	800c7b4 <_strtod_l+0x47c>
 800c79e:	494f      	ldr	r1, [pc, #316]	; (800c8dc <_strtod_l+0x5a4>)
 800c7a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c7a4:	4652      	mov	r2, sl
 800c7a6:	465b      	mov	r3, fp
 800c7a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7ac:	f7f3 ff2c 	bl	8000608 <__aeabi_dmul>
 800c7b0:	4682      	mov	sl, r0
 800c7b2:	468b      	mov	fp, r1
 800c7b4:	f038 080f 	bics.w	r8, r8, #15
 800c7b8:	d04f      	beq.n	800c85a <_strtod_l+0x522>
 800c7ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c7be:	dd22      	ble.n	800c806 <_strtod_l+0x4ce>
 800c7c0:	2500      	movs	r5, #0
 800c7c2:	462e      	mov	r6, r5
 800c7c4:	9507      	str	r5, [sp, #28]
 800c7c6:	9505      	str	r5, [sp, #20]
 800c7c8:	2322      	movs	r3, #34	; 0x22
 800c7ca:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c8e4 <_strtod_l+0x5ac>
 800c7ce:	6023      	str	r3, [r4, #0]
 800c7d0:	f04f 0a00 	mov.w	sl, #0
 800c7d4:	9b07      	ldr	r3, [sp, #28]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	f43f adf2 	beq.w	800c3c0 <_strtod_l+0x88>
 800c7dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c7de:	4620      	mov	r0, r4
 800c7e0:	f001 fe82 	bl	800e4e8 <_Bfree>
 800c7e4:	9905      	ldr	r1, [sp, #20]
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f001 fe7e 	bl	800e4e8 <_Bfree>
 800c7ec:	4631      	mov	r1, r6
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	f001 fe7a 	bl	800e4e8 <_Bfree>
 800c7f4:	9907      	ldr	r1, [sp, #28]
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	f001 fe76 	bl	800e4e8 <_Bfree>
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	4620      	mov	r0, r4
 800c800:	f001 fe72 	bl	800e4e8 <_Bfree>
 800c804:	e5dc      	b.n	800c3c0 <_strtod_l+0x88>
 800c806:	4b36      	ldr	r3, [pc, #216]	; (800c8e0 <_strtod_l+0x5a8>)
 800c808:	9304      	str	r3, [sp, #16]
 800c80a:	2300      	movs	r3, #0
 800c80c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c810:	4650      	mov	r0, sl
 800c812:	4659      	mov	r1, fp
 800c814:	4699      	mov	r9, r3
 800c816:	f1b8 0f01 	cmp.w	r8, #1
 800c81a:	dc21      	bgt.n	800c860 <_strtod_l+0x528>
 800c81c:	b10b      	cbz	r3, 800c822 <_strtod_l+0x4ea>
 800c81e:	4682      	mov	sl, r0
 800c820:	468b      	mov	fp, r1
 800c822:	4b2f      	ldr	r3, [pc, #188]	; (800c8e0 <_strtod_l+0x5a8>)
 800c824:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c828:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c82c:	4652      	mov	r2, sl
 800c82e:	465b      	mov	r3, fp
 800c830:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c834:	f7f3 fee8 	bl	8000608 <__aeabi_dmul>
 800c838:	4b2a      	ldr	r3, [pc, #168]	; (800c8e4 <_strtod_l+0x5ac>)
 800c83a:	460a      	mov	r2, r1
 800c83c:	400b      	ands	r3, r1
 800c83e:	492a      	ldr	r1, [pc, #168]	; (800c8e8 <_strtod_l+0x5b0>)
 800c840:	428b      	cmp	r3, r1
 800c842:	4682      	mov	sl, r0
 800c844:	d8bc      	bhi.n	800c7c0 <_strtod_l+0x488>
 800c846:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c84a:	428b      	cmp	r3, r1
 800c84c:	bf86      	itte	hi
 800c84e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c8ec <_strtod_l+0x5b4>
 800c852:	f04f 3aff 	movhi.w	sl, #4294967295
 800c856:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c85a:	2300      	movs	r3, #0
 800c85c:	9304      	str	r3, [sp, #16]
 800c85e:	e084      	b.n	800c96a <_strtod_l+0x632>
 800c860:	f018 0f01 	tst.w	r8, #1
 800c864:	d005      	beq.n	800c872 <_strtod_l+0x53a>
 800c866:	9b04      	ldr	r3, [sp, #16]
 800c868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86c:	f7f3 fecc 	bl	8000608 <__aeabi_dmul>
 800c870:	2301      	movs	r3, #1
 800c872:	9a04      	ldr	r2, [sp, #16]
 800c874:	3208      	adds	r2, #8
 800c876:	f109 0901 	add.w	r9, r9, #1
 800c87a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c87e:	9204      	str	r2, [sp, #16]
 800c880:	e7c9      	b.n	800c816 <_strtod_l+0x4de>
 800c882:	d0ea      	beq.n	800c85a <_strtod_l+0x522>
 800c884:	f1c8 0800 	rsb	r8, r8, #0
 800c888:	f018 020f 	ands.w	r2, r8, #15
 800c88c:	d00a      	beq.n	800c8a4 <_strtod_l+0x56c>
 800c88e:	4b13      	ldr	r3, [pc, #76]	; (800c8dc <_strtod_l+0x5a4>)
 800c890:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c894:	4650      	mov	r0, sl
 800c896:	4659      	mov	r1, fp
 800c898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89c:	f7f3 ffde 	bl	800085c <__aeabi_ddiv>
 800c8a0:	4682      	mov	sl, r0
 800c8a2:	468b      	mov	fp, r1
 800c8a4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c8a8:	d0d7      	beq.n	800c85a <_strtod_l+0x522>
 800c8aa:	f1b8 0f1f 	cmp.w	r8, #31
 800c8ae:	dd1f      	ble.n	800c8f0 <_strtod_l+0x5b8>
 800c8b0:	2500      	movs	r5, #0
 800c8b2:	462e      	mov	r6, r5
 800c8b4:	9507      	str	r5, [sp, #28]
 800c8b6:	9505      	str	r5, [sp, #20]
 800c8b8:	2322      	movs	r3, #34	; 0x22
 800c8ba:	f04f 0a00 	mov.w	sl, #0
 800c8be:	f04f 0b00 	mov.w	fp, #0
 800c8c2:	6023      	str	r3, [r4, #0]
 800c8c4:	e786      	b.n	800c7d4 <_strtod_l+0x49c>
 800c8c6:	bf00      	nop
 800c8c8:	08010171 	.word	0x08010171
 800c8cc:	080101b4 	.word	0x080101b4
 800c8d0:	08010169 	.word	0x08010169
 800c8d4:	080102f4 	.word	0x080102f4
 800c8d8:	080105a0 	.word	0x080105a0
 800c8dc:	08010480 	.word	0x08010480
 800c8e0:	08010458 	.word	0x08010458
 800c8e4:	7ff00000 	.word	0x7ff00000
 800c8e8:	7ca00000 	.word	0x7ca00000
 800c8ec:	7fefffff 	.word	0x7fefffff
 800c8f0:	f018 0310 	ands.w	r3, r8, #16
 800c8f4:	bf18      	it	ne
 800c8f6:	236a      	movne	r3, #106	; 0x6a
 800c8f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800cca8 <_strtod_l+0x970>
 800c8fc:	9304      	str	r3, [sp, #16]
 800c8fe:	4650      	mov	r0, sl
 800c900:	4659      	mov	r1, fp
 800c902:	2300      	movs	r3, #0
 800c904:	f018 0f01 	tst.w	r8, #1
 800c908:	d004      	beq.n	800c914 <_strtod_l+0x5dc>
 800c90a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c90e:	f7f3 fe7b 	bl	8000608 <__aeabi_dmul>
 800c912:	2301      	movs	r3, #1
 800c914:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c918:	f109 0908 	add.w	r9, r9, #8
 800c91c:	d1f2      	bne.n	800c904 <_strtod_l+0x5cc>
 800c91e:	b10b      	cbz	r3, 800c924 <_strtod_l+0x5ec>
 800c920:	4682      	mov	sl, r0
 800c922:	468b      	mov	fp, r1
 800c924:	9b04      	ldr	r3, [sp, #16]
 800c926:	b1c3      	cbz	r3, 800c95a <_strtod_l+0x622>
 800c928:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c92c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c930:	2b00      	cmp	r3, #0
 800c932:	4659      	mov	r1, fp
 800c934:	dd11      	ble.n	800c95a <_strtod_l+0x622>
 800c936:	2b1f      	cmp	r3, #31
 800c938:	f340 8124 	ble.w	800cb84 <_strtod_l+0x84c>
 800c93c:	2b34      	cmp	r3, #52	; 0x34
 800c93e:	bfde      	ittt	le
 800c940:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c944:	f04f 33ff 	movle.w	r3, #4294967295
 800c948:	fa03 f202 	lslle.w	r2, r3, r2
 800c94c:	f04f 0a00 	mov.w	sl, #0
 800c950:	bfcc      	ite	gt
 800c952:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c956:	ea02 0b01 	andle.w	fp, r2, r1
 800c95a:	2200      	movs	r2, #0
 800c95c:	2300      	movs	r3, #0
 800c95e:	4650      	mov	r0, sl
 800c960:	4659      	mov	r1, fp
 800c962:	f7f4 f8b9 	bl	8000ad8 <__aeabi_dcmpeq>
 800c966:	2800      	cmp	r0, #0
 800c968:	d1a2      	bne.n	800c8b0 <_strtod_l+0x578>
 800c96a:	9b07      	ldr	r3, [sp, #28]
 800c96c:	9300      	str	r3, [sp, #0]
 800c96e:	9908      	ldr	r1, [sp, #32]
 800c970:	462b      	mov	r3, r5
 800c972:	463a      	mov	r2, r7
 800c974:	4620      	mov	r0, r4
 800c976:	f001 fe1f 	bl	800e5b8 <__s2b>
 800c97a:	9007      	str	r0, [sp, #28]
 800c97c:	2800      	cmp	r0, #0
 800c97e:	f43f af1f 	beq.w	800c7c0 <_strtod_l+0x488>
 800c982:	9b05      	ldr	r3, [sp, #20]
 800c984:	1b9e      	subs	r6, r3, r6
 800c986:	9b06      	ldr	r3, [sp, #24]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	bfb4      	ite	lt
 800c98c:	4633      	movlt	r3, r6
 800c98e:	2300      	movge	r3, #0
 800c990:	930c      	str	r3, [sp, #48]	; 0x30
 800c992:	9b06      	ldr	r3, [sp, #24]
 800c994:	2500      	movs	r5, #0
 800c996:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c99a:	9312      	str	r3, [sp, #72]	; 0x48
 800c99c:	462e      	mov	r6, r5
 800c99e:	9b07      	ldr	r3, [sp, #28]
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	6859      	ldr	r1, [r3, #4]
 800c9a4:	f001 fd60 	bl	800e468 <_Balloc>
 800c9a8:	9005      	str	r0, [sp, #20]
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	f43f af0c 	beq.w	800c7c8 <_strtod_l+0x490>
 800c9b0:	9b07      	ldr	r3, [sp, #28]
 800c9b2:	691a      	ldr	r2, [r3, #16]
 800c9b4:	3202      	adds	r2, #2
 800c9b6:	f103 010c 	add.w	r1, r3, #12
 800c9ba:	0092      	lsls	r2, r2, #2
 800c9bc:	300c      	adds	r0, #12
 800c9be:	f7fe fde7 	bl	800b590 <memcpy>
 800c9c2:	ec4b ab10 	vmov	d0, sl, fp
 800c9c6:	aa1a      	add	r2, sp, #104	; 0x68
 800c9c8:	a919      	add	r1, sp, #100	; 0x64
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	f002 f93a 	bl	800ec44 <__d2b>
 800c9d0:	ec4b ab18 	vmov	d8, sl, fp
 800c9d4:	9018      	str	r0, [sp, #96]	; 0x60
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	f43f aef6 	beq.w	800c7c8 <_strtod_l+0x490>
 800c9dc:	2101      	movs	r1, #1
 800c9de:	4620      	mov	r0, r4
 800c9e0:	f001 fe84 	bl	800e6ec <__i2b>
 800c9e4:	4606      	mov	r6, r0
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	f43f aeee 	beq.w	800c7c8 <_strtod_l+0x490>
 800c9ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c9ee:	9904      	ldr	r1, [sp, #16]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	bfab      	itete	ge
 800c9f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c9f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c9f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c9fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c9fe:	bfac      	ite	ge
 800ca00:	eb03 0902 	addge.w	r9, r3, r2
 800ca04:	1ad7      	sublt	r7, r2, r3
 800ca06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ca08:	eba3 0801 	sub.w	r8, r3, r1
 800ca0c:	4490      	add	r8, r2
 800ca0e:	4ba1      	ldr	r3, [pc, #644]	; (800cc94 <_strtod_l+0x95c>)
 800ca10:	f108 38ff 	add.w	r8, r8, #4294967295
 800ca14:	4598      	cmp	r8, r3
 800ca16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ca1a:	f280 80c7 	bge.w	800cbac <_strtod_l+0x874>
 800ca1e:	eba3 0308 	sub.w	r3, r3, r8
 800ca22:	2b1f      	cmp	r3, #31
 800ca24:	eba2 0203 	sub.w	r2, r2, r3
 800ca28:	f04f 0101 	mov.w	r1, #1
 800ca2c:	f300 80b1 	bgt.w	800cb92 <_strtod_l+0x85a>
 800ca30:	fa01 f303 	lsl.w	r3, r1, r3
 800ca34:	930d      	str	r3, [sp, #52]	; 0x34
 800ca36:	2300      	movs	r3, #0
 800ca38:	9308      	str	r3, [sp, #32]
 800ca3a:	eb09 0802 	add.w	r8, r9, r2
 800ca3e:	9b04      	ldr	r3, [sp, #16]
 800ca40:	45c1      	cmp	r9, r8
 800ca42:	4417      	add	r7, r2
 800ca44:	441f      	add	r7, r3
 800ca46:	464b      	mov	r3, r9
 800ca48:	bfa8      	it	ge
 800ca4a:	4643      	movge	r3, r8
 800ca4c:	42bb      	cmp	r3, r7
 800ca4e:	bfa8      	it	ge
 800ca50:	463b      	movge	r3, r7
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	bfc2      	ittt	gt
 800ca56:	eba8 0803 	subgt.w	r8, r8, r3
 800ca5a:	1aff      	subgt	r7, r7, r3
 800ca5c:	eba9 0903 	subgt.w	r9, r9, r3
 800ca60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	dd17      	ble.n	800ca96 <_strtod_l+0x75e>
 800ca66:	4631      	mov	r1, r6
 800ca68:	461a      	mov	r2, r3
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f001 fefe 	bl	800e86c <__pow5mult>
 800ca70:	4606      	mov	r6, r0
 800ca72:	2800      	cmp	r0, #0
 800ca74:	f43f aea8 	beq.w	800c7c8 <_strtod_l+0x490>
 800ca78:	4601      	mov	r1, r0
 800ca7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f001 fe4b 	bl	800e718 <__multiply>
 800ca82:	900b      	str	r0, [sp, #44]	; 0x2c
 800ca84:	2800      	cmp	r0, #0
 800ca86:	f43f ae9f 	beq.w	800c7c8 <_strtod_l+0x490>
 800ca8a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f001 fd2b 	bl	800e4e8 <_Bfree>
 800ca92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca94:	9318      	str	r3, [sp, #96]	; 0x60
 800ca96:	f1b8 0f00 	cmp.w	r8, #0
 800ca9a:	f300 808c 	bgt.w	800cbb6 <_strtod_l+0x87e>
 800ca9e:	9b06      	ldr	r3, [sp, #24]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	dd08      	ble.n	800cab6 <_strtod_l+0x77e>
 800caa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800caa6:	9905      	ldr	r1, [sp, #20]
 800caa8:	4620      	mov	r0, r4
 800caaa:	f001 fedf 	bl	800e86c <__pow5mult>
 800caae:	9005      	str	r0, [sp, #20]
 800cab0:	2800      	cmp	r0, #0
 800cab2:	f43f ae89 	beq.w	800c7c8 <_strtod_l+0x490>
 800cab6:	2f00      	cmp	r7, #0
 800cab8:	dd08      	ble.n	800cacc <_strtod_l+0x794>
 800caba:	9905      	ldr	r1, [sp, #20]
 800cabc:	463a      	mov	r2, r7
 800cabe:	4620      	mov	r0, r4
 800cac0:	f001 ff2e 	bl	800e920 <__lshift>
 800cac4:	9005      	str	r0, [sp, #20]
 800cac6:	2800      	cmp	r0, #0
 800cac8:	f43f ae7e 	beq.w	800c7c8 <_strtod_l+0x490>
 800cacc:	f1b9 0f00 	cmp.w	r9, #0
 800cad0:	dd08      	ble.n	800cae4 <_strtod_l+0x7ac>
 800cad2:	4631      	mov	r1, r6
 800cad4:	464a      	mov	r2, r9
 800cad6:	4620      	mov	r0, r4
 800cad8:	f001 ff22 	bl	800e920 <__lshift>
 800cadc:	4606      	mov	r6, r0
 800cade:	2800      	cmp	r0, #0
 800cae0:	f43f ae72 	beq.w	800c7c8 <_strtod_l+0x490>
 800cae4:	9a05      	ldr	r2, [sp, #20]
 800cae6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cae8:	4620      	mov	r0, r4
 800caea:	f001 ffa5 	bl	800ea38 <__mdiff>
 800caee:	4605      	mov	r5, r0
 800caf0:	2800      	cmp	r0, #0
 800caf2:	f43f ae69 	beq.w	800c7c8 <_strtod_l+0x490>
 800caf6:	68c3      	ldr	r3, [r0, #12]
 800caf8:	930b      	str	r3, [sp, #44]	; 0x2c
 800cafa:	2300      	movs	r3, #0
 800cafc:	60c3      	str	r3, [r0, #12]
 800cafe:	4631      	mov	r1, r6
 800cb00:	f001 ff7e 	bl	800ea00 <__mcmp>
 800cb04:	2800      	cmp	r0, #0
 800cb06:	da60      	bge.n	800cbca <_strtod_l+0x892>
 800cb08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb0a:	ea53 030a 	orrs.w	r3, r3, sl
 800cb0e:	f040 8082 	bne.w	800cc16 <_strtod_l+0x8de>
 800cb12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d17d      	bne.n	800cc16 <_strtod_l+0x8de>
 800cb1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cb1e:	0d1b      	lsrs	r3, r3, #20
 800cb20:	051b      	lsls	r3, r3, #20
 800cb22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cb26:	d976      	bls.n	800cc16 <_strtod_l+0x8de>
 800cb28:	696b      	ldr	r3, [r5, #20]
 800cb2a:	b913      	cbnz	r3, 800cb32 <_strtod_l+0x7fa>
 800cb2c:	692b      	ldr	r3, [r5, #16]
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	dd71      	ble.n	800cc16 <_strtod_l+0x8de>
 800cb32:	4629      	mov	r1, r5
 800cb34:	2201      	movs	r2, #1
 800cb36:	4620      	mov	r0, r4
 800cb38:	f001 fef2 	bl	800e920 <__lshift>
 800cb3c:	4631      	mov	r1, r6
 800cb3e:	4605      	mov	r5, r0
 800cb40:	f001 ff5e 	bl	800ea00 <__mcmp>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	dd66      	ble.n	800cc16 <_strtod_l+0x8de>
 800cb48:	9904      	ldr	r1, [sp, #16]
 800cb4a:	4a53      	ldr	r2, [pc, #332]	; (800cc98 <_strtod_l+0x960>)
 800cb4c:	465b      	mov	r3, fp
 800cb4e:	2900      	cmp	r1, #0
 800cb50:	f000 8081 	beq.w	800cc56 <_strtod_l+0x91e>
 800cb54:	ea02 010b 	and.w	r1, r2, fp
 800cb58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cb5c:	dc7b      	bgt.n	800cc56 <_strtod_l+0x91e>
 800cb5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cb62:	f77f aea9 	ble.w	800c8b8 <_strtod_l+0x580>
 800cb66:	4b4d      	ldr	r3, [pc, #308]	; (800cc9c <_strtod_l+0x964>)
 800cb68:	4650      	mov	r0, sl
 800cb6a:	4659      	mov	r1, fp
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	f7f3 fd4b 	bl	8000608 <__aeabi_dmul>
 800cb72:	460b      	mov	r3, r1
 800cb74:	4303      	orrs	r3, r0
 800cb76:	bf08      	it	eq
 800cb78:	2322      	moveq	r3, #34	; 0x22
 800cb7a:	4682      	mov	sl, r0
 800cb7c:	468b      	mov	fp, r1
 800cb7e:	bf08      	it	eq
 800cb80:	6023      	streq	r3, [r4, #0]
 800cb82:	e62b      	b.n	800c7dc <_strtod_l+0x4a4>
 800cb84:	f04f 32ff 	mov.w	r2, #4294967295
 800cb88:	fa02 f303 	lsl.w	r3, r2, r3
 800cb8c:	ea03 0a0a 	and.w	sl, r3, sl
 800cb90:	e6e3      	b.n	800c95a <_strtod_l+0x622>
 800cb92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800cb96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cb9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cb9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800cba2:	fa01 f308 	lsl.w	r3, r1, r8
 800cba6:	9308      	str	r3, [sp, #32]
 800cba8:	910d      	str	r1, [sp, #52]	; 0x34
 800cbaa:	e746      	b.n	800ca3a <_strtod_l+0x702>
 800cbac:	2300      	movs	r3, #0
 800cbae:	9308      	str	r3, [sp, #32]
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	930d      	str	r3, [sp, #52]	; 0x34
 800cbb4:	e741      	b.n	800ca3a <_strtod_l+0x702>
 800cbb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cbb8:	4642      	mov	r2, r8
 800cbba:	4620      	mov	r0, r4
 800cbbc:	f001 feb0 	bl	800e920 <__lshift>
 800cbc0:	9018      	str	r0, [sp, #96]	; 0x60
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	f47f af6b 	bne.w	800ca9e <_strtod_l+0x766>
 800cbc8:	e5fe      	b.n	800c7c8 <_strtod_l+0x490>
 800cbca:	465f      	mov	r7, fp
 800cbcc:	d16e      	bne.n	800ccac <_strtod_l+0x974>
 800cbce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cbd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cbd4:	b342      	cbz	r2, 800cc28 <_strtod_l+0x8f0>
 800cbd6:	4a32      	ldr	r2, [pc, #200]	; (800cca0 <_strtod_l+0x968>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d128      	bne.n	800cc2e <_strtod_l+0x8f6>
 800cbdc:	9b04      	ldr	r3, [sp, #16]
 800cbde:	4651      	mov	r1, sl
 800cbe0:	b1eb      	cbz	r3, 800cc1e <_strtod_l+0x8e6>
 800cbe2:	4b2d      	ldr	r3, [pc, #180]	; (800cc98 <_strtod_l+0x960>)
 800cbe4:	403b      	ands	r3, r7
 800cbe6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cbea:	f04f 32ff 	mov.w	r2, #4294967295
 800cbee:	d819      	bhi.n	800cc24 <_strtod_l+0x8ec>
 800cbf0:	0d1b      	lsrs	r3, r3, #20
 800cbf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cbf6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbfa:	4299      	cmp	r1, r3
 800cbfc:	d117      	bne.n	800cc2e <_strtod_l+0x8f6>
 800cbfe:	4b29      	ldr	r3, [pc, #164]	; (800cca4 <_strtod_l+0x96c>)
 800cc00:	429f      	cmp	r7, r3
 800cc02:	d102      	bne.n	800cc0a <_strtod_l+0x8d2>
 800cc04:	3101      	adds	r1, #1
 800cc06:	f43f addf 	beq.w	800c7c8 <_strtod_l+0x490>
 800cc0a:	4b23      	ldr	r3, [pc, #140]	; (800cc98 <_strtod_l+0x960>)
 800cc0c:	403b      	ands	r3, r7
 800cc0e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800cc12:	f04f 0a00 	mov.w	sl, #0
 800cc16:	9b04      	ldr	r3, [sp, #16]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d1a4      	bne.n	800cb66 <_strtod_l+0x82e>
 800cc1c:	e5de      	b.n	800c7dc <_strtod_l+0x4a4>
 800cc1e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc22:	e7ea      	b.n	800cbfa <_strtod_l+0x8c2>
 800cc24:	4613      	mov	r3, r2
 800cc26:	e7e8      	b.n	800cbfa <_strtod_l+0x8c2>
 800cc28:	ea53 030a 	orrs.w	r3, r3, sl
 800cc2c:	d08c      	beq.n	800cb48 <_strtod_l+0x810>
 800cc2e:	9b08      	ldr	r3, [sp, #32]
 800cc30:	b1db      	cbz	r3, 800cc6a <_strtod_l+0x932>
 800cc32:	423b      	tst	r3, r7
 800cc34:	d0ef      	beq.n	800cc16 <_strtod_l+0x8de>
 800cc36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc38:	9a04      	ldr	r2, [sp, #16]
 800cc3a:	4650      	mov	r0, sl
 800cc3c:	4659      	mov	r1, fp
 800cc3e:	b1c3      	cbz	r3, 800cc72 <_strtod_l+0x93a>
 800cc40:	f7ff fb5c 	bl	800c2fc <sulp>
 800cc44:	4602      	mov	r2, r0
 800cc46:	460b      	mov	r3, r1
 800cc48:	ec51 0b18 	vmov	r0, r1, d8
 800cc4c:	f7f3 fb26 	bl	800029c <__adddf3>
 800cc50:	4682      	mov	sl, r0
 800cc52:	468b      	mov	fp, r1
 800cc54:	e7df      	b.n	800cc16 <_strtod_l+0x8de>
 800cc56:	4013      	ands	r3, r2
 800cc58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cc5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cc60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cc64:	f04f 3aff 	mov.w	sl, #4294967295
 800cc68:	e7d5      	b.n	800cc16 <_strtod_l+0x8de>
 800cc6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc6c:	ea13 0f0a 	tst.w	r3, sl
 800cc70:	e7e0      	b.n	800cc34 <_strtod_l+0x8fc>
 800cc72:	f7ff fb43 	bl	800c2fc <sulp>
 800cc76:	4602      	mov	r2, r0
 800cc78:	460b      	mov	r3, r1
 800cc7a:	ec51 0b18 	vmov	r0, r1, d8
 800cc7e:	f7f3 fb0b 	bl	8000298 <__aeabi_dsub>
 800cc82:	2200      	movs	r2, #0
 800cc84:	2300      	movs	r3, #0
 800cc86:	4682      	mov	sl, r0
 800cc88:	468b      	mov	fp, r1
 800cc8a:	f7f3 ff25 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	d0c1      	beq.n	800cc16 <_strtod_l+0x8de>
 800cc92:	e611      	b.n	800c8b8 <_strtod_l+0x580>
 800cc94:	fffffc02 	.word	0xfffffc02
 800cc98:	7ff00000 	.word	0x7ff00000
 800cc9c:	39500000 	.word	0x39500000
 800cca0:	000fffff 	.word	0x000fffff
 800cca4:	7fefffff 	.word	0x7fefffff
 800cca8:	080101c8 	.word	0x080101c8
 800ccac:	4631      	mov	r1, r6
 800ccae:	4628      	mov	r0, r5
 800ccb0:	f002 f824 	bl	800ecfc <__ratio>
 800ccb4:	ec59 8b10 	vmov	r8, r9, d0
 800ccb8:	ee10 0a10 	vmov	r0, s0
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ccc2:	4649      	mov	r1, r9
 800ccc4:	f7f3 ff1c 	bl	8000b00 <__aeabi_dcmple>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d07a      	beq.n	800cdc2 <_strtod_l+0xa8a>
 800cccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d04a      	beq.n	800cd68 <_strtod_l+0xa30>
 800ccd2:	4b95      	ldr	r3, [pc, #596]	; (800cf28 <_strtod_l+0xbf0>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ccda:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800cf28 <_strtod_l+0xbf0>
 800ccde:	f04f 0800 	mov.w	r8, #0
 800cce2:	4b92      	ldr	r3, [pc, #584]	; (800cf2c <_strtod_l+0xbf4>)
 800cce4:	403b      	ands	r3, r7
 800cce6:	930d      	str	r3, [sp, #52]	; 0x34
 800cce8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ccea:	4b91      	ldr	r3, [pc, #580]	; (800cf30 <_strtod_l+0xbf8>)
 800ccec:	429a      	cmp	r2, r3
 800ccee:	f040 80b0 	bne.w	800ce52 <_strtod_l+0xb1a>
 800ccf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ccf6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ccfa:	ec4b ab10 	vmov	d0, sl, fp
 800ccfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cd02:	f001 ff23 	bl	800eb4c <__ulp>
 800cd06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cd0a:	ec53 2b10 	vmov	r2, r3, d0
 800cd0e:	f7f3 fc7b 	bl	8000608 <__aeabi_dmul>
 800cd12:	4652      	mov	r2, sl
 800cd14:	465b      	mov	r3, fp
 800cd16:	f7f3 fac1 	bl	800029c <__adddf3>
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	4983      	ldr	r1, [pc, #524]	; (800cf2c <_strtod_l+0xbf4>)
 800cd1e:	4a85      	ldr	r2, [pc, #532]	; (800cf34 <_strtod_l+0xbfc>)
 800cd20:	4019      	ands	r1, r3
 800cd22:	4291      	cmp	r1, r2
 800cd24:	4682      	mov	sl, r0
 800cd26:	d960      	bls.n	800cdea <_strtod_l+0xab2>
 800cd28:	ee18 3a90 	vmov	r3, s17
 800cd2c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d104      	bne.n	800cd3e <_strtod_l+0xa06>
 800cd34:	ee18 3a10 	vmov	r3, s16
 800cd38:	3301      	adds	r3, #1
 800cd3a:	f43f ad45 	beq.w	800c7c8 <_strtod_l+0x490>
 800cd3e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800cf40 <_strtod_l+0xc08>
 800cd42:	f04f 3aff 	mov.w	sl, #4294967295
 800cd46:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd48:	4620      	mov	r0, r4
 800cd4a:	f001 fbcd 	bl	800e4e8 <_Bfree>
 800cd4e:	9905      	ldr	r1, [sp, #20]
 800cd50:	4620      	mov	r0, r4
 800cd52:	f001 fbc9 	bl	800e4e8 <_Bfree>
 800cd56:	4631      	mov	r1, r6
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f001 fbc5 	bl	800e4e8 <_Bfree>
 800cd5e:	4629      	mov	r1, r5
 800cd60:	4620      	mov	r0, r4
 800cd62:	f001 fbc1 	bl	800e4e8 <_Bfree>
 800cd66:	e61a      	b.n	800c99e <_strtod_l+0x666>
 800cd68:	f1ba 0f00 	cmp.w	sl, #0
 800cd6c:	d11b      	bne.n	800cda6 <_strtod_l+0xa6e>
 800cd6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd72:	b9f3      	cbnz	r3, 800cdb2 <_strtod_l+0xa7a>
 800cd74:	4b6c      	ldr	r3, [pc, #432]	; (800cf28 <_strtod_l+0xbf0>)
 800cd76:	2200      	movs	r2, #0
 800cd78:	4640      	mov	r0, r8
 800cd7a:	4649      	mov	r1, r9
 800cd7c:	f7f3 feb6 	bl	8000aec <__aeabi_dcmplt>
 800cd80:	b9d0      	cbnz	r0, 800cdb8 <_strtod_l+0xa80>
 800cd82:	4640      	mov	r0, r8
 800cd84:	4649      	mov	r1, r9
 800cd86:	4b6c      	ldr	r3, [pc, #432]	; (800cf38 <_strtod_l+0xc00>)
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f7f3 fc3d 	bl	8000608 <__aeabi_dmul>
 800cd8e:	4680      	mov	r8, r0
 800cd90:	4689      	mov	r9, r1
 800cd92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cd96:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800cd9a:	9315      	str	r3, [sp, #84]	; 0x54
 800cd9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cda0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cda4:	e79d      	b.n	800cce2 <_strtod_l+0x9aa>
 800cda6:	f1ba 0f01 	cmp.w	sl, #1
 800cdaa:	d102      	bne.n	800cdb2 <_strtod_l+0xa7a>
 800cdac:	2f00      	cmp	r7, #0
 800cdae:	f43f ad83 	beq.w	800c8b8 <_strtod_l+0x580>
 800cdb2:	4b62      	ldr	r3, [pc, #392]	; (800cf3c <_strtod_l+0xc04>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	e78e      	b.n	800ccd6 <_strtod_l+0x99e>
 800cdb8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800cf38 <_strtod_l+0xc00>
 800cdbc:	f04f 0800 	mov.w	r8, #0
 800cdc0:	e7e7      	b.n	800cd92 <_strtod_l+0xa5a>
 800cdc2:	4b5d      	ldr	r3, [pc, #372]	; (800cf38 <_strtod_l+0xc00>)
 800cdc4:	4640      	mov	r0, r8
 800cdc6:	4649      	mov	r1, r9
 800cdc8:	2200      	movs	r2, #0
 800cdca:	f7f3 fc1d 	bl	8000608 <__aeabi_dmul>
 800cdce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdd0:	4680      	mov	r8, r0
 800cdd2:	4689      	mov	r9, r1
 800cdd4:	b933      	cbnz	r3, 800cde4 <_strtod_l+0xaac>
 800cdd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cdda:	900e      	str	r0, [sp, #56]	; 0x38
 800cddc:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdde:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cde2:	e7dd      	b.n	800cda0 <_strtod_l+0xa68>
 800cde4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800cde8:	e7f9      	b.n	800cdde <_strtod_l+0xaa6>
 800cdea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cdee:	9b04      	ldr	r3, [sp, #16]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d1a8      	bne.n	800cd46 <_strtod_l+0xa0e>
 800cdf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cdf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cdfa:	0d1b      	lsrs	r3, r3, #20
 800cdfc:	051b      	lsls	r3, r3, #20
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d1a1      	bne.n	800cd46 <_strtod_l+0xa0e>
 800ce02:	4640      	mov	r0, r8
 800ce04:	4649      	mov	r1, r9
 800ce06:	f7f3 ff5f 	bl	8000cc8 <__aeabi_d2lz>
 800ce0a:	f7f3 fbcf 	bl	80005ac <__aeabi_l2d>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	460b      	mov	r3, r1
 800ce12:	4640      	mov	r0, r8
 800ce14:	4649      	mov	r1, r9
 800ce16:	f7f3 fa3f 	bl	8000298 <__aeabi_dsub>
 800ce1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce20:	ea43 030a 	orr.w	r3, r3, sl
 800ce24:	4313      	orrs	r3, r2
 800ce26:	4680      	mov	r8, r0
 800ce28:	4689      	mov	r9, r1
 800ce2a:	d055      	beq.n	800ced8 <_strtod_l+0xba0>
 800ce2c:	a336      	add	r3, pc, #216	; (adr r3, 800cf08 <_strtod_l+0xbd0>)
 800ce2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce32:	f7f3 fe5b 	bl	8000aec <__aeabi_dcmplt>
 800ce36:	2800      	cmp	r0, #0
 800ce38:	f47f acd0 	bne.w	800c7dc <_strtod_l+0x4a4>
 800ce3c:	a334      	add	r3, pc, #208	; (adr r3, 800cf10 <_strtod_l+0xbd8>)
 800ce3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce42:	4640      	mov	r0, r8
 800ce44:	4649      	mov	r1, r9
 800ce46:	f7f3 fe6f 	bl	8000b28 <__aeabi_dcmpgt>
 800ce4a:	2800      	cmp	r0, #0
 800ce4c:	f43f af7b 	beq.w	800cd46 <_strtod_l+0xa0e>
 800ce50:	e4c4      	b.n	800c7dc <_strtod_l+0x4a4>
 800ce52:	9b04      	ldr	r3, [sp, #16]
 800ce54:	b333      	cbz	r3, 800cea4 <_strtod_l+0xb6c>
 800ce56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce58:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ce5c:	d822      	bhi.n	800cea4 <_strtod_l+0xb6c>
 800ce5e:	a32e      	add	r3, pc, #184	; (adr r3, 800cf18 <_strtod_l+0xbe0>)
 800ce60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce64:	4640      	mov	r0, r8
 800ce66:	4649      	mov	r1, r9
 800ce68:	f7f3 fe4a 	bl	8000b00 <__aeabi_dcmple>
 800ce6c:	b1a0      	cbz	r0, 800ce98 <_strtod_l+0xb60>
 800ce6e:	4649      	mov	r1, r9
 800ce70:	4640      	mov	r0, r8
 800ce72:	f7f3 fea1 	bl	8000bb8 <__aeabi_d2uiz>
 800ce76:	2801      	cmp	r0, #1
 800ce78:	bf38      	it	cc
 800ce7a:	2001      	movcc	r0, #1
 800ce7c:	f7f3 fb4a 	bl	8000514 <__aeabi_ui2d>
 800ce80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce82:	4680      	mov	r8, r0
 800ce84:	4689      	mov	r9, r1
 800ce86:	bb23      	cbnz	r3, 800ced2 <_strtod_l+0xb9a>
 800ce88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce8c:	9010      	str	r0, [sp, #64]	; 0x40
 800ce8e:	9311      	str	r3, [sp, #68]	; 0x44
 800ce90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ce94:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ce98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce9c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cea0:	1a9b      	subs	r3, r3, r2
 800cea2:	9309      	str	r3, [sp, #36]	; 0x24
 800cea4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cea8:	eeb0 0a48 	vmov.f32	s0, s16
 800ceac:	eef0 0a68 	vmov.f32	s1, s17
 800ceb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ceb4:	f001 fe4a 	bl	800eb4c <__ulp>
 800ceb8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cebc:	ec53 2b10 	vmov	r2, r3, d0
 800cec0:	f7f3 fba2 	bl	8000608 <__aeabi_dmul>
 800cec4:	ec53 2b18 	vmov	r2, r3, d8
 800cec8:	f7f3 f9e8 	bl	800029c <__adddf3>
 800cecc:	4682      	mov	sl, r0
 800cece:	468b      	mov	fp, r1
 800ced0:	e78d      	b.n	800cdee <_strtod_l+0xab6>
 800ced2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ced6:	e7db      	b.n	800ce90 <_strtod_l+0xb58>
 800ced8:	a311      	add	r3, pc, #68	; (adr r3, 800cf20 <_strtod_l+0xbe8>)
 800ceda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cede:	f7f3 fe05 	bl	8000aec <__aeabi_dcmplt>
 800cee2:	e7b2      	b.n	800ce4a <_strtod_l+0xb12>
 800cee4:	2300      	movs	r3, #0
 800cee6:	930a      	str	r3, [sp, #40]	; 0x28
 800cee8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ceea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ceec:	6013      	str	r3, [r2, #0]
 800ceee:	f7ff ba6b 	b.w	800c3c8 <_strtod_l+0x90>
 800cef2:	2a65      	cmp	r2, #101	; 0x65
 800cef4:	f43f ab5f 	beq.w	800c5b6 <_strtod_l+0x27e>
 800cef8:	2a45      	cmp	r2, #69	; 0x45
 800cefa:	f43f ab5c 	beq.w	800c5b6 <_strtod_l+0x27e>
 800cefe:	2301      	movs	r3, #1
 800cf00:	f7ff bb94 	b.w	800c62c <_strtod_l+0x2f4>
 800cf04:	f3af 8000 	nop.w
 800cf08:	94a03595 	.word	0x94a03595
 800cf0c:	3fdfffff 	.word	0x3fdfffff
 800cf10:	35afe535 	.word	0x35afe535
 800cf14:	3fe00000 	.word	0x3fe00000
 800cf18:	ffc00000 	.word	0xffc00000
 800cf1c:	41dfffff 	.word	0x41dfffff
 800cf20:	94a03595 	.word	0x94a03595
 800cf24:	3fcfffff 	.word	0x3fcfffff
 800cf28:	3ff00000 	.word	0x3ff00000
 800cf2c:	7ff00000 	.word	0x7ff00000
 800cf30:	7fe00000 	.word	0x7fe00000
 800cf34:	7c9fffff 	.word	0x7c9fffff
 800cf38:	3fe00000 	.word	0x3fe00000
 800cf3c:	bff00000 	.word	0xbff00000
 800cf40:	7fefffff 	.word	0x7fefffff

0800cf44 <_strtod_r>:
 800cf44:	4b01      	ldr	r3, [pc, #4]	; (800cf4c <_strtod_r+0x8>)
 800cf46:	f7ff b9f7 	b.w	800c338 <_strtod_l>
 800cf4a:	bf00      	nop
 800cf4c:	20000294 	.word	0x20000294

0800cf50 <_strtol_l.constprop.0>:
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf56:	d001      	beq.n	800cf5c <_strtol_l.constprop.0+0xc>
 800cf58:	2b24      	cmp	r3, #36	; 0x24
 800cf5a:	d906      	bls.n	800cf6a <_strtol_l.constprop.0+0x1a>
 800cf5c:	f7fe faee 	bl	800b53c <__errno>
 800cf60:	2316      	movs	r3, #22
 800cf62:	6003      	str	r3, [r0, #0]
 800cf64:	2000      	movs	r0, #0
 800cf66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf6a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d050 <_strtol_l.constprop.0+0x100>
 800cf6e:	460d      	mov	r5, r1
 800cf70:	462e      	mov	r6, r5
 800cf72:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf76:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cf7a:	f017 0708 	ands.w	r7, r7, #8
 800cf7e:	d1f7      	bne.n	800cf70 <_strtol_l.constprop.0+0x20>
 800cf80:	2c2d      	cmp	r4, #45	; 0x2d
 800cf82:	d132      	bne.n	800cfea <_strtol_l.constprop.0+0x9a>
 800cf84:	782c      	ldrb	r4, [r5, #0]
 800cf86:	2701      	movs	r7, #1
 800cf88:	1cb5      	adds	r5, r6, #2
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d05b      	beq.n	800d046 <_strtol_l.constprop.0+0xf6>
 800cf8e:	2b10      	cmp	r3, #16
 800cf90:	d109      	bne.n	800cfa6 <_strtol_l.constprop.0+0x56>
 800cf92:	2c30      	cmp	r4, #48	; 0x30
 800cf94:	d107      	bne.n	800cfa6 <_strtol_l.constprop.0+0x56>
 800cf96:	782c      	ldrb	r4, [r5, #0]
 800cf98:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cf9c:	2c58      	cmp	r4, #88	; 0x58
 800cf9e:	d14d      	bne.n	800d03c <_strtol_l.constprop.0+0xec>
 800cfa0:	786c      	ldrb	r4, [r5, #1]
 800cfa2:	2310      	movs	r3, #16
 800cfa4:	3502      	adds	r5, #2
 800cfa6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cfaa:	f108 38ff 	add.w	r8, r8, #4294967295
 800cfae:	f04f 0c00 	mov.w	ip, #0
 800cfb2:	fbb8 f9f3 	udiv	r9, r8, r3
 800cfb6:	4666      	mov	r6, ip
 800cfb8:	fb03 8a19 	mls	sl, r3, r9, r8
 800cfbc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cfc0:	f1be 0f09 	cmp.w	lr, #9
 800cfc4:	d816      	bhi.n	800cff4 <_strtol_l.constprop.0+0xa4>
 800cfc6:	4674      	mov	r4, lr
 800cfc8:	42a3      	cmp	r3, r4
 800cfca:	dd24      	ble.n	800d016 <_strtol_l.constprop.0+0xc6>
 800cfcc:	f1bc 0f00 	cmp.w	ip, #0
 800cfd0:	db1e      	blt.n	800d010 <_strtol_l.constprop.0+0xc0>
 800cfd2:	45b1      	cmp	r9, r6
 800cfd4:	d31c      	bcc.n	800d010 <_strtol_l.constprop.0+0xc0>
 800cfd6:	d101      	bne.n	800cfdc <_strtol_l.constprop.0+0x8c>
 800cfd8:	45a2      	cmp	sl, r4
 800cfda:	db19      	blt.n	800d010 <_strtol_l.constprop.0+0xc0>
 800cfdc:	fb06 4603 	mla	r6, r6, r3, r4
 800cfe0:	f04f 0c01 	mov.w	ip, #1
 800cfe4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cfe8:	e7e8      	b.n	800cfbc <_strtol_l.constprop.0+0x6c>
 800cfea:	2c2b      	cmp	r4, #43	; 0x2b
 800cfec:	bf04      	itt	eq
 800cfee:	782c      	ldrbeq	r4, [r5, #0]
 800cff0:	1cb5      	addeq	r5, r6, #2
 800cff2:	e7ca      	b.n	800cf8a <_strtol_l.constprop.0+0x3a>
 800cff4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cff8:	f1be 0f19 	cmp.w	lr, #25
 800cffc:	d801      	bhi.n	800d002 <_strtol_l.constprop.0+0xb2>
 800cffe:	3c37      	subs	r4, #55	; 0x37
 800d000:	e7e2      	b.n	800cfc8 <_strtol_l.constprop.0+0x78>
 800d002:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d006:	f1be 0f19 	cmp.w	lr, #25
 800d00a:	d804      	bhi.n	800d016 <_strtol_l.constprop.0+0xc6>
 800d00c:	3c57      	subs	r4, #87	; 0x57
 800d00e:	e7db      	b.n	800cfc8 <_strtol_l.constprop.0+0x78>
 800d010:	f04f 3cff 	mov.w	ip, #4294967295
 800d014:	e7e6      	b.n	800cfe4 <_strtol_l.constprop.0+0x94>
 800d016:	f1bc 0f00 	cmp.w	ip, #0
 800d01a:	da05      	bge.n	800d028 <_strtol_l.constprop.0+0xd8>
 800d01c:	2322      	movs	r3, #34	; 0x22
 800d01e:	6003      	str	r3, [r0, #0]
 800d020:	4646      	mov	r6, r8
 800d022:	b942      	cbnz	r2, 800d036 <_strtol_l.constprop.0+0xe6>
 800d024:	4630      	mov	r0, r6
 800d026:	e79e      	b.n	800cf66 <_strtol_l.constprop.0+0x16>
 800d028:	b107      	cbz	r7, 800d02c <_strtol_l.constprop.0+0xdc>
 800d02a:	4276      	negs	r6, r6
 800d02c:	2a00      	cmp	r2, #0
 800d02e:	d0f9      	beq.n	800d024 <_strtol_l.constprop.0+0xd4>
 800d030:	f1bc 0f00 	cmp.w	ip, #0
 800d034:	d000      	beq.n	800d038 <_strtol_l.constprop.0+0xe8>
 800d036:	1e69      	subs	r1, r5, #1
 800d038:	6011      	str	r1, [r2, #0]
 800d03a:	e7f3      	b.n	800d024 <_strtol_l.constprop.0+0xd4>
 800d03c:	2430      	movs	r4, #48	; 0x30
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d1b1      	bne.n	800cfa6 <_strtol_l.constprop.0+0x56>
 800d042:	2308      	movs	r3, #8
 800d044:	e7af      	b.n	800cfa6 <_strtol_l.constprop.0+0x56>
 800d046:	2c30      	cmp	r4, #48	; 0x30
 800d048:	d0a5      	beq.n	800cf96 <_strtol_l.constprop.0+0x46>
 800d04a:	230a      	movs	r3, #10
 800d04c:	e7ab      	b.n	800cfa6 <_strtol_l.constprop.0+0x56>
 800d04e:	bf00      	nop
 800d050:	080101f1 	.word	0x080101f1

0800d054 <_strtol_r>:
 800d054:	f7ff bf7c 	b.w	800cf50 <_strtol_l.constprop.0>

0800d058 <quorem>:
 800d058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d05c:	6903      	ldr	r3, [r0, #16]
 800d05e:	690c      	ldr	r4, [r1, #16]
 800d060:	42a3      	cmp	r3, r4
 800d062:	4607      	mov	r7, r0
 800d064:	f2c0 8081 	blt.w	800d16a <quorem+0x112>
 800d068:	3c01      	subs	r4, #1
 800d06a:	f101 0814 	add.w	r8, r1, #20
 800d06e:	f100 0514 	add.w	r5, r0, #20
 800d072:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d076:	9301      	str	r3, [sp, #4]
 800d078:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d07c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d080:	3301      	adds	r3, #1
 800d082:	429a      	cmp	r2, r3
 800d084:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d088:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d08c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d090:	d331      	bcc.n	800d0f6 <quorem+0x9e>
 800d092:	f04f 0e00 	mov.w	lr, #0
 800d096:	4640      	mov	r0, r8
 800d098:	46ac      	mov	ip, r5
 800d09a:	46f2      	mov	sl, lr
 800d09c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d0a0:	b293      	uxth	r3, r2
 800d0a2:	fb06 e303 	mla	r3, r6, r3, lr
 800d0a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	ebaa 0303 	sub.w	r3, sl, r3
 800d0b0:	f8dc a000 	ldr.w	sl, [ip]
 800d0b4:	0c12      	lsrs	r2, r2, #16
 800d0b6:	fa13 f38a 	uxtah	r3, r3, sl
 800d0ba:	fb06 e202 	mla	r2, r6, r2, lr
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	9b00      	ldr	r3, [sp, #0]
 800d0c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d0c6:	b292      	uxth	r2, r2
 800d0c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d0cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d0d0:	f8bd 3000 	ldrh.w	r3, [sp]
 800d0d4:	4581      	cmp	r9, r0
 800d0d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0da:	f84c 3b04 	str.w	r3, [ip], #4
 800d0de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d0e2:	d2db      	bcs.n	800d09c <quorem+0x44>
 800d0e4:	f855 300b 	ldr.w	r3, [r5, fp]
 800d0e8:	b92b      	cbnz	r3, 800d0f6 <quorem+0x9e>
 800d0ea:	9b01      	ldr	r3, [sp, #4]
 800d0ec:	3b04      	subs	r3, #4
 800d0ee:	429d      	cmp	r5, r3
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	d32e      	bcc.n	800d152 <quorem+0xfa>
 800d0f4:	613c      	str	r4, [r7, #16]
 800d0f6:	4638      	mov	r0, r7
 800d0f8:	f001 fc82 	bl	800ea00 <__mcmp>
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	db24      	blt.n	800d14a <quorem+0xf2>
 800d100:	3601      	adds	r6, #1
 800d102:	4628      	mov	r0, r5
 800d104:	f04f 0c00 	mov.w	ip, #0
 800d108:	f858 2b04 	ldr.w	r2, [r8], #4
 800d10c:	f8d0 e000 	ldr.w	lr, [r0]
 800d110:	b293      	uxth	r3, r2
 800d112:	ebac 0303 	sub.w	r3, ip, r3
 800d116:	0c12      	lsrs	r2, r2, #16
 800d118:	fa13 f38e 	uxtah	r3, r3, lr
 800d11c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d120:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d124:	b29b      	uxth	r3, r3
 800d126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d12a:	45c1      	cmp	r9, r8
 800d12c:	f840 3b04 	str.w	r3, [r0], #4
 800d130:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d134:	d2e8      	bcs.n	800d108 <quorem+0xb0>
 800d136:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d13a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d13e:	b922      	cbnz	r2, 800d14a <quorem+0xf2>
 800d140:	3b04      	subs	r3, #4
 800d142:	429d      	cmp	r5, r3
 800d144:	461a      	mov	r2, r3
 800d146:	d30a      	bcc.n	800d15e <quorem+0x106>
 800d148:	613c      	str	r4, [r7, #16]
 800d14a:	4630      	mov	r0, r6
 800d14c:	b003      	add	sp, #12
 800d14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d152:	6812      	ldr	r2, [r2, #0]
 800d154:	3b04      	subs	r3, #4
 800d156:	2a00      	cmp	r2, #0
 800d158:	d1cc      	bne.n	800d0f4 <quorem+0x9c>
 800d15a:	3c01      	subs	r4, #1
 800d15c:	e7c7      	b.n	800d0ee <quorem+0x96>
 800d15e:	6812      	ldr	r2, [r2, #0]
 800d160:	3b04      	subs	r3, #4
 800d162:	2a00      	cmp	r2, #0
 800d164:	d1f0      	bne.n	800d148 <quorem+0xf0>
 800d166:	3c01      	subs	r4, #1
 800d168:	e7eb      	b.n	800d142 <quorem+0xea>
 800d16a:	2000      	movs	r0, #0
 800d16c:	e7ee      	b.n	800d14c <quorem+0xf4>
	...

0800d170 <_dtoa_r>:
 800d170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d174:	ed2d 8b04 	vpush	{d8-d9}
 800d178:	ec57 6b10 	vmov	r6, r7, d0
 800d17c:	b093      	sub	sp, #76	; 0x4c
 800d17e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d180:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d184:	9106      	str	r1, [sp, #24]
 800d186:	ee10 aa10 	vmov	sl, s0
 800d18a:	4604      	mov	r4, r0
 800d18c:	9209      	str	r2, [sp, #36]	; 0x24
 800d18e:	930c      	str	r3, [sp, #48]	; 0x30
 800d190:	46bb      	mov	fp, r7
 800d192:	b975      	cbnz	r5, 800d1b2 <_dtoa_r+0x42>
 800d194:	2010      	movs	r0, #16
 800d196:	f001 f94d 	bl	800e434 <malloc>
 800d19a:	4602      	mov	r2, r0
 800d19c:	6260      	str	r0, [r4, #36]	; 0x24
 800d19e:	b920      	cbnz	r0, 800d1aa <_dtoa_r+0x3a>
 800d1a0:	4ba7      	ldr	r3, [pc, #668]	; (800d440 <_dtoa_r+0x2d0>)
 800d1a2:	21ea      	movs	r1, #234	; 0xea
 800d1a4:	48a7      	ldr	r0, [pc, #668]	; (800d444 <_dtoa_r+0x2d4>)
 800d1a6:	f002 f8ad 	bl	800f304 <__assert_func>
 800d1aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d1ae:	6005      	str	r5, [r0, #0]
 800d1b0:	60c5      	str	r5, [r0, #12]
 800d1b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1b4:	6819      	ldr	r1, [r3, #0]
 800d1b6:	b151      	cbz	r1, 800d1ce <_dtoa_r+0x5e>
 800d1b8:	685a      	ldr	r2, [r3, #4]
 800d1ba:	604a      	str	r2, [r1, #4]
 800d1bc:	2301      	movs	r3, #1
 800d1be:	4093      	lsls	r3, r2
 800d1c0:	608b      	str	r3, [r1, #8]
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	f001 f990 	bl	800e4e8 <_Bfree>
 800d1c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	601a      	str	r2, [r3, #0]
 800d1ce:	1e3b      	subs	r3, r7, #0
 800d1d0:	bfaa      	itet	ge
 800d1d2:	2300      	movge	r3, #0
 800d1d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d1d8:	f8c8 3000 	strge.w	r3, [r8]
 800d1dc:	4b9a      	ldr	r3, [pc, #616]	; (800d448 <_dtoa_r+0x2d8>)
 800d1de:	bfbc      	itt	lt
 800d1e0:	2201      	movlt	r2, #1
 800d1e2:	f8c8 2000 	strlt.w	r2, [r8]
 800d1e6:	ea33 030b 	bics.w	r3, r3, fp
 800d1ea:	d11b      	bne.n	800d224 <_dtoa_r+0xb4>
 800d1ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d1ee:	f242 730f 	movw	r3, #9999	; 0x270f
 800d1f2:	6013      	str	r3, [r2, #0]
 800d1f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d1f8:	4333      	orrs	r3, r6
 800d1fa:	f000 8592 	beq.w	800dd22 <_dtoa_r+0xbb2>
 800d1fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d200:	b963      	cbnz	r3, 800d21c <_dtoa_r+0xac>
 800d202:	4b92      	ldr	r3, [pc, #584]	; (800d44c <_dtoa_r+0x2dc>)
 800d204:	e022      	b.n	800d24c <_dtoa_r+0xdc>
 800d206:	4b92      	ldr	r3, [pc, #584]	; (800d450 <_dtoa_r+0x2e0>)
 800d208:	9301      	str	r3, [sp, #4]
 800d20a:	3308      	adds	r3, #8
 800d20c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d20e:	6013      	str	r3, [r2, #0]
 800d210:	9801      	ldr	r0, [sp, #4]
 800d212:	b013      	add	sp, #76	; 0x4c
 800d214:	ecbd 8b04 	vpop	{d8-d9}
 800d218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d21c:	4b8b      	ldr	r3, [pc, #556]	; (800d44c <_dtoa_r+0x2dc>)
 800d21e:	9301      	str	r3, [sp, #4]
 800d220:	3303      	adds	r3, #3
 800d222:	e7f3      	b.n	800d20c <_dtoa_r+0x9c>
 800d224:	2200      	movs	r2, #0
 800d226:	2300      	movs	r3, #0
 800d228:	4650      	mov	r0, sl
 800d22a:	4659      	mov	r1, fp
 800d22c:	f7f3 fc54 	bl	8000ad8 <__aeabi_dcmpeq>
 800d230:	ec4b ab19 	vmov	d9, sl, fp
 800d234:	4680      	mov	r8, r0
 800d236:	b158      	cbz	r0, 800d250 <_dtoa_r+0xe0>
 800d238:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d23a:	2301      	movs	r3, #1
 800d23c:	6013      	str	r3, [r2, #0]
 800d23e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d240:	2b00      	cmp	r3, #0
 800d242:	f000 856b 	beq.w	800dd1c <_dtoa_r+0xbac>
 800d246:	4883      	ldr	r0, [pc, #524]	; (800d454 <_dtoa_r+0x2e4>)
 800d248:	6018      	str	r0, [r3, #0]
 800d24a:	1e43      	subs	r3, r0, #1
 800d24c:	9301      	str	r3, [sp, #4]
 800d24e:	e7df      	b.n	800d210 <_dtoa_r+0xa0>
 800d250:	ec4b ab10 	vmov	d0, sl, fp
 800d254:	aa10      	add	r2, sp, #64	; 0x40
 800d256:	a911      	add	r1, sp, #68	; 0x44
 800d258:	4620      	mov	r0, r4
 800d25a:	f001 fcf3 	bl	800ec44 <__d2b>
 800d25e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d262:	ee08 0a10 	vmov	s16, r0
 800d266:	2d00      	cmp	r5, #0
 800d268:	f000 8084 	beq.w	800d374 <_dtoa_r+0x204>
 800d26c:	ee19 3a90 	vmov	r3, s19
 800d270:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d274:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d278:	4656      	mov	r6, sl
 800d27a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d27e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d282:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d286:	4b74      	ldr	r3, [pc, #464]	; (800d458 <_dtoa_r+0x2e8>)
 800d288:	2200      	movs	r2, #0
 800d28a:	4630      	mov	r0, r6
 800d28c:	4639      	mov	r1, r7
 800d28e:	f7f3 f803 	bl	8000298 <__aeabi_dsub>
 800d292:	a365      	add	r3, pc, #404	; (adr r3, 800d428 <_dtoa_r+0x2b8>)
 800d294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d298:	f7f3 f9b6 	bl	8000608 <__aeabi_dmul>
 800d29c:	a364      	add	r3, pc, #400	; (adr r3, 800d430 <_dtoa_r+0x2c0>)
 800d29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a2:	f7f2 fffb 	bl	800029c <__adddf3>
 800d2a6:	4606      	mov	r6, r0
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	460f      	mov	r7, r1
 800d2ac:	f7f3 f942 	bl	8000534 <__aeabi_i2d>
 800d2b0:	a361      	add	r3, pc, #388	; (adr r3, 800d438 <_dtoa_r+0x2c8>)
 800d2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b6:	f7f3 f9a7 	bl	8000608 <__aeabi_dmul>
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	460b      	mov	r3, r1
 800d2be:	4630      	mov	r0, r6
 800d2c0:	4639      	mov	r1, r7
 800d2c2:	f7f2 ffeb 	bl	800029c <__adddf3>
 800d2c6:	4606      	mov	r6, r0
 800d2c8:	460f      	mov	r7, r1
 800d2ca:	f7f3 fc4d 	bl	8000b68 <__aeabi_d2iz>
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	9000      	str	r0, [sp, #0]
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	4630      	mov	r0, r6
 800d2d6:	4639      	mov	r1, r7
 800d2d8:	f7f3 fc08 	bl	8000aec <__aeabi_dcmplt>
 800d2dc:	b150      	cbz	r0, 800d2f4 <_dtoa_r+0x184>
 800d2de:	9800      	ldr	r0, [sp, #0]
 800d2e0:	f7f3 f928 	bl	8000534 <__aeabi_i2d>
 800d2e4:	4632      	mov	r2, r6
 800d2e6:	463b      	mov	r3, r7
 800d2e8:	f7f3 fbf6 	bl	8000ad8 <__aeabi_dcmpeq>
 800d2ec:	b910      	cbnz	r0, 800d2f4 <_dtoa_r+0x184>
 800d2ee:	9b00      	ldr	r3, [sp, #0]
 800d2f0:	3b01      	subs	r3, #1
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	9b00      	ldr	r3, [sp, #0]
 800d2f6:	2b16      	cmp	r3, #22
 800d2f8:	d85a      	bhi.n	800d3b0 <_dtoa_r+0x240>
 800d2fa:	9a00      	ldr	r2, [sp, #0]
 800d2fc:	4b57      	ldr	r3, [pc, #348]	; (800d45c <_dtoa_r+0x2ec>)
 800d2fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d306:	ec51 0b19 	vmov	r0, r1, d9
 800d30a:	f7f3 fbef 	bl	8000aec <__aeabi_dcmplt>
 800d30e:	2800      	cmp	r0, #0
 800d310:	d050      	beq.n	800d3b4 <_dtoa_r+0x244>
 800d312:	9b00      	ldr	r3, [sp, #0]
 800d314:	3b01      	subs	r3, #1
 800d316:	9300      	str	r3, [sp, #0]
 800d318:	2300      	movs	r3, #0
 800d31a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d31c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d31e:	1b5d      	subs	r5, r3, r5
 800d320:	1e6b      	subs	r3, r5, #1
 800d322:	9305      	str	r3, [sp, #20]
 800d324:	bf45      	ittet	mi
 800d326:	f1c5 0301 	rsbmi	r3, r5, #1
 800d32a:	9304      	strmi	r3, [sp, #16]
 800d32c:	2300      	movpl	r3, #0
 800d32e:	2300      	movmi	r3, #0
 800d330:	bf4c      	ite	mi
 800d332:	9305      	strmi	r3, [sp, #20]
 800d334:	9304      	strpl	r3, [sp, #16]
 800d336:	9b00      	ldr	r3, [sp, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	db3d      	blt.n	800d3b8 <_dtoa_r+0x248>
 800d33c:	9b05      	ldr	r3, [sp, #20]
 800d33e:	9a00      	ldr	r2, [sp, #0]
 800d340:	920a      	str	r2, [sp, #40]	; 0x28
 800d342:	4413      	add	r3, r2
 800d344:	9305      	str	r3, [sp, #20]
 800d346:	2300      	movs	r3, #0
 800d348:	9307      	str	r3, [sp, #28]
 800d34a:	9b06      	ldr	r3, [sp, #24]
 800d34c:	2b09      	cmp	r3, #9
 800d34e:	f200 8089 	bhi.w	800d464 <_dtoa_r+0x2f4>
 800d352:	2b05      	cmp	r3, #5
 800d354:	bfc4      	itt	gt
 800d356:	3b04      	subgt	r3, #4
 800d358:	9306      	strgt	r3, [sp, #24]
 800d35a:	9b06      	ldr	r3, [sp, #24]
 800d35c:	f1a3 0302 	sub.w	r3, r3, #2
 800d360:	bfcc      	ite	gt
 800d362:	2500      	movgt	r5, #0
 800d364:	2501      	movle	r5, #1
 800d366:	2b03      	cmp	r3, #3
 800d368:	f200 8087 	bhi.w	800d47a <_dtoa_r+0x30a>
 800d36c:	e8df f003 	tbb	[pc, r3]
 800d370:	59383a2d 	.word	0x59383a2d
 800d374:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d378:	441d      	add	r5, r3
 800d37a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d37e:	2b20      	cmp	r3, #32
 800d380:	bfc1      	itttt	gt
 800d382:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d386:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d38a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d38e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d392:	bfda      	itte	le
 800d394:	f1c3 0320 	rsble	r3, r3, #32
 800d398:	fa06 f003 	lslle.w	r0, r6, r3
 800d39c:	4318      	orrgt	r0, r3
 800d39e:	f7f3 f8b9 	bl	8000514 <__aeabi_ui2d>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	4606      	mov	r6, r0
 800d3a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d3aa:	3d01      	subs	r5, #1
 800d3ac:	930e      	str	r3, [sp, #56]	; 0x38
 800d3ae:	e76a      	b.n	800d286 <_dtoa_r+0x116>
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e7b2      	b.n	800d31a <_dtoa_r+0x1aa>
 800d3b4:	900b      	str	r0, [sp, #44]	; 0x2c
 800d3b6:	e7b1      	b.n	800d31c <_dtoa_r+0x1ac>
 800d3b8:	9b04      	ldr	r3, [sp, #16]
 800d3ba:	9a00      	ldr	r2, [sp, #0]
 800d3bc:	1a9b      	subs	r3, r3, r2
 800d3be:	9304      	str	r3, [sp, #16]
 800d3c0:	4253      	negs	r3, r2
 800d3c2:	9307      	str	r3, [sp, #28]
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	930a      	str	r3, [sp, #40]	; 0x28
 800d3c8:	e7bf      	b.n	800d34a <_dtoa_r+0x1da>
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	9308      	str	r3, [sp, #32]
 800d3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	dc55      	bgt.n	800d480 <_dtoa_r+0x310>
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d3da:	461a      	mov	r2, r3
 800d3dc:	9209      	str	r2, [sp, #36]	; 0x24
 800d3de:	e00c      	b.n	800d3fa <_dtoa_r+0x28a>
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	e7f3      	b.n	800d3cc <_dtoa_r+0x25c>
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3e8:	9308      	str	r3, [sp, #32]
 800d3ea:	9b00      	ldr	r3, [sp, #0]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	9302      	str	r3, [sp, #8]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	9303      	str	r3, [sp, #12]
 800d3f6:	bfb8      	it	lt
 800d3f8:	2301      	movlt	r3, #1
 800d3fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	6042      	str	r2, [r0, #4]
 800d400:	2204      	movs	r2, #4
 800d402:	f102 0614 	add.w	r6, r2, #20
 800d406:	429e      	cmp	r6, r3
 800d408:	6841      	ldr	r1, [r0, #4]
 800d40a:	d93d      	bls.n	800d488 <_dtoa_r+0x318>
 800d40c:	4620      	mov	r0, r4
 800d40e:	f001 f82b 	bl	800e468 <_Balloc>
 800d412:	9001      	str	r0, [sp, #4]
 800d414:	2800      	cmp	r0, #0
 800d416:	d13b      	bne.n	800d490 <_dtoa_r+0x320>
 800d418:	4b11      	ldr	r3, [pc, #68]	; (800d460 <_dtoa_r+0x2f0>)
 800d41a:	4602      	mov	r2, r0
 800d41c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d420:	e6c0      	b.n	800d1a4 <_dtoa_r+0x34>
 800d422:	2301      	movs	r3, #1
 800d424:	e7df      	b.n	800d3e6 <_dtoa_r+0x276>
 800d426:	bf00      	nop
 800d428:	636f4361 	.word	0x636f4361
 800d42c:	3fd287a7 	.word	0x3fd287a7
 800d430:	8b60c8b3 	.word	0x8b60c8b3
 800d434:	3fc68a28 	.word	0x3fc68a28
 800d438:	509f79fb 	.word	0x509f79fb
 800d43c:	3fd34413 	.word	0x3fd34413
 800d440:	080102fe 	.word	0x080102fe
 800d444:	08010315 	.word	0x08010315
 800d448:	7ff00000 	.word	0x7ff00000
 800d44c:	080102fa 	.word	0x080102fa
 800d450:	080102f1 	.word	0x080102f1
 800d454:	08010175 	.word	0x08010175
 800d458:	3ff80000 	.word	0x3ff80000
 800d45c:	08010480 	.word	0x08010480
 800d460:	08010370 	.word	0x08010370
 800d464:	2501      	movs	r5, #1
 800d466:	2300      	movs	r3, #0
 800d468:	9306      	str	r3, [sp, #24]
 800d46a:	9508      	str	r5, [sp, #32]
 800d46c:	f04f 33ff 	mov.w	r3, #4294967295
 800d470:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d474:	2200      	movs	r2, #0
 800d476:	2312      	movs	r3, #18
 800d478:	e7b0      	b.n	800d3dc <_dtoa_r+0x26c>
 800d47a:	2301      	movs	r3, #1
 800d47c:	9308      	str	r3, [sp, #32]
 800d47e:	e7f5      	b.n	800d46c <_dtoa_r+0x2fc>
 800d480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d482:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d486:	e7b8      	b.n	800d3fa <_dtoa_r+0x28a>
 800d488:	3101      	adds	r1, #1
 800d48a:	6041      	str	r1, [r0, #4]
 800d48c:	0052      	lsls	r2, r2, #1
 800d48e:	e7b8      	b.n	800d402 <_dtoa_r+0x292>
 800d490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d492:	9a01      	ldr	r2, [sp, #4]
 800d494:	601a      	str	r2, [r3, #0]
 800d496:	9b03      	ldr	r3, [sp, #12]
 800d498:	2b0e      	cmp	r3, #14
 800d49a:	f200 809d 	bhi.w	800d5d8 <_dtoa_r+0x468>
 800d49e:	2d00      	cmp	r5, #0
 800d4a0:	f000 809a 	beq.w	800d5d8 <_dtoa_r+0x468>
 800d4a4:	9b00      	ldr	r3, [sp, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	dd32      	ble.n	800d510 <_dtoa_r+0x3a0>
 800d4aa:	4ab7      	ldr	r2, [pc, #732]	; (800d788 <_dtoa_r+0x618>)
 800d4ac:	f003 030f 	and.w	r3, r3, #15
 800d4b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d4b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d4b8:	9b00      	ldr	r3, [sp, #0]
 800d4ba:	05d8      	lsls	r0, r3, #23
 800d4bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d4c0:	d516      	bpl.n	800d4f0 <_dtoa_r+0x380>
 800d4c2:	4bb2      	ldr	r3, [pc, #712]	; (800d78c <_dtoa_r+0x61c>)
 800d4c4:	ec51 0b19 	vmov	r0, r1, d9
 800d4c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d4cc:	f7f3 f9c6 	bl	800085c <__aeabi_ddiv>
 800d4d0:	f007 070f 	and.w	r7, r7, #15
 800d4d4:	4682      	mov	sl, r0
 800d4d6:	468b      	mov	fp, r1
 800d4d8:	2503      	movs	r5, #3
 800d4da:	4eac      	ldr	r6, [pc, #688]	; (800d78c <_dtoa_r+0x61c>)
 800d4dc:	b957      	cbnz	r7, 800d4f4 <_dtoa_r+0x384>
 800d4de:	4642      	mov	r2, r8
 800d4e0:	464b      	mov	r3, r9
 800d4e2:	4650      	mov	r0, sl
 800d4e4:	4659      	mov	r1, fp
 800d4e6:	f7f3 f9b9 	bl	800085c <__aeabi_ddiv>
 800d4ea:	4682      	mov	sl, r0
 800d4ec:	468b      	mov	fp, r1
 800d4ee:	e028      	b.n	800d542 <_dtoa_r+0x3d2>
 800d4f0:	2502      	movs	r5, #2
 800d4f2:	e7f2      	b.n	800d4da <_dtoa_r+0x36a>
 800d4f4:	07f9      	lsls	r1, r7, #31
 800d4f6:	d508      	bpl.n	800d50a <_dtoa_r+0x39a>
 800d4f8:	4640      	mov	r0, r8
 800d4fa:	4649      	mov	r1, r9
 800d4fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d500:	f7f3 f882 	bl	8000608 <__aeabi_dmul>
 800d504:	3501      	adds	r5, #1
 800d506:	4680      	mov	r8, r0
 800d508:	4689      	mov	r9, r1
 800d50a:	107f      	asrs	r7, r7, #1
 800d50c:	3608      	adds	r6, #8
 800d50e:	e7e5      	b.n	800d4dc <_dtoa_r+0x36c>
 800d510:	f000 809b 	beq.w	800d64a <_dtoa_r+0x4da>
 800d514:	9b00      	ldr	r3, [sp, #0]
 800d516:	4f9d      	ldr	r7, [pc, #628]	; (800d78c <_dtoa_r+0x61c>)
 800d518:	425e      	negs	r6, r3
 800d51a:	4b9b      	ldr	r3, [pc, #620]	; (800d788 <_dtoa_r+0x618>)
 800d51c:	f006 020f 	and.w	r2, r6, #15
 800d520:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d528:	ec51 0b19 	vmov	r0, r1, d9
 800d52c:	f7f3 f86c 	bl	8000608 <__aeabi_dmul>
 800d530:	1136      	asrs	r6, r6, #4
 800d532:	4682      	mov	sl, r0
 800d534:	468b      	mov	fp, r1
 800d536:	2300      	movs	r3, #0
 800d538:	2502      	movs	r5, #2
 800d53a:	2e00      	cmp	r6, #0
 800d53c:	d17a      	bne.n	800d634 <_dtoa_r+0x4c4>
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d1d3      	bne.n	800d4ea <_dtoa_r+0x37a>
 800d542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d544:	2b00      	cmp	r3, #0
 800d546:	f000 8082 	beq.w	800d64e <_dtoa_r+0x4de>
 800d54a:	4b91      	ldr	r3, [pc, #580]	; (800d790 <_dtoa_r+0x620>)
 800d54c:	2200      	movs	r2, #0
 800d54e:	4650      	mov	r0, sl
 800d550:	4659      	mov	r1, fp
 800d552:	f7f3 facb 	bl	8000aec <__aeabi_dcmplt>
 800d556:	2800      	cmp	r0, #0
 800d558:	d079      	beq.n	800d64e <_dtoa_r+0x4de>
 800d55a:	9b03      	ldr	r3, [sp, #12]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d076      	beq.n	800d64e <_dtoa_r+0x4de>
 800d560:	9b02      	ldr	r3, [sp, #8]
 800d562:	2b00      	cmp	r3, #0
 800d564:	dd36      	ble.n	800d5d4 <_dtoa_r+0x464>
 800d566:	9b00      	ldr	r3, [sp, #0]
 800d568:	4650      	mov	r0, sl
 800d56a:	4659      	mov	r1, fp
 800d56c:	1e5f      	subs	r7, r3, #1
 800d56e:	2200      	movs	r2, #0
 800d570:	4b88      	ldr	r3, [pc, #544]	; (800d794 <_dtoa_r+0x624>)
 800d572:	f7f3 f849 	bl	8000608 <__aeabi_dmul>
 800d576:	9e02      	ldr	r6, [sp, #8]
 800d578:	4682      	mov	sl, r0
 800d57a:	468b      	mov	fp, r1
 800d57c:	3501      	adds	r5, #1
 800d57e:	4628      	mov	r0, r5
 800d580:	f7f2 ffd8 	bl	8000534 <__aeabi_i2d>
 800d584:	4652      	mov	r2, sl
 800d586:	465b      	mov	r3, fp
 800d588:	f7f3 f83e 	bl	8000608 <__aeabi_dmul>
 800d58c:	4b82      	ldr	r3, [pc, #520]	; (800d798 <_dtoa_r+0x628>)
 800d58e:	2200      	movs	r2, #0
 800d590:	f7f2 fe84 	bl	800029c <__adddf3>
 800d594:	46d0      	mov	r8, sl
 800d596:	46d9      	mov	r9, fp
 800d598:	4682      	mov	sl, r0
 800d59a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d59e:	2e00      	cmp	r6, #0
 800d5a0:	d158      	bne.n	800d654 <_dtoa_r+0x4e4>
 800d5a2:	4b7e      	ldr	r3, [pc, #504]	; (800d79c <_dtoa_r+0x62c>)
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	4640      	mov	r0, r8
 800d5a8:	4649      	mov	r1, r9
 800d5aa:	f7f2 fe75 	bl	8000298 <__aeabi_dsub>
 800d5ae:	4652      	mov	r2, sl
 800d5b0:	465b      	mov	r3, fp
 800d5b2:	4680      	mov	r8, r0
 800d5b4:	4689      	mov	r9, r1
 800d5b6:	f7f3 fab7 	bl	8000b28 <__aeabi_dcmpgt>
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	f040 8295 	bne.w	800daea <_dtoa_r+0x97a>
 800d5c0:	4652      	mov	r2, sl
 800d5c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d5c6:	4640      	mov	r0, r8
 800d5c8:	4649      	mov	r1, r9
 800d5ca:	f7f3 fa8f 	bl	8000aec <__aeabi_dcmplt>
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	f040 8289 	bne.w	800dae6 <_dtoa_r+0x976>
 800d5d4:	ec5b ab19 	vmov	sl, fp, d9
 800d5d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	f2c0 8148 	blt.w	800d870 <_dtoa_r+0x700>
 800d5e0:	9a00      	ldr	r2, [sp, #0]
 800d5e2:	2a0e      	cmp	r2, #14
 800d5e4:	f300 8144 	bgt.w	800d870 <_dtoa_r+0x700>
 800d5e8:	4b67      	ldr	r3, [pc, #412]	; (800d788 <_dtoa_r+0x618>)
 800d5ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f280 80d5 	bge.w	800d7a4 <_dtoa_r+0x634>
 800d5fa:	9b03      	ldr	r3, [sp, #12]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f300 80d1 	bgt.w	800d7a4 <_dtoa_r+0x634>
 800d602:	f040 826f 	bne.w	800dae4 <_dtoa_r+0x974>
 800d606:	4b65      	ldr	r3, [pc, #404]	; (800d79c <_dtoa_r+0x62c>)
 800d608:	2200      	movs	r2, #0
 800d60a:	4640      	mov	r0, r8
 800d60c:	4649      	mov	r1, r9
 800d60e:	f7f2 fffb 	bl	8000608 <__aeabi_dmul>
 800d612:	4652      	mov	r2, sl
 800d614:	465b      	mov	r3, fp
 800d616:	f7f3 fa7d 	bl	8000b14 <__aeabi_dcmpge>
 800d61a:	9e03      	ldr	r6, [sp, #12]
 800d61c:	4637      	mov	r7, r6
 800d61e:	2800      	cmp	r0, #0
 800d620:	f040 8245 	bne.w	800daae <_dtoa_r+0x93e>
 800d624:	9d01      	ldr	r5, [sp, #4]
 800d626:	2331      	movs	r3, #49	; 0x31
 800d628:	f805 3b01 	strb.w	r3, [r5], #1
 800d62c:	9b00      	ldr	r3, [sp, #0]
 800d62e:	3301      	adds	r3, #1
 800d630:	9300      	str	r3, [sp, #0]
 800d632:	e240      	b.n	800dab6 <_dtoa_r+0x946>
 800d634:	07f2      	lsls	r2, r6, #31
 800d636:	d505      	bpl.n	800d644 <_dtoa_r+0x4d4>
 800d638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d63c:	f7f2 ffe4 	bl	8000608 <__aeabi_dmul>
 800d640:	3501      	adds	r5, #1
 800d642:	2301      	movs	r3, #1
 800d644:	1076      	asrs	r6, r6, #1
 800d646:	3708      	adds	r7, #8
 800d648:	e777      	b.n	800d53a <_dtoa_r+0x3ca>
 800d64a:	2502      	movs	r5, #2
 800d64c:	e779      	b.n	800d542 <_dtoa_r+0x3d2>
 800d64e:	9f00      	ldr	r7, [sp, #0]
 800d650:	9e03      	ldr	r6, [sp, #12]
 800d652:	e794      	b.n	800d57e <_dtoa_r+0x40e>
 800d654:	9901      	ldr	r1, [sp, #4]
 800d656:	4b4c      	ldr	r3, [pc, #304]	; (800d788 <_dtoa_r+0x618>)
 800d658:	4431      	add	r1, r6
 800d65a:	910d      	str	r1, [sp, #52]	; 0x34
 800d65c:	9908      	ldr	r1, [sp, #32]
 800d65e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d662:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d666:	2900      	cmp	r1, #0
 800d668:	d043      	beq.n	800d6f2 <_dtoa_r+0x582>
 800d66a:	494d      	ldr	r1, [pc, #308]	; (800d7a0 <_dtoa_r+0x630>)
 800d66c:	2000      	movs	r0, #0
 800d66e:	f7f3 f8f5 	bl	800085c <__aeabi_ddiv>
 800d672:	4652      	mov	r2, sl
 800d674:	465b      	mov	r3, fp
 800d676:	f7f2 fe0f 	bl	8000298 <__aeabi_dsub>
 800d67a:	9d01      	ldr	r5, [sp, #4]
 800d67c:	4682      	mov	sl, r0
 800d67e:	468b      	mov	fp, r1
 800d680:	4649      	mov	r1, r9
 800d682:	4640      	mov	r0, r8
 800d684:	f7f3 fa70 	bl	8000b68 <__aeabi_d2iz>
 800d688:	4606      	mov	r6, r0
 800d68a:	f7f2 ff53 	bl	8000534 <__aeabi_i2d>
 800d68e:	4602      	mov	r2, r0
 800d690:	460b      	mov	r3, r1
 800d692:	4640      	mov	r0, r8
 800d694:	4649      	mov	r1, r9
 800d696:	f7f2 fdff 	bl	8000298 <__aeabi_dsub>
 800d69a:	3630      	adds	r6, #48	; 0x30
 800d69c:	f805 6b01 	strb.w	r6, [r5], #1
 800d6a0:	4652      	mov	r2, sl
 800d6a2:	465b      	mov	r3, fp
 800d6a4:	4680      	mov	r8, r0
 800d6a6:	4689      	mov	r9, r1
 800d6a8:	f7f3 fa20 	bl	8000aec <__aeabi_dcmplt>
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	d163      	bne.n	800d778 <_dtoa_r+0x608>
 800d6b0:	4642      	mov	r2, r8
 800d6b2:	464b      	mov	r3, r9
 800d6b4:	4936      	ldr	r1, [pc, #216]	; (800d790 <_dtoa_r+0x620>)
 800d6b6:	2000      	movs	r0, #0
 800d6b8:	f7f2 fdee 	bl	8000298 <__aeabi_dsub>
 800d6bc:	4652      	mov	r2, sl
 800d6be:	465b      	mov	r3, fp
 800d6c0:	f7f3 fa14 	bl	8000aec <__aeabi_dcmplt>
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	f040 80b5 	bne.w	800d834 <_dtoa_r+0x6c4>
 800d6ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6cc:	429d      	cmp	r5, r3
 800d6ce:	d081      	beq.n	800d5d4 <_dtoa_r+0x464>
 800d6d0:	4b30      	ldr	r3, [pc, #192]	; (800d794 <_dtoa_r+0x624>)
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	4650      	mov	r0, sl
 800d6d6:	4659      	mov	r1, fp
 800d6d8:	f7f2 ff96 	bl	8000608 <__aeabi_dmul>
 800d6dc:	4b2d      	ldr	r3, [pc, #180]	; (800d794 <_dtoa_r+0x624>)
 800d6de:	4682      	mov	sl, r0
 800d6e0:	468b      	mov	fp, r1
 800d6e2:	4640      	mov	r0, r8
 800d6e4:	4649      	mov	r1, r9
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	f7f2 ff8e 	bl	8000608 <__aeabi_dmul>
 800d6ec:	4680      	mov	r8, r0
 800d6ee:	4689      	mov	r9, r1
 800d6f0:	e7c6      	b.n	800d680 <_dtoa_r+0x510>
 800d6f2:	4650      	mov	r0, sl
 800d6f4:	4659      	mov	r1, fp
 800d6f6:	f7f2 ff87 	bl	8000608 <__aeabi_dmul>
 800d6fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6fc:	9d01      	ldr	r5, [sp, #4]
 800d6fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800d700:	4682      	mov	sl, r0
 800d702:	468b      	mov	fp, r1
 800d704:	4649      	mov	r1, r9
 800d706:	4640      	mov	r0, r8
 800d708:	f7f3 fa2e 	bl	8000b68 <__aeabi_d2iz>
 800d70c:	4606      	mov	r6, r0
 800d70e:	f7f2 ff11 	bl	8000534 <__aeabi_i2d>
 800d712:	3630      	adds	r6, #48	; 0x30
 800d714:	4602      	mov	r2, r0
 800d716:	460b      	mov	r3, r1
 800d718:	4640      	mov	r0, r8
 800d71a:	4649      	mov	r1, r9
 800d71c:	f7f2 fdbc 	bl	8000298 <__aeabi_dsub>
 800d720:	f805 6b01 	strb.w	r6, [r5], #1
 800d724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d726:	429d      	cmp	r5, r3
 800d728:	4680      	mov	r8, r0
 800d72a:	4689      	mov	r9, r1
 800d72c:	f04f 0200 	mov.w	r2, #0
 800d730:	d124      	bne.n	800d77c <_dtoa_r+0x60c>
 800d732:	4b1b      	ldr	r3, [pc, #108]	; (800d7a0 <_dtoa_r+0x630>)
 800d734:	4650      	mov	r0, sl
 800d736:	4659      	mov	r1, fp
 800d738:	f7f2 fdb0 	bl	800029c <__adddf3>
 800d73c:	4602      	mov	r2, r0
 800d73e:	460b      	mov	r3, r1
 800d740:	4640      	mov	r0, r8
 800d742:	4649      	mov	r1, r9
 800d744:	f7f3 f9f0 	bl	8000b28 <__aeabi_dcmpgt>
 800d748:	2800      	cmp	r0, #0
 800d74a:	d173      	bne.n	800d834 <_dtoa_r+0x6c4>
 800d74c:	4652      	mov	r2, sl
 800d74e:	465b      	mov	r3, fp
 800d750:	4913      	ldr	r1, [pc, #76]	; (800d7a0 <_dtoa_r+0x630>)
 800d752:	2000      	movs	r0, #0
 800d754:	f7f2 fda0 	bl	8000298 <__aeabi_dsub>
 800d758:	4602      	mov	r2, r0
 800d75a:	460b      	mov	r3, r1
 800d75c:	4640      	mov	r0, r8
 800d75e:	4649      	mov	r1, r9
 800d760:	f7f3 f9c4 	bl	8000aec <__aeabi_dcmplt>
 800d764:	2800      	cmp	r0, #0
 800d766:	f43f af35 	beq.w	800d5d4 <_dtoa_r+0x464>
 800d76a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d76c:	1e6b      	subs	r3, r5, #1
 800d76e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d770:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d774:	2b30      	cmp	r3, #48	; 0x30
 800d776:	d0f8      	beq.n	800d76a <_dtoa_r+0x5fa>
 800d778:	9700      	str	r7, [sp, #0]
 800d77a:	e049      	b.n	800d810 <_dtoa_r+0x6a0>
 800d77c:	4b05      	ldr	r3, [pc, #20]	; (800d794 <_dtoa_r+0x624>)
 800d77e:	f7f2 ff43 	bl	8000608 <__aeabi_dmul>
 800d782:	4680      	mov	r8, r0
 800d784:	4689      	mov	r9, r1
 800d786:	e7bd      	b.n	800d704 <_dtoa_r+0x594>
 800d788:	08010480 	.word	0x08010480
 800d78c:	08010458 	.word	0x08010458
 800d790:	3ff00000 	.word	0x3ff00000
 800d794:	40240000 	.word	0x40240000
 800d798:	401c0000 	.word	0x401c0000
 800d79c:	40140000 	.word	0x40140000
 800d7a0:	3fe00000 	.word	0x3fe00000
 800d7a4:	9d01      	ldr	r5, [sp, #4]
 800d7a6:	4656      	mov	r6, sl
 800d7a8:	465f      	mov	r7, fp
 800d7aa:	4642      	mov	r2, r8
 800d7ac:	464b      	mov	r3, r9
 800d7ae:	4630      	mov	r0, r6
 800d7b0:	4639      	mov	r1, r7
 800d7b2:	f7f3 f853 	bl	800085c <__aeabi_ddiv>
 800d7b6:	f7f3 f9d7 	bl	8000b68 <__aeabi_d2iz>
 800d7ba:	4682      	mov	sl, r0
 800d7bc:	f7f2 feba 	bl	8000534 <__aeabi_i2d>
 800d7c0:	4642      	mov	r2, r8
 800d7c2:	464b      	mov	r3, r9
 800d7c4:	f7f2 ff20 	bl	8000608 <__aeabi_dmul>
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	460b      	mov	r3, r1
 800d7cc:	4630      	mov	r0, r6
 800d7ce:	4639      	mov	r1, r7
 800d7d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d7d4:	f7f2 fd60 	bl	8000298 <__aeabi_dsub>
 800d7d8:	f805 6b01 	strb.w	r6, [r5], #1
 800d7dc:	9e01      	ldr	r6, [sp, #4]
 800d7de:	9f03      	ldr	r7, [sp, #12]
 800d7e0:	1bae      	subs	r6, r5, r6
 800d7e2:	42b7      	cmp	r7, r6
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	d135      	bne.n	800d856 <_dtoa_r+0x6e6>
 800d7ea:	f7f2 fd57 	bl	800029c <__adddf3>
 800d7ee:	4642      	mov	r2, r8
 800d7f0:	464b      	mov	r3, r9
 800d7f2:	4606      	mov	r6, r0
 800d7f4:	460f      	mov	r7, r1
 800d7f6:	f7f3 f997 	bl	8000b28 <__aeabi_dcmpgt>
 800d7fa:	b9d0      	cbnz	r0, 800d832 <_dtoa_r+0x6c2>
 800d7fc:	4642      	mov	r2, r8
 800d7fe:	464b      	mov	r3, r9
 800d800:	4630      	mov	r0, r6
 800d802:	4639      	mov	r1, r7
 800d804:	f7f3 f968 	bl	8000ad8 <__aeabi_dcmpeq>
 800d808:	b110      	cbz	r0, 800d810 <_dtoa_r+0x6a0>
 800d80a:	f01a 0f01 	tst.w	sl, #1
 800d80e:	d110      	bne.n	800d832 <_dtoa_r+0x6c2>
 800d810:	4620      	mov	r0, r4
 800d812:	ee18 1a10 	vmov	r1, s16
 800d816:	f000 fe67 	bl	800e4e8 <_Bfree>
 800d81a:	2300      	movs	r3, #0
 800d81c:	9800      	ldr	r0, [sp, #0]
 800d81e:	702b      	strb	r3, [r5, #0]
 800d820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d822:	3001      	adds	r0, #1
 800d824:	6018      	str	r0, [r3, #0]
 800d826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d828:	2b00      	cmp	r3, #0
 800d82a:	f43f acf1 	beq.w	800d210 <_dtoa_r+0xa0>
 800d82e:	601d      	str	r5, [r3, #0]
 800d830:	e4ee      	b.n	800d210 <_dtoa_r+0xa0>
 800d832:	9f00      	ldr	r7, [sp, #0]
 800d834:	462b      	mov	r3, r5
 800d836:	461d      	mov	r5, r3
 800d838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d83c:	2a39      	cmp	r2, #57	; 0x39
 800d83e:	d106      	bne.n	800d84e <_dtoa_r+0x6de>
 800d840:	9a01      	ldr	r2, [sp, #4]
 800d842:	429a      	cmp	r2, r3
 800d844:	d1f7      	bne.n	800d836 <_dtoa_r+0x6c6>
 800d846:	9901      	ldr	r1, [sp, #4]
 800d848:	2230      	movs	r2, #48	; 0x30
 800d84a:	3701      	adds	r7, #1
 800d84c:	700a      	strb	r2, [r1, #0]
 800d84e:	781a      	ldrb	r2, [r3, #0]
 800d850:	3201      	adds	r2, #1
 800d852:	701a      	strb	r2, [r3, #0]
 800d854:	e790      	b.n	800d778 <_dtoa_r+0x608>
 800d856:	4ba6      	ldr	r3, [pc, #664]	; (800daf0 <_dtoa_r+0x980>)
 800d858:	2200      	movs	r2, #0
 800d85a:	f7f2 fed5 	bl	8000608 <__aeabi_dmul>
 800d85e:	2200      	movs	r2, #0
 800d860:	2300      	movs	r3, #0
 800d862:	4606      	mov	r6, r0
 800d864:	460f      	mov	r7, r1
 800d866:	f7f3 f937 	bl	8000ad8 <__aeabi_dcmpeq>
 800d86a:	2800      	cmp	r0, #0
 800d86c:	d09d      	beq.n	800d7aa <_dtoa_r+0x63a>
 800d86e:	e7cf      	b.n	800d810 <_dtoa_r+0x6a0>
 800d870:	9a08      	ldr	r2, [sp, #32]
 800d872:	2a00      	cmp	r2, #0
 800d874:	f000 80d7 	beq.w	800da26 <_dtoa_r+0x8b6>
 800d878:	9a06      	ldr	r2, [sp, #24]
 800d87a:	2a01      	cmp	r2, #1
 800d87c:	f300 80ba 	bgt.w	800d9f4 <_dtoa_r+0x884>
 800d880:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d882:	2a00      	cmp	r2, #0
 800d884:	f000 80b2 	beq.w	800d9ec <_dtoa_r+0x87c>
 800d888:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d88c:	9e07      	ldr	r6, [sp, #28]
 800d88e:	9d04      	ldr	r5, [sp, #16]
 800d890:	9a04      	ldr	r2, [sp, #16]
 800d892:	441a      	add	r2, r3
 800d894:	9204      	str	r2, [sp, #16]
 800d896:	9a05      	ldr	r2, [sp, #20]
 800d898:	2101      	movs	r1, #1
 800d89a:	441a      	add	r2, r3
 800d89c:	4620      	mov	r0, r4
 800d89e:	9205      	str	r2, [sp, #20]
 800d8a0:	f000 ff24 	bl	800e6ec <__i2b>
 800d8a4:	4607      	mov	r7, r0
 800d8a6:	2d00      	cmp	r5, #0
 800d8a8:	dd0c      	ble.n	800d8c4 <_dtoa_r+0x754>
 800d8aa:	9b05      	ldr	r3, [sp, #20]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	dd09      	ble.n	800d8c4 <_dtoa_r+0x754>
 800d8b0:	42ab      	cmp	r3, r5
 800d8b2:	9a04      	ldr	r2, [sp, #16]
 800d8b4:	bfa8      	it	ge
 800d8b6:	462b      	movge	r3, r5
 800d8b8:	1ad2      	subs	r2, r2, r3
 800d8ba:	9204      	str	r2, [sp, #16]
 800d8bc:	9a05      	ldr	r2, [sp, #20]
 800d8be:	1aed      	subs	r5, r5, r3
 800d8c0:	1ad3      	subs	r3, r2, r3
 800d8c2:	9305      	str	r3, [sp, #20]
 800d8c4:	9b07      	ldr	r3, [sp, #28]
 800d8c6:	b31b      	cbz	r3, 800d910 <_dtoa_r+0x7a0>
 800d8c8:	9b08      	ldr	r3, [sp, #32]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	f000 80af 	beq.w	800da2e <_dtoa_r+0x8be>
 800d8d0:	2e00      	cmp	r6, #0
 800d8d2:	dd13      	ble.n	800d8fc <_dtoa_r+0x78c>
 800d8d4:	4639      	mov	r1, r7
 800d8d6:	4632      	mov	r2, r6
 800d8d8:	4620      	mov	r0, r4
 800d8da:	f000 ffc7 	bl	800e86c <__pow5mult>
 800d8de:	ee18 2a10 	vmov	r2, s16
 800d8e2:	4601      	mov	r1, r0
 800d8e4:	4607      	mov	r7, r0
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	f000 ff16 	bl	800e718 <__multiply>
 800d8ec:	ee18 1a10 	vmov	r1, s16
 800d8f0:	4680      	mov	r8, r0
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	f000 fdf8 	bl	800e4e8 <_Bfree>
 800d8f8:	ee08 8a10 	vmov	s16, r8
 800d8fc:	9b07      	ldr	r3, [sp, #28]
 800d8fe:	1b9a      	subs	r2, r3, r6
 800d900:	d006      	beq.n	800d910 <_dtoa_r+0x7a0>
 800d902:	ee18 1a10 	vmov	r1, s16
 800d906:	4620      	mov	r0, r4
 800d908:	f000 ffb0 	bl	800e86c <__pow5mult>
 800d90c:	ee08 0a10 	vmov	s16, r0
 800d910:	2101      	movs	r1, #1
 800d912:	4620      	mov	r0, r4
 800d914:	f000 feea 	bl	800e6ec <__i2b>
 800d918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	4606      	mov	r6, r0
 800d91e:	f340 8088 	ble.w	800da32 <_dtoa_r+0x8c2>
 800d922:	461a      	mov	r2, r3
 800d924:	4601      	mov	r1, r0
 800d926:	4620      	mov	r0, r4
 800d928:	f000 ffa0 	bl	800e86c <__pow5mult>
 800d92c:	9b06      	ldr	r3, [sp, #24]
 800d92e:	2b01      	cmp	r3, #1
 800d930:	4606      	mov	r6, r0
 800d932:	f340 8081 	ble.w	800da38 <_dtoa_r+0x8c8>
 800d936:	f04f 0800 	mov.w	r8, #0
 800d93a:	6933      	ldr	r3, [r6, #16]
 800d93c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d940:	6918      	ldr	r0, [r3, #16]
 800d942:	f000 fe83 	bl	800e64c <__hi0bits>
 800d946:	f1c0 0020 	rsb	r0, r0, #32
 800d94a:	9b05      	ldr	r3, [sp, #20]
 800d94c:	4418      	add	r0, r3
 800d94e:	f010 001f 	ands.w	r0, r0, #31
 800d952:	f000 8092 	beq.w	800da7a <_dtoa_r+0x90a>
 800d956:	f1c0 0320 	rsb	r3, r0, #32
 800d95a:	2b04      	cmp	r3, #4
 800d95c:	f340 808a 	ble.w	800da74 <_dtoa_r+0x904>
 800d960:	f1c0 001c 	rsb	r0, r0, #28
 800d964:	9b04      	ldr	r3, [sp, #16]
 800d966:	4403      	add	r3, r0
 800d968:	9304      	str	r3, [sp, #16]
 800d96a:	9b05      	ldr	r3, [sp, #20]
 800d96c:	4403      	add	r3, r0
 800d96e:	4405      	add	r5, r0
 800d970:	9305      	str	r3, [sp, #20]
 800d972:	9b04      	ldr	r3, [sp, #16]
 800d974:	2b00      	cmp	r3, #0
 800d976:	dd07      	ble.n	800d988 <_dtoa_r+0x818>
 800d978:	ee18 1a10 	vmov	r1, s16
 800d97c:	461a      	mov	r2, r3
 800d97e:	4620      	mov	r0, r4
 800d980:	f000 ffce 	bl	800e920 <__lshift>
 800d984:	ee08 0a10 	vmov	s16, r0
 800d988:	9b05      	ldr	r3, [sp, #20]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	dd05      	ble.n	800d99a <_dtoa_r+0x82a>
 800d98e:	4631      	mov	r1, r6
 800d990:	461a      	mov	r2, r3
 800d992:	4620      	mov	r0, r4
 800d994:	f000 ffc4 	bl	800e920 <__lshift>
 800d998:	4606      	mov	r6, r0
 800d99a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d06e      	beq.n	800da7e <_dtoa_r+0x90e>
 800d9a0:	ee18 0a10 	vmov	r0, s16
 800d9a4:	4631      	mov	r1, r6
 800d9a6:	f001 f82b 	bl	800ea00 <__mcmp>
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	da67      	bge.n	800da7e <_dtoa_r+0x90e>
 800d9ae:	9b00      	ldr	r3, [sp, #0]
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	ee18 1a10 	vmov	r1, s16
 800d9b6:	9300      	str	r3, [sp, #0]
 800d9b8:	220a      	movs	r2, #10
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	4620      	mov	r0, r4
 800d9be:	f000 fdb5 	bl	800e52c <__multadd>
 800d9c2:	9b08      	ldr	r3, [sp, #32]
 800d9c4:	ee08 0a10 	vmov	s16, r0
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	f000 81b1 	beq.w	800dd30 <_dtoa_r+0xbc0>
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	4639      	mov	r1, r7
 800d9d2:	220a      	movs	r2, #10
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	f000 fda9 	bl	800e52c <__multadd>
 800d9da:	9b02      	ldr	r3, [sp, #8]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	4607      	mov	r7, r0
 800d9e0:	f300 808e 	bgt.w	800db00 <_dtoa_r+0x990>
 800d9e4:	9b06      	ldr	r3, [sp, #24]
 800d9e6:	2b02      	cmp	r3, #2
 800d9e8:	dc51      	bgt.n	800da8e <_dtoa_r+0x91e>
 800d9ea:	e089      	b.n	800db00 <_dtoa_r+0x990>
 800d9ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d9ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d9f2:	e74b      	b.n	800d88c <_dtoa_r+0x71c>
 800d9f4:	9b03      	ldr	r3, [sp, #12]
 800d9f6:	1e5e      	subs	r6, r3, #1
 800d9f8:	9b07      	ldr	r3, [sp, #28]
 800d9fa:	42b3      	cmp	r3, r6
 800d9fc:	bfbf      	itttt	lt
 800d9fe:	9b07      	ldrlt	r3, [sp, #28]
 800da00:	9607      	strlt	r6, [sp, #28]
 800da02:	1af2      	sublt	r2, r6, r3
 800da04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800da06:	bfb6      	itet	lt
 800da08:	189b      	addlt	r3, r3, r2
 800da0a:	1b9e      	subge	r6, r3, r6
 800da0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800da0e:	9b03      	ldr	r3, [sp, #12]
 800da10:	bfb8      	it	lt
 800da12:	2600      	movlt	r6, #0
 800da14:	2b00      	cmp	r3, #0
 800da16:	bfb7      	itett	lt
 800da18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800da1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800da20:	1a9d      	sublt	r5, r3, r2
 800da22:	2300      	movlt	r3, #0
 800da24:	e734      	b.n	800d890 <_dtoa_r+0x720>
 800da26:	9e07      	ldr	r6, [sp, #28]
 800da28:	9d04      	ldr	r5, [sp, #16]
 800da2a:	9f08      	ldr	r7, [sp, #32]
 800da2c:	e73b      	b.n	800d8a6 <_dtoa_r+0x736>
 800da2e:	9a07      	ldr	r2, [sp, #28]
 800da30:	e767      	b.n	800d902 <_dtoa_r+0x792>
 800da32:	9b06      	ldr	r3, [sp, #24]
 800da34:	2b01      	cmp	r3, #1
 800da36:	dc18      	bgt.n	800da6a <_dtoa_r+0x8fa>
 800da38:	f1ba 0f00 	cmp.w	sl, #0
 800da3c:	d115      	bne.n	800da6a <_dtoa_r+0x8fa>
 800da3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da42:	b993      	cbnz	r3, 800da6a <_dtoa_r+0x8fa>
 800da44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da48:	0d1b      	lsrs	r3, r3, #20
 800da4a:	051b      	lsls	r3, r3, #20
 800da4c:	b183      	cbz	r3, 800da70 <_dtoa_r+0x900>
 800da4e:	9b04      	ldr	r3, [sp, #16]
 800da50:	3301      	adds	r3, #1
 800da52:	9304      	str	r3, [sp, #16]
 800da54:	9b05      	ldr	r3, [sp, #20]
 800da56:	3301      	adds	r3, #1
 800da58:	9305      	str	r3, [sp, #20]
 800da5a:	f04f 0801 	mov.w	r8, #1
 800da5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da60:	2b00      	cmp	r3, #0
 800da62:	f47f af6a 	bne.w	800d93a <_dtoa_r+0x7ca>
 800da66:	2001      	movs	r0, #1
 800da68:	e76f      	b.n	800d94a <_dtoa_r+0x7da>
 800da6a:	f04f 0800 	mov.w	r8, #0
 800da6e:	e7f6      	b.n	800da5e <_dtoa_r+0x8ee>
 800da70:	4698      	mov	r8, r3
 800da72:	e7f4      	b.n	800da5e <_dtoa_r+0x8ee>
 800da74:	f43f af7d 	beq.w	800d972 <_dtoa_r+0x802>
 800da78:	4618      	mov	r0, r3
 800da7a:	301c      	adds	r0, #28
 800da7c:	e772      	b.n	800d964 <_dtoa_r+0x7f4>
 800da7e:	9b03      	ldr	r3, [sp, #12]
 800da80:	2b00      	cmp	r3, #0
 800da82:	dc37      	bgt.n	800daf4 <_dtoa_r+0x984>
 800da84:	9b06      	ldr	r3, [sp, #24]
 800da86:	2b02      	cmp	r3, #2
 800da88:	dd34      	ble.n	800daf4 <_dtoa_r+0x984>
 800da8a:	9b03      	ldr	r3, [sp, #12]
 800da8c:	9302      	str	r3, [sp, #8]
 800da8e:	9b02      	ldr	r3, [sp, #8]
 800da90:	b96b      	cbnz	r3, 800daae <_dtoa_r+0x93e>
 800da92:	4631      	mov	r1, r6
 800da94:	2205      	movs	r2, #5
 800da96:	4620      	mov	r0, r4
 800da98:	f000 fd48 	bl	800e52c <__multadd>
 800da9c:	4601      	mov	r1, r0
 800da9e:	4606      	mov	r6, r0
 800daa0:	ee18 0a10 	vmov	r0, s16
 800daa4:	f000 ffac 	bl	800ea00 <__mcmp>
 800daa8:	2800      	cmp	r0, #0
 800daaa:	f73f adbb 	bgt.w	800d624 <_dtoa_r+0x4b4>
 800daae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dab0:	9d01      	ldr	r5, [sp, #4]
 800dab2:	43db      	mvns	r3, r3
 800dab4:	9300      	str	r3, [sp, #0]
 800dab6:	f04f 0800 	mov.w	r8, #0
 800daba:	4631      	mov	r1, r6
 800dabc:	4620      	mov	r0, r4
 800dabe:	f000 fd13 	bl	800e4e8 <_Bfree>
 800dac2:	2f00      	cmp	r7, #0
 800dac4:	f43f aea4 	beq.w	800d810 <_dtoa_r+0x6a0>
 800dac8:	f1b8 0f00 	cmp.w	r8, #0
 800dacc:	d005      	beq.n	800dada <_dtoa_r+0x96a>
 800dace:	45b8      	cmp	r8, r7
 800dad0:	d003      	beq.n	800dada <_dtoa_r+0x96a>
 800dad2:	4641      	mov	r1, r8
 800dad4:	4620      	mov	r0, r4
 800dad6:	f000 fd07 	bl	800e4e8 <_Bfree>
 800dada:	4639      	mov	r1, r7
 800dadc:	4620      	mov	r0, r4
 800dade:	f000 fd03 	bl	800e4e8 <_Bfree>
 800dae2:	e695      	b.n	800d810 <_dtoa_r+0x6a0>
 800dae4:	2600      	movs	r6, #0
 800dae6:	4637      	mov	r7, r6
 800dae8:	e7e1      	b.n	800daae <_dtoa_r+0x93e>
 800daea:	9700      	str	r7, [sp, #0]
 800daec:	4637      	mov	r7, r6
 800daee:	e599      	b.n	800d624 <_dtoa_r+0x4b4>
 800daf0:	40240000 	.word	0x40240000
 800daf4:	9b08      	ldr	r3, [sp, #32]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	f000 80ca 	beq.w	800dc90 <_dtoa_r+0xb20>
 800dafc:	9b03      	ldr	r3, [sp, #12]
 800dafe:	9302      	str	r3, [sp, #8]
 800db00:	2d00      	cmp	r5, #0
 800db02:	dd05      	ble.n	800db10 <_dtoa_r+0x9a0>
 800db04:	4639      	mov	r1, r7
 800db06:	462a      	mov	r2, r5
 800db08:	4620      	mov	r0, r4
 800db0a:	f000 ff09 	bl	800e920 <__lshift>
 800db0e:	4607      	mov	r7, r0
 800db10:	f1b8 0f00 	cmp.w	r8, #0
 800db14:	d05b      	beq.n	800dbce <_dtoa_r+0xa5e>
 800db16:	6879      	ldr	r1, [r7, #4]
 800db18:	4620      	mov	r0, r4
 800db1a:	f000 fca5 	bl	800e468 <_Balloc>
 800db1e:	4605      	mov	r5, r0
 800db20:	b928      	cbnz	r0, 800db2e <_dtoa_r+0x9be>
 800db22:	4b87      	ldr	r3, [pc, #540]	; (800dd40 <_dtoa_r+0xbd0>)
 800db24:	4602      	mov	r2, r0
 800db26:	f240 21ea 	movw	r1, #746	; 0x2ea
 800db2a:	f7ff bb3b 	b.w	800d1a4 <_dtoa_r+0x34>
 800db2e:	693a      	ldr	r2, [r7, #16]
 800db30:	3202      	adds	r2, #2
 800db32:	0092      	lsls	r2, r2, #2
 800db34:	f107 010c 	add.w	r1, r7, #12
 800db38:	300c      	adds	r0, #12
 800db3a:	f7fd fd29 	bl	800b590 <memcpy>
 800db3e:	2201      	movs	r2, #1
 800db40:	4629      	mov	r1, r5
 800db42:	4620      	mov	r0, r4
 800db44:	f000 feec 	bl	800e920 <__lshift>
 800db48:	9b01      	ldr	r3, [sp, #4]
 800db4a:	f103 0901 	add.w	r9, r3, #1
 800db4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800db52:	4413      	add	r3, r2
 800db54:	9305      	str	r3, [sp, #20]
 800db56:	f00a 0301 	and.w	r3, sl, #1
 800db5a:	46b8      	mov	r8, r7
 800db5c:	9304      	str	r3, [sp, #16]
 800db5e:	4607      	mov	r7, r0
 800db60:	4631      	mov	r1, r6
 800db62:	ee18 0a10 	vmov	r0, s16
 800db66:	f7ff fa77 	bl	800d058 <quorem>
 800db6a:	4641      	mov	r1, r8
 800db6c:	9002      	str	r0, [sp, #8]
 800db6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800db72:	ee18 0a10 	vmov	r0, s16
 800db76:	f000 ff43 	bl	800ea00 <__mcmp>
 800db7a:	463a      	mov	r2, r7
 800db7c:	9003      	str	r0, [sp, #12]
 800db7e:	4631      	mov	r1, r6
 800db80:	4620      	mov	r0, r4
 800db82:	f000 ff59 	bl	800ea38 <__mdiff>
 800db86:	68c2      	ldr	r2, [r0, #12]
 800db88:	f109 3bff 	add.w	fp, r9, #4294967295
 800db8c:	4605      	mov	r5, r0
 800db8e:	bb02      	cbnz	r2, 800dbd2 <_dtoa_r+0xa62>
 800db90:	4601      	mov	r1, r0
 800db92:	ee18 0a10 	vmov	r0, s16
 800db96:	f000 ff33 	bl	800ea00 <__mcmp>
 800db9a:	4602      	mov	r2, r0
 800db9c:	4629      	mov	r1, r5
 800db9e:	4620      	mov	r0, r4
 800dba0:	9207      	str	r2, [sp, #28]
 800dba2:	f000 fca1 	bl	800e4e8 <_Bfree>
 800dba6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800dbaa:	ea43 0102 	orr.w	r1, r3, r2
 800dbae:	9b04      	ldr	r3, [sp, #16]
 800dbb0:	430b      	orrs	r3, r1
 800dbb2:	464d      	mov	r5, r9
 800dbb4:	d10f      	bne.n	800dbd6 <_dtoa_r+0xa66>
 800dbb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dbba:	d02a      	beq.n	800dc12 <_dtoa_r+0xaa2>
 800dbbc:	9b03      	ldr	r3, [sp, #12]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	dd02      	ble.n	800dbc8 <_dtoa_r+0xa58>
 800dbc2:	9b02      	ldr	r3, [sp, #8]
 800dbc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800dbc8:	f88b a000 	strb.w	sl, [fp]
 800dbcc:	e775      	b.n	800daba <_dtoa_r+0x94a>
 800dbce:	4638      	mov	r0, r7
 800dbd0:	e7ba      	b.n	800db48 <_dtoa_r+0x9d8>
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	e7e2      	b.n	800db9c <_dtoa_r+0xa2c>
 800dbd6:	9b03      	ldr	r3, [sp, #12]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	db04      	blt.n	800dbe6 <_dtoa_r+0xa76>
 800dbdc:	9906      	ldr	r1, [sp, #24]
 800dbde:	430b      	orrs	r3, r1
 800dbe0:	9904      	ldr	r1, [sp, #16]
 800dbe2:	430b      	orrs	r3, r1
 800dbe4:	d122      	bne.n	800dc2c <_dtoa_r+0xabc>
 800dbe6:	2a00      	cmp	r2, #0
 800dbe8:	ddee      	ble.n	800dbc8 <_dtoa_r+0xa58>
 800dbea:	ee18 1a10 	vmov	r1, s16
 800dbee:	2201      	movs	r2, #1
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f000 fe95 	bl	800e920 <__lshift>
 800dbf6:	4631      	mov	r1, r6
 800dbf8:	ee08 0a10 	vmov	s16, r0
 800dbfc:	f000 ff00 	bl	800ea00 <__mcmp>
 800dc00:	2800      	cmp	r0, #0
 800dc02:	dc03      	bgt.n	800dc0c <_dtoa_r+0xa9c>
 800dc04:	d1e0      	bne.n	800dbc8 <_dtoa_r+0xa58>
 800dc06:	f01a 0f01 	tst.w	sl, #1
 800dc0a:	d0dd      	beq.n	800dbc8 <_dtoa_r+0xa58>
 800dc0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dc10:	d1d7      	bne.n	800dbc2 <_dtoa_r+0xa52>
 800dc12:	2339      	movs	r3, #57	; 0x39
 800dc14:	f88b 3000 	strb.w	r3, [fp]
 800dc18:	462b      	mov	r3, r5
 800dc1a:	461d      	mov	r5, r3
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dc22:	2a39      	cmp	r2, #57	; 0x39
 800dc24:	d071      	beq.n	800dd0a <_dtoa_r+0xb9a>
 800dc26:	3201      	adds	r2, #1
 800dc28:	701a      	strb	r2, [r3, #0]
 800dc2a:	e746      	b.n	800daba <_dtoa_r+0x94a>
 800dc2c:	2a00      	cmp	r2, #0
 800dc2e:	dd07      	ble.n	800dc40 <_dtoa_r+0xad0>
 800dc30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dc34:	d0ed      	beq.n	800dc12 <_dtoa_r+0xaa2>
 800dc36:	f10a 0301 	add.w	r3, sl, #1
 800dc3a:	f88b 3000 	strb.w	r3, [fp]
 800dc3e:	e73c      	b.n	800daba <_dtoa_r+0x94a>
 800dc40:	9b05      	ldr	r3, [sp, #20]
 800dc42:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dc46:	4599      	cmp	r9, r3
 800dc48:	d047      	beq.n	800dcda <_dtoa_r+0xb6a>
 800dc4a:	ee18 1a10 	vmov	r1, s16
 800dc4e:	2300      	movs	r3, #0
 800dc50:	220a      	movs	r2, #10
 800dc52:	4620      	mov	r0, r4
 800dc54:	f000 fc6a 	bl	800e52c <__multadd>
 800dc58:	45b8      	cmp	r8, r7
 800dc5a:	ee08 0a10 	vmov	s16, r0
 800dc5e:	f04f 0300 	mov.w	r3, #0
 800dc62:	f04f 020a 	mov.w	r2, #10
 800dc66:	4641      	mov	r1, r8
 800dc68:	4620      	mov	r0, r4
 800dc6a:	d106      	bne.n	800dc7a <_dtoa_r+0xb0a>
 800dc6c:	f000 fc5e 	bl	800e52c <__multadd>
 800dc70:	4680      	mov	r8, r0
 800dc72:	4607      	mov	r7, r0
 800dc74:	f109 0901 	add.w	r9, r9, #1
 800dc78:	e772      	b.n	800db60 <_dtoa_r+0x9f0>
 800dc7a:	f000 fc57 	bl	800e52c <__multadd>
 800dc7e:	4639      	mov	r1, r7
 800dc80:	4680      	mov	r8, r0
 800dc82:	2300      	movs	r3, #0
 800dc84:	220a      	movs	r2, #10
 800dc86:	4620      	mov	r0, r4
 800dc88:	f000 fc50 	bl	800e52c <__multadd>
 800dc8c:	4607      	mov	r7, r0
 800dc8e:	e7f1      	b.n	800dc74 <_dtoa_r+0xb04>
 800dc90:	9b03      	ldr	r3, [sp, #12]
 800dc92:	9302      	str	r3, [sp, #8]
 800dc94:	9d01      	ldr	r5, [sp, #4]
 800dc96:	ee18 0a10 	vmov	r0, s16
 800dc9a:	4631      	mov	r1, r6
 800dc9c:	f7ff f9dc 	bl	800d058 <quorem>
 800dca0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dca4:	9b01      	ldr	r3, [sp, #4]
 800dca6:	f805 ab01 	strb.w	sl, [r5], #1
 800dcaa:	1aea      	subs	r2, r5, r3
 800dcac:	9b02      	ldr	r3, [sp, #8]
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	dd09      	ble.n	800dcc6 <_dtoa_r+0xb56>
 800dcb2:	ee18 1a10 	vmov	r1, s16
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	220a      	movs	r2, #10
 800dcba:	4620      	mov	r0, r4
 800dcbc:	f000 fc36 	bl	800e52c <__multadd>
 800dcc0:	ee08 0a10 	vmov	s16, r0
 800dcc4:	e7e7      	b.n	800dc96 <_dtoa_r+0xb26>
 800dcc6:	9b02      	ldr	r3, [sp, #8]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	bfc8      	it	gt
 800dccc:	461d      	movgt	r5, r3
 800dcce:	9b01      	ldr	r3, [sp, #4]
 800dcd0:	bfd8      	it	le
 800dcd2:	2501      	movle	r5, #1
 800dcd4:	441d      	add	r5, r3
 800dcd6:	f04f 0800 	mov.w	r8, #0
 800dcda:	ee18 1a10 	vmov	r1, s16
 800dcde:	2201      	movs	r2, #1
 800dce0:	4620      	mov	r0, r4
 800dce2:	f000 fe1d 	bl	800e920 <__lshift>
 800dce6:	4631      	mov	r1, r6
 800dce8:	ee08 0a10 	vmov	s16, r0
 800dcec:	f000 fe88 	bl	800ea00 <__mcmp>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	dc91      	bgt.n	800dc18 <_dtoa_r+0xaa8>
 800dcf4:	d102      	bne.n	800dcfc <_dtoa_r+0xb8c>
 800dcf6:	f01a 0f01 	tst.w	sl, #1
 800dcfa:	d18d      	bne.n	800dc18 <_dtoa_r+0xaa8>
 800dcfc:	462b      	mov	r3, r5
 800dcfe:	461d      	mov	r5, r3
 800dd00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd04:	2a30      	cmp	r2, #48	; 0x30
 800dd06:	d0fa      	beq.n	800dcfe <_dtoa_r+0xb8e>
 800dd08:	e6d7      	b.n	800daba <_dtoa_r+0x94a>
 800dd0a:	9a01      	ldr	r2, [sp, #4]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d184      	bne.n	800dc1a <_dtoa_r+0xaaa>
 800dd10:	9b00      	ldr	r3, [sp, #0]
 800dd12:	3301      	adds	r3, #1
 800dd14:	9300      	str	r3, [sp, #0]
 800dd16:	2331      	movs	r3, #49	; 0x31
 800dd18:	7013      	strb	r3, [r2, #0]
 800dd1a:	e6ce      	b.n	800daba <_dtoa_r+0x94a>
 800dd1c:	4b09      	ldr	r3, [pc, #36]	; (800dd44 <_dtoa_r+0xbd4>)
 800dd1e:	f7ff ba95 	b.w	800d24c <_dtoa_r+0xdc>
 800dd22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	f47f aa6e 	bne.w	800d206 <_dtoa_r+0x96>
 800dd2a:	4b07      	ldr	r3, [pc, #28]	; (800dd48 <_dtoa_r+0xbd8>)
 800dd2c:	f7ff ba8e 	b.w	800d24c <_dtoa_r+0xdc>
 800dd30:	9b02      	ldr	r3, [sp, #8]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	dcae      	bgt.n	800dc94 <_dtoa_r+0xb24>
 800dd36:	9b06      	ldr	r3, [sp, #24]
 800dd38:	2b02      	cmp	r3, #2
 800dd3a:	f73f aea8 	bgt.w	800da8e <_dtoa_r+0x91e>
 800dd3e:	e7a9      	b.n	800dc94 <_dtoa_r+0xb24>
 800dd40:	08010370 	.word	0x08010370
 800dd44:	08010174 	.word	0x08010174
 800dd48:	080102f1 	.word	0x080102f1

0800dd4c <rshift>:
 800dd4c:	6903      	ldr	r3, [r0, #16]
 800dd4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd56:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd5a:	f100 0414 	add.w	r4, r0, #20
 800dd5e:	dd45      	ble.n	800ddec <rshift+0xa0>
 800dd60:	f011 011f 	ands.w	r1, r1, #31
 800dd64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dd68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dd6c:	d10c      	bne.n	800dd88 <rshift+0x3c>
 800dd6e:	f100 0710 	add.w	r7, r0, #16
 800dd72:	4629      	mov	r1, r5
 800dd74:	42b1      	cmp	r1, r6
 800dd76:	d334      	bcc.n	800dde2 <rshift+0x96>
 800dd78:	1a9b      	subs	r3, r3, r2
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	1eea      	subs	r2, r5, #3
 800dd7e:	4296      	cmp	r6, r2
 800dd80:	bf38      	it	cc
 800dd82:	2300      	movcc	r3, #0
 800dd84:	4423      	add	r3, r4
 800dd86:	e015      	b.n	800ddb4 <rshift+0x68>
 800dd88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dd8c:	f1c1 0820 	rsb	r8, r1, #32
 800dd90:	40cf      	lsrs	r7, r1
 800dd92:	f105 0e04 	add.w	lr, r5, #4
 800dd96:	46a1      	mov	r9, r4
 800dd98:	4576      	cmp	r6, lr
 800dd9a:	46f4      	mov	ip, lr
 800dd9c:	d815      	bhi.n	800ddca <rshift+0x7e>
 800dd9e:	1a9a      	subs	r2, r3, r2
 800dda0:	0092      	lsls	r2, r2, #2
 800dda2:	3a04      	subs	r2, #4
 800dda4:	3501      	adds	r5, #1
 800dda6:	42ae      	cmp	r6, r5
 800dda8:	bf38      	it	cc
 800ddaa:	2200      	movcc	r2, #0
 800ddac:	18a3      	adds	r3, r4, r2
 800ddae:	50a7      	str	r7, [r4, r2]
 800ddb0:	b107      	cbz	r7, 800ddb4 <rshift+0x68>
 800ddb2:	3304      	adds	r3, #4
 800ddb4:	1b1a      	subs	r2, r3, r4
 800ddb6:	42a3      	cmp	r3, r4
 800ddb8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ddbc:	bf08      	it	eq
 800ddbe:	2300      	moveq	r3, #0
 800ddc0:	6102      	str	r2, [r0, #16]
 800ddc2:	bf08      	it	eq
 800ddc4:	6143      	streq	r3, [r0, #20]
 800ddc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddca:	f8dc c000 	ldr.w	ip, [ip]
 800ddce:	fa0c fc08 	lsl.w	ip, ip, r8
 800ddd2:	ea4c 0707 	orr.w	r7, ip, r7
 800ddd6:	f849 7b04 	str.w	r7, [r9], #4
 800ddda:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ddde:	40cf      	lsrs	r7, r1
 800dde0:	e7da      	b.n	800dd98 <rshift+0x4c>
 800dde2:	f851 cb04 	ldr.w	ip, [r1], #4
 800dde6:	f847 cf04 	str.w	ip, [r7, #4]!
 800ddea:	e7c3      	b.n	800dd74 <rshift+0x28>
 800ddec:	4623      	mov	r3, r4
 800ddee:	e7e1      	b.n	800ddb4 <rshift+0x68>

0800ddf0 <__hexdig_fun>:
 800ddf0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ddf4:	2b09      	cmp	r3, #9
 800ddf6:	d802      	bhi.n	800ddfe <__hexdig_fun+0xe>
 800ddf8:	3820      	subs	r0, #32
 800ddfa:	b2c0      	uxtb	r0, r0
 800ddfc:	4770      	bx	lr
 800ddfe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800de02:	2b05      	cmp	r3, #5
 800de04:	d801      	bhi.n	800de0a <__hexdig_fun+0x1a>
 800de06:	3847      	subs	r0, #71	; 0x47
 800de08:	e7f7      	b.n	800ddfa <__hexdig_fun+0xa>
 800de0a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800de0e:	2b05      	cmp	r3, #5
 800de10:	d801      	bhi.n	800de16 <__hexdig_fun+0x26>
 800de12:	3827      	subs	r0, #39	; 0x27
 800de14:	e7f1      	b.n	800ddfa <__hexdig_fun+0xa>
 800de16:	2000      	movs	r0, #0
 800de18:	4770      	bx	lr
	...

0800de1c <__gethex>:
 800de1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de20:	ed2d 8b02 	vpush	{d8}
 800de24:	b089      	sub	sp, #36	; 0x24
 800de26:	ee08 0a10 	vmov	s16, r0
 800de2a:	9304      	str	r3, [sp, #16]
 800de2c:	4bb4      	ldr	r3, [pc, #720]	; (800e100 <__gethex+0x2e4>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	9301      	str	r3, [sp, #4]
 800de32:	4618      	mov	r0, r3
 800de34:	468b      	mov	fp, r1
 800de36:	4690      	mov	r8, r2
 800de38:	f7f2 f9d2 	bl	80001e0 <strlen>
 800de3c:	9b01      	ldr	r3, [sp, #4]
 800de3e:	f8db 2000 	ldr.w	r2, [fp]
 800de42:	4403      	add	r3, r0
 800de44:	4682      	mov	sl, r0
 800de46:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800de4a:	9305      	str	r3, [sp, #20]
 800de4c:	1c93      	adds	r3, r2, #2
 800de4e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800de52:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800de56:	32fe      	adds	r2, #254	; 0xfe
 800de58:	18d1      	adds	r1, r2, r3
 800de5a:	461f      	mov	r7, r3
 800de5c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800de60:	9100      	str	r1, [sp, #0]
 800de62:	2830      	cmp	r0, #48	; 0x30
 800de64:	d0f8      	beq.n	800de58 <__gethex+0x3c>
 800de66:	f7ff ffc3 	bl	800ddf0 <__hexdig_fun>
 800de6a:	4604      	mov	r4, r0
 800de6c:	2800      	cmp	r0, #0
 800de6e:	d13a      	bne.n	800dee6 <__gethex+0xca>
 800de70:	9901      	ldr	r1, [sp, #4]
 800de72:	4652      	mov	r2, sl
 800de74:	4638      	mov	r0, r7
 800de76:	f001 fa23 	bl	800f2c0 <strncmp>
 800de7a:	4605      	mov	r5, r0
 800de7c:	2800      	cmp	r0, #0
 800de7e:	d168      	bne.n	800df52 <__gethex+0x136>
 800de80:	f817 000a 	ldrb.w	r0, [r7, sl]
 800de84:	eb07 060a 	add.w	r6, r7, sl
 800de88:	f7ff ffb2 	bl	800ddf0 <__hexdig_fun>
 800de8c:	2800      	cmp	r0, #0
 800de8e:	d062      	beq.n	800df56 <__gethex+0x13a>
 800de90:	4633      	mov	r3, r6
 800de92:	7818      	ldrb	r0, [r3, #0]
 800de94:	2830      	cmp	r0, #48	; 0x30
 800de96:	461f      	mov	r7, r3
 800de98:	f103 0301 	add.w	r3, r3, #1
 800de9c:	d0f9      	beq.n	800de92 <__gethex+0x76>
 800de9e:	f7ff ffa7 	bl	800ddf0 <__hexdig_fun>
 800dea2:	2301      	movs	r3, #1
 800dea4:	fab0 f480 	clz	r4, r0
 800dea8:	0964      	lsrs	r4, r4, #5
 800deaa:	4635      	mov	r5, r6
 800deac:	9300      	str	r3, [sp, #0]
 800deae:	463a      	mov	r2, r7
 800deb0:	4616      	mov	r6, r2
 800deb2:	3201      	adds	r2, #1
 800deb4:	7830      	ldrb	r0, [r6, #0]
 800deb6:	f7ff ff9b 	bl	800ddf0 <__hexdig_fun>
 800deba:	2800      	cmp	r0, #0
 800debc:	d1f8      	bne.n	800deb0 <__gethex+0x94>
 800debe:	9901      	ldr	r1, [sp, #4]
 800dec0:	4652      	mov	r2, sl
 800dec2:	4630      	mov	r0, r6
 800dec4:	f001 f9fc 	bl	800f2c0 <strncmp>
 800dec8:	b980      	cbnz	r0, 800deec <__gethex+0xd0>
 800deca:	b94d      	cbnz	r5, 800dee0 <__gethex+0xc4>
 800decc:	eb06 050a 	add.w	r5, r6, sl
 800ded0:	462a      	mov	r2, r5
 800ded2:	4616      	mov	r6, r2
 800ded4:	3201      	adds	r2, #1
 800ded6:	7830      	ldrb	r0, [r6, #0]
 800ded8:	f7ff ff8a 	bl	800ddf0 <__hexdig_fun>
 800dedc:	2800      	cmp	r0, #0
 800dede:	d1f8      	bne.n	800ded2 <__gethex+0xb6>
 800dee0:	1bad      	subs	r5, r5, r6
 800dee2:	00ad      	lsls	r5, r5, #2
 800dee4:	e004      	b.n	800def0 <__gethex+0xd4>
 800dee6:	2400      	movs	r4, #0
 800dee8:	4625      	mov	r5, r4
 800deea:	e7e0      	b.n	800deae <__gethex+0x92>
 800deec:	2d00      	cmp	r5, #0
 800deee:	d1f7      	bne.n	800dee0 <__gethex+0xc4>
 800def0:	7833      	ldrb	r3, [r6, #0]
 800def2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800def6:	2b50      	cmp	r3, #80	; 0x50
 800def8:	d13b      	bne.n	800df72 <__gethex+0x156>
 800defa:	7873      	ldrb	r3, [r6, #1]
 800defc:	2b2b      	cmp	r3, #43	; 0x2b
 800defe:	d02c      	beq.n	800df5a <__gethex+0x13e>
 800df00:	2b2d      	cmp	r3, #45	; 0x2d
 800df02:	d02e      	beq.n	800df62 <__gethex+0x146>
 800df04:	1c71      	adds	r1, r6, #1
 800df06:	f04f 0900 	mov.w	r9, #0
 800df0a:	7808      	ldrb	r0, [r1, #0]
 800df0c:	f7ff ff70 	bl	800ddf0 <__hexdig_fun>
 800df10:	1e43      	subs	r3, r0, #1
 800df12:	b2db      	uxtb	r3, r3
 800df14:	2b18      	cmp	r3, #24
 800df16:	d82c      	bhi.n	800df72 <__gethex+0x156>
 800df18:	f1a0 0210 	sub.w	r2, r0, #16
 800df1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df20:	f7ff ff66 	bl	800ddf0 <__hexdig_fun>
 800df24:	1e43      	subs	r3, r0, #1
 800df26:	b2db      	uxtb	r3, r3
 800df28:	2b18      	cmp	r3, #24
 800df2a:	d91d      	bls.n	800df68 <__gethex+0x14c>
 800df2c:	f1b9 0f00 	cmp.w	r9, #0
 800df30:	d000      	beq.n	800df34 <__gethex+0x118>
 800df32:	4252      	negs	r2, r2
 800df34:	4415      	add	r5, r2
 800df36:	f8cb 1000 	str.w	r1, [fp]
 800df3a:	b1e4      	cbz	r4, 800df76 <__gethex+0x15a>
 800df3c:	9b00      	ldr	r3, [sp, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	bf14      	ite	ne
 800df42:	2700      	movne	r7, #0
 800df44:	2706      	moveq	r7, #6
 800df46:	4638      	mov	r0, r7
 800df48:	b009      	add	sp, #36	; 0x24
 800df4a:	ecbd 8b02 	vpop	{d8}
 800df4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df52:	463e      	mov	r6, r7
 800df54:	4625      	mov	r5, r4
 800df56:	2401      	movs	r4, #1
 800df58:	e7ca      	b.n	800def0 <__gethex+0xd4>
 800df5a:	f04f 0900 	mov.w	r9, #0
 800df5e:	1cb1      	adds	r1, r6, #2
 800df60:	e7d3      	b.n	800df0a <__gethex+0xee>
 800df62:	f04f 0901 	mov.w	r9, #1
 800df66:	e7fa      	b.n	800df5e <__gethex+0x142>
 800df68:	230a      	movs	r3, #10
 800df6a:	fb03 0202 	mla	r2, r3, r2, r0
 800df6e:	3a10      	subs	r2, #16
 800df70:	e7d4      	b.n	800df1c <__gethex+0x100>
 800df72:	4631      	mov	r1, r6
 800df74:	e7df      	b.n	800df36 <__gethex+0x11a>
 800df76:	1bf3      	subs	r3, r6, r7
 800df78:	3b01      	subs	r3, #1
 800df7a:	4621      	mov	r1, r4
 800df7c:	2b07      	cmp	r3, #7
 800df7e:	dc0b      	bgt.n	800df98 <__gethex+0x17c>
 800df80:	ee18 0a10 	vmov	r0, s16
 800df84:	f000 fa70 	bl	800e468 <_Balloc>
 800df88:	4604      	mov	r4, r0
 800df8a:	b940      	cbnz	r0, 800df9e <__gethex+0x182>
 800df8c:	4b5d      	ldr	r3, [pc, #372]	; (800e104 <__gethex+0x2e8>)
 800df8e:	4602      	mov	r2, r0
 800df90:	21de      	movs	r1, #222	; 0xde
 800df92:	485d      	ldr	r0, [pc, #372]	; (800e108 <__gethex+0x2ec>)
 800df94:	f001 f9b6 	bl	800f304 <__assert_func>
 800df98:	3101      	adds	r1, #1
 800df9a:	105b      	asrs	r3, r3, #1
 800df9c:	e7ee      	b.n	800df7c <__gethex+0x160>
 800df9e:	f100 0914 	add.w	r9, r0, #20
 800dfa2:	f04f 0b00 	mov.w	fp, #0
 800dfa6:	f1ca 0301 	rsb	r3, sl, #1
 800dfaa:	f8cd 9008 	str.w	r9, [sp, #8]
 800dfae:	f8cd b000 	str.w	fp, [sp]
 800dfb2:	9306      	str	r3, [sp, #24]
 800dfb4:	42b7      	cmp	r7, r6
 800dfb6:	d340      	bcc.n	800e03a <__gethex+0x21e>
 800dfb8:	9802      	ldr	r0, [sp, #8]
 800dfba:	9b00      	ldr	r3, [sp, #0]
 800dfbc:	f840 3b04 	str.w	r3, [r0], #4
 800dfc0:	eba0 0009 	sub.w	r0, r0, r9
 800dfc4:	1080      	asrs	r0, r0, #2
 800dfc6:	0146      	lsls	r6, r0, #5
 800dfc8:	6120      	str	r0, [r4, #16]
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f000 fb3e 	bl	800e64c <__hi0bits>
 800dfd0:	1a30      	subs	r0, r6, r0
 800dfd2:	f8d8 6000 	ldr.w	r6, [r8]
 800dfd6:	42b0      	cmp	r0, r6
 800dfd8:	dd63      	ble.n	800e0a2 <__gethex+0x286>
 800dfda:	1b87      	subs	r7, r0, r6
 800dfdc:	4639      	mov	r1, r7
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f000 fee2 	bl	800eda8 <__any_on>
 800dfe4:	4682      	mov	sl, r0
 800dfe6:	b1a8      	cbz	r0, 800e014 <__gethex+0x1f8>
 800dfe8:	1e7b      	subs	r3, r7, #1
 800dfea:	1159      	asrs	r1, r3, #5
 800dfec:	f003 021f 	and.w	r2, r3, #31
 800dff0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dff4:	f04f 0a01 	mov.w	sl, #1
 800dff8:	fa0a f202 	lsl.w	r2, sl, r2
 800dffc:	420a      	tst	r2, r1
 800dffe:	d009      	beq.n	800e014 <__gethex+0x1f8>
 800e000:	4553      	cmp	r3, sl
 800e002:	dd05      	ble.n	800e010 <__gethex+0x1f4>
 800e004:	1eb9      	subs	r1, r7, #2
 800e006:	4620      	mov	r0, r4
 800e008:	f000 fece 	bl	800eda8 <__any_on>
 800e00c:	2800      	cmp	r0, #0
 800e00e:	d145      	bne.n	800e09c <__gethex+0x280>
 800e010:	f04f 0a02 	mov.w	sl, #2
 800e014:	4639      	mov	r1, r7
 800e016:	4620      	mov	r0, r4
 800e018:	f7ff fe98 	bl	800dd4c <rshift>
 800e01c:	443d      	add	r5, r7
 800e01e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e022:	42ab      	cmp	r3, r5
 800e024:	da4c      	bge.n	800e0c0 <__gethex+0x2a4>
 800e026:	ee18 0a10 	vmov	r0, s16
 800e02a:	4621      	mov	r1, r4
 800e02c:	f000 fa5c 	bl	800e4e8 <_Bfree>
 800e030:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e032:	2300      	movs	r3, #0
 800e034:	6013      	str	r3, [r2, #0]
 800e036:	27a3      	movs	r7, #163	; 0xa3
 800e038:	e785      	b.n	800df46 <__gethex+0x12a>
 800e03a:	1e73      	subs	r3, r6, #1
 800e03c:	9a05      	ldr	r2, [sp, #20]
 800e03e:	9303      	str	r3, [sp, #12]
 800e040:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e044:	4293      	cmp	r3, r2
 800e046:	d019      	beq.n	800e07c <__gethex+0x260>
 800e048:	f1bb 0f20 	cmp.w	fp, #32
 800e04c:	d107      	bne.n	800e05e <__gethex+0x242>
 800e04e:	9b02      	ldr	r3, [sp, #8]
 800e050:	9a00      	ldr	r2, [sp, #0]
 800e052:	f843 2b04 	str.w	r2, [r3], #4
 800e056:	9302      	str	r3, [sp, #8]
 800e058:	2300      	movs	r3, #0
 800e05a:	9300      	str	r3, [sp, #0]
 800e05c:	469b      	mov	fp, r3
 800e05e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e062:	f7ff fec5 	bl	800ddf0 <__hexdig_fun>
 800e066:	9b00      	ldr	r3, [sp, #0]
 800e068:	f000 000f 	and.w	r0, r0, #15
 800e06c:	fa00 f00b 	lsl.w	r0, r0, fp
 800e070:	4303      	orrs	r3, r0
 800e072:	9300      	str	r3, [sp, #0]
 800e074:	f10b 0b04 	add.w	fp, fp, #4
 800e078:	9b03      	ldr	r3, [sp, #12]
 800e07a:	e00d      	b.n	800e098 <__gethex+0x27c>
 800e07c:	9b03      	ldr	r3, [sp, #12]
 800e07e:	9a06      	ldr	r2, [sp, #24]
 800e080:	4413      	add	r3, r2
 800e082:	42bb      	cmp	r3, r7
 800e084:	d3e0      	bcc.n	800e048 <__gethex+0x22c>
 800e086:	4618      	mov	r0, r3
 800e088:	9901      	ldr	r1, [sp, #4]
 800e08a:	9307      	str	r3, [sp, #28]
 800e08c:	4652      	mov	r2, sl
 800e08e:	f001 f917 	bl	800f2c0 <strncmp>
 800e092:	9b07      	ldr	r3, [sp, #28]
 800e094:	2800      	cmp	r0, #0
 800e096:	d1d7      	bne.n	800e048 <__gethex+0x22c>
 800e098:	461e      	mov	r6, r3
 800e09a:	e78b      	b.n	800dfb4 <__gethex+0x198>
 800e09c:	f04f 0a03 	mov.w	sl, #3
 800e0a0:	e7b8      	b.n	800e014 <__gethex+0x1f8>
 800e0a2:	da0a      	bge.n	800e0ba <__gethex+0x29e>
 800e0a4:	1a37      	subs	r7, r6, r0
 800e0a6:	4621      	mov	r1, r4
 800e0a8:	ee18 0a10 	vmov	r0, s16
 800e0ac:	463a      	mov	r2, r7
 800e0ae:	f000 fc37 	bl	800e920 <__lshift>
 800e0b2:	1bed      	subs	r5, r5, r7
 800e0b4:	4604      	mov	r4, r0
 800e0b6:	f100 0914 	add.w	r9, r0, #20
 800e0ba:	f04f 0a00 	mov.w	sl, #0
 800e0be:	e7ae      	b.n	800e01e <__gethex+0x202>
 800e0c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e0c4:	42a8      	cmp	r0, r5
 800e0c6:	dd72      	ble.n	800e1ae <__gethex+0x392>
 800e0c8:	1b45      	subs	r5, r0, r5
 800e0ca:	42ae      	cmp	r6, r5
 800e0cc:	dc36      	bgt.n	800e13c <__gethex+0x320>
 800e0ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e0d2:	2b02      	cmp	r3, #2
 800e0d4:	d02a      	beq.n	800e12c <__gethex+0x310>
 800e0d6:	2b03      	cmp	r3, #3
 800e0d8:	d02c      	beq.n	800e134 <__gethex+0x318>
 800e0da:	2b01      	cmp	r3, #1
 800e0dc:	d11c      	bne.n	800e118 <__gethex+0x2fc>
 800e0de:	42ae      	cmp	r6, r5
 800e0e0:	d11a      	bne.n	800e118 <__gethex+0x2fc>
 800e0e2:	2e01      	cmp	r6, #1
 800e0e4:	d112      	bne.n	800e10c <__gethex+0x2f0>
 800e0e6:	9a04      	ldr	r2, [sp, #16]
 800e0e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e0ec:	6013      	str	r3, [r2, #0]
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	6123      	str	r3, [r4, #16]
 800e0f2:	f8c9 3000 	str.w	r3, [r9]
 800e0f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e0f8:	2762      	movs	r7, #98	; 0x62
 800e0fa:	601c      	str	r4, [r3, #0]
 800e0fc:	e723      	b.n	800df46 <__gethex+0x12a>
 800e0fe:	bf00      	nop
 800e100:	080103e8 	.word	0x080103e8
 800e104:	08010370 	.word	0x08010370
 800e108:	08010381 	.word	0x08010381
 800e10c:	1e71      	subs	r1, r6, #1
 800e10e:	4620      	mov	r0, r4
 800e110:	f000 fe4a 	bl	800eda8 <__any_on>
 800e114:	2800      	cmp	r0, #0
 800e116:	d1e6      	bne.n	800e0e6 <__gethex+0x2ca>
 800e118:	ee18 0a10 	vmov	r0, s16
 800e11c:	4621      	mov	r1, r4
 800e11e:	f000 f9e3 	bl	800e4e8 <_Bfree>
 800e122:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e124:	2300      	movs	r3, #0
 800e126:	6013      	str	r3, [r2, #0]
 800e128:	2750      	movs	r7, #80	; 0x50
 800e12a:	e70c      	b.n	800df46 <__gethex+0x12a>
 800e12c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d1f2      	bne.n	800e118 <__gethex+0x2fc>
 800e132:	e7d8      	b.n	800e0e6 <__gethex+0x2ca>
 800e134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e136:	2b00      	cmp	r3, #0
 800e138:	d1d5      	bne.n	800e0e6 <__gethex+0x2ca>
 800e13a:	e7ed      	b.n	800e118 <__gethex+0x2fc>
 800e13c:	1e6f      	subs	r7, r5, #1
 800e13e:	f1ba 0f00 	cmp.w	sl, #0
 800e142:	d131      	bne.n	800e1a8 <__gethex+0x38c>
 800e144:	b127      	cbz	r7, 800e150 <__gethex+0x334>
 800e146:	4639      	mov	r1, r7
 800e148:	4620      	mov	r0, r4
 800e14a:	f000 fe2d 	bl	800eda8 <__any_on>
 800e14e:	4682      	mov	sl, r0
 800e150:	117b      	asrs	r3, r7, #5
 800e152:	2101      	movs	r1, #1
 800e154:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e158:	f007 071f 	and.w	r7, r7, #31
 800e15c:	fa01 f707 	lsl.w	r7, r1, r7
 800e160:	421f      	tst	r7, r3
 800e162:	4629      	mov	r1, r5
 800e164:	4620      	mov	r0, r4
 800e166:	bf18      	it	ne
 800e168:	f04a 0a02 	orrne.w	sl, sl, #2
 800e16c:	1b76      	subs	r6, r6, r5
 800e16e:	f7ff fded 	bl	800dd4c <rshift>
 800e172:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e176:	2702      	movs	r7, #2
 800e178:	f1ba 0f00 	cmp.w	sl, #0
 800e17c:	d048      	beq.n	800e210 <__gethex+0x3f4>
 800e17e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e182:	2b02      	cmp	r3, #2
 800e184:	d015      	beq.n	800e1b2 <__gethex+0x396>
 800e186:	2b03      	cmp	r3, #3
 800e188:	d017      	beq.n	800e1ba <__gethex+0x39e>
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d109      	bne.n	800e1a2 <__gethex+0x386>
 800e18e:	f01a 0f02 	tst.w	sl, #2
 800e192:	d006      	beq.n	800e1a2 <__gethex+0x386>
 800e194:	f8d9 0000 	ldr.w	r0, [r9]
 800e198:	ea4a 0a00 	orr.w	sl, sl, r0
 800e19c:	f01a 0f01 	tst.w	sl, #1
 800e1a0:	d10e      	bne.n	800e1c0 <__gethex+0x3a4>
 800e1a2:	f047 0710 	orr.w	r7, r7, #16
 800e1a6:	e033      	b.n	800e210 <__gethex+0x3f4>
 800e1a8:	f04f 0a01 	mov.w	sl, #1
 800e1ac:	e7d0      	b.n	800e150 <__gethex+0x334>
 800e1ae:	2701      	movs	r7, #1
 800e1b0:	e7e2      	b.n	800e178 <__gethex+0x35c>
 800e1b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1b4:	f1c3 0301 	rsb	r3, r3, #1
 800e1b8:	9315      	str	r3, [sp, #84]	; 0x54
 800e1ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d0f0      	beq.n	800e1a2 <__gethex+0x386>
 800e1c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e1c4:	f104 0314 	add.w	r3, r4, #20
 800e1c8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e1cc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e1d0:	f04f 0c00 	mov.w	ip, #0
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1da:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e1de:	d01c      	beq.n	800e21a <__gethex+0x3fe>
 800e1e0:	3201      	adds	r2, #1
 800e1e2:	6002      	str	r2, [r0, #0]
 800e1e4:	2f02      	cmp	r7, #2
 800e1e6:	f104 0314 	add.w	r3, r4, #20
 800e1ea:	d13f      	bne.n	800e26c <__gethex+0x450>
 800e1ec:	f8d8 2000 	ldr.w	r2, [r8]
 800e1f0:	3a01      	subs	r2, #1
 800e1f2:	42b2      	cmp	r2, r6
 800e1f4:	d10a      	bne.n	800e20c <__gethex+0x3f0>
 800e1f6:	1171      	asrs	r1, r6, #5
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1fe:	f006 061f 	and.w	r6, r6, #31
 800e202:	fa02 f606 	lsl.w	r6, r2, r6
 800e206:	421e      	tst	r6, r3
 800e208:	bf18      	it	ne
 800e20a:	4617      	movne	r7, r2
 800e20c:	f047 0720 	orr.w	r7, r7, #32
 800e210:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e212:	601c      	str	r4, [r3, #0]
 800e214:	9b04      	ldr	r3, [sp, #16]
 800e216:	601d      	str	r5, [r3, #0]
 800e218:	e695      	b.n	800df46 <__gethex+0x12a>
 800e21a:	4299      	cmp	r1, r3
 800e21c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e220:	d8d8      	bhi.n	800e1d4 <__gethex+0x3b8>
 800e222:	68a3      	ldr	r3, [r4, #8]
 800e224:	459b      	cmp	fp, r3
 800e226:	db19      	blt.n	800e25c <__gethex+0x440>
 800e228:	6861      	ldr	r1, [r4, #4]
 800e22a:	ee18 0a10 	vmov	r0, s16
 800e22e:	3101      	adds	r1, #1
 800e230:	f000 f91a 	bl	800e468 <_Balloc>
 800e234:	4681      	mov	r9, r0
 800e236:	b918      	cbnz	r0, 800e240 <__gethex+0x424>
 800e238:	4b1a      	ldr	r3, [pc, #104]	; (800e2a4 <__gethex+0x488>)
 800e23a:	4602      	mov	r2, r0
 800e23c:	2184      	movs	r1, #132	; 0x84
 800e23e:	e6a8      	b.n	800df92 <__gethex+0x176>
 800e240:	6922      	ldr	r2, [r4, #16]
 800e242:	3202      	adds	r2, #2
 800e244:	f104 010c 	add.w	r1, r4, #12
 800e248:	0092      	lsls	r2, r2, #2
 800e24a:	300c      	adds	r0, #12
 800e24c:	f7fd f9a0 	bl	800b590 <memcpy>
 800e250:	4621      	mov	r1, r4
 800e252:	ee18 0a10 	vmov	r0, s16
 800e256:	f000 f947 	bl	800e4e8 <_Bfree>
 800e25a:	464c      	mov	r4, r9
 800e25c:	6923      	ldr	r3, [r4, #16]
 800e25e:	1c5a      	adds	r2, r3, #1
 800e260:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e264:	6122      	str	r2, [r4, #16]
 800e266:	2201      	movs	r2, #1
 800e268:	615a      	str	r2, [r3, #20]
 800e26a:	e7bb      	b.n	800e1e4 <__gethex+0x3c8>
 800e26c:	6922      	ldr	r2, [r4, #16]
 800e26e:	455a      	cmp	r2, fp
 800e270:	dd0b      	ble.n	800e28a <__gethex+0x46e>
 800e272:	2101      	movs	r1, #1
 800e274:	4620      	mov	r0, r4
 800e276:	f7ff fd69 	bl	800dd4c <rshift>
 800e27a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e27e:	3501      	adds	r5, #1
 800e280:	42ab      	cmp	r3, r5
 800e282:	f6ff aed0 	blt.w	800e026 <__gethex+0x20a>
 800e286:	2701      	movs	r7, #1
 800e288:	e7c0      	b.n	800e20c <__gethex+0x3f0>
 800e28a:	f016 061f 	ands.w	r6, r6, #31
 800e28e:	d0fa      	beq.n	800e286 <__gethex+0x46a>
 800e290:	4453      	add	r3, sl
 800e292:	f1c6 0620 	rsb	r6, r6, #32
 800e296:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e29a:	f000 f9d7 	bl	800e64c <__hi0bits>
 800e29e:	42b0      	cmp	r0, r6
 800e2a0:	dbe7      	blt.n	800e272 <__gethex+0x456>
 800e2a2:	e7f0      	b.n	800e286 <__gethex+0x46a>
 800e2a4:	08010370 	.word	0x08010370

0800e2a8 <L_shift>:
 800e2a8:	f1c2 0208 	rsb	r2, r2, #8
 800e2ac:	0092      	lsls	r2, r2, #2
 800e2ae:	b570      	push	{r4, r5, r6, lr}
 800e2b0:	f1c2 0620 	rsb	r6, r2, #32
 800e2b4:	6843      	ldr	r3, [r0, #4]
 800e2b6:	6804      	ldr	r4, [r0, #0]
 800e2b8:	fa03 f506 	lsl.w	r5, r3, r6
 800e2bc:	432c      	orrs	r4, r5
 800e2be:	40d3      	lsrs	r3, r2
 800e2c0:	6004      	str	r4, [r0, #0]
 800e2c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800e2c6:	4288      	cmp	r0, r1
 800e2c8:	d3f4      	bcc.n	800e2b4 <L_shift+0xc>
 800e2ca:	bd70      	pop	{r4, r5, r6, pc}

0800e2cc <__match>:
 800e2cc:	b530      	push	{r4, r5, lr}
 800e2ce:	6803      	ldr	r3, [r0, #0]
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2d6:	b914      	cbnz	r4, 800e2de <__match+0x12>
 800e2d8:	6003      	str	r3, [r0, #0]
 800e2da:	2001      	movs	r0, #1
 800e2dc:	bd30      	pop	{r4, r5, pc}
 800e2de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e2e6:	2d19      	cmp	r5, #25
 800e2e8:	bf98      	it	ls
 800e2ea:	3220      	addls	r2, #32
 800e2ec:	42a2      	cmp	r2, r4
 800e2ee:	d0f0      	beq.n	800e2d2 <__match+0x6>
 800e2f0:	2000      	movs	r0, #0
 800e2f2:	e7f3      	b.n	800e2dc <__match+0x10>

0800e2f4 <__hexnan>:
 800e2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f8:	680b      	ldr	r3, [r1, #0]
 800e2fa:	115e      	asrs	r6, r3, #5
 800e2fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e300:	f013 031f 	ands.w	r3, r3, #31
 800e304:	b087      	sub	sp, #28
 800e306:	bf18      	it	ne
 800e308:	3604      	addne	r6, #4
 800e30a:	2500      	movs	r5, #0
 800e30c:	1f37      	subs	r7, r6, #4
 800e30e:	4690      	mov	r8, r2
 800e310:	6802      	ldr	r2, [r0, #0]
 800e312:	9301      	str	r3, [sp, #4]
 800e314:	4682      	mov	sl, r0
 800e316:	f846 5c04 	str.w	r5, [r6, #-4]
 800e31a:	46b9      	mov	r9, r7
 800e31c:	463c      	mov	r4, r7
 800e31e:	9502      	str	r5, [sp, #8]
 800e320:	46ab      	mov	fp, r5
 800e322:	7851      	ldrb	r1, [r2, #1]
 800e324:	1c53      	adds	r3, r2, #1
 800e326:	9303      	str	r3, [sp, #12]
 800e328:	b341      	cbz	r1, 800e37c <__hexnan+0x88>
 800e32a:	4608      	mov	r0, r1
 800e32c:	9205      	str	r2, [sp, #20]
 800e32e:	9104      	str	r1, [sp, #16]
 800e330:	f7ff fd5e 	bl	800ddf0 <__hexdig_fun>
 800e334:	2800      	cmp	r0, #0
 800e336:	d14f      	bne.n	800e3d8 <__hexnan+0xe4>
 800e338:	9904      	ldr	r1, [sp, #16]
 800e33a:	9a05      	ldr	r2, [sp, #20]
 800e33c:	2920      	cmp	r1, #32
 800e33e:	d818      	bhi.n	800e372 <__hexnan+0x7e>
 800e340:	9b02      	ldr	r3, [sp, #8]
 800e342:	459b      	cmp	fp, r3
 800e344:	dd13      	ble.n	800e36e <__hexnan+0x7a>
 800e346:	454c      	cmp	r4, r9
 800e348:	d206      	bcs.n	800e358 <__hexnan+0x64>
 800e34a:	2d07      	cmp	r5, #7
 800e34c:	dc04      	bgt.n	800e358 <__hexnan+0x64>
 800e34e:	462a      	mov	r2, r5
 800e350:	4649      	mov	r1, r9
 800e352:	4620      	mov	r0, r4
 800e354:	f7ff ffa8 	bl	800e2a8 <L_shift>
 800e358:	4544      	cmp	r4, r8
 800e35a:	d950      	bls.n	800e3fe <__hexnan+0x10a>
 800e35c:	2300      	movs	r3, #0
 800e35e:	f1a4 0904 	sub.w	r9, r4, #4
 800e362:	f844 3c04 	str.w	r3, [r4, #-4]
 800e366:	f8cd b008 	str.w	fp, [sp, #8]
 800e36a:	464c      	mov	r4, r9
 800e36c:	461d      	mov	r5, r3
 800e36e:	9a03      	ldr	r2, [sp, #12]
 800e370:	e7d7      	b.n	800e322 <__hexnan+0x2e>
 800e372:	2929      	cmp	r1, #41	; 0x29
 800e374:	d156      	bne.n	800e424 <__hexnan+0x130>
 800e376:	3202      	adds	r2, #2
 800e378:	f8ca 2000 	str.w	r2, [sl]
 800e37c:	f1bb 0f00 	cmp.w	fp, #0
 800e380:	d050      	beq.n	800e424 <__hexnan+0x130>
 800e382:	454c      	cmp	r4, r9
 800e384:	d206      	bcs.n	800e394 <__hexnan+0xa0>
 800e386:	2d07      	cmp	r5, #7
 800e388:	dc04      	bgt.n	800e394 <__hexnan+0xa0>
 800e38a:	462a      	mov	r2, r5
 800e38c:	4649      	mov	r1, r9
 800e38e:	4620      	mov	r0, r4
 800e390:	f7ff ff8a 	bl	800e2a8 <L_shift>
 800e394:	4544      	cmp	r4, r8
 800e396:	d934      	bls.n	800e402 <__hexnan+0x10e>
 800e398:	f1a8 0204 	sub.w	r2, r8, #4
 800e39c:	4623      	mov	r3, r4
 800e39e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e3a2:	f842 1f04 	str.w	r1, [r2, #4]!
 800e3a6:	429f      	cmp	r7, r3
 800e3a8:	d2f9      	bcs.n	800e39e <__hexnan+0xaa>
 800e3aa:	1b3b      	subs	r3, r7, r4
 800e3ac:	f023 0303 	bic.w	r3, r3, #3
 800e3b0:	3304      	adds	r3, #4
 800e3b2:	3401      	adds	r4, #1
 800e3b4:	3e03      	subs	r6, #3
 800e3b6:	42b4      	cmp	r4, r6
 800e3b8:	bf88      	it	hi
 800e3ba:	2304      	movhi	r3, #4
 800e3bc:	4443      	add	r3, r8
 800e3be:	2200      	movs	r2, #0
 800e3c0:	f843 2b04 	str.w	r2, [r3], #4
 800e3c4:	429f      	cmp	r7, r3
 800e3c6:	d2fb      	bcs.n	800e3c0 <__hexnan+0xcc>
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	b91b      	cbnz	r3, 800e3d4 <__hexnan+0xe0>
 800e3cc:	4547      	cmp	r7, r8
 800e3ce:	d127      	bne.n	800e420 <__hexnan+0x12c>
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	603b      	str	r3, [r7, #0]
 800e3d4:	2005      	movs	r0, #5
 800e3d6:	e026      	b.n	800e426 <__hexnan+0x132>
 800e3d8:	3501      	adds	r5, #1
 800e3da:	2d08      	cmp	r5, #8
 800e3dc:	f10b 0b01 	add.w	fp, fp, #1
 800e3e0:	dd06      	ble.n	800e3f0 <__hexnan+0xfc>
 800e3e2:	4544      	cmp	r4, r8
 800e3e4:	d9c3      	bls.n	800e36e <__hexnan+0x7a>
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e3ec:	2501      	movs	r5, #1
 800e3ee:	3c04      	subs	r4, #4
 800e3f0:	6822      	ldr	r2, [r4, #0]
 800e3f2:	f000 000f 	and.w	r0, r0, #15
 800e3f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e3fa:	6022      	str	r2, [r4, #0]
 800e3fc:	e7b7      	b.n	800e36e <__hexnan+0x7a>
 800e3fe:	2508      	movs	r5, #8
 800e400:	e7b5      	b.n	800e36e <__hexnan+0x7a>
 800e402:	9b01      	ldr	r3, [sp, #4]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d0df      	beq.n	800e3c8 <__hexnan+0xd4>
 800e408:	f04f 32ff 	mov.w	r2, #4294967295
 800e40c:	f1c3 0320 	rsb	r3, r3, #32
 800e410:	fa22 f303 	lsr.w	r3, r2, r3
 800e414:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e418:	401a      	ands	r2, r3
 800e41a:	f846 2c04 	str.w	r2, [r6, #-4]
 800e41e:	e7d3      	b.n	800e3c8 <__hexnan+0xd4>
 800e420:	3f04      	subs	r7, #4
 800e422:	e7d1      	b.n	800e3c8 <__hexnan+0xd4>
 800e424:	2004      	movs	r0, #4
 800e426:	b007      	add	sp, #28
 800e428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e42c <_localeconv_r>:
 800e42c:	4800      	ldr	r0, [pc, #0]	; (800e430 <_localeconv_r+0x4>)
 800e42e:	4770      	bx	lr
 800e430:	20000384 	.word	0x20000384

0800e434 <malloc>:
 800e434:	4b02      	ldr	r3, [pc, #8]	; (800e440 <malloc+0xc>)
 800e436:	4601      	mov	r1, r0
 800e438:	6818      	ldr	r0, [r3, #0]
 800e43a:	f000 bd59 	b.w	800eef0 <_malloc_r>
 800e43e:	bf00      	nop
 800e440:	2000022c 	.word	0x2000022c

0800e444 <__ascii_mbtowc>:
 800e444:	b082      	sub	sp, #8
 800e446:	b901      	cbnz	r1, 800e44a <__ascii_mbtowc+0x6>
 800e448:	a901      	add	r1, sp, #4
 800e44a:	b142      	cbz	r2, 800e45e <__ascii_mbtowc+0x1a>
 800e44c:	b14b      	cbz	r3, 800e462 <__ascii_mbtowc+0x1e>
 800e44e:	7813      	ldrb	r3, [r2, #0]
 800e450:	600b      	str	r3, [r1, #0]
 800e452:	7812      	ldrb	r2, [r2, #0]
 800e454:	1e10      	subs	r0, r2, #0
 800e456:	bf18      	it	ne
 800e458:	2001      	movne	r0, #1
 800e45a:	b002      	add	sp, #8
 800e45c:	4770      	bx	lr
 800e45e:	4610      	mov	r0, r2
 800e460:	e7fb      	b.n	800e45a <__ascii_mbtowc+0x16>
 800e462:	f06f 0001 	mvn.w	r0, #1
 800e466:	e7f8      	b.n	800e45a <__ascii_mbtowc+0x16>

0800e468 <_Balloc>:
 800e468:	b570      	push	{r4, r5, r6, lr}
 800e46a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e46c:	4604      	mov	r4, r0
 800e46e:	460d      	mov	r5, r1
 800e470:	b976      	cbnz	r6, 800e490 <_Balloc+0x28>
 800e472:	2010      	movs	r0, #16
 800e474:	f7ff ffde 	bl	800e434 <malloc>
 800e478:	4602      	mov	r2, r0
 800e47a:	6260      	str	r0, [r4, #36]	; 0x24
 800e47c:	b920      	cbnz	r0, 800e488 <_Balloc+0x20>
 800e47e:	4b18      	ldr	r3, [pc, #96]	; (800e4e0 <_Balloc+0x78>)
 800e480:	4818      	ldr	r0, [pc, #96]	; (800e4e4 <_Balloc+0x7c>)
 800e482:	2166      	movs	r1, #102	; 0x66
 800e484:	f000 ff3e 	bl	800f304 <__assert_func>
 800e488:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e48c:	6006      	str	r6, [r0, #0]
 800e48e:	60c6      	str	r6, [r0, #12]
 800e490:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e492:	68f3      	ldr	r3, [r6, #12]
 800e494:	b183      	cbz	r3, 800e4b8 <_Balloc+0x50>
 800e496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e498:	68db      	ldr	r3, [r3, #12]
 800e49a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e49e:	b9b8      	cbnz	r0, 800e4d0 <_Balloc+0x68>
 800e4a0:	2101      	movs	r1, #1
 800e4a2:	fa01 f605 	lsl.w	r6, r1, r5
 800e4a6:	1d72      	adds	r2, r6, #5
 800e4a8:	0092      	lsls	r2, r2, #2
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	f000 fc9d 	bl	800edea <_calloc_r>
 800e4b0:	b160      	cbz	r0, 800e4cc <_Balloc+0x64>
 800e4b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e4b6:	e00e      	b.n	800e4d6 <_Balloc+0x6e>
 800e4b8:	2221      	movs	r2, #33	; 0x21
 800e4ba:	2104      	movs	r1, #4
 800e4bc:	4620      	mov	r0, r4
 800e4be:	f000 fc94 	bl	800edea <_calloc_r>
 800e4c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4c4:	60f0      	str	r0, [r6, #12]
 800e4c6:	68db      	ldr	r3, [r3, #12]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d1e4      	bne.n	800e496 <_Balloc+0x2e>
 800e4cc:	2000      	movs	r0, #0
 800e4ce:	bd70      	pop	{r4, r5, r6, pc}
 800e4d0:	6802      	ldr	r2, [r0, #0]
 800e4d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e4dc:	e7f7      	b.n	800e4ce <_Balloc+0x66>
 800e4de:	bf00      	nop
 800e4e0:	080102fe 	.word	0x080102fe
 800e4e4:	080103fc 	.word	0x080103fc

0800e4e8 <_Bfree>:
 800e4e8:	b570      	push	{r4, r5, r6, lr}
 800e4ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e4ec:	4605      	mov	r5, r0
 800e4ee:	460c      	mov	r4, r1
 800e4f0:	b976      	cbnz	r6, 800e510 <_Bfree+0x28>
 800e4f2:	2010      	movs	r0, #16
 800e4f4:	f7ff ff9e 	bl	800e434 <malloc>
 800e4f8:	4602      	mov	r2, r0
 800e4fa:	6268      	str	r0, [r5, #36]	; 0x24
 800e4fc:	b920      	cbnz	r0, 800e508 <_Bfree+0x20>
 800e4fe:	4b09      	ldr	r3, [pc, #36]	; (800e524 <_Bfree+0x3c>)
 800e500:	4809      	ldr	r0, [pc, #36]	; (800e528 <_Bfree+0x40>)
 800e502:	218a      	movs	r1, #138	; 0x8a
 800e504:	f000 fefe 	bl	800f304 <__assert_func>
 800e508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e50c:	6006      	str	r6, [r0, #0]
 800e50e:	60c6      	str	r6, [r0, #12]
 800e510:	b13c      	cbz	r4, 800e522 <_Bfree+0x3a>
 800e512:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e514:	6862      	ldr	r2, [r4, #4]
 800e516:	68db      	ldr	r3, [r3, #12]
 800e518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e51c:	6021      	str	r1, [r4, #0]
 800e51e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e522:	bd70      	pop	{r4, r5, r6, pc}
 800e524:	080102fe 	.word	0x080102fe
 800e528:	080103fc 	.word	0x080103fc

0800e52c <__multadd>:
 800e52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e530:	690d      	ldr	r5, [r1, #16]
 800e532:	4607      	mov	r7, r0
 800e534:	460c      	mov	r4, r1
 800e536:	461e      	mov	r6, r3
 800e538:	f101 0c14 	add.w	ip, r1, #20
 800e53c:	2000      	movs	r0, #0
 800e53e:	f8dc 3000 	ldr.w	r3, [ip]
 800e542:	b299      	uxth	r1, r3
 800e544:	fb02 6101 	mla	r1, r2, r1, r6
 800e548:	0c1e      	lsrs	r6, r3, #16
 800e54a:	0c0b      	lsrs	r3, r1, #16
 800e54c:	fb02 3306 	mla	r3, r2, r6, r3
 800e550:	b289      	uxth	r1, r1
 800e552:	3001      	adds	r0, #1
 800e554:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e558:	4285      	cmp	r5, r0
 800e55a:	f84c 1b04 	str.w	r1, [ip], #4
 800e55e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e562:	dcec      	bgt.n	800e53e <__multadd+0x12>
 800e564:	b30e      	cbz	r6, 800e5aa <__multadd+0x7e>
 800e566:	68a3      	ldr	r3, [r4, #8]
 800e568:	42ab      	cmp	r3, r5
 800e56a:	dc19      	bgt.n	800e5a0 <__multadd+0x74>
 800e56c:	6861      	ldr	r1, [r4, #4]
 800e56e:	4638      	mov	r0, r7
 800e570:	3101      	adds	r1, #1
 800e572:	f7ff ff79 	bl	800e468 <_Balloc>
 800e576:	4680      	mov	r8, r0
 800e578:	b928      	cbnz	r0, 800e586 <__multadd+0x5a>
 800e57a:	4602      	mov	r2, r0
 800e57c:	4b0c      	ldr	r3, [pc, #48]	; (800e5b0 <__multadd+0x84>)
 800e57e:	480d      	ldr	r0, [pc, #52]	; (800e5b4 <__multadd+0x88>)
 800e580:	21b5      	movs	r1, #181	; 0xb5
 800e582:	f000 febf 	bl	800f304 <__assert_func>
 800e586:	6922      	ldr	r2, [r4, #16]
 800e588:	3202      	adds	r2, #2
 800e58a:	f104 010c 	add.w	r1, r4, #12
 800e58e:	0092      	lsls	r2, r2, #2
 800e590:	300c      	adds	r0, #12
 800e592:	f7fc fffd 	bl	800b590 <memcpy>
 800e596:	4621      	mov	r1, r4
 800e598:	4638      	mov	r0, r7
 800e59a:	f7ff ffa5 	bl	800e4e8 <_Bfree>
 800e59e:	4644      	mov	r4, r8
 800e5a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e5a4:	3501      	adds	r5, #1
 800e5a6:	615e      	str	r6, [r3, #20]
 800e5a8:	6125      	str	r5, [r4, #16]
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5b0:	08010370 	.word	0x08010370
 800e5b4:	080103fc 	.word	0x080103fc

0800e5b8 <__s2b>:
 800e5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5bc:	460c      	mov	r4, r1
 800e5be:	4615      	mov	r5, r2
 800e5c0:	461f      	mov	r7, r3
 800e5c2:	2209      	movs	r2, #9
 800e5c4:	3308      	adds	r3, #8
 800e5c6:	4606      	mov	r6, r0
 800e5c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e5cc:	2100      	movs	r1, #0
 800e5ce:	2201      	movs	r2, #1
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	db09      	blt.n	800e5e8 <__s2b+0x30>
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	f7ff ff47 	bl	800e468 <_Balloc>
 800e5da:	b940      	cbnz	r0, 800e5ee <__s2b+0x36>
 800e5dc:	4602      	mov	r2, r0
 800e5de:	4b19      	ldr	r3, [pc, #100]	; (800e644 <__s2b+0x8c>)
 800e5e0:	4819      	ldr	r0, [pc, #100]	; (800e648 <__s2b+0x90>)
 800e5e2:	21ce      	movs	r1, #206	; 0xce
 800e5e4:	f000 fe8e 	bl	800f304 <__assert_func>
 800e5e8:	0052      	lsls	r2, r2, #1
 800e5ea:	3101      	adds	r1, #1
 800e5ec:	e7f0      	b.n	800e5d0 <__s2b+0x18>
 800e5ee:	9b08      	ldr	r3, [sp, #32]
 800e5f0:	6143      	str	r3, [r0, #20]
 800e5f2:	2d09      	cmp	r5, #9
 800e5f4:	f04f 0301 	mov.w	r3, #1
 800e5f8:	6103      	str	r3, [r0, #16]
 800e5fa:	dd16      	ble.n	800e62a <__s2b+0x72>
 800e5fc:	f104 0909 	add.w	r9, r4, #9
 800e600:	46c8      	mov	r8, r9
 800e602:	442c      	add	r4, r5
 800e604:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e608:	4601      	mov	r1, r0
 800e60a:	3b30      	subs	r3, #48	; 0x30
 800e60c:	220a      	movs	r2, #10
 800e60e:	4630      	mov	r0, r6
 800e610:	f7ff ff8c 	bl	800e52c <__multadd>
 800e614:	45a0      	cmp	r8, r4
 800e616:	d1f5      	bne.n	800e604 <__s2b+0x4c>
 800e618:	f1a5 0408 	sub.w	r4, r5, #8
 800e61c:	444c      	add	r4, r9
 800e61e:	1b2d      	subs	r5, r5, r4
 800e620:	1963      	adds	r3, r4, r5
 800e622:	42bb      	cmp	r3, r7
 800e624:	db04      	blt.n	800e630 <__s2b+0x78>
 800e626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e62a:	340a      	adds	r4, #10
 800e62c:	2509      	movs	r5, #9
 800e62e:	e7f6      	b.n	800e61e <__s2b+0x66>
 800e630:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e634:	4601      	mov	r1, r0
 800e636:	3b30      	subs	r3, #48	; 0x30
 800e638:	220a      	movs	r2, #10
 800e63a:	4630      	mov	r0, r6
 800e63c:	f7ff ff76 	bl	800e52c <__multadd>
 800e640:	e7ee      	b.n	800e620 <__s2b+0x68>
 800e642:	bf00      	nop
 800e644:	08010370 	.word	0x08010370
 800e648:	080103fc 	.word	0x080103fc

0800e64c <__hi0bits>:
 800e64c:	0c03      	lsrs	r3, r0, #16
 800e64e:	041b      	lsls	r3, r3, #16
 800e650:	b9d3      	cbnz	r3, 800e688 <__hi0bits+0x3c>
 800e652:	0400      	lsls	r0, r0, #16
 800e654:	2310      	movs	r3, #16
 800e656:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e65a:	bf04      	itt	eq
 800e65c:	0200      	lsleq	r0, r0, #8
 800e65e:	3308      	addeq	r3, #8
 800e660:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e664:	bf04      	itt	eq
 800e666:	0100      	lsleq	r0, r0, #4
 800e668:	3304      	addeq	r3, #4
 800e66a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e66e:	bf04      	itt	eq
 800e670:	0080      	lsleq	r0, r0, #2
 800e672:	3302      	addeq	r3, #2
 800e674:	2800      	cmp	r0, #0
 800e676:	db05      	blt.n	800e684 <__hi0bits+0x38>
 800e678:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e67c:	f103 0301 	add.w	r3, r3, #1
 800e680:	bf08      	it	eq
 800e682:	2320      	moveq	r3, #32
 800e684:	4618      	mov	r0, r3
 800e686:	4770      	bx	lr
 800e688:	2300      	movs	r3, #0
 800e68a:	e7e4      	b.n	800e656 <__hi0bits+0xa>

0800e68c <__lo0bits>:
 800e68c:	6803      	ldr	r3, [r0, #0]
 800e68e:	f013 0207 	ands.w	r2, r3, #7
 800e692:	4601      	mov	r1, r0
 800e694:	d00b      	beq.n	800e6ae <__lo0bits+0x22>
 800e696:	07da      	lsls	r2, r3, #31
 800e698:	d423      	bmi.n	800e6e2 <__lo0bits+0x56>
 800e69a:	0798      	lsls	r0, r3, #30
 800e69c:	bf49      	itett	mi
 800e69e:	085b      	lsrmi	r3, r3, #1
 800e6a0:	089b      	lsrpl	r3, r3, #2
 800e6a2:	2001      	movmi	r0, #1
 800e6a4:	600b      	strmi	r3, [r1, #0]
 800e6a6:	bf5c      	itt	pl
 800e6a8:	600b      	strpl	r3, [r1, #0]
 800e6aa:	2002      	movpl	r0, #2
 800e6ac:	4770      	bx	lr
 800e6ae:	b298      	uxth	r0, r3
 800e6b0:	b9a8      	cbnz	r0, 800e6de <__lo0bits+0x52>
 800e6b2:	0c1b      	lsrs	r3, r3, #16
 800e6b4:	2010      	movs	r0, #16
 800e6b6:	b2da      	uxtb	r2, r3
 800e6b8:	b90a      	cbnz	r2, 800e6be <__lo0bits+0x32>
 800e6ba:	3008      	adds	r0, #8
 800e6bc:	0a1b      	lsrs	r3, r3, #8
 800e6be:	071a      	lsls	r2, r3, #28
 800e6c0:	bf04      	itt	eq
 800e6c2:	091b      	lsreq	r3, r3, #4
 800e6c4:	3004      	addeq	r0, #4
 800e6c6:	079a      	lsls	r2, r3, #30
 800e6c8:	bf04      	itt	eq
 800e6ca:	089b      	lsreq	r3, r3, #2
 800e6cc:	3002      	addeq	r0, #2
 800e6ce:	07da      	lsls	r2, r3, #31
 800e6d0:	d403      	bmi.n	800e6da <__lo0bits+0x4e>
 800e6d2:	085b      	lsrs	r3, r3, #1
 800e6d4:	f100 0001 	add.w	r0, r0, #1
 800e6d8:	d005      	beq.n	800e6e6 <__lo0bits+0x5a>
 800e6da:	600b      	str	r3, [r1, #0]
 800e6dc:	4770      	bx	lr
 800e6de:	4610      	mov	r0, r2
 800e6e0:	e7e9      	b.n	800e6b6 <__lo0bits+0x2a>
 800e6e2:	2000      	movs	r0, #0
 800e6e4:	4770      	bx	lr
 800e6e6:	2020      	movs	r0, #32
 800e6e8:	4770      	bx	lr
	...

0800e6ec <__i2b>:
 800e6ec:	b510      	push	{r4, lr}
 800e6ee:	460c      	mov	r4, r1
 800e6f0:	2101      	movs	r1, #1
 800e6f2:	f7ff feb9 	bl	800e468 <_Balloc>
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	b928      	cbnz	r0, 800e706 <__i2b+0x1a>
 800e6fa:	4b05      	ldr	r3, [pc, #20]	; (800e710 <__i2b+0x24>)
 800e6fc:	4805      	ldr	r0, [pc, #20]	; (800e714 <__i2b+0x28>)
 800e6fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e702:	f000 fdff 	bl	800f304 <__assert_func>
 800e706:	2301      	movs	r3, #1
 800e708:	6144      	str	r4, [r0, #20]
 800e70a:	6103      	str	r3, [r0, #16]
 800e70c:	bd10      	pop	{r4, pc}
 800e70e:	bf00      	nop
 800e710:	08010370 	.word	0x08010370
 800e714:	080103fc 	.word	0x080103fc

0800e718 <__multiply>:
 800e718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e71c:	4691      	mov	r9, r2
 800e71e:	690a      	ldr	r2, [r1, #16]
 800e720:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e724:	429a      	cmp	r2, r3
 800e726:	bfb8      	it	lt
 800e728:	460b      	movlt	r3, r1
 800e72a:	460c      	mov	r4, r1
 800e72c:	bfbc      	itt	lt
 800e72e:	464c      	movlt	r4, r9
 800e730:	4699      	movlt	r9, r3
 800e732:	6927      	ldr	r7, [r4, #16]
 800e734:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e738:	68a3      	ldr	r3, [r4, #8]
 800e73a:	6861      	ldr	r1, [r4, #4]
 800e73c:	eb07 060a 	add.w	r6, r7, sl
 800e740:	42b3      	cmp	r3, r6
 800e742:	b085      	sub	sp, #20
 800e744:	bfb8      	it	lt
 800e746:	3101      	addlt	r1, #1
 800e748:	f7ff fe8e 	bl	800e468 <_Balloc>
 800e74c:	b930      	cbnz	r0, 800e75c <__multiply+0x44>
 800e74e:	4602      	mov	r2, r0
 800e750:	4b44      	ldr	r3, [pc, #272]	; (800e864 <__multiply+0x14c>)
 800e752:	4845      	ldr	r0, [pc, #276]	; (800e868 <__multiply+0x150>)
 800e754:	f240 115d 	movw	r1, #349	; 0x15d
 800e758:	f000 fdd4 	bl	800f304 <__assert_func>
 800e75c:	f100 0514 	add.w	r5, r0, #20
 800e760:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e764:	462b      	mov	r3, r5
 800e766:	2200      	movs	r2, #0
 800e768:	4543      	cmp	r3, r8
 800e76a:	d321      	bcc.n	800e7b0 <__multiply+0x98>
 800e76c:	f104 0314 	add.w	r3, r4, #20
 800e770:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e774:	f109 0314 	add.w	r3, r9, #20
 800e778:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e77c:	9202      	str	r2, [sp, #8]
 800e77e:	1b3a      	subs	r2, r7, r4
 800e780:	3a15      	subs	r2, #21
 800e782:	f022 0203 	bic.w	r2, r2, #3
 800e786:	3204      	adds	r2, #4
 800e788:	f104 0115 	add.w	r1, r4, #21
 800e78c:	428f      	cmp	r7, r1
 800e78e:	bf38      	it	cc
 800e790:	2204      	movcc	r2, #4
 800e792:	9201      	str	r2, [sp, #4]
 800e794:	9a02      	ldr	r2, [sp, #8]
 800e796:	9303      	str	r3, [sp, #12]
 800e798:	429a      	cmp	r2, r3
 800e79a:	d80c      	bhi.n	800e7b6 <__multiply+0x9e>
 800e79c:	2e00      	cmp	r6, #0
 800e79e:	dd03      	ble.n	800e7a8 <__multiply+0x90>
 800e7a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d05a      	beq.n	800e85e <__multiply+0x146>
 800e7a8:	6106      	str	r6, [r0, #16]
 800e7aa:	b005      	add	sp, #20
 800e7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7b0:	f843 2b04 	str.w	r2, [r3], #4
 800e7b4:	e7d8      	b.n	800e768 <__multiply+0x50>
 800e7b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800e7ba:	f1ba 0f00 	cmp.w	sl, #0
 800e7be:	d024      	beq.n	800e80a <__multiply+0xf2>
 800e7c0:	f104 0e14 	add.w	lr, r4, #20
 800e7c4:	46a9      	mov	r9, r5
 800e7c6:	f04f 0c00 	mov.w	ip, #0
 800e7ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e7ce:	f8d9 1000 	ldr.w	r1, [r9]
 800e7d2:	fa1f fb82 	uxth.w	fp, r2
 800e7d6:	b289      	uxth	r1, r1
 800e7d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800e7dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e7e0:	f8d9 2000 	ldr.w	r2, [r9]
 800e7e4:	4461      	add	r1, ip
 800e7e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e7ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800e7ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e7f2:	b289      	uxth	r1, r1
 800e7f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e7f8:	4577      	cmp	r7, lr
 800e7fa:	f849 1b04 	str.w	r1, [r9], #4
 800e7fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e802:	d8e2      	bhi.n	800e7ca <__multiply+0xb2>
 800e804:	9a01      	ldr	r2, [sp, #4]
 800e806:	f845 c002 	str.w	ip, [r5, r2]
 800e80a:	9a03      	ldr	r2, [sp, #12]
 800e80c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e810:	3304      	adds	r3, #4
 800e812:	f1b9 0f00 	cmp.w	r9, #0
 800e816:	d020      	beq.n	800e85a <__multiply+0x142>
 800e818:	6829      	ldr	r1, [r5, #0]
 800e81a:	f104 0c14 	add.w	ip, r4, #20
 800e81e:	46ae      	mov	lr, r5
 800e820:	f04f 0a00 	mov.w	sl, #0
 800e824:	f8bc b000 	ldrh.w	fp, [ip]
 800e828:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e82c:	fb09 220b 	mla	r2, r9, fp, r2
 800e830:	4492      	add	sl, r2
 800e832:	b289      	uxth	r1, r1
 800e834:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e838:	f84e 1b04 	str.w	r1, [lr], #4
 800e83c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e840:	f8be 1000 	ldrh.w	r1, [lr]
 800e844:	0c12      	lsrs	r2, r2, #16
 800e846:	fb09 1102 	mla	r1, r9, r2, r1
 800e84a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e84e:	4567      	cmp	r7, ip
 800e850:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e854:	d8e6      	bhi.n	800e824 <__multiply+0x10c>
 800e856:	9a01      	ldr	r2, [sp, #4]
 800e858:	50a9      	str	r1, [r5, r2]
 800e85a:	3504      	adds	r5, #4
 800e85c:	e79a      	b.n	800e794 <__multiply+0x7c>
 800e85e:	3e01      	subs	r6, #1
 800e860:	e79c      	b.n	800e79c <__multiply+0x84>
 800e862:	bf00      	nop
 800e864:	08010370 	.word	0x08010370
 800e868:	080103fc 	.word	0x080103fc

0800e86c <__pow5mult>:
 800e86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e870:	4615      	mov	r5, r2
 800e872:	f012 0203 	ands.w	r2, r2, #3
 800e876:	4606      	mov	r6, r0
 800e878:	460f      	mov	r7, r1
 800e87a:	d007      	beq.n	800e88c <__pow5mult+0x20>
 800e87c:	4c25      	ldr	r4, [pc, #148]	; (800e914 <__pow5mult+0xa8>)
 800e87e:	3a01      	subs	r2, #1
 800e880:	2300      	movs	r3, #0
 800e882:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e886:	f7ff fe51 	bl	800e52c <__multadd>
 800e88a:	4607      	mov	r7, r0
 800e88c:	10ad      	asrs	r5, r5, #2
 800e88e:	d03d      	beq.n	800e90c <__pow5mult+0xa0>
 800e890:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e892:	b97c      	cbnz	r4, 800e8b4 <__pow5mult+0x48>
 800e894:	2010      	movs	r0, #16
 800e896:	f7ff fdcd 	bl	800e434 <malloc>
 800e89a:	4602      	mov	r2, r0
 800e89c:	6270      	str	r0, [r6, #36]	; 0x24
 800e89e:	b928      	cbnz	r0, 800e8ac <__pow5mult+0x40>
 800e8a0:	4b1d      	ldr	r3, [pc, #116]	; (800e918 <__pow5mult+0xac>)
 800e8a2:	481e      	ldr	r0, [pc, #120]	; (800e91c <__pow5mult+0xb0>)
 800e8a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e8a8:	f000 fd2c 	bl	800f304 <__assert_func>
 800e8ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e8b0:	6004      	str	r4, [r0, #0]
 800e8b2:	60c4      	str	r4, [r0, #12]
 800e8b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e8b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e8bc:	b94c      	cbnz	r4, 800e8d2 <__pow5mult+0x66>
 800e8be:	f240 2171 	movw	r1, #625	; 0x271
 800e8c2:	4630      	mov	r0, r6
 800e8c4:	f7ff ff12 	bl	800e6ec <__i2b>
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800e8ce:	4604      	mov	r4, r0
 800e8d0:	6003      	str	r3, [r0, #0]
 800e8d2:	f04f 0900 	mov.w	r9, #0
 800e8d6:	07eb      	lsls	r3, r5, #31
 800e8d8:	d50a      	bpl.n	800e8f0 <__pow5mult+0x84>
 800e8da:	4639      	mov	r1, r7
 800e8dc:	4622      	mov	r2, r4
 800e8de:	4630      	mov	r0, r6
 800e8e0:	f7ff ff1a 	bl	800e718 <__multiply>
 800e8e4:	4639      	mov	r1, r7
 800e8e6:	4680      	mov	r8, r0
 800e8e8:	4630      	mov	r0, r6
 800e8ea:	f7ff fdfd 	bl	800e4e8 <_Bfree>
 800e8ee:	4647      	mov	r7, r8
 800e8f0:	106d      	asrs	r5, r5, #1
 800e8f2:	d00b      	beq.n	800e90c <__pow5mult+0xa0>
 800e8f4:	6820      	ldr	r0, [r4, #0]
 800e8f6:	b938      	cbnz	r0, 800e908 <__pow5mult+0x9c>
 800e8f8:	4622      	mov	r2, r4
 800e8fa:	4621      	mov	r1, r4
 800e8fc:	4630      	mov	r0, r6
 800e8fe:	f7ff ff0b 	bl	800e718 <__multiply>
 800e902:	6020      	str	r0, [r4, #0]
 800e904:	f8c0 9000 	str.w	r9, [r0]
 800e908:	4604      	mov	r4, r0
 800e90a:	e7e4      	b.n	800e8d6 <__pow5mult+0x6a>
 800e90c:	4638      	mov	r0, r7
 800e90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e912:	bf00      	nop
 800e914:	08010548 	.word	0x08010548
 800e918:	080102fe 	.word	0x080102fe
 800e91c:	080103fc 	.word	0x080103fc

0800e920 <__lshift>:
 800e920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e924:	460c      	mov	r4, r1
 800e926:	6849      	ldr	r1, [r1, #4]
 800e928:	6923      	ldr	r3, [r4, #16]
 800e92a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e92e:	68a3      	ldr	r3, [r4, #8]
 800e930:	4607      	mov	r7, r0
 800e932:	4691      	mov	r9, r2
 800e934:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e938:	f108 0601 	add.w	r6, r8, #1
 800e93c:	42b3      	cmp	r3, r6
 800e93e:	db0b      	blt.n	800e958 <__lshift+0x38>
 800e940:	4638      	mov	r0, r7
 800e942:	f7ff fd91 	bl	800e468 <_Balloc>
 800e946:	4605      	mov	r5, r0
 800e948:	b948      	cbnz	r0, 800e95e <__lshift+0x3e>
 800e94a:	4602      	mov	r2, r0
 800e94c:	4b2a      	ldr	r3, [pc, #168]	; (800e9f8 <__lshift+0xd8>)
 800e94e:	482b      	ldr	r0, [pc, #172]	; (800e9fc <__lshift+0xdc>)
 800e950:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e954:	f000 fcd6 	bl	800f304 <__assert_func>
 800e958:	3101      	adds	r1, #1
 800e95a:	005b      	lsls	r3, r3, #1
 800e95c:	e7ee      	b.n	800e93c <__lshift+0x1c>
 800e95e:	2300      	movs	r3, #0
 800e960:	f100 0114 	add.w	r1, r0, #20
 800e964:	f100 0210 	add.w	r2, r0, #16
 800e968:	4618      	mov	r0, r3
 800e96a:	4553      	cmp	r3, sl
 800e96c:	db37      	blt.n	800e9de <__lshift+0xbe>
 800e96e:	6920      	ldr	r0, [r4, #16]
 800e970:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e974:	f104 0314 	add.w	r3, r4, #20
 800e978:	f019 091f 	ands.w	r9, r9, #31
 800e97c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e980:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e984:	d02f      	beq.n	800e9e6 <__lshift+0xc6>
 800e986:	f1c9 0e20 	rsb	lr, r9, #32
 800e98a:	468a      	mov	sl, r1
 800e98c:	f04f 0c00 	mov.w	ip, #0
 800e990:	681a      	ldr	r2, [r3, #0]
 800e992:	fa02 f209 	lsl.w	r2, r2, r9
 800e996:	ea42 020c 	orr.w	r2, r2, ip
 800e99a:	f84a 2b04 	str.w	r2, [sl], #4
 800e99e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9a2:	4298      	cmp	r0, r3
 800e9a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e9a8:	d8f2      	bhi.n	800e990 <__lshift+0x70>
 800e9aa:	1b03      	subs	r3, r0, r4
 800e9ac:	3b15      	subs	r3, #21
 800e9ae:	f023 0303 	bic.w	r3, r3, #3
 800e9b2:	3304      	adds	r3, #4
 800e9b4:	f104 0215 	add.w	r2, r4, #21
 800e9b8:	4290      	cmp	r0, r2
 800e9ba:	bf38      	it	cc
 800e9bc:	2304      	movcc	r3, #4
 800e9be:	f841 c003 	str.w	ip, [r1, r3]
 800e9c2:	f1bc 0f00 	cmp.w	ip, #0
 800e9c6:	d001      	beq.n	800e9cc <__lshift+0xac>
 800e9c8:	f108 0602 	add.w	r6, r8, #2
 800e9cc:	3e01      	subs	r6, #1
 800e9ce:	4638      	mov	r0, r7
 800e9d0:	612e      	str	r6, [r5, #16]
 800e9d2:	4621      	mov	r1, r4
 800e9d4:	f7ff fd88 	bl	800e4e8 <_Bfree>
 800e9d8:	4628      	mov	r0, r5
 800e9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9de:	f842 0f04 	str.w	r0, [r2, #4]!
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	e7c1      	b.n	800e96a <__lshift+0x4a>
 800e9e6:	3904      	subs	r1, #4
 800e9e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800e9f0:	4298      	cmp	r0, r3
 800e9f2:	d8f9      	bhi.n	800e9e8 <__lshift+0xc8>
 800e9f4:	e7ea      	b.n	800e9cc <__lshift+0xac>
 800e9f6:	bf00      	nop
 800e9f8:	08010370 	.word	0x08010370
 800e9fc:	080103fc 	.word	0x080103fc

0800ea00 <__mcmp>:
 800ea00:	b530      	push	{r4, r5, lr}
 800ea02:	6902      	ldr	r2, [r0, #16]
 800ea04:	690c      	ldr	r4, [r1, #16]
 800ea06:	1b12      	subs	r2, r2, r4
 800ea08:	d10e      	bne.n	800ea28 <__mcmp+0x28>
 800ea0a:	f100 0314 	add.w	r3, r0, #20
 800ea0e:	3114      	adds	r1, #20
 800ea10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ea14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ea18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ea1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ea20:	42a5      	cmp	r5, r4
 800ea22:	d003      	beq.n	800ea2c <__mcmp+0x2c>
 800ea24:	d305      	bcc.n	800ea32 <__mcmp+0x32>
 800ea26:	2201      	movs	r2, #1
 800ea28:	4610      	mov	r0, r2
 800ea2a:	bd30      	pop	{r4, r5, pc}
 800ea2c:	4283      	cmp	r3, r0
 800ea2e:	d3f3      	bcc.n	800ea18 <__mcmp+0x18>
 800ea30:	e7fa      	b.n	800ea28 <__mcmp+0x28>
 800ea32:	f04f 32ff 	mov.w	r2, #4294967295
 800ea36:	e7f7      	b.n	800ea28 <__mcmp+0x28>

0800ea38 <__mdiff>:
 800ea38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea3c:	460c      	mov	r4, r1
 800ea3e:	4606      	mov	r6, r0
 800ea40:	4611      	mov	r1, r2
 800ea42:	4620      	mov	r0, r4
 800ea44:	4690      	mov	r8, r2
 800ea46:	f7ff ffdb 	bl	800ea00 <__mcmp>
 800ea4a:	1e05      	subs	r5, r0, #0
 800ea4c:	d110      	bne.n	800ea70 <__mdiff+0x38>
 800ea4e:	4629      	mov	r1, r5
 800ea50:	4630      	mov	r0, r6
 800ea52:	f7ff fd09 	bl	800e468 <_Balloc>
 800ea56:	b930      	cbnz	r0, 800ea66 <__mdiff+0x2e>
 800ea58:	4b3a      	ldr	r3, [pc, #232]	; (800eb44 <__mdiff+0x10c>)
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	f240 2132 	movw	r1, #562	; 0x232
 800ea60:	4839      	ldr	r0, [pc, #228]	; (800eb48 <__mdiff+0x110>)
 800ea62:	f000 fc4f 	bl	800f304 <__assert_func>
 800ea66:	2301      	movs	r3, #1
 800ea68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea70:	bfa4      	itt	ge
 800ea72:	4643      	movge	r3, r8
 800ea74:	46a0      	movge	r8, r4
 800ea76:	4630      	mov	r0, r6
 800ea78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ea7c:	bfa6      	itte	ge
 800ea7e:	461c      	movge	r4, r3
 800ea80:	2500      	movge	r5, #0
 800ea82:	2501      	movlt	r5, #1
 800ea84:	f7ff fcf0 	bl	800e468 <_Balloc>
 800ea88:	b920      	cbnz	r0, 800ea94 <__mdiff+0x5c>
 800ea8a:	4b2e      	ldr	r3, [pc, #184]	; (800eb44 <__mdiff+0x10c>)
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ea92:	e7e5      	b.n	800ea60 <__mdiff+0x28>
 800ea94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ea98:	6926      	ldr	r6, [r4, #16]
 800ea9a:	60c5      	str	r5, [r0, #12]
 800ea9c:	f104 0914 	add.w	r9, r4, #20
 800eaa0:	f108 0514 	add.w	r5, r8, #20
 800eaa4:	f100 0e14 	add.w	lr, r0, #20
 800eaa8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800eaac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eab0:	f108 0210 	add.w	r2, r8, #16
 800eab4:	46f2      	mov	sl, lr
 800eab6:	2100      	movs	r1, #0
 800eab8:	f859 3b04 	ldr.w	r3, [r9], #4
 800eabc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eac0:	fa1f f883 	uxth.w	r8, r3
 800eac4:	fa11 f18b 	uxtah	r1, r1, fp
 800eac8:	0c1b      	lsrs	r3, r3, #16
 800eaca:	eba1 0808 	sub.w	r8, r1, r8
 800eace:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ead2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ead6:	fa1f f888 	uxth.w	r8, r8
 800eada:	1419      	asrs	r1, r3, #16
 800eadc:	454e      	cmp	r6, r9
 800eade:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eae2:	f84a 3b04 	str.w	r3, [sl], #4
 800eae6:	d8e7      	bhi.n	800eab8 <__mdiff+0x80>
 800eae8:	1b33      	subs	r3, r6, r4
 800eaea:	3b15      	subs	r3, #21
 800eaec:	f023 0303 	bic.w	r3, r3, #3
 800eaf0:	3304      	adds	r3, #4
 800eaf2:	3415      	adds	r4, #21
 800eaf4:	42a6      	cmp	r6, r4
 800eaf6:	bf38      	it	cc
 800eaf8:	2304      	movcc	r3, #4
 800eafa:	441d      	add	r5, r3
 800eafc:	4473      	add	r3, lr
 800eafe:	469e      	mov	lr, r3
 800eb00:	462e      	mov	r6, r5
 800eb02:	4566      	cmp	r6, ip
 800eb04:	d30e      	bcc.n	800eb24 <__mdiff+0xec>
 800eb06:	f10c 0203 	add.w	r2, ip, #3
 800eb0a:	1b52      	subs	r2, r2, r5
 800eb0c:	f022 0203 	bic.w	r2, r2, #3
 800eb10:	3d03      	subs	r5, #3
 800eb12:	45ac      	cmp	ip, r5
 800eb14:	bf38      	it	cc
 800eb16:	2200      	movcc	r2, #0
 800eb18:	441a      	add	r2, r3
 800eb1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800eb1e:	b17b      	cbz	r3, 800eb40 <__mdiff+0x108>
 800eb20:	6107      	str	r7, [r0, #16]
 800eb22:	e7a3      	b.n	800ea6c <__mdiff+0x34>
 800eb24:	f856 8b04 	ldr.w	r8, [r6], #4
 800eb28:	fa11 f288 	uxtah	r2, r1, r8
 800eb2c:	1414      	asrs	r4, r2, #16
 800eb2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eb32:	b292      	uxth	r2, r2
 800eb34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800eb38:	f84e 2b04 	str.w	r2, [lr], #4
 800eb3c:	1421      	asrs	r1, r4, #16
 800eb3e:	e7e0      	b.n	800eb02 <__mdiff+0xca>
 800eb40:	3f01      	subs	r7, #1
 800eb42:	e7ea      	b.n	800eb1a <__mdiff+0xe2>
 800eb44:	08010370 	.word	0x08010370
 800eb48:	080103fc 	.word	0x080103fc

0800eb4c <__ulp>:
 800eb4c:	b082      	sub	sp, #8
 800eb4e:	ed8d 0b00 	vstr	d0, [sp]
 800eb52:	9b01      	ldr	r3, [sp, #4]
 800eb54:	4912      	ldr	r1, [pc, #72]	; (800eba0 <__ulp+0x54>)
 800eb56:	4019      	ands	r1, r3
 800eb58:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800eb5c:	2900      	cmp	r1, #0
 800eb5e:	dd05      	ble.n	800eb6c <__ulp+0x20>
 800eb60:	2200      	movs	r2, #0
 800eb62:	460b      	mov	r3, r1
 800eb64:	ec43 2b10 	vmov	d0, r2, r3
 800eb68:	b002      	add	sp, #8
 800eb6a:	4770      	bx	lr
 800eb6c:	4249      	negs	r1, r1
 800eb6e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800eb72:	ea4f 5021 	mov.w	r0, r1, asr #20
 800eb76:	f04f 0200 	mov.w	r2, #0
 800eb7a:	f04f 0300 	mov.w	r3, #0
 800eb7e:	da04      	bge.n	800eb8a <__ulp+0x3e>
 800eb80:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800eb84:	fa41 f300 	asr.w	r3, r1, r0
 800eb88:	e7ec      	b.n	800eb64 <__ulp+0x18>
 800eb8a:	f1a0 0114 	sub.w	r1, r0, #20
 800eb8e:	291e      	cmp	r1, #30
 800eb90:	bfda      	itte	le
 800eb92:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800eb96:	fa20 f101 	lsrle.w	r1, r0, r1
 800eb9a:	2101      	movgt	r1, #1
 800eb9c:	460a      	mov	r2, r1
 800eb9e:	e7e1      	b.n	800eb64 <__ulp+0x18>
 800eba0:	7ff00000 	.word	0x7ff00000

0800eba4 <__b2d>:
 800eba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eba6:	6905      	ldr	r5, [r0, #16]
 800eba8:	f100 0714 	add.w	r7, r0, #20
 800ebac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ebb0:	1f2e      	subs	r6, r5, #4
 800ebb2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	f7ff fd48 	bl	800e64c <__hi0bits>
 800ebbc:	f1c0 0320 	rsb	r3, r0, #32
 800ebc0:	280a      	cmp	r0, #10
 800ebc2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ec40 <__b2d+0x9c>
 800ebc6:	600b      	str	r3, [r1, #0]
 800ebc8:	dc14      	bgt.n	800ebf4 <__b2d+0x50>
 800ebca:	f1c0 0e0b 	rsb	lr, r0, #11
 800ebce:	fa24 f10e 	lsr.w	r1, r4, lr
 800ebd2:	42b7      	cmp	r7, r6
 800ebd4:	ea41 030c 	orr.w	r3, r1, ip
 800ebd8:	bf34      	ite	cc
 800ebda:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ebde:	2100      	movcs	r1, #0
 800ebe0:	3015      	adds	r0, #21
 800ebe2:	fa04 f000 	lsl.w	r0, r4, r0
 800ebe6:	fa21 f10e 	lsr.w	r1, r1, lr
 800ebea:	ea40 0201 	orr.w	r2, r0, r1
 800ebee:	ec43 2b10 	vmov	d0, r2, r3
 800ebf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebf4:	42b7      	cmp	r7, r6
 800ebf6:	bf3a      	itte	cc
 800ebf8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ebfc:	f1a5 0608 	subcc.w	r6, r5, #8
 800ec00:	2100      	movcs	r1, #0
 800ec02:	380b      	subs	r0, #11
 800ec04:	d017      	beq.n	800ec36 <__b2d+0x92>
 800ec06:	f1c0 0c20 	rsb	ip, r0, #32
 800ec0a:	fa04 f500 	lsl.w	r5, r4, r0
 800ec0e:	42be      	cmp	r6, r7
 800ec10:	fa21 f40c 	lsr.w	r4, r1, ip
 800ec14:	ea45 0504 	orr.w	r5, r5, r4
 800ec18:	bf8c      	ite	hi
 800ec1a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ec1e:	2400      	movls	r4, #0
 800ec20:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ec24:	fa01 f000 	lsl.w	r0, r1, r0
 800ec28:	fa24 f40c 	lsr.w	r4, r4, ip
 800ec2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ec30:	ea40 0204 	orr.w	r2, r0, r4
 800ec34:	e7db      	b.n	800ebee <__b2d+0x4a>
 800ec36:	ea44 030c 	orr.w	r3, r4, ip
 800ec3a:	460a      	mov	r2, r1
 800ec3c:	e7d7      	b.n	800ebee <__b2d+0x4a>
 800ec3e:	bf00      	nop
 800ec40:	3ff00000 	.word	0x3ff00000

0800ec44 <__d2b>:
 800ec44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec48:	4689      	mov	r9, r1
 800ec4a:	2101      	movs	r1, #1
 800ec4c:	ec57 6b10 	vmov	r6, r7, d0
 800ec50:	4690      	mov	r8, r2
 800ec52:	f7ff fc09 	bl	800e468 <_Balloc>
 800ec56:	4604      	mov	r4, r0
 800ec58:	b930      	cbnz	r0, 800ec68 <__d2b+0x24>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	4b25      	ldr	r3, [pc, #148]	; (800ecf4 <__d2b+0xb0>)
 800ec5e:	4826      	ldr	r0, [pc, #152]	; (800ecf8 <__d2b+0xb4>)
 800ec60:	f240 310a 	movw	r1, #778	; 0x30a
 800ec64:	f000 fb4e 	bl	800f304 <__assert_func>
 800ec68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ec6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ec70:	bb35      	cbnz	r5, 800ecc0 <__d2b+0x7c>
 800ec72:	2e00      	cmp	r6, #0
 800ec74:	9301      	str	r3, [sp, #4]
 800ec76:	d028      	beq.n	800ecca <__d2b+0x86>
 800ec78:	4668      	mov	r0, sp
 800ec7a:	9600      	str	r6, [sp, #0]
 800ec7c:	f7ff fd06 	bl	800e68c <__lo0bits>
 800ec80:	9900      	ldr	r1, [sp, #0]
 800ec82:	b300      	cbz	r0, 800ecc6 <__d2b+0x82>
 800ec84:	9a01      	ldr	r2, [sp, #4]
 800ec86:	f1c0 0320 	rsb	r3, r0, #32
 800ec8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ec8e:	430b      	orrs	r3, r1
 800ec90:	40c2      	lsrs	r2, r0
 800ec92:	6163      	str	r3, [r4, #20]
 800ec94:	9201      	str	r2, [sp, #4]
 800ec96:	9b01      	ldr	r3, [sp, #4]
 800ec98:	61a3      	str	r3, [r4, #24]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	bf14      	ite	ne
 800ec9e:	2202      	movne	r2, #2
 800eca0:	2201      	moveq	r2, #1
 800eca2:	6122      	str	r2, [r4, #16]
 800eca4:	b1d5      	cbz	r5, 800ecdc <__d2b+0x98>
 800eca6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ecaa:	4405      	add	r5, r0
 800ecac:	f8c9 5000 	str.w	r5, [r9]
 800ecb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ecb4:	f8c8 0000 	str.w	r0, [r8]
 800ecb8:	4620      	mov	r0, r4
 800ecba:	b003      	add	sp, #12
 800ecbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ecc4:	e7d5      	b.n	800ec72 <__d2b+0x2e>
 800ecc6:	6161      	str	r1, [r4, #20]
 800ecc8:	e7e5      	b.n	800ec96 <__d2b+0x52>
 800ecca:	a801      	add	r0, sp, #4
 800eccc:	f7ff fcde 	bl	800e68c <__lo0bits>
 800ecd0:	9b01      	ldr	r3, [sp, #4]
 800ecd2:	6163      	str	r3, [r4, #20]
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	6122      	str	r2, [r4, #16]
 800ecd8:	3020      	adds	r0, #32
 800ecda:	e7e3      	b.n	800eca4 <__d2b+0x60>
 800ecdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ece0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ece4:	f8c9 0000 	str.w	r0, [r9]
 800ece8:	6918      	ldr	r0, [r3, #16]
 800ecea:	f7ff fcaf 	bl	800e64c <__hi0bits>
 800ecee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ecf2:	e7df      	b.n	800ecb4 <__d2b+0x70>
 800ecf4:	08010370 	.word	0x08010370
 800ecf8:	080103fc 	.word	0x080103fc

0800ecfc <__ratio>:
 800ecfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed00:	4688      	mov	r8, r1
 800ed02:	4669      	mov	r1, sp
 800ed04:	4681      	mov	r9, r0
 800ed06:	f7ff ff4d 	bl	800eba4 <__b2d>
 800ed0a:	a901      	add	r1, sp, #4
 800ed0c:	4640      	mov	r0, r8
 800ed0e:	ec55 4b10 	vmov	r4, r5, d0
 800ed12:	f7ff ff47 	bl	800eba4 <__b2d>
 800ed16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ed1a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ed1e:	eba3 0c02 	sub.w	ip, r3, r2
 800ed22:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ed26:	1a9b      	subs	r3, r3, r2
 800ed28:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ed2c:	ec51 0b10 	vmov	r0, r1, d0
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	bfd6      	itet	le
 800ed34:	460a      	movle	r2, r1
 800ed36:	462a      	movgt	r2, r5
 800ed38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ed3c:	468b      	mov	fp, r1
 800ed3e:	462f      	mov	r7, r5
 800ed40:	bfd4      	ite	le
 800ed42:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ed46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ed4a:	4620      	mov	r0, r4
 800ed4c:	ee10 2a10 	vmov	r2, s0
 800ed50:	465b      	mov	r3, fp
 800ed52:	4639      	mov	r1, r7
 800ed54:	f7f1 fd82 	bl	800085c <__aeabi_ddiv>
 800ed58:	ec41 0b10 	vmov	d0, r0, r1
 800ed5c:	b003      	add	sp, #12
 800ed5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed62 <__copybits>:
 800ed62:	3901      	subs	r1, #1
 800ed64:	b570      	push	{r4, r5, r6, lr}
 800ed66:	1149      	asrs	r1, r1, #5
 800ed68:	6914      	ldr	r4, [r2, #16]
 800ed6a:	3101      	adds	r1, #1
 800ed6c:	f102 0314 	add.w	r3, r2, #20
 800ed70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ed74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ed78:	1f05      	subs	r5, r0, #4
 800ed7a:	42a3      	cmp	r3, r4
 800ed7c:	d30c      	bcc.n	800ed98 <__copybits+0x36>
 800ed7e:	1aa3      	subs	r3, r4, r2
 800ed80:	3b11      	subs	r3, #17
 800ed82:	f023 0303 	bic.w	r3, r3, #3
 800ed86:	3211      	adds	r2, #17
 800ed88:	42a2      	cmp	r2, r4
 800ed8a:	bf88      	it	hi
 800ed8c:	2300      	movhi	r3, #0
 800ed8e:	4418      	add	r0, r3
 800ed90:	2300      	movs	r3, #0
 800ed92:	4288      	cmp	r0, r1
 800ed94:	d305      	bcc.n	800eda2 <__copybits+0x40>
 800ed96:	bd70      	pop	{r4, r5, r6, pc}
 800ed98:	f853 6b04 	ldr.w	r6, [r3], #4
 800ed9c:	f845 6f04 	str.w	r6, [r5, #4]!
 800eda0:	e7eb      	b.n	800ed7a <__copybits+0x18>
 800eda2:	f840 3b04 	str.w	r3, [r0], #4
 800eda6:	e7f4      	b.n	800ed92 <__copybits+0x30>

0800eda8 <__any_on>:
 800eda8:	f100 0214 	add.w	r2, r0, #20
 800edac:	6900      	ldr	r0, [r0, #16]
 800edae:	114b      	asrs	r3, r1, #5
 800edb0:	4298      	cmp	r0, r3
 800edb2:	b510      	push	{r4, lr}
 800edb4:	db11      	blt.n	800edda <__any_on+0x32>
 800edb6:	dd0a      	ble.n	800edce <__any_on+0x26>
 800edb8:	f011 011f 	ands.w	r1, r1, #31
 800edbc:	d007      	beq.n	800edce <__any_on+0x26>
 800edbe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800edc2:	fa24 f001 	lsr.w	r0, r4, r1
 800edc6:	fa00 f101 	lsl.w	r1, r0, r1
 800edca:	428c      	cmp	r4, r1
 800edcc:	d10b      	bne.n	800ede6 <__any_on+0x3e>
 800edce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d803      	bhi.n	800edde <__any_on+0x36>
 800edd6:	2000      	movs	r0, #0
 800edd8:	bd10      	pop	{r4, pc}
 800edda:	4603      	mov	r3, r0
 800eddc:	e7f7      	b.n	800edce <__any_on+0x26>
 800edde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ede2:	2900      	cmp	r1, #0
 800ede4:	d0f5      	beq.n	800edd2 <__any_on+0x2a>
 800ede6:	2001      	movs	r0, #1
 800ede8:	e7f6      	b.n	800edd8 <__any_on+0x30>

0800edea <_calloc_r>:
 800edea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edec:	fba1 2402 	umull	r2, r4, r1, r2
 800edf0:	b94c      	cbnz	r4, 800ee06 <_calloc_r+0x1c>
 800edf2:	4611      	mov	r1, r2
 800edf4:	9201      	str	r2, [sp, #4]
 800edf6:	f000 f87b 	bl	800eef0 <_malloc_r>
 800edfa:	9a01      	ldr	r2, [sp, #4]
 800edfc:	4605      	mov	r5, r0
 800edfe:	b930      	cbnz	r0, 800ee0e <_calloc_r+0x24>
 800ee00:	4628      	mov	r0, r5
 800ee02:	b003      	add	sp, #12
 800ee04:	bd30      	pop	{r4, r5, pc}
 800ee06:	220c      	movs	r2, #12
 800ee08:	6002      	str	r2, [r0, #0]
 800ee0a:	2500      	movs	r5, #0
 800ee0c:	e7f8      	b.n	800ee00 <_calloc_r+0x16>
 800ee0e:	4621      	mov	r1, r4
 800ee10:	f7fc fbcc 	bl	800b5ac <memset>
 800ee14:	e7f4      	b.n	800ee00 <_calloc_r+0x16>
	...

0800ee18 <_free_r>:
 800ee18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee1a:	2900      	cmp	r1, #0
 800ee1c:	d044      	beq.n	800eea8 <_free_r+0x90>
 800ee1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee22:	9001      	str	r0, [sp, #4]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	f1a1 0404 	sub.w	r4, r1, #4
 800ee2a:	bfb8      	it	lt
 800ee2c:	18e4      	addlt	r4, r4, r3
 800ee2e:	f000 fab3 	bl	800f398 <__malloc_lock>
 800ee32:	4a1e      	ldr	r2, [pc, #120]	; (800eeac <_free_r+0x94>)
 800ee34:	9801      	ldr	r0, [sp, #4]
 800ee36:	6813      	ldr	r3, [r2, #0]
 800ee38:	b933      	cbnz	r3, 800ee48 <_free_r+0x30>
 800ee3a:	6063      	str	r3, [r4, #4]
 800ee3c:	6014      	str	r4, [r2, #0]
 800ee3e:	b003      	add	sp, #12
 800ee40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee44:	f000 baae 	b.w	800f3a4 <__malloc_unlock>
 800ee48:	42a3      	cmp	r3, r4
 800ee4a:	d908      	bls.n	800ee5e <_free_r+0x46>
 800ee4c:	6825      	ldr	r5, [r4, #0]
 800ee4e:	1961      	adds	r1, r4, r5
 800ee50:	428b      	cmp	r3, r1
 800ee52:	bf01      	itttt	eq
 800ee54:	6819      	ldreq	r1, [r3, #0]
 800ee56:	685b      	ldreq	r3, [r3, #4]
 800ee58:	1949      	addeq	r1, r1, r5
 800ee5a:	6021      	streq	r1, [r4, #0]
 800ee5c:	e7ed      	b.n	800ee3a <_free_r+0x22>
 800ee5e:	461a      	mov	r2, r3
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	b10b      	cbz	r3, 800ee68 <_free_r+0x50>
 800ee64:	42a3      	cmp	r3, r4
 800ee66:	d9fa      	bls.n	800ee5e <_free_r+0x46>
 800ee68:	6811      	ldr	r1, [r2, #0]
 800ee6a:	1855      	adds	r5, r2, r1
 800ee6c:	42a5      	cmp	r5, r4
 800ee6e:	d10b      	bne.n	800ee88 <_free_r+0x70>
 800ee70:	6824      	ldr	r4, [r4, #0]
 800ee72:	4421      	add	r1, r4
 800ee74:	1854      	adds	r4, r2, r1
 800ee76:	42a3      	cmp	r3, r4
 800ee78:	6011      	str	r1, [r2, #0]
 800ee7a:	d1e0      	bne.n	800ee3e <_free_r+0x26>
 800ee7c:	681c      	ldr	r4, [r3, #0]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	6053      	str	r3, [r2, #4]
 800ee82:	4421      	add	r1, r4
 800ee84:	6011      	str	r1, [r2, #0]
 800ee86:	e7da      	b.n	800ee3e <_free_r+0x26>
 800ee88:	d902      	bls.n	800ee90 <_free_r+0x78>
 800ee8a:	230c      	movs	r3, #12
 800ee8c:	6003      	str	r3, [r0, #0]
 800ee8e:	e7d6      	b.n	800ee3e <_free_r+0x26>
 800ee90:	6825      	ldr	r5, [r4, #0]
 800ee92:	1961      	adds	r1, r4, r5
 800ee94:	428b      	cmp	r3, r1
 800ee96:	bf04      	itt	eq
 800ee98:	6819      	ldreq	r1, [r3, #0]
 800ee9a:	685b      	ldreq	r3, [r3, #4]
 800ee9c:	6063      	str	r3, [r4, #4]
 800ee9e:	bf04      	itt	eq
 800eea0:	1949      	addeq	r1, r1, r5
 800eea2:	6021      	streq	r1, [r4, #0]
 800eea4:	6054      	str	r4, [r2, #4]
 800eea6:	e7ca      	b.n	800ee3e <_free_r+0x26>
 800eea8:	b003      	add	sp, #12
 800eeaa:	bd30      	pop	{r4, r5, pc}
 800eeac:	200010b0 	.word	0x200010b0

0800eeb0 <sbrk_aligned>:
 800eeb0:	b570      	push	{r4, r5, r6, lr}
 800eeb2:	4e0e      	ldr	r6, [pc, #56]	; (800eeec <sbrk_aligned+0x3c>)
 800eeb4:	460c      	mov	r4, r1
 800eeb6:	6831      	ldr	r1, [r6, #0]
 800eeb8:	4605      	mov	r5, r0
 800eeba:	b911      	cbnz	r1, 800eec2 <sbrk_aligned+0x12>
 800eebc:	f000 f9f0 	bl	800f2a0 <_sbrk_r>
 800eec0:	6030      	str	r0, [r6, #0]
 800eec2:	4621      	mov	r1, r4
 800eec4:	4628      	mov	r0, r5
 800eec6:	f000 f9eb 	bl	800f2a0 <_sbrk_r>
 800eeca:	1c43      	adds	r3, r0, #1
 800eecc:	d00a      	beq.n	800eee4 <sbrk_aligned+0x34>
 800eece:	1cc4      	adds	r4, r0, #3
 800eed0:	f024 0403 	bic.w	r4, r4, #3
 800eed4:	42a0      	cmp	r0, r4
 800eed6:	d007      	beq.n	800eee8 <sbrk_aligned+0x38>
 800eed8:	1a21      	subs	r1, r4, r0
 800eeda:	4628      	mov	r0, r5
 800eedc:	f000 f9e0 	bl	800f2a0 <_sbrk_r>
 800eee0:	3001      	adds	r0, #1
 800eee2:	d101      	bne.n	800eee8 <sbrk_aligned+0x38>
 800eee4:	f04f 34ff 	mov.w	r4, #4294967295
 800eee8:	4620      	mov	r0, r4
 800eeea:	bd70      	pop	{r4, r5, r6, pc}
 800eeec:	200010b4 	.word	0x200010b4

0800eef0 <_malloc_r>:
 800eef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eef4:	1ccd      	adds	r5, r1, #3
 800eef6:	f025 0503 	bic.w	r5, r5, #3
 800eefa:	3508      	adds	r5, #8
 800eefc:	2d0c      	cmp	r5, #12
 800eefe:	bf38      	it	cc
 800ef00:	250c      	movcc	r5, #12
 800ef02:	2d00      	cmp	r5, #0
 800ef04:	4607      	mov	r7, r0
 800ef06:	db01      	blt.n	800ef0c <_malloc_r+0x1c>
 800ef08:	42a9      	cmp	r1, r5
 800ef0a:	d905      	bls.n	800ef18 <_malloc_r+0x28>
 800ef0c:	230c      	movs	r3, #12
 800ef0e:	603b      	str	r3, [r7, #0]
 800ef10:	2600      	movs	r6, #0
 800ef12:	4630      	mov	r0, r6
 800ef14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef18:	4e2e      	ldr	r6, [pc, #184]	; (800efd4 <_malloc_r+0xe4>)
 800ef1a:	f000 fa3d 	bl	800f398 <__malloc_lock>
 800ef1e:	6833      	ldr	r3, [r6, #0]
 800ef20:	461c      	mov	r4, r3
 800ef22:	bb34      	cbnz	r4, 800ef72 <_malloc_r+0x82>
 800ef24:	4629      	mov	r1, r5
 800ef26:	4638      	mov	r0, r7
 800ef28:	f7ff ffc2 	bl	800eeb0 <sbrk_aligned>
 800ef2c:	1c43      	adds	r3, r0, #1
 800ef2e:	4604      	mov	r4, r0
 800ef30:	d14d      	bne.n	800efce <_malloc_r+0xde>
 800ef32:	6834      	ldr	r4, [r6, #0]
 800ef34:	4626      	mov	r6, r4
 800ef36:	2e00      	cmp	r6, #0
 800ef38:	d140      	bne.n	800efbc <_malloc_r+0xcc>
 800ef3a:	6823      	ldr	r3, [r4, #0]
 800ef3c:	4631      	mov	r1, r6
 800ef3e:	4638      	mov	r0, r7
 800ef40:	eb04 0803 	add.w	r8, r4, r3
 800ef44:	f000 f9ac 	bl	800f2a0 <_sbrk_r>
 800ef48:	4580      	cmp	r8, r0
 800ef4a:	d13a      	bne.n	800efc2 <_malloc_r+0xd2>
 800ef4c:	6821      	ldr	r1, [r4, #0]
 800ef4e:	3503      	adds	r5, #3
 800ef50:	1a6d      	subs	r5, r5, r1
 800ef52:	f025 0503 	bic.w	r5, r5, #3
 800ef56:	3508      	adds	r5, #8
 800ef58:	2d0c      	cmp	r5, #12
 800ef5a:	bf38      	it	cc
 800ef5c:	250c      	movcc	r5, #12
 800ef5e:	4629      	mov	r1, r5
 800ef60:	4638      	mov	r0, r7
 800ef62:	f7ff ffa5 	bl	800eeb0 <sbrk_aligned>
 800ef66:	3001      	adds	r0, #1
 800ef68:	d02b      	beq.n	800efc2 <_malloc_r+0xd2>
 800ef6a:	6823      	ldr	r3, [r4, #0]
 800ef6c:	442b      	add	r3, r5
 800ef6e:	6023      	str	r3, [r4, #0]
 800ef70:	e00e      	b.n	800ef90 <_malloc_r+0xa0>
 800ef72:	6822      	ldr	r2, [r4, #0]
 800ef74:	1b52      	subs	r2, r2, r5
 800ef76:	d41e      	bmi.n	800efb6 <_malloc_r+0xc6>
 800ef78:	2a0b      	cmp	r2, #11
 800ef7a:	d916      	bls.n	800efaa <_malloc_r+0xba>
 800ef7c:	1961      	adds	r1, r4, r5
 800ef7e:	42a3      	cmp	r3, r4
 800ef80:	6025      	str	r5, [r4, #0]
 800ef82:	bf18      	it	ne
 800ef84:	6059      	strne	r1, [r3, #4]
 800ef86:	6863      	ldr	r3, [r4, #4]
 800ef88:	bf08      	it	eq
 800ef8a:	6031      	streq	r1, [r6, #0]
 800ef8c:	5162      	str	r2, [r4, r5]
 800ef8e:	604b      	str	r3, [r1, #4]
 800ef90:	4638      	mov	r0, r7
 800ef92:	f104 060b 	add.w	r6, r4, #11
 800ef96:	f000 fa05 	bl	800f3a4 <__malloc_unlock>
 800ef9a:	f026 0607 	bic.w	r6, r6, #7
 800ef9e:	1d23      	adds	r3, r4, #4
 800efa0:	1af2      	subs	r2, r6, r3
 800efa2:	d0b6      	beq.n	800ef12 <_malloc_r+0x22>
 800efa4:	1b9b      	subs	r3, r3, r6
 800efa6:	50a3      	str	r3, [r4, r2]
 800efa8:	e7b3      	b.n	800ef12 <_malloc_r+0x22>
 800efaa:	6862      	ldr	r2, [r4, #4]
 800efac:	42a3      	cmp	r3, r4
 800efae:	bf0c      	ite	eq
 800efb0:	6032      	streq	r2, [r6, #0]
 800efb2:	605a      	strne	r2, [r3, #4]
 800efb4:	e7ec      	b.n	800ef90 <_malloc_r+0xa0>
 800efb6:	4623      	mov	r3, r4
 800efb8:	6864      	ldr	r4, [r4, #4]
 800efba:	e7b2      	b.n	800ef22 <_malloc_r+0x32>
 800efbc:	4634      	mov	r4, r6
 800efbe:	6876      	ldr	r6, [r6, #4]
 800efc0:	e7b9      	b.n	800ef36 <_malloc_r+0x46>
 800efc2:	230c      	movs	r3, #12
 800efc4:	603b      	str	r3, [r7, #0]
 800efc6:	4638      	mov	r0, r7
 800efc8:	f000 f9ec 	bl	800f3a4 <__malloc_unlock>
 800efcc:	e7a1      	b.n	800ef12 <_malloc_r+0x22>
 800efce:	6025      	str	r5, [r4, #0]
 800efd0:	e7de      	b.n	800ef90 <_malloc_r+0xa0>
 800efd2:	bf00      	nop
 800efd4:	200010b0 	.word	0x200010b0

0800efd8 <__ssputs_r>:
 800efd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efdc:	688e      	ldr	r6, [r1, #8]
 800efde:	429e      	cmp	r6, r3
 800efe0:	4682      	mov	sl, r0
 800efe2:	460c      	mov	r4, r1
 800efe4:	4690      	mov	r8, r2
 800efe6:	461f      	mov	r7, r3
 800efe8:	d838      	bhi.n	800f05c <__ssputs_r+0x84>
 800efea:	898a      	ldrh	r2, [r1, #12]
 800efec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eff0:	d032      	beq.n	800f058 <__ssputs_r+0x80>
 800eff2:	6825      	ldr	r5, [r4, #0]
 800eff4:	6909      	ldr	r1, [r1, #16]
 800eff6:	eba5 0901 	sub.w	r9, r5, r1
 800effa:	6965      	ldr	r5, [r4, #20]
 800effc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f000:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f004:	3301      	adds	r3, #1
 800f006:	444b      	add	r3, r9
 800f008:	106d      	asrs	r5, r5, #1
 800f00a:	429d      	cmp	r5, r3
 800f00c:	bf38      	it	cc
 800f00e:	461d      	movcc	r5, r3
 800f010:	0553      	lsls	r3, r2, #21
 800f012:	d531      	bpl.n	800f078 <__ssputs_r+0xa0>
 800f014:	4629      	mov	r1, r5
 800f016:	f7ff ff6b 	bl	800eef0 <_malloc_r>
 800f01a:	4606      	mov	r6, r0
 800f01c:	b950      	cbnz	r0, 800f034 <__ssputs_r+0x5c>
 800f01e:	230c      	movs	r3, #12
 800f020:	f8ca 3000 	str.w	r3, [sl]
 800f024:	89a3      	ldrh	r3, [r4, #12]
 800f026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f02a:	81a3      	strh	r3, [r4, #12]
 800f02c:	f04f 30ff 	mov.w	r0, #4294967295
 800f030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f034:	6921      	ldr	r1, [r4, #16]
 800f036:	464a      	mov	r2, r9
 800f038:	f7fc faaa 	bl	800b590 <memcpy>
 800f03c:	89a3      	ldrh	r3, [r4, #12]
 800f03e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f046:	81a3      	strh	r3, [r4, #12]
 800f048:	6126      	str	r6, [r4, #16]
 800f04a:	6165      	str	r5, [r4, #20]
 800f04c:	444e      	add	r6, r9
 800f04e:	eba5 0509 	sub.w	r5, r5, r9
 800f052:	6026      	str	r6, [r4, #0]
 800f054:	60a5      	str	r5, [r4, #8]
 800f056:	463e      	mov	r6, r7
 800f058:	42be      	cmp	r6, r7
 800f05a:	d900      	bls.n	800f05e <__ssputs_r+0x86>
 800f05c:	463e      	mov	r6, r7
 800f05e:	6820      	ldr	r0, [r4, #0]
 800f060:	4632      	mov	r2, r6
 800f062:	4641      	mov	r1, r8
 800f064:	f000 f97e 	bl	800f364 <memmove>
 800f068:	68a3      	ldr	r3, [r4, #8]
 800f06a:	1b9b      	subs	r3, r3, r6
 800f06c:	60a3      	str	r3, [r4, #8]
 800f06e:	6823      	ldr	r3, [r4, #0]
 800f070:	4433      	add	r3, r6
 800f072:	6023      	str	r3, [r4, #0]
 800f074:	2000      	movs	r0, #0
 800f076:	e7db      	b.n	800f030 <__ssputs_r+0x58>
 800f078:	462a      	mov	r2, r5
 800f07a:	f000 f999 	bl	800f3b0 <_realloc_r>
 800f07e:	4606      	mov	r6, r0
 800f080:	2800      	cmp	r0, #0
 800f082:	d1e1      	bne.n	800f048 <__ssputs_r+0x70>
 800f084:	6921      	ldr	r1, [r4, #16]
 800f086:	4650      	mov	r0, sl
 800f088:	f7ff fec6 	bl	800ee18 <_free_r>
 800f08c:	e7c7      	b.n	800f01e <__ssputs_r+0x46>
	...

0800f090 <_svfiprintf_r>:
 800f090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f094:	4698      	mov	r8, r3
 800f096:	898b      	ldrh	r3, [r1, #12]
 800f098:	061b      	lsls	r3, r3, #24
 800f09a:	b09d      	sub	sp, #116	; 0x74
 800f09c:	4607      	mov	r7, r0
 800f09e:	460d      	mov	r5, r1
 800f0a0:	4614      	mov	r4, r2
 800f0a2:	d50e      	bpl.n	800f0c2 <_svfiprintf_r+0x32>
 800f0a4:	690b      	ldr	r3, [r1, #16]
 800f0a6:	b963      	cbnz	r3, 800f0c2 <_svfiprintf_r+0x32>
 800f0a8:	2140      	movs	r1, #64	; 0x40
 800f0aa:	f7ff ff21 	bl	800eef0 <_malloc_r>
 800f0ae:	6028      	str	r0, [r5, #0]
 800f0b0:	6128      	str	r0, [r5, #16]
 800f0b2:	b920      	cbnz	r0, 800f0be <_svfiprintf_r+0x2e>
 800f0b4:	230c      	movs	r3, #12
 800f0b6:	603b      	str	r3, [r7, #0]
 800f0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0bc:	e0d1      	b.n	800f262 <_svfiprintf_r+0x1d2>
 800f0be:	2340      	movs	r3, #64	; 0x40
 800f0c0:	616b      	str	r3, [r5, #20]
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	9309      	str	r3, [sp, #36]	; 0x24
 800f0c6:	2320      	movs	r3, #32
 800f0c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0d0:	2330      	movs	r3, #48	; 0x30
 800f0d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f27c <_svfiprintf_r+0x1ec>
 800f0d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f0da:	f04f 0901 	mov.w	r9, #1
 800f0de:	4623      	mov	r3, r4
 800f0e0:	469a      	mov	sl, r3
 800f0e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0e6:	b10a      	cbz	r2, 800f0ec <_svfiprintf_r+0x5c>
 800f0e8:	2a25      	cmp	r2, #37	; 0x25
 800f0ea:	d1f9      	bne.n	800f0e0 <_svfiprintf_r+0x50>
 800f0ec:	ebba 0b04 	subs.w	fp, sl, r4
 800f0f0:	d00b      	beq.n	800f10a <_svfiprintf_r+0x7a>
 800f0f2:	465b      	mov	r3, fp
 800f0f4:	4622      	mov	r2, r4
 800f0f6:	4629      	mov	r1, r5
 800f0f8:	4638      	mov	r0, r7
 800f0fa:	f7ff ff6d 	bl	800efd8 <__ssputs_r>
 800f0fe:	3001      	adds	r0, #1
 800f100:	f000 80aa 	beq.w	800f258 <_svfiprintf_r+0x1c8>
 800f104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f106:	445a      	add	r2, fp
 800f108:	9209      	str	r2, [sp, #36]	; 0x24
 800f10a:	f89a 3000 	ldrb.w	r3, [sl]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	f000 80a2 	beq.w	800f258 <_svfiprintf_r+0x1c8>
 800f114:	2300      	movs	r3, #0
 800f116:	f04f 32ff 	mov.w	r2, #4294967295
 800f11a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f11e:	f10a 0a01 	add.w	sl, sl, #1
 800f122:	9304      	str	r3, [sp, #16]
 800f124:	9307      	str	r3, [sp, #28]
 800f126:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f12a:	931a      	str	r3, [sp, #104]	; 0x68
 800f12c:	4654      	mov	r4, sl
 800f12e:	2205      	movs	r2, #5
 800f130:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f134:	4851      	ldr	r0, [pc, #324]	; (800f27c <_svfiprintf_r+0x1ec>)
 800f136:	f7f1 f85b 	bl	80001f0 <memchr>
 800f13a:	9a04      	ldr	r2, [sp, #16]
 800f13c:	b9d8      	cbnz	r0, 800f176 <_svfiprintf_r+0xe6>
 800f13e:	06d0      	lsls	r0, r2, #27
 800f140:	bf44      	itt	mi
 800f142:	2320      	movmi	r3, #32
 800f144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f148:	0711      	lsls	r1, r2, #28
 800f14a:	bf44      	itt	mi
 800f14c:	232b      	movmi	r3, #43	; 0x2b
 800f14e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f152:	f89a 3000 	ldrb.w	r3, [sl]
 800f156:	2b2a      	cmp	r3, #42	; 0x2a
 800f158:	d015      	beq.n	800f186 <_svfiprintf_r+0xf6>
 800f15a:	9a07      	ldr	r2, [sp, #28]
 800f15c:	4654      	mov	r4, sl
 800f15e:	2000      	movs	r0, #0
 800f160:	f04f 0c0a 	mov.w	ip, #10
 800f164:	4621      	mov	r1, r4
 800f166:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f16a:	3b30      	subs	r3, #48	; 0x30
 800f16c:	2b09      	cmp	r3, #9
 800f16e:	d94e      	bls.n	800f20e <_svfiprintf_r+0x17e>
 800f170:	b1b0      	cbz	r0, 800f1a0 <_svfiprintf_r+0x110>
 800f172:	9207      	str	r2, [sp, #28]
 800f174:	e014      	b.n	800f1a0 <_svfiprintf_r+0x110>
 800f176:	eba0 0308 	sub.w	r3, r0, r8
 800f17a:	fa09 f303 	lsl.w	r3, r9, r3
 800f17e:	4313      	orrs	r3, r2
 800f180:	9304      	str	r3, [sp, #16]
 800f182:	46a2      	mov	sl, r4
 800f184:	e7d2      	b.n	800f12c <_svfiprintf_r+0x9c>
 800f186:	9b03      	ldr	r3, [sp, #12]
 800f188:	1d19      	adds	r1, r3, #4
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	9103      	str	r1, [sp, #12]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	bfbb      	ittet	lt
 800f192:	425b      	neglt	r3, r3
 800f194:	f042 0202 	orrlt.w	r2, r2, #2
 800f198:	9307      	strge	r3, [sp, #28]
 800f19a:	9307      	strlt	r3, [sp, #28]
 800f19c:	bfb8      	it	lt
 800f19e:	9204      	strlt	r2, [sp, #16]
 800f1a0:	7823      	ldrb	r3, [r4, #0]
 800f1a2:	2b2e      	cmp	r3, #46	; 0x2e
 800f1a4:	d10c      	bne.n	800f1c0 <_svfiprintf_r+0x130>
 800f1a6:	7863      	ldrb	r3, [r4, #1]
 800f1a8:	2b2a      	cmp	r3, #42	; 0x2a
 800f1aa:	d135      	bne.n	800f218 <_svfiprintf_r+0x188>
 800f1ac:	9b03      	ldr	r3, [sp, #12]
 800f1ae:	1d1a      	adds	r2, r3, #4
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	9203      	str	r2, [sp, #12]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	bfb8      	it	lt
 800f1b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1bc:	3402      	adds	r4, #2
 800f1be:	9305      	str	r3, [sp, #20]
 800f1c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f28c <_svfiprintf_r+0x1fc>
 800f1c4:	7821      	ldrb	r1, [r4, #0]
 800f1c6:	2203      	movs	r2, #3
 800f1c8:	4650      	mov	r0, sl
 800f1ca:	f7f1 f811 	bl	80001f0 <memchr>
 800f1ce:	b140      	cbz	r0, 800f1e2 <_svfiprintf_r+0x152>
 800f1d0:	2340      	movs	r3, #64	; 0x40
 800f1d2:	eba0 000a 	sub.w	r0, r0, sl
 800f1d6:	fa03 f000 	lsl.w	r0, r3, r0
 800f1da:	9b04      	ldr	r3, [sp, #16]
 800f1dc:	4303      	orrs	r3, r0
 800f1de:	3401      	adds	r4, #1
 800f1e0:	9304      	str	r3, [sp, #16]
 800f1e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1e6:	4826      	ldr	r0, [pc, #152]	; (800f280 <_svfiprintf_r+0x1f0>)
 800f1e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f1ec:	2206      	movs	r2, #6
 800f1ee:	f7f0 ffff 	bl	80001f0 <memchr>
 800f1f2:	2800      	cmp	r0, #0
 800f1f4:	d038      	beq.n	800f268 <_svfiprintf_r+0x1d8>
 800f1f6:	4b23      	ldr	r3, [pc, #140]	; (800f284 <_svfiprintf_r+0x1f4>)
 800f1f8:	bb1b      	cbnz	r3, 800f242 <_svfiprintf_r+0x1b2>
 800f1fa:	9b03      	ldr	r3, [sp, #12]
 800f1fc:	3307      	adds	r3, #7
 800f1fe:	f023 0307 	bic.w	r3, r3, #7
 800f202:	3308      	adds	r3, #8
 800f204:	9303      	str	r3, [sp, #12]
 800f206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f208:	4433      	add	r3, r6
 800f20a:	9309      	str	r3, [sp, #36]	; 0x24
 800f20c:	e767      	b.n	800f0de <_svfiprintf_r+0x4e>
 800f20e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f212:	460c      	mov	r4, r1
 800f214:	2001      	movs	r0, #1
 800f216:	e7a5      	b.n	800f164 <_svfiprintf_r+0xd4>
 800f218:	2300      	movs	r3, #0
 800f21a:	3401      	adds	r4, #1
 800f21c:	9305      	str	r3, [sp, #20]
 800f21e:	4619      	mov	r1, r3
 800f220:	f04f 0c0a 	mov.w	ip, #10
 800f224:	4620      	mov	r0, r4
 800f226:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f22a:	3a30      	subs	r2, #48	; 0x30
 800f22c:	2a09      	cmp	r2, #9
 800f22e:	d903      	bls.n	800f238 <_svfiprintf_r+0x1a8>
 800f230:	2b00      	cmp	r3, #0
 800f232:	d0c5      	beq.n	800f1c0 <_svfiprintf_r+0x130>
 800f234:	9105      	str	r1, [sp, #20]
 800f236:	e7c3      	b.n	800f1c0 <_svfiprintf_r+0x130>
 800f238:	fb0c 2101 	mla	r1, ip, r1, r2
 800f23c:	4604      	mov	r4, r0
 800f23e:	2301      	movs	r3, #1
 800f240:	e7f0      	b.n	800f224 <_svfiprintf_r+0x194>
 800f242:	ab03      	add	r3, sp, #12
 800f244:	9300      	str	r3, [sp, #0]
 800f246:	462a      	mov	r2, r5
 800f248:	4b0f      	ldr	r3, [pc, #60]	; (800f288 <_svfiprintf_r+0x1f8>)
 800f24a:	a904      	add	r1, sp, #16
 800f24c:	4638      	mov	r0, r7
 800f24e:	f7fc fa55 	bl	800b6fc <_printf_float>
 800f252:	1c42      	adds	r2, r0, #1
 800f254:	4606      	mov	r6, r0
 800f256:	d1d6      	bne.n	800f206 <_svfiprintf_r+0x176>
 800f258:	89ab      	ldrh	r3, [r5, #12]
 800f25a:	065b      	lsls	r3, r3, #25
 800f25c:	f53f af2c 	bmi.w	800f0b8 <_svfiprintf_r+0x28>
 800f260:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f262:	b01d      	add	sp, #116	; 0x74
 800f264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f268:	ab03      	add	r3, sp, #12
 800f26a:	9300      	str	r3, [sp, #0]
 800f26c:	462a      	mov	r2, r5
 800f26e:	4b06      	ldr	r3, [pc, #24]	; (800f288 <_svfiprintf_r+0x1f8>)
 800f270:	a904      	add	r1, sp, #16
 800f272:	4638      	mov	r0, r7
 800f274:	f7fc fce6 	bl	800bc44 <_printf_i>
 800f278:	e7eb      	b.n	800f252 <_svfiprintf_r+0x1c2>
 800f27a:	bf00      	nop
 800f27c:	08010554 	.word	0x08010554
 800f280:	0801055e 	.word	0x0801055e
 800f284:	0800b6fd 	.word	0x0800b6fd
 800f288:	0800efd9 	.word	0x0800efd9
 800f28c:	0801055a 	.word	0x0801055a

0800f290 <nan>:
 800f290:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f298 <nan+0x8>
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop
 800f298:	00000000 	.word	0x00000000
 800f29c:	7ff80000 	.word	0x7ff80000

0800f2a0 <_sbrk_r>:
 800f2a0:	b538      	push	{r3, r4, r5, lr}
 800f2a2:	4d06      	ldr	r5, [pc, #24]	; (800f2bc <_sbrk_r+0x1c>)
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	4604      	mov	r4, r0
 800f2a8:	4608      	mov	r0, r1
 800f2aa:	602b      	str	r3, [r5, #0]
 800f2ac:	f7f5 fa72 	bl	8004794 <_sbrk>
 800f2b0:	1c43      	adds	r3, r0, #1
 800f2b2:	d102      	bne.n	800f2ba <_sbrk_r+0x1a>
 800f2b4:	682b      	ldr	r3, [r5, #0]
 800f2b6:	b103      	cbz	r3, 800f2ba <_sbrk_r+0x1a>
 800f2b8:	6023      	str	r3, [r4, #0]
 800f2ba:	bd38      	pop	{r3, r4, r5, pc}
 800f2bc:	200010b8 	.word	0x200010b8

0800f2c0 <strncmp>:
 800f2c0:	b510      	push	{r4, lr}
 800f2c2:	b17a      	cbz	r2, 800f2e4 <strncmp+0x24>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	3901      	subs	r1, #1
 800f2c8:	1884      	adds	r4, r0, r2
 800f2ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f2ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f2d2:	4290      	cmp	r0, r2
 800f2d4:	d101      	bne.n	800f2da <strncmp+0x1a>
 800f2d6:	42a3      	cmp	r3, r4
 800f2d8:	d101      	bne.n	800f2de <strncmp+0x1e>
 800f2da:	1a80      	subs	r0, r0, r2
 800f2dc:	bd10      	pop	{r4, pc}
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	d1f3      	bne.n	800f2ca <strncmp+0xa>
 800f2e2:	e7fa      	b.n	800f2da <strncmp+0x1a>
 800f2e4:	4610      	mov	r0, r2
 800f2e6:	e7f9      	b.n	800f2dc <strncmp+0x1c>

0800f2e8 <__ascii_wctomb>:
 800f2e8:	b149      	cbz	r1, 800f2fe <__ascii_wctomb+0x16>
 800f2ea:	2aff      	cmp	r2, #255	; 0xff
 800f2ec:	bf85      	ittet	hi
 800f2ee:	238a      	movhi	r3, #138	; 0x8a
 800f2f0:	6003      	strhi	r3, [r0, #0]
 800f2f2:	700a      	strbls	r2, [r1, #0]
 800f2f4:	f04f 30ff 	movhi.w	r0, #4294967295
 800f2f8:	bf98      	it	ls
 800f2fa:	2001      	movls	r0, #1
 800f2fc:	4770      	bx	lr
 800f2fe:	4608      	mov	r0, r1
 800f300:	4770      	bx	lr
	...

0800f304 <__assert_func>:
 800f304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f306:	4614      	mov	r4, r2
 800f308:	461a      	mov	r2, r3
 800f30a:	4b09      	ldr	r3, [pc, #36]	; (800f330 <__assert_func+0x2c>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	4605      	mov	r5, r0
 800f310:	68d8      	ldr	r0, [r3, #12]
 800f312:	b14c      	cbz	r4, 800f328 <__assert_func+0x24>
 800f314:	4b07      	ldr	r3, [pc, #28]	; (800f334 <__assert_func+0x30>)
 800f316:	9100      	str	r1, [sp, #0]
 800f318:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f31c:	4906      	ldr	r1, [pc, #24]	; (800f338 <__assert_func+0x34>)
 800f31e:	462b      	mov	r3, r5
 800f320:	f000 f80e 	bl	800f340 <fiprintf>
 800f324:	f000 fa8c 	bl	800f840 <abort>
 800f328:	4b04      	ldr	r3, [pc, #16]	; (800f33c <__assert_func+0x38>)
 800f32a:	461c      	mov	r4, r3
 800f32c:	e7f3      	b.n	800f316 <__assert_func+0x12>
 800f32e:	bf00      	nop
 800f330:	2000022c 	.word	0x2000022c
 800f334:	08010565 	.word	0x08010565
 800f338:	08010572 	.word	0x08010572
 800f33c:	080105a0 	.word	0x080105a0

0800f340 <fiprintf>:
 800f340:	b40e      	push	{r1, r2, r3}
 800f342:	b503      	push	{r0, r1, lr}
 800f344:	4601      	mov	r1, r0
 800f346:	ab03      	add	r3, sp, #12
 800f348:	4805      	ldr	r0, [pc, #20]	; (800f360 <fiprintf+0x20>)
 800f34a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f34e:	6800      	ldr	r0, [r0, #0]
 800f350:	9301      	str	r3, [sp, #4]
 800f352:	f000 f885 	bl	800f460 <_vfiprintf_r>
 800f356:	b002      	add	sp, #8
 800f358:	f85d eb04 	ldr.w	lr, [sp], #4
 800f35c:	b003      	add	sp, #12
 800f35e:	4770      	bx	lr
 800f360:	2000022c 	.word	0x2000022c

0800f364 <memmove>:
 800f364:	4288      	cmp	r0, r1
 800f366:	b510      	push	{r4, lr}
 800f368:	eb01 0402 	add.w	r4, r1, r2
 800f36c:	d902      	bls.n	800f374 <memmove+0x10>
 800f36e:	4284      	cmp	r4, r0
 800f370:	4623      	mov	r3, r4
 800f372:	d807      	bhi.n	800f384 <memmove+0x20>
 800f374:	1e43      	subs	r3, r0, #1
 800f376:	42a1      	cmp	r1, r4
 800f378:	d008      	beq.n	800f38c <memmove+0x28>
 800f37a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f37e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f382:	e7f8      	b.n	800f376 <memmove+0x12>
 800f384:	4402      	add	r2, r0
 800f386:	4601      	mov	r1, r0
 800f388:	428a      	cmp	r2, r1
 800f38a:	d100      	bne.n	800f38e <memmove+0x2a>
 800f38c:	bd10      	pop	{r4, pc}
 800f38e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f396:	e7f7      	b.n	800f388 <memmove+0x24>

0800f398 <__malloc_lock>:
 800f398:	4801      	ldr	r0, [pc, #4]	; (800f3a0 <__malloc_lock+0x8>)
 800f39a:	f000 bc11 	b.w	800fbc0 <__retarget_lock_acquire_recursive>
 800f39e:	bf00      	nop
 800f3a0:	200010bc 	.word	0x200010bc

0800f3a4 <__malloc_unlock>:
 800f3a4:	4801      	ldr	r0, [pc, #4]	; (800f3ac <__malloc_unlock+0x8>)
 800f3a6:	f000 bc0c 	b.w	800fbc2 <__retarget_lock_release_recursive>
 800f3aa:	bf00      	nop
 800f3ac:	200010bc 	.word	0x200010bc

0800f3b0 <_realloc_r>:
 800f3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3b4:	4680      	mov	r8, r0
 800f3b6:	4614      	mov	r4, r2
 800f3b8:	460e      	mov	r6, r1
 800f3ba:	b921      	cbnz	r1, 800f3c6 <_realloc_r+0x16>
 800f3bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3c0:	4611      	mov	r1, r2
 800f3c2:	f7ff bd95 	b.w	800eef0 <_malloc_r>
 800f3c6:	b92a      	cbnz	r2, 800f3d4 <_realloc_r+0x24>
 800f3c8:	f7ff fd26 	bl	800ee18 <_free_r>
 800f3cc:	4625      	mov	r5, r4
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3d4:	f000 fc5c 	bl	800fc90 <_malloc_usable_size_r>
 800f3d8:	4284      	cmp	r4, r0
 800f3da:	4607      	mov	r7, r0
 800f3dc:	d802      	bhi.n	800f3e4 <_realloc_r+0x34>
 800f3de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f3e2:	d812      	bhi.n	800f40a <_realloc_r+0x5a>
 800f3e4:	4621      	mov	r1, r4
 800f3e6:	4640      	mov	r0, r8
 800f3e8:	f7ff fd82 	bl	800eef0 <_malloc_r>
 800f3ec:	4605      	mov	r5, r0
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	d0ed      	beq.n	800f3ce <_realloc_r+0x1e>
 800f3f2:	42bc      	cmp	r4, r7
 800f3f4:	4622      	mov	r2, r4
 800f3f6:	4631      	mov	r1, r6
 800f3f8:	bf28      	it	cs
 800f3fa:	463a      	movcs	r2, r7
 800f3fc:	f7fc f8c8 	bl	800b590 <memcpy>
 800f400:	4631      	mov	r1, r6
 800f402:	4640      	mov	r0, r8
 800f404:	f7ff fd08 	bl	800ee18 <_free_r>
 800f408:	e7e1      	b.n	800f3ce <_realloc_r+0x1e>
 800f40a:	4635      	mov	r5, r6
 800f40c:	e7df      	b.n	800f3ce <_realloc_r+0x1e>

0800f40e <__sfputc_r>:
 800f40e:	6893      	ldr	r3, [r2, #8]
 800f410:	3b01      	subs	r3, #1
 800f412:	2b00      	cmp	r3, #0
 800f414:	b410      	push	{r4}
 800f416:	6093      	str	r3, [r2, #8]
 800f418:	da08      	bge.n	800f42c <__sfputc_r+0x1e>
 800f41a:	6994      	ldr	r4, [r2, #24]
 800f41c:	42a3      	cmp	r3, r4
 800f41e:	db01      	blt.n	800f424 <__sfputc_r+0x16>
 800f420:	290a      	cmp	r1, #10
 800f422:	d103      	bne.n	800f42c <__sfputc_r+0x1e>
 800f424:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f428:	f000 b94a 	b.w	800f6c0 <__swbuf_r>
 800f42c:	6813      	ldr	r3, [r2, #0]
 800f42e:	1c58      	adds	r0, r3, #1
 800f430:	6010      	str	r0, [r2, #0]
 800f432:	7019      	strb	r1, [r3, #0]
 800f434:	4608      	mov	r0, r1
 800f436:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f43a:	4770      	bx	lr

0800f43c <__sfputs_r>:
 800f43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f43e:	4606      	mov	r6, r0
 800f440:	460f      	mov	r7, r1
 800f442:	4614      	mov	r4, r2
 800f444:	18d5      	adds	r5, r2, r3
 800f446:	42ac      	cmp	r4, r5
 800f448:	d101      	bne.n	800f44e <__sfputs_r+0x12>
 800f44a:	2000      	movs	r0, #0
 800f44c:	e007      	b.n	800f45e <__sfputs_r+0x22>
 800f44e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f452:	463a      	mov	r2, r7
 800f454:	4630      	mov	r0, r6
 800f456:	f7ff ffda 	bl	800f40e <__sfputc_r>
 800f45a:	1c43      	adds	r3, r0, #1
 800f45c:	d1f3      	bne.n	800f446 <__sfputs_r+0xa>
 800f45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f460 <_vfiprintf_r>:
 800f460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f464:	460d      	mov	r5, r1
 800f466:	b09d      	sub	sp, #116	; 0x74
 800f468:	4614      	mov	r4, r2
 800f46a:	4698      	mov	r8, r3
 800f46c:	4606      	mov	r6, r0
 800f46e:	b118      	cbz	r0, 800f478 <_vfiprintf_r+0x18>
 800f470:	6983      	ldr	r3, [r0, #24]
 800f472:	b90b      	cbnz	r3, 800f478 <_vfiprintf_r+0x18>
 800f474:	f000 fb06 	bl	800fa84 <__sinit>
 800f478:	4b89      	ldr	r3, [pc, #548]	; (800f6a0 <_vfiprintf_r+0x240>)
 800f47a:	429d      	cmp	r5, r3
 800f47c:	d11b      	bne.n	800f4b6 <_vfiprintf_r+0x56>
 800f47e:	6875      	ldr	r5, [r6, #4]
 800f480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f482:	07d9      	lsls	r1, r3, #31
 800f484:	d405      	bmi.n	800f492 <_vfiprintf_r+0x32>
 800f486:	89ab      	ldrh	r3, [r5, #12]
 800f488:	059a      	lsls	r2, r3, #22
 800f48a:	d402      	bmi.n	800f492 <_vfiprintf_r+0x32>
 800f48c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f48e:	f000 fb97 	bl	800fbc0 <__retarget_lock_acquire_recursive>
 800f492:	89ab      	ldrh	r3, [r5, #12]
 800f494:	071b      	lsls	r3, r3, #28
 800f496:	d501      	bpl.n	800f49c <_vfiprintf_r+0x3c>
 800f498:	692b      	ldr	r3, [r5, #16]
 800f49a:	b9eb      	cbnz	r3, 800f4d8 <_vfiprintf_r+0x78>
 800f49c:	4629      	mov	r1, r5
 800f49e:	4630      	mov	r0, r6
 800f4a0:	f000 f960 	bl	800f764 <__swsetup_r>
 800f4a4:	b1c0      	cbz	r0, 800f4d8 <_vfiprintf_r+0x78>
 800f4a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4a8:	07dc      	lsls	r4, r3, #31
 800f4aa:	d50e      	bpl.n	800f4ca <_vfiprintf_r+0x6a>
 800f4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f4b0:	b01d      	add	sp, #116	; 0x74
 800f4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4b6:	4b7b      	ldr	r3, [pc, #492]	; (800f6a4 <_vfiprintf_r+0x244>)
 800f4b8:	429d      	cmp	r5, r3
 800f4ba:	d101      	bne.n	800f4c0 <_vfiprintf_r+0x60>
 800f4bc:	68b5      	ldr	r5, [r6, #8]
 800f4be:	e7df      	b.n	800f480 <_vfiprintf_r+0x20>
 800f4c0:	4b79      	ldr	r3, [pc, #484]	; (800f6a8 <_vfiprintf_r+0x248>)
 800f4c2:	429d      	cmp	r5, r3
 800f4c4:	bf08      	it	eq
 800f4c6:	68f5      	ldreq	r5, [r6, #12]
 800f4c8:	e7da      	b.n	800f480 <_vfiprintf_r+0x20>
 800f4ca:	89ab      	ldrh	r3, [r5, #12]
 800f4cc:	0598      	lsls	r0, r3, #22
 800f4ce:	d4ed      	bmi.n	800f4ac <_vfiprintf_r+0x4c>
 800f4d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4d2:	f000 fb76 	bl	800fbc2 <__retarget_lock_release_recursive>
 800f4d6:	e7e9      	b.n	800f4ac <_vfiprintf_r+0x4c>
 800f4d8:	2300      	movs	r3, #0
 800f4da:	9309      	str	r3, [sp, #36]	; 0x24
 800f4dc:	2320      	movs	r3, #32
 800f4de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f4e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4e6:	2330      	movs	r3, #48	; 0x30
 800f4e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f6ac <_vfiprintf_r+0x24c>
 800f4ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4f0:	f04f 0901 	mov.w	r9, #1
 800f4f4:	4623      	mov	r3, r4
 800f4f6:	469a      	mov	sl, r3
 800f4f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4fc:	b10a      	cbz	r2, 800f502 <_vfiprintf_r+0xa2>
 800f4fe:	2a25      	cmp	r2, #37	; 0x25
 800f500:	d1f9      	bne.n	800f4f6 <_vfiprintf_r+0x96>
 800f502:	ebba 0b04 	subs.w	fp, sl, r4
 800f506:	d00b      	beq.n	800f520 <_vfiprintf_r+0xc0>
 800f508:	465b      	mov	r3, fp
 800f50a:	4622      	mov	r2, r4
 800f50c:	4629      	mov	r1, r5
 800f50e:	4630      	mov	r0, r6
 800f510:	f7ff ff94 	bl	800f43c <__sfputs_r>
 800f514:	3001      	adds	r0, #1
 800f516:	f000 80aa 	beq.w	800f66e <_vfiprintf_r+0x20e>
 800f51a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f51c:	445a      	add	r2, fp
 800f51e:	9209      	str	r2, [sp, #36]	; 0x24
 800f520:	f89a 3000 	ldrb.w	r3, [sl]
 800f524:	2b00      	cmp	r3, #0
 800f526:	f000 80a2 	beq.w	800f66e <_vfiprintf_r+0x20e>
 800f52a:	2300      	movs	r3, #0
 800f52c:	f04f 32ff 	mov.w	r2, #4294967295
 800f530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f534:	f10a 0a01 	add.w	sl, sl, #1
 800f538:	9304      	str	r3, [sp, #16]
 800f53a:	9307      	str	r3, [sp, #28]
 800f53c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f540:	931a      	str	r3, [sp, #104]	; 0x68
 800f542:	4654      	mov	r4, sl
 800f544:	2205      	movs	r2, #5
 800f546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f54a:	4858      	ldr	r0, [pc, #352]	; (800f6ac <_vfiprintf_r+0x24c>)
 800f54c:	f7f0 fe50 	bl	80001f0 <memchr>
 800f550:	9a04      	ldr	r2, [sp, #16]
 800f552:	b9d8      	cbnz	r0, 800f58c <_vfiprintf_r+0x12c>
 800f554:	06d1      	lsls	r1, r2, #27
 800f556:	bf44      	itt	mi
 800f558:	2320      	movmi	r3, #32
 800f55a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f55e:	0713      	lsls	r3, r2, #28
 800f560:	bf44      	itt	mi
 800f562:	232b      	movmi	r3, #43	; 0x2b
 800f564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f568:	f89a 3000 	ldrb.w	r3, [sl]
 800f56c:	2b2a      	cmp	r3, #42	; 0x2a
 800f56e:	d015      	beq.n	800f59c <_vfiprintf_r+0x13c>
 800f570:	9a07      	ldr	r2, [sp, #28]
 800f572:	4654      	mov	r4, sl
 800f574:	2000      	movs	r0, #0
 800f576:	f04f 0c0a 	mov.w	ip, #10
 800f57a:	4621      	mov	r1, r4
 800f57c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f580:	3b30      	subs	r3, #48	; 0x30
 800f582:	2b09      	cmp	r3, #9
 800f584:	d94e      	bls.n	800f624 <_vfiprintf_r+0x1c4>
 800f586:	b1b0      	cbz	r0, 800f5b6 <_vfiprintf_r+0x156>
 800f588:	9207      	str	r2, [sp, #28]
 800f58a:	e014      	b.n	800f5b6 <_vfiprintf_r+0x156>
 800f58c:	eba0 0308 	sub.w	r3, r0, r8
 800f590:	fa09 f303 	lsl.w	r3, r9, r3
 800f594:	4313      	orrs	r3, r2
 800f596:	9304      	str	r3, [sp, #16]
 800f598:	46a2      	mov	sl, r4
 800f59a:	e7d2      	b.n	800f542 <_vfiprintf_r+0xe2>
 800f59c:	9b03      	ldr	r3, [sp, #12]
 800f59e:	1d19      	adds	r1, r3, #4
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	9103      	str	r1, [sp, #12]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	bfbb      	ittet	lt
 800f5a8:	425b      	neglt	r3, r3
 800f5aa:	f042 0202 	orrlt.w	r2, r2, #2
 800f5ae:	9307      	strge	r3, [sp, #28]
 800f5b0:	9307      	strlt	r3, [sp, #28]
 800f5b2:	bfb8      	it	lt
 800f5b4:	9204      	strlt	r2, [sp, #16]
 800f5b6:	7823      	ldrb	r3, [r4, #0]
 800f5b8:	2b2e      	cmp	r3, #46	; 0x2e
 800f5ba:	d10c      	bne.n	800f5d6 <_vfiprintf_r+0x176>
 800f5bc:	7863      	ldrb	r3, [r4, #1]
 800f5be:	2b2a      	cmp	r3, #42	; 0x2a
 800f5c0:	d135      	bne.n	800f62e <_vfiprintf_r+0x1ce>
 800f5c2:	9b03      	ldr	r3, [sp, #12]
 800f5c4:	1d1a      	adds	r2, r3, #4
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	9203      	str	r2, [sp, #12]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	bfb8      	it	lt
 800f5ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800f5d2:	3402      	adds	r4, #2
 800f5d4:	9305      	str	r3, [sp, #20]
 800f5d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f6bc <_vfiprintf_r+0x25c>
 800f5da:	7821      	ldrb	r1, [r4, #0]
 800f5dc:	2203      	movs	r2, #3
 800f5de:	4650      	mov	r0, sl
 800f5e0:	f7f0 fe06 	bl	80001f0 <memchr>
 800f5e4:	b140      	cbz	r0, 800f5f8 <_vfiprintf_r+0x198>
 800f5e6:	2340      	movs	r3, #64	; 0x40
 800f5e8:	eba0 000a 	sub.w	r0, r0, sl
 800f5ec:	fa03 f000 	lsl.w	r0, r3, r0
 800f5f0:	9b04      	ldr	r3, [sp, #16]
 800f5f2:	4303      	orrs	r3, r0
 800f5f4:	3401      	adds	r4, #1
 800f5f6:	9304      	str	r3, [sp, #16]
 800f5f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5fc:	482c      	ldr	r0, [pc, #176]	; (800f6b0 <_vfiprintf_r+0x250>)
 800f5fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f602:	2206      	movs	r2, #6
 800f604:	f7f0 fdf4 	bl	80001f0 <memchr>
 800f608:	2800      	cmp	r0, #0
 800f60a:	d03f      	beq.n	800f68c <_vfiprintf_r+0x22c>
 800f60c:	4b29      	ldr	r3, [pc, #164]	; (800f6b4 <_vfiprintf_r+0x254>)
 800f60e:	bb1b      	cbnz	r3, 800f658 <_vfiprintf_r+0x1f8>
 800f610:	9b03      	ldr	r3, [sp, #12]
 800f612:	3307      	adds	r3, #7
 800f614:	f023 0307 	bic.w	r3, r3, #7
 800f618:	3308      	adds	r3, #8
 800f61a:	9303      	str	r3, [sp, #12]
 800f61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f61e:	443b      	add	r3, r7
 800f620:	9309      	str	r3, [sp, #36]	; 0x24
 800f622:	e767      	b.n	800f4f4 <_vfiprintf_r+0x94>
 800f624:	fb0c 3202 	mla	r2, ip, r2, r3
 800f628:	460c      	mov	r4, r1
 800f62a:	2001      	movs	r0, #1
 800f62c:	e7a5      	b.n	800f57a <_vfiprintf_r+0x11a>
 800f62e:	2300      	movs	r3, #0
 800f630:	3401      	adds	r4, #1
 800f632:	9305      	str	r3, [sp, #20]
 800f634:	4619      	mov	r1, r3
 800f636:	f04f 0c0a 	mov.w	ip, #10
 800f63a:	4620      	mov	r0, r4
 800f63c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f640:	3a30      	subs	r2, #48	; 0x30
 800f642:	2a09      	cmp	r2, #9
 800f644:	d903      	bls.n	800f64e <_vfiprintf_r+0x1ee>
 800f646:	2b00      	cmp	r3, #0
 800f648:	d0c5      	beq.n	800f5d6 <_vfiprintf_r+0x176>
 800f64a:	9105      	str	r1, [sp, #20]
 800f64c:	e7c3      	b.n	800f5d6 <_vfiprintf_r+0x176>
 800f64e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f652:	4604      	mov	r4, r0
 800f654:	2301      	movs	r3, #1
 800f656:	e7f0      	b.n	800f63a <_vfiprintf_r+0x1da>
 800f658:	ab03      	add	r3, sp, #12
 800f65a:	9300      	str	r3, [sp, #0]
 800f65c:	462a      	mov	r2, r5
 800f65e:	4b16      	ldr	r3, [pc, #88]	; (800f6b8 <_vfiprintf_r+0x258>)
 800f660:	a904      	add	r1, sp, #16
 800f662:	4630      	mov	r0, r6
 800f664:	f7fc f84a 	bl	800b6fc <_printf_float>
 800f668:	4607      	mov	r7, r0
 800f66a:	1c78      	adds	r0, r7, #1
 800f66c:	d1d6      	bne.n	800f61c <_vfiprintf_r+0x1bc>
 800f66e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f670:	07d9      	lsls	r1, r3, #31
 800f672:	d405      	bmi.n	800f680 <_vfiprintf_r+0x220>
 800f674:	89ab      	ldrh	r3, [r5, #12]
 800f676:	059a      	lsls	r2, r3, #22
 800f678:	d402      	bmi.n	800f680 <_vfiprintf_r+0x220>
 800f67a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f67c:	f000 faa1 	bl	800fbc2 <__retarget_lock_release_recursive>
 800f680:	89ab      	ldrh	r3, [r5, #12]
 800f682:	065b      	lsls	r3, r3, #25
 800f684:	f53f af12 	bmi.w	800f4ac <_vfiprintf_r+0x4c>
 800f688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f68a:	e711      	b.n	800f4b0 <_vfiprintf_r+0x50>
 800f68c:	ab03      	add	r3, sp, #12
 800f68e:	9300      	str	r3, [sp, #0]
 800f690:	462a      	mov	r2, r5
 800f692:	4b09      	ldr	r3, [pc, #36]	; (800f6b8 <_vfiprintf_r+0x258>)
 800f694:	a904      	add	r1, sp, #16
 800f696:	4630      	mov	r0, r6
 800f698:	f7fc fad4 	bl	800bc44 <_printf_i>
 800f69c:	e7e4      	b.n	800f668 <_vfiprintf_r+0x208>
 800f69e:	bf00      	nop
 800f6a0:	080105c4 	.word	0x080105c4
 800f6a4:	080105e4 	.word	0x080105e4
 800f6a8:	080105a4 	.word	0x080105a4
 800f6ac:	08010554 	.word	0x08010554
 800f6b0:	0801055e 	.word	0x0801055e
 800f6b4:	0800b6fd 	.word	0x0800b6fd
 800f6b8:	0800f43d 	.word	0x0800f43d
 800f6bc:	0801055a 	.word	0x0801055a

0800f6c0 <__swbuf_r>:
 800f6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6c2:	460e      	mov	r6, r1
 800f6c4:	4614      	mov	r4, r2
 800f6c6:	4605      	mov	r5, r0
 800f6c8:	b118      	cbz	r0, 800f6d2 <__swbuf_r+0x12>
 800f6ca:	6983      	ldr	r3, [r0, #24]
 800f6cc:	b90b      	cbnz	r3, 800f6d2 <__swbuf_r+0x12>
 800f6ce:	f000 f9d9 	bl	800fa84 <__sinit>
 800f6d2:	4b21      	ldr	r3, [pc, #132]	; (800f758 <__swbuf_r+0x98>)
 800f6d4:	429c      	cmp	r4, r3
 800f6d6:	d12b      	bne.n	800f730 <__swbuf_r+0x70>
 800f6d8:	686c      	ldr	r4, [r5, #4]
 800f6da:	69a3      	ldr	r3, [r4, #24]
 800f6dc:	60a3      	str	r3, [r4, #8]
 800f6de:	89a3      	ldrh	r3, [r4, #12]
 800f6e0:	071a      	lsls	r2, r3, #28
 800f6e2:	d52f      	bpl.n	800f744 <__swbuf_r+0x84>
 800f6e4:	6923      	ldr	r3, [r4, #16]
 800f6e6:	b36b      	cbz	r3, 800f744 <__swbuf_r+0x84>
 800f6e8:	6923      	ldr	r3, [r4, #16]
 800f6ea:	6820      	ldr	r0, [r4, #0]
 800f6ec:	1ac0      	subs	r0, r0, r3
 800f6ee:	6963      	ldr	r3, [r4, #20]
 800f6f0:	b2f6      	uxtb	r6, r6
 800f6f2:	4283      	cmp	r3, r0
 800f6f4:	4637      	mov	r7, r6
 800f6f6:	dc04      	bgt.n	800f702 <__swbuf_r+0x42>
 800f6f8:	4621      	mov	r1, r4
 800f6fa:	4628      	mov	r0, r5
 800f6fc:	f000 f92e 	bl	800f95c <_fflush_r>
 800f700:	bb30      	cbnz	r0, 800f750 <__swbuf_r+0x90>
 800f702:	68a3      	ldr	r3, [r4, #8]
 800f704:	3b01      	subs	r3, #1
 800f706:	60a3      	str	r3, [r4, #8]
 800f708:	6823      	ldr	r3, [r4, #0]
 800f70a:	1c5a      	adds	r2, r3, #1
 800f70c:	6022      	str	r2, [r4, #0]
 800f70e:	701e      	strb	r6, [r3, #0]
 800f710:	6963      	ldr	r3, [r4, #20]
 800f712:	3001      	adds	r0, #1
 800f714:	4283      	cmp	r3, r0
 800f716:	d004      	beq.n	800f722 <__swbuf_r+0x62>
 800f718:	89a3      	ldrh	r3, [r4, #12]
 800f71a:	07db      	lsls	r3, r3, #31
 800f71c:	d506      	bpl.n	800f72c <__swbuf_r+0x6c>
 800f71e:	2e0a      	cmp	r6, #10
 800f720:	d104      	bne.n	800f72c <__swbuf_r+0x6c>
 800f722:	4621      	mov	r1, r4
 800f724:	4628      	mov	r0, r5
 800f726:	f000 f919 	bl	800f95c <_fflush_r>
 800f72a:	b988      	cbnz	r0, 800f750 <__swbuf_r+0x90>
 800f72c:	4638      	mov	r0, r7
 800f72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f730:	4b0a      	ldr	r3, [pc, #40]	; (800f75c <__swbuf_r+0x9c>)
 800f732:	429c      	cmp	r4, r3
 800f734:	d101      	bne.n	800f73a <__swbuf_r+0x7a>
 800f736:	68ac      	ldr	r4, [r5, #8]
 800f738:	e7cf      	b.n	800f6da <__swbuf_r+0x1a>
 800f73a:	4b09      	ldr	r3, [pc, #36]	; (800f760 <__swbuf_r+0xa0>)
 800f73c:	429c      	cmp	r4, r3
 800f73e:	bf08      	it	eq
 800f740:	68ec      	ldreq	r4, [r5, #12]
 800f742:	e7ca      	b.n	800f6da <__swbuf_r+0x1a>
 800f744:	4621      	mov	r1, r4
 800f746:	4628      	mov	r0, r5
 800f748:	f000 f80c 	bl	800f764 <__swsetup_r>
 800f74c:	2800      	cmp	r0, #0
 800f74e:	d0cb      	beq.n	800f6e8 <__swbuf_r+0x28>
 800f750:	f04f 37ff 	mov.w	r7, #4294967295
 800f754:	e7ea      	b.n	800f72c <__swbuf_r+0x6c>
 800f756:	bf00      	nop
 800f758:	080105c4 	.word	0x080105c4
 800f75c:	080105e4 	.word	0x080105e4
 800f760:	080105a4 	.word	0x080105a4

0800f764 <__swsetup_r>:
 800f764:	4b32      	ldr	r3, [pc, #200]	; (800f830 <__swsetup_r+0xcc>)
 800f766:	b570      	push	{r4, r5, r6, lr}
 800f768:	681d      	ldr	r5, [r3, #0]
 800f76a:	4606      	mov	r6, r0
 800f76c:	460c      	mov	r4, r1
 800f76e:	b125      	cbz	r5, 800f77a <__swsetup_r+0x16>
 800f770:	69ab      	ldr	r3, [r5, #24]
 800f772:	b913      	cbnz	r3, 800f77a <__swsetup_r+0x16>
 800f774:	4628      	mov	r0, r5
 800f776:	f000 f985 	bl	800fa84 <__sinit>
 800f77a:	4b2e      	ldr	r3, [pc, #184]	; (800f834 <__swsetup_r+0xd0>)
 800f77c:	429c      	cmp	r4, r3
 800f77e:	d10f      	bne.n	800f7a0 <__swsetup_r+0x3c>
 800f780:	686c      	ldr	r4, [r5, #4]
 800f782:	89a3      	ldrh	r3, [r4, #12]
 800f784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f788:	0719      	lsls	r1, r3, #28
 800f78a:	d42c      	bmi.n	800f7e6 <__swsetup_r+0x82>
 800f78c:	06dd      	lsls	r5, r3, #27
 800f78e:	d411      	bmi.n	800f7b4 <__swsetup_r+0x50>
 800f790:	2309      	movs	r3, #9
 800f792:	6033      	str	r3, [r6, #0]
 800f794:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f798:	81a3      	strh	r3, [r4, #12]
 800f79a:	f04f 30ff 	mov.w	r0, #4294967295
 800f79e:	e03e      	b.n	800f81e <__swsetup_r+0xba>
 800f7a0:	4b25      	ldr	r3, [pc, #148]	; (800f838 <__swsetup_r+0xd4>)
 800f7a2:	429c      	cmp	r4, r3
 800f7a4:	d101      	bne.n	800f7aa <__swsetup_r+0x46>
 800f7a6:	68ac      	ldr	r4, [r5, #8]
 800f7a8:	e7eb      	b.n	800f782 <__swsetup_r+0x1e>
 800f7aa:	4b24      	ldr	r3, [pc, #144]	; (800f83c <__swsetup_r+0xd8>)
 800f7ac:	429c      	cmp	r4, r3
 800f7ae:	bf08      	it	eq
 800f7b0:	68ec      	ldreq	r4, [r5, #12]
 800f7b2:	e7e6      	b.n	800f782 <__swsetup_r+0x1e>
 800f7b4:	0758      	lsls	r0, r3, #29
 800f7b6:	d512      	bpl.n	800f7de <__swsetup_r+0x7a>
 800f7b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7ba:	b141      	cbz	r1, 800f7ce <__swsetup_r+0x6a>
 800f7bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7c0:	4299      	cmp	r1, r3
 800f7c2:	d002      	beq.n	800f7ca <__swsetup_r+0x66>
 800f7c4:	4630      	mov	r0, r6
 800f7c6:	f7ff fb27 	bl	800ee18 <_free_r>
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	6363      	str	r3, [r4, #52]	; 0x34
 800f7ce:	89a3      	ldrh	r3, [r4, #12]
 800f7d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f7d4:	81a3      	strh	r3, [r4, #12]
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	6063      	str	r3, [r4, #4]
 800f7da:	6923      	ldr	r3, [r4, #16]
 800f7dc:	6023      	str	r3, [r4, #0]
 800f7de:	89a3      	ldrh	r3, [r4, #12]
 800f7e0:	f043 0308 	orr.w	r3, r3, #8
 800f7e4:	81a3      	strh	r3, [r4, #12]
 800f7e6:	6923      	ldr	r3, [r4, #16]
 800f7e8:	b94b      	cbnz	r3, 800f7fe <__swsetup_r+0x9a>
 800f7ea:	89a3      	ldrh	r3, [r4, #12]
 800f7ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f7f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7f4:	d003      	beq.n	800f7fe <__swsetup_r+0x9a>
 800f7f6:	4621      	mov	r1, r4
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	f000 fa09 	bl	800fc10 <__smakebuf_r>
 800f7fe:	89a0      	ldrh	r0, [r4, #12]
 800f800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f804:	f010 0301 	ands.w	r3, r0, #1
 800f808:	d00a      	beq.n	800f820 <__swsetup_r+0xbc>
 800f80a:	2300      	movs	r3, #0
 800f80c:	60a3      	str	r3, [r4, #8]
 800f80e:	6963      	ldr	r3, [r4, #20]
 800f810:	425b      	negs	r3, r3
 800f812:	61a3      	str	r3, [r4, #24]
 800f814:	6923      	ldr	r3, [r4, #16]
 800f816:	b943      	cbnz	r3, 800f82a <__swsetup_r+0xc6>
 800f818:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f81c:	d1ba      	bne.n	800f794 <__swsetup_r+0x30>
 800f81e:	bd70      	pop	{r4, r5, r6, pc}
 800f820:	0781      	lsls	r1, r0, #30
 800f822:	bf58      	it	pl
 800f824:	6963      	ldrpl	r3, [r4, #20]
 800f826:	60a3      	str	r3, [r4, #8]
 800f828:	e7f4      	b.n	800f814 <__swsetup_r+0xb0>
 800f82a:	2000      	movs	r0, #0
 800f82c:	e7f7      	b.n	800f81e <__swsetup_r+0xba>
 800f82e:	bf00      	nop
 800f830:	2000022c 	.word	0x2000022c
 800f834:	080105c4 	.word	0x080105c4
 800f838:	080105e4 	.word	0x080105e4
 800f83c:	080105a4 	.word	0x080105a4

0800f840 <abort>:
 800f840:	b508      	push	{r3, lr}
 800f842:	2006      	movs	r0, #6
 800f844:	f000 fa54 	bl	800fcf0 <raise>
 800f848:	2001      	movs	r0, #1
 800f84a:	f7f4 ff2b 	bl	80046a4 <_exit>
	...

0800f850 <__sflush_r>:
 800f850:	898a      	ldrh	r2, [r1, #12]
 800f852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f856:	4605      	mov	r5, r0
 800f858:	0710      	lsls	r0, r2, #28
 800f85a:	460c      	mov	r4, r1
 800f85c:	d458      	bmi.n	800f910 <__sflush_r+0xc0>
 800f85e:	684b      	ldr	r3, [r1, #4]
 800f860:	2b00      	cmp	r3, #0
 800f862:	dc05      	bgt.n	800f870 <__sflush_r+0x20>
 800f864:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f866:	2b00      	cmp	r3, #0
 800f868:	dc02      	bgt.n	800f870 <__sflush_r+0x20>
 800f86a:	2000      	movs	r0, #0
 800f86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f872:	2e00      	cmp	r6, #0
 800f874:	d0f9      	beq.n	800f86a <__sflush_r+0x1a>
 800f876:	2300      	movs	r3, #0
 800f878:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f87c:	682f      	ldr	r7, [r5, #0]
 800f87e:	602b      	str	r3, [r5, #0]
 800f880:	d032      	beq.n	800f8e8 <__sflush_r+0x98>
 800f882:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f884:	89a3      	ldrh	r3, [r4, #12]
 800f886:	075a      	lsls	r2, r3, #29
 800f888:	d505      	bpl.n	800f896 <__sflush_r+0x46>
 800f88a:	6863      	ldr	r3, [r4, #4]
 800f88c:	1ac0      	subs	r0, r0, r3
 800f88e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f890:	b10b      	cbz	r3, 800f896 <__sflush_r+0x46>
 800f892:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f894:	1ac0      	subs	r0, r0, r3
 800f896:	2300      	movs	r3, #0
 800f898:	4602      	mov	r2, r0
 800f89a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f89c:	6a21      	ldr	r1, [r4, #32]
 800f89e:	4628      	mov	r0, r5
 800f8a0:	47b0      	blx	r6
 800f8a2:	1c43      	adds	r3, r0, #1
 800f8a4:	89a3      	ldrh	r3, [r4, #12]
 800f8a6:	d106      	bne.n	800f8b6 <__sflush_r+0x66>
 800f8a8:	6829      	ldr	r1, [r5, #0]
 800f8aa:	291d      	cmp	r1, #29
 800f8ac:	d82c      	bhi.n	800f908 <__sflush_r+0xb8>
 800f8ae:	4a2a      	ldr	r2, [pc, #168]	; (800f958 <__sflush_r+0x108>)
 800f8b0:	40ca      	lsrs	r2, r1
 800f8b2:	07d6      	lsls	r6, r2, #31
 800f8b4:	d528      	bpl.n	800f908 <__sflush_r+0xb8>
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	6062      	str	r2, [r4, #4]
 800f8ba:	04d9      	lsls	r1, r3, #19
 800f8bc:	6922      	ldr	r2, [r4, #16]
 800f8be:	6022      	str	r2, [r4, #0]
 800f8c0:	d504      	bpl.n	800f8cc <__sflush_r+0x7c>
 800f8c2:	1c42      	adds	r2, r0, #1
 800f8c4:	d101      	bne.n	800f8ca <__sflush_r+0x7a>
 800f8c6:	682b      	ldr	r3, [r5, #0]
 800f8c8:	b903      	cbnz	r3, 800f8cc <__sflush_r+0x7c>
 800f8ca:	6560      	str	r0, [r4, #84]	; 0x54
 800f8cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f8ce:	602f      	str	r7, [r5, #0]
 800f8d0:	2900      	cmp	r1, #0
 800f8d2:	d0ca      	beq.n	800f86a <__sflush_r+0x1a>
 800f8d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f8d8:	4299      	cmp	r1, r3
 800f8da:	d002      	beq.n	800f8e2 <__sflush_r+0x92>
 800f8dc:	4628      	mov	r0, r5
 800f8de:	f7ff fa9b 	bl	800ee18 <_free_r>
 800f8e2:	2000      	movs	r0, #0
 800f8e4:	6360      	str	r0, [r4, #52]	; 0x34
 800f8e6:	e7c1      	b.n	800f86c <__sflush_r+0x1c>
 800f8e8:	6a21      	ldr	r1, [r4, #32]
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	47b0      	blx	r6
 800f8f0:	1c41      	adds	r1, r0, #1
 800f8f2:	d1c7      	bne.n	800f884 <__sflush_r+0x34>
 800f8f4:	682b      	ldr	r3, [r5, #0]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d0c4      	beq.n	800f884 <__sflush_r+0x34>
 800f8fa:	2b1d      	cmp	r3, #29
 800f8fc:	d001      	beq.n	800f902 <__sflush_r+0xb2>
 800f8fe:	2b16      	cmp	r3, #22
 800f900:	d101      	bne.n	800f906 <__sflush_r+0xb6>
 800f902:	602f      	str	r7, [r5, #0]
 800f904:	e7b1      	b.n	800f86a <__sflush_r+0x1a>
 800f906:	89a3      	ldrh	r3, [r4, #12]
 800f908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f90c:	81a3      	strh	r3, [r4, #12]
 800f90e:	e7ad      	b.n	800f86c <__sflush_r+0x1c>
 800f910:	690f      	ldr	r7, [r1, #16]
 800f912:	2f00      	cmp	r7, #0
 800f914:	d0a9      	beq.n	800f86a <__sflush_r+0x1a>
 800f916:	0793      	lsls	r3, r2, #30
 800f918:	680e      	ldr	r6, [r1, #0]
 800f91a:	bf08      	it	eq
 800f91c:	694b      	ldreq	r3, [r1, #20]
 800f91e:	600f      	str	r7, [r1, #0]
 800f920:	bf18      	it	ne
 800f922:	2300      	movne	r3, #0
 800f924:	eba6 0807 	sub.w	r8, r6, r7
 800f928:	608b      	str	r3, [r1, #8]
 800f92a:	f1b8 0f00 	cmp.w	r8, #0
 800f92e:	dd9c      	ble.n	800f86a <__sflush_r+0x1a>
 800f930:	6a21      	ldr	r1, [r4, #32]
 800f932:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f934:	4643      	mov	r3, r8
 800f936:	463a      	mov	r2, r7
 800f938:	4628      	mov	r0, r5
 800f93a:	47b0      	blx	r6
 800f93c:	2800      	cmp	r0, #0
 800f93e:	dc06      	bgt.n	800f94e <__sflush_r+0xfe>
 800f940:	89a3      	ldrh	r3, [r4, #12]
 800f942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f946:	81a3      	strh	r3, [r4, #12]
 800f948:	f04f 30ff 	mov.w	r0, #4294967295
 800f94c:	e78e      	b.n	800f86c <__sflush_r+0x1c>
 800f94e:	4407      	add	r7, r0
 800f950:	eba8 0800 	sub.w	r8, r8, r0
 800f954:	e7e9      	b.n	800f92a <__sflush_r+0xda>
 800f956:	bf00      	nop
 800f958:	20400001 	.word	0x20400001

0800f95c <_fflush_r>:
 800f95c:	b538      	push	{r3, r4, r5, lr}
 800f95e:	690b      	ldr	r3, [r1, #16]
 800f960:	4605      	mov	r5, r0
 800f962:	460c      	mov	r4, r1
 800f964:	b913      	cbnz	r3, 800f96c <_fflush_r+0x10>
 800f966:	2500      	movs	r5, #0
 800f968:	4628      	mov	r0, r5
 800f96a:	bd38      	pop	{r3, r4, r5, pc}
 800f96c:	b118      	cbz	r0, 800f976 <_fflush_r+0x1a>
 800f96e:	6983      	ldr	r3, [r0, #24]
 800f970:	b90b      	cbnz	r3, 800f976 <_fflush_r+0x1a>
 800f972:	f000 f887 	bl	800fa84 <__sinit>
 800f976:	4b14      	ldr	r3, [pc, #80]	; (800f9c8 <_fflush_r+0x6c>)
 800f978:	429c      	cmp	r4, r3
 800f97a:	d11b      	bne.n	800f9b4 <_fflush_r+0x58>
 800f97c:	686c      	ldr	r4, [r5, #4]
 800f97e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d0ef      	beq.n	800f966 <_fflush_r+0xa>
 800f986:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f988:	07d0      	lsls	r0, r2, #31
 800f98a:	d404      	bmi.n	800f996 <_fflush_r+0x3a>
 800f98c:	0599      	lsls	r1, r3, #22
 800f98e:	d402      	bmi.n	800f996 <_fflush_r+0x3a>
 800f990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f992:	f000 f915 	bl	800fbc0 <__retarget_lock_acquire_recursive>
 800f996:	4628      	mov	r0, r5
 800f998:	4621      	mov	r1, r4
 800f99a:	f7ff ff59 	bl	800f850 <__sflush_r>
 800f99e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9a0:	07da      	lsls	r2, r3, #31
 800f9a2:	4605      	mov	r5, r0
 800f9a4:	d4e0      	bmi.n	800f968 <_fflush_r+0xc>
 800f9a6:	89a3      	ldrh	r3, [r4, #12]
 800f9a8:	059b      	lsls	r3, r3, #22
 800f9aa:	d4dd      	bmi.n	800f968 <_fflush_r+0xc>
 800f9ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9ae:	f000 f908 	bl	800fbc2 <__retarget_lock_release_recursive>
 800f9b2:	e7d9      	b.n	800f968 <_fflush_r+0xc>
 800f9b4:	4b05      	ldr	r3, [pc, #20]	; (800f9cc <_fflush_r+0x70>)
 800f9b6:	429c      	cmp	r4, r3
 800f9b8:	d101      	bne.n	800f9be <_fflush_r+0x62>
 800f9ba:	68ac      	ldr	r4, [r5, #8]
 800f9bc:	e7df      	b.n	800f97e <_fflush_r+0x22>
 800f9be:	4b04      	ldr	r3, [pc, #16]	; (800f9d0 <_fflush_r+0x74>)
 800f9c0:	429c      	cmp	r4, r3
 800f9c2:	bf08      	it	eq
 800f9c4:	68ec      	ldreq	r4, [r5, #12]
 800f9c6:	e7da      	b.n	800f97e <_fflush_r+0x22>
 800f9c8:	080105c4 	.word	0x080105c4
 800f9cc:	080105e4 	.word	0x080105e4
 800f9d0:	080105a4 	.word	0x080105a4

0800f9d4 <std>:
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	b510      	push	{r4, lr}
 800f9d8:	4604      	mov	r4, r0
 800f9da:	e9c0 3300 	strd	r3, r3, [r0]
 800f9de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f9e2:	6083      	str	r3, [r0, #8]
 800f9e4:	8181      	strh	r1, [r0, #12]
 800f9e6:	6643      	str	r3, [r0, #100]	; 0x64
 800f9e8:	81c2      	strh	r2, [r0, #14]
 800f9ea:	6183      	str	r3, [r0, #24]
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	2208      	movs	r2, #8
 800f9f0:	305c      	adds	r0, #92	; 0x5c
 800f9f2:	f7fb fddb 	bl	800b5ac <memset>
 800f9f6:	4b05      	ldr	r3, [pc, #20]	; (800fa0c <std+0x38>)
 800f9f8:	6263      	str	r3, [r4, #36]	; 0x24
 800f9fa:	4b05      	ldr	r3, [pc, #20]	; (800fa10 <std+0x3c>)
 800f9fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800f9fe:	4b05      	ldr	r3, [pc, #20]	; (800fa14 <std+0x40>)
 800fa00:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fa02:	4b05      	ldr	r3, [pc, #20]	; (800fa18 <std+0x44>)
 800fa04:	6224      	str	r4, [r4, #32]
 800fa06:	6323      	str	r3, [r4, #48]	; 0x30
 800fa08:	bd10      	pop	{r4, pc}
 800fa0a:	bf00      	nop
 800fa0c:	0800fd29 	.word	0x0800fd29
 800fa10:	0800fd4b 	.word	0x0800fd4b
 800fa14:	0800fd83 	.word	0x0800fd83
 800fa18:	0800fda7 	.word	0x0800fda7

0800fa1c <_cleanup_r>:
 800fa1c:	4901      	ldr	r1, [pc, #4]	; (800fa24 <_cleanup_r+0x8>)
 800fa1e:	f000 b8af 	b.w	800fb80 <_fwalk_reent>
 800fa22:	bf00      	nop
 800fa24:	0800f95d 	.word	0x0800f95d

0800fa28 <__sfmoreglue>:
 800fa28:	b570      	push	{r4, r5, r6, lr}
 800fa2a:	2268      	movs	r2, #104	; 0x68
 800fa2c:	1e4d      	subs	r5, r1, #1
 800fa2e:	4355      	muls	r5, r2
 800fa30:	460e      	mov	r6, r1
 800fa32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fa36:	f7ff fa5b 	bl	800eef0 <_malloc_r>
 800fa3a:	4604      	mov	r4, r0
 800fa3c:	b140      	cbz	r0, 800fa50 <__sfmoreglue+0x28>
 800fa3e:	2100      	movs	r1, #0
 800fa40:	e9c0 1600 	strd	r1, r6, [r0]
 800fa44:	300c      	adds	r0, #12
 800fa46:	60a0      	str	r0, [r4, #8]
 800fa48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fa4c:	f7fb fdae 	bl	800b5ac <memset>
 800fa50:	4620      	mov	r0, r4
 800fa52:	bd70      	pop	{r4, r5, r6, pc}

0800fa54 <__sfp_lock_acquire>:
 800fa54:	4801      	ldr	r0, [pc, #4]	; (800fa5c <__sfp_lock_acquire+0x8>)
 800fa56:	f000 b8b3 	b.w	800fbc0 <__retarget_lock_acquire_recursive>
 800fa5a:	bf00      	nop
 800fa5c:	200010bd 	.word	0x200010bd

0800fa60 <__sfp_lock_release>:
 800fa60:	4801      	ldr	r0, [pc, #4]	; (800fa68 <__sfp_lock_release+0x8>)
 800fa62:	f000 b8ae 	b.w	800fbc2 <__retarget_lock_release_recursive>
 800fa66:	bf00      	nop
 800fa68:	200010bd 	.word	0x200010bd

0800fa6c <__sinit_lock_acquire>:
 800fa6c:	4801      	ldr	r0, [pc, #4]	; (800fa74 <__sinit_lock_acquire+0x8>)
 800fa6e:	f000 b8a7 	b.w	800fbc0 <__retarget_lock_acquire_recursive>
 800fa72:	bf00      	nop
 800fa74:	200010be 	.word	0x200010be

0800fa78 <__sinit_lock_release>:
 800fa78:	4801      	ldr	r0, [pc, #4]	; (800fa80 <__sinit_lock_release+0x8>)
 800fa7a:	f000 b8a2 	b.w	800fbc2 <__retarget_lock_release_recursive>
 800fa7e:	bf00      	nop
 800fa80:	200010be 	.word	0x200010be

0800fa84 <__sinit>:
 800fa84:	b510      	push	{r4, lr}
 800fa86:	4604      	mov	r4, r0
 800fa88:	f7ff fff0 	bl	800fa6c <__sinit_lock_acquire>
 800fa8c:	69a3      	ldr	r3, [r4, #24]
 800fa8e:	b11b      	cbz	r3, 800fa98 <__sinit+0x14>
 800fa90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa94:	f7ff bff0 	b.w	800fa78 <__sinit_lock_release>
 800fa98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fa9c:	6523      	str	r3, [r4, #80]	; 0x50
 800fa9e:	4b13      	ldr	r3, [pc, #76]	; (800faec <__sinit+0x68>)
 800faa0:	4a13      	ldr	r2, [pc, #76]	; (800faf0 <__sinit+0x6c>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	62a2      	str	r2, [r4, #40]	; 0x28
 800faa6:	42a3      	cmp	r3, r4
 800faa8:	bf04      	itt	eq
 800faaa:	2301      	moveq	r3, #1
 800faac:	61a3      	streq	r3, [r4, #24]
 800faae:	4620      	mov	r0, r4
 800fab0:	f000 f820 	bl	800faf4 <__sfp>
 800fab4:	6060      	str	r0, [r4, #4]
 800fab6:	4620      	mov	r0, r4
 800fab8:	f000 f81c 	bl	800faf4 <__sfp>
 800fabc:	60a0      	str	r0, [r4, #8]
 800fabe:	4620      	mov	r0, r4
 800fac0:	f000 f818 	bl	800faf4 <__sfp>
 800fac4:	2200      	movs	r2, #0
 800fac6:	60e0      	str	r0, [r4, #12]
 800fac8:	2104      	movs	r1, #4
 800faca:	6860      	ldr	r0, [r4, #4]
 800facc:	f7ff ff82 	bl	800f9d4 <std>
 800fad0:	68a0      	ldr	r0, [r4, #8]
 800fad2:	2201      	movs	r2, #1
 800fad4:	2109      	movs	r1, #9
 800fad6:	f7ff ff7d 	bl	800f9d4 <std>
 800fada:	68e0      	ldr	r0, [r4, #12]
 800fadc:	2202      	movs	r2, #2
 800fade:	2112      	movs	r1, #18
 800fae0:	f7ff ff78 	bl	800f9d4 <std>
 800fae4:	2301      	movs	r3, #1
 800fae6:	61a3      	str	r3, [r4, #24]
 800fae8:	e7d2      	b.n	800fa90 <__sinit+0xc>
 800faea:	bf00      	nop
 800faec:	08010160 	.word	0x08010160
 800faf0:	0800fa1d 	.word	0x0800fa1d

0800faf4 <__sfp>:
 800faf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faf6:	4607      	mov	r7, r0
 800faf8:	f7ff ffac 	bl	800fa54 <__sfp_lock_acquire>
 800fafc:	4b1e      	ldr	r3, [pc, #120]	; (800fb78 <__sfp+0x84>)
 800fafe:	681e      	ldr	r6, [r3, #0]
 800fb00:	69b3      	ldr	r3, [r6, #24]
 800fb02:	b913      	cbnz	r3, 800fb0a <__sfp+0x16>
 800fb04:	4630      	mov	r0, r6
 800fb06:	f7ff ffbd 	bl	800fa84 <__sinit>
 800fb0a:	3648      	adds	r6, #72	; 0x48
 800fb0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fb10:	3b01      	subs	r3, #1
 800fb12:	d503      	bpl.n	800fb1c <__sfp+0x28>
 800fb14:	6833      	ldr	r3, [r6, #0]
 800fb16:	b30b      	cbz	r3, 800fb5c <__sfp+0x68>
 800fb18:	6836      	ldr	r6, [r6, #0]
 800fb1a:	e7f7      	b.n	800fb0c <__sfp+0x18>
 800fb1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fb20:	b9d5      	cbnz	r5, 800fb58 <__sfp+0x64>
 800fb22:	4b16      	ldr	r3, [pc, #88]	; (800fb7c <__sfp+0x88>)
 800fb24:	60e3      	str	r3, [r4, #12]
 800fb26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fb2a:	6665      	str	r5, [r4, #100]	; 0x64
 800fb2c:	f000 f847 	bl	800fbbe <__retarget_lock_init_recursive>
 800fb30:	f7ff ff96 	bl	800fa60 <__sfp_lock_release>
 800fb34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fb38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fb3c:	6025      	str	r5, [r4, #0]
 800fb3e:	61a5      	str	r5, [r4, #24]
 800fb40:	2208      	movs	r2, #8
 800fb42:	4629      	mov	r1, r5
 800fb44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fb48:	f7fb fd30 	bl	800b5ac <memset>
 800fb4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fb50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fb54:	4620      	mov	r0, r4
 800fb56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb58:	3468      	adds	r4, #104	; 0x68
 800fb5a:	e7d9      	b.n	800fb10 <__sfp+0x1c>
 800fb5c:	2104      	movs	r1, #4
 800fb5e:	4638      	mov	r0, r7
 800fb60:	f7ff ff62 	bl	800fa28 <__sfmoreglue>
 800fb64:	4604      	mov	r4, r0
 800fb66:	6030      	str	r0, [r6, #0]
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	d1d5      	bne.n	800fb18 <__sfp+0x24>
 800fb6c:	f7ff ff78 	bl	800fa60 <__sfp_lock_release>
 800fb70:	230c      	movs	r3, #12
 800fb72:	603b      	str	r3, [r7, #0]
 800fb74:	e7ee      	b.n	800fb54 <__sfp+0x60>
 800fb76:	bf00      	nop
 800fb78:	08010160 	.word	0x08010160
 800fb7c:	ffff0001 	.word	0xffff0001

0800fb80 <_fwalk_reent>:
 800fb80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb84:	4606      	mov	r6, r0
 800fb86:	4688      	mov	r8, r1
 800fb88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fb8c:	2700      	movs	r7, #0
 800fb8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb92:	f1b9 0901 	subs.w	r9, r9, #1
 800fb96:	d505      	bpl.n	800fba4 <_fwalk_reent+0x24>
 800fb98:	6824      	ldr	r4, [r4, #0]
 800fb9a:	2c00      	cmp	r4, #0
 800fb9c:	d1f7      	bne.n	800fb8e <_fwalk_reent+0xe>
 800fb9e:	4638      	mov	r0, r7
 800fba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fba4:	89ab      	ldrh	r3, [r5, #12]
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d907      	bls.n	800fbba <_fwalk_reent+0x3a>
 800fbaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fbae:	3301      	adds	r3, #1
 800fbb0:	d003      	beq.n	800fbba <_fwalk_reent+0x3a>
 800fbb2:	4629      	mov	r1, r5
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	47c0      	blx	r8
 800fbb8:	4307      	orrs	r7, r0
 800fbba:	3568      	adds	r5, #104	; 0x68
 800fbbc:	e7e9      	b.n	800fb92 <_fwalk_reent+0x12>

0800fbbe <__retarget_lock_init_recursive>:
 800fbbe:	4770      	bx	lr

0800fbc0 <__retarget_lock_acquire_recursive>:
 800fbc0:	4770      	bx	lr

0800fbc2 <__retarget_lock_release_recursive>:
 800fbc2:	4770      	bx	lr

0800fbc4 <__swhatbuf_r>:
 800fbc4:	b570      	push	{r4, r5, r6, lr}
 800fbc6:	460e      	mov	r6, r1
 800fbc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbcc:	2900      	cmp	r1, #0
 800fbce:	b096      	sub	sp, #88	; 0x58
 800fbd0:	4614      	mov	r4, r2
 800fbd2:	461d      	mov	r5, r3
 800fbd4:	da08      	bge.n	800fbe8 <__swhatbuf_r+0x24>
 800fbd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	602a      	str	r2, [r5, #0]
 800fbde:	061a      	lsls	r2, r3, #24
 800fbe0:	d410      	bmi.n	800fc04 <__swhatbuf_r+0x40>
 800fbe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbe6:	e00e      	b.n	800fc06 <__swhatbuf_r+0x42>
 800fbe8:	466a      	mov	r2, sp
 800fbea:	f000 f903 	bl	800fdf4 <_fstat_r>
 800fbee:	2800      	cmp	r0, #0
 800fbf0:	dbf1      	blt.n	800fbd6 <__swhatbuf_r+0x12>
 800fbf2:	9a01      	ldr	r2, [sp, #4]
 800fbf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fbf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fbfc:	425a      	negs	r2, r3
 800fbfe:	415a      	adcs	r2, r3
 800fc00:	602a      	str	r2, [r5, #0]
 800fc02:	e7ee      	b.n	800fbe2 <__swhatbuf_r+0x1e>
 800fc04:	2340      	movs	r3, #64	; 0x40
 800fc06:	2000      	movs	r0, #0
 800fc08:	6023      	str	r3, [r4, #0]
 800fc0a:	b016      	add	sp, #88	; 0x58
 800fc0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fc10 <__smakebuf_r>:
 800fc10:	898b      	ldrh	r3, [r1, #12]
 800fc12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fc14:	079d      	lsls	r5, r3, #30
 800fc16:	4606      	mov	r6, r0
 800fc18:	460c      	mov	r4, r1
 800fc1a:	d507      	bpl.n	800fc2c <__smakebuf_r+0x1c>
 800fc1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fc20:	6023      	str	r3, [r4, #0]
 800fc22:	6123      	str	r3, [r4, #16]
 800fc24:	2301      	movs	r3, #1
 800fc26:	6163      	str	r3, [r4, #20]
 800fc28:	b002      	add	sp, #8
 800fc2a:	bd70      	pop	{r4, r5, r6, pc}
 800fc2c:	ab01      	add	r3, sp, #4
 800fc2e:	466a      	mov	r2, sp
 800fc30:	f7ff ffc8 	bl	800fbc4 <__swhatbuf_r>
 800fc34:	9900      	ldr	r1, [sp, #0]
 800fc36:	4605      	mov	r5, r0
 800fc38:	4630      	mov	r0, r6
 800fc3a:	f7ff f959 	bl	800eef0 <_malloc_r>
 800fc3e:	b948      	cbnz	r0, 800fc54 <__smakebuf_r+0x44>
 800fc40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc44:	059a      	lsls	r2, r3, #22
 800fc46:	d4ef      	bmi.n	800fc28 <__smakebuf_r+0x18>
 800fc48:	f023 0303 	bic.w	r3, r3, #3
 800fc4c:	f043 0302 	orr.w	r3, r3, #2
 800fc50:	81a3      	strh	r3, [r4, #12]
 800fc52:	e7e3      	b.n	800fc1c <__smakebuf_r+0xc>
 800fc54:	4b0d      	ldr	r3, [pc, #52]	; (800fc8c <__smakebuf_r+0x7c>)
 800fc56:	62b3      	str	r3, [r6, #40]	; 0x28
 800fc58:	89a3      	ldrh	r3, [r4, #12]
 800fc5a:	6020      	str	r0, [r4, #0]
 800fc5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc60:	81a3      	strh	r3, [r4, #12]
 800fc62:	9b00      	ldr	r3, [sp, #0]
 800fc64:	6163      	str	r3, [r4, #20]
 800fc66:	9b01      	ldr	r3, [sp, #4]
 800fc68:	6120      	str	r0, [r4, #16]
 800fc6a:	b15b      	cbz	r3, 800fc84 <__smakebuf_r+0x74>
 800fc6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc70:	4630      	mov	r0, r6
 800fc72:	f000 f8d1 	bl	800fe18 <_isatty_r>
 800fc76:	b128      	cbz	r0, 800fc84 <__smakebuf_r+0x74>
 800fc78:	89a3      	ldrh	r3, [r4, #12]
 800fc7a:	f023 0303 	bic.w	r3, r3, #3
 800fc7e:	f043 0301 	orr.w	r3, r3, #1
 800fc82:	81a3      	strh	r3, [r4, #12]
 800fc84:	89a0      	ldrh	r0, [r4, #12]
 800fc86:	4305      	orrs	r5, r0
 800fc88:	81a5      	strh	r5, [r4, #12]
 800fc8a:	e7cd      	b.n	800fc28 <__smakebuf_r+0x18>
 800fc8c:	0800fa1d 	.word	0x0800fa1d

0800fc90 <_malloc_usable_size_r>:
 800fc90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc94:	1f18      	subs	r0, r3, #4
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	bfbc      	itt	lt
 800fc9a:	580b      	ldrlt	r3, [r1, r0]
 800fc9c:	18c0      	addlt	r0, r0, r3
 800fc9e:	4770      	bx	lr

0800fca0 <_raise_r>:
 800fca0:	291f      	cmp	r1, #31
 800fca2:	b538      	push	{r3, r4, r5, lr}
 800fca4:	4604      	mov	r4, r0
 800fca6:	460d      	mov	r5, r1
 800fca8:	d904      	bls.n	800fcb4 <_raise_r+0x14>
 800fcaa:	2316      	movs	r3, #22
 800fcac:	6003      	str	r3, [r0, #0]
 800fcae:	f04f 30ff 	mov.w	r0, #4294967295
 800fcb2:	bd38      	pop	{r3, r4, r5, pc}
 800fcb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fcb6:	b112      	cbz	r2, 800fcbe <_raise_r+0x1e>
 800fcb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fcbc:	b94b      	cbnz	r3, 800fcd2 <_raise_r+0x32>
 800fcbe:	4620      	mov	r0, r4
 800fcc0:	f000 f830 	bl	800fd24 <_getpid_r>
 800fcc4:	462a      	mov	r2, r5
 800fcc6:	4601      	mov	r1, r0
 800fcc8:	4620      	mov	r0, r4
 800fcca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcce:	f000 b817 	b.w	800fd00 <_kill_r>
 800fcd2:	2b01      	cmp	r3, #1
 800fcd4:	d00a      	beq.n	800fcec <_raise_r+0x4c>
 800fcd6:	1c59      	adds	r1, r3, #1
 800fcd8:	d103      	bne.n	800fce2 <_raise_r+0x42>
 800fcda:	2316      	movs	r3, #22
 800fcdc:	6003      	str	r3, [r0, #0]
 800fcde:	2001      	movs	r0, #1
 800fce0:	e7e7      	b.n	800fcb2 <_raise_r+0x12>
 800fce2:	2400      	movs	r4, #0
 800fce4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fce8:	4628      	mov	r0, r5
 800fcea:	4798      	blx	r3
 800fcec:	2000      	movs	r0, #0
 800fcee:	e7e0      	b.n	800fcb2 <_raise_r+0x12>

0800fcf0 <raise>:
 800fcf0:	4b02      	ldr	r3, [pc, #8]	; (800fcfc <raise+0xc>)
 800fcf2:	4601      	mov	r1, r0
 800fcf4:	6818      	ldr	r0, [r3, #0]
 800fcf6:	f7ff bfd3 	b.w	800fca0 <_raise_r>
 800fcfa:	bf00      	nop
 800fcfc:	2000022c 	.word	0x2000022c

0800fd00 <_kill_r>:
 800fd00:	b538      	push	{r3, r4, r5, lr}
 800fd02:	4d07      	ldr	r5, [pc, #28]	; (800fd20 <_kill_r+0x20>)
 800fd04:	2300      	movs	r3, #0
 800fd06:	4604      	mov	r4, r0
 800fd08:	4608      	mov	r0, r1
 800fd0a:	4611      	mov	r1, r2
 800fd0c:	602b      	str	r3, [r5, #0]
 800fd0e:	f7f4 fcb9 	bl	8004684 <_kill>
 800fd12:	1c43      	adds	r3, r0, #1
 800fd14:	d102      	bne.n	800fd1c <_kill_r+0x1c>
 800fd16:	682b      	ldr	r3, [r5, #0]
 800fd18:	b103      	cbz	r3, 800fd1c <_kill_r+0x1c>
 800fd1a:	6023      	str	r3, [r4, #0]
 800fd1c:	bd38      	pop	{r3, r4, r5, pc}
 800fd1e:	bf00      	nop
 800fd20:	200010b8 	.word	0x200010b8

0800fd24 <_getpid_r>:
 800fd24:	f7f4 bca6 	b.w	8004674 <_getpid>

0800fd28 <__sread>:
 800fd28:	b510      	push	{r4, lr}
 800fd2a:	460c      	mov	r4, r1
 800fd2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd30:	f000 f894 	bl	800fe5c <_read_r>
 800fd34:	2800      	cmp	r0, #0
 800fd36:	bfab      	itete	ge
 800fd38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fd3a:	89a3      	ldrhlt	r3, [r4, #12]
 800fd3c:	181b      	addge	r3, r3, r0
 800fd3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fd42:	bfac      	ite	ge
 800fd44:	6563      	strge	r3, [r4, #84]	; 0x54
 800fd46:	81a3      	strhlt	r3, [r4, #12]
 800fd48:	bd10      	pop	{r4, pc}

0800fd4a <__swrite>:
 800fd4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd4e:	461f      	mov	r7, r3
 800fd50:	898b      	ldrh	r3, [r1, #12]
 800fd52:	05db      	lsls	r3, r3, #23
 800fd54:	4605      	mov	r5, r0
 800fd56:	460c      	mov	r4, r1
 800fd58:	4616      	mov	r6, r2
 800fd5a:	d505      	bpl.n	800fd68 <__swrite+0x1e>
 800fd5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd60:	2302      	movs	r3, #2
 800fd62:	2200      	movs	r2, #0
 800fd64:	f000 f868 	bl	800fe38 <_lseek_r>
 800fd68:	89a3      	ldrh	r3, [r4, #12]
 800fd6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd72:	81a3      	strh	r3, [r4, #12]
 800fd74:	4632      	mov	r2, r6
 800fd76:	463b      	mov	r3, r7
 800fd78:	4628      	mov	r0, r5
 800fd7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd7e:	f000 b817 	b.w	800fdb0 <_write_r>

0800fd82 <__sseek>:
 800fd82:	b510      	push	{r4, lr}
 800fd84:	460c      	mov	r4, r1
 800fd86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd8a:	f000 f855 	bl	800fe38 <_lseek_r>
 800fd8e:	1c43      	adds	r3, r0, #1
 800fd90:	89a3      	ldrh	r3, [r4, #12]
 800fd92:	bf15      	itete	ne
 800fd94:	6560      	strne	r0, [r4, #84]	; 0x54
 800fd96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fd9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fd9e:	81a3      	strheq	r3, [r4, #12]
 800fda0:	bf18      	it	ne
 800fda2:	81a3      	strhne	r3, [r4, #12]
 800fda4:	bd10      	pop	{r4, pc}

0800fda6 <__sclose>:
 800fda6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdaa:	f000 b813 	b.w	800fdd4 <_close_r>
	...

0800fdb0 <_write_r>:
 800fdb0:	b538      	push	{r3, r4, r5, lr}
 800fdb2:	4d07      	ldr	r5, [pc, #28]	; (800fdd0 <_write_r+0x20>)
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	4608      	mov	r0, r1
 800fdb8:	4611      	mov	r1, r2
 800fdba:	2200      	movs	r2, #0
 800fdbc:	602a      	str	r2, [r5, #0]
 800fdbe:	461a      	mov	r2, r3
 800fdc0:	f7f4 fc97 	bl	80046f2 <_write>
 800fdc4:	1c43      	adds	r3, r0, #1
 800fdc6:	d102      	bne.n	800fdce <_write_r+0x1e>
 800fdc8:	682b      	ldr	r3, [r5, #0]
 800fdca:	b103      	cbz	r3, 800fdce <_write_r+0x1e>
 800fdcc:	6023      	str	r3, [r4, #0]
 800fdce:	bd38      	pop	{r3, r4, r5, pc}
 800fdd0:	200010b8 	.word	0x200010b8

0800fdd4 <_close_r>:
 800fdd4:	b538      	push	{r3, r4, r5, lr}
 800fdd6:	4d06      	ldr	r5, [pc, #24]	; (800fdf0 <_close_r+0x1c>)
 800fdd8:	2300      	movs	r3, #0
 800fdda:	4604      	mov	r4, r0
 800fddc:	4608      	mov	r0, r1
 800fdde:	602b      	str	r3, [r5, #0]
 800fde0:	f7f4 fca3 	bl	800472a <_close>
 800fde4:	1c43      	adds	r3, r0, #1
 800fde6:	d102      	bne.n	800fdee <_close_r+0x1a>
 800fde8:	682b      	ldr	r3, [r5, #0]
 800fdea:	b103      	cbz	r3, 800fdee <_close_r+0x1a>
 800fdec:	6023      	str	r3, [r4, #0]
 800fdee:	bd38      	pop	{r3, r4, r5, pc}
 800fdf0:	200010b8 	.word	0x200010b8

0800fdf4 <_fstat_r>:
 800fdf4:	b538      	push	{r3, r4, r5, lr}
 800fdf6:	4d07      	ldr	r5, [pc, #28]	; (800fe14 <_fstat_r+0x20>)
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	4604      	mov	r4, r0
 800fdfc:	4608      	mov	r0, r1
 800fdfe:	4611      	mov	r1, r2
 800fe00:	602b      	str	r3, [r5, #0]
 800fe02:	f7f4 fc9e 	bl	8004742 <_fstat>
 800fe06:	1c43      	adds	r3, r0, #1
 800fe08:	d102      	bne.n	800fe10 <_fstat_r+0x1c>
 800fe0a:	682b      	ldr	r3, [r5, #0]
 800fe0c:	b103      	cbz	r3, 800fe10 <_fstat_r+0x1c>
 800fe0e:	6023      	str	r3, [r4, #0]
 800fe10:	bd38      	pop	{r3, r4, r5, pc}
 800fe12:	bf00      	nop
 800fe14:	200010b8 	.word	0x200010b8

0800fe18 <_isatty_r>:
 800fe18:	b538      	push	{r3, r4, r5, lr}
 800fe1a:	4d06      	ldr	r5, [pc, #24]	; (800fe34 <_isatty_r+0x1c>)
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	4604      	mov	r4, r0
 800fe20:	4608      	mov	r0, r1
 800fe22:	602b      	str	r3, [r5, #0]
 800fe24:	f7f4 fc9d 	bl	8004762 <_isatty>
 800fe28:	1c43      	adds	r3, r0, #1
 800fe2a:	d102      	bne.n	800fe32 <_isatty_r+0x1a>
 800fe2c:	682b      	ldr	r3, [r5, #0]
 800fe2e:	b103      	cbz	r3, 800fe32 <_isatty_r+0x1a>
 800fe30:	6023      	str	r3, [r4, #0]
 800fe32:	bd38      	pop	{r3, r4, r5, pc}
 800fe34:	200010b8 	.word	0x200010b8

0800fe38 <_lseek_r>:
 800fe38:	b538      	push	{r3, r4, r5, lr}
 800fe3a:	4d07      	ldr	r5, [pc, #28]	; (800fe58 <_lseek_r+0x20>)
 800fe3c:	4604      	mov	r4, r0
 800fe3e:	4608      	mov	r0, r1
 800fe40:	4611      	mov	r1, r2
 800fe42:	2200      	movs	r2, #0
 800fe44:	602a      	str	r2, [r5, #0]
 800fe46:	461a      	mov	r2, r3
 800fe48:	f7f4 fc96 	bl	8004778 <_lseek>
 800fe4c:	1c43      	adds	r3, r0, #1
 800fe4e:	d102      	bne.n	800fe56 <_lseek_r+0x1e>
 800fe50:	682b      	ldr	r3, [r5, #0]
 800fe52:	b103      	cbz	r3, 800fe56 <_lseek_r+0x1e>
 800fe54:	6023      	str	r3, [r4, #0]
 800fe56:	bd38      	pop	{r3, r4, r5, pc}
 800fe58:	200010b8 	.word	0x200010b8

0800fe5c <_read_r>:
 800fe5c:	b538      	push	{r3, r4, r5, lr}
 800fe5e:	4d07      	ldr	r5, [pc, #28]	; (800fe7c <_read_r+0x20>)
 800fe60:	4604      	mov	r4, r0
 800fe62:	4608      	mov	r0, r1
 800fe64:	4611      	mov	r1, r2
 800fe66:	2200      	movs	r2, #0
 800fe68:	602a      	str	r2, [r5, #0]
 800fe6a:	461a      	mov	r2, r3
 800fe6c:	f7f4 fc24 	bl	80046b8 <_read>
 800fe70:	1c43      	adds	r3, r0, #1
 800fe72:	d102      	bne.n	800fe7a <_read_r+0x1e>
 800fe74:	682b      	ldr	r3, [r5, #0]
 800fe76:	b103      	cbz	r3, 800fe7a <_read_r+0x1e>
 800fe78:	6023      	str	r3, [r4, #0]
 800fe7a:	bd38      	pop	{r3, r4, r5, pc}
 800fe7c:	200010b8 	.word	0x200010b8

0800fe80 <acosf>:
 800fe80:	b508      	push	{r3, lr}
 800fe82:	ed2d 8b02 	vpush	{d8}
 800fe86:	eeb0 8a40 	vmov.f32	s16, s0
 800fe8a:	f000 f843 	bl	800ff14 <__ieee754_acosf>
 800fe8e:	eeb4 8a48 	vcmp.f32	s16, s16
 800fe92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe96:	eef0 8a40 	vmov.f32	s17, s0
 800fe9a:	d615      	bvs.n	800fec8 <acosf+0x48>
 800fe9c:	eeb0 0a48 	vmov.f32	s0, s16
 800fea0:	f000 f933 	bl	801010a <fabsf>
 800fea4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fea8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800feac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feb0:	dd0a      	ble.n	800fec8 <acosf+0x48>
 800feb2:	f7fb fb43 	bl	800b53c <__errno>
 800feb6:	ecbd 8b02 	vpop	{d8}
 800feba:	2321      	movs	r3, #33	; 0x21
 800febc:	6003      	str	r3, [r0, #0]
 800febe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fec2:	4804      	ldr	r0, [pc, #16]	; (800fed4 <acosf+0x54>)
 800fec4:	f7fc b9f4 	b.w	800c2b0 <nanf>
 800fec8:	eeb0 0a68 	vmov.f32	s0, s17
 800fecc:	ecbd 8b02 	vpop	{d8}
 800fed0:	bd08      	pop	{r3, pc}
 800fed2:	bf00      	nop
 800fed4:	080105a0 	.word	0x080105a0

0800fed8 <sqrtf>:
 800fed8:	b508      	push	{r3, lr}
 800feda:	ed2d 8b02 	vpush	{d8}
 800fede:	eeb0 8a40 	vmov.f32	s16, s0
 800fee2:	f000 f90f 	bl	8010104 <__ieee754_sqrtf>
 800fee6:	eeb4 8a48 	vcmp.f32	s16, s16
 800feea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feee:	d60c      	bvs.n	800ff0a <sqrtf+0x32>
 800fef0:	eddf 8a07 	vldr	s17, [pc, #28]	; 800ff10 <sqrtf+0x38>
 800fef4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800fef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fefc:	d505      	bpl.n	800ff0a <sqrtf+0x32>
 800fefe:	f7fb fb1d 	bl	800b53c <__errno>
 800ff02:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ff06:	2321      	movs	r3, #33	; 0x21
 800ff08:	6003      	str	r3, [r0, #0]
 800ff0a:	ecbd 8b02 	vpop	{d8}
 800ff0e:	bd08      	pop	{r3, pc}
 800ff10:	00000000 	.word	0x00000000

0800ff14 <__ieee754_acosf>:
 800ff14:	b508      	push	{r3, lr}
 800ff16:	ee10 3a10 	vmov	r3, s0
 800ff1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ff1e:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800ff22:	ed2d 8b0c 	vpush	{d8-d13}
 800ff26:	d10a      	bne.n	800ff3e <__ieee754_acosf+0x2a>
 800ff28:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80100c0 <__ieee754_acosf+0x1ac>
 800ff2c:	ed9f 8a65 	vldr	s16, [pc, #404]	; 80100c4 <__ieee754_acosf+0x1b0>
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	bfd8      	it	le
 800ff34:	eeb0 0a48 	vmovle.f32	s0, s16
 800ff38:	ecbd 8b0c 	vpop	{d8-d13}
 800ff3c:	bd08      	pop	{r3, pc}
 800ff3e:	dd04      	ble.n	800ff4a <__ieee754_acosf+0x36>
 800ff40:	ee30 8a40 	vsub.f32	s16, s0, s0
 800ff44:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ff48:	e7f6      	b.n	800ff38 <__ieee754_acosf+0x24>
 800ff4a:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800ff4e:	da3c      	bge.n	800ffca <__ieee754_acosf+0xb6>
 800ff50:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800ff54:	f340 80b1 	ble.w	80100ba <__ieee754_acosf+0x1a6>
 800ff58:	ee60 7a00 	vmul.f32	s15, s0, s0
 800ff5c:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80100c8 <__ieee754_acosf+0x1b4>
 800ff60:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80100cc <__ieee754_acosf+0x1b8>
 800ff64:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 80100d0 <__ieee754_acosf+0x1bc>
 800ff68:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 80100d4 <__ieee754_acosf+0x1c0>
 800ff6c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ff70:	eddf 6a59 	vldr	s13, [pc, #356]	; 80100d8 <__ieee754_acosf+0x1c4>
 800ff74:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ff78:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80100dc <__ieee754_acosf+0x1c8>
 800ff7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ff80:	eddf 6a57 	vldr	s13, [pc, #348]	; 80100e0 <__ieee754_acosf+0x1cc>
 800ff84:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ff88:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80100e4 <__ieee754_acosf+0x1d0>
 800ff8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ff90:	eddf 6a55 	vldr	s13, [pc, #340]	; 80100e8 <__ieee754_acosf+0x1d4>
 800ff94:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800ff98:	eddf 6a54 	vldr	s13, [pc, #336]	; 80100ec <__ieee754_acosf+0x1d8>
 800ff9c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ffa0:	ed9f 6a53 	vldr	s12, [pc, #332]	; 80100f0 <__ieee754_acosf+0x1dc>
 800ffa4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800ffa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ffac:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ffb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ffb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ffb8:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ffbc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80100f4 <__ieee754_acosf+0x1e0>
 800ffc0:	ee30 0a48 	vsub.f32	s0, s0, s16
 800ffc4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ffc8:	e7b6      	b.n	800ff38 <__ieee754_acosf+0x24>
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	eddf da3e 	vldr	s27, [pc, #248]	; 80100c8 <__ieee754_acosf+0x1b4>
 800ffd0:	eddf ca3e 	vldr	s25, [pc, #248]	; 80100cc <__ieee754_acosf+0x1b8>
 800ffd4:	ed9f ca40 	vldr	s24, [pc, #256]	; 80100d8 <__ieee754_acosf+0x1c4>
 800ffd8:	eddf ba40 	vldr	s23, [pc, #256]	; 80100dc <__ieee754_acosf+0x1c8>
 800ffdc:	ed9f ba40 	vldr	s22, [pc, #256]	; 80100e0 <__ieee754_acosf+0x1cc>
 800ffe0:	eddf 8a40 	vldr	s17, [pc, #256]	; 80100e4 <__ieee754_acosf+0x1d0>
 800ffe4:	ed9f da40 	vldr	s26, [pc, #256]	; 80100e8 <__ieee754_acosf+0x1d4>
 800ffe8:	eddf aa39 	vldr	s21, [pc, #228]	; 80100d0 <__ieee754_acosf+0x1bc>
 800ffec:	ed9f aa3f 	vldr	s20, [pc, #252]	; 80100ec <__ieee754_acosf+0x1d8>
 800fff0:	eddf 9a3f 	vldr	s19, [pc, #252]	; 80100f0 <__ieee754_acosf+0x1dc>
 800fff4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800fff8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fffc:	da28      	bge.n	8010050 <__ieee754_acosf+0x13c>
 800fffe:	ee30 0a09 	vadd.f32	s0, s0, s18
 8010002:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010006:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801000a:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801000e:	eeac ca80 	vfma.f32	s24, s25, s0
 8010012:	eeaa aa80 	vfma.f32	s20, s21, s0
 8010016:	eeec ba00 	vfma.f32	s23, s24, s0
 801001a:	eeea 9a00 	vfma.f32	s19, s20, s0
 801001e:	eeab ba80 	vfma.f32	s22, s23, s0
 8010022:	eea9 9a80 	vfma.f32	s18, s19, s0
 8010026:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801002a:	ee68 8a80 	vmul.f32	s17, s17, s0
 801002e:	f000 f869 	bl	8010104 <__ieee754_sqrtf>
 8010032:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8010036:	eddf 7a30 	vldr	s15, [pc, #192]	; 80100f8 <__ieee754_acosf+0x1e4>
 801003a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801003e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010042:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010046:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80100fc <__ieee754_acosf+0x1e8>
 801004a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801004e:	e773      	b.n	800ff38 <__ieee754_acosf+0x24>
 8010050:	ee39 8a40 	vsub.f32	s16, s18, s0
 8010054:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010058:	eeb0 0a48 	vmov.f32	s0, s16
 801005c:	f000 f852 	bl	8010104 <__ieee754_sqrtf>
 8010060:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8010064:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8010068:	eeac ca88 	vfma.f32	s24, s25, s16
 801006c:	eeaa aa88 	vfma.f32	s20, s21, s16
 8010070:	eeec ba08 	vfma.f32	s23, s24, s16
 8010074:	ee10 3a10 	vmov	r3, s0
 8010078:	eeab ba88 	vfma.f32	s22, s23, s16
 801007c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010080:	f023 030f 	bic.w	r3, r3, #15
 8010084:	eeea 9a08 	vfma.f32	s19, s20, s16
 8010088:	ee07 3a90 	vmov	s15, r3
 801008c:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8010090:	eeb0 6a48 	vmov.f32	s12, s16
 8010094:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8010098:	eea9 9a88 	vfma.f32	s18, s19, s16
 801009c:	ee70 6a27 	vadd.f32	s13, s0, s15
 80100a0:	ee68 8a88 	vmul.f32	s17, s17, s16
 80100a4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80100a8:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80100ac:	eea0 7a26 	vfma.f32	s14, s0, s13
 80100b0:	ee37 0a87 	vadd.f32	s0, s15, s14
 80100b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80100b8:	e73e      	b.n	800ff38 <__ieee754_acosf+0x24>
 80100ba:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8010100 <__ieee754_acosf+0x1ec>
 80100be:	e73b      	b.n	800ff38 <__ieee754_acosf+0x24>
 80100c0:	00000000 	.word	0x00000000
 80100c4:	40490fdb 	.word	0x40490fdb
 80100c8:	3811ef08 	.word	0x3811ef08
 80100cc:	3a4f7f04 	.word	0x3a4f7f04
 80100d0:	bf303361 	.word	0xbf303361
 80100d4:	33a22168 	.word	0x33a22168
 80100d8:	bd241146 	.word	0xbd241146
 80100dc:	3e4e0aa8 	.word	0x3e4e0aa8
 80100e0:	bea6b090 	.word	0xbea6b090
 80100e4:	3e2aaaab 	.word	0x3e2aaaab
 80100e8:	3d9dc62e 	.word	0x3d9dc62e
 80100ec:	4001572d 	.word	0x4001572d
 80100f0:	c019d139 	.word	0xc019d139
 80100f4:	3fc90fda 	.word	0x3fc90fda
 80100f8:	b3a22168 	.word	0xb3a22168
 80100fc:	40490fda 	.word	0x40490fda
 8010100:	3fc90fdb 	.word	0x3fc90fdb

08010104 <__ieee754_sqrtf>:
 8010104:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010108:	4770      	bx	lr

0801010a <fabsf>:
 801010a:	ee10 3a10 	vmov	r3, s0
 801010e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010112:	ee00 3a10 	vmov	s0, r3
 8010116:	4770      	bx	lr

08010118 <_init>:
 8010118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801011a:	bf00      	nop
 801011c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801011e:	bc08      	pop	{r3}
 8010120:	469e      	mov	lr, r3
 8010122:	4770      	bx	lr

08010124 <_fini>:
 8010124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010126:	bf00      	nop
 8010128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801012a:	bc08      	pop	{r3}
 801012c:	469e      	mov	lr, r3
 801012e:	4770      	bx	lr
