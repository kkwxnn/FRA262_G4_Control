
FRA262_G4_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011268  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08011408  08011408  00021408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080118e4  080118e4  00030430  2**0
                  CONTENTS
  4 .ARM          00000008  080118e4  080118e4  000218e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080118ec  080118ec  00030430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080118ec  080118ec  000218ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080118f0  080118f0  000218f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000430  20000000  080118f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ce4  20000430  08011d24  00030430  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001114  08011d24  00031114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030430  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156c7  00000000  00000000  00030460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273b  00000000  00000000  00045b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00048268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  00049488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193bd  00000000  00000000  0004a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d6f  00000000  00000000  00063995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a06ba  00000000  00000000  00079704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119dbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006478  00000000  00000000  00119e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000430 	.word	0x20000430
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080113f0 	.word	0x080113f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000434 	.word	0x20000434
 80001dc:	080113f0 	.word	0x080113f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <modbus_1t5_Timeout+0x1c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	751a      	strb	r2, [r3, #20]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	2000044c 	.word	0x2000044c

08001028 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <modbus_3t5_Timeout+0x1c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	755a      	strb	r2, [r3, #21]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	2000044c 	.word	0x2000044c

08001048 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <modbus_UART_Recived+0x60>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001062:	1c59      	adds	r1, r3, #1
 8001064:	b289      	uxth	r1, r1
 8001066:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 800106a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800106e:	d210      	bcs.n	8001092 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68d8      	ldr	r0, [r3, #12]
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <modbus_UART_Recived+0x60>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001082:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001086:	4413      	add	r3, r2
 8001088:	3302      	adds	r3, #2
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	f00a fa28 	bl	800b4e2 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000044c 	.word	0x2000044c

080010ac <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80010b6:	4a24      	ldr	r2, [pc, #144]	; (8001148 <Modbus_init+0x9c>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <Modbus_init+0x9c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <Modbus_init+0x9c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	4a20      	ldr	r2, [pc, #128]	; (800114c <Modbus_init+0xa0>)
 80010cc:	2114      	movs	r1, #20
 80010ce:	4618      	mov	r0, r3
 80010d0:	f009 fb74 	bl	800a7bc <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <Modbus_init+0x9c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <Modbus_init+0xa4>)
 80010dc:	210e      	movs	r1, #14
 80010de:	4618      	mov	r0, r3
 80010e0:	f009 fb6c 	bl	800a7bc <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <Modbus_init+0x9c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <Modbus_init+0xa8>)
 80010ec:	2103      	movs	r1, #3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f00a f90a 	bl	800b308 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <Modbus_init+0x9c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d8      	ldr	r0, [r3, #12]
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <Modbus_init+0x9c>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <Modbus_init+0x9c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001106:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800110a:	4413      	add	r3, r2
 800110c:	3302      	adds	r3, #2
 800110e:	2201      	movs	r2, #1
 8001110:	4619      	mov	r1, r3
 8001112:	f00a f9e6 	bl	800b4e2 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <Modbus_init+0x9c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10c      	bne.n	8001140 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <Modbus_init+0x9c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	4618      	mov	r0, r3
 800112e:	f008 fbc9 	bl	80098c4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <Modbus_init+0x9c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f008 fe2e 	bl	8009d9c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000044c 	.word	0x2000044c
 800114c:	08001009 	.word	0x08001009
 8001150:	08001029 	.word	0x08001029
 8001154:	08001049 	.word	0x08001049

08001158 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001164:	23ff      	movs	r3, #255	; 0xff
 8001166:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800116c:	e013      	b.n	8001196 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	4053      	eors	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <CRC16+0x64>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4413      	add	r3, r2
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	4053      	eors	r3, r2
 800118a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <CRC16+0x68>)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001196:	883b      	ldrh	r3, [r7, #0]
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	803a      	strh	r2, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e6      	bne.n	800116e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000100 	.word	0x20000100
 80011c0:	20000000 	.word	0x20000000

080011c4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80011ca:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	7e1b      	ldrb	r3, [r3, #24]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d80a      	bhi.n	80011ec <Modbus_Protocal_Worker+0x28>
 80011d6:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <Modbus_Protocal_Worker+0x18>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	080011f7 	.word	0x080011f7
 80011e0:	08001397 	.word	0x08001397
 80011e4:	08001283 	.word	0x08001283
 80011e8:	080012a9 	.word	0x080012a9
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80011ec:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	761a      	strb	r2, [r3, #24]
		break;
 80011f4:	e0e8      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001202:	f000 f9d7 	bl	80015b4 <Modbus_Emission>
 8001206:	e01c      	b.n	8001242 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001208:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	7d9b      	ldrb	r3, [r3, #22]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d017      	beq.n	8001242 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800121a:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001222:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2203      	movs	r2, #3
 8001240:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b20      	cmp	r3, #32
 8001250:	f040 80b3 	bne.w	80013ba <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800125e:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001270:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001274:	4413      	add	r3, r2
 8001276:	3302      	adds	r3, #2
 8001278:	2201      	movs	r2, #1
 800127a:	4619      	mov	r1, r3
 800127c:	f00a f931 	bl	800b4e2 <HAL_UART_Receive_IT>
		}
		break;
 8001280:	e09b      	b.n	80013ba <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001282:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7d1b      	ldrb	r3, [r3, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8098 	beq.w	80013be <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001296:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	22fe      	movs	r2, #254	; 0xfe
 800129c:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2204      	movs	r2, #4
 80012a4:	761a      	strb	r2, [r3, #24]
		}
		break;
 80012a6:	e08a      	b.n	80013be <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	7d9b      	ldrb	r3, [r3, #22]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80012c6:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ce:	f113 0f02 	cmn.w	r3, #2
 80012d2:	d150      	bne.n	8001376 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80012d4:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f203 2272 	addw	r2, r3, #626	; 0x272
 80012e4:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80012ec:	3b02      	subs	r3, #2
 80012ee:	4619      	mov	r1, r3
 80012f0:	4610      	mov	r0, r2
 80012f2:	f7ff ff31 	bl	8001158 <CRC16>
 80012f6:	4603      	mov	r3, r0
 80012f8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012fa:	793a      	ldrb	r2, [r7, #4]
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001308:	3b02      	subs	r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001310:	429a      	cmp	r2, r3
 8001312:	d10c      	bne.n	800132e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001314:	797a      	ldrb	r2, [r7, #5]
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001322:	3b01      	subs	r3, #1
 8001324:	440b      	add	r3, r1
 8001326:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800132a:	429a      	cmp	r2, r3
 800132c:	d004      	beq.n	8001338 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	22ff      	movs	r2, #255	; 0xff
 8001334:	75da      	strb	r2, [r3, #23]
				break;
 8001336:	e047      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d113      	bne.n	8001372 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800135a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001364:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001366:	461a      	mov	r2, r3
 8001368:	f00b fa7e 	bl	800c868 <memcpy>

			//execute command
			Modbus_frame_response();
 800136c:	f000 f90a 	bl	8001584 <Modbus_frame_response>
 8001370:	e001      	b.n	8001376 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001372:	bf00      	nop
					}
		break;


	}
}
 8001374:	e028      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7d5b      	ldrb	r3, [r3, #21]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	4618      	mov	r0, r3
 8001390:	f00a f956 	bl	800b640 <HAL_UART_AbortReceive>
		break;
 8001394:	e015      	b.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d10f      	bne.n	80013c6 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	761a      	strb	r2, [r3, #24]
		break;
 80013b8:	e005      	b.n	80013c6 <Modbus_Protocal_Worker+0x202>
		break;
 80013ba:	bf00      	nop
 80013bc:	e004      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013be:	bf00      	nop
 80013c0:	e002      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c6:	bf00      	nop
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000044c 	.word	0x2000044c

080013d4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <modbusWrite1Register+0x80>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	7e9b      	ldrb	r3, [r3, #26]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <modbusWrite1Register+0x80>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	7edb      	ldrb	r3, [r3, #27]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <modbusWrite1Register+0x80>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d903      	bls.n	8001406 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013fe:	2002      	movs	r0, #2
 8001400:	f000 f8a4 	bl	800154c <ModbusErrorReply>
			 return;
 8001404:	e023      	b.n	800144e <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <modbusWrite1Register+0x80>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <modbusWrite1Register+0x80>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	7f12      	ldrb	r2, [r2, #28]
 8001418:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <modbusWrite1Register+0x80>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <modbusWrite1Register+0x80>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6859      	ldr	r1, [r3, #4]
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	440b      	add	r3, r1
 800142a:	7f52      	ldrb	r2, [r2, #29]
 800142c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <modbusWrite1Register+0x80>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <modbusWrite1Register+0x80>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 800143c:	2208      	movs	r2, #8
 800143e:	4619      	mov	r1, r3
 8001440:	f00b fa12 	bl	800c868 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <modbusWrite1Register+0x80>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2205      	movs	r2, #5
 800144a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000044c 	.word	0x2000044c

08001458 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <modbusRead1Register+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	7f1b      	ldrb	r3, [r3, #28]
 8001464:	b29b      	uxth	r3, r3
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <modbusRead1Register+0xf0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	7f5b      	ldrb	r3, [r3, #29]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4413      	add	r3, r2
 8001474:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <modbusRead1Register+0xf0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7e9b      	ldrb	r3, [r3, #26]
 800147c:	b29b      	uxth	r3, r3
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <modbusRead1Register+0xf0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	7edb      	ldrb	r3, [r3, #27]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <modbusRead1Register+0x42>
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	2b7d      	cmp	r3, #125	; 0x7d
 8001498:	d903      	bls.n	80014a2 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f856 	bl	800154c <ModbusErrorReply>
		 return;
 80014a0:	e04e      	b.n	8001540 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80014a2:	88ba      	ldrh	r2, [r7, #4]
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <modbusRead1Register+0xf0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d808      	bhi.n	80014c0 <modbusRead1Register+0x68>
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4413      	add	r3, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <modbusRead1Register+0xf0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d903      	bls.n	80014c8 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f000 f843 	bl	800154c <ModbusErrorReply>
		 return;
 80014c6:	e03b      	b.n	8001540 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <modbusRead1Register+0xf0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <modbusRead1Register+0xf0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	0052      	lsls	r2, r2, #1
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80014e2:	2400      	movs	r4, #0
 80014e4:	e020      	b.n	8001528 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <modbusRead1Register+0xf0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	88bb      	ldrh	r3, [r7, #4]
 80014ee:	4423      	add	r3, r4
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	18d1      	adds	r1, r2, r3
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <modbusRead1Register+0xf0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	1c63      	adds	r3, r4, #1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	7849      	ldrb	r1, [r1, #1]
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <modbusRead1Register+0xf0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	4423      	add	r3, r4
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <modbusRead1Register+0xf0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	0063      	lsls	r3, r4, #1
 800151a:	3303      	adds	r3, #3
 800151c:	7809      	ldrb	r1, [r1, #0]
 800151e:	4413      	add	r3, r2
 8001520:	460a      	mov	r2, r1
 8001522:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001526:	3401      	adds	r4, #1
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	429c      	cmp	r4, r3
 800152c:	dbdb      	blt.n	80014e6 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <modbusRead1Register+0xf0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	2000044c 	.word	0x2000044c

0800154c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register | 0x80;
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <ModbusErrorReply+0x34>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2283      	movs	r2, #131	; 0x83
 800155c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <ModbusErrorReply+0x34>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	79fa      	ldrb	r2, [r7, #7]
 8001566:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <ModbusErrorReply+0x34>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	2000044c 	.word	0x2000044c

08001584 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <Modbus_frame_response+0x2c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	7e5b      	ldrb	r3, [r3, #25]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d004      	beq.n	800159c <Modbus_frame_response+0x18>
 8001592:	2b06      	cmp	r3, #6
 8001594:	d105      	bne.n	80015a2 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001596:	f7ff ff1d 	bl	80013d4 <modbusWrite1Register>
		break;
 800159a:	e006      	b.n	80015aa <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800159c:	f7ff ff5c 	bl	8001458 <modbusRead1Register>
		break;
 80015a0:	e003      	b.n	80015aa <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff ffd2 	bl	800154c <ModbusErrorReply>
		break;
 80015a8:	bf00      	nop

	}
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000044c 	.word	0x2000044c

080015b4 <Modbus_Emission>:

void Modbus_Emission()
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <Modbus_Emission+0xfc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b20      	cmp	r3, #32
 80015c8:	d15e      	bne.n	8001688 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80015ca:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <Modbus_Emission+0xfc>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <Modbus_Emission+0xfc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <Modbus_Emission+0xfc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80015e0:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80015e2:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <Modbus_Emission+0xfc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <Modbus_Emission+0xfc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 80015f2:	461a      	mov	r2, r3
 80015f4:	f00b f938 	bl	800c868 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80015f8:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <Modbus_Emission+0xfc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <Modbus_Emission+0xfc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3203      	adds	r2, #3
 8001608:	b292      	uxth	r2, r2
 800160a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <Modbus_Emission+0xfc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <Modbus_Emission+0xfc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800161e:	3b02      	subs	r3, #2
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f7ff fd98 	bl	8001158 <CRC16>
 8001628:	4603      	mov	r3, r0
 800162a:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <Modbus_Emission+0xfc>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <Modbus_Emission+0xfc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001638:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800163a:	7939      	ldrb	r1, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	460a      	mov	r2, r1
 8001640:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <Modbus_Emission+0xfc>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <Modbus_Emission+0xfc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001650:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001652:	7979      	ldrb	r1, [r7, #5]
 8001654:	4413      	add	r3, r2
 8001656:	460a      	mov	r2, r1
 8001658:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <Modbus_Emission+0xfc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b20      	cmp	r3, #32
 800166a:	d10d      	bne.n	8001688 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <Modbus_Emission+0xfc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <Modbus_Emission+0xfc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <Modbus_Emission+0xfc>)
 800167c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800167e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001682:	461a      	mov	r2, r3
 8001684:	f009 ff5e 	bl	800b544 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <Modbus_Emission+0xfc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <Modbus_Emission+0xfc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <Modbus_Emission+0xfc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <Modbus_Emission+0xfc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2202      	movs	r2, #2
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000044c 	.word	0x2000044c
 80016b4:	00000000 	.word	0x00000000

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016bc:	b087      	sub	sp, #28
 80016be:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c0:	f003 fe4a 	bl	8005358 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c4:	f000 fc0c 	bl	8001ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c8:	f000 fefe 	bl	80024c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80016cc:	f000 fec6 	bl	800245c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016d0:	f000 fe98 	bl	8002404 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80016d4:	f000 fd8a 	bl	80021ec <MX_TIM3_Init>
  MX_TIM1_Init();
 80016d8:	f000 fcf8 	bl	80020cc <MX_TIM1_Init>
  MX_ADC1_Init();
 80016dc:	f000 fc68 	bl	8001fb0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80016e0:	f000 fe66 	bl	80023b0 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 80016e4:	f000 fe10 	bl	8002308 <MX_TIM11_Init>
  MX_TIM9_Init();
 80016e8:	f000 fdd4 	bl	8002294 <MX_TIM9_Init>
  MX_I2C1_Init();
 80016ec:	f000 fcc0 	bl	8002070 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  hmodbus.huart = &huart2;
 80016f0:	4ba1      	ldr	r3, [pc, #644]	; (8001978 <main+0x2c0>)
 80016f2:	4aa2      	ldr	r2, [pc, #648]	; (800197c <main+0x2c4>)
 80016f4:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 80016f6:	4ba0      	ldr	r3, [pc, #640]	; (8001978 <main+0x2c0>)
 80016f8:	4aa1      	ldr	r2, [pc, #644]	; (8001980 <main+0x2c8>)
 80016fa:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80016fc:	4b9e      	ldr	r3, [pc, #632]	; (8001978 <main+0x2c0>)
 80016fe:	2215      	movs	r2, #21
 8001700:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 70;
 8001702:	4b9d      	ldr	r3, [pc, #628]	; (8001978 <main+0x2c0>)
 8001704:	2246      	movs	r2, #70	; 0x46
 8001706:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001708:	499e      	ldr	r1, [pc, #632]	; (8001984 <main+0x2cc>)
 800170a:	489b      	ldr	r0, [pc, #620]	; (8001978 <main+0x2c0>)
 800170c:	f7ff fcce 	bl	80010ac <Modbus_init>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8001710:	2104      	movs	r1, #4
 8001712:	489d      	ldr	r0, [pc, #628]	; (8001988 <main+0x2d0>)
 8001714:	f008 fc5c 	bl	8009fd0 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Start Timer1
 8001718:	489c      	ldr	r0, [pc, #624]	; (800198c <main+0x2d4>)
 800171a:	f008 f879 	bl	8009810 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800171e:	2100      	movs	r1, #0
 8001720:	489a      	ldr	r0, [pc, #616]	; (800198c <main+0x2d4>)
 8001722:	f008 fa23 	bl	8009b6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001726:	2104      	movs	r1, #4
 8001728:	4898      	ldr	r0, [pc, #608]	; (800198c <main+0x2d4>)
 800172a:	f008 fa1f 	bl	8009b6c <HAL_TIM_PWM_Start>

//  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
//  HAL_TIM_Base_Start_IT(&htim4); //Start IT Timer4

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, L_EN);
 800172e:	4b98      	ldr	r3, [pc, #608]	; (8001990 <main+0x2d8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800173a:	4896      	ldr	r0, [pc, #600]	; (8001994 <main+0x2dc>)
 800173c:	f005 f96e 	bl	8006a1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, R_EN);
 8001740:	4b95      	ldr	r3, [pc, #596]	; (8001998 <main+0x2e0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	2110      	movs	r1, #16
 800174a:	4892      	ldr	r0, [pc, #584]	; (8001994 <main+0x2dc>)
 800174c:	f005 f966 	bl	8006a1c <HAL_GPIO_WritePin>

  HAL_ADC_Start_DMA(&hadc1, XYSwitch, 2);
 8001750:	2202      	movs	r2, #2
 8001752:	4992      	ldr	r1, [pc, #584]	; (800199c <main+0x2e4>)
 8001754:	4892      	ldr	r0, [pc, #584]	; (80019a0 <main+0x2e8>)
 8001756:	f003 fed9 	bl	800550c <HAL_ADC_Start_DMA>

  registerFrame[1].U16 = 0;
 800175a:	4b8a      	ldr	r3, [pc, #552]	; (8001984 <main+0x2cc>)
 800175c:	2200      	movs	r2, #0
 800175e:	805a      	strh	r2, [r3, #2]
  EndEffectorState = 0;	//SoftReset
 8001760:	4b90      	ldr	r3, [pc, #576]	; (80019a4 <main+0x2ec>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
  EndEffectorWriteFlag = 1;
 8001766:	4b90      	ldr	r3, [pc, #576]	; (80019a8 <main+0x2f0>)
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
  EndEffectorWrite();
 800176c:	f001 f804 	bl	8002778 <EndEffectorWrite>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Protocal_Worker();
 8001770:	f7ff fd28 	bl	80011c4 <Modbus_Protocal_Worker>
	  static uint32_t heartbeat = 0;
	  static uint32_t uart_time = 0;
	  if(heartbeat < HAL_GetTick())
 8001774:	f003 fe56 	bl	8005424 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	4b8c      	ldr	r3, [pc, #560]	; (80019ac <main+0x2f4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d909      	bls.n	8001796 <main+0xde>
	  {
		  heartbeat = HAL_GetTick()+200;
 8001782:	f003 fe4f 	bl	8005424 <HAL_GetTick>
 8001786:	4603      	mov	r3, r0
 8001788:	33c8      	adds	r3, #200	; 0xc8
 800178a:	4a88      	ldr	r2, [pc, #544]	; (80019ac <main+0x2f4>)
 800178c:	6013      	str	r3, [r2, #0]
		  registerFrame[0].U16 = 22881;
 800178e:	4b7d      	ldr	r3, [pc, #500]	; (8001984 <main+0x2cc>)
 8001790:	f645 1261 	movw	r2, #22881	; 0x5961
 8001794:	801a      	strh	r2, [r3, #0]
	  }

	  if (huart1.gState == HAL_UART_STATE_READY && (HAL_GetTick() >= uart_time))
 8001796:	4b86      	ldr	r3, [pc, #536]	; (80019b0 <main+0x2f8>)
 8001798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b20      	cmp	r3, #32
 80017a0:	d139      	bne.n	8001816 <main+0x15e>
 80017a2:	f003 fe3f 	bl	8005424 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	4b82      	ldr	r3, [pc, #520]	; (80019b4 <main+0x2fc>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d332      	bcc.n	8001816 <main+0x15e>
	  {
		  sprintf(TxBuffer,"%d %.2f %.2f %.2f\r\n",position, setposition, setvelocity, Accel);
 80017b0:	4b81      	ldr	r3, [pc, #516]	; (80019b8 <main+0x300>)
 80017b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b6:	461e      	mov	r6, r3
 80017b8:	4b80      	ldr	r3, [pc, #512]	; (80019bc <main+0x304>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fecb 	bl	8000558 <__aeabi_f2d>
 80017c2:	4604      	mov	r4, r0
 80017c4:	460d      	mov	r5, r1
 80017c6:	4b7e      	ldr	r3, [pc, #504]	; (80019c0 <main+0x308>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fec4 	bl	8000558 <__aeabi_f2d>
 80017d0:	4680      	mov	r8, r0
 80017d2:	4689      	mov	r9, r1
 80017d4:	4b7b      	ldr	r3, [pc, #492]	; (80019c4 <main+0x30c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe febd 	bl	8000558 <__aeabi_f2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80017e6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017ea:	e9cd 4500 	strd	r4, r5, [sp]
 80017ee:	4632      	mov	r2, r6
 80017f0:	4975      	ldr	r1, [pc, #468]	; (80019c8 <main+0x310>)
 80017f2:	4876      	ldr	r0, [pc, #472]	; (80019cc <main+0x314>)
 80017f4:	f00b fece 	bl	800d594 <siprintf>
		  HAL_UART_Transmit_IT(&huart1, (uint8_t *)TxBuffer, strlen(TxBuffer));
 80017f8:	4874      	ldr	r0, [pc, #464]	; (80019cc <main+0x314>)
 80017fa:	f7fe fcf1 	bl	80001e0 <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29b      	uxth	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	4971      	ldr	r1, [pc, #452]	; (80019cc <main+0x314>)
 8001806:	486a      	ldr	r0, [pc, #424]	; (80019b0 <main+0x2f8>)
 8001808:	f009 fe26 	bl	800b458 <HAL_UART_Transmit_IT>
		  uart_time += 20;
 800180c:	4b69      	ldr	r3, [pc, #420]	; (80019b4 <main+0x2fc>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	3314      	adds	r3, #20
 8001812:	4a68      	ldr	r2, [pc, #416]	; (80019b4 <main+0x2fc>)
 8001814:	6013      	str	r3, [r2, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  VelocityApprox();
 8001816:	f001 f91f 	bl	8002a58 <VelocityApprox>
	  AccelerationApprox();
 800181a:	f001 f94d 	bl	8002ab8 <AccelerationApprox>
	  Routine(); //Sent Y Actual Position Velocity Acceleration to Base System
 800181e:	f001 f97b 	bl	8002b18 <Routine>

	  JoystickPinUpdate(); //Check Pin Flag
 8001822:	f001 fa6b 	bl	8002cfc <JoystickPinUpdate>

	  switch(scheduler)
 8001826:	4b6a      	ldr	r3, [pc, #424]	; (80019d0 <main+0x318>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b07      	cmp	r3, #7
 800182c:	d8a0      	bhi.n	8001770 <main+0xb8>
 800182e:	a201      	add	r2, pc, #4	; (adr r2, 8001834 <main+0x17c>)
 8001830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001834:	08001855 	.word	0x08001855
 8001838:	08001a0d 	.word	0x08001a0d
 800183c:	08001aa9 	.word	0x08001aa9
 8001840:	08001b45 	.word	0x08001b45
 8001844:	08001cfd 	.word	0x08001cfd
 8001848:	08001d45 	.word	0x08001d45
 800184c:	08001d4b 	.word	0x08001d4b
 8001850:	08001da7 	.word	0x08001da7
	  {
	  //JoyStick
	  case 0:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001854:	4b4c      	ldr	r3, [pc, #304]	; (8001988 <main+0x2d0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	b21a      	sxth	r2, r3
 800185c:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <main+0x300>)
 800185e:	801a      	strh	r2, [r3, #0]
		  JoystickControl(); //Read Pin form JoyStick
 8001860:	f001 fb4e 	bl	8002f00 <JoystickControl>
		  JoystickLocationState();
 8001864:	f001 fc1c 	bl	80030a0 <JoystickLocationState>

		  ////////////////////////////////////////////////////////////
		  if(LaserUI.flag == 1)
 8001868:	4b5a      	ldr	r3, [pc, #360]	; (80019d4 <main+0x31c>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d107      	bne.n	8001880 <main+0x1c8>
		  {
			  EndEffectorState = 1;	//TestModeOn
 8001870:	4b4c      	ldr	r3, [pc, #304]	; (80019a4 <main+0x2ec>)
 8001872:	2201      	movs	r2, #1
 8001874:	601a      	str	r2, [r3, #0]
			  EndEffectorWriteFlag = 1;
 8001876:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <main+0x2f0>)
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
			  EndEffectorWrite();
 800187c:	f000 ff7c 	bl	8002778 <EndEffectorWrite>
		  }
		  if(LaserUI.flag == 2)
 8001880:	4b54      	ldr	r3, [pc, #336]	; (80019d4 <main+0x31c>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d107      	bne.n	8001898 <main+0x1e0>
		  {
			  EndEffectorState = 2;	//TestModeOff
 8001888:	4b46      	ldr	r3, [pc, #280]	; (80019a4 <main+0x2ec>)
 800188a:	2202      	movs	r2, #2
 800188c:	601a      	str	r2, [r3, #0]
			  EndEffectorWriteFlag = 1;
 800188e:	4b46      	ldr	r3, [pc, #280]	; (80019a8 <main+0x2f0>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
			  EndEffectorWrite();
 8001894:	f000 ff70 	bl	8002778 <EndEffectorWrite>
		  }
		  ///////////////////////////////////////////////////////////
		  //write//
		  if(GripperUI.flag == 1)
 8001898:	4b4f      	ldr	r3, [pc, #316]	; (80019d8 <main+0x320>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d107      	bne.n	80018b0 <main+0x1f8>
		  {
			  EndEffectorState = 3;	//Gripper Power On
 80018a0:	4b40      	ldr	r3, [pc, #256]	; (80019a4 <main+0x2ec>)
 80018a2:	2203      	movs	r2, #3
 80018a4:	601a      	str	r2, [r3, #0]
			  EndEffectorWriteFlag = 1;
 80018a6:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <main+0x2f0>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
			  EndEffectorWrite();
 80018ac:	f000 ff64 	bl	8002778 <EndEffectorWrite>
		  }
		  if(GripperUI.flag == 2)
 80018b0:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <main+0x320>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d107      	bne.n	80018c8 <main+0x210>
		  {
			  EndEffectorState = 6;	//Gripper Power Off
 80018b8:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <main+0x2ec>)
 80018ba:	2206      	movs	r2, #6
 80018bc:	601a      	str	r2, [r3, #0]
			  EndEffectorWriteFlag = 1;
 80018be:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <main+0x2f0>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	701a      	strb	r2, [r3, #0]
			  EndEffectorWrite();
 80018c4:	f000 ff58 	bl	8002778 <EndEffectorWrite>
		  }
		  if(GripperUI.flag == 3)
 80018c8:	4b43      	ldr	r3, [pc, #268]	; (80019d8 <main+0x320>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d10a      	bne.n	80018e6 <main+0x22e>
		  {
			  EndEffectorState = 4;	//Gripper Pick
 80018d0:	4b34      	ldr	r3, [pc, #208]	; (80019a4 <main+0x2ec>)
 80018d2:	2204      	movs	r2, #4
 80018d4:	601a      	str	r2, [r3, #0]
			  EndEffectorWriteFlag = 1;
 80018d6:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <main+0x2f0>)
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
			  EndEffectorWrite();
 80018dc:	f000 ff4c 	bl	8002778 <EndEffectorWrite>
			  EndEffectorReadFlag = 1;
 80018e0:	4b3e      	ldr	r3, [pc, #248]	; (80019dc <main+0x324>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
		  }
		  if(GripperUI.flag == 4)
 80018e6:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <main+0x320>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d10a      	bne.n	8001904 <main+0x24c>
		  {
			  EndEffectorState = 5;	//Gripper Place
 80018ee:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <main+0x2ec>)
 80018f0:	2205      	movs	r2, #5
 80018f2:	601a      	str	r2, [r3, #0]
			  EndEffectorWriteFlag = 1;
 80018f4:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <main+0x2f0>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
			  EndEffectorWrite();
 80018fa:	f000 ff3d 	bl	8002778 <EndEffectorWrite>
			  EndEffectorReadFlag = 1;
 80018fe:	4b37      	ldr	r3, [pc, #220]	; (80019dc <main+0x324>)
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
		  }
		  static uint32_t Readbeat = 0;
		  if(Readbeat < HAL_GetTick())
 8001904:	f003 fd8e 	bl	8005424 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	4b35      	ldr	r3, [pc, #212]	; (80019e0 <main+0x328>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d92a      	bls.n	8001968 <main+0x2b0>
		  {
			  Readbeat = HAL_GetTick()+100 ;
 8001912:	f003 fd87 	bl	8005424 <HAL_GetTick>
 8001916:	4603      	mov	r3, r0
 8001918:	3364      	adds	r3, #100	; 0x64
 800191a:	4a31      	ldr	r2, [pc, #196]	; (80019e0 <main+0x328>)
 800191c:	6013      	str	r3, [r2, #0]
			  //Read//
			  if(EndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY)
 800191e:	4b2f      	ldr	r3, [pc, #188]	; (80019dc <main+0x324>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d120      	bne.n	8001968 <main+0x2b0>
 8001926:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <main+0x32c>)
 8001928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b20      	cmp	r3, #32
 8001930:	d11a      	bne.n	8001968 <main+0x2b0>
			  {
				  HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
 8001932:	2301      	movs	r3, #1
 8001934:	4a2c      	ldr	r2, [pc, #176]	; (80019e8 <main+0x330>)
 8001936:	212a      	movs	r1, #42	; 0x2a
 8001938:	482a      	ldr	r0, [pc, #168]	; (80019e4 <main+0x32c>)
 800193a:	f005 fae3 	bl	8006f04 <HAL_I2C_Master_Receive_IT>
				  if(EndEffectorDataReadBack[0] == 0x07) // Picked
 800193e:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <main+0x330>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b07      	cmp	r3, #7
 8001944:	d106      	bne.n	8001954 <main+0x29c>
				  {
					  registerFrame[2].U16 = 2;
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <main+0x2cc>)
 8001948:	2202      	movs	r2, #2
 800194a:	809a      	strh	r2, [r3, #4]
					  EndEffectorReadFlag = 0;
 800194c:	4b23      	ldr	r3, [pc, #140]	; (80019dc <main+0x324>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	e009      	b.n	8001968 <main+0x2b0>
				  }
				  else if(EndEffectorDataReadBack[0] == 0x04) // Placed
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <main+0x330>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b04      	cmp	r3, #4
 800195a:	d105      	bne.n	8001968 <main+0x2b0>
				  {
					  registerFrame[2].U16 = 2;
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <main+0x2cc>)
 800195e:	2202      	movs	r2, #2
 8001960:	809a      	strh	r2, [r3, #4]
					  EndEffectorReadFlag = 0;
 8001962:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <main+0x324>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }

		  if(registerFrame[1].U16 == 16) //Run Point Mode
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <main+0x2cc>)
 800196a:	885b      	ldrh	r3, [r3, #2]
 800196c:	2b10      	cmp	r3, #16
 800196e:	d13d      	bne.n	80019ec <main+0x334>
		  {
			  scheduler = 7;
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <main+0x318>)
 8001972:	2207      	movs	r2, #7
 8001974:	601a      	str	r2, [r3, #0]
		  {
			  registerFrame[64].U16 = 1;
			  Proximity = 3;
			  scheduler = 5;
		  }
		  break;
 8001976:	e284      	b.n	8001e82 <main+0x7ca>
 8001978:	20000b20 	.word	0x20000b20
 800197c:	20000890 	.word	0x20000890
 8001980:	20000768 	.word	0x20000768
 8001984:	20000ff8 	.word	0x20000ff8
 8001988:	20000600 	.word	0x20000600
 800198c:	2000054c 	.word	0x2000054c
 8001990:	2000020c 	.word	0x2000020c
 8001994:	40020400 	.word	0x40020400
 8001998:	20000208 	.word	0x20000208
 800199c:	20000b04 	.word	0x20000b04
 80019a0:	20000450 	.word	0x20000450
 80019a4:	20000b18 	.word	0x20000b18
 80019a8:	20000b10 	.word	0x20000b10
 80019ac:	200010dc 	.word	0x200010dc
 80019b0:	2000081c 	.word	0x2000081c
 80019b4:	200010e0 	.word	0x200010e0
 80019b8:	200009ac 	.word	0x200009ac
 80019bc:	200009b8 	.word	0x200009b8
 80019c0:	200009d8 	.word	0x200009d8
 80019c4:	200009d4 	.word	0x200009d4
 80019c8:	08011408 	.word	0x08011408
 80019cc:	20001084 	.word	0x20001084
 80019d0:	20000200 	.word	0x20000200
 80019d4:	20000aec 	.word	0x20000aec
 80019d8:	20000af8 	.word	0x20000af8
 80019dc:	20000b11 	.word	0x20000b11
 80019e0:	200010e4 	.word	0x200010e4
 80019e4:	200004f8 	.word	0x200004f8
 80019e8:	20000b14 	.word	0x20000b14
		  else if(registerFrame[1].U16 == 4) //Home
 80019ec:	4bb0      	ldr	r3, [pc, #704]	; (8001cb0 <main+0x5f8>)
 80019ee:	885b      	ldrh	r3, [r3, #2]
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	f040 8246 	bne.w	8001e82 <main+0x7ca>
			  registerFrame[64].U16 = 1;
 80019f6:	4bae      	ldr	r3, [pc, #696]	; (8001cb0 <main+0x5f8>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			  Proximity = 3;
 80019fe:	4bad      	ldr	r3, [pc, #692]	; (8001cb4 <main+0x5fc>)
 8001a00:	2203      	movs	r2, #3
 8001a02:	601a      	str	r2, [r3, #0]
			  scheduler = 5;
 8001a04:	4bac      	ldr	r3, [pc, #688]	; (8001cb8 <main+0x600>)
 8001a06:	2205      	movs	r2, #5
 8001a08:	601a      	str	r2, [r3, #0]
		  break;
 8001a0a:	e23a      	b.n	8001e82 <main+0x7ca>

	  //Go Pick
	  case 1 :
		  registerFrame[16].U16 = 8; //Y Moving Status: Go Pick
 8001a0c:	4ba8      	ldr	r3, [pc, #672]	; (8001cb0 <main+0x5f8>)
 8001a0e:	2208      	movs	r2, #8
 8001a10:	841a      	strh	r2, [r3, #32]
		  qf = (PickTray.hole_y[HoleSequence])/0.045;
 8001a12:	4baa      	ldr	r3, [pc, #680]	; (8001cbc <main+0x604>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4aaa      	ldr	r2, [pc, #680]	; (8001cc0 <main+0x608>)
 8001a18:	330c      	adds	r3, #12
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3304      	adds	r3, #4
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fd98 	bl	8000558 <__aeabi_f2d>
 8001a28:	a39f      	add	r3, pc, #636	; (adr r3, 8001ca8 <main+0x5f0>)
 8001a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2e:	f7fe ff15 	bl	800085c <__aeabi_ddiv>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f7ff f8dd 	bl	8000bf8 <__aeabi_d2f>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4aa0      	ldr	r2, [pc, #640]	; (8001cc4 <main+0x60c>)
 8001a42:	6013      	str	r3, [r2, #0]
		  PickTray.hole_x_16 = PickTray.hole_x[HoleSequence]*10;
 8001a44:	4b9d      	ldr	r3, [pc, #628]	; (8001cbc <main+0x604>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a9d      	ldr	r2, [pc, #628]	; (8001cc0 <main+0x608>)
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a60:	ee17 3a90 	vmov	r3, s15
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	4b96      	ldr	r3, [pc, #600]	; (8001cc0 <main+0x608>)
 8001a68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		  registerFrame[65].U16 = PickTray.hole_x_16;
 8001a6c:	4b94      	ldr	r3, [pc, #592]	; (8001cc0 <main+0x608>)
 8001a6e:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	4b8e      	ldr	r3, [pc, #568]	; (8001cb0 <main+0x5f8>)
 8001a76:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
//		  }
//		  else
//		  {
//			  registerFrame[65].U16 = PickTray.hole_x[HoleSequence]*10; //X-Axis Target Position Pick Tray (Positive)
//		  }
		  registerFrame[66].U16 = 3000;
 8001a7a:	4b8d      	ldr	r3, [pc, #564]	; (8001cb0 <main+0x5f8>)
 8001a7c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a80:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 1;
 8001a84:	4b8a      	ldr	r3, [pc, #552]	; (8001cb0 <main+0x5f8>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  registerFrame[64].U16 = 2; //X Moving Status: Run
 8001a8c:	4b88      	ldr	r3, [pc, #544]	; (8001cb0 <main+0x5f8>)
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  Trajectstate = 0;
 8001a94:	4b8c      	ldr	r3, [pc, #560]	; (8001cc8 <main+0x610>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001a9a:	488c      	ldr	r0, [pc, #560]	; (8001ccc <main+0x614>)
 8001a9c:	f007 ff12 	bl	80098c4 <HAL_TIM_Base_Start_IT>
		  scheduler = 3;
 8001aa0:	4b85      	ldr	r3, [pc, #532]	; (8001cb8 <main+0x600>)
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	601a      	str	r2, [r3, #0]
		  break;
 8001aa6:	e1f1      	b.n	8001e8c <main+0x7d4>

	  //Go Place
	  case 2 :
		  registerFrame[16].U16 = 16; //Y Moving Status: Go Place
 8001aa8:	4b81      	ldr	r3, [pc, #516]	; (8001cb0 <main+0x5f8>)
 8001aaa:	2210      	movs	r2, #16
 8001aac:	841a      	strh	r2, [r3, #32]
		  qf = (PlaceTray.hole_y[HoleSequence])/0.045;
 8001aae:	4b83      	ldr	r3, [pc, #524]	; (8001cbc <main+0x604>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a87      	ldr	r2, [pc, #540]	; (8001cd0 <main+0x618>)
 8001ab4:	330c      	adds	r3, #12
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	3304      	adds	r3, #4
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fd4a 	bl	8000558 <__aeabi_f2d>
 8001ac4:	a378      	add	r3, pc, #480	; (adr r3, 8001ca8 <main+0x5f0>)
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	f7fe fec7 	bl	800085c <__aeabi_ddiv>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7ff f88f 	bl	8000bf8 <__aeabi_d2f>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4a79      	ldr	r2, [pc, #484]	; (8001cc4 <main+0x60c>)
 8001ade:	6013      	str	r3, [r2, #0]
		  PlaceTray.hole_x_16 = PlaceTray.hole_x[HoleSequence]*10;
 8001ae0:	4b76      	ldr	r3, [pc, #472]	; (8001cbc <main+0x604>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a7a      	ldr	r2, [pc, #488]	; (8001cd0 <main+0x618>)
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001af4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001afc:	ee17 3a90 	vmov	r3, s15
 8001b00:	b21a      	sxth	r2, r3
 8001b02:	4b73      	ldr	r3, [pc, #460]	; (8001cd0 <main+0x618>)
 8001b04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		  registerFrame[65].U16 = PlaceTray.hole_x_16;
 8001b08:	4b71      	ldr	r3, [pc, #452]	; (8001cd0 <main+0x618>)
 8001b0a:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	4b67      	ldr	r3, [pc, #412]	; (8001cb0 <main+0x5f8>)
 8001b12:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
//		  }
//		  else
//		  {
//			  registerFrame[65].U16 = PlaceTray.hole_x[HoleSequence]*10; //X-Axis Target Position Place Tray (Positive)
//		  }
		  registerFrame[66].U16 = 3000;
 8001b16:	4b66      	ldr	r3, [pc, #408]	; (8001cb0 <main+0x5f8>)
 8001b18:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b1c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 1;
 8001b20:	4b63      	ldr	r3, [pc, #396]	; (8001cb0 <main+0x5f8>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  registerFrame[64].U16 = 2; //X Moving Status: Run
 8001b28:	4b61      	ldr	r3, [pc, #388]	; (8001cb0 <main+0x5f8>)
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  Trajectstate = 0;
 8001b30:	4b65      	ldr	r3, [pc, #404]	; (8001cc8 <main+0x610>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001b36:	4865      	ldr	r0, [pc, #404]	; (8001ccc <main+0x614>)
 8001b38:	f007 fec4 	bl	80098c4 <HAL_TIM_Base_Start_IT>
		  scheduler = 3;
 8001b3c:	4b5e      	ldr	r3, [pc, #376]	; (8001cb8 <main+0x600>)
 8001b3e:	2203      	movs	r2, #3
 8001b40:	601a      	str	r2, [r3, #0]
		  break;
 8001b42:	e1a3      	b.n	8001e8c <main+0x7d4>

	  //Trajectory
	  case 3:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001b44:	4b63      	ldr	r3, [pc, #396]	; (8001cd4 <main+0x61c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	4b62      	ldr	r3, [pc, #392]	; (8001cd8 <main+0x620>)
 8001b4e:	801a      	strh	r2, [r3, #0]
		  static uint32_t timestamp0 = 0;
		  if(HAL_GetTick() > timestamp0)
 8001b50:	f003 fc68 	bl	8005424 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <main+0x624>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d909      	bls.n	8001b72 <main+0x4ba>
		  {
			  timestamp0 = HAL_GetTick() + 1;
 8001b5e:	f003 fc61 	bl	8005424 <HAL_GetTick>
 8001b62:	4603      	mov	r3, r0
 8001b64:	3301      	adds	r3, #1
 8001b66:	4a5d      	ldr	r2, [pc, #372]	; (8001cdc <main+0x624>)
 8001b68:	6013      	str	r3, [r2, #0]
			  VelocityApprox();
 8001b6a:	f000 ff75 	bl	8002a58 <VelocityApprox>
			  AccelerationApprox();
 8001b6e:	f000 ffa3 	bl	8002ab8 <AccelerationApprox>
		  }

		  //PWM & Motor drive & PID
		  static uint32_t timestamp2 = 0;
		  if (HAL_GetTick()>= timestamp2)
 8001b72:	f003 fc57 	bl	8005424 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	4b59      	ldr	r3, [pc, #356]	; (8001ce0 <main+0x628>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d33b      	bcc.n	8001bf8 <main+0x540>
		  {
			  timestamp2 = HAL_GetTick() + 1;
 8001b80:	f003 fc50 	bl	8005424 <HAL_GetTick>
 8001b84:	4603      	mov	r3, r0
 8001b86:	3301      	adds	r3, #1
 8001b88:	4a55      	ldr	r2, [pc, #340]	; (8001ce0 <main+0x628>)
 8001b8a:	6013      	str	r3, [r2, #0]
			  duty = PIDcal();
 8001b8c:	f001 f824 	bl	8002bd8 <PIDcal>
 8001b90:	eef0 7a40 	vmov.f32	s15, s0
 8001b94:	4b53      	ldr	r3, [pc, #332]	; (8001ce4 <main+0x62c>)
 8001b96:	edc3 7a00 	vstr	s15, [r3]
			  if (duty >= 0)
 8001b9a:	4b52      	ldr	r3, [pc, #328]	; (8001ce4 <main+0x62c>)
 8001b9c:	edd3 7a00 	vldr	s15, [r3]
 8001ba0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba8:	db0e      	blt.n	8001bc8 <main+0x510>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001baa:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <main+0x630>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 8001bb2:	4b4c      	ldr	r3, [pc, #304]	; (8001ce4 <main+0x62c>)
 8001bb4:	edd3 7a00 	vldr	s15, [r3]
 8001bb8:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <main+0x630>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bc0:	ee17 2a90 	vmov	r2, s15
 8001bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc6:	e017      	b.n	8001bf8 <main+0x540>
			  }
			  else if (duty < 0)
 8001bc8:	4b46      	ldr	r3, [pc, #280]	; (8001ce4 <main+0x62c>)
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd6:	d50f      	bpl.n	8001bf8 <main+0x540>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001bd8:	4b43      	ldr	r3, [pc, #268]	; (8001ce8 <main+0x630>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
 8001be0:	4b40      	ldr	r3, [pc, #256]	; (8001ce4 <main+0x62c>)
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	eef1 7a67 	vneg.f32	s15, s15
 8001bea:	4b3f      	ldr	r3, [pc, #252]	; (8001ce8 <main+0x630>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bf2:	ee17 2a90 	vmov	r2, s15
 8001bf6:	639a      	str	r2, [r3, #56]	; 0x38
//		  if(position > Overshootposition){
//			  Overshootposition = position;
//			  PercentOS = ((Overshootposition-qf)/(qf-qi))*100;
//		  }
		  // Check Final Position
		  if(position >= qf - 4 && position <= qf + 4 && registerFrame[64].U16 == 0) //&& registerFrame[64].U16 == 0
 8001bf8:	4b37      	ldr	r3, [pc, #220]	; (8001cd8 <main+0x620>)
 8001bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfe:	ee07 3a90 	vmov	s15, r3
 8001c02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c06:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <main+0x60c>)
 8001c08:	edd3 7a00 	vldr	s15, [r3]
 8001c0c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001c10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001c14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1c:	db36      	blt.n	8001c8c <main+0x5d4>
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <main+0x620>)
 8001c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c24:	ee07 3a90 	vmov	s15, r3
 8001c28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <main+0x60c>)
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c42:	d823      	bhi.n	8001c8c <main+0x5d4>
 8001c44:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <main+0x5f8>)
 8001c46:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d11e      	bne.n	8001c8c <main+0x5d4>
		  {
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001c4e:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <main+0x630>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2200      	movs	r2, #0
 8001c54:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001c56:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <main+0x630>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	639a      	str	r2, [r3, #56]	; 0x38
			  Overshootposition = 0;
 8001c5e:	4b23      	ldr	r3, [pc, #140]	; (8001cec <main+0x634>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	801a      	strh	r2, [r3, #0]

			  HAL_TIM_Base_Stop_IT(&htim9); //Stop IT Timer9
 8001c64:	4819      	ldr	r0, [pc, #100]	; (8001ccc <main+0x614>)
 8001c66:	f007 fe8f 	bl	8009988 <HAL_TIM_Base_Stop_IT>

			  if(PointModeflag == 1)
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <main+0x638>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d106      	bne.n	8001c80 <main+0x5c8>
			  {
				  registerFrame[16].U16 = 0;
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <main+0x5f8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	841a      	strh	r2, [r3, #32]
				  scheduler = 0;
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <main+0x600>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e005      	b.n	8001c8c <main+0x5d4>
			  }
			  else
			  {
				  // End Effector
				  EndEffectorWriteFlag = 1;
 8001c80:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <main+0x63c>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	701a      	strb	r2, [r3, #0]
				  scheduler = 4;
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <main+0x600>)
 8001c88:	2204      	movs	r2, #4
 8001c8a:	601a      	str	r2, [r3, #0]
			  }

		  }

		  // Reset Button
		  if (ResetButton.flag == 1)
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <main+0x640>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	f040 80f8 	bne.w	8001e86 <main+0x7ce>
		  {
			  ResetButton.flag = 0;
 8001c96:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <main+0x640>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
			  scheduler = 0;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <main+0x600>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8001ca2:	e0f0      	b.n	8001e86 <main+0x7ce>
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	70a3d70a 	.word	0x70a3d70a
 8001cac:	3fa70a3d 	.word	0x3fa70a3d
 8001cb0:	20000ff8 	.word	0x20000ff8
 8001cb4:	2000024c 	.word	0x2000024c
 8001cb8:	20000200 	.word	0x20000200
 8001cbc:	20000964 	.word	0x20000964
 8001cc0:	200009e0 	.word	0x200009e0
 8001cc4:	20000974 	.word	0x20000974
 8001cc8:	2000096c 	.word	0x2000096c
 8001ccc:	200006b4 	.word	0x200006b4
 8001cd0:	20000a44 	.word	0x20000a44
 8001cd4:	20000600 	.word	0x20000600
 8001cd8:	200009ac 	.word	0x200009ac
 8001cdc:	200010e8 	.word	0x200010e8
 8001ce0:	200010ec 	.word	0x200010ec
 8001ce4:	20000968 	.word	0x20000968
 8001ce8:	2000054c 	.word	0x2000054c
 8001cec:	200009ae 	.word	0x200009ae
 8001cf0:	200010d8 	.word	0x200010d8
 8001cf4:	20000b10 	.word	0x20000b10
 8001cf8:	20000abc 	.word	0x20000abc

	  //Proximity
	  case 4 :
		  if (HoleSequence < 9)
 8001cfc:	4b66      	ldr	r3, [pc, #408]	; (8001e98 <main+0x7e0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	dc13      	bgt.n	8001d2c <main+0x674>
		  {
			  if (TaskType == 1)
 8001d04:	4b65      	ldr	r3, [pc, #404]	; (8001e9c <main+0x7e4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d105      	bne.n	8001d18 <main+0x660>
			  {
				  EndEffectorState = 4;			//Pick
 8001d0c:	4b64      	ldr	r3, [pc, #400]	; (8001ea0 <main+0x7e8>)
 8001d0e:	2204      	movs	r2, #4
 8001d10:	601a      	str	r2, [r3, #0]
				  EndEffectorWrite();
 8001d12:	f000 fd31 	bl	8002778 <EndEffectorWrite>
 8001d16:	e009      	b.n	8001d2c <main+0x674>
			  }
			  else if (TaskType == -1)
 8001d18:	4b60      	ldr	r3, [pc, #384]	; (8001e9c <main+0x7e4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d20:	d104      	bne.n	8001d2c <main+0x674>
			  {
				  EndEffectorState = 5;			//Place
 8001d22:	4b5f      	ldr	r3, [pc, #380]	; (8001ea0 <main+0x7e8>)
 8001d24:	2205      	movs	r2, #5
 8001d26:	601a      	str	r2, [r3, #0]
				  EndEffectorWrite();
 8001d28:	f000 fd26 	bl	8002778 <EndEffectorWrite>
			  }
		  }
		  if (ResetButton.flag == 1)
 8001d2c:	4b5d      	ldr	r3, [pc, #372]	; (8001ea4 <main+0x7ec>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	f040 80aa 	bne.w	8001e8a <main+0x7d2>
			  {
				  ResetButton.flag = 0;
 8001d36:	4b5b      	ldr	r3, [pc, #364]	; (8001ea4 <main+0x7ec>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
				  scheduler = 0;
 8001d3c:	4b5a      	ldr	r3, [pc, #360]	; (8001ea8 <main+0x7f0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
			  }

		  break;
 8001d42:	e0a2      	b.n	8001e8a <main+0x7d2>

	  //Homing
	  case 5:
		  Homing();
 8001d44:	f000 fcb8 	bl	80026b8 <Homing>
		  break;
 8001d48:	e0a0      	b.n	8001e8c <main+0x7d4>

	  //Emergency
	  case 6:
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001d4a:	4b58      	ldr	r3, [pc, #352]	; (8001eac <main+0x7f4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001d52:	4b56      	ldr	r3, [pc, #344]	; (8001eac <main+0x7f4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2200      	movs	r2, #0
 8001d58:	639a      	str	r2, [r3, #56]	; 0x38
		  static uint32_t Emerstamp = 0;
		  if (HAL_GetTick()>= Emerstamp)
 8001d5a:	f003 fb63 	bl	8005424 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <main+0x7f8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d31e      	bcc.n	8001da6 <main+0x6ee>
		  {
			  Emerstamp = HAL_GetTick() + 200;	//5 Hz
 8001d68:	f003 fb5c 	bl	8005424 <HAL_GetTick>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	33c8      	adds	r3, #200	; 0xc8
 8001d70:	4a4f      	ldr	r2, [pc, #316]	; (8001eb0 <main+0x7f8>)
 8001d72:	6013      	str	r3, [r2, #0]
			  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1)
 8001d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d78:	484e      	ldr	r0, [pc, #312]	; (8001eb4 <main+0x7fc>)
 8001d7a:	f004 fe37 	bl	80069ec <HAL_GPIO_ReadPin>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d110      	bne.n	8001da6 <main+0x6ee>
			  {
				  Emercount = 0;
 8001d84:	4b4c      	ldr	r3, [pc, #304]	; (8001eb8 <main+0x800>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
				  EndEffectorState = 8;		//Quit Emergency
 8001d8a:	4b45      	ldr	r3, [pc, #276]	; (8001ea0 <main+0x7e8>)
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	601a      	str	r2, [r3, #0]
				  EndEffectorWriteFlag = 1;
 8001d90:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <main+0x804>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
				  EndEffectorWrite();
 8001d96:	f000 fcef 	bl	8002778 <EndEffectorWrite>
				  Proximity = 3;
 8001d9a:	4b49      	ldr	r3, [pc, #292]	; (8001ec0 <main+0x808>)
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	601a      	str	r2, [r3, #0]
				  scheduler = 5;
 8001da0:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <main+0x7f0>)
 8001da2:	2205      	movs	r2, #5
 8001da4:	601a      	str	r2, [r3, #0]
			  }
		  }

	  //Go Point
	  case 7:
		  registerFrame[1].U16 = 0;
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <main+0x80c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	805a      	strh	r2, [r3, #2]
		  registerFrame[16].U16 = 32;
 8001dac:	4b45      	ldr	r3, [pc, #276]	; (8001ec4 <main+0x80c>)
 8001dae:	2220      	movs	r2, #32
 8001db0:	841a      	strh	r2, [r3, #32]

		  //X Axis
		  GoalX = registerFrame[48].U16;  	// Use int16 to store -integer
 8001db2:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <main+0x80c>)
 8001db4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	4b43      	ldr	r3, [pc, #268]	; (8001ec8 <main+0x810>)
 8001dbc:	801a      	strh	r2, [r3, #0]
		  registerFrame[65].U16 = GoalX;  	// x-axis Target Position
 8001dbe:	4b42      	ldr	r3, [pc, #264]	; (8001ec8 <main+0x810>)
 8001dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	4b3f      	ldr	r3, [pc, #252]	; (8001ec4 <main+0x80c>)
 8001dc8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;   	// Max Speed
 8001dcc:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <main+0x80c>)
 8001dce:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001dd2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 1;        // 500 ms
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <main+0x80c>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  if(registerFrame[65].U16 != last_GoalX){
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <main+0x80c>)
 8001de0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <main+0x814>)
 8001de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d003      	beq.n	8001df8 <main+0x740>
			  registerFrame[64].U16 = 2;  	// RUN
 8001df0:	4b34      	ldr	r3, [pc, #208]	; (8001ec4 <main+0x80c>)
 8001df2:	2202      	movs	r2, #2
 8001df4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  }
		  last_GoalX = registerFrame[65].U16; // press RUN in Base System
 8001df8:	4b32      	ldr	r3, [pc, #200]	; (8001ec4 <main+0x80c>)
 8001dfa:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001dfe:	b21a      	sxth	r2, r3
 8001e00:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <main+0x814>)
 8001e02:	801a      	strh	r2, [r3, #0]
//		  registerFrame[64].U16 = 2;  	// RUN

		  //Y Axis
		  Trajectstate = 0;
 8001e04:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <main+0x818>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
		  if(registerFrame[49].U16 >= 30000)
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <main+0x80c>)
 8001e0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001e10:	f247 522f 	movw	r2, #29999	; 0x752f
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d916      	bls.n	8001e46 <main+0x78e>
		  {
			  qf = (registerFrame[49].U16-65536)/0.45; //pulse
 8001e18:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <main+0x80c>)
 8001e1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001e1e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fb86 	bl	8000534 <__aeabi_i2d>
 8001e28:	a319      	add	r3, pc, #100	; (adr r3, 8001e90 <main+0x7d8>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	f7fe fd15 	bl	800085c <__aeabi_ddiv>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f7fe fedd 	bl	8000bf8 <__aeabi_d2f>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4a24      	ldr	r2, [pc, #144]	; (8001ed4 <main+0x81c>)
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	e013      	b.n	8001e6e <main+0x7b6>
		  }
		  else
		  {
			  qf = (registerFrame[49].U16)/0.45; //Pick Tray X Position 1 //pulse
 8001e46:	4b1f      	ldr	r3, [pc, #124]	; (8001ec4 <main+0x80c>)
 8001e48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe fb71 	bl	8000534 <__aeabi_i2d>
 8001e52:	a30f      	add	r3, pc, #60	; (adr r3, 8001e90 <main+0x7d8>)
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	f7fe fd00 	bl	800085c <__aeabi_ddiv>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f7fe fec8 	bl	8000bf8 <__aeabi_d2f>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ed4 <main+0x81c>)
 8001e6c:	6013      	str	r3, [r2, #0]
		  }
		  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001e6e:	481a      	ldr	r0, [pc, #104]	; (8001ed8 <main+0x820>)
 8001e70:	f007 fd28 	bl	80098c4 <HAL_TIM_Base_Start_IT>
		  PointModeflag = 1;
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <main+0x824>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
		  scheduler = 3;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <main+0x7f0>)
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	601a      	str	r2, [r3, #0]
		  break;
 8001e80:	e004      	b.n	8001e8c <main+0x7d4>
		  break;
 8001e82:	bf00      	nop
 8001e84:	e474      	b.n	8001770 <main+0xb8>
		  break;
 8001e86:	bf00      	nop
 8001e88:	e472      	b.n	8001770 <main+0xb8>
		  break;
 8001e8a:	bf00      	nop
  {
 8001e8c:	e470      	b.n	8001770 <main+0xb8>
 8001e8e:	bf00      	nop
 8001e90:	cccccccd 	.word	0xcccccccd
 8001e94:	3fdccccc 	.word	0x3fdccccc
 8001e98:	20000964 	.word	0x20000964
 8001e9c:	20000204 	.word	0x20000204
 8001ea0:	20000b18 	.word	0x20000b18
 8001ea4:	20000abc 	.word	0x20000abc
 8001ea8:	20000200 	.word	0x20000200
 8001eac:	2000054c 	.word	0x2000054c
 8001eb0:	200010f0 	.word	0x200010f0
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	20000b1c 	.word	0x20000b1c
 8001ebc:	20000b10 	.word	0x20000b10
 8001ec0:	2000024c 	.word	0x2000024c
 8001ec4:	20000ff8 	.word	0x20000ff8
 8001ec8:	200010d4 	.word	0x200010d4
 8001ecc:	200010d6 	.word	0x200010d6
 8001ed0:	2000096c 	.word	0x2000096c
 8001ed4:	20000974 	.word	0x20000974
 8001ed8:	200006b4 	.word	0x200006b4
 8001edc:	200010d8 	.word	0x200010d8

08001ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b094      	sub	sp, #80	; 0x50
 8001ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ee6:	f107 0320 	add.w	r3, r7, #32
 8001eea:	2230      	movs	r2, #48	; 0x30
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f00a fcc8 	bl	800c884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <SystemClock_Config+0xc8>)
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	4a26      	ldr	r2, [pc, #152]	; (8001fa8 <SystemClock_Config+0xc8>)
 8001f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f12:	6413      	str	r3, [r2, #64]	; 0x40
 8001f14:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <SystemClock_Config+0xc8>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f20:	2300      	movs	r3, #0
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	4b21      	ldr	r3, [pc, #132]	; (8001fac <SystemClock_Config+0xcc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a20      	ldr	r2, [pc, #128]	; (8001fac <SystemClock_Config+0xcc>)
 8001f2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <SystemClock_Config+0xcc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f40:	2301      	movs	r3, #1
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f44:	2310      	movs	r3, #16
 8001f46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f50:	2308      	movs	r3, #8
 8001f52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001f54:	2364      	movs	r3, #100	; 0x64
 8001f56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f60:	f107 0320 	add.w	r3, r7, #32
 8001f64:	4618      	mov	r0, r3
 8001f66:	f006 ff5f 	bl	8008e28 <HAL_RCC_OscConfig>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f70:	f002 fd84 	bl	8004a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f74:	230f      	movs	r3, #15
 8001f76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f8a:	f107 030c 	add.w	r3, r7, #12
 8001f8e:	2103      	movs	r1, #3
 8001f90:	4618      	mov	r0, r3
 8001f92:	f007 f9c1 	bl	8009318 <HAL_RCC_ClockConfig>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f9c:	f002 fd6e 	bl	8004a7c <Error_Handler>
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	3750      	adds	r7, #80	; 0x50
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40007000 	.word	0x40007000

08001fb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fb6:	463b      	mov	r3, r7
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001fc2:	4b28      	ldr	r3, [pc, #160]	; (8002064 <MX_ADC1_Init+0xb4>)
 8001fc4:	4a28      	ldr	r2, [pc, #160]	; (8002068 <MX_ADC1_Init+0xb8>)
 8001fc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fc8:	4b26      	ldr	r3, [pc, #152]	; (8002064 <MX_ADC1_Init+0xb4>)
 8001fca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fd0:	4b24      	ldr	r3, [pc, #144]	; (8002064 <MX_ADC1_Init+0xb4>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001fd6:	4b23      	ldr	r3, [pc, #140]	; (8002064 <MX_ADC1_Init+0xb4>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <MX_ADC1_Init+0xb4>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <MX_ADC1_Init+0xb4>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fea:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <MX_ADC1_Init+0xb4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <MX_ADC1_Init+0xb4>)
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	; (800206c <MX_ADC1_Init+0xbc>)
 8001ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <MX_ADC1_Init+0xb4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <MX_ADC1_Init+0xb4>)
 8001ffe:	2202      	movs	r2, #2
 8002000:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002002:	4b18      	ldr	r3, [pc, #96]	; (8002064 <MX_ADC1_Init+0xb4>)
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <MX_ADC1_Init+0xb4>)
 800200c:	2201      	movs	r2, #1
 800200e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002010:	4814      	ldr	r0, [pc, #80]	; (8002064 <MX_ADC1_Init+0xb4>)
 8002012:	f003 fa37 	bl	8005484 <HAL_ADC_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800201c:	f002 fd2e 	bl	8004a7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002020:	2300      	movs	r3, #0
 8002022:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002024:	2301      	movs	r3, #1
 8002026:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002028:	2303      	movs	r3, #3
 800202a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800202c:	463b      	mov	r3, r7
 800202e:	4619      	mov	r1, r3
 8002030:	480c      	ldr	r0, [pc, #48]	; (8002064 <MX_ADC1_Init+0xb4>)
 8002032:	f003 fb79 	bl	8005728 <HAL_ADC_ConfigChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800203c:	f002 fd1e 	bl	8004a7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002040:	2301      	movs	r3, #1
 8002042:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002044:	2302      	movs	r3, #2
 8002046:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002048:	463b      	mov	r3, r7
 800204a:	4619      	mov	r1, r3
 800204c:	4805      	ldr	r0, [pc, #20]	; (8002064 <MX_ADC1_Init+0xb4>)
 800204e:	f003 fb6b 	bl	8005728 <HAL_ADC_ConfigChannel>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002058:	f002 fd10 	bl	8004a7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800205c:	bf00      	nop
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000450 	.word	0x20000450
 8002068:	40012000 	.word	0x40012000
 800206c:	0f000001 	.word	0x0f000001

08002070 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <MX_I2C1_Init+0x50>)
 8002076:	4a13      	ldr	r2, [pc, #76]	; (80020c4 <MX_I2C1_Init+0x54>)
 8002078:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <MX_I2C1_Init+0x50>)
 800207c:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <MX_I2C1_Init+0x58>)
 800207e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <MX_I2C1_Init+0x50>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002086:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <MX_I2C1_Init+0x50>)
 8002088:	2200      	movs	r2, #0
 800208a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <MX_I2C1_Init+0x50>)
 800208e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002092:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <MX_I2C1_Init+0x50>)
 8002096:	2200      	movs	r2, #0
 8002098:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <MX_I2C1_Init+0x50>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <MX_I2C1_Init+0x50>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <MX_I2C1_Init+0x50>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020ac:	4804      	ldr	r0, [pc, #16]	; (80020c0 <MX_I2C1_Init+0x50>)
 80020ae:	f004 fce7 	bl	8006a80 <HAL_I2C_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020b8:	f002 fce0 	bl	8004a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	200004f8 	.word	0x200004f8
 80020c4:	40005400 	.word	0x40005400
 80020c8:	000186a0 	.word	0x000186a0

080020cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b092      	sub	sp, #72	; 0x48
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
 80020ec:	615a      	str	r2, [r3, #20]
 80020ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020f0:	1d3b      	adds	r3, r7, #4
 80020f2:	2220      	movs	r2, #32
 80020f4:	2100      	movs	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f00a fbc4 	bl	800c884 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020fc:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <MX_TIM1_Init+0x118>)
 80020fe:	4a3a      	ldr	r2, [pc, #232]	; (80021e8 <MX_TIM1_Init+0x11c>)
 8002100:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002102:	4b38      	ldr	r3, [pc, #224]	; (80021e4 <MX_TIM1_Init+0x118>)
 8002104:	2200      	movs	r2, #0
 8002106:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002108:	4b36      	ldr	r3, [pc, #216]	; (80021e4 <MX_TIM1_Init+0x118>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 800210e:	4b35      	ldr	r3, [pc, #212]	; (80021e4 <MX_TIM1_Init+0x118>)
 8002110:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002114:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002116:	4b33      	ldr	r3, [pc, #204]	; (80021e4 <MX_TIM1_Init+0x118>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800211c:	4b31      	ldr	r3, [pc, #196]	; (80021e4 <MX_TIM1_Init+0x118>)
 800211e:	2200      	movs	r2, #0
 8002120:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002122:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <MX_TIM1_Init+0x118>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002128:	482e      	ldr	r0, [pc, #184]	; (80021e4 <MX_TIM1_Init+0x118>)
 800212a:	f007 fcc3 	bl	8009ab4 <HAL_TIM_PWM_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002134:	f002 fca2 	bl	8004a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002140:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002144:	4619      	mov	r1, r3
 8002146:	4827      	ldr	r0, [pc, #156]	; (80021e4 <MX_TIM1_Init+0x118>)
 8002148:	f008 ffa6 	bl	800b098 <HAL_TIMEx_MasterConfigSynchronization>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002152:	f002 fc93 	bl	8004a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002156:	2360      	movs	r3, #96	; 0x60
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800215e:	2300      	movs	r3, #0
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002162:	2300      	movs	r3, #0
 8002164:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800216a:	2300      	movs	r3, #0
 800216c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002176:	2200      	movs	r2, #0
 8002178:	4619      	mov	r1, r3
 800217a:	481a      	ldr	r0, [pc, #104]	; (80021e4 <MX_TIM1_Init+0x118>)
 800217c:	f008 f93a 	bl	800a3f4 <HAL_TIM_PWM_ConfigChannel>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002186:	f002 fc79 	bl	8004a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800218a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218e:	2204      	movs	r2, #4
 8002190:	4619      	mov	r1, r3
 8002192:	4814      	ldr	r0, [pc, #80]	; (80021e4 <MX_TIM1_Init+0x118>)
 8002194:	f008 f92e 	bl	800a3f4 <HAL_TIM_PWM_ConfigChannel>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800219e:	f002 fc6d 	bl	8004a7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	4619      	mov	r1, r3
 80021c4:	4807      	ldr	r0, [pc, #28]	; (80021e4 <MX_TIM1_Init+0x118>)
 80021c6:	f008 ffd5 	bl	800b174 <HAL_TIMEx_ConfigBreakDeadTime>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80021d0:	f002 fc54 	bl	8004a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021d4:	4803      	ldr	r0, [pc, #12]	; (80021e4 <MX_TIM1_Init+0x118>)
 80021d6:	f002 fe0d 	bl	8004df4 <HAL_TIM_MspPostInit>

}
 80021da:	bf00      	nop
 80021dc:	3748      	adds	r7, #72	; 0x48
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2000054c 	.word	0x2000054c
 80021e8:	40010000 	.word	0x40010000

080021ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08c      	sub	sp, #48	; 0x30
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	2224      	movs	r2, #36	; 0x24
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f00a fb42 	bl	800c884 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002208:	4b20      	ldr	r3, [pc, #128]	; (800228c <MX_TIM3_Init+0xa0>)
 800220a:	4a21      	ldr	r2, [pc, #132]	; (8002290 <MX_TIM3_Init+0xa4>)
 800220c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800220e:	4b1f      	ldr	r3, [pc, #124]	; (800228c <MX_TIM3_Init+0xa0>)
 8002210:	2200      	movs	r2, #0
 8002212:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <MX_TIM3_Init+0xa0>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <MX_TIM3_Init+0xa0>)
 800221c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002220:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <MX_TIM3_Init+0xa0>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002228:	4b18      	ldr	r3, [pc, #96]	; (800228c <MX_TIM3_Init+0xa0>)
 800222a:	2200      	movs	r2, #0
 800222c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800222e:	2303      	movs	r3, #3
 8002230:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002236:	2301      	movs	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002246:	2301      	movs	r3, #1
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800224a:	2300      	movs	r3, #0
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002252:	f107 030c 	add.w	r3, r7, #12
 8002256:	4619      	mov	r1, r3
 8002258:	480c      	ldr	r0, [pc, #48]	; (800228c <MX_TIM3_Init+0xa0>)
 800225a:	f007 fe05 	bl	8009e68 <HAL_TIM_Encoder_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002264:	f002 fc0a 	bl	8004a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002268:	2300      	movs	r3, #0
 800226a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	4619      	mov	r1, r3
 8002274:	4805      	ldr	r0, [pc, #20]	; (800228c <MX_TIM3_Init+0xa0>)
 8002276:	f008 ff0f 	bl	800b098 <HAL_TIMEx_MasterConfigSynchronization>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002280:	f002 fbfc 	bl	8004a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002284:	bf00      	nop
 8002286:	3730      	adds	r7, #48	; 0x30
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000600 	.word	0x20000600
 8002290:	40000400 	.word	0x40000400

08002294 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229a:	463b      	mov	r3, r7
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80022a6:	4b16      	ldr	r3, [pc, #88]	; (8002300 <MX_TIM9_Init+0x6c>)
 80022a8:	4a16      	ldr	r2, [pc, #88]	; (8002304 <MX_TIM9_Init+0x70>)
 80022aa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99;
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <MX_TIM9_Init+0x6c>)
 80022ae:	2263      	movs	r2, #99	; 0x63
 80022b0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <MX_TIM9_Init+0x6c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <MX_TIM9_Init+0x6c>)
 80022ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022be:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <MX_TIM9_Init+0x6c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c6:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <MX_TIM9_Init+0x6c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80022cc:	480c      	ldr	r0, [pc, #48]	; (8002300 <MX_TIM9_Init+0x6c>)
 80022ce:	f007 fa43 	bl	8009758 <HAL_TIM_Base_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80022d8:	f002 fbd0 	bl	8004a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80022e2:	463b      	mov	r3, r7
 80022e4:	4619      	mov	r1, r3
 80022e6:	4806      	ldr	r0, [pc, #24]	; (8002300 <MX_TIM9_Init+0x6c>)
 80022e8:	f008 f946 	bl	800a578 <HAL_TIM_ConfigClockSource>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80022f2:	f002 fbc3 	bl	8004a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200006b4 	.word	0x200006b4
 8002304:	40014000 	.word	0x40014000

08002308 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
 800231c:	615a      	str	r2, [r3, #20]
 800231e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <MX_TIM11_Init+0xa0>)
 8002322:	4a22      	ldr	r2, [pc, #136]	; (80023ac <MX_TIM11_Init+0xa4>)
 8002324:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <MX_TIM11_Init+0xa0>)
 8002328:	2263      	movs	r2, #99	; 0x63
 800232a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232c:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <MX_TIM11_Init+0xa0>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8002332:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <MX_TIM11_Init+0xa0>)
 8002334:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8002338:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800233a:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <MX_TIM11_Init+0xa0>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <MX_TIM11_Init+0xa0>)
 8002342:	2200      	movs	r2, #0
 8002344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002346:	4818      	ldr	r0, [pc, #96]	; (80023a8 <MX_TIM11_Init+0xa0>)
 8002348:	f007 fa06 	bl	8009758 <HAL_TIM_Base_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002352:	f002 fb93 	bl	8004a7c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8002356:	4814      	ldr	r0, [pc, #80]	; (80023a8 <MX_TIM11_Init+0xa0>)
 8002358:	f007 fb46 	bl	80099e8 <HAL_TIM_OC_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002362:	f002 fb8b 	bl	8004a7c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8002366:	2108      	movs	r1, #8
 8002368:	480f      	ldr	r0, [pc, #60]	; (80023a8 <MX_TIM11_Init+0xa0>)
 800236a:	f007 fcaf 	bl	8009ccc <HAL_TIM_OnePulse_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8002374:	f002 fb82 	bl	8004a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002378:	2310      	movs	r3, #16
 800237a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 800237c:	f240 5399 	movw	r3, #1433	; 0x599
 8002380:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	2200      	movs	r2, #0
 800238e:	4619      	mov	r1, r3
 8002390:	4805      	ldr	r0, [pc, #20]	; (80023a8 <MX_TIM11_Init+0xa0>)
 8002392:	f007 ffd3 	bl	800a33c <HAL_TIM_OC_ConfigChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 800239c:	f002 fb6e 	bl	8004a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80023a0:	bf00      	nop
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000768 	.word	0x20000768
 80023ac:	40014800 	.word	0x40014800

080023b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023b6:	4a12      	ldr	r2, [pc, #72]	; (8002400 <MX_USART1_UART_Init+0x50>)
 80023b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023d6:	220c      	movs	r2, #12
 80023d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023e6:	4805      	ldr	r0, [pc, #20]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023e8:	f008 ff34 	bl	800b254 <HAL_UART_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023f2:	f002 fb43 	bl	8004a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	2000081c 	.word	0x2000081c
 8002400:	40011000 	.word	0x40011000

08002404 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <MX_USART2_UART_Init+0x50>)
 800240a:	4a13      	ldr	r2, [pc, #76]	; (8002458 <MX_USART2_UART_Init+0x54>)
 800240c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <MX_USART2_UART_Init+0x50>)
 8002410:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <MX_USART2_UART_Init+0x50>)
 8002418:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800241c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800241e:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <MX_USART2_UART_Init+0x50>)
 8002420:	2200      	movs	r2, #0
 8002422:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <MX_USART2_UART_Init+0x50>)
 8002426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800242a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <MX_USART2_UART_Init+0x50>)
 800242e:	220c      	movs	r2, #12
 8002430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <MX_USART2_UART_Init+0x50>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <MX_USART2_UART_Init+0x50>)
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800243e:	4805      	ldr	r0, [pc, #20]	; (8002454 <MX_USART2_UART_Init+0x50>)
 8002440:	f008 ff08 	bl	800b254 <HAL_UART_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800244a:	f002 fb17 	bl	8004a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000890 	.word	0x20000890
 8002458:	40004400 	.word	0x40004400

0800245c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <MX_DMA_Init+0x68>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a16      	ldr	r2, [pc, #88]	; (80024c4 <MX_DMA_Init+0x68>)
 800246c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <MX_DMA_Init+0x68>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <MX_DMA_Init+0x68>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a0f      	ldr	r2, [pc, #60]	; (80024c4 <MX_DMA_Init+0x68>)
 8002488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <MX_DMA_Init+0x68>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	2100      	movs	r1, #0
 800249e:	2011      	movs	r0, #17
 80024a0:	f003 fccd 	bl	8005e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80024a4:	2011      	movs	r0, #17
 80024a6:	f003 fce6 	bl	8005e76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80024aa:	2200      	movs	r2, #0
 80024ac:	2100      	movs	r1, #0
 80024ae:	2038      	movs	r0, #56	; 0x38
 80024b0:	f003 fcc5 	bl	8005e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80024b4:	2038      	movs	r0, #56	; 0x38
 80024b6:	f003 fcde 	bl	8005e76 <HAL_NVIC_EnableIRQ>

}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800

080024c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ce:	f107 0314 	add.w	r3, r7, #20
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
 80024dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	4b53      	ldr	r3, [pc, #332]	; (8002630 <MX_GPIO_Init+0x168>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a52      	ldr	r2, [pc, #328]	; (8002630 <MX_GPIO_Init+0x168>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b50      	ldr	r3, [pc, #320]	; (8002630 <MX_GPIO_Init+0x168>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <MX_GPIO_Init+0x168>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a4b      	ldr	r2, [pc, #300]	; (8002630 <MX_GPIO_Init+0x168>)
 8002504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b49      	ldr	r3, [pc, #292]	; (8002630 <MX_GPIO_Init+0x168>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	4b45      	ldr	r3, [pc, #276]	; (8002630 <MX_GPIO_Init+0x168>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a44      	ldr	r2, [pc, #272]	; (8002630 <MX_GPIO_Init+0x168>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b42      	ldr	r3, [pc, #264]	; (8002630 <MX_GPIO_Init+0x168>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	4b3e      	ldr	r3, [pc, #248]	; (8002630 <MX_GPIO_Init+0x168>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a3d      	ldr	r2, [pc, #244]	; (8002630 <MX_GPIO_Init+0x168>)
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <MX_GPIO_Init+0x168>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Drive_L_EN_Pin|Motor_Drive_R_EN_Pin, GPIO_PIN_RESET);
 800254e:	2200      	movs	r2, #0
 8002550:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8002554:	4837      	ldr	r0, [pc, #220]	; (8002634 <MX_GPIO_Init+0x16c>)
 8002556:	f004 fa61 	bl	8006a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Proximity_1_Pin */
  GPIO_InitStruct.Pin = Proximity_1_Pin;
 800255a:	2302      	movs	r3, #2
 800255c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_1_GPIO_Port, &GPIO_InitStruct);
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	4619      	mov	r1, r3
 800256c:	4832      	ldr	r0, [pc, #200]	; (8002638 <MX_GPIO_Init+0x170>)
 800256e:	f004 f8b9 	bl	80066e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_2_Pin Proximity_3_Pin */
  GPIO_InitStruct.Pin = Proximity_2_Pin|Proximity_3_Pin;
 8002572:	230c      	movs	r3, #12
 8002574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002576:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800257a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	4619      	mov	r1, r3
 8002586:	482c      	ldr	r0, [pc, #176]	; (8002638 <MX_GPIO_Init+0x170>)
 8002588:	f004 f8ac 	bl	80066e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Joystick_Reset_Pin Joystick_Fine_Pin */
  GPIO_InitStruct.Pin = Joystick_Reset_Pin|Joystick_Fine_Pin;
 800258c:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259a:	f107 0314 	add.w	r3, r7, #20
 800259e:	4619      	mov	r1, r3
 80025a0:	4826      	ldr	r0, [pc, #152]	; (800263c <MX_GPIO_Init+0x174>)
 80025a2:	f004 f89f 	bl	80066e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor_Drive_L_EN_Pin Motor_Drive_R_EN_Pin */
  GPIO_InitStruct.Pin = Motor_Drive_L_EN_Pin|Motor_Drive_R_EN_Pin;
 80025a6:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80025aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ac:	2301      	movs	r3, #1
 80025ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b4:	2300      	movs	r3, #0
 80025b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	4619      	mov	r1, r3
 80025be:	481d      	ldr	r0, [pc, #116]	; (8002634 <MX_GPIO_Init+0x16c>)
 80025c0:	f004 f890 	bl	80066e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Switch_Pin */
  GPIO_InitStruct.Pin = Emergency_Switch_Pin;
 80025c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025d0:	2302      	movs	r3, #2
 80025d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Switch_GPIO_Port, &GPIO_InitStruct);
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4619      	mov	r1, r3
 80025da:	4816      	ldr	r0, [pc, #88]	; (8002634 <MX_GPIO_Init+0x16c>)
 80025dc:	f004 f882 	bl	80066e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Joystick_Rough_Pin Joystick_Get_Position_Pin */
  GPIO_InitStruct.Pin = Joystick_Rough_Pin|Joystick_Get_Position_Pin;
 80025e0:	2360      	movs	r3, #96	; 0x60
 80025e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	4619      	mov	r1, r3
 80025f2:	4810      	ldr	r0, [pc, #64]	; (8002634 <MX_GPIO_Init+0x16c>)
 80025f4:	f004 f876 	bl	80066e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80025f8:	2200      	movs	r2, #0
 80025fa:	2100      	movs	r1, #0
 80025fc:	2008      	movs	r0, #8
 80025fe:	f003 fc1e 	bl	8005e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002602:	2008      	movs	r0, #8
 8002604:	f003 fc37 	bl	8005e76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002608:	2200      	movs	r2, #0
 800260a:	2100      	movs	r1, #0
 800260c:	2009      	movs	r0, #9
 800260e:	f003 fc16 	bl	8005e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002612:	2009      	movs	r0, #9
 8002614:	f003 fc2f 	bl	8005e76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002618:	2200      	movs	r2, #0
 800261a:	2100      	movs	r1, #0
 800261c:	2028      	movs	r0, #40	; 0x28
 800261e:	f003 fc0e 	bl	8005e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002622:	2028      	movs	r0, #40	; 0x28
 8002624:	f003 fc27 	bl	8005e76 <HAL_NVIC_EnableIRQ>

}
 8002628:	bf00      	nop
 800262a:	3728      	adds	r7, #40	; 0x28
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40023800 	.word	0x40023800
 8002634:	40020400 	.word	0x40020400
 8002638:	40020800 	.word	0x40020800
 800263c:	40020000 	.word	0x40020000

08002640 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	2b04      	cmp	r3, #4
 800264e:	d106      	bne.n	800265e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		scheduler = 5;
 8002650:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <HAL_GPIO_EXTI_Callback+0x64>)
 8002652:	2205      	movs	r2, #5
 8002654:	601a      	str	r2, [r3, #0]
		Proximity = 3;
 8002656:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <HAL_GPIO_EXTI_Callback+0x68>)
 8002658:	2203      	movs	r2, #3
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	e008      	b.n	8002670 <HAL_GPIO_EXTI_Callback+0x30>
	}
	else if(GPIO_Pin == GPIO_PIN_3)
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d105      	bne.n	8002670 <HAL_GPIO_EXTI_Callback+0x30>
	{
		scheduler = 5;
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <HAL_GPIO_EXTI_Callback+0x64>)
 8002666:	2205      	movs	r2, #5
 8002668:	601a      	str	r2, [r3, #0]
		Proximity = 2;
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <HAL_GPIO_EXTI_Callback+0x68>)
 800266c:	2202      	movs	r2, #2
 800266e:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_15) //Push Emergency
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002676:	d111      	bne.n	800269c <HAL_GPIO_EXTI_Callback+0x5c>
	{
		if(Emercount == 0)
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_GPIO_EXTI_Callback+0x6c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10d      	bne.n	800269c <HAL_GPIO_EXTI_Callback+0x5c>
		{
			EndEffectorState = 7;			//Emergency
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_GPIO_EXTI_Callback+0x70>)
 8002682:	2207      	movs	r2, #7
 8002684:	601a      	str	r2, [r3, #0]
			EndEffectorWriteFlag = 1;
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_GPIO_EXTI_Callback+0x74>)
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
			EndEffectorWrite();
 800268c:	f000 f874 	bl	8002778 <EndEffectorWrite>
			Emercount = 1;
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_GPIO_EXTI_Callback+0x6c>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]
			scheduler = 6;
 8002696:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <HAL_GPIO_EXTI_Callback+0x64>)
 8002698:	2206      	movs	r2, #6
 800269a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000200 	.word	0x20000200
 80026a8:	2000024c 	.word	0x2000024c
 80026ac:	20000b1c 	.word	0x20000b1c
 80026b0:	20000b18 	.word	0x20000b18
 80026b4:	20000b10 	.word	0x20000b10

080026b8 <Homing>:

void Homing()
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
	registerFrame[1].U16 = 4;
 80026bc:	4b27      	ldr	r3, [pc, #156]	; (800275c <Homing+0xa4>)
 80026be:	2204      	movs	r2, #4
 80026c0:	805a      	strh	r2, [r3, #2]
	registerFrame[64].U16 = 1;
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <Homing+0xa4>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	registerFrame[16].U16 = 4;
 80026ca:	4b24      	ldr	r3, [pc, #144]	; (800275c <Homing+0xa4>)
 80026cc:	2204      	movs	r2, #4
 80026ce:	841a      	strh	r2, [r3, #32]
	if (Proximity == 3)
 80026d0:	4b23      	ldr	r3, [pc, #140]	; (8002760 <Homing+0xa8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d109      	bne.n	80026ec <Homing+0x34>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80026d8:	4b22      	ldr	r3, [pc, #136]	; (8002764 <Homing+0xac>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2200      	movs	r2, #0
 80026de:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
 80026e0:	4b20      	ldr	r3, [pc, #128]	; (8002764 <Homing+0xac>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80026e8:	635a      	str	r2, [r3, #52]	; 0x34
 80026ea:	e00c      	b.n	8002706 <Homing+0x4e>
	}

	else if (Proximity == 2)
 80026ec:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <Homing+0xa8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d108      	bne.n	8002706 <Homing+0x4e>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,10000);
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <Homing+0xac>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f242 7210 	movw	r2, #10000	; 0x2710
 80026fc:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80026fe:	4b19      	ldr	r3, [pc, #100]	; (8002764 <Homing+0xac>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2200      	movs	r2, #0
 8002704:	635a      	str	r2, [r3, #52]	; 0x34
	}

	//Proximity Home
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 0)
 8002706:	2102      	movs	r1, #2
 8002708:	4817      	ldr	r0, [pc, #92]	; (8002768 <Homing+0xb0>)
 800270a:	f004 f96f 	bl	80069ec <HAL_GPIO_ReadPin>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d120      	bne.n	8002756 <Homing+0x9e>
	{
		Proximity = 0;
 8002714:	4b12      	ldr	r3, [pc, #72]	; (8002760 <Homing+0xa8>)
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
		Emercount = 0;
 800271a:	4b14      	ldr	r3, [pc, #80]	; (800276c <Homing+0xb4>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
		registerFrame[1].U16 = 0;
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <Homing+0xa4>)
 8002722:	2200      	movs	r2, #0
 8002724:	805a      	strh	r2, [r3, #2]
		registerFrame[64].U16 = 0;
 8002726:	4b0d      	ldr	r3, [pc, #52]	; (800275c <Homing+0xa4>)
 8002728:	2200      	movs	r2, #0
 800272a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		registerFrame[16].U16 = 0;
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <Homing+0xa4>)
 8002730:	2200      	movs	r2, #0
 8002732:	841a      	strh	r2, [r3, #32]

		HAL_Delay(10);
 8002734:	200a      	movs	r0, #10
 8002736:	f002 fe81 	bl	800543c <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <Homing+0xac>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2200      	movs	r2, #0
 8002740:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <Homing+0xac>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2200      	movs	r2, #0
 8002748:	635a      	str	r2, [r3, #52]	; 0x34
		JoySpeed = 0;
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <Homing+0xb8>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
		scheduler = 0;
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <Homing+0xbc>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
	}
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000ff8 	.word	0x20000ff8
 8002760:	2000024c 	.word	0x2000024c
 8002764:	2000054c 	.word	0x2000054c
 8002768:	40020800 	.word	0x40020800
 800276c:	20000b1c 	.word	0x20000b1c
 8002770:	20000b0c 	.word	0x20000b0c
 8002774:	20000200 	.word	0x20000200

08002778 <EndEffectorWrite>:

void EndEffectorWrite()
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af02      	add	r7, sp, #8
//	HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
	switch(EndEffectorState)
 800277e:	4ba2      	ldr	r3, [pc, #648]	; (8002a08 <EndEffectorWrite+0x290>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b08      	cmp	r3, #8
 8002784:	f200 813c 	bhi.w	8002a00 <EndEffectorWrite+0x288>
 8002788:	a201      	add	r2, pc, #4	; (adr r2, 8002790 <EndEffectorWrite+0x18>)
 800278a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278e:	bf00      	nop
 8002790:	080027b5 	.word	0x080027b5
 8002794:	080027d7 	.word	0x080027d7
 8002798:	080027ff 	.word	0x080027ff
 800279c:	08002827 	.word	0x08002827
 80027a0:	0800284f 	.word	0x0800284f
 80027a4:	080028c3 	.word	0x080028c3
 80027a8:	0800296d 	.word	0x0800296d
 80027ac:	08002993 	.word	0x08002993
 80027b0:	080029b9 	.word	0x080029b9
	{
	case 0:
		if(EndEffectorWriteFlag == 1)
 80027b4:	4b95      	ldr	r3, [pc, #596]	; (8002a0c <EndEffectorWrite+0x294>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	f040 8110 	bne.w	80029de <EndEffectorWrite+0x266>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, SoftReset, 4, 100);
 80027be:	2364      	movs	r3, #100	; 0x64
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	2304      	movs	r3, #4
 80027c4:	4a92      	ldr	r2, [pc, #584]	; (8002a10 <EndEffectorWrite+0x298>)
 80027c6:	212a      	movs	r1, #42	; 0x2a
 80027c8:	4892      	ldr	r0, [pc, #584]	; (8002a14 <EndEffectorWrite+0x29c>)
 80027ca:	f004 fa9d 	bl	8006d08 <HAL_I2C_Master_Transmit>
				EndEffectorWriteFlag = 0;
 80027ce:	4b8f      	ldr	r3, [pc, #572]	; (8002a0c <EndEffectorWrite+0x294>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]
			}
		break;
 80027d4:	e103      	b.n	80029de <EndEffectorWrite+0x266>
	case 1:
		if(EndEffectorWriteFlag == 1)
 80027d6:	4b8d      	ldr	r3, [pc, #564]	; (8002a0c <EndEffectorWrite+0x294>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	f040 8101 	bne.w	80029e2 <EndEffectorWrite+0x26a>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, TestModeOn, 2, 100);
 80027e0:	2364      	movs	r3, #100	; 0x64
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	2302      	movs	r3, #2
 80027e6:	4a8c      	ldr	r2, [pc, #560]	; (8002a18 <EndEffectorWrite+0x2a0>)
 80027e8:	212a      	movs	r1, #42	; 0x2a
 80027ea:	488a      	ldr	r0, [pc, #552]	; (8002a14 <EndEffectorWrite+0x29c>)
 80027ec:	f004 fa8c 	bl	8006d08 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 1; //End Effector Status: Laser On
 80027f0:	4b8a      	ldr	r3, [pc, #552]	; (8002a1c <EndEffectorWrite+0x2a4>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 80027f6:	4b85      	ldr	r3, [pc, #532]	; (8002a0c <EndEffectorWrite+0x294>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
			}
		break;
 80027fc:	e0f1      	b.n	80029e2 <EndEffectorWrite+0x26a>
	case 2:
		if(EndEffectorWriteFlag == 1)
 80027fe:	4b83      	ldr	r3, [pc, #524]	; (8002a0c <EndEffectorWrite+0x294>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b01      	cmp	r3, #1
 8002804:	f040 80ef 	bne.w	80029e6 <EndEffectorWrite+0x26e>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, TestModeOff, 2, 100);
 8002808:	2364      	movs	r3, #100	; 0x64
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2302      	movs	r3, #2
 800280e:	4a84      	ldr	r2, [pc, #528]	; (8002a20 <EndEffectorWrite+0x2a8>)
 8002810:	212a      	movs	r1, #42	; 0x2a
 8002812:	4880      	ldr	r0, [pc, #512]	; (8002a14 <EndEffectorWrite+0x29c>)
 8002814:	f004 fa78 	bl	8006d08 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Laser Off
 8002818:	4b80      	ldr	r3, [pc, #512]	; (8002a1c <EndEffectorWrite+0x2a4>)
 800281a:	2200      	movs	r2, #0
 800281c:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 800281e:	4b7b      	ldr	r3, [pc, #492]	; (8002a0c <EndEffectorWrite+0x294>)
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002824:	e0df      	b.n	80029e6 <EndEffectorWrite+0x26e>
	case 3:
		if(EndEffectorWriteFlag == 1)
 8002826:	4b79      	ldr	r3, [pc, #484]	; (8002a0c <EndEffectorWrite+0x294>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	f040 80dd 	bne.w	80029ea <EndEffectorWrite+0x272>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, RunModeOn, 2, 100);
 8002830:	2364      	movs	r3, #100	; 0x64
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	2302      	movs	r3, #2
 8002836:	4a7b      	ldr	r2, [pc, #492]	; (8002a24 <EndEffectorWrite+0x2ac>)
 8002838:	212a      	movs	r1, #42	; 0x2a
 800283a:	4876      	ldr	r0, [pc, #472]	; (8002a14 <EndEffectorWrite+0x29c>)
 800283c:	f004 fa64 	bl	8006d08 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 2; //End Effector Status: Gripper Power
 8002840:	4b76      	ldr	r3, [pc, #472]	; (8002a1c <EndEffectorWrite+0x2a4>)
 8002842:	2202      	movs	r2, #2
 8002844:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 8002846:	4b71      	ldr	r3, [pc, #452]	; (8002a0c <EndEffectorWrite+0x294>)
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800284c:	e0cd      	b.n	80029ea <EndEffectorWrite+0x272>
	case 4:
		if(EndEffectorWriteFlag == 1)
 800284e:	4b6f      	ldr	r3, [pc, #444]	; (8002a0c <EndEffectorWrite+0x294>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d114      	bne.n	8002880 <EndEffectorWrite+0x108>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, PickData, 2, 100);
 8002856:	2364      	movs	r3, #100	; 0x64
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2302      	movs	r3, #2
 800285c:	4a72      	ldr	r2, [pc, #456]	; (8002a28 <EndEffectorWrite+0x2b0>)
 800285e:	212a      	movs	r1, #42	; 0x2a
 8002860:	486c      	ldr	r0, [pc, #432]	; (8002a14 <EndEffectorWrite+0x29c>)
 8002862:	f004 fa51 	bl	8006d08 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 6; //End Effector Status: Piking
 8002866:	4b6d      	ldr	r3, [pc, #436]	; (8002a1c <EndEffectorWrite+0x2a4>)
 8002868:	2206      	movs	r2, #6
 800286a:	809a      	strh	r2, [r3, #4]
				HAL_Delay(100);
 800286c:	2064      	movs	r0, #100	; 0x64
 800286e:	f002 fde5 	bl	800543c <HAL_Delay>
				EndEffectorReadFlag = 1;
 8002872:	4b6e      	ldr	r3, [pc, #440]	; (8002a2c <EndEffectorWrite+0x2b4>)
 8002874:	2201      	movs	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]
				EndEffectorWriteFlag = 0;
 8002878:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <EndEffectorWrite+0x294>)
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	e00f      	b.n	80028a0 <EndEffectorWrite+0x128>
			}
		else if(EndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY)
 8002880:	4b6a      	ldr	r3, [pc, #424]	; (8002a2c <EndEffectorWrite+0x2b4>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d10b      	bne.n	80028a0 <EndEffectorWrite+0x128>
 8002888:	4b62      	ldr	r3, [pc, #392]	; (8002a14 <EndEffectorWrite+0x29c>)
 800288a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b20      	cmp	r3, #32
 8002892:	d105      	bne.n	80028a0 <EndEffectorWrite+0x128>
			{
				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
 8002894:	2301      	movs	r3, #1
 8002896:	4a66      	ldr	r2, [pc, #408]	; (8002a30 <EndEffectorWrite+0x2b8>)
 8002898:	212a      	movs	r1, #42	; 0x2a
 800289a:	485e      	ldr	r0, [pc, #376]	; (8002a14 <EndEffectorWrite+0x29c>)
 800289c:	f004 fb32 	bl	8006f04 <HAL_I2C_Master_Receive_IT>
			}
		if(EndEffectorDataReadBack[0] == 0x07)	//Picked
 80028a0:	4b63      	ldr	r3, [pc, #396]	; (8002a30 <EndEffectorWrite+0x2b8>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b07      	cmp	r3, #7
 80028a6:	f040 80a2 	bne.w	80029ee <EndEffectorWrite+0x276>
			{
				TaskType *= -1;
 80028aa:	4b62      	ldr	r3, [pc, #392]	; (8002a34 <EndEffectorWrite+0x2bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	425b      	negs	r3, r3
 80028b0:	4a60      	ldr	r2, [pc, #384]	; (8002a34 <EndEffectorWrite+0x2bc>)
 80028b2:	6013      	str	r3, [r2, #0]
				EndEffectorReadFlag = 0;
 80028b4:	4b5d      	ldr	r3, [pc, #372]	; (8002a2c <EndEffectorWrite+0x2b4>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
				scheduler = 2;
 80028ba:	4b5f      	ldr	r3, [pc, #380]	; (8002a38 <EndEffectorWrite+0x2c0>)
 80028bc:	2202      	movs	r2, #2
 80028be:	601a      	str	r2, [r3, #0]
			}
		break;
 80028c0:	e095      	b.n	80029ee <EndEffectorWrite+0x276>
	case 5:
		if(EndEffectorWriteFlag == 1)
 80028c2:	4b52      	ldr	r3, [pc, #328]	; (8002a0c <EndEffectorWrite+0x294>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d114      	bne.n	80028f4 <EndEffectorWrite+0x17c>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, PlaceData, 2, 100);
 80028ca:	2364      	movs	r3, #100	; 0x64
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	2302      	movs	r3, #2
 80028d0:	4a5a      	ldr	r2, [pc, #360]	; (8002a3c <EndEffectorWrite+0x2c4>)
 80028d2:	212a      	movs	r1, #42	; 0x2a
 80028d4:	484f      	ldr	r0, [pc, #316]	; (8002a14 <EndEffectorWrite+0x29c>)
 80028d6:	f004 fa17 	bl	8006d08 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 10; //End Effector Status: Placing
 80028da:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <EndEffectorWrite+0x2a4>)
 80028dc:	220a      	movs	r2, #10
 80028de:	809a      	strh	r2, [r3, #4]
				HAL_Delay(100);
 80028e0:	2064      	movs	r0, #100	; 0x64
 80028e2:	f002 fdab 	bl	800543c <HAL_Delay>
				EndEffectorReadFlag = 1;
 80028e6:	4b51      	ldr	r3, [pc, #324]	; (8002a2c <EndEffectorWrite+0x2b4>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
				EndEffectorWriteFlag = 0;
 80028ec:	4b47      	ldr	r3, [pc, #284]	; (8002a0c <EndEffectorWrite+0x294>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	e00f      	b.n	8002914 <EndEffectorWrite+0x19c>
			}
		else if(EndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY)
 80028f4:	4b4d      	ldr	r3, [pc, #308]	; (8002a2c <EndEffectorWrite+0x2b4>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d10b      	bne.n	8002914 <EndEffectorWrite+0x19c>
 80028fc:	4b45      	ldr	r3, [pc, #276]	; (8002a14 <EndEffectorWrite+0x29c>)
 80028fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b20      	cmp	r3, #32
 8002906:	d105      	bne.n	8002914 <EndEffectorWrite+0x19c>
			{
				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
 8002908:	2301      	movs	r3, #1
 800290a:	4a49      	ldr	r2, [pc, #292]	; (8002a30 <EndEffectorWrite+0x2b8>)
 800290c:	212a      	movs	r1, #42	; 0x2a
 800290e:	4841      	ldr	r0, [pc, #260]	; (8002a14 <EndEffectorWrite+0x29c>)
 8002910:	f004 faf8 	bl	8006f04 <HAL_I2C_Master_Receive_IT>
			}
		if(EndEffectorDataReadBack[0] == 0x04)	//Placed
 8002914:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <EndEffectorWrite+0x2b8>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b04      	cmp	r3, #4
 800291a:	d16a      	bne.n	80029f2 <EndEffectorWrite+0x27a>
			{
				registerFrame[2].U16 = 2; //End Effector Status: Gripper Power
 800291c:	4b3f      	ldr	r3, [pc, #252]	; (8002a1c <EndEffectorWrite+0x2a4>)
 800291e:	2202      	movs	r2, #2
 8002920:	809a      	strh	r2, [r3, #4]
				TaskType *= -1;
 8002922:	4b44      	ldr	r3, [pc, #272]	; (8002a34 <EndEffectorWrite+0x2bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	425b      	negs	r3, r3
 8002928:	4a42      	ldr	r2, [pc, #264]	; (8002a34 <EndEffectorWrite+0x2bc>)
 800292a:	6013      	str	r3, [r2, #0]
				EndEffectorReadFlag = 0;
 800292c:	4b3f      	ldr	r3, [pc, #252]	; (8002a2c <EndEffectorWrite+0x2b4>)
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
				HoleSequence += 1;
 8002932:	4b43      	ldr	r3, [pc, #268]	; (8002a40 <EndEffectorWrite+0x2c8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3301      	adds	r3, #1
 8002938:	4a41      	ldr	r2, [pc, #260]	; (8002a40 <EndEffectorWrite+0x2c8>)
 800293a:	6013      	str	r3, [r2, #0]
				if (HoleSequence == 9)
 800293c:	4b40      	ldr	r3, [pc, #256]	; (8002a40 <EndEffectorWrite+0x2c8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b09      	cmp	r3, #9
 8002942:	d10f      	bne.n	8002964 <EndEffectorWrite+0x1ec>
				{
					HoleSequence = 0;
 8002944:	4b3e      	ldr	r3, [pc, #248]	; (8002a40 <EndEffectorWrite+0x2c8>)
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
					TaskType = 1;
 800294a:	4b3a      	ldr	r3, [pc, #232]	; (8002a34 <EndEffectorWrite+0x2bc>)
 800294c:	2201      	movs	r2, #1
 800294e:	601a      	str	r2, [r3, #0]
					registerFrame[1].U16 = 0;
 8002950:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <EndEffectorWrite+0x2a4>)
 8002952:	2200      	movs	r2, #0
 8002954:	805a      	strh	r2, [r3, #2]
					Proximity = 3;
 8002956:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <EndEffectorWrite+0x2cc>)
 8002958:	2203      	movs	r2, #3
 800295a:	601a      	str	r2, [r3, #0]
					scheduler = 5;
 800295c:	4b36      	ldr	r3, [pc, #216]	; (8002a38 <EndEffectorWrite+0x2c0>)
 800295e:	2205      	movs	r2, #5
 8002960:	601a      	str	r2, [r3, #0]
				else
				{
					scheduler = 1;
				}
			}
		break;
 8002962:	e046      	b.n	80029f2 <EndEffectorWrite+0x27a>
					scheduler = 1;
 8002964:	4b34      	ldr	r3, [pc, #208]	; (8002a38 <EndEffectorWrite+0x2c0>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]
		break;
 800296a:	e042      	b.n	80029f2 <EndEffectorWrite+0x27a>
	case 6:
		if(EndEffectorWriteFlag == 1)
 800296c:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <EndEffectorWrite+0x294>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d140      	bne.n	80029f6 <EndEffectorWrite+0x27e>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, RunModeOff, 2, 100);
 8002974:	2364      	movs	r3, #100	; 0x64
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2302      	movs	r3, #2
 800297a:	4a33      	ldr	r2, [pc, #204]	; (8002a48 <EndEffectorWrite+0x2d0>)
 800297c:	212a      	movs	r1, #42	; 0x2a
 800297e:	4825      	ldr	r0, [pc, #148]	; (8002a14 <EndEffectorWrite+0x29c>)
 8002980:	f004 f9c2 	bl	8006d08 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 8002984:	4b25      	ldr	r3, [pc, #148]	; (8002a1c <EndEffectorWrite+0x2a4>)
 8002986:	2200      	movs	r2, #0
 8002988:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <EndEffectorWrite+0x294>)
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002990:	e031      	b.n	80029f6 <EndEffectorWrite+0x27e>
	case 7:
		if(EndEffectorWriteFlag == 1)
 8002992:	4b1e      	ldr	r3, [pc, #120]	; (8002a0c <EndEffectorWrite+0x294>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d12f      	bne.n	80029fa <EndEffectorWrite+0x282>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, Emergency, 1, 100);
 800299a:	2364      	movs	r3, #100	; 0x64
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2301      	movs	r3, #1
 80029a0:	4a2a      	ldr	r2, [pc, #168]	; (8002a4c <EndEffectorWrite+0x2d4>)
 80029a2:	212a      	movs	r1, #42	; 0x2a
 80029a4:	481b      	ldr	r0, [pc, #108]	; (8002a14 <EndEffectorWrite+0x29c>)
 80029a6:	f004 f9af 	bl	8006d08 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 80029aa:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <EndEffectorWrite+0x2a4>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 80029b0:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <EndEffectorWrite+0x294>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
			}
		break;
 80029b6:	e020      	b.n	80029fa <EndEffectorWrite+0x282>
	case 8:
		if(EndEffectorWriteFlag == 1)
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <EndEffectorWrite+0x294>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d11e      	bne.n	80029fe <EndEffectorWrite+0x286>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, QuitEmergency, 4, 100);
 80029c0:	2364      	movs	r3, #100	; 0x64
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2304      	movs	r3, #4
 80029c6:	4a22      	ldr	r2, [pc, #136]	; (8002a50 <EndEffectorWrite+0x2d8>)
 80029c8:	212a      	movs	r1, #42	; 0x2a
 80029ca:	4812      	ldr	r0, [pc, #72]	; (8002a14 <EndEffectorWrite+0x29c>)
 80029cc:	f004 f99c 	bl	8006d08 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <EndEffectorWrite+0x2a4>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 80029d6:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <EndEffectorWrite+0x294>)
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
			}
		break;
 80029dc:	e00f      	b.n	80029fe <EndEffectorWrite+0x286>
		break;
 80029de:	bf00      	nop
 80029e0:	e00e      	b.n	8002a00 <EndEffectorWrite+0x288>
		break;
 80029e2:	bf00      	nop
 80029e4:	e00c      	b.n	8002a00 <EndEffectorWrite+0x288>
		break;
 80029e6:	bf00      	nop
 80029e8:	e00a      	b.n	8002a00 <EndEffectorWrite+0x288>
		break;
 80029ea:	bf00      	nop
 80029ec:	e008      	b.n	8002a00 <EndEffectorWrite+0x288>
		break;
 80029ee:	bf00      	nop
 80029f0:	e006      	b.n	8002a00 <EndEffectorWrite+0x288>
		break;
 80029f2:	bf00      	nop
 80029f4:	e004      	b.n	8002a00 <EndEffectorWrite+0x288>
		break;
 80029f6:	bf00      	nop
 80029f8:	e002      	b.n	8002a00 <EndEffectorWrite+0x288>
		break;
 80029fa:	bf00      	nop
 80029fc:	e000      	b.n	8002a00 <EndEffectorWrite+0x288>
		break;
 80029fe:	bf00      	nop
	}
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000b18 	.word	0x20000b18
 8002a0c:	20000b10 	.word	0x20000b10
 8002a10:	20000228 	.word	0x20000228
 8002a14:	200004f8 	.word	0x200004f8
 8002a18:	20000234 	.word	0x20000234
 8002a1c:	20000ff8 	.word	0x20000ff8
 8002a20:	20000238 	.word	0x20000238
 8002a24:	2000023c 	.word	0x2000023c
 8002a28:	20000244 	.word	0x20000244
 8002a2c:	20000b11 	.word	0x20000b11
 8002a30:	20000b14 	.word	0x20000b14
 8002a34:	20000204 	.word	0x20000204
 8002a38:	20000200 	.word	0x20000200
 8002a3c:	20000248 	.word	0x20000248
 8002a40:	20000964 	.word	0x20000964
 8002a44:	2000024c 	.word	0x2000024c
 8002a48:	20000240 	.word	0x20000240
 8002a4c:	2000022c 	.word	0x2000022c
 8002a50:	20000230 	.word	0x20000230
 8002a54:	00000000 	.word	0x00000000

08002a58 <VelocityApprox>:

void VelocityApprox()
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
	static int16_t lastposition = 0;
	velocity = (position - lastposition)/0.001; //pulse/s
 8002a5c:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <VelocityApprox+0x50>)
 8002a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a62:	461a      	mov	r2, r3
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <VelocityApprox+0x54>)
 8002a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd61 	bl	8000534 <__aeabi_i2d>
 8002a72:	a30b      	add	r3, pc, #44	; (adr r3, 8002aa0 <VelocityApprox+0x48>)
 8002a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a78:	f7fd fef0 	bl	800085c <__aeabi_ddiv>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	f7fe f8b8 	bl	8000bf8 <__aeabi_d2f>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <VelocityApprox+0x58>)
 8002a8c:	6013      	str	r3, [r2, #0]
	lastposition = position;
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <VelocityApprox+0x50>)
 8002a90:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <VelocityApprox+0x54>)
 8002a96:	801a      	strh	r2, [r3, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	f3af 8000 	nop.w
 8002aa0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002aa4:	3f50624d 	.word	0x3f50624d
 8002aa8:	200009ac 	.word	0x200009ac
 8002aac:	200010f4 	.word	0x200010f4
 8002ab0:	200009d0 	.word	0x200009d0
 8002ab4:	00000000 	.word	0x00000000

08002ab8 <AccelerationApprox>:

void AccelerationApprox()
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	static float LastVelo = 0;
	Accel = (velocity - LastVelo)/0.001;	//pulse/s^2
 8002abc:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <AccelerationApprox+0x50>)
 8002abe:	ed93 7a00 	vldr	s14, [r3]
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <AccelerationApprox+0x54>)
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002acc:	ee17 0a90 	vmov	r0, s15
 8002ad0:	f7fd fd42 	bl	8000558 <__aeabi_f2d>
 8002ad4:	a30a      	add	r3, pc, #40	; (adr r3, 8002b00 <AccelerationApprox+0x48>)
 8002ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ada:	f7fd febf 	bl	800085c <__aeabi_ddiv>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f7fe f887 	bl	8000bf8 <__aeabi_d2f>
 8002aea:	4603      	mov	r3, r0
 8002aec:	4a08      	ldr	r2, [pc, #32]	; (8002b10 <AccelerationApprox+0x58>)
 8002aee:	6013      	str	r3, [r2, #0]
	LastVelo = velocity;
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <AccelerationApprox+0x50>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a05      	ldr	r2, [pc, #20]	; (8002b0c <AccelerationApprox+0x54>)
 8002af6:	6013      	str	r3, [r2, #0]

}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	f3af 8000 	nop.w
 8002b00:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b04:	3f50624d 	.word	0x3f50624d
 8002b08:	200009d0 	.word	0x200009d0
 8002b0c:	200010f8 	.word	0x200010f8
 8002b10:	200009d4 	.word	0x200009d4
 8002b14:	00000000 	.word	0x00000000

08002b18 <Routine>:

void Routine()
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
	position_f = position;
 8002b1c:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <Routine+0xa8>)
 8002b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b22:	ee07 3a90 	vmov	s15, r3
 8002b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b2a:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <Routine+0xac>)
 8002b2c:	edc3 7a00 	vstr	s15, [r3]
	Yactualposition = position_f*0.45;			//mm*10
 8002b30:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <Routine+0xac>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fd fd0f 	bl	8000558 <__aeabi_f2d>
 8002b3a:	a31f      	add	r3, pc, #124	; (adr r3, 8002bb8 <Routine+0xa0>)
 8002b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b40:	f7fd fd62 	bl	8000608 <__aeabi_dmul>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f7fe f80c 	bl	8000b68 <__aeabi_d2iz>
 8002b50:	4603      	mov	r3, r0
 8002b52:	b21a      	sxth	r2, r3
 8002b54:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <Routine+0xb0>)
 8002b56:	801a      	strh	r2, [r3, #0]
	registerFrame[17].U16 = Yactualposition;	//mm*10			//Y Actual Position
 8002b58:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <Routine+0xb0>)
 8002b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <Routine+0xb4>)
 8002b62:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[18].U16 = velocity*0.45;		//mm/s*10		//Y Actual Speed
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <Routine+0xb8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fcf5 	bl	8000558 <__aeabi_f2d>
 8002b6e:	a312      	add	r3, pc, #72	; (adr r3, 8002bb8 <Routine+0xa0>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f7fd fd48 	bl	8000608 <__aeabi_dmul>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f7fe f81a 	bl	8000bb8 <__aeabi_d2uiz>
 8002b84:	4603      	mov	r3, r0
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <Routine+0xb4>)
 8002b8a:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[19].U16 = Accel*0.45; 		//mm/s^2*10		//Y Actual Acceleration
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <Routine+0xbc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fce1 	bl	8000558 <__aeabi_f2d>
 8002b96:	a308      	add	r3, pc, #32	; (adr r3, 8002bb8 <Routine+0xa0>)
 8002b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9c:	f7fd fd34 	bl	8000608 <__aeabi_dmul>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f7fe f806 	bl	8000bb8 <__aeabi_d2uiz>
 8002bac:	4603      	mov	r3, r0
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <Routine+0xb4>)
 8002bb2:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8002bb4:	bf00      	nop
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	cccccccd 	.word	0xcccccccd
 8002bbc:	3fdccccc 	.word	0x3fdccccc
 8002bc0:	200009ac 	.word	0x200009ac
 8002bc4:	200009b0 	.word	0x200009b0
 8002bc8:	200009b4 	.word	0x200009b4
 8002bcc:	20000ff8 	.word	0x20000ff8
 8002bd0:	200009d0 	.word	0x200009d0
 8002bd4:	200009d4 	.word	0x200009d4

08002bd8 <PIDcal>:

float PIDcal()
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
	//position control
	errorposition = setposition - position;
 8002bdc:	4b3d      	ldr	r3, [pc, #244]	; (8002cd4 <PIDcal+0xfc>)
 8002bde:	ed93 7a00 	vldr	s14, [r3]
 8002be2:	4b3d      	ldr	r3, [pc, #244]	; (8002cd8 <PIDcal+0x100>)
 8002be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002be8:	ee07 3a90 	vmov	s15, r3
 8002bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bf4:	4b39      	ldr	r3, [pc, #228]	; (8002cdc <PIDcal+0x104>)
 8002bf6:	edc3 7a00 	vstr	s15, [r3]

	if(errorposition >= 22)
 8002bfa:	4b38      	ldr	r3, [pc, #224]	; (8002cdc <PIDcal+0x104>)
 8002bfc:	edd3 7a00 	vldr	s15, [r3]
 8002c00:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0c:	db0a      	blt.n	8002c24 <PIDcal+0x4c>
	{
		errorposition += 22;
 8002c0e:	4b33      	ldr	r3, [pc, #204]	; (8002cdc <PIDcal+0x104>)
 8002c10:	edd3 7a00 	vldr	s15, [r3]
 8002c14:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002c18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c1c:	4b2f      	ldr	r3, [pc, #188]	; (8002cdc <PIDcal+0x104>)
 8002c1e:	edc3 7a00 	vstr	s15, [r3]
 8002c22:	e013      	b.n	8002c4c <PIDcal+0x74>
	}
	else if(errorposition <= -22)
 8002c24:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <PIDcal+0x104>)
 8002c26:	edd3 7a00 	vldr	s15, [r3]
 8002c2a:	eebb 7a06 	vmov.f32	s14, #182	; 0xc1b00000 -22.0
 8002c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c36:	d809      	bhi.n	8002c4c <PIDcal+0x74>
	{
		errorposition -= 22;
 8002c38:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <PIDcal+0x104>)
 8002c3a:	edd3 7a00 	vldr	s15, [r3]
 8002c3e:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002c42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c46:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <PIDcal+0x104>)
 8002c48:	edc3 7a00 	vstr	s15, [r3]
	}

	integral_p = integral_p + errorposition;
 8002c4c:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <PIDcal+0x108>)
 8002c4e:	ed93 7a00 	vldr	s14, [r3]
 8002c52:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <PIDcal+0x104>)
 8002c54:	edd3 7a00 	vldr	s15, [r3]
 8002c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5c:	4b20      	ldr	r3, [pc, #128]	; (8002ce0 <PIDcal+0x108>)
 8002c5e:	edc3 7a00 	vstr	s15, [r3]
	derivative_p = errorposition - pre_errorposition;
 8002c62:	4b1e      	ldr	r3, [pc, #120]	; (8002cdc <PIDcal+0x104>)
 8002c64:	ed93 7a00 	vldr	s14, [r3]
 8002c68:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <PIDcal+0x10c>)
 8002c6a:	edd3 7a00 	vldr	s15, [r3]
 8002c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c72:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <PIDcal+0x110>)
 8002c74:	edc3 7a00 	vstr	s15, [r3]
	u_position = Kp_p*errorposition + Ki_p*integral_p + Kd_p*derivative_p;
 8002c78:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <PIDcal+0x114>)
 8002c7a:	ed93 7a00 	vldr	s14, [r3]
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <PIDcal+0x104>)
 8002c80:	edd3 7a00 	vldr	s15, [r3]
 8002c84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c88:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <PIDcal+0x118>)
 8002c8a:	edd3 6a00 	vldr	s13, [r3]
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <PIDcal+0x108>)
 8002c90:	edd3 7a00 	vldr	s15, [r3]
 8002c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c9c:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <PIDcal+0x11c>)
 8002c9e:	edd3 6a00 	vldr	s13, [r3]
 8002ca2:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <PIDcal+0x110>)
 8002ca4:	edd3 7a00 	vldr	s15, [r3]
 8002ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <PIDcal+0x120>)
 8002cb2:	edc3 7a00 	vstr	s15, [r3]

	pre_errorposition = errorposition;
 8002cb6:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <PIDcal+0x104>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <PIDcal+0x10c>)
 8002cbc:	6013      	str	r3, [r2, #0]
//	duty = Kp_v*errorvelocity + Ki_v*integral_v + Kd_v*derivative_v;
//
//	pre_errorvelocity = errorvelocity;

//	return duty;
	return u_position;
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <PIDcal+0x120>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	ee07 3a90 	vmov	s15, r3
}
 8002cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	200009b8 	.word	0x200009b8
 8002cd8:	200009ac 	.word	0x200009ac
 8002cdc:	200009bc 	.word	0x200009bc
 8002ce0:	200009c8 	.word	0x200009c8
 8002ce4:	200009c4 	.word	0x200009c4
 8002ce8:	200009cc 	.word	0x200009cc
 8002cec:	20000218 	.word	0x20000218
 8002cf0:	2000021c 	.word	0x2000021c
 8002cf4:	20000220 	.word	0x20000220
 8002cf8:	200009c0 	.word	0x200009c0

08002cfc <JoystickPinUpdate>:

void JoystickPinUpdate()
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
	  GetPositionButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8002d00:	2140      	movs	r1, #64	; 0x40
 8002d02:	4875      	ldr	r0, [pc, #468]	; (8002ed8 <JoystickPinUpdate+0x1dc>)
 8002d04:	f003 fe72 	bl	80069ec <HAL_GPIO_ReadPin>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4b73      	ldr	r3, [pc, #460]	; (8002edc <JoystickPinUpdate+0x1e0>)
 8002d0e:	605a      	str	r2, [r3, #4]
	  if (GetPositionButton.last == 1 && GetPositionButton.current == 0)
 8002d10:	4b72      	ldr	r3, [pc, #456]	; (8002edc <JoystickPinUpdate+0x1e0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d107      	bne.n	8002d28 <JoystickPinUpdate+0x2c>
 8002d18:	4b70      	ldr	r3, [pc, #448]	; (8002edc <JoystickPinUpdate+0x1e0>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d103      	bne.n	8002d28 <JoystickPinUpdate+0x2c>
	  {
		  GetPositionButton.flag = 1;
 8002d20:	4b6e      	ldr	r3, [pc, #440]	; (8002edc <JoystickPinUpdate+0x1e0>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	609a      	str	r2, [r3, #8]
 8002d26:	e002      	b.n	8002d2e <JoystickPinUpdate+0x32>
	  }
	  else
	  {
		  GetPositionButton.flag = 0;
 8002d28:	4b6c      	ldr	r3, [pc, #432]	; (8002edc <JoystickPinUpdate+0x1e0>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
	  }
	  GetPositionButton.last = GetPositionButton.current;
 8002d2e:	4b6b      	ldr	r3, [pc, #428]	; (8002edc <JoystickPinUpdate+0x1e0>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4a6a      	ldr	r2, [pc, #424]	; (8002edc <JoystickPinUpdate+0x1e0>)
 8002d34:	6013      	str	r3, [r2, #0]

	  ResetButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8002d36:	2120      	movs	r1, #32
 8002d38:	4869      	ldr	r0, [pc, #420]	; (8002ee0 <JoystickPinUpdate+0x1e4>)
 8002d3a:	f003 fe57 	bl	80069ec <HAL_GPIO_ReadPin>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b68      	ldr	r3, [pc, #416]	; (8002ee4 <JoystickPinUpdate+0x1e8>)
 8002d44:	605a      	str	r2, [r3, #4]
	  if (ResetButton.last == 1 && ResetButton.current == 0)
 8002d46:	4b67      	ldr	r3, [pc, #412]	; (8002ee4 <JoystickPinUpdate+0x1e8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d107      	bne.n	8002d5e <JoystickPinUpdate+0x62>
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <JoystickPinUpdate+0x1e8>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d103      	bne.n	8002d5e <JoystickPinUpdate+0x62>
	  {
		ResetButton.flag = 1;
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <JoystickPinUpdate+0x1e8>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	e002      	b.n	8002d64 <JoystickPinUpdate+0x68>
	  }
	  else
	  {
		  ResetButton.flag = 0;
 8002d5e:	4b61      	ldr	r3, [pc, #388]	; (8002ee4 <JoystickPinUpdate+0x1e8>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
	  }
	  ResetButton.last = ResetButton.current;
 8002d64:	4b5f      	ldr	r3, [pc, #380]	; (8002ee4 <JoystickPinUpdate+0x1e8>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4a5e      	ldr	r2, [pc, #376]	; (8002ee4 <JoystickPinUpdate+0x1e8>)
 8002d6a:	6013      	str	r3, [r2, #0]

	  FineButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8002d6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d70:	485b      	ldr	r0, [pc, #364]	; (8002ee0 <JoystickPinUpdate+0x1e4>)
 8002d72:	f003 fe3b 	bl	80069ec <HAL_GPIO_ReadPin>
 8002d76:	4603      	mov	r3, r0
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b5b      	ldr	r3, [pc, #364]	; (8002ee8 <JoystickPinUpdate+0x1ec>)
 8002d7c:	605a      	str	r2, [r3, #4]
	  if (FineButton.last == 1 && FineButton.current == 0)
 8002d7e:	4b5a      	ldr	r3, [pc, #360]	; (8002ee8 <JoystickPinUpdate+0x1ec>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d107      	bne.n	8002d96 <JoystickPinUpdate+0x9a>
 8002d86:	4b58      	ldr	r3, [pc, #352]	; (8002ee8 <JoystickPinUpdate+0x1ec>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d103      	bne.n	8002d96 <JoystickPinUpdate+0x9a>
	  {
		  FineButton.flag = 1;
 8002d8e:	4b56      	ldr	r3, [pc, #344]	; (8002ee8 <JoystickPinUpdate+0x1ec>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	e002      	b.n	8002d9c <JoystickPinUpdate+0xa0>
	  }
	  else
	  {
		  FineButton.flag = 0;
 8002d96:	4b54      	ldr	r3, [pc, #336]	; (8002ee8 <JoystickPinUpdate+0x1ec>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	609a      	str	r2, [r3, #8]
	  }
	  FineButton.last = FineButton.current;
 8002d9c:	4b52      	ldr	r3, [pc, #328]	; (8002ee8 <JoystickPinUpdate+0x1ec>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a51      	ldr	r2, [pc, #324]	; (8002ee8 <JoystickPinUpdate+0x1ec>)
 8002da2:	6013      	str	r3, [r2, #0]

	  RoughButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8002da4:	2120      	movs	r1, #32
 8002da6:	484c      	ldr	r0, [pc, #304]	; (8002ed8 <JoystickPinUpdate+0x1dc>)
 8002da8:	f003 fe20 	bl	80069ec <HAL_GPIO_ReadPin>
 8002dac:	4603      	mov	r3, r0
 8002dae:	461a      	mov	r2, r3
 8002db0:	4b4e      	ldr	r3, [pc, #312]	; (8002eec <JoystickPinUpdate+0x1f0>)
 8002db2:	605a      	str	r2, [r3, #4]
	  if (RoughButton.last == 1 && RoughButton.current == 0)
 8002db4:	4b4d      	ldr	r3, [pc, #308]	; (8002eec <JoystickPinUpdate+0x1f0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d107      	bne.n	8002dcc <JoystickPinUpdate+0xd0>
 8002dbc:	4b4b      	ldr	r3, [pc, #300]	; (8002eec <JoystickPinUpdate+0x1f0>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d103      	bne.n	8002dcc <JoystickPinUpdate+0xd0>
	  {
		  RoughButton.flag = 1;
 8002dc4:	4b49      	ldr	r3, [pc, #292]	; (8002eec <JoystickPinUpdate+0x1f0>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	609a      	str	r2, [r3, #8]
 8002dca:	e002      	b.n	8002dd2 <JoystickPinUpdate+0xd6>
	  }
	  else
	  {
		  RoughButton.flag = 0;
 8002dcc:	4b47      	ldr	r3, [pc, #284]	; (8002eec <JoystickPinUpdate+0x1f0>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	609a      	str	r2, [r3, #8]
	  }
	  RoughButton.last = RoughButton.current;
 8002dd2:	4b46      	ldr	r3, [pc, #280]	; (8002eec <JoystickPinUpdate+0x1f0>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4a45      	ldr	r2, [pc, #276]	; (8002eec <JoystickPinUpdate+0x1f0>)
 8002dd8:	6013      	str	r3, [r2, #0]

	  HomingButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8002dda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dde:	483e      	ldr	r0, [pc, #248]	; (8002ed8 <JoystickPinUpdate+0x1dc>)
 8002de0:	f003 fe04 	bl	80069ec <HAL_GPIO_ReadPin>
 8002de4:	4603      	mov	r3, r0
 8002de6:	461a      	mov	r2, r3
 8002de8:	4b41      	ldr	r3, [pc, #260]	; (8002ef0 <JoystickPinUpdate+0x1f4>)
 8002dea:	605a      	str	r2, [r3, #4]
	  if (HomingButton.last == 1 && HomingButton.current == 0)
 8002dec:	4b40      	ldr	r3, [pc, #256]	; (8002ef0 <JoystickPinUpdate+0x1f4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d107      	bne.n	8002e04 <JoystickPinUpdate+0x108>
 8002df4:	4b3e      	ldr	r3, [pc, #248]	; (8002ef0 <JoystickPinUpdate+0x1f4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d103      	bne.n	8002e04 <JoystickPinUpdate+0x108>
	  {
		  HomingButton.flag = 1;
 8002dfc:	4b3c      	ldr	r3, [pc, #240]	; (8002ef0 <JoystickPinUpdate+0x1f4>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	609a      	str	r2, [r3, #8]
 8002e02:	e002      	b.n	8002e0a <JoystickPinUpdate+0x10e>
	  }
	  else
	  {
		  HomingButton.flag = 0;
 8002e04:	4b3a      	ldr	r3, [pc, #232]	; (8002ef0 <JoystickPinUpdate+0x1f4>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]
	  }
	  HomingButton.last = HomingButton.current;
 8002e0a:	4b39      	ldr	r3, [pc, #228]	; (8002ef0 <JoystickPinUpdate+0x1f4>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4a38      	ldr	r2, [pc, #224]	; (8002ef0 <JoystickPinUpdate+0x1f4>)
 8002e10:	6013      	str	r3, [r2, #0]

	  LaserUI.current = registerFrame[2].U16;
 8002e12:	4b38      	ldr	r3, [pc, #224]	; (8002ef4 <JoystickPinUpdate+0x1f8>)
 8002e14:	889b      	ldrh	r3, [r3, #4]
 8002e16:	461a      	mov	r2, r3
 8002e18:	4b37      	ldr	r3, [pc, #220]	; (8002ef8 <JoystickPinUpdate+0x1fc>)
 8002e1a:	605a      	str	r2, [r3, #4]
	  if (LaserUI.last == 0 && LaserUI.current == 1)
 8002e1c:	4b36      	ldr	r3, [pc, #216]	; (8002ef8 <JoystickPinUpdate+0x1fc>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <JoystickPinUpdate+0x138>
 8002e24:	4b34      	ldr	r3, [pc, #208]	; (8002ef8 <JoystickPinUpdate+0x1fc>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d103      	bne.n	8002e34 <JoystickPinUpdate+0x138>
	  {
		  LaserUI.flag = 1;	//Rising Edge
 8002e2c:	4b32      	ldr	r3, [pc, #200]	; (8002ef8 <JoystickPinUpdate+0x1fc>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	e00e      	b.n	8002e52 <JoystickPinUpdate+0x156>
	  }
	  else if(LaserUI.last == 1 && LaserUI.current == 0)
 8002e34:	4b30      	ldr	r3, [pc, #192]	; (8002ef8 <JoystickPinUpdate+0x1fc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d107      	bne.n	8002e4c <JoystickPinUpdate+0x150>
 8002e3c:	4b2e      	ldr	r3, [pc, #184]	; (8002ef8 <JoystickPinUpdate+0x1fc>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d103      	bne.n	8002e4c <JoystickPinUpdate+0x150>
	  {
		  LaserUI.flag = 2;	//Falling Edge
 8002e44:	4b2c      	ldr	r3, [pc, #176]	; (8002ef8 <JoystickPinUpdate+0x1fc>)
 8002e46:	2202      	movs	r2, #2
 8002e48:	609a      	str	r2, [r3, #8]
 8002e4a:	e002      	b.n	8002e52 <JoystickPinUpdate+0x156>
	  }
	  else
	  {
		  LaserUI.flag = 0;
 8002e4c:	4b2a      	ldr	r3, [pc, #168]	; (8002ef8 <JoystickPinUpdate+0x1fc>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
	  }
	  LaserUI.last = LaserUI.current;
 8002e52:	4b29      	ldr	r3, [pc, #164]	; (8002ef8 <JoystickPinUpdate+0x1fc>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4a28      	ldr	r2, [pc, #160]	; (8002ef8 <JoystickPinUpdate+0x1fc>)
 8002e58:	6013      	str	r3, [r2, #0]

	  GripperUI.current = registerFrame[2].U16;
 8002e5a:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <JoystickPinUpdate+0x1f8>)
 8002e5c:	889b      	ldrh	r3, [r3, #4]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4b26      	ldr	r3, [pc, #152]	; (8002efc <JoystickPinUpdate+0x200>)
 8002e62:	605a      	str	r2, [r3, #4]
	  if (GripperUI.last == 0 && GripperUI.current == 2)
 8002e64:	4b25      	ldr	r3, [pc, #148]	; (8002efc <JoystickPinUpdate+0x200>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d107      	bne.n	8002e7c <JoystickPinUpdate+0x180>
 8002e6c:	4b23      	ldr	r3, [pc, #140]	; (8002efc <JoystickPinUpdate+0x200>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d103      	bne.n	8002e7c <JoystickPinUpdate+0x180>
	  {
		  GripperUI.flag = 1; //Gripper On
 8002e74:	4b21      	ldr	r3, [pc, #132]	; (8002efc <JoystickPinUpdate+0x200>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	e026      	b.n	8002eca <JoystickPinUpdate+0x1ce>
	  }
	  else if(GripperUI.last == 2 && GripperUI.current == 0)
 8002e7c:	4b1f      	ldr	r3, [pc, #124]	; (8002efc <JoystickPinUpdate+0x200>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d107      	bne.n	8002e94 <JoystickPinUpdate+0x198>
 8002e84:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <JoystickPinUpdate+0x200>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d103      	bne.n	8002e94 <JoystickPinUpdate+0x198>
	  {
		  GripperUI.flag = 2; //Gripper Off
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <JoystickPinUpdate+0x200>)
 8002e8e:	2202      	movs	r2, #2
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	e01a      	b.n	8002eca <JoystickPinUpdate+0x1ce>
	  }
	  else if(GripperUI.last == 2 && GripperUI.current == 6)
 8002e94:	4b19      	ldr	r3, [pc, #100]	; (8002efc <JoystickPinUpdate+0x200>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d107      	bne.n	8002eac <JoystickPinUpdate+0x1b0>
 8002e9c:	4b17      	ldr	r3, [pc, #92]	; (8002efc <JoystickPinUpdate+0x200>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b06      	cmp	r3, #6
 8002ea2:	d103      	bne.n	8002eac <JoystickPinUpdate+0x1b0>
	  {
		  GripperUI.flag = 3; //Gripper Pick
 8002ea4:	4b15      	ldr	r3, [pc, #84]	; (8002efc <JoystickPinUpdate+0x200>)
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	e00e      	b.n	8002eca <JoystickPinUpdate+0x1ce>
	  }
	  else if(GripperUI.last == 2 && GripperUI.current == 10)
 8002eac:	4b13      	ldr	r3, [pc, #76]	; (8002efc <JoystickPinUpdate+0x200>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d107      	bne.n	8002ec4 <JoystickPinUpdate+0x1c8>
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <JoystickPinUpdate+0x200>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b0a      	cmp	r3, #10
 8002eba:	d103      	bne.n	8002ec4 <JoystickPinUpdate+0x1c8>
	  {
		  GripperUI.flag = 4; //Gripper Place
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <JoystickPinUpdate+0x200>)
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	e002      	b.n	8002eca <JoystickPinUpdate+0x1ce>
	  }
	  else
	  {
		  GripperUI.flag = 0;
 8002ec4:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <JoystickPinUpdate+0x200>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]
	  }
	  GripperUI.last = GripperUI.current;
 8002eca:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <JoystickPinUpdate+0x200>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4a0b      	ldr	r2, [pc, #44]	; (8002efc <JoystickPinUpdate+0x200>)
 8002ed0:	6013      	str	r3, [r2, #0]
}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40020400 	.word	0x40020400
 8002edc:	20000ab0 	.word	0x20000ab0
 8002ee0:	40020000 	.word	0x40020000
 8002ee4:	20000abc 	.word	0x20000abc
 8002ee8:	20000ac8 	.word	0x20000ac8
 8002eec:	20000ad4 	.word	0x20000ad4
 8002ef0:	20000ae0 	.word	0x20000ae0
 8002ef4:	20000ff8 	.word	0x20000ff8
 8002ef8:	20000aec 	.word	0x20000aec
 8002efc:	20000af8 	.word	0x20000af8

08002f00 <JoystickControl>:

void JoystickControl()
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
	if(RoughButton.flag == 1)
 8002f04:	4b5e      	ldr	r3, [pc, #376]	; (8003080 <JoystickControl+0x180>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d106      	bne.n	8002f1a <JoystickControl+0x1a>
	{
		JoySpeed = 0;
 8002f0c:	4b5d      	ldr	r3, [pc, #372]	; (8003084 <JoystickControl+0x184>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
		RoughButton.flag = 0;
 8002f12:	4b5b      	ldr	r3, [pc, #364]	; (8003080 <JoystickControl+0x180>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	e014      	b.n	8002f44 <JoystickControl+0x44>
	}
	else if(FineButton.flag == 1)
 8002f1a:	4b5b      	ldr	r3, [pc, #364]	; (8003088 <JoystickControl+0x188>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d106      	bne.n	8002f30 <JoystickControl+0x30>
	{
		JoySpeed = 1;
 8002f22:	4b58      	ldr	r3, [pc, #352]	; (8003084 <JoystickControl+0x184>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
		FineButton.flag = 0;
 8002f28:	4b57      	ldr	r3, [pc, #348]	; (8003088 <JoystickControl+0x188>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
 8002f2e:	e009      	b.n	8002f44 <JoystickControl+0x44>
	}
	else if(HomingButton.flag == 1)
 8002f30:	4b56      	ldr	r3, [pc, #344]	; (800308c <JoystickControl+0x18c>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d105      	bne.n	8002f44 <JoystickControl+0x44>
	{
		JoySpeed = 2;
 8002f38:	4b52      	ldr	r3, [pc, #328]	; (8003084 <JoystickControl+0x184>)
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	601a      	str	r2, [r3, #0]
		HomingButton.flag = 0;
 8002f3e:	4b53      	ldr	r3, [pc, #332]	; (800308c <JoystickControl+0x18c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
	}

	switch(JoySpeed)
 8002f44:	4b4f      	ldr	r3, [pc, #316]	; (8003084 <JoystickControl+0x184>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	f000 808a 	beq.w	8003062 <JoystickControl+0x162>
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	f300 8093 	bgt.w	800307a <JoystickControl+0x17a>
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <JoystickControl+0x5e>
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d041      	beq.n	8002fe0 <JoystickControl+0xe0>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
		Homing();
		break;
	}
}
 8002f5c:	e08d      	b.n	800307a <JoystickControl+0x17a>
		if(XYSwitch[1] > 3000)
 8002f5e:	4b4c      	ldr	r3, [pc, #304]	; (8003090 <JoystickControl+0x190>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002f66:	4293      	cmp	r3, r2
 8002f68:	dd09      	ble.n	8002f7e <JoystickControl+0x7e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002f6a:	4b4a      	ldr	r3, [pc, #296]	; (8003094 <JoystickControl+0x194>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,15000);
 8002f72:	4b48      	ldr	r3, [pc, #288]	; (8003094 <JoystickControl+0x194>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002f7a:	635a      	str	r2, [r3, #52]	; 0x34
 8002f7c:	e016      	b.n	8002fac <JoystickControl+0xac>
		else if(XYSwitch[1] < 1000)
 8002f7e:	4b44      	ldr	r3, [pc, #272]	; (8003090 <JoystickControl+0x190>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f86:	da09      	bge.n	8002f9c <JoystickControl+0x9c>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,15000);
 8002f88:	4b42      	ldr	r3, [pc, #264]	; (8003094 <JoystickControl+0x194>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002f92:	4b40      	ldr	r3, [pc, #256]	; (8003094 <JoystickControl+0x194>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	635a      	str	r2, [r3, #52]	; 0x34
 8002f9a:	e007      	b.n	8002fac <JoystickControl+0xac>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002f9c:	4b3d      	ldr	r3, [pc, #244]	; (8003094 <JoystickControl+0x194>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002fa4:	4b3b      	ldr	r3, [pc, #236]	; (8003094 <JoystickControl+0x194>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 3000)
 8002fac:	4b38      	ldr	r3, [pc, #224]	; (8003090 <JoystickControl+0x190>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	dd04      	ble.n	8002fc2 <JoystickControl+0xc2>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 8002fb8:	4b37      	ldr	r3, [pc, #220]	; (8003098 <JoystickControl+0x198>)
 8002fba:	2204      	movs	r2, #4
 8002fbc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002fc0:	e05b      	b.n	800307a <JoystickControl+0x17a>
		else if(XYSwitch[0] < 1000)
 8002fc2:	4b33      	ldr	r3, [pc, #204]	; (8003090 <JoystickControl+0x190>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fca:	da04      	bge.n	8002fd6 <JoystickControl+0xd6>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 8002fcc:	4b32      	ldr	r3, [pc, #200]	; (8003098 <JoystickControl+0x198>)
 8002fce:	2208      	movs	r2, #8
 8002fd0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002fd4:	e051      	b.n	800307a <JoystickControl+0x17a>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 8002fd6:	4b30      	ldr	r3, [pc, #192]	; (8003098 <JoystickControl+0x198>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002fde:	e04c      	b.n	800307a <JoystickControl+0x17a>
		if(XYSwitch[1] > 3000)
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <JoystickControl+0x190>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	dd09      	ble.n	8003000 <JoystickControl+0x100>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002fec:	4b29      	ldr	r3, [pc, #164]	; (8003094 <JoystickControl+0x194>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,8000);
 8002ff4:	4b27      	ldr	r3, [pc, #156]	; (8003094 <JoystickControl+0x194>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ffe:	e016      	b.n	800302e <JoystickControl+0x12e>
		else if(XYSwitch[1] < 1000)
 8003000:	4b23      	ldr	r3, [pc, #140]	; (8003090 <JoystickControl+0x190>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003008:	da09      	bge.n	800301e <JoystickControl+0x11e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,8000);
 800300a:	4b22      	ldr	r3, [pc, #136]	; (8003094 <JoystickControl+0x194>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003012:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8003014:	4b1f      	ldr	r3, [pc, #124]	; (8003094 <JoystickControl+0x194>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2200      	movs	r2, #0
 800301a:	635a      	str	r2, [r3, #52]	; 0x34
 800301c:	e007      	b.n	800302e <JoystickControl+0x12e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800301e:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <JoystickControl+0x194>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2200      	movs	r2, #0
 8003024:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <JoystickControl+0x194>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2200      	movs	r2, #0
 800302c:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 3000)
 800302e:	4b18      	ldr	r3, [pc, #96]	; (8003090 <JoystickControl+0x190>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003036:	4293      	cmp	r3, r2
 8003038:	dd04      	ble.n	8003044 <JoystickControl+0x144>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 800303a:	4b17      	ldr	r3, [pc, #92]	; (8003098 <JoystickControl+0x198>)
 800303c:	2204      	movs	r2, #4
 800303e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8003042:	e01a      	b.n	800307a <JoystickControl+0x17a>
		else if(XYSwitch[0] < 1000)
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <JoystickControl+0x190>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800304c:	da04      	bge.n	8003058 <JoystickControl+0x158>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 800304e:	4b12      	ldr	r3, [pc, #72]	; (8003098 <JoystickControl+0x198>)
 8003050:	2208      	movs	r2, #8
 8003052:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8003056:	e010      	b.n	800307a <JoystickControl+0x17a>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 8003058:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <JoystickControl+0x198>)
 800305a:	2200      	movs	r2, #0
 800305c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8003060:	e00b      	b.n	800307a <JoystickControl+0x17a>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <JoystickControl+0x194>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2200      	movs	r2, #0
 8003068:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
 800306a:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <JoystickControl+0x194>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003072:	635a      	str	r2, [r3, #52]	; 0x34
		Homing();
 8003074:	f7ff fb20 	bl	80026b8 <Homing>
		break;
 8003078:	bf00      	nop
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000ad4 	.word	0x20000ad4
 8003084:	20000b0c 	.word	0x20000b0c
 8003088:	20000ac8 	.word	0x20000ac8
 800308c:	20000ae0 	.word	0x20000ae0
 8003090:	20000b04 	.word	0x20000b04
 8003094:	2000054c 	.word	0x2000054c
 8003098:	20000ff8 	.word	0x20000ff8
 800309c:	00000000 	.word	0x00000000

080030a0 <JoystickLocationState>:

void JoystickLocationState()
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	ed2d 8b02 	vpush	{d8}
 80030a6:	af00      	add	r7, sp, #0
	if(registerFrame[1].U16 == 1)	//Base System Status: Set Pick Tray
 80030a8:	4b61      	ldr	r3, [pc, #388]	; (8003230 <JoystickLocationState+0x190>)
 80030aa:	885b      	ldrh	r3, [r3, #2]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d114      	bne.n	80030da <JoystickLocationState+0x3a>
	{
		registerFrame[1].U16 = 0;
 80030b0:	4b5f      	ldr	r3, [pc, #380]	; (8003230 <JoystickLocationState+0x190>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 1;	//Y Moving Status: Jog Pick
 80030b6:	4b5e      	ldr	r3, [pc, #376]	; (8003230 <JoystickLocationState+0x190>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	841a      	strh	r2, [r3, #32]
		EndEffectorState = 1;		//TestModeOn
 80030bc:	4b5d      	ldr	r3, [pc, #372]	; (8003234 <JoystickLocationState+0x194>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 1;	//End Effector Status: Laser On
 80030c2:	4b5b      	ldr	r3, [pc, #364]	; (8003230 <JoystickLocationState+0x190>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 80030c8:	4b5b      	ldr	r3, [pc, #364]	; (8003238 <JoystickLocationState+0x198>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 80030ce:	f7ff fb53 	bl	8002778 <EndEffectorWrite>
		state = 1;					//Go Pick state
 80030d2:	4b5a      	ldr	r3, [pc, #360]	; (800323c <JoystickLocationState+0x19c>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	e00f      	b.n	80030fa <JoystickLocationState+0x5a>
	}
	else if(registerFrame[1].U16 == 2)	//Base System Status: Set Place Tray
 80030da:	4b55      	ldr	r3, [pc, #340]	; (8003230 <JoystickLocationState+0x190>)
 80030dc:	885b      	ldrh	r3, [r3, #2]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d10b      	bne.n	80030fa <JoystickLocationState+0x5a>
	{
		registerFrame[1].U16 = 0;
 80030e2:	4b53      	ldr	r3, [pc, #332]	; (8003230 <JoystickLocationState+0x190>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 2;	//Y Moving Status: Jog Place
 80030e8:	4b51      	ldr	r3, [pc, #324]	; (8003230 <JoystickLocationState+0x190>)
 80030ea:	2202      	movs	r2, #2
 80030ec:	841a      	strh	r2, [r3, #32]
		registerFrame[2].U16 = 1;	//Laser On
 80030ee:	4b50      	ldr	r3, [pc, #320]	; (8003230 <JoystickLocationState+0x190>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	809a      	strh	r2, [r3, #4]
		state = 3;					//Go Place state
 80030f4:	4b51      	ldr	r3, [pc, #324]	; (800323c <JoystickLocationState+0x19c>)
 80030f6:	2203      	movs	r2, #3
 80030f8:	601a      	str	r2, [r3, #0]
	}
	if(registerFrame[1].U16 == 8)	//Run Tray Mode
 80030fa:	4b4d      	ldr	r3, [pc, #308]	; (8003230 <JoystickLocationState+0x190>)
 80030fc:	885b      	ldrh	r3, [r3, #2]
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d102      	bne.n	8003108 <JoystickLocationState+0x68>
	{
		state = 5;
 8003102:	4b4e      	ldr	r3, [pc, #312]	; (800323c <JoystickLocationState+0x19c>)
 8003104:	2205      	movs	r2, #5
 8003106:	601a      	str	r2, [r3, #0]
	}


	switch(state)
 8003108:	4b4c      	ldr	r3, [pc, #304]	; (800323c <JoystickLocationState+0x19c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3b01      	subs	r3, #1
 800310e:	2b04      	cmp	r3, #4
 8003110:	f200 8737 	bhi.w	8003f82 <JoystickLocationState+0xee2>
 8003114:	a201      	add	r2, pc, #4	; (adr r2, 800311c <JoystickLocationState+0x7c>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	08003131 	.word	0x08003131
 8003120:	080031e5 	.word	0x080031e5
 8003124:	08003809 	.word	0x08003809
 8003128:	08003919 	.word	0x08003919
 800312c:	08003f17 	.word	0x08003f17
	{
	//Get Pick Tray 1st Point
	case 1:
		PickTray.L1[0] = 0;
 8003130:	4b43      	ldr	r3, [pc, #268]	; (8003240 <JoystickLocationState+0x1a0>)
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
		PickTray.L2[0] = 0;
 8003138:	4b41      	ldr	r3, [pc, #260]	; (8003240 <JoystickLocationState+0x1a0>)
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	609a      	str	r2, [r3, #8]
		PickTray.L1[1] = 0;
 8003140:	4b3f      	ldr	r3, [pc, #252]	; (8003240 <JoystickLocationState+0x1a0>)
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	605a      	str	r2, [r3, #4]
		PickTray.L2[1] = 0;
 8003148:	4b3d      	ldr	r3, [pc, #244]	; (8003240 <JoystickLocationState+0x1a0>)
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8003150:	4b3c      	ldr	r3, [pc, #240]	; (8003244 <JoystickLocationState+0x1a4>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b01      	cmp	r3, #1
 8003156:	f040 870b 	bne.w	8003f70 <JoystickLocationState+0xed0>
		{
			if(registerFrame[68].U16 >= 30000)
 800315a:	4b35      	ldr	r3, [pc, #212]	; (8003230 <JoystickLocationState+0x190>)
 800315c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003160:	f247 522f 	movw	r2, #29999	; 0x752f
 8003164:	4293      	cmp	r3, r2
 8003166:	d912      	bls.n	800318e <JoystickLocationState+0xee>
			{
				PickTray.L1[0] = (registerFrame[68].U16-65536)/10;
 8003168:	4b31      	ldr	r3, [pc, #196]	; (8003230 <JoystickLocationState+0x190>)
 800316a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800316e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003172:	4a35      	ldr	r2, [pc, #212]	; (8003248 <JoystickLocationState+0x1a8>)
 8003174:	fb82 1203 	smull	r1, r2, r2, r3
 8003178:	1092      	asrs	r2, r2, #2
 800317a:	17db      	asrs	r3, r3, #31
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	ee07 3a90 	vmov	s15, r3
 8003182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003186:	4b2e      	ldr	r3, [pc, #184]	; (8003240 <JoystickLocationState+0x1a0>)
 8003188:	edc3 7a00 	vstr	s15, [r3]
 800318c:	e00e      	b.n	80031ac <JoystickLocationState+0x10c>
			}
			else
			{
				PickTray.L1[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 800318e:	4b28      	ldr	r3, [pc, #160]	; (8003230 <JoystickLocationState+0x190>)
 8003190:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003194:	4a2d      	ldr	r2, [pc, #180]	; (800324c <JoystickLocationState+0x1ac>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	08db      	lsrs	r3, r3, #3
 800319c:	b29b      	uxth	r3, r3
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031a6:	4b26      	ldr	r3, [pc, #152]	; (8003240 <JoystickLocationState+0x1a0>)
 80031a8:	edc3 7a00 	vstr	s15, [r3]
			}
			PickTray.L1[1] = position*0.045; //Pick Tray Y Position 1 //mm
 80031ac:	4b28      	ldr	r3, [pc, #160]	; (8003250 <JoystickLocationState+0x1b0>)
 80031ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd f9be 	bl	8000534 <__aeabi_i2d>
 80031b8:	a31b      	add	r3, pc, #108	; (adr r3, 8003228 <JoystickLocationState+0x188>)
 80031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031be:	f7fd fa23 	bl	8000608 <__aeabi_dmul>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4610      	mov	r0, r2
 80031c8:	4619      	mov	r1, r3
 80031ca:	f7fd fd15 	bl	8000bf8 <__aeabi_d2f>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4a1b      	ldr	r2, [pc, #108]	; (8003240 <JoystickLocationState+0x1a0>)
 80031d2:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <JoystickLocationState+0x1a4>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
			state = 2;
 80031da:	4b18      	ldr	r3, [pc, #96]	; (800323c <JoystickLocationState+0x19c>)
 80031dc:	2202      	movs	r2, #2
 80031de:	601a      	str	r2, [r3, #0]
		}
		break;
 80031e0:	f000 bec6 	b.w	8003f70 <JoystickLocationState+0xed0>

	//Get Pick Tray 2nd Point
	case 2:
		if (GetPositionButton.flag == 1)
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <JoystickLocationState+0x1a4>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	f040 8301 	bne.w	80037f0 <JoystickLocationState+0x750>
		{
			if(registerFrame[68].U16 >= 30000)
 80031ee:	4b10      	ldr	r3, [pc, #64]	; (8003230 <JoystickLocationState+0x190>)
 80031f0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80031f4:	f247 522f 	movw	r2, #29999	; 0x752f
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d92b      	bls.n	8003254 <JoystickLocationState+0x1b4>
			{
				PickTray.L2[0] = (registerFrame[68].U16-65536)/10;
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <JoystickLocationState+0x190>)
 80031fe:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003202:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <JoystickLocationState+0x1a8>)
 8003208:	fb82 1203 	smull	r1, r2, r2, r3
 800320c:	1092      	asrs	r2, r2, #2
 800320e:	17db      	asrs	r3, r3, #31
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <JoystickLocationState+0x1a0>)
 800321c:	edc3 7a02 	vstr	s15, [r3, #8]
 8003220:	e027      	b.n	8003272 <JoystickLocationState+0x1d2>
 8003222:	bf00      	nop
 8003224:	f3af 8000 	nop.w
 8003228:	70a3d70a 	.word	0x70a3d70a
 800322c:	3fa70a3d 	.word	0x3fa70a3d
 8003230:	20000ff8 	.word	0x20000ff8
 8003234:	20000b18 	.word	0x20000b18
 8003238:	20000b10 	.word	0x20000b10
 800323c:	20000224 	.word	0x20000224
 8003240:	200009e0 	.word	0x200009e0
 8003244:	20000ab0 	.word	0x20000ab0
 8003248:	66666667 	.word	0x66666667
 800324c:	cccccccd 	.word	0xcccccccd
 8003250:	200009ac 	.word	0x200009ac
			}
			else
			{
				PickTray.L2[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8003254:	4bd6      	ldr	r3, [pc, #856]	; (80035b0 <JoystickLocationState+0x510>)
 8003256:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800325a:	4ad6      	ldr	r2, [pc, #856]	; (80035b4 <JoystickLocationState+0x514>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	08db      	lsrs	r3, r3, #3
 8003262:	b29b      	uxth	r3, r3
 8003264:	ee07 3a90 	vmov	s15, r3
 8003268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800326c:	4bd2      	ldr	r3, [pc, #840]	; (80035b8 <JoystickLocationState+0x518>)
 800326e:	edc3 7a02 	vstr	s15, [r3, #8]
			}
			PickTray.L2[1] = position*0.045; //Pick Tray Y Position 2 //mm
 8003272:	4bd2      	ldr	r3, [pc, #840]	; (80035bc <JoystickLocationState+0x51c>)
 8003274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003278:	4618      	mov	r0, r3
 800327a:	f7fd f95b 	bl	8000534 <__aeabi_i2d>
 800327e:	a3ca      	add	r3, pc, #808	; (adr r3, 80035a8 <JoystickLocationState+0x508>)
 8003280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003284:	f7fd f9c0 	bl	8000608 <__aeabi_dmul>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4610      	mov	r0, r2
 800328e:	4619      	mov	r1, r3
 8003290:	f7fd fcb2 	bl	8000bf8 <__aeabi_d2f>
 8003294:	4603      	mov	r3, r0
 8003296:	4ac8      	ldr	r2, [pc, #800]	; (80035b8 <JoystickLocationState+0x518>)
 8003298:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 800329a:	4bc9      	ldr	r3, [pc, #804]	; (80035c0 <JoystickLocationState+0x520>)
 800329c:	2200      	movs	r2, #0
 800329e:	609a      	str	r2, [r3, #8]

			cos_Theta = (PickTray.L2[0]-PickTray.L1[0])/sqrtf(((PickTray.L2[0]-PickTray.L1[0])*(PickTray.L2[0]-PickTray.L1[0]))+((PickTray.L2[1]-PickTray.L1[1])*(PickTray.L2[1]-PickTray.L1[1])));
 80032a0:	4bc5      	ldr	r3, [pc, #788]	; (80035b8 <JoystickLocationState+0x518>)
 80032a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80032a6:	4bc4      	ldr	r3, [pc, #784]	; (80035b8 <JoystickLocationState+0x518>)
 80032a8:	edd3 7a00 	vldr	s15, [r3]
 80032ac:	ee37 8a67 	vsub.f32	s16, s14, s15
 80032b0:	4bc1      	ldr	r3, [pc, #772]	; (80035b8 <JoystickLocationState+0x518>)
 80032b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80032b6:	4bc0      	ldr	r3, [pc, #768]	; (80035b8 <JoystickLocationState+0x518>)
 80032b8:	edd3 7a00 	vldr	s15, [r3]
 80032bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032c0:	4bbd      	ldr	r3, [pc, #756]	; (80035b8 <JoystickLocationState+0x518>)
 80032c2:	edd3 6a02 	vldr	s13, [r3, #8]
 80032c6:	4bbc      	ldr	r3, [pc, #752]	; (80035b8 <JoystickLocationState+0x518>)
 80032c8:	edd3 7a00 	vldr	s15, [r3]
 80032cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80032d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032d4:	4bb8      	ldr	r3, [pc, #736]	; (80035b8 <JoystickLocationState+0x518>)
 80032d6:	edd3 6a03 	vldr	s13, [r3, #12]
 80032da:	4bb7      	ldr	r3, [pc, #732]	; (80035b8 <JoystickLocationState+0x518>)
 80032dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80032e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80032e4:	4bb4      	ldr	r3, [pc, #720]	; (80035b8 <JoystickLocationState+0x518>)
 80032e6:	ed93 6a03 	vldr	s12, [r3, #12]
 80032ea:	4bb3      	ldr	r3, [pc, #716]	; (80035b8 <JoystickLocationState+0x518>)
 80032ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80032f0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80032f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003300:	f00d ff56 	bl	80111b0 <sqrtf>
 8003304:	eeb0 7a40 	vmov.f32	s14, s0
 8003308:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800330c:	4bad      	ldr	r3, [pc, #692]	; (80035c4 <JoystickLocationState+0x524>)
 800330e:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PickTray.L2[1]-PickTray.L1[1])/sqrtf(((PickTray.L2[0]-PickTray.L1[0])*(PickTray.L2[0]-PickTray.L1[0]))+((PickTray.L2[1]-PickTray.L1[1])*(PickTray.L2[1]-PickTray.L1[1])));
 8003312:	4ba9      	ldr	r3, [pc, #676]	; (80035b8 <JoystickLocationState+0x518>)
 8003314:	ed93 7a03 	vldr	s14, [r3, #12]
 8003318:	4ba7      	ldr	r3, [pc, #668]	; (80035b8 <JoystickLocationState+0x518>)
 800331a:	edd3 7a01 	vldr	s15, [r3, #4]
 800331e:	ee37 8a67 	vsub.f32	s16, s14, s15
 8003322:	4ba5      	ldr	r3, [pc, #660]	; (80035b8 <JoystickLocationState+0x518>)
 8003324:	ed93 7a02 	vldr	s14, [r3, #8]
 8003328:	4ba3      	ldr	r3, [pc, #652]	; (80035b8 <JoystickLocationState+0x518>)
 800332a:	edd3 7a00 	vldr	s15, [r3]
 800332e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003332:	4ba1      	ldr	r3, [pc, #644]	; (80035b8 <JoystickLocationState+0x518>)
 8003334:	edd3 6a02 	vldr	s13, [r3, #8]
 8003338:	4b9f      	ldr	r3, [pc, #636]	; (80035b8 <JoystickLocationState+0x518>)
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003342:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003346:	4b9c      	ldr	r3, [pc, #624]	; (80035b8 <JoystickLocationState+0x518>)
 8003348:	edd3 6a03 	vldr	s13, [r3, #12]
 800334c:	4b9a      	ldr	r3, [pc, #616]	; (80035b8 <JoystickLocationState+0x518>)
 800334e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003352:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003356:	4b98      	ldr	r3, [pc, #608]	; (80035b8 <JoystickLocationState+0x518>)
 8003358:	ed93 6a03 	vldr	s12, [r3, #12]
 800335c:	4b96      	ldr	r3, [pc, #600]	; (80035b8 <JoystickLocationState+0x518>)
 800335e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003362:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800336a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800336e:	eeb0 0a67 	vmov.f32	s0, s15
 8003372:	f00d ff1d 	bl	80111b0 <sqrtf>
 8003376:	eeb0 7a40 	vmov.f32	s14, s0
 800337a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800337e:	4b92      	ldr	r3, [pc, #584]	; (80035c8 <JoystickLocationState+0x528>)
 8003380:	edc3 7a00 	vstr	s15, [r3]
			//sin_Theta = sin(angle);

			PickTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PickTray.L1[0];
 8003384:	4b8f      	ldr	r3, [pc, #572]	; (80035c4 <JoystickLocationState+0x524>)
 8003386:	edd3 7a00 	vldr	s15, [r3]
 800338a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800338e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003392:	4b8d      	ldr	r3, [pc, #564]	; (80035c8 <JoystickLocationState+0x528>)
 8003394:	edd3 7a00 	vldr	s15, [r3]
 8003398:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800339c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033a4:	4b84      	ldr	r3, [pc, #528]	; (80035b8 <JoystickLocationState+0x518>)
 80033a6:	edd3 7a00 	vldr	s15, [r3]
 80033aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ae:	4b82      	ldr	r3, [pc, #520]	; (80035b8 <JoystickLocationState+0x518>)
 80033b0:	edc3 7a04 	vstr	s15, [r3, #16]
			PickTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PickTray.L1[1];
 80033b4:	4b84      	ldr	r3, [pc, #528]	; (80035c8 <JoystickLocationState+0x528>)
 80033b6:	edd3 7a00 	vldr	s15, [r3]
 80033ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80033be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033c2:	4b80      	ldr	r3, [pc, #512]	; (80035c4 <JoystickLocationState+0x524>)
 80033c4:	edd3 7a00 	vldr	s15, [r3]
 80033c8:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80033cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033d4:	4b78      	ldr	r3, [pc, #480]	; (80035b8 <JoystickLocationState+0x518>)
 80033d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80033da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033de:	4b76      	ldr	r3, [pc, #472]	; (80035b8 <JoystickLocationState+0x518>)
 80033e0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PickTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PickTray.L1[0];
 80033e4:	4b77      	ldr	r3, [pc, #476]	; (80035c4 <JoystickLocationState+0x524>)
 80033e6:	edd3 7a00 	vldr	s15, [r3]
 80033ea:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80033ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033f2:	4b75      	ldr	r3, [pc, #468]	; (80035c8 <JoystickLocationState+0x528>)
 80033f4:	edd3 7a00 	vldr	s15, [r3]
 80033f8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80033fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003404:	4b6c      	ldr	r3, [pc, #432]	; (80035b8 <JoystickLocationState+0x518>)
 8003406:	edd3 7a00 	vldr	s15, [r3]
 800340a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340e:	4b6a      	ldr	r3, [pc, #424]	; (80035b8 <JoystickLocationState+0x518>)
 8003410:	edc3 7a05 	vstr	s15, [r3, #20]
			PickTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PickTray.L1[1];
 8003414:	4b6c      	ldr	r3, [pc, #432]	; (80035c8 <JoystickLocationState+0x528>)
 8003416:	edd3 7a00 	vldr	s15, [r3]
 800341a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800341e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003422:	4b68      	ldr	r3, [pc, #416]	; (80035c4 <JoystickLocationState+0x524>)
 8003424:	edd3 7a00 	vldr	s15, [r3]
 8003428:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 800342c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003430:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003434:	4b60      	ldr	r3, [pc, #384]	; (80035b8 <JoystickLocationState+0x518>)
 8003436:	edd3 7a01 	vldr	s15, [r3, #4]
 800343a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800343e:	4b5e      	ldr	r3, [pc, #376]	; (80035b8 <JoystickLocationState+0x518>)
 8003440:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PickTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PickTray.L1[0];
 8003444:	4b5f      	ldr	r3, [pc, #380]	; (80035c4 <JoystickLocationState+0x524>)
 8003446:	edd3 7a00 	vldr	s15, [r3]
 800344a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80035cc <JoystickLocationState+0x52c>
 800344e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003452:	4b5d      	ldr	r3, [pc, #372]	; (80035c8 <JoystickLocationState+0x528>)
 8003454:	edd3 7a00 	vldr	s15, [r3]
 8003458:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800345c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003460:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003464:	4b54      	ldr	r3, [pc, #336]	; (80035b8 <JoystickLocationState+0x518>)
 8003466:	edd3 7a00 	vldr	s15, [r3]
 800346a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800346e:	4b52      	ldr	r3, [pc, #328]	; (80035b8 <JoystickLocationState+0x518>)
 8003470:	edc3 7a06 	vstr	s15, [r3, #24]
			PickTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PickTray.L1[1];
 8003474:	4b54      	ldr	r3, [pc, #336]	; (80035c8 <JoystickLocationState+0x528>)
 8003476:	edd3 7a00 	vldr	s15, [r3]
 800347a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80035cc <JoystickLocationState+0x52c>
 800347e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003482:	4b50      	ldr	r3, [pc, #320]	; (80035c4 <JoystickLocationState+0x524>)
 8003484:	edd3 7a00 	vldr	s15, [r3]
 8003488:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 800348c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003494:	4b48      	ldr	r3, [pc, #288]	; (80035b8 <JoystickLocationState+0x518>)
 8003496:	edd3 7a01 	vldr	s15, [r3, #4]
 800349a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800349e:	4b46      	ldr	r3, [pc, #280]	; (80035b8 <JoystickLocationState+0x518>)
 80034a0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PickTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PickTray.L1[0];
 80034a4:	4b47      	ldr	r3, [pc, #284]	; (80035c4 <JoystickLocationState+0x524>)
 80034a6:	edd3 7a00 	vldr	s15, [r3]
 80034aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80034ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034b2:	4b45      	ldr	r3, [pc, #276]	; (80035c8 <JoystickLocationState+0x528>)
 80034b4:	edd3 7a00 	vldr	s15, [r3]
 80034b8:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80034bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034c4:	4b3c      	ldr	r3, [pc, #240]	; (80035b8 <JoystickLocationState+0x518>)
 80034c6:	edd3 7a00 	vldr	s15, [r3]
 80034ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ce:	4b3a      	ldr	r3, [pc, #232]	; (80035b8 <JoystickLocationState+0x518>)
 80034d0:	edc3 7a07 	vstr	s15, [r3, #28]
			PickTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PickTray.L1[1];
 80034d4:	4b3c      	ldr	r3, [pc, #240]	; (80035c8 <JoystickLocationState+0x528>)
 80034d6:	edd3 7a00 	vldr	s15, [r3]
 80034da:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80034de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034e2:	4b38      	ldr	r3, [pc, #224]	; (80035c4 <JoystickLocationState+0x524>)
 80034e4:	edd3 7a00 	vldr	s15, [r3]
 80034e8:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 80034ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034f4:	4b30      	ldr	r3, [pc, #192]	; (80035b8 <JoystickLocationState+0x518>)
 80034f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80034fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fe:	4b2e      	ldr	r3, [pc, #184]	; (80035b8 <JoystickLocationState+0x518>)
 8003500:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PickTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PickTray.L1[0];
 8003504:	4b2f      	ldr	r3, [pc, #188]	; (80035c4 <JoystickLocationState+0x524>)
 8003506:	edd3 7a00 	vldr	s15, [r3]
 800350a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800350e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003512:	4b2d      	ldr	r3, [pc, #180]	; (80035c8 <JoystickLocationState+0x528>)
 8003514:	edd3 7a00 	vldr	s15, [r3]
 8003518:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800351c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003520:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003524:	4b24      	ldr	r3, [pc, #144]	; (80035b8 <JoystickLocationState+0x518>)
 8003526:	edd3 7a00 	vldr	s15, [r3]
 800352a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352e:	4b22      	ldr	r3, [pc, #136]	; (80035b8 <JoystickLocationState+0x518>)
 8003530:	edc3 7a08 	vstr	s15, [r3, #32]
			PickTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PickTray.L1[1];
 8003534:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <JoystickLocationState+0x528>)
 8003536:	edd3 7a00 	vldr	s15, [r3]
 800353a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800353e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003542:	4b20      	ldr	r3, [pc, #128]	; (80035c4 <JoystickLocationState+0x524>)
 8003544:	edd3 7a00 	vldr	s15, [r3]
 8003548:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 800354c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003550:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003554:	4b18      	ldr	r3, [pc, #96]	; (80035b8 <JoystickLocationState+0x518>)
 8003556:	edd3 7a01 	vldr	s15, [r3, #4]
 800355a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800355e:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <JoystickLocationState+0x518>)
 8003560:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PickTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PickTray.L1[0];
 8003564:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <JoystickLocationState+0x524>)
 8003566:	edd3 7a00 	vldr	s15, [r3]
 800356a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80035cc <JoystickLocationState+0x52c>
 800356e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003572:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <JoystickLocationState+0x528>)
 8003574:	edd3 7a00 	vldr	s15, [r3]
 8003578:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800357c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003580:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003584:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <JoystickLocationState+0x518>)
 8003586:	edd3 7a00 	vldr	s15, [r3]
 800358a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800358e:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <JoystickLocationState+0x518>)
 8003590:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PickTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PickTray.L1[1];
 8003594:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <JoystickLocationState+0x528>)
 8003596:	edd3 7a00 	vldr	s15, [r3]
 800359a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80035cc <JoystickLocationState+0x52c>
 800359e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035a2:	e015      	b.n	80035d0 <JoystickLocationState+0x530>
 80035a4:	f3af 8000 	nop.w
 80035a8:	70a3d70a 	.word	0x70a3d70a
 80035ac:	3fa70a3d 	.word	0x3fa70a3d
 80035b0:	20000ff8 	.word	0x20000ff8
 80035b4:	cccccccd 	.word	0xcccccccd
 80035b8:	200009e0 	.word	0x200009e0
 80035bc:	200009ac 	.word	0x200009ac
 80035c0:	20000ab0 	.word	0x20000ab0
 80035c4:	20000aa8 	.word	0x20000aa8
 80035c8:	20000aac 	.word	0x20000aac
 80035cc:	42480000 	.word	0x42480000
 80035d0:	4bc3      	ldr	r3, [pc, #780]	; (80038e0 <JoystickLocationState+0x840>)
 80035d2:	edd3 7a00 	vldr	s15, [r3]
 80035d6:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 80035da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035e2:	4bc0      	ldr	r3, [pc, #768]	; (80038e4 <JoystickLocationState+0x844>)
 80035e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80035e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ec:	4bbd      	ldr	r3, [pc, #756]	; (80038e4 <JoystickLocationState+0x844>)
 80035ee:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PickTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PickTray.L1[0];
 80035f2:	4bbb      	ldr	r3, [pc, #748]	; (80038e0 <JoystickLocationState+0x840>)
 80035f4:	edd3 7a00 	vldr	s15, [r3]
 80035f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80035fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003600:	4bb9      	ldr	r3, [pc, #740]	; (80038e8 <JoystickLocationState+0x848>)
 8003602:	edd3 7a00 	vldr	s15, [r3]
 8003606:	eddf 6ab9 	vldr	s13, [pc, #740]	; 80038ec <JoystickLocationState+0x84c>
 800360a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800360e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003612:	4bb4      	ldr	r3, [pc, #720]	; (80038e4 <JoystickLocationState+0x844>)
 8003614:	edd3 7a00 	vldr	s15, [r3]
 8003618:	ee77 7a27 	vadd.f32	s15, s14, s15
 800361c:	4bb1      	ldr	r3, [pc, #708]	; (80038e4 <JoystickLocationState+0x844>)
 800361e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PickTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PickTray.L1[1];
 8003622:	4bb1      	ldr	r3, [pc, #708]	; (80038e8 <JoystickLocationState+0x848>)
 8003624:	edd3 7a00 	vldr	s15, [r3]
 8003628:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800362c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003630:	4bab      	ldr	r3, [pc, #684]	; (80038e0 <JoystickLocationState+0x840>)
 8003632:	edd3 7a00 	vldr	s15, [r3]
 8003636:	eddf 6aae 	vldr	s13, [pc, #696]	; 80038f0 <JoystickLocationState+0x850>
 800363a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800363e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003642:	4ba8      	ldr	r3, [pc, #672]	; (80038e4 <JoystickLocationState+0x844>)
 8003644:	edd3 7a01 	vldr	s15, [r3, #4]
 8003648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800364c:	4ba5      	ldr	r3, [pc, #660]	; (80038e4 <JoystickLocationState+0x844>)
 800364e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PickTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PickTray.L1[0];
 8003652:	4ba3      	ldr	r3, [pc, #652]	; (80038e0 <JoystickLocationState+0x840>)
 8003654:	edd3 7a00 	vldr	s15, [r3]
 8003658:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800365c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003660:	4ba1      	ldr	r3, [pc, #644]	; (80038e8 <JoystickLocationState+0x848>)
 8003662:	edd3 7a00 	vldr	s15, [r3]
 8003666:	eddf 6aa1 	vldr	s13, [pc, #644]	; 80038ec <JoystickLocationState+0x84c>
 800366a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800366e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003672:	4b9c      	ldr	r3, [pc, #624]	; (80038e4 <JoystickLocationState+0x844>)
 8003674:	edd3 7a00 	vldr	s15, [r3]
 8003678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800367c:	4b99      	ldr	r3, [pc, #612]	; (80038e4 <JoystickLocationState+0x844>)
 800367e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PickTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PickTray.L1[1];
 8003682:	4b99      	ldr	r3, [pc, #612]	; (80038e8 <JoystickLocationState+0x848>)
 8003684:	edd3 7a00 	vldr	s15, [r3]
 8003688:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800368c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003690:	4b93      	ldr	r3, [pc, #588]	; (80038e0 <JoystickLocationState+0x840>)
 8003692:	edd3 7a00 	vldr	s15, [r3]
 8003696:	eddf 6a96 	vldr	s13, [pc, #600]	; 80038f0 <JoystickLocationState+0x850>
 800369a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800369e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036a2:	4b90      	ldr	r3, [pc, #576]	; (80038e4 <JoystickLocationState+0x844>)
 80036a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80036a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ac:	4b8d      	ldr	r3, [pc, #564]	; (80038e4 <JoystickLocationState+0x844>)
 80036ae:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PickTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PickTray.L1[0];
 80036b2:	4b8b      	ldr	r3, [pc, #556]	; (80038e0 <JoystickLocationState+0x840>)
 80036b4:	edd3 7a00 	vldr	s15, [r3]
 80036b8:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80038f4 <JoystickLocationState+0x854>
 80036bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80036c0:	4b89      	ldr	r3, [pc, #548]	; (80038e8 <JoystickLocationState+0x848>)
 80036c2:	edd3 7a00 	vldr	s15, [r3]
 80036c6:	eddf 6a89 	vldr	s13, [pc, #548]	; 80038ec <JoystickLocationState+0x84c>
 80036ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036d2:	4b84      	ldr	r3, [pc, #528]	; (80038e4 <JoystickLocationState+0x844>)
 80036d4:	edd3 7a00 	vldr	s15, [r3]
 80036d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036dc:	4b81      	ldr	r3, [pc, #516]	; (80038e4 <JoystickLocationState+0x844>)
 80036de:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PickTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PickTray.L1[1];
 80036e2:	4b81      	ldr	r3, [pc, #516]	; (80038e8 <JoystickLocationState+0x848>)
 80036e4:	edd3 7a00 	vldr	s15, [r3]
 80036e8:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80038f4 <JoystickLocationState+0x854>
 80036ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80036f0:	4b7b      	ldr	r3, [pc, #492]	; (80038e0 <JoystickLocationState+0x840>)
 80036f2:	edd3 7a00 	vldr	s15, [r3]
 80036f6:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80038f0 <JoystickLocationState+0x850>
 80036fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003702:	4b78      	ldr	r3, [pc, #480]	; (80038e4 <JoystickLocationState+0x844>)
 8003704:	edd3 7a01 	vldr	s15, [r3, #4]
 8003708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800370c:	4b75      	ldr	r3, [pc, #468]	; (80038e4 <JoystickLocationState+0x844>)
 800370e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PickTray.origin_x = (PickTray.L1[0]+(50*sin_Theta))*10;
 8003712:	4b74      	ldr	r3, [pc, #464]	; (80038e4 <JoystickLocationState+0x844>)
 8003714:	ed93 7a00 	vldr	s14, [r3]
 8003718:	4b73      	ldr	r3, [pc, #460]	; (80038e8 <JoystickLocationState+0x848>)
 800371a:	edd3 7a00 	vldr	s15, [r3]
 800371e:	eddf 6a75 	vldr	s13, [pc, #468]	; 80038f4 <JoystickLocationState+0x854>
 8003722:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800372a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800372e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003736:	ee17 3a90 	vmov	r3, s15
 800373a:	b21a      	sxth	r2, r3
 800373c:	4b69      	ldr	r3, [pc, #420]	; (80038e4 <JoystickLocationState+0x844>)
 800373e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			PickTray.origin_y = (PickTray.L1[1]-(50*cos_Theta))*10;
 8003742:	4b68      	ldr	r3, [pc, #416]	; (80038e4 <JoystickLocationState+0x844>)
 8003744:	ed93 7a01 	vldr	s14, [r3, #4]
 8003748:	4b65      	ldr	r3, [pc, #404]	; (80038e0 <JoystickLocationState+0x840>)
 800374a:	edd3 7a00 	vldr	s15, [r3]
 800374e:	eddf 6a69 	vldr	s13, [pc, #420]	; 80038f4 <JoystickLocationState+0x854>
 8003752:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800375a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800375e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003766:	ee17 3a90 	vmov	r3, s15
 800376a:	b21a      	sxth	r2, r3
 800376c:	4b5d      	ldr	r3, [pc, #372]	; (80038e4 <JoystickLocationState+0x844>)
 800376e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			PickTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 8003772:	4b5b      	ldr	r3, [pc, #364]	; (80038e0 <JoystickLocationState+0x840>)
 8003774:	edd3 7a00 	vldr	s15, [r3]
 8003778:	eeb0 0a67 	vmov.f32	s0, s15
 800377c:	f00d fcec 	bl	8011158 <acosf>
 8003780:	ee10 3a10 	vmov	r3, s0
 8003784:	4618      	mov	r0, r3
 8003786:	f7fc fee7 	bl	8000558 <__aeabi_f2d>
 800378a:	a351      	add	r3, pc, #324	; (adr r3, 80038d0 <JoystickLocationState+0x830>)
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	f7fc ff3a 	bl	8000608 <__aeabi_dmul>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4610      	mov	r0, r2
 800379a:	4619      	mov	r1, r3
 800379c:	f7fd f9e4 	bl	8000b68 <__aeabi_d2iz>
 80037a0:	4603      	mov	r3, r0
 80037a2:	b21a      	sxth	r2, r3
 80037a4:	4b4f      	ldr	r3, [pc, #316]	; (80038e4 <JoystickLocationState+0x844>)
 80037a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

			registerFrame[35].U16 = PickTray.origin_x;
 80037aa:	4b4e      	ldr	r3, [pc, #312]	; (80038e4 <JoystickLocationState+0x844>)
 80037ac:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	4b51      	ldr	r3, [pc, #324]	; (80038f8 <JoystickLocationState+0x858>)
 80037b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[36].U16 = PickTray.origin_y;
 80037b8:	4b4a      	ldr	r3, [pc, #296]	; (80038e4 <JoystickLocationState+0x844>)
 80037ba:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 80037be:	b29a      	uxth	r2, r3
 80037c0:	4b4d      	ldr	r3, [pc, #308]	; (80038f8 <JoystickLocationState+0x858>)
 80037c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[37].U16 = PickTray.orientation * 100;
 80037c6:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <JoystickLocationState+0x844>)
 80037c8:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	0092      	lsls	r2, r2, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	461a      	mov	r2, r3
 80037d6:	0091      	lsls	r1, r2, #2
 80037d8:	461a      	mov	r2, r3
 80037da:	460b      	mov	r3, r1
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	4b45      	ldr	r3, [pc, #276]	; (80038f8 <JoystickLocationState+0x858>)
 80037e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			registerFrame[16].U16 = 0;
 80037e8:	4b43      	ldr	r3, [pc, #268]	; (80038f8 <JoystickLocationState+0x858>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 80037ee:	e3c1      	b.n	8003f74 <JoystickLocationState+0xed4>
		else if (ResetButton.flag == 1)
 80037f0:	4b42      	ldr	r3, [pc, #264]	; (80038fc <JoystickLocationState+0x85c>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	f040 83bd 	bne.w	8003f74 <JoystickLocationState+0xed4>
			ResetButton.flag = 0;
 80037fa:	4b40      	ldr	r3, [pc, #256]	; (80038fc <JoystickLocationState+0x85c>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	609a      	str	r2, [r3, #8]
			state = 1;
 8003800:	4b3f      	ldr	r3, [pc, #252]	; (8003900 <JoystickLocationState+0x860>)
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]
		break;
 8003806:	e3b5      	b.n	8003f74 <JoystickLocationState+0xed4>

	//Get Place Tray 1st Point
	case 3:
		PlaceTray.L1[0] = 0;
 8003808:	4b3e      	ldr	r3, [pc, #248]	; (8003904 <JoystickLocationState+0x864>)
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
		PlaceTray.L2[0] = 0;
 8003810:	4b3c      	ldr	r3, [pc, #240]	; (8003904 <JoystickLocationState+0x864>)
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	609a      	str	r2, [r3, #8]
		PlaceTray.L1[1] = 0;
 8003818:	4b3a      	ldr	r3, [pc, #232]	; (8003904 <JoystickLocationState+0x864>)
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	605a      	str	r2, [r3, #4]
		PlaceTray.L2[1] = 0;
 8003820:	4b38      	ldr	r3, [pc, #224]	; (8003904 <JoystickLocationState+0x864>)
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8003828:	4b37      	ldr	r3, [pc, #220]	; (8003908 <JoystickLocationState+0x868>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d143      	bne.n	80038b8 <JoystickLocationState+0x818>
		{
			if(registerFrame[68].U16 >= 30000)
 8003830:	4b31      	ldr	r3, [pc, #196]	; (80038f8 <JoystickLocationState+0x858>)
 8003832:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003836:	f247 522f 	movw	r2, #29999	; 0x752f
 800383a:	4293      	cmp	r3, r2
 800383c:	d912      	bls.n	8003864 <JoystickLocationState+0x7c4>
			{
				PlaceTray.L1[0] = (registerFrame[68].U16-65536)/10;
 800383e:	4b2e      	ldr	r3, [pc, #184]	; (80038f8 <JoystickLocationState+0x858>)
 8003840:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003844:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003848:	4a30      	ldr	r2, [pc, #192]	; (800390c <JoystickLocationState+0x86c>)
 800384a:	fb82 1203 	smull	r1, r2, r2, r3
 800384e:	1092      	asrs	r2, r2, #2
 8003850:	17db      	asrs	r3, r3, #31
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	ee07 3a90 	vmov	s15, r3
 8003858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800385c:	4b29      	ldr	r3, [pc, #164]	; (8003904 <JoystickLocationState+0x864>)
 800385e:	edc3 7a00 	vstr	s15, [r3]
 8003862:	e00e      	b.n	8003882 <JoystickLocationState+0x7e2>
			}
			else
			{
				PlaceTray.L1[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8003864:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <JoystickLocationState+0x858>)
 8003866:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800386a:	4a29      	ldr	r2, [pc, #164]	; (8003910 <JoystickLocationState+0x870>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	08db      	lsrs	r3, r3, #3
 8003872:	b29b      	uxth	r3, r3
 8003874:	ee07 3a90 	vmov	s15, r3
 8003878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800387c:	4b21      	ldr	r3, [pc, #132]	; (8003904 <JoystickLocationState+0x864>)
 800387e:	edc3 7a00 	vstr	s15, [r3]
			}
			PlaceTray.L1[1] = position*0.045; //Place Tray Y Position 1 //mm
 8003882:	4b24      	ldr	r3, [pc, #144]	; (8003914 <JoystickLocationState+0x874>)
 8003884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003888:	4618      	mov	r0, r3
 800388a:	f7fc fe53 	bl	8000534 <__aeabi_i2d>
 800388e:	a312      	add	r3, pc, #72	; (adr r3, 80038d8 <JoystickLocationState+0x838>)
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	f7fc feb8 	bl	8000608 <__aeabi_dmul>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4610      	mov	r0, r2
 800389e:	4619      	mov	r1, r3
 80038a0:	f7fd f9aa 	bl	8000bf8 <__aeabi_d2f>
 80038a4:	4603      	mov	r3, r0
 80038a6:	4a17      	ldr	r2, [pc, #92]	; (8003904 <JoystickLocationState+0x864>)
 80038a8:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 80038aa:	4b17      	ldr	r3, [pc, #92]	; (8003908 <JoystickLocationState+0x868>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
			state = 4;
 80038b0:	4b13      	ldr	r3, [pc, #76]	; (8003900 <JoystickLocationState+0x860>)
 80038b2:	2204      	movs	r2, #4
 80038b4:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 80038b6:	e35f      	b.n	8003f78 <JoystickLocationState+0xed8>
		else if (ResetButton.flag == 1)
 80038b8:	4b10      	ldr	r3, [pc, #64]	; (80038fc <JoystickLocationState+0x85c>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	f040 835b 	bne.w	8003f78 <JoystickLocationState+0xed8>
			ResetButton.flag = 0;
 80038c2:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <JoystickLocationState+0x85c>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	609a      	str	r2, [r3, #8]
			state = 1;
 80038c8:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <JoystickLocationState+0x860>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
		break;
 80038ce:	e353      	b.n	8003f78 <JoystickLocationState+0xed8>
 80038d0:	1a63c1f8 	.word	0x1a63c1f8
 80038d4:	404ca5dc 	.word	0x404ca5dc
 80038d8:	70a3d70a 	.word	0x70a3d70a
 80038dc:	3fa70a3d 	.word	0x3fa70a3d
 80038e0:	20000aa8 	.word	0x20000aa8
 80038e4:	200009e0 	.word	0x200009e0
 80038e8:	20000aac 	.word	0x20000aac
 80038ec:	42200000 	.word	0x42200000
 80038f0:	c2200000 	.word	0xc2200000
 80038f4:	42480000 	.word	0x42480000
 80038f8:	20000ff8 	.word	0x20000ff8
 80038fc:	20000abc 	.word	0x20000abc
 8003900:	20000224 	.word	0x20000224
 8003904:	20000a44 	.word	0x20000a44
 8003908:	20000ab0 	.word	0x20000ab0
 800390c:	66666667 	.word	0x66666667
 8003910:	cccccccd 	.word	0xcccccccd
 8003914:	200009ac 	.word	0x200009ac

	//Get Place Tray 2nd Point
	case 4:
		if (GetPositionButton.flag == 1)
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <JoystickLocationState+0x8b8>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b01      	cmp	r3, #1
 800391e:	f040 82ef 	bne.w	8003f00 <JoystickLocationState+0xe60>
		{
			if(registerFrame[68].U16 >= 30000)
 8003922:	4b0e      	ldr	r3, [pc, #56]	; (800395c <JoystickLocationState+0x8bc>)
 8003924:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003928:	f247 522f 	movw	r2, #29999	; 0x752f
 800392c:	4293      	cmp	r3, r2
 800392e:	d91b      	bls.n	8003968 <JoystickLocationState+0x8c8>
			{
				PlaceTray.L2[0] = (registerFrame[68].U16-65536)/10;
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <JoystickLocationState+0x8bc>)
 8003932:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003936:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800393a:	4a09      	ldr	r2, [pc, #36]	; (8003960 <JoystickLocationState+0x8c0>)
 800393c:	fb82 1203 	smull	r1, r2, r2, r3
 8003940:	1092      	asrs	r2, r2, #2
 8003942:	17db      	asrs	r3, r3, #31
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	ee07 3a90 	vmov	s15, r3
 800394a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <JoystickLocationState+0x8c4>)
 8003950:	edc3 7a02 	vstr	s15, [r3, #8]
 8003954:	e017      	b.n	8003986 <JoystickLocationState+0x8e6>
 8003956:	bf00      	nop
 8003958:	20000ab0 	.word	0x20000ab0
 800395c:	20000ff8 	.word	0x20000ff8
 8003960:	66666667 	.word	0x66666667
 8003964:	20000a44 	.word	0x20000a44
			}
			else
			{
				PlaceTray.L2[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8003968:	4bd5      	ldr	r3, [pc, #852]	; (8003cc0 <JoystickLocationState+0xc20>)
 800396a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800396e:	4ad5      	ldr	r2, [pc, #852]	; (8003cc4 <JoystickLocationState+0xc24>)
 8003970:	fba2 2303 	umull	r2, r3, r2, r3
 8003974:	08db      	lsrs	r3, r3, #3
 8003976:	b29b      	uxth	r3, r3
 8003978:	ee07 3a90 	vmov	s15, r3
 800397c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003980:	4bd1      	ldr	r3, [pc, #836]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003982:	edc3 7a02 	vstr	s15, [r3, #8]
			}
			PlaceTray.L2[1] = position*0.045; //Place Tray Y Position 2 //mm
 8003986:	4bd1      	ldr	r3, [pc, #836]	; (8003ccc <JoystickLocationState+0xc2c>)
 8003988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800398c:	4618      	mov	r0, r3
 800398e:	f7fc fdd1 	bl	8000534 <__aeabi_i2d>
 8003992:	a3c9      	add	r3, pc, #804	; (adr r3, 8003cb8 <JoystickLocationState+0xc18>)
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	f7fc fe36 	bl	8000608 <__aeabi_dmul>
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4610      	mov	r0, r2
 80039a2:	4619      	mov	r1, r3
 80039a4:	f7fd f928 	bl	8000bf8 <__aeabi_d2f>
 80039a8:	4603      	mov	r3, r0
 80039aa:	4ac7      	ldr	r2, [pc, #796]	; (8003cc8 <JoystickLocationState+0xc28>)
 80039ac:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 80039ae:	4bc8      	ldr	r3, [pc, #800]	; (8003cd0 <JoystickLocationState+0xc30>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	609a      	str	r2, [r3, #8]

			cos_Theta = (PlaceTray.L2[0]-PlaceTray.L1[0])/sqrtf(((PlaceTray.L2[0]-PlaceTray.L1[0])*(PlaceTray.L2[0]-PlaceTray.L1[0]))+((PlaceTray.L2[1]-PlaceTray.L1[1])*(PlaceTray.L2[1]-PlaceTray.L1[1])));
 80039b4:	4bc4      	ldr	r3, [pc, #784]	; (8003cc8 <JoystickLocationState+0xc28>)
 80039b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80039ba:	4bc3      	ldr	r3, [pc, #780]	; (8003cc8 <JoystickLocationState+0xc28>)
 80039bc:	edd3 7a00 	vldr	s15, [r3]
 80039c0:	ee37 8a67 	vsub.f32	s16, s14, s15
 80039c4:	4bc0      	ldr	r3, [pc, #768]	; (8003cc8 <JoystickLocationState+0xc28>)
 80039c6:	ed93 7a02 	vldr	s14, [r3, #8]
 80039ca:	4bbf      	ldr	r3, [pc, #764]	; (8003cc8 <JoystickLocationState+0xc28>)
 80039cc:	edd3 7a00 	vldr	s15, [r3]
 80039d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039d4:	4bbc      	ldr	r3, [pc, #752]	; (8003cc8 <JoystickLocationState+0xc28>)
 80039d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80039da:	4bbb      	ldr	r3, [pc, #748]	; (8003cc8 <JoystickLocationState+0xc28>)
 80039dc:	edd3 7a00 	vldr	s15, [r3]
 80039e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80039e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039e8:	4bb7      	ldr	r3, [pc, #732]	; (8003cc8 <JoystickLocationState+0xc28>)
 80039ea:	edd3 6a03 	vldr	s13, [r3, #12]
 80039ee:	4bb6      	ldr	r3, [pc, #728]	; (8003cc8 <JoystickLocationState+0xc28>)
 80039f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80039f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80039f8:	4bb3      	ldr	r3, [pc, #716]	; (8003cc8 <JoystickLocationState+0xc28>)
 80039fa:	ed93 6a03 	vldr	s12, [r3, #12]
 80039fe:	4bb2      	ldr	r3, [pc, #712]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003a00:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a04:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a10:	eeb0 0a67 	vmov.f32	s0, s15
 8003a14:	f00d fbcc 	bl	80111b0 <sqrtf>
 8003a18:	eeb0 7a40 	vmov.f32	s14, s0
 8003a1c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003a20:	4bac      	ldr	r3, [pc, #688]	; (8003cd4 <JoystickLocationState+0xc34>)
 8003a22:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PlaceTray.L2[1]-PlaceTray.L1[1])/sqrtf(((PlaceTray.L2[0]-PlaceTray.L1[0])*(PlaceTray.L2[0]-PlaceTray.L1[0]))+((PlaceTray.L2[1]-PlaceTray.L1[1])*(PlaceTray.L2[1]-PlaceTray.L1[1])));
 8003a26:	4ba8      	ldr	r3, [pc, #672]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003a28:	ed93 7a03 	vldr	s14, [r3, #12]
 8003a2c:	4ba6      	ldr	r3, [pc, #664]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003a2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a32:	ee37 8a67 	vsub.f32	s16, s14, s15
 8003a36:	4ba4      	ldr	r3, [pc, #656]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003a38:	ed93 7a02 	vldr	s14, [r3, #8]
 8003a3c:	4ba2      	ldr	r3, [pc, #648]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003a3e:	edd3 7a00 	vldr	s15, [r3]
 8003a42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a46:	4ba0      	ldr	r3, [pc, #640]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003a48:	edd3 6a02 	vldr	s13, [r3, #8]
 8003a4c:	4b9e      	ldr	r3, [pc, #632]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003a4e:	edd3 7a00 	vldr	s15, [r3]
 8003a52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a5a:	4b9b      	ldr	r3, [pc, #620]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003a5c:	edd3 6a03 	vldr	s13, [r3, #12]
 8003a60:	4b99      	ldr	r3, [pc, #612]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003a62:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a66:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003a6a:	4b97      	ldr	r3, [pc, #604]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003a6c:	ed93 6a03 	vldr	s12, [r3, #12]
 8003a70:	4b95      	ldr	r3, [pc, #596]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003a72:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a76:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a82:	eeb0 0a67 	vmov.f32	s0, s15
 8003a86:	f00d fb93 	bl	80111b0 <sqrtf>
 8003a8a:	eeb0 7a40 	vmov.f32	s14, s0
 8003a8e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003a92:	4b91      	ldr	r3, [pc, #580]	; (8003cd8 <JoystickLocationState+0xc38>)
 8003a94:	edc3 7a00 	vstr	s15, [r3]

			PlaceTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8003a98:	4b8e      	ldr	r3, [pc, #568]	; (8003cd4 <JoystickLocationState+0xc34>)
 8003a9a:	edd3 7a00 	vldr	s15, [r3]
 8003a9e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003aa2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003aa6:	4b8c      	ldr	r3, [pc, #560]	; (8003cd8 <JoystickLocationState+0xc38>)
 8003aa8:	edd3 7a00 	vldr	s15, [r3]
 8003aac:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003ab0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003ab4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ab8:	4b83      	ldr	r3, [pc, #524]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003aba:	edd3 7a00 	vldr	s15, [r3]
 8003abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac2:	4b81      	ldr	r3, [pc, #516]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003ac4:	edc3 7a04 	vstr	s15, [r3, #16]
			PlaceTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PlaceTray.L1[1];
 8003ac8:	4b83      	ldr	r3, [pc, #524]	; (8003cd8 <JoystickLocationState+0xc38>)
 8003aca:	edd3 7a00 	vldr	s15, [r3]
 8003ace:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ad2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ad6:	4b7f      	ldr	r3, [pc, #508]	; (8003cd4 <JoystickLocationState+0xc34>)
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
 8003adc:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8003ae0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003ae4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ae8:	4b77      	ldr	r3, [pc, #476]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003aea:	edd3 7a01 	vldr	s15, [r3, #4]
 8003aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af2:	4b75      	ldr	r3, [pc, #468]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003af4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PlaceTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8003af8:	4b76      	ldr	r3, [pc, #472]	; (8003cd4 <JoystickLocationState+0xc34>)
 8003afa:	edd3 7a00 	vldr	s15, [r3]
 8003afe:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003b02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b06:	4b74      	ldr	r3, [pc, #464]	; (8003cd8 <JoystickLocationState+0xc38>)
 8003b08:	edd3 7a00 	vldr	s15, [r3]
 8003b0c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003b10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b18:	4b6b      	ldr	r3, [pc, #428]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003b1a:	edd3 7a00 	vldr	s15, [r3]
 8003b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b22:	4b69      	ldr	r3, [pc, #420]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003b24:	edc3 7a05 	vstr	s15, [r3, #20]
			PlaceTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PlaceTray.L1[1];
 8003b28:	4b6b      	ldr	r3, [pc, #428]	; (8003cd8 <JoystickLocationState+0xc38>)
 8003b2a:	edd3 7a00 	vldr	s15, [r3]
 8003b2e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003b32:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b36:	4b67      	ldr	r3, [pc, #412]	; (8003cd4 <JoystickLocationState+0xc34>)
 8003b38:	edd3 7a00 	vldr	s15, [r3]
 8003b3c:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8003b40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b48:	4b5f      	ldr	r3, [pc, #380]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003b4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b52:	4b5d      	ldr	r3, [pc, #372]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003b54:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PlaceTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8003b58:	4b5e      	ldr	r3, [pc, #376]	; (8003cd4 <JoystickLocationState+0xc34>)
 8003b5a:	edd3 7a00 	vldr	s15, [r3]
 8003b5e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003cdc <JoystickLocationState+0xc3c>
 8003b62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b66:	4b5c      	ldr	r3, [pc, #368]	; (8003cd8 <JoystickLocationState+0xc38>)
 8003b68:	edd3 7a00 	vldr	s15, [r3]
 8003b6c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003b70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b78:	4b53      	ldr	r3, [pc, #332]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003b7a:	edd3 7a00 	vldr	s15, [r3]
 8003b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b82:	4b51      	ldr	r3, [pc, #324]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003b84:	edc3 7a06 	vstr	s15, [r3, #24]
			PlaceTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PlaceTray.L1[1];
 8003b88:	4b53      	ldr	r3, [pc, #332]	; (8003cd8 <JoystickLocationState+0xc38>)
 8003b8a:	edd3 7a00 	vldr	s15, [r3]
 8003b8e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003cdc <JoystickLocationState+0xc3c>
 8003b92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b96:	4b4f      	ldr	r3, [pc, #316]	; (8003cd4 <JoystickLocationState+0xc34>)
 8003b98:	edd3 7a00 	vldr	s15, [r3]
 8003b9c:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8003ba0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ba8:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003baa:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bb2:	4b45      	ldr	r3, [pc, #276]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003bb4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PlaceTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PlaceTray.L1[0];
 8003bb8:	4b46      	ldr	r3, [pc, #280]	; (8003cd4 <JoystickLocationState+0xc34>)
 8003bba:	edd3 7a00 	vldr	s15, [r3]
 8003bbe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003bc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bc6:	4b44      	ldr	r3, [pc, #272]	; (8003cd8 <JoystickLocationState+0xc38>)
 8003bc8:	edd3 7a00 	vldr	s15, [r3]
 8003bcc:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003bd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bd8:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003bda:	edd3 7a00 	vldr	s15, [r3]
 8003bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003be2:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003be4:	edc3 7a07 	vstr	s15, [r3, #28]
			PlaceTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PlaceTray.L1[1];
 8003be8:	4b3b      	ldr	r3, [pc, #236]	; (8003cd8 <JoystickLocationState+0xc38>)
 8003bea:	edd3 7a00 	vldr	s15, [r3]
 8003bee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003bf2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bf6:	4b37      	ldr	r3, [pc, #220]	; (8003cd4 <JoystickLocationState+0xc34>)
 8003bf8:	edd3 7a00 	vldr	s15, [r3]
 8003bfc:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8003c00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c08:	4b2f      	ldr	r3, [pc, #188]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003c0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c12:	4b2d      	ldr	r3, [pc, #180]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003c14:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PlaceTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PlaceTray.L1[0];
 8003c18:	4b2e      	ldr	r3, [pc, #184]	; (8003cd4 <JoystickLocationState+0xc34>)
 8003c1a:	edd3 7a00 	vldr	s15, [r3]
 8003c1e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003c22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c26:	4b2c      	ldr	r3, [pc, #176]	; (8003cd8 <JoystickLocationState+0xc38>)
 8003c28:	edd3 7a00 	vldr	s15, [r3]
 8003c2c:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003c30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c38:	4b23      	ldr	r3, [pc, #140]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003c3a:	edd3 7a00 	vldr	s15, [r3]
 8003c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c42:	4b21      	ldr	r3, [pc, #132]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003c44:	edc3 7a08 	vstr	s15, [r3, #32]
			PlaceTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PlaceTray.L1[1];
 8003c48:	4b23      	ldr	r3, [pc, #140]	; (8003cd8 <JoystickLocationState+0xc38>)
 8003c4a:	edd3 7a00 	vldr	s15, [r3]
 8003c4e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003c52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c56:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <JoystickLocationState+0xc34>)
 8003c58:	edd3 7a00 	vldr	s15, [r3]
 8003c5c:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8003c60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c68:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003c6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c72:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003c74:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PlaceTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PlaceTray.L1[0];
 8003c78:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <JoystickLocationState+0xc34>)
 8003c7a:	edd3 7a00 	vldr	s15, [r3]
 8003c7e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003cdc <JoystickLocationState+0xc3c>
 8003c82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c86:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <JoystickLocationState+0xc38>)
 8003c88:	edd3 7a00 	vldr	s15, [r3]
 8003c8c:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003c90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003c9a:	edd3 7a00 	vldr	s15, [r3]
 8003c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <JoystickLocationState+0xc28>)
 8003ca4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PlaceTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PlaceTray.L1[1];
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <JoystickLocationState+0xc38>)
 8003caa:	edd3 7a00 	vldr	s15, [r3]
 8003cae:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003cdc <JoystickLocationState+0xc3c>
 8003cb2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003cb6:	e013      	b.n	8003ce0 <JoystickLocationState+0xc40>
 8003cb8:	70a3d70a 	.word	0x70a3d70a
 8003cbc:	3fa70a3d 	.word	0x3fa70a3d
 8003cc0:	20000ff8 	.word	0x20000ff8
 8003cc4:	cccccccd 	.word	0xcccccccd
 8003cc8:	20000a44 	.word	0x20000a44
 8003ccc:	200009ac 	.word	0x200009ac
 8003cd0:	20000ab0 	.word	0x20000ab0
 8003cd4:	20000aa8 	.word	0x20000aa8
 8003cd8:	20000aac 	.word	0x20000aac
 8003cdc:	42480000 	.word	0x42480000
 8003ce0:	4bad      	ldr	r3, [pc, #692]	; (8003f98 <JoystickLocationState+0xef8>)
 8003ce2:	edd3 7a00 	vldr	s15, [r3]
 8003ce6:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8003cea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003cee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cf2:	4baa      	ldr	r3, [pc, #680]	; (8003f9c <JoystickLocationState+0xefc>)
 8003cf4:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cfc:	4ba7      	ldr	r3, [pc, #668]	; (8003f9c <JoystickLocationState+0xefc>)
 8003cfe:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PlaceTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003d02:	4ba5      	ldr	r3, [pc, #660]	; (8003f98 <JoystickLocationState+0xef8>)
 8003d04:	edd3 7a00 	vldr	s15, [r3]
 8003d08:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d10:	4ba3      	ldr	r3, [pc, #652]	; (8003fa0 <JoystickLocationState+0xf00>)
 8003d12:	edd3 7a00 	vldr	s15, [r3]
 8003d16:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8003fa4 <JoystickLocationState+0xf04>
 8003d1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d22:	4b9e      	ldr	r3, [pc, #632]	; (8003f9c <JoystickLocationState+0xefc>)
 8003d24:	edd3 7a00 	vldr	s15, [r3]
 8003d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d2c:	4b9b      	ldr	r3, [pc, #620]	; (8003f9c <JoystickLocationState+0xefc>)
 8003d2e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PlaceTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003d32:	4b9b      	ldr	r3, [pc, #620]	; (8003fa0 <JoystickLocationState+0xf00>)
 8003d34:	edd3 7a00 	vldr	s15, [r3]
 8003d38:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d40:	4b95      	ldr	r3, [pc, #596]	; (8003f98 <JoystickLocationState+0xef8>)
 8003d42:	edd3 7a00 	vldr	s15, [r3]
 8003d46:	eddf 6a98 	vldr	s13, [pc, #608]	; 8003fa8 <JoystickLocationState+0xf08>
 8003d4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d52:	4b92      	ldr	r3, [pc, #584]	; (8003f9c <JoystickLocationState+0xefc>)
 8003d54:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d5c:	4b8f      	ldr	r3, [pc, #572]	; (8003f9c <JoystickLocationState+0xefc>)
 8003d5e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PlaceTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003d62:	4b8d      	ldr	r3, [pc, #564]	; (8003f98 <JoystickLocationState+0xef8>)
 8003d64:	edd3 7a00 	vldr	s15, [r3]
 8003d68:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003d6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d70:	4b8b      	ldr	r3, [pc, #556]	; (8003fa0 <JoystickLocationState+0xf00>)
 8003d72:	edd3 7a00 	vldr	s15, [r3]
 8003d76:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8003fa4 <JoystickLocationState+0xf04>
 8003d7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d82:	4b86      	ldr	r3, [pc, #536]	; (8003f9c <JoystickLocationState+0xefc>)
 8003d84:	edd3 7a00 	vldr	s15, [r3]
 8003d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d8c:	4b83      	ldr	r3, [pc, #524]	; (8003f9c <JoystickLocationState+0xefc>)
 8003d8e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PlaceTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003d92:	4b83      	ldr	r3, [pc, #524]	; (8003fa0 <JoystickLocationState+0xf00>)
 8003d94:	edd3 7a00 	vldr	s15, [r3]
 8003d98:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003d9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003da0:	4b7d      	ldr	r3, [pc, #500]	; (8003f98 <JoystickLocationState+0xef8>)
 8003da2:	edd3 7a00 	vldr	s15, [r3]
 8003da6:	eddf 6a80 	vldr	s13, [pc, #512]	; 8003fa8 <JoystickLocationState+0xf08>
 8003daa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003db2:	4b7a      	ldr	r3, [pc, #488]	; (8003f9c <JoystickLocationState+0xefc>)
 8003db4:	edd3 7a01 	vldr	s15, [r3, #4]
 8003db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dbc:	4b77      	ldr	r3, [pc, #476]	; (8003f9c <JoystickLocationState+0xefc>)
 8003dbe:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PlaceTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003dc2:	4b75      	ldr	r3, [pc, #468]	; (8003f98 <JoystickLocationState+0xef8>)
 8003dc4:	edd3 7a00 	vldr	s15, [r3]
 8003dc8:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8003fac <JoystickLocationState+0xf0c>
 8003dcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003dd0:	4b73      	ldr	r3, [pc, #460]	; (8003fa0 <JoystickLocationState+0xf00>)
 8003dd2:	edd3 7a00 	vldr	s15, [r3]
 8003dd6:	eddf 6a73 	vldr	s13, [pc, #460]	; 8003fa4 <JoystickLocationState+0xf04>
 8003dda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003dde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003de2:	4b6e      	ldr	r3, [pc, #440]	; (8003f9c <JoystickLocationState+0xefc>)
 8003de4:	edd3 7a00 	vldr	s15, [r3]
 8003de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dec:	4b6b      	ldr	r3, [pc, #428]	; (8003f9c <JoystickLocationState+0xefc>)
 8003dee:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PlaceTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003df2:	4b6b      	ldr	r3, [pc, #428]	; (8003fa0 <JoystickLocationState+0xf00>)
 8003df4:	edd3 7a00 	vldr	s15, [r3]
 8003df8:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8003fac <JoystickLocationState+0xf0c>
 8003dfc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e00:	4b65      	ldr	r3, [pc, #404]	; (8003f98 <JoystickLocationState+0xef8>)
 8003e02:	edd3 7a00 	vldr	s15, [r3]
 8003e06:	eddf 6a68 	vldr	s13, [pc, #416]	; 8003fa8 <JoystickLocationState+0xf08>
 8003e0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003e0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e12:	4b62      	ldr	r3, [pc, #392]	; (8003f9c <JoystickLocationState+0xefc>)
 8003e14:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e1c:	4b5f      	ldr	r3, [pc, #380]	; (8003f9c <JoystickLocationState+0xefc>)
 8003e1e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PlaceTray.origin_x = (PlaceTray.L1[0]+(50*sin_Theta))*10;
 8003e22:	4b5e      	ldr	r3, [pc, #376]	; (8003f9c <JoystickLocationState+0xefc>)
 8003e24:	ed93 7a00 	vldr	s14, [r3]
 8003e28:	4b5d      	ldr	r3, [pc, #372]	; (8003fa0 <JoystickLocationState+0xf00>)
 8003e2a:	edd3 7a00 	vldr	s15, [r3]
 8003e2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003fac <JoystickLocationState+0xf0c>
 8003e32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e3a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e46:	ee17 3a90 	vmov	r3, s15
 8003e4a:	b21a      	sxth	r2, r3
 8003e4c:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <JoystickLocationState+0xefc>)
 8003e4e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			PlaceTray.origin_y = (PlaceTray.L1[1]-(50*cos_Theta))*10;
 8003e52:	4b52      	ldr	r3, [pc, #328]	; (8003f9c <JoystickLocationState+0xefc>)
 8003e54:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e58:	4b4f      	ldr	r3, [pc, #316]	; (8003f98 <JoystickLocationState+0xef8>)
 8003e5a:	edd3 7a00 	vldr	s15, [r3]
 8003e5e:	eddf 6a53 	vldr	s13, [pc, #332]	; 8003fac <JoystickLocationState+0xf0c>
 8003e62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e76:	ee17 3a90 	vmov	r3, s15
 8003e7a:	b21a      	sxth	r2, r3
 8003e7c:	4b47      	ldr	r3, [pc, #284]	; (8003f9c <JoystickLocationState+0xefc>)
 8003e7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			PlaceTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 8003e82:	4b45      	ldr	r3, [pc, #276]	; (8003f98 <JoystickLocationState+0xef8>)
 8003e84:	edd3 7a00 	vldr	s15, [r3]
 8003e88:	eeb0 0a67 	vmov.f32	s0, s15
 8003e8c:	f00d f964 	bl	8011158 <acosf>
 8003e90:	ee10 3a10 	vmov	r3, s0
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fc fb5f 	bl	8000558 <__aeabi_f2d>
 8003e9a:	a33d      	add	r3, pc, #244	; (adr r3, 8003f90 <JoystickLocationState+0xef0>)
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f7fc fbb2 	bl	8000608 <__aeabi_dmul>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f7fc fe5c 	bl	8000b68 <__aeabi_d2iz>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	b21a      	sxth	r2, r3
 8003eb4:	4b39      	ldr	r3, [pc, #228]	; (8003f9c <JoystickLocationState+0xefc>)
 8003eb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

			registerFrame[35].U16 = PlaceTray.origin_x;
 8003eba:	4b38      	ldr	r3, [pc, #224]	; (8003f9c <JoystickLocationState+0xefc>)
 8003ebc:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	4b3b      	ldr	r3, [pc, #236]	; (8003fb0 <JoystickLocationState+0xf10>)
 8003ec4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[36].U16 = PlaceTray.origin_y;
 8003ec8:	4b34      	ldr	r3, [pc, #208]	; (8003f9c <JoystickLocationState+0xefc>)
 8003eca:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	4b37      	ldr	r3, [pc, #220]	; (8003fb0 <JoystickLocationState+0xf10>)
 8003ed2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[37].U16 = PlaceTray.orientation * 100;
 8003ed6:	4b31      	ldr	r3, [pc, #196]	; (8003f9c <JoystickLocationState+0xefc>)
 8003ed8:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	0092      	lsls	r2, r2, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	0091      	lsls	r1, r2, #2
 8003ee8:	461a      	mov	r2, r3
 8003eea:	460b      	mov	r3, r1
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	4b2f      	ldr	r3, [pc, #188]	; (8003fb0 <JoystickLocationState+0xf10>)
 8003ef4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			registerFrame[16].U16 = 0;
 8003ef8:	4b2d      	ldr	r3, [pc, #180]	; (8003fb0 <JoystickLocationState+0xf10>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8003efe:	e03d      	b.n	8003f7c <JoystickLocationState+0xedc>
		else if (ResetButton.flag == 1)
 8003f00:	4b2c      	ldr	r3, [pc, #176]	; (8003fb4 <JoystickLocationState+0xf14>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d139      	bne.n	8003f7c <JoystickLocationState+0xedc>
			ResetButton.flag = 0;
 8003f08:	4b2a      	ldr	r3, [pc, #168]	; (8003fb4 <JoystickLocationState+0xf14>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	609a      	str	r2, [r3, #8]
			state = 1;
 8003f0e:	4b2a      	ldr	r3, [pc, #168]	; (8003fb8 <JoystickLocationState+0xf18>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	601a      	str	r2, [r3, #0]
		break;
 8003f14:	e032      	b.n	8003f7c <JoystickLocationState+0xedc>
	case 5:
		EndEffectorState = 2;		//TestModeOff
 8003f16:	4b29      	ldr	r3, [pc, #164]	; (8003fbc <JoystickLocationState+0xf1c>)
 8003f18:	2202      	movs	r2, #2
 8003f1a:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 0;	//End Effector Status: Laser Off
 8003f1c:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <JoystickLocationState+0xf10>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8003f22:	4b27      	ldr	r3, [pc, #156]	; (8003fc0 <JoystickLocationState+0xf20>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 8003f28:	f7fe fc26 	bl	8002778 <EndEffectorWrite>

		HAL_Delay(100);
 8003f2c:	2064      	movs	r0, #100	; 0x64
 8003f2e:	f001 fa85 	bl	800543c <HAL_Delay>

		EndEffectorState = 3;		//RunModeOn
 8003f32:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <JoystickLocationState+0xf1c>)
 8003f34:	2203      	movs	r2, #3
 8003f36:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 2;	//End Effector Status: Gripper Power
 8003f38:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <JoystickLocationState+0xf10>)
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8003f3e:	4b20      	ldr	r3, [pc, #128]	; (8003fc0 <JoystickLocationState+0xf20>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 8003f44:	f7fe fc18 	bl	8002778 <EndEffectorWrite>

		HAL_Delay(100);
 8003f48:	2064      	movs	r0, #100	; 0x64
 8003f4a:	f001 fa77 	bl	800543c <HAL_Delay>

		state = 1;
 8003f4e:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <JoystickLocationState+0xf18>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
		scheduler = 1;				//Go Pick
 8003f54:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <JoystickLocationState+0xf24>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
		if (ResetButton.flag == 1)
 8003f5a:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <JoystickLocationState+0xf14>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d10e      	bne.n	8003f80 <JoystickLocationState+0xee0>
		{
			ResetButton.flag = 0;
 8003f62:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <JoystickLocationState+0xf14>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	609a      	str	r2, [r3, #8]
			state = 1;
 8003f68:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <JoystickLocationState+0xf18>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
		}
		break;
 8003f6e:	e007      	b.n	8003f80 <JoystickLocationState+0xee0>
		break;
 8003f70:	bf00      	nop
 8003f72:	e006      	b.n	8003f82 <JoystickLocationState+0xee2>
		break;
 8003f74:	bf00      	nop
 8003f76:	e004      	b.n	8003f82 <JoystickLocationState+0xee2>
		break;
 8003f78:	bf00      	nop
 8003f7a:	e002      	b.n	8003f82 <JoystickLocationState+0xee2>
		break;
 8003f7c:	bf00      	nop
 8003f7e:	e000      	b.n	8003f82 <JoystickLocationState+0xee2>
		break;
 8003f80:	bf00      	nop
	}
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	ecbd 8b02 	vpop	{d8}
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	f3af 8000 	nop.w
 8003f90:	1a63c1f8 	.word	0x1a63c1f8
 8003f94:	404ca5dc 	.word	0x404ca5dc
 8003f98:	20000aa8 	.word	0x20000aa8
 8003f9c:	20000a44 	.word	0x20000a44
 8003fa0:	20000aac 	.word	0x20000aac
 8003fa4:	42200000 	.word	0x42200000
 8003fa8:	c2200000 	.word	0xc2200000
 8003fac:	42480000 	.word	0x42480000
 8003fb0:	20000ff8 	.word	0x20000ff8
 8003fb4:	20000abc 	.word	0x20000abc
 8003fb8:	20000224 	.word	0x20000224
 8003fbc:	20000b18 	.word	0x20000b18
 8003fc0:	20000b10 	.word	0x20000b10
 8003fc4:	20000200 	.word	0x20000200

08003fc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
	if(htim == &htim9) //check call back from timer9
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a06      	ldr	r2, [pc, #24]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d105      	bne.n	8003fe4 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		if(scheduler == 3)
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d101      	bne.n	8003fe4 <HAL_TIM_PeriodElapsedCallback+0x1c>
		{
			TrajectoryGenerator();
 8003fe0:	f000 f80a 	bl	8003ff8 <TrajectoryGenerator>
//			if (hi2c1.State == HAL_I2C_STATE_READY) {
//				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
//			}
//		}
//	}
}
 8003fe4:	bf00      	nop
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	200006b4 	.word	0x200006b4
 8003ff0:	20000200 	.word	0x20000200
 8003ff4:	00000000 	.word	0x00000000

08003ff8 <TrajectoryGenerator>:

void TrajectoryGenerator()
{
 8003ff8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ffc:	af00      	add	r7, sp, #0
	switch(Trajectstate)
 8003ffe:	4b93      	ldr	r3, [pc, #588]	; (800424c <TrajectoryGenerator+0x254>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b03      	cmp	r3, #3
 8004004:	f200 8519 	bhi.w	8004a3a <TrajectoryGenerator+0xa42>
 8004008:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <TrajectoryGenerator+0x18>)
 800400a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400e:	bf00      	nop
 8004010:	08004021 	.word	0x08004021
 8004014:	08004295 	.word	0x08004295
 8004018:	080045d5 	.word	0x080045d5
 800401c:	08004a39 	.word	0x08004a39
	{
	case 0: //initial Condition & Case Check
			qi = position;
 8004020:	4b8b      	ldr	r3, [pc, #556]	; (8004250 <TrajectoryGenerator+0x258>)
 8004022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004026:	ee07 3a90 	vmov	s15, r3
 800402a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800402e:	4b89      	ldr	r3, [pc, #548]	; (8004254 <TrajectoryGenerator+0x25c>)
 8004030:	edc3 7a00 	vstr	s15, [r3]
			qdi = 0;
 8004034:	4b88      	ldr	r3, [pc, #544]	; (8004258 <TrajectoryGenerator+0x260>)
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
			qd_max = 22222;  //1000 pulse/s
 800403c:	4b87      	ldr	r3, [pc, #540]	; (800425c <TrajectoryGenerator+0x264>)
 800403e:	4a88      	ldr	r2, [pc, #544]	; (8004260 <TrajectoryGenerator+0x268>)
 8004040:	601a      	str	r2, [r3, #0]
			qdd_max = 55555; //2000 pulse/s^2 /0.045
 8004042:	4b88      	ldr	r3, [pc, #544]	; (8004264 <TrajectoryGenerator+0x26c>)
 8004044:	4a88      	ldr	r2, [pc, #544]	; (8004268 <TrajectoryGenerator+0x270>)
 8004046:	601a      	str	r2, [r3, #0]

		  if(qf > qi)
 8004048:	4b88      	ldr	r3, [pc, #544]	; (800426c <TrajectoryGenerator+0x274>)
 800404a:	ed93 7a00 	vldr	s14, [r3]
 800404e:	4b81      	ldr	r3, [pc, #516]	; (8004254 <TrajectoryGenerator+0x25c>)
 8004050:	edd3 7a00 	vldr	s15, [r3]
 8004054:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405c:	dd16      	ble.n	800408c <TrajectoryGenerator+0x94>
		  {
			  t_half = sqrtf((qf-qi)/qdd_max);
 800405e:	4b83      	ldr	r3, [pc, #524]	; (800426c <TrajectoryGenerator+0x274>)
 8004060:	ed93 7a00 	vldr	s14, [r3]
 8004064:	4b7b      	ldr	r3, [pc, #492]	; (8004254 <TrajectoryGenerator+0x25c>)
 8004066:	edd3 7a00 	vldr	s15, [r3]
 800406a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800406e:	4b7d      	ldr	r3, [pc, #500]	; (8004264 <TrajectoryGenerator+0x26c>)
 8004070:	edd3 7a00 	vldr	s15, [r3]
 8004074:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004078:	eeb0 0a66 	vmov.f32	s0, s13
 800407c:	f00d f898 	bl	80111b0 <sqrtf>
 8004080:	eef0 7a40 	vmov.f32	s15, s0
 8004084:	4b7a      	ldr	r3, [pc, #488]	; (8004270 <TrajectoryGenerator+0x278>)
 8004086:	edc3 7a00 	vstr	s15, [r3]
 800408a:	e022      	b.n	80040d2 <TrajectoryGenerator+0xda>
		  }
		  else if(qf < qi)
 800408c:	4b77      	ldr	r3, [pc, #476]	; (800426c <TrajectoryGenerator+0x274>)
 800408e:	ed93 7a00 	vldr	s14, [r3]
 8004092:	4b70      	ldr	r3, [pc, #448]	; (8004254 <TrajectoryGenerator+0x25c>)
 8004094:	edd3 7a00 	vldr	s15, [r3]
 8004098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800409c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a0:	d517      	bpl.n	80040d2 <TrajectoryGenerator+0xda>
		  {
			  t_half = sqrtf(-1*(qf-qi)/qdd_max);
 80040a2:	4b72      	ldr	r3, [pc, #456]	; (800426c <TrajectoryGenerator+0x274>)
 80040a4:	ed93 7a00 	vldr	s14, [r3]
 80040a8:	4b6a      	ldr	r3, [pc, #424]	; (8004254 <TrajectoryGenerator+0x25c>)
 80040aa:	edd3 7a00 	vldr	s15, [r3]
 80040ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040b2:	eeb1 7a67 	vneg.f32	s14, s15
 80040b6:	4b6b      	ldr	r3, [pc, #428]	; (8004264 <TrajectoryGenerator+0x26c>)
 80040b8:	edd3 7a00 	vldr	s15, [r3]
 80040bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80040c0:	eeb0 0a66 	vmov.f32	s0, s13
 80040c4:	f00d f874 	bl	80111b0 <sqrtf>
 80040c8:	eef0 7a40 	vmov.f32	s15, s0
 80040cc:	4b68      	ldr	r3, [pc, #416]	; (8004270 <TrajectoryGenerator+0x278>)
 80040ce:	edc3 7a00 	vstr	s15, [r3]
		  }

		  if(qf-qi < 0)
 80040d2:	4b66      	ldr	r3, [pc, #408]	; (800426c <TrajectoryGenerator+0x274>)
 80040d4:	ed93 7a00 	vldr	s14, [r3]
 80040d8:	4b5e      	ldr	r3, [pc, #376]	; (8004254 <TrajectoryGenerator+0x25c>)
 80040da:	edd3 7a00 	vldr	s15, [r3]
 80040de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ea:	d50f      	bpl.n	800410c <TrajectoryGenerator+0x114>
		  {
			  qd_max = -1*qd_max;
 80040ec:	4b5b      	ldr	r3, [pc, #364]	; (800425c <TrajectoryGenerator+0x264>)
 80040ee:	edd3 7a00 	vldr	s15, [r3]
 80040f2:	eef1 7a67 	vneg.f32	s15, s15
 80040f6:	4b59      	ldr	r3, [pc, #356]	; (800425c <TrajectoryGenerator+0x264>)
 80040f8:	edc3 7a00 	vstr	s15, [r3]
			  qdd_max = -1*qdd_max;
 80040fc:	4b59      	ldr	r3, [pc, #356]	; (8004264 <TrajectoryGenerator+0x26c>)
 80040fe:	edd3 7a00 	vldr	s15, [r3]
 8004102:	eef1 7a67 	vneg.f32	s15, s15
 8004106:	4b57      	ldr	r3, [pc, #348]	; (8004264 <TrajectoryGenerator+0x26c>)
 8004108:	edc3 7a00 	vstr	s15, [r3]
		  }

		  tacc = (qd_max-qdi)/qdd_max;
 800410c:	4b53      	ldr	r3, [pc, #332]	; (800425c <TrajectoryGenerator+0x264>)
 800410e:	ed93 7a00 	vldr	s14, [r3]
 8004112:	4b51      	ldr	r3, [pc, #324]	; (8004258 <TrajectoryGenerator+0x260>)
 8004114:	edd3 7a00 	vldr	s15, [r3]
 8004118:	ee77 6a67 	vsub.f32	s13, s14, s15
 800411c:	4b51      	ldr	r3, [pc, #324]	; (8004264 <TrajectoryGenerator+0x26c>)
 800411e:	ed93 7a00 	vldr	s14, [r3]
 8004122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004126:	4b53      	ldr	r3, [pc, #332]	; (8004274 <TrajectoryGenerator+0x27c>)
 8004128:	edc3 7a00 	vstr	s15, [r3]
		  qacc = qdi*tacc + 0.5*qdd_max*tacc*tacc;
 800412c:	4b4a      	ldr	r3, [pc, #296]	; (8004258 <TrajectoryGenerator+0x260>)
 800412e:	ed93 7a00 	vldr	s14, [r3]
 8004132:	4b50      	ldr	r3, [pc, #320]	; (8004274 <TrajectoryGenerator+0x27c>)
 8004134:	edd3 7a00 	vldr	s15, [r3]
 8004138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800413c:	ee17 0a90 	vmov	r0, s15
 8004140:	f7fc fa0a 	bl	8000558 <__aeabi_f2d>
 8004144:	4604      	mov	r4, r0
 8004146:	460d      	mov	r5, r1
 8004148:	4b46      	ldr	r3, [pc, #280]	; (8004264 <TrajectoryGenerator+0x26c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f7fc fa03 	bl	8000558 <__aeabi_f2d>
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	4b48      	ldr	r3, [pc, #288]	; (8004278 <TrajectoryGenerator+0x280>)
 8004158:	f7fc fa56 	bl	8000608 <__aeabi_dmul>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4690      	mov	r8, r2
 8004162:	4699      	mov	r9, r3
 8004164:	4b43      	ldr	r3, [pc, #268]	; (8004274 <TrajectoryGenerator+0x27c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f7fc f9f5 	bl	8000558 <__aeabi_f2d>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4640      	mov	r0, r8
 8004174:	4649      	mov	r1, r9
 8004176:	f7fc fa47 	bl	8000608 <__aeabi_dmul>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4690      	mov	r8, r2
 8004180:	4699      	mov	r9, r3
 8004182:	4b3c      	ldr	r3, [pc, #240]	; (8004274 <TrajectoryGenerator+0x27c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fc f9e6 	bl	8000558 <__aeabi_f2d>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4640      	mov	r0, r8
 8004192:	4649      	mov	r1, r9
 8004194:	f7fc fa38 	bl	8000608 <__aeabi_dmul>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4620      	mov	r0, r4
 800419e:	4629      	mov	r1, r5
 80041a0:	f7fc f87c 	bl	800029c <__adddf3>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	f7fc fd24 	bl	8000bf8 <__aeabi_d2f>
 80041b0:	4603      	mov	r3, r0
 80041b2:	4a32      	ldr	r2, [pc, #200]	; (800427c <TrajectoryGenerator+0x284>)
 80041b4:	6013      	str	r3, [r2, #0]
		  qdec = qacc;
 80041b6:	4b31      	ldr	r3, [pc, #196]	; (800427c <TrajectoryGenerator+0x284>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a31      	ldr	r2, [pc, #196]	; (8004280 <TrajectoryGenerator+0x288>)
 80041bc:	6013      	str	r3, [r2, #0]
		  tconst = ((qf-qi)-qacc-qdec)/qd_max;
 80041be:	4b2b      	ldr	r3, [pc, #172]	; (800426c <TrajectoryGenerator+0x274>)
 80041c0:	ed93 7a00 	vldr	s14, [r3]
 80041c4:	4b23      	ldr	r3, [pc, #140]	; (8004254 <TrajectoryGenerator+0x25c>)
 80041c6:	edd3 7a00 	vldr	s15, [r3]
 80041ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041ce:	4b2b      	ldr	r3, [pc, #172]	; (800427c <TrajectoryGenerator+0x284>)
 80041d0:	edd3 7a00 	vldr	s15, [r3]
 80041d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041d8:	4b29      	ldr	r3, [pc, #164]	; (8004280 <TrajectoryGenerator+0x288>)
 80041da:	edd3 7a00 	vldr	s15, [r3]
 80041de:	ee77 6a67 	vsub.f32	s13, s14, s15
 80041e2:	4b1e      	ldr	r3, [pc, #120]	; (800425c <TrajectoryGenerator+0x264>)
 80041e4:	ed93 7a00 	vldr	s14, [r3]
 80041e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ec:	4b25      	ldr	r3, [pc, #148]	; (8004284 <TrajectoryGenerator+0x28c>)
 80041ee:	edc3 7a00 	vstr	s15, [r3]
		  tdec = tacc;
 80041f2:	4b20      	ldr	r3, [pc, #128]	; (8004274 <TrajectoryGenerator+0x27c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a24      	ldr	r2, [pc, #144]	; (8004288 <TrajectoryGenerator+0x290>)
 80041f8:	6013      	str	r3, [r2, #0]

		  if(fabs(qdi+qdd_max*t_half) >= fabs(qd_max))
 80041fa:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <TrajectoryGenerator+0x26c>)
 80041fc:	ed93 7a00 	vldr	s14, [r3]
 8004200:	4b1b      	ldr	r3, [pc, #108]	; (8004270 <TrajectoryGenerator+0x278>)
 8004202:	edd3 7a00 	vldr	s15, [r3]
 8004206:	ee27 7a27 	vmul.f32	s14, s14, s15
 800420a:	4b13      	ldr	r3, [pc, #76]	; (8004258 <TrajectoryGenerator+0x260>)
 800420c:	edd3 7a00 	vldr	s15, [r3]
 8004210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004214:	eeb0 7ae7 	vabs.f32	s14, s15
 8004218:	4b10      	ldr	r3, [pc, #64]	; (800425c <TrajectoryGenerator+0x264>)
 800421a:	edd3 7a00 	vldr	s15, [r3]
 800421e:	eef0 7ae7 	vabs.f32	s15, s15
 8004222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800422a:	db07      	blt.n	800423c <TrajectoryGenerator+0x244>
		  {
			  initime = time;
 800422c:	4b17      	ldr	r3, [pc, #92]	; (800428c <TrajectoryGenerator+0x294>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a17      	ldr	r2, [pc, #92]	; (8004290 <TrajectoryGenerator+0x298>)
 8004232:	6013      	str	r3, [r2, #0]
			  Trajectstate = 2;
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <TrajectoryGenerator+0x254>)
 8004236:	2202      	movs	r2, #2
 8004238:	601a      	str	r2, [r3, #0]
		  else
		  {
			  initime = time;
			  Trajectstate = 1;
		  }
		  break;
 800423a:	e3fe      	b.n	8004a3a <TrajectoryGenerator+0xa42>
			  initime = time;
 800423c:	4b13      	ldr	r3, [pc, #76]	; (800428c <TrajectoryGenerator+0x294>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a13      	ldr	r2, [pc, #76]	; (8004290 <TrajectoryGenerator+0x298>)
 8004242:	6013      	str	r3, [r2, #0]
			  Trajectstate = 1;
 8004244:	4b01      	ldr	r3, [pc, #4]	; (800424c <TrajectoryGenerator+0x254>)
 8004246:	2201      	movs	r2, #1
 8004248:	601a      	str	r2, [r3, #0]
		  break;
 800424a:	e3f6      	b.n	8004a3a <TrajectoryGenerator+0xa42>
 800424c:	2000096c 	.word	0x2000096c
 8004250:	200009ac 	.word	0x200009ac
 8004254:	20000978 	.word	0x20000978
 8004258:	2000097c 	.word	0x2000097c
 800425c:	20000210 	.word	0x20000210
 8004260:	46ad9c00 	.word	0x46ad9c00
 8004264:	20000214 	.word	0x20000214
 8004268:	47590300 	.word	0x47590300
 800426c:	20000974 	.word	0x20000974
 8004270:	20000984 	.word	0x20000984
 8004274:	20000998 	.word	0x20000998
 8004278:	3fe00000 	.word	0x3fe00000
 800427c:	2000099c 	.word	0x2000099c
 8004280:	200009a0 	.word	0x200009a0
 8004284:	200009a4 	.word	0x200009a4
 8004288:	200009a8 	.word	0x200009a8
 800428c:	20000970 	.word	0x20000970
 8004290:	20000980 	.word	0x20000980

	case 1:
		  if(time <= t_half + initime)
 8004294:	4bc2      	ldr	r3, [pc, #776]	; (80045a0 <TrajectoryGenerator+0x5a8>)
 8004296:	ed93 7a00 	vldr	s14, [r3]
 800429a:	4bc2      	ldr	r3, [pc, #776]	; (80045a4 <TrajectoryGenerator+0x5ac>)
 800429c:	edd3 7a00 	vldr	s15, [r3]
 80042a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042a4:	4bc0      	ldr	r3, [pc, #768]	; (80045a8 <TrajectoryGenerator+0x5b0>)
 80042a6:	edd3 7a00 	vldr	s15, [r3]
 80042aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b2:	f2c0 8092 	blt.w	80043da <TrajectoryGenerator+0x3e2>
		  {
			  setacc = qdd_max;
 80042b6:	4bbd      	ldr	r3, [pc, #756]	; (80045ac <TrajectoryGenerator+0x5b4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4abd      	ldr	r2, [pc, #756]	; (80045b0 <TrajectoryGenerator+0x5b8>)
 80042bc:	6013      	str	r3, [r2, #0]
			  setvelocity = qdi + setacc*(time-initime);
 80042be:	4bba      	ldr	r3, [pc, #744]	; (80045a8 <TrajectoryGenerator+0x5b0>)
 80042c0:	ed93 7a00 	vldr	s14, [r3]
 80042c4:	4bb7      	ldr	r3, [pc, #732]	; (80045a4 <TrajectoryGenerator+0x5ac>)
 80042c6:	edd3 7a00 	vldr	s15, [r3]
 80042ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042ce:	4bb8      	ldr	r3, [pc, #736]	; (80045b0 <TrajectoryGenerator+0x5b8>)
 80042d0:	edd3 7a00 	vldr	s15, [r3]
 80042d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042d8:	4bb6      	ldr	r3, [pc, #728]	; (80045b4 <TrajectoryGenerator+0x5bc>)
 80042da:	edd3 7a00 	vldr	s15, [r3]
 80042de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042e2:	4bb5      	ldr	r3, [pc, #724]	; (80045b8 <TrajectoryGenerator+0x5c0>)
 80042e4:	edc3 7a00 	vstr	s15, [r3]
			  setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 80042e8:	4baf      	ldr	r3, [pc, #700]	; (80045a8 <TrajectoryGenerator+0x5b0>)
 80042ea:	ed93 7a00 	vldr	s14, [r3]
 80042ee:	4bad      	ldr	r3, [pc, #692]	; (80045a4 <TrajectoryGenerator+0x5ac>)
 80042f0:	edd3 7a00 	vldr	s15, [r3]
 80042f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042f8:	4bae      	ldr	r3, [pc, #696]	; (80045b4 <TrajectoryGenerator+0x5bc>)
 80042fa:	edd3 7a00 	vldr	s15, [r3]
 80042fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004302:	4bae      	ldr	r3, [pc, #696]	; (80045bc <TrajectoryGenerator+0x5c4>)
 8004304:	edd3 7a00 	vldr	s15, [r3]
 8004308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800430c:	ee17 0a90 	vmov	r0, s15
 8004310:	f7fc f922 	bl	8000558 <__aeabi_f2d>
 8004314:	4604      	mov	r4, r0
 8004316:	460d      	mov	r5, r1
 8004318:	4ba5      	ldr	r3, [pc, #660]	; (80045b0 <TrajectoryGenerator+0x5b8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f7fc f91b 	bl	8000558 <__aeabi_f2d>
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	4ba6      	ldr	r3, [pc, #664]	; (80045c0 <TrajectoryGenerator+0x5c8>)
 8004328:	f7fc f96e 	bl	8000608 <__aeabi_dmul>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4690      	mov	r8, r2
 8004332:	4699      	mov	r9, r3
 8004334:	4b9c      	ldr	r3, [pc, #624]	; (80045a8 <TrajectoryGenerator+0x5b0>)
 8004336:	ed93 7a00 	vldr	s14, [r3]
 800433a:	4b9a      	ldr	r3, [pc, #616]	; (80045a4 <TrajectoryGenerator+0x5ac>)
 800433c:	edd3 7a00 	vldr	s15, [r3]
 8004340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004344:	ee17 0a90 	vmov	r0, s15
 8004348:	f7fc f906 	bl	8000558 <__aeabi_f2d>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4640      	mov	r0, r8
 8004352:	4649      	mov	r1, r9
 8004354:	f7fc f958 	bl	8000608 <__aeabi_dmul>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4690      	mov	r8, r2
 800435e:	4699      	mov	r9, r3
 8004360:	4b91      	ldr	r3, [pc, #580]	; (80045a8 <TrajectoryGenerator+0x5b0>)
 8004362:	ed93 7a00 	vldr	s14, [r3]
 8004366:	4b8f      	ldr	r3, [pc, #572]	; (80045a4 <TrajectoryGenerator+0x5ac>)
 8004368:	edd3 7a00 	vldr	s15, [r3]
 800436c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004370:	ee17 0a90 	vmov	r0, s15
 8004374:	f7fc f8f0 	bl	8000558 <__aeabi_f2d>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4640      	mov	r0, r8
 800437e:	4649      	mov	r1, r9
 8004380:	f7fc f942 	bl	8000608 <__aeabi_dmul>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4620      	mov	r0, r4
 800438a:	4629      	mov	r1, r5
 800438c:	f7fb ff86 	bl	800029c <__adddf3>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4610      	mov	r0, r2
 8004396:	4619      	mov	r1, r3
 8004398:	f7fc fc2e 	bl	8000bf8 <__aeabi_d2f>
 800439c:	4603      	mov	r3, r0
 800439e:	4a89      	ldr	r2, [pc, #548]	; (80045c4 <TrajectoryGenerator+0x5cc>)
 80043a0:	6013      	str	r3, [r2, #0]

			  qi_1 = setposition;
 80043a2:	4b88      	ldr	r3, [pc, #544]	; (80045c4 <TrajectoryGenerator+0x5cc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a88      	ldr	r2, [pc, #544]	; (80045c8 <TrajectoryGenerator+0x5d0>)
 80043a8:	6013      	str	r3, [r2, #0]
			  qdi_1 = setvelocity;
 80043aa:	4b83      	ldr	r3, [pc, #524]	; (80045b8 <TrajectoryGenerator+0x5c0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a87      	ldr	r2, [pc, #540]	; (80045cc <TrajectoryGenerator+0x5d4>)
 80043b0:	6013      	str	r3, [r2, #0]
			  time += 0.001;
 80043b2:	4b7d      	ldr	r3, [pc, #500]	; (80045a8 <TrajectoryGenerator+0x5b0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fc f8ce 	bl	8000558 <__aeabi_f2d>
 80043bc:	a376      	add	r3, pc, #472	; (adr r3, 8004598 <TrajectoryGenerator+0x5a0>)
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	f7fb ff6b 	bl	800029c <__adddf3>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	f7fc fc13 	bl	8000bf8 <__aeabi_d2f>
 80043d2:	4603      	mov	r3, r0
 80043d4:	4a74      	ldr	r2, [pc, #464]	; (80045a8 <TrajectoryGenerator+0x5b0>)
 80043d6:	6013      	str	r3, [r2, #0]
			  time += 0.001;
		  }
		  else if(time > (2*t_half) + initime){
			  setposition = qf;
		  }
		break;
 80043d8:	e32f      	b.n	8004a3a <TrajectoryGenerator+0xa42>
		  else if(t_half + initime < time && time <= (2*t_half) + initime)
 80043da:	4b71      	ldr	r3, [pc, #452]	; (80045a0 <TrajectoryGenerator+0x5a8>)
 80043dc:	ed93 7a00 	vldr	s14, [r3]
 80043e0:	4b70      	ldr	r3, [pc, #448]	; (80045a4 <TrajectoryGenerator+0x5ac>)
 80043e2:	edd3 7a00 	vldr	s15, [r3]
 80043e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043ea:	4b6f      	ldr	r3, [pc, #444]	; (80045a8 <TrajectoryGenerator+0x5b0>)
 80043ec:	edd3 7a00 	vldr	s15, [r3]
 80043f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f8:	f140 80b5 	bpl.w	8004566 <TrajectoryGenerator+0x56e>
 80043fc:	4b68      	ldr	r3, [pc, #416]	; (80045a0 <TrajectoryGenerator+0x5a8>)
 80043fe:	edd3 7a00 	vldr	s15, [r3]
 8004402:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004406:	4b67      	ldr	r3, [pc, #412]	; (80045a4 <TrajectoryGenerator+0x5ac>)
 8004408:	edd3 7a00 	vldr	s15, [r3]
 800440c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004410:	4b65      	ldr	r3, [pc, #404]	; (80045a8 <TrajectoryGenerator+0x5b0>)
 8004412:	edd3 7a00 	vldr	s15, [r3]
 8004416:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800441a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441e:	f2c0 80a2 	blt.w	8004566 <TrajectoryGenerator+0x56e>
			  setacc = -qdd_max;
 8004422:	4b62      	ldr	r3, [pc, #392]	; (80045ac <TrajectoryGenerator+0x5b4>)
 8004424:	edd3 7a00 	vldr	s15, [r3]
 8004428:	eef1 7a67 	vneg.f32	s15, s15
 800442c:	4b60      	ldr	r3, [pc, #384]	; (80045b0 <TrajectoryGenerator+0x5b8>)
 800442e:	edc3 7a00 	vstr	s15, [r3]
			  setvelocity = qdi_1 + setacc*(time-initime-t_half);
 8004432:	4b5d      	ldr	r3, [pc, #372]	; (80045a8 <TrajectoryGenerator+0x5b0>)
 8004434:	ed93 7a00 	vldr	s14, [r3]
 8004438:	4b5a      	ldr	r3, [pc, #360]	; (80045a4 <TrajectoryGenerator+0x5ac>)
 800443a:	edd3 7a00 	vldr	s15, [r3]
 800443e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004442:	4b57      	ldr	r3, [pc, #348]	; (80045a0 <TrajectoryGenerator+0x5a8>)
 8004444:	edd3 7a00 	vldr	s15, [r3]
 8004448:	ee37 7a67 	vsub.f32	s14, s14, s15
 800444c:	4b58      	ldr	r3, [pc, #352]	; (80045b0 <TrajectoryGenerator+0x5b8>)
 800444e:	edd3 7a00 	vldr	s15, [r3]
 8004452:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004456:	4b5d      	ldr	r3, [pc, #372]	; (80045cc <TrajectoryGenerator+0x5d4>)
 8004458:	edd3 7a00 	vldr	s15, [r3]
 800445c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004460:	4b55      	ldr	r3, [pc, #340]	; (80045b8 <TrajectoryGenerator+0x5c0>)
 8004462:	edc3 7a00 	vstr	s15, [r3]
			  setposition = qi_1 + qdi_1*(time-initime-t_half)+0.5*setacc*(time-initime-t_half)*(time-initime-t_half);
 8004466:	4b50      	ldr	r3, [pc, #320]	; (80045a8 <TrajectoryGenerator+0x5b0>)
 8004468:	ed93 7a00 	vldr	s14, [r3]
 800446c:	4b4d      	ldr	r3, [pc, #308]	; (80045a4 <TrajectoryGenerator+0x5ac>)
 800446e:	edd3 7a00 	vldr	s15, [r3]
 8004472:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004476:	4b4a      	ldr	r3, [pc, #296]	; (80045a0 <TrajectoryGenerator+0x5a8>)
 8004478:	edd3 7a00 	vldr	s15, [r3]
 800447c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004480:	4b52      	ldr	r3, [pc, #328]	; (80045cc <TrajectoryGenerator+0x5d4>)
 8004482:	edd3 7a00 	vldr	s15, [r3]
 8004486:	ee27 7a27 	vmul.f32	s14, s14, s15
 800448a:	4b4f      	ldr	r3, [pc, #316]	; (80045c8 <TrajectoryGenerator+0x5d0>)
 800448c:	edd3 7a00 	vldr	s15, [r3]
 8004490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004494:	ee17 0a90 	vmov	r0, s15
 8004498:	f7fc f85e 	bl	8000558 <__aeabi_f2d>
 800449c:	4604      	mov	r4, r0
 800449e:	460d      	mov	r5, r1
 80044a0:	4b43      	ldr	r3, [pc, #268]	; (80045b0 <TrajectoryGenerator+0x5b8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fc f857 	bl	8000558 <__aeabi_f2d>
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	4b44      	ldr	r3, [pc, #272]	; (80045c0 <TrajectoryGenerator+0x5c8>)
 80044b0:	f7fc f8aa 	bl	8000608 <__aeabi_dmul>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4690      	mov	r8, r2
 80044ba:	4699      	mov	r9, r3
 80044bc:	4b3a      	ldr	r3, [pc, #232]	; (80045a8 <TrajectoryGenerator+0x5b0>)
 80044be:	ed93 7a00 	vldr	s14, [r3]
 80044c2:	4b38      	ldr	r3, [pc, #224]	; (80045a4 <TrajectoryGenerator+0x5ac>)
 80044c4:	edd3 7a00 	vldr	s15, [r3]
 80044c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044cc:	4b34      	ldr	r3, [pc, #208]	; (80045a0 <TrajectoryGenerator+0x5a8>)
 80044ce:	edd3 7a00 	vldr	s15, [r3]
 80044d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044d6:	ee17 0a90 	vmov	r0, s15
 80044da:	f7fc f83d 	bl	8000558 <__aeabi_f2d>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4640      	mov	r0, r8
 80044e4:	4649      	mov	r1, r9
 80044e6:	f7fc f88f 	bl	8000608 <__aeabi_dmul>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4690      	mov	r8, r2
 80044f0:	4699      	mov	r9, r3
 80044f2:	4b2d      	ldr	r3, [pc, #180]	; (80045a8 <TrajectoryGenerator+0x5b0>)
 80044f4:	ed93 7a00 	vldr	s14, [r3]
 80044f8:	4b2a      	ldr	r3, [pc, #168]	; (80045a4 <TrajectoryGenerator+0x5ac>)
 80044fa:	edd3 7a00 	vldr	s15, [r3]
 80044fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004502:	4b27      	ldr	r3, [pc, #156]	; (80045a0 <TrajectoryGenerator+0x5a8>)
 8004504:	edd3 7a00 	vldr	s15, [r3]
 8004508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800450c:	ee17 0a90 	vmov	r0, s15
 8004510:	f7fc f822 	bl	8000558 <__aeabi_f2d>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4640      	mov	r0, r8
 800451a:	4649      	mov	r1, r9
 800451c:	f7fc f874 	bl	8000608 <__aeabi_dmul>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4620      	mov	r0, r4
 8004526:	4629      	mov	r1, r5
 8004528:	f7fb feb8 	bl	800029c <__adddf3>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4610      	mov	r0, r2
 8004532:	4619      	mov	r1, r3
 8004534:	f7fc fb60 	bl	8000bf8 <__aeabi_d2f>
 8004538:	4603      	mov	r3, r0
 800453a:	4a22      	ldr	r2, [pc, #136]	; (80045c4 <TrajectoryGenerator+0x5cc>)
 800453c:	6013      	str	r3, [r2, #0]
			  time += 0.001;
 800453e:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <TrajectoryGenerator+0x5b0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f7fc f808 	bl	8000558 <__aeabi_f2d>
 8004548:	a313      	add	r3, pc, #76	; (adr r3, 8004598 <TrajectoryGenerator+0x5a0>)
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	f7fb fea5 	bl	800029c <__adddf3>
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	4610      	mov	r0, r2
 8004558:	4619      	mov	r1, r3
 800455a:	f7fc fb4d 	bl	8000bf8 <__aeabi_d2f>
 800455e:	4603      	mov	r3, r0
 8004560:	4a11      	ldr	r2, [pc, #68]	; (80045a8 <TrajectoryGenerator+0x5b0>)
 8004562:	6013      	str	r3, [r2, #0]
		break;
 8004564:	e269      	b.n	8004a3a <TrajectoryGenerator+0xa42>
		  else if(time > (2*t_half) + initime){
 8004566:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <TrajectoryGenerator+0x5a8>)
 8004568:	edd3 7a00 	vldr	s15, [r3]
 800456c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <TrajectoryGenerator+0x5ac>)
 8004572:	edd3 7a00 	vldr	s15, [r3]
 8004576:	ee37 7a27 	vadd.f32	s14, s14, s15
 800457a:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <TrajectoryGenerator+0x5b0>)
 800457c:	edd3 7a00 	vldr	s15, [r3]
 8004580:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004588:	d400      	bmi.n	800458c <TrajectoryGenerator+0x594>
		break;
 800458a:	e256      	b.n	8004a3a <TrajectoryGenerator+0xa42>
			  setposition = qf;
 800458c:	4b10      	ldr	r3, [pc, #64]	; (80045d0 <TrajectoryGenerator+0x5d8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0c      	ldr	r2, [pc, #48]	; (80045c4 <TrajectoryGenerator+0x5cc>)
 8004592:	6013      	str	r3, [r2, #0]
		break;
 8004594:	e251      	b.n	8004a3a <TrajectoryGenerator+0xa42>
 8004596:	bf00      	nop
 8004598:	d2f1a9fc 	.word	0xd2f1a9fc
 800459c:	3f50624d 	.word	0x3f50624d
 80045a0:	20000984 	.word	0x20000984
 80045a4:	20000980 	.word	0x20000980
 80045a8:	20000970 	.word	0x20000970
 80045ac:	20000214 	.word	0x20000214
 80045b0:	200009dc 	.word	0x200009dc
 80045b4:	2000097c 	.word	0x2000097c
 80045b8:	200009d8 	.word	0x200009d8
 80045bc:	20000978 	.word	0x20000978
 80045c0:	3fe00000 	.word	0x3fe00000
 80045c4:	200009b8 	.word	0x200009b8
 80045c8:	20000990 	.word	0x20000990
 80045cc:	20000988 	.word	0x20000988
 80045d0:	20000974 	.word	0x20000974

	case 2:
		 if(time <= tacc + initime)
 80045d4:	4b84      	ldr	r3, [pc, #528]	; (80047e8 <TrajectoryGenerator+0x7f0>)
 80045d6:	ed93 7a00 	vldr	s14, [r3]
 80045da:	4b84      	ldr	r3, [pc, #528]	; (80047ec <TrajectoryGenerator+0x7f4>)
 80045dc:	edd3 7a00 	vldr	s15, [r3]
 80045e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045e4:	4b82      	ldr	r3, [pc, #520]	; (80047f0 <TrajectoryGenerator+0x7f8>)
 80045e6:	edd3 7a00 	vldr	s15, [r3]
 80045ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f2:	f2c0 8092 	blt.w	800471a <TrajectoryGenerator+0x722>
		 {
			 setacc = qdd_max;
 80045f6:	4b7f      	ldr	r3, [pc, #508]	; (80047f4 <TrajectoryGenerator+0x7fc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a7f      	ldr	r2, [pc, #508]	; (80047f8 <TrajectoryGenerator+0x800>)
 80045fc:	6013      	str	r3, [r2, #0]
			 setvelocity = qdi + setacc*(time-initime);
 80045fe:	4b7c      	ldr	r3, [pc, #496]	; (80047f0 <TrajectoryGenerator+0x7f8>)
 8004600:	ed93 7a00 	vldr	s14, [r3]
 8004604:	4b79      	ldr	r3, [pc, #484]	; (80047ec <TrajectoryGenerator+0x7f4>)
 8004606:	edd3 7a00 	vldr	s15, [r3]
 800460a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800460e:	4b7a      	ldr	r3, [pc, #488]	; (80047f8 <TrajectoryGenerator+0x800>)
 8004610:	edd3 7a00 	vldr	s15, [r3]
 8004614:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004618:	4b78      	ldr	r3, [pc, #480]	; (80047fc <TrajectoryGenerator+0x804>)
 800461a:	edd3 7a00 	vldr	s15, [r3]
 800461e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004622:	4b77      	ldr	r3, [pc, #476]	; (8004800 <TrajectoryGenerator+0x808>)
 8004624:	edc3 7a00 	vstr	s15, [r3]
			 setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 8004628:	4b71      	ldr	r3, [pc, #452]	; (80047f0 <TrajectoryGenerator+0x7f8>)
 800462a:	ed93 7a00 	vldr	s14, [r3]
 800462e:	4b6f      	ldr	r3, [pc, #444]	; (80047ec <TrajectoryGenerator+0x7f4>)
 8004630:	edd3 7a00 	vldr	s15, [r3]
 8004634:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004638:	4b70      	ldr	r3, [pc, #448]	; (80047fc <TrajectoryGenerator+0x804>)
 800463a:	edd3 7a00 	vldr	s15, [r3]
 800463e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004642:	4b70      	ldr	r3, [pc, #448]	; (8004804 <TrajectoryGenerator+0x80c>)
 8004644:	edd3 7a00 	vldr	s15, [r3]
 8004648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800464c:	ee17 0a90 	vmov	r0, s15
 8004650:	f7fb ff82 	bl	8000558 <__aeabi_f2d>
 8004654:	4604      	mov	r4, r0
 8004656:	460d      	mov	r5, r1
 8004658:	4b67      	ldr	r3, [pc, #412]	; (80047f8 <TrajectoryGenerator+0x800>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f7fb ff7b 	bl	8000558 <__aeabi_f2d>
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	4b68      	ldr	r3, [pc, #416]	; (8004808 <TrajectoryGenerator+0x810>)
 8004668:	f7fb ffce 	bl	8000608 <__aeabi_dmul>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4690      	mov	r8, r2
 8004672:	4699      	mov	r9, r3
 8004674:	4b5e      	ldr	r3, [pc, #376]	; (80047f0 <TrajectoryGenerator+0x7f8>)
 8004676:	ed93 7a00 	vldr	s14, [r3]
 800467a:	4b5c      	ldr	r3, [pc, #368]	; (80047ec <TrajectoryGenerator+0x7f4>)
 800467c:	edd3 7a00 	vldr	s15, [r3]
 8004680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004684:	ee17 0a90 	vmov	r0, s15
 8004688:	f7fb ff66 	bl	8000558 <__aeabi_f2d>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4640      	mov	r0, r8
 8004692:	4649      	mov	r1, r9
 8004694:	f7fb ffb8 	bl	8000608 <__aeabi_dmul>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4690      	mov	r8, r2
 800469e:	4699      	mov	r9, r3
 80046a0:	4b53      	ldr	r3, [pc, #332]	; (80047f0 <TrajectoryGenerator+0x7f8>)
 80046a2:	ed93 7a00 	vldr	s14, [r3]
 80046a6:	4b51      	ldr	r3, [pc, #324]	; (80047ec <TrajectoryGenerator+0x7f4>)
 80046a8:	edd3 7a00 	vldr	s15, [r3]
 80046ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046b0:	ee17 0a90 	vmov	r0, s15
 80046b4:	f7fb ff50 	bl	8000558 <__aeabi_f2d>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4640      	mov	r0, r8
 80046be:	4649      	mov	r1, r9
 80046c0:	f7fb ffa2 	bl	8000608 <__aeabi_dmul>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4620      	mov	r0, r4
 80046ca:	4629      	mov	r1, r5
 80046cc:	f7fb fde6 	bl	800029c <__adddf3>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4610      	mov	r0, r2
 80046d6:	4619      	mov	r1, r3
 80046d8:	f7fc fa8e 	bl	8000bf8 <__aeabi_d2f>
 80046dc:	4603      	mov	r3, r0
 80046de:	4a4b      	ldr	r2, [pc, #300]	; (800480c <TrajectoryGenerator+0x814>)
 80046e0:	6013      	str	r3, [r2, #0]

			 qi_1 = setposition;
 80046e2:	4b4a      	ldr	r3, [pc, #296]	; (800480c <TrajectoryGenerator+0x814>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a4a      	ldr	r2, [pc, #296]	; (8004810 <TrajectoryGenerator+0x818>)
 80046e8:	6013      	str	r3, [r2, #0]
			 qdi_1 = setvelocity;
 80046ea:	4b45      	ldr	r3, [pc, #276]	; (8004800 <TrajectoryGenerator+0x808>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a49      	ldr	r2, [pc, #292]	; (8004814 <TrajectoryGenerator+0x81c>)
 80046f0:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 80046f2:	4b3f      	ldr	r3, [pc, #252]	; (80047f0 <TrajectoryGenerator+0x7f8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fb ff2e 	bl	8000558 <__aeabi_f2d>
 80046fc:	a338      	add	r3, pc, #224	; (adr r3, 80047e0 <TrajectoryGenerator+0x7e8>)
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	f7fb fdcb 	bl	800029c <__adddf3>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	4610      	mov	r0, r2
 800470c:	4619      	mov	r1, r3
 800470e:	f7fc fa73 	bl	8000bf8 <__aeabi_d2f>
 8004712:	4603      	mov	r3, r0
 8004714:	4a36      	ldr	r2, [pc, #216]	; (80047f0 <TrajectoryGenerator+0x7f8>)
 8004716:	6013      	str	r3, [r2, #0]
			 time += 0.001;
		 }
		 else if(time > tacc+tconst+tdec+initime){
			 setposition = qf;
		 }
		 break;
 8004718:	e18f      	b.n	8004a3a <TrajectoryGenerator+0xa42>
		 else if(tacc+initime < time && time <= initime+tacc+tconst)
 800471a:	4b33      	ldr	r3, [pc, #204]	; (80047e8 <TrajectoryGenerator+0x7f0>)
 800471c:	ed93 7a00 	vldr	s14, [r3]
 8004720:	4b32      	ldr	r3, [pc, #200]	; (80047ec <TrajectoryGenerator+0x7f4>)
 8004722:	edd3 7a00 	vldr	s15, [r3]
 8004726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800472a:	4b31      	ldr	r3, [pc, #196]	; (80047f0 <TrajectoryGenerator+0x7f8>)
 800472c:	edd3 7a00 	vldr	s15, [r3]
 8004730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004738:	d576      	bpl.n	8004828 <TrajectoryGenerator+0x830>
 800473a:	4b2c      	ldr	r3, [pc, #176]	; (80047ec <TrajectoryGenerator+0x7f4>)
 800473c:	ed93 7a00 	vldr	s14, [r3]
 8004740:	4b29      	ldr	r3, [pc, #164]	; (80047e8 <TrajectoryGenerator+0x7f0>)
 8004742:	edd3 7a00 	vldr	s15, [r3]
 8004746:	ee37 7a27 	vadd.f32	s14, s14, s15
 800474a:	4b33      	ldr	r3, [pc, #204]	; (8004818 <TrajectoryGenerator+0x820>)
 800474c:	edd3 7a00 	vldr	s15, [r3]
 8004750:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004754:	4b26      	ldr	r3, [pc, #152]	; (80047f0 <TrajectoryGenerator+0x7f8>)
 8004756:	edd3 7a00 	vldr	s15, [r3]
 800475a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800475e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004762:	db61      	blt.n	8004828 <TrajectoryGenerator+0x830>
			 setacc = 0;
 8004764:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <TrajectoryGenerator+0x800>)
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
			 setvelocity = qd_max;
 800476c:	4b2b      	ldr	r3, [pc, #172]	; (800481c <TrajectoryGenerator+0x824>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a23      	ldr	r2, [pc, #140]	; (8004800 <TrajectoryGenerator+0x808>)
 8004772:	6013      	str	r3, [r2, #0]
			 setposition = qi_1 + qd_max*(time-initime-tacc);
 8004774:	4b1e      	ldr	r3, [pc, #120]	; (80047f0 <TrajectoryGenerator+0x7f8>)
 8004776:	ed93 7a00 	vldr	s14, [r3]
 800477a:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <TrajectoryGenerator+0x7f4>)
 800477c:	edd3 7a00 	vldr	s15, [r3]
 8004780:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004784:	4b18      	ldr	r3, [pc, #96]	; (80047e8 <TrajectoryGenerator+0x7f0>)
 8004786:	edd3 7a00 	vldr	s15, [r3]
 800478a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800478e:	4b23      	ldr	r3, [pc, #140]	; (800481c <TrajectoryGenerator+0x824>)
 8004790:	edd3 7a00 	vldr	s15, [r3]
 8004794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004798:	4b1d      	ldr	r3, [pc, #116]	; (8004810 <TrajectoryGenerator+0x818>)
 800479a:	edd3 7a00 	vldr	s15, [r3]
 800479e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047a2:	4b1a      	ldr	r3, [pc, #104]	; (800480c <TrajectoryGenerator+0x814>)
 80047a4:	edc3 7a00 	vstr	s15, [r3]
			 qi_2 = setposition;
 80047a8:	4b18      	ldr	r3, [pc, #96]	; (800480c <TrajectoryGenerator+0x814>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1c      	ldr	r2, [pc, #112]	; (8004820 <TrajectoryGenerator+0x828>)
 80047ae:	6013      	str	r3, [r2, #0]
			 qdi_2 = setvelocity;
 80047b0:	4b13      	ldr	r3, [pc, #76]	; (8004800 <TrajectoryGenerator+0x808>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1b      	ldr	r2, [pc, #108]	; (8004824 <TrajectoryGenerator+0x82c>)
 80047b6:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 80047b8:	4b0d      	ldr	r3, [pc, #52]	; (80047f0 <TrajectoryGenerator+0x7f8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fb fecb 	bl	8000558 <__aeabi_f2d>
 80047c2:	a307      	add	r3, pc, #28	; (adr r3, 80047e0 <TrajectoryGenerator+0x7e8>)
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	f7fb fd68 	bl	800029c <__adddf3>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4610      	mov	r0, r2
 80047d2:	4619      	mov	r1, r3
 80047d4:	f7fc fa10 	bl	8000bf8 <__aeabi_d2f>
 80047d8:	4603      	mov	r3, r0
 80047da:	4a05      	ldr	r2, [pc, #20]	; (80047f0 <TrajectoryGenerator+0x7f8>)
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	e12a      	b.n	8004a36 <TrajectoryGenerator+0xa3e>
 80047e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80047e4:	3f50624d 	.word	0x3f50624d
 80047e8:	20000998 	.word	0x20000998
 80047ec:	20000980 	.word	0x20000980
 80047f0:	20000970 	.word	0x20000970
 80047f4:	20000214 	.word	0x20000214
 80047f8:	200009dc 	.word	0x200009dc
 80047fc:	2000097c 	.word	0x2000097c
 8004800:	200009d8 	.word	0x200009d8
 8004804:	20000978 	.word	0x20000978
 8004808:	3fe00000 	.word	0x3fe00000
 800480c:	200009b8 	.word	0x200009b8
 8004810:	20000990 	.word	0x20000990
 8004814:	20000988 	.word	0x20000988
 8004818:	200009a4 	.word	0x200009a4
 800481c:	20000210 	.word	0x20000210
 8004820:	20000994 	.word	0x20000994
 8004824:	2000098c 	.word	0x2000098c
		 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8004828:	4b87      	ldr	r3, [pc, #540]	; (8004a48 <TrajectoryGenerator+0xa50>)
 800482a:	ed93 7a00 	vldr	s14, [r3]
 800482e:	4b87      	ldr	r3, [pc, #540]	; (8004a4c <TrajectoryGenerator+0xa54>)
 8004830:	edd3 7a00 	vldr	s15, [r3]
 8004834:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004838:	4b85      	ldr	r3, [pc, #532]	; (8004a50 <TrajectoryGenerator+0xa58>)
 800483a:	edd3 7a00 	vldr	s15, [r3]
 800483e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004842:	4b84      	ldr	r3, [pc, #528]	; (8004a54 <TrajectoryGenerator+0xa5c>)
 8004844:	edd3 7a00 	vldr	s15, [r3]
 8004848:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800484c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004850:	f140 80d1 	bpl.w	80049f6 <TrajectoryGenerator+0x9fe>
 8004854:	4b7c      	ldr	r3, [pc, #496]	; (8004a48 <TrajectoryGenerator+0xa50>)
 8004856:	ed93 7a00 	vldr	s14, [r3]
 800485a:	4b7c      	ldr	r3, [pc, #496]	; (8004a4c <TrajectoryGenerator+0xa54>)
 800485c:	edd3 7a00 	vldr	s15, [r3]
 8004860:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004864:	4b7c      	ldr	r3, [pc, #496]	; (8004a58 <TrajectoryGenerator+0xa60>)
 8004866:	edd3 7a00 	vldr	s15, [r3]
 800486a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800486e:	4b78      	ldr	r3, [pc, #480]	; (8004a50 <TrajectoryGenerator+0xa58>)
 8004870:	edd3 7a00 	vldr	s15, [r3]
 8004874:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004878:	4b76      	ldr	r3, [pc, #472]	; (8004a54 <TrajectoryGenerator+0xa5c>)
 800487a:	edd3 7a00 	vldr	s15, [r3]
 800487e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004886:	f2c0 80b6 	blt.w	80049f6 <TrajectoryGenerator+0x9fe>
			 setacc = -qdd_max;
 800488a:	4b74      	ldr	r3, [pc, #464]	; (8004a5c <TrajectoryGenerator+0xa64>)
 800488c:	edd3 7a00 	vldr	s15, [r3]
 8004890:	eef1 7a67 	vneg.f32	s15, s15
 8004894:	4b72      	ldr	r3, [pc, #456]	; (8004a60 <TrajectoryGenerator+0xa68>)
 8004896:	edc3 7a00 	vstr	s15, [r3]
			 setvelocity = qdi_2 + setacc*(time-initime-tacc-tconst);
 800489a:	4b6e      	ldr	r3, [pc, #440]	; (8004a54 <TrajectoryGenerator+0xa5c>)
 800489c:	ed93 7a00 	vldr	s14, [r3]
 80048a0:	4b6b      	ldr	r3, [pc, #428]	; (8004a50 <TrajectoryGenerator+0xa58>)
 80048a2:	edd3 7a00 	vldr	s15, [r3]
 80048a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048aa:	4b67      	ldr	r3, [pc, #412]	; (8004a48 <TrajectoryGenerator+0xa50>)
 80048ac:	edd3 7a00 	vldr	s15, [r3]
 80048b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048b4:	4b65      	ldr	r3, [pc, #404]	; (8004a4c <TrajectoryGenerator+0xa54>)
 80048b6:	edd3 7a00 	vldr	s15, [r3]
 80048ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048be:	4b68      	ldr	r3, [pc, #416]	; (8004a60 <TrajectoryGenerator+0xa68>)
 80048c0:	edd3 7a00 	vldr	s15, [r3]
 80048c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048c8:	4b66      	ldr	r3, [pc, #408]	; (8004a64 <TrajectoryGenerator+0xa6c>)
 80048ca:	edd3 7a00 	vldr	s15, [r3]
 80048ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048d2:	4b65      	ldr	r3, [pc, #404]	; (8004a68 <TrajectoryGenerator+0xa70>)
 80048d4:	edc3 7a00 	vstr	s15, [r3]
			 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
 80048d8:	4b5e      	ldr	r3, [pc, #376]	; (8004a54 <TrajectoryGenerator+0xa5c>)
 80048da:	ed93 7a00 	vldr	s14, [r3]
 80048de:	4b5c      	ldr	r3, [pc, #368]	; (8004a50 <TrajectoryGenerator+0xa58>)
 80048e0:	edd3 7a00 	vldr	s15, [r3]
 80048e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048e8:	4b57      	ldr	r3, [pc, #348]	; (8004a48 <TrajectoryGenerator+0xa50>)
 80048ea:	edd3 7a00 	vldr	s15, [r3]
 80048ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048f2:	4b56      	ldr	r3, [pc, #344]	; (8004a4c <TrajectoryGenerator+0xa54>)
 80048f4:	edd3 7a00 	vldr	s15, [r3]
 80048f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048fc:	4b59      	ldr	r3, [pc, #356]	; (8004a64 <TrajectoryGenerator+0xa6c>)
 80048fe:	edd3 7a00 	vldr	s15, [r3]
 8004902:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004906:	4b59      	ldr	r3, [pc, #356]	; (8004a6c <TrajectoryGenerator+0xa74>)
 8004908:	edd3 7a00 	vldr	s15, [r3]
 800490c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004910:	ee17 0a90 	vmov	r0, s15
 8004914:	f7fb fe20 	bl	8000558 <__aeabi_f2d>
 8004918:	4604      	mov	r4, r0
 800491a:	460d      	mov	r5, r1
 800491c:	4b50      	ldr	r3, [pc, #320]	; (8004a60 <TrajectoryGenerator+0xa68>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7fb fe19 	bl	8000558 <__aeabi_f2d>
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	4b51      	ldr	r3, [pc, #324]	; (8004a70 <TrajectoryGenerator+0xa78>)
 800492c:	f7fb fe6c 	bl	8000608 <__aeabi_dmul>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4690      	mov	r8, r2
 8004936:	4699      	mov	r9, r3
 8004938:	4b46      	ldr	r3, [pc, #280]	; (8004a54 <TrajectoryGenerator+0xa5c>)
 800493a:	ed93 7a00 	vldr	s14, [r3]
 800493e:	4b44      	ldr	r3, [pc, #272]	; (8004a50 <TrajectoryGenerator+0xa58>)
 8004940:	edd3 7a00 	vldr	s15, [r3]
 8004944:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004948:	4b3f      	ldr	r3, [pc, #252]	; (8004a48 <TrajectoryGenerator+0xa50>)
 800494a:	edd3 7a00 	vldr	s15, [r3]
 800494e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004952:	4b3e      	ldr	r3, [pc, #248]	; (8004a4c <TrajectoryGenerator+0xa54>)
 8004954:	edd3 7a00 	vldr	s15, [r3]
 8004958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800495c:	ee17 0a90 	vmov	r0, s15
 8004960:	f7fb fdfa 	bl	8000558 <__aeabi_f2d>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4640      	mov	r0, r8
 800496a:	4649      	mov	r1, r9
 800496c:	f7fb fe4c 	bl	8000608 <__aeabi_dmul>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4690      	mov	r8, r2
 8004976:	4699      	mov	r9, r3
 8004978:	4b36      	ldr	r3, [pc, #216]	; (8004a54 <TrajectoryGenerator+0xa5c>)
 800497a:	ed93 7a00 	vldr	s14, [r3]
 800497e:	4b34      	ldr	r3, [pc, #208]	; (8004a50 <TrajectoryGenerator+0xa58>)
 8004980:	edd3 7a00 	vldr	s15, [r3]
 8004984:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004988:	4b2f      	ldr	r3, [pc, #188]	; (8004a48 <TrajectoryGenerator+0xa50>)
 800498a:	edd3 7a00 	vldr	s15, [r3]
 800498e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004992:	4b2e      	ldr	r3, [pc, #184]	; (8004a4c <TrajectoryGenerator+0xa54>)
 8004994:	edd3 7a00 	vldr	s15, [r3]
 8004998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800499c:	ee17 0a90 	vmov	r0, s15
 80049a0:	f7fb fdda 	bl	8000558 <__aeabi_f2d>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4640      	mov	r0, r8
 80049aa:	4649      	mov	r1, r9
 80049ac:	f7fb fe2c 	bl	8000608 <__aeabi_dmul>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4620      	mov	r0, r4
 80049b6:	4629      	mov	r1, r5
 80049b8:	f7fb fc70 	bl	800029c <__adddf3>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4610      	mov	r0, r2
 80049c2:	4619      	mov	r1, r3
 80049c4:	f7fc f918 	bl	8000bf8 <__aeabi_d2f>
 80049c8:	4603      	mov	r3, r0
 80049ca:	4a2a      	ldr	r2, [pc, #168]	; (8004a74 <TrajectoryGenerator+0xa7c>)
 80049cc:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 80049ce:	4b21      	ldr	r3, [pc, #132]	; (8004a54 <TrajectoryGenerator+0xa5c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fb fdc0 	bl	8000558 <__aeabi_f2d>
 80049d8:	a319      	add	r3, pc, #100	; (adr r3, 8004a40 <TrajectoryGenerator+0xa48>)
 80049da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049de:	f7fb fc5d 	bl	800029c <__adddf3>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4610      	mov	r0, r2
 80049e8:	4619      	mov	r1, r3
 80049ea:	f7fc f905 	bl	8000bf8 <__aeabi_d2f>
 80049ee:	4603      	mov	r3, r0
 80049f0:	4a18      	ldr	r2, [pc, #96]	; (8004a54 <TrajectoryGenerator+0xa5c>)
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	e01f      	b.n	8004a36 <TrajectoryGenerator+0xa3e>
		 else if(time > tacc+tconst+tdec+initime){
 80049f6:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <TrajectoryGenerator+0xa50>)
 80049f8:	ed93 7a00 	vldr	s14, [r3]
 80049fc:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <TrajectoryGenerator+0xa54>)
 80049fe:	edd3 7a00 	vldr	s15, [r3]
 8004a02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a06:	4b14      	ldr	r3, [pc, #80]	; (8004a58 <TrajectoryGenerator+0xa60>)
 8004a08:	edd3 7a00 	vldr	s15, [r3]
 8004a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a10:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <TrajectoryGenerator+0xa58>)
 8004a12:	edd3 7a00 	vldr	s15, [r3]
 8004a16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a1a:	4b0e      	ldr	r3, [pc, #56]	; (8004a54 <TrajectoryGenerator+0xa5c>)
 8004a1c:	edd3 7a00 	vldr	s15, [r3]
 8004a20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a28:	d400      	bmi.n	8004a2c <TrajectoryGenerator+0xa34>
		 break;
 8004a2a:	e006      	b.n	8004a3a <TrajectoryGenerator+0xa42>
			 setposition = qf;
 8004a2c:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <TrajectoryGenerator+0xa80>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <TrajectoryGenerator+0xa7c>)
 8004a32:	6013      	str	r3, [r2, #0]
		 break;
 8004a34:	e001      	b.n	8004a3a <TrajectoryGenerator+0xa42>
 8004a36:	e000      	b.n	8004a3a <TrajectoryGenerator+0xa42>
	case 3: // wait state
//		setposition = position;
		break;
 8004a38:	bf00      	nop
	}

}
 8004a3a:	bf00      	nop
 8004a3c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a40:	d2f1a9fc 	.word	0xd2f1a9fc
 8004a44:	3f50624d 	.word	0x3f50624d
 8004a48:	20000998 	.word	0x20000998
 8004a4c:	200009a4 	.word	0x200009a4
 8004a50:	20000980 	.word	0x20000980
 8004a54:	20000970 	.word	0x20000970
 8004a58:	200009a8 	.word	0x200009a8
 8004a5c:	20000214 	.word	0x20000214
 8004a60:	200009dc 	.word	0x200009dc
 8004a64:	2000098c 	.word	0x2000098c
 8004a68:	200009d8 	.word	0x200009d8
 8004a6c:	20000994 	.word	0x20000994
 8004a70:	3fe00000 	.word	0x3fe00000
 8004a74:	200009b8 	.word	0x200009b8
 8004a78:	20000974 	.word	0x20000974

08004a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a80:	b672      	cpsid	i
}
 8004a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a84:	e7fe      	b.n	8004a84 <Error_Handler+0x8>
	...

08004a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a8e:	2300      	movs	r3, #0
 8004a90:	607b      	str	r3, [r7, #4]
 8004a92:	4b10      	ldr	r3, [pc, #64]	; (8004ad4 <HAL_MspInit+0x4c>)
 8004a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a96:	4a0f      	ldr	r2, [pc, #60]	; (8004ad4 <HAL_MspInit+0x4c>)
 8004a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <HAL_MspInit+0x4c>)
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa6:	607b      	str	r3, [r7, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004aaa:	2300      	movs	r3, #0
 8004aac:	603b      	str	r3, [r7, #0]
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <HAL_MspInit+0x4c>)
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	4a08      	ldr	r2, [pc, #32]	; (8004ad4 <HAL_MspInit+0x4c>)
 8004ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aba:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <HAL_MspInit+0x4c>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004ac6:	2007      	movs	r0, #7
 8004ac8:	f001 f9ae 	bl	8005e28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004acc:	bf00      	nop
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40023800 	.word	0x40023800

08004ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08a      	sub	sp, #40	; 0x28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae0:	f107 0314 	add.w	r3, r7, #20
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	605a      	str	r2, [r3, #4]
 8004aea:	609a      	str	r2, [r3, #8]
 8004aec:	60da      	str	r2, [r3, #12]
 8004aee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a2f      	ldr	r2, [pc, #188]	; (8004bb4 <HAL_ADC_MspInit+0xdc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d157      	bne.n	8004baa <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004afa:	2300      	movs	r3, #0
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	4b2e      	ldr	r3, [pc, #184]	; (8004bb8 <HAL_ADC_MspInit+0xe0>)
 8004b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b02:	4a2d      	ldr	r2, [pc, #180]	; (8004bb8 <HAL_ADC_MspInit+0xe0>)
 8004b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b08:	6453      	str	r3, [r2, #68]	; 0x44
 8004b0a:	4b2b      	ldr	r3, [pc, #172]	; (8004bb8 <HAL_ADC_MspInit+0xe0>)
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	4b27      	ldr	r3, [pc, #156]	; (8004bb8 <HAL_ADC_MspInit+0xe0>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	4a26      	ldr	r2, [pc, #152]	; (8004bb8 <HAL_ADC_MspInit+0xe0>)
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	6313      	str	r3, [r2, #48]	; 0x30
 8004b26:	4b24      	ldr	r3, [pc, #144]	; (8004bb8 <HAL_ADC_MspInit+0xe0>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Joystick_Analog_X_Pin|Joystick_Analog_Y_Pin;
 8004b32:	2303      	movs	r3, #3
 8004b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b36:	2303      	movs	r3, #3
 8004b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b3e:	f107 0314 	add.w	r3, r7, #20
 8004b42:	4619      	mov	r1, r3
 8004b44:	481d      	ldr	r0, [pc, #116]	; (8004bbc <HAL_ADC_MspInit+0xe4>)
 8004b46:	f001 fdcd 	bl	80066e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004b4a:	4b1d      	ldr	r3, [pc, #116]	; (8004bc0 <HAL_ADC_MspInit+0xe8>)
 8004b4c:	4a1d      	ldr	r2, [pc, #116]	; (8004bc4 <HAL_ADC_MspInit+0xec>)
 8004b4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004b50:	4b1b      	ldr	r3, [pc, #108]	; (8004bc0 <HAL_ADC_MspInit+0xe8>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b56:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <HAL_ADC_MspInit+0xe8>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b5c:	4b18      	ldr	r3, [pc, #96]	; (8004bc0 <HAL_ADC_MspInit+0xe8>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004b62:	4b17      	ldr	r3, [pc, #92]	; (8004bc0 <HAL_ADC_MspInit+0xe8>)
 8004b64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004b6a:	4b15      	ldr	r3, [pc, #84]	; (8004bc0 <HAL_ADC_MspInit+0xe8>)
 8004b6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004b72:	4b13      	ldr	r3, [pc, #76]	; (8004bc0 <HAL_ADC_MspInit+0xe8>)
 8004b74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004b7a:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <HAL_ADC_MspInit+0xe8>)
 8004b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b80:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004b82:	4b0f      	ldr	r3, [pc, #60]	; (8004bc0 <HAL_ADC_MspInit+0xe8>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b88:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <HAL_ADC_MspInit+0xe8>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004b8e:	480c      	ldr	r0, [pc, #48]	; (8004bc0 <HAL_ADC_MspInit+0xe8>)
 8004b90:	f001 f98c 	bl	8005eac <HAL_DMA_Init>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004b9a:	f7ff ff6f 	bl	8004a7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a07      	ldr	r2, [pc, #28]	; (8004bc0 <HAL_ADC_MspInit+0xe8>)
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38
 8004ba4:	4a06      	ldr	r2, [pc, #24]	; (8004bc0 <HAL_ADC_MspInit+0xe8>)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004baa:	bf00      	nop
 8004bac:	3728      	adds	r7, #40	; 0x28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40012000 	.word	0x40012000
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	40020000 	.word	0x40020000
 8004bc0:	20000498 	.word	0x20000498
 8004bc4:	40026410 	.word	0x40026410

08004bc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08a      	sub	sp, #40	; 0x28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd0:	f107 0314 	add.w	r3, r7, #20
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	605a      	str	r2, [r3, #4]
 8004bda:	609a      	str	r2, [r3, #8]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a21      	ldr	r2, [pc, #132]	; (8004c6c <HAL_I2C_MspInit+0xa4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d13c      	bne.n	8004c64 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	4b20      	ldr	r3, [pc, #128]	; (8004c70 <HAL_I2C_MspInit+0xa8>)
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	4a1f      	ldr	r2, [pc, #124]	; (8004c70 <HAL_I2C_MspInit+0xa8>)
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
 8004bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bfa:	4b1d      	ldr	r3, [pc, #116]	; (8004c70 <HAL_I2C_MspInit+0xa8>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	613b      	str	r3, [r7, #16]
 8004c04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004c06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c0c:	2312      	movs	r3, #18
 8004c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c14:	2303      	movs	r3, #3
 8004c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c18:	2304      	movs	r3, #4
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c1c:	f107 0314 	add.w	r3, r7, #20
 8004c20:	4619      	mov	r1, r3
 8004c22:	4814      	ldr	r0, [pc, #80]	; (8004c74 <HAL_I2C_MspInit+0xac>)
 8004c24:	f001 fd5e 	bl	80066e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <HAL_I2C_MspInit+0xa8>)
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c30:	4a0f      	ldr	r2, [pc, #60]	; (8004c70 <HAL_I2C_MspInit+0xa8>)
 8004c32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c36:	6413      	str	r3, [r2, #64]	; 0x40
 8004c38:	4b0d      	ldr	r3, [pc, #52]	; (8004c70 <HAL_I2C_MspInit+0xa8>)
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004c44:	2200      	movs	r2, #0
 8004c46:	2100      	movs	r1, #0
 8004c48:	201f      	movs	r0, #31
 8004c4a:	f001 f8f8 	bl	8005e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004c4e:	201f      	movs	r0, #31
 8004c50:	f001 f911 	bl	8005e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004c54:	2200      	movs	r2, #0
 8004c56:	2100      	movs	r1, #0
 8004c58:	2020      	movs	r0, #32
 8004c5a:	f001 f8f0 	bl	8005e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004c5e:	2020      	movs	r0, #32
 8004c60:	f001 f909 	bl	8005e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004c64:	bf00      	nop
 8004c66:	3728      	adds	r7, #40	; 0x28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40005400 	.word	0x40005400
 8004c70:	40023800 	.word	0x40023800
 8004c74:	40020400 	.word	0x40020400

08004c78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a12      	ldr	r2, [pc, #72]	; (8004cd0 <HAL_TIM_PWM_MspInit+0x58>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d11d      	bne.n	8004cc6 <HAL_TIM_PWM_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <HAL_TIM_PWM_MspInit+0x5c>)
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	4a10      	ldr	r2, [pc, #64]	; (8004cd4 <HAL_TIM_PWM_MspInit+0x5c>)
 8004c94:	f043 0301 	orr.w	r3, r3, #1
 8004c98:	6453      	str	r3, [r2, #68]	; 0x44
 8004c9a:	4b0e      	ldr	r3, [pc, #56]	; (8004cd4 <HAL_TIM_PWM_MspInit+0x5c>)
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 5);
 8004ca6:	2205      	movs	r2, #5
 8004ca8:	2100      	movs	r1, #0
 8004caa:	2018      	movs	r0, #24
 8004cac:	f001 f8c7 	bl	8005e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004cb0:	2018      	movs	r0, #24
 8004cb2:	f001 f8e0 	bl	8005e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2100      	movs	r1, #0
 8004cba:	201a      	movs	r0, #26
 8004cbc:	f001 f8bf 	bl	8005e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004cc0:	201a      	movs	r0, #26
 8004cc2:	f001 f8d8 	bl	8005e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40010000 	.word	0x40010000
 8004cd4:	40023800 	.word	0x40023800

08004cd8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08a      	sub	sp, #40	; 0x28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ce0:	f107 0314 	add.w	r3, r7, #20
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	605a      	str	r2, [r3, #4]
 8004cea:	609a      	str	r2, [r3, #8]
 8004cec:	60da      	str	r2, [r3, #12]
 8004cee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <HAL_TIM_Encoder_MspInit+0x84>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d12b      	bne.n	8004d52 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	4b18      	ldr	r3, [pc, #96]	; (8004d60 <HAL_TIM_Encoder_MspInit+0x88>)
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	4a17      	ldr	r2, [pc, #92]	; (8004d60 <HAL_TIM_Encoder_MspInit+0x88>)
 8004d04:	f043 0302 	orr.w	r3, r3, #2
 8004d08:	6413      	str	r3, [r2, #64]	; 0x40
 8004d0a:	4b15      	ldr	r3, [pc, #84]	; (8004d60 <HAL_TIM_Encoder_MspInit+0x88>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	4b11      	ldr	r3, [pc, #68]	; (8004d60 <HAL_TIM_Encoder_MspInit+0x88>)
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	4a10      	ldr	r2, [pc, #64]	; (8004d60 <HAL_TIM_Encoder_MspInit+0x88>)
 8004d20:	f043 0301 	orr.w	r3, r3, #1
 8004d24:	6313      	str	r3, [r2, #48]	; 0x30
 8004d26:	4b0e      	ldr	r3, [pc, #56]	; (8004d60 <HAL_TIM_Encoder_MspInit+0x88>)
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = QEI_B_Pin|QEI_A_Pin;
 8004d32:	23c0      	movs	r3, #192	; 0xc0
 8004d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d36:	2302      	movs	r3, #2
 8004d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004d42:	2302      	movs	r3, #2
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d46:	f107 0314 	add.w	r3, r7, #20
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4805      	ldr	r0, [pc, #20]	; (8004d64 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004d4e:	f001 fcc9 	bl	80066e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004d52:	bf00      	nop
 8004d54:	3728      	adds	r7, #40	; 0x28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40000400 	.word	0x40000400
 8004d60:	40023800 	.word	0x40023800
 8004d64:	40020000 	.word	0x40020000

08004d68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1c      	ldr	r2, [pc, #112]	; (8004de8 <HAL_TIM_Base_MspInit+0x80>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d116      	bne.n	8004da8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <HAL_TIM_Base_MspInit+0x84>)
 8004d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d82:	4a1a      	ldr	r2, [pc, #104]	; (8004dec <HAL_TIM_Base_MspInit+0x84>)
 8004d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d88:	6453      	str	r3, [r2, #68]	; 0x44
 8004d8a:	4b18      	ldr	r3, [pc, #96]	; (8004dec <HAL_TIM_Base_MspInit+0x84>)
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 5);
 8004d96:	2205      	movs	r2, #5
 8004d98:	2100      	movs	r1, #0
 8004d9a:	2018      	movs	r0, #24
 8004d9c:	f001 f84f 	bl	8005e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004da0:	2018      	movs	r0, #24
 8004da2:	f001 f868 	bl	8005e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004da6:	e01a      	b.n	8004dde <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a10      	ldr	r2, [pc, #64]	; (8004df0 <HAL_TIM_Base_MspInit+0x88>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d115      	bne.n	8004dde <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004db2:	2300      	movs	r3, #0
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <HAL_TIM_Base_MspInit+0x84>)
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	4a0c      	ldr	r2, [pc, #48]	; (8004dec <HAL_TIM_Base_MspInit+0x84>)
 8004dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <HAL_TIM_Base_MspInit+0x84>)
 8004dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	201a      	movs	r0, #26
 8004dd4:	f001 f833 	bl	8005e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004dd8:	201a      	movs	r0, #26
 8004dda:	f001 f84c 	bl	8005e76 <HAL_NVIC_EnableIRQ>
}
 8004dde:	bf00      	nop
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40014000 	.word	0x40014000
 8004dec:	40023800 	.word	0x40023800
 8004df0:	40014800 	.word	0x40014800

08004df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dfc:	f107 030c 	add.w	r3, r7, #12
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	605a      	str	r2, [r3, #4]
 8004e06:	609a      	str	r2, [r3, #8]
 8004e08:	60da      	str	r2, [r3, #12]
 8004e0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a12      	ldr	r2, [pc, #72]	; (8004e5c <HAL_TIM_MspPostInit+0x68>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d11e      	bne.n	8004e54 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e16:	2300      	movs	r3, #0
 8004e18:	60bb      	str	r3, [r7, #8]
 8004e1a:	4b11      	ldr	r3, [pc, #68]	; (8004e60 <HAL_TIM_MspPostInit+0x6c>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	4a10      	ldr	r2, [pc, #64]	; (8004e60 <HAL_TIM_MspPostInit+0x6c>)
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	6313      	str	r3, [r2, #48]	; 0x30
 8004e26:	4b0e      	ldr	r3, [pc, #56]	; (8004e60 <HAL_TIM_MspPostInit+0x6c>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	60bb      	str	r3, [r7, #8]
 8004e30:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_CH1_Pin|PWM_CH2_Pin;
 8004e32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004e36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e38:	2302      	movs	r3, #2
 8004e3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e40:	2300      	movs	r3, #0
 8004e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004e44:	2301      	movs	r3, #1
 8004e46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e48:	f107 030c 	add.w	r3, r7, #12
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4805      	ldr	r0, [pc, #20]	; (8004e64 <HAL_TIM_MspPostInit+0x70>)
 8004e50:	f001 fc48 	bl	80066e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004e54:	bf00      	nop
 8004e56:	3720      	adds	r7, #32
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40010000 	.word	0x40010000
 8004e60:	40023800 	.word	0x40023800
 8004e64:	40020000 	.word	0x40020000

08004e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08c      	sub	sp, #48	; 0x30
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e70:	f107 031c 	add.w	r3, r7, #28
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	605a      	str	r2, [r3, #4]
 8004e7a:	609a      	str	r2, [r3, #8]
 8004e7c:	60da      	str	r2, [r3, #12]
 8004e7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a60      	ldr	r2, [pc, #384]	; (8005008 <HAL_UART_MspInit+0x1a0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d153      	bne.n	8004f32 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	4b5f      	ldr	r3, [pc, #380]	; (800500c <HAL_UART_MspInit+0x1a4>)
 8004e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e92:	4a5e      	ldr	r2, [pc, #376]	; (800500c <HAL_UART_MspInit+0x1a4>)
 8004e94:	f043 0310 	orr.w	r3, r3, #16
 8004e98:	6453      	str	r3, [r2, #68]	; 0x44
 8004e9a:	4b5c      	ldr	r3, [pc, #368]	; (800500c <HAL_UART_MspInit+0x1a4>)
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	f003 0310 	and.w	r3, r3, #16
 8004ea2:	61bb      	str	r3, [r7, #24]
 8004ea4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	4b58      	ldr	r3, [pc, #352]	; (800500c <HAL_UART_MspInit+0x1a4>)
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	4a57      	ldr	r2, [pc, #348]	; (800500c <HAL_UART_MspInit+0x1a4>)
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8004eb6:	4b55      	ldr	r3, [pc, #340]	; (800500c <HAL_UART_MspInit+0x1a4>)
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	4b51      	ldr	r3, [pc, #324]	; (800500c <HAL_UART_MspInit+0x1a4>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	4a50      	ldr	r2, [pc, #320]	; (800500c <HAL_UART_MspInit+0x1a4>)
 8004ecc:	f043 0302 	orr.w	r3, r3, #2
 8004ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed2:	4b4e      	ldr	r3, [pc, #312]	; (800500c <HAL_UART_MspInit+0x1a4>)
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	613b      	str	r3, [r7, #16]
 8004edc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eec:	2303      	movs	r3, #3
 8004eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ef0:	2307      	movs	r3, #7
 8004ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ef4:	f107 031c 	add.w	r3, r7, #28
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4845      	ldr	r0, [pc, #276]	; (8005010 <HAL_UART_MspInit+0x1a8>)
 8004efc:	f001 fbf2 	bl	80066e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004f00:	2380      	movs	r3, #128	; 0x80
 8004f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f04:	2302      	movs	r3, #2
 8004f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004f10:	2307      	movs	r3, #7
 8004f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f14:	f107 031c 	add.w	r3, r7, #28
 8004f18:	4619      	mov	r1, r3
 8004f1a:	483e      	ldr	r0, [pc, #248]	; (8005014 <HAL_UART_MspInit+0x1ac>)
 8004f1c:	f001 fbe2 	bl	80066e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004f20:	2200      	movs	r2, #0
 8004f22:	2100      	movs	r1, #0
 8004f24:	2025      	movs	r0, #37	; 0x25
 8004f26:	f000 ff8a 	bl	8005e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004f2a:	2025      	movs	r0, #37	; 0x25
 8004f2c:	f000 ffa3 	bl	8005e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004f30:	e066      	b.n	8005000 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART2)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a38      	ldr	r2, [pc, #224]	; (8005018 <HAL_UART_MspInit+0x1b0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d161      	bne.n	8005000 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	4b32      	ldr	r3, [pc, #200]	; (800500c <HAL_UART_MspInit+0x1a4>)
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	4a31      	ldr	r2, [pc, #196]	; (800500c <HAL_UART_MspInit+0x1a4>)
 8004f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8004f4c:	4b2f      	ldr	r3, [pc, #188]	; (800500c <HAL_UART_MspInit+0x1a4>)
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60bb      	str	r3, [r7, #8]
 8004f5c:	4b2b      	ldr	r3, [pc, #172]	; (800500c <HAL_UART_MspInit+0x1a4>)
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	4a2a      	ldr	r2, [pc, #168]	; (800500c <HAL_UART_MspInit+0x1a4>)
 8004f62:	f043 0301 	orr.w	r3, r3, #1
 8004f66:	6313      	str	r3, [r2, #48]	; 0x30
 8004f68:	4b28      	ldr	r3, [pc, #160]	; (800500c <HAL_UART_MspInit+0x1a4>)
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8004f74:	230c      	movs	r3, #12
 8004f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f78:	2302      	movs	r3, #2
 8004f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f80:	2303      	movs	r3, #3
 8004f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f84:	2307      	movs	r3, #7
 8004f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f88:	f107 031c 	add.w	r3, r7, #28
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4820      	ldr	r0, [pc, #128]	; (8005010 <HAL_UART_MspInit+0x1a8>)
 8004f90:	f001 fba8 	bl	80066e4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004f94:	4b21      	ldr	r3, [pc, #132]	; (800501c <HAL_UART_MspInit+0x1b4>)
 8004f96:	4a22      	ldr	r2, [pc, #136]	; (8005020 <HAL_UART_MspInit+0x1b8>)
 8004f98:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004f9a:	4b20      	ldr	r3, [pc, #128]	; (800501c <HAL_UART_MspInit+0x1b4>)
 8004f9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004fa0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004fa2:	4b1e      	ldr	r3, [pc, #120]	; (800501c <HAL_UART_MspInit+0x1b4>)
 8004fa4:	2240      	movs	r2, #64	; 0x40
 8004fa6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fa8:	4b1c      	ldr	r3, [pc, #112]	; (800501c <HAL_UART_MspInit+0x1b4>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004fae:	4b1b      	ldr	r3, [pc, #108]	; (800501c <HAL_UART_MspInit+0x1b4>)
 8004fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fb4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fb6:	4b19      	ldr	r3, [pc, #100]	; (800501c <HAL_UART_MspInit+0x1b4>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fbc:	4b17      	ldr	r3, [pc, #92]	; (800501c <HAL_UART_MspInit+0x1b4>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004fc2:	4b16      	ldr	r3, [pc, #88]	; (800501c <HAL_UART_MspInit+0x1b4>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004fc8:	4b14      	ldr	r3, [pc, #80]	; (800501c <HAL_UART_MspInit+0x1b4>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <HAL_UART_MspInit+0x1b4>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004fd4:	4811      	ldr	r0, [pc, #68]	; (800501c <HAL_UART_MspInit+0x1b4>)
 8004fd6:	f000 ff69 	bl	8005eac <HAL_DMA_Init>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8004fe0:	f7ff fd4c 	bl	8004a7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a0d      	ldr	r2, [pc, #52]	; (800501c <HAL_UART_MspInit+0x1b4>)
 8004fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8004fea:	4a0c      	ldr	r2, [pc, #48]	; (800501c <HAL_UART_MspInit+0x1b4>)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	2026      	movs	r0, #38	; 0x26
 8004ff6:	f000 ff22 	bl	8005e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004ffa:	2026      	movs	r0, #38	; 0x26
 8004ffc:	f000 ff3b 	bl	8005e76 <HAL_NVIC_EnableIRQ>
}
 8005000:	bf00      	nop
 8005002:	3730      	adds	r7, #48	; 0x30
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40011000 	.word	0x40011000
 800500c:	40023800 	.word	0x40023800
 8005010:	40020000 	.word	0x40020000
 8005014:	40020400 	.word	0x40020400
 8005018:	40004400 	.word	0x40004400
 800501c:	20000904 	.word	0x20000904
 8005020:	400260a0 	.word	0x400260a0

08005024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005028:	e7fe      	b.n	8005028 <NMI_Handler+0x4>

0800502a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800502a:	b480      	push	{r7}
 800502c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800502e:	e7fe      	b.n	800502e <HardFault_Handler+0x4>

08005030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005034:	e7fe      	b.n	8005034 <MemManage_Handler+0x4>

08005036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005036:	b480      	push	{r7}
 8005038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800503a:	e7fe      	b.n	800503a <BusFault_Handler+0x4>

0800503c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005040:	e7fe      	b.n	8005040 <UsageFault_Handler+0x4>

08005042 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005042:	b480      	push	{r7}
 8005044:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005046:	bf00      	nop
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005054:	bf00      	nop
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800505e:	b480      	push	{r7}
 8005060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005062:	bf00      	nop
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005070:	f000 f9c4 	bl	80053fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005074:	bf00      	nop
 8005076:	bd80      	pop	{r7, pc}

08005078 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Proximity_2_Pin);
 800507c:	2004      	movs	r0, #4
 800507e:	f001 fce7 	bl	8006a50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005082:	bf00      	nop
 8005084:	bd80      	pop	{r7, pc}

08005086 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Proximity_3_Pin);
 800508a:	2008      	movs	r0, #8
 800508c:	f001 fce0 	bl	8006a50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005090:	bf00      	nop
 8005092:	bd80      	pop	{r7, pc}

08005094 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005098:	4802      	ldr	r0, [pc, #8]	; (80050a4 <DMA1_Stream6_IRQHandler+0x10>)
 800509a:	f001 f89f 	bl	80061dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800509e:	bf00      	nop
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20000904 	.word	0x20000904

080050a8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050ac:	4803      	ldr	r0, [pc, #12]	; (80050bc <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80050ae:	f005 f81d 	bl	800a0ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80050b2:	4803      	ldr	r0, [pc, #12]	; (80050c0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80050b4:	f005 f81a 	bl	800a0ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80050b8:	bf00      	nop
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	2000054c 	.word	0x2000054c
 80050c0:	200006b4 	.word	0x200006b4

080050c4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050c8:	4803      	ldr	r0, [pc, #12]	; (80050d8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80050ca:	f005 f80f 	bl	800a0ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80050ce:	4803      	ldr	r0, [pc, #12]	; (80050dc <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80050d0:	f005 f80c 	bl	800a0ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80050d4:	bf00      	nop
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	2000054c 	.word	0x2000054c
 80050dc:	20000768 	.word	0x20000768

080050e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80050e4:	4802      	ldr	r0, [pc, #8]	; (80050f0 <I2C1_EV_IRQHandler+0x10>)
 80050e6:	f001 ffbb 	bl	8007060 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80050ea:	bf00      	nop
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	200004f8 	.word	0x200004f8

080050f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80050f8:	4802      	ldr	r0, [pc, #8]	; (8005104 <I2C1_ER_IRQHandler+0x10>)
 80050fa:	f002 f922 	bl	8007342 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80050fe:	bf00      	nop
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	200004f8 	.word	0x200004f8

08005108 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800510c:	4802      	ldr	r0, [pc, #8]	; (8005118 <USART1_IRQHandler+0x10>)
 800510e:	f006 fb3b 	bl	800b788 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	2000081c 	.word	0x2000081c

0800511c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005120:	4802      	ldr	r0, [pc, #8]	; (800512c <USART2_IRQHandler+0x10>)
 8005122:	f006 fb31 	bl	800b788 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005126:	bf00      	nop
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000890 	.word	0x20000890

08005130 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Emergency_Switch_Pin);
 8005134:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005138:	f001 fc8a 	bl	8006a50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800513c:	bf00      	nop
 800513e:	bd80      	pop	{r7, pc}

08005140 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005144:	4802      	ldr	r0, [pc, #8]	; (8005150 <DMA2_Stream0_IRQHandler+0x10>)
 8005146:	f001 f849 	bl	80061dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800514a:	bf00      	nop
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000498 	.word	0x20000498

08005154 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  return 1;
 8005158:	2301      	movs	r3, #1
}
 800515a:	4618      	mov	r0, r3
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <_kill>:

int _kill(int pid, int sig)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800516e:	f007 fb51 	bl	800c814 <__errno>
 8005172:	4603      	mov	r3, r0
 8005174:	2216      	movs	r2, #22
 8005176:	601a      	str	r2, [r3, #0]
  return -1;
 8005178:	f04f 33ff 	mov.w	r3, #4294967295
}
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <_exit>:

void _exit (int status)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800518c:	f04f 31ff 	mov.w	r1, #4294967295
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff ffe7 	bl	8005164 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005196:	e7fe      	b.n	8005196 <_exit+0x12>

08005198 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	e00a      	b.n	80051c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80051aa:	f3af 8000 	nop.w
 80051ae:	4601      	mov	r1, r0
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	60ba      	str	r2, [r7, #8]
 80051b6:	b2ca      	uxtb	r2, r1
 80051b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	3301      	adds	r3, #1
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	dbf0      	blt.n	80051aa <_read+0x12>
  }

  return len;
 80051c8:	687b      	ldr	r3, [r7, #4]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b086      	sub	sp, #24
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	e009      	b.n	80051f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	60ba      	str	r2, [r7, #8]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	3301      	adds	r3, #1
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	dbf1      	blt.n	80051e4 <_write+0x12>
  }
  return len;
 8005200:	687b      	ldr	r3, [r7, #4]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <_close>:

int _close(int file)
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005216:	4618      	mov	r0, r3
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005232:	605a      	str	r2, [r3, #4]
  return 0;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <_isatty>:

int _isatty(int file)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800524a:	2301      	movs	r3, #1
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
	...

08005274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800527c:	4a14      	ldr	r2, [pc, #80]	; (80052d0 <_sbrk+0x5c>)
 800527e:	4b15      	ldr	r3, [pc, #84]	; (80052d4 <_sbrk+0x60>)
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005288:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <_sbrk+0x64>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d102      	bne.n	8005296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005290:	4b11      	ldr	r3, [pc, #68]	; (80052d8 <_sbrk+0x64>)
 8005292:	4a12      	ldr	r2, [pc, #72]	; (80052dc <_sbrk+0x68>)
 8005294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005296:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <_sbrk+0x64>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4413      	add	r3, r2
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d207      	bcs.n	80052b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052a4:	f007 fab6 	bl	800c814 <__errno>
 80052a8:	4603      	mov	r3, r0
 80052aa:	220c      	movs	r2, #12
 80052ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052ae:	f04f 33ff 	mov.w	r3, #4294967295
 80052b2:	e009      	b.n	80052c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052b4:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <_sbrk+0x64>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052ba:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <_sbrk+0x64>)
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4413      	add	r3, r2
 80052c2:	4a05      	ldr	r2, [pc, #20]	; (80052d8 <_sbrk+0x64>)
 80052c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052c6:	68fb      	ldr	r3, [r7, #12]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20020000 	.word	0x20020000
 80052d4:	00000400 	.word	0x00000400
 80052d8:	200010fc 	.word	0x200010fc
 80052dc:	20001118 	.word	0x20001118

080052e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052e4:	4b06      	ldr	r3, [pc, #24]	; (8005300 <SystemInit+0x20>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ea:	4a05      	ldr	r2, [pc, #20]	; (8005300 <SystemInit+0x20>)
 80052ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052f4:	bf00      	nop
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	e000ed00 	.word	0xe000ed00

08005304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8005304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800533c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005308:	480d      	ldr	r0, [pc, #52]	; (8005340 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800530a:	490e      	ldr	r1, [pc, #56]	; (8005344 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800530c:	4a0e      	ldr	r2, [pc, #56]	; (8005348 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800530e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005310:	e002      	b.n	8005318 <LoopCopyDataInit>

08005312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005316:	3304      	adds	r3, #4

08005318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800531a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800531c:	d3f9      	bcc.n	8005312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800531e:	4a0b      	ldr	r2, [pc, #44]	; (800534c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005320:	4c0b      	ldr	r4, [pc, #44]	; (8005350 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005324:	e001      	b.n	800532a <LoopFillZerobss>

08005326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005328:	3204      	adds	r2, #4

0800532a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800532a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800532c:	d3fb      	bcc.n	8005326 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800532e:	f7ff ffd7 	bl	80052e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005332:	f007 fa75 	bl	800c820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005336:	f7fc f9bf 	bl	80016b8 <main>
  bx  lr    
 800533a:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 800533c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005344:	20000430 	.word	0x20000430
  ldr r2, =_sidata
 8005348:	080118f4 	.word	0x080118f4
  ldr r2, =_sbss
 800534c:	20000430 	.word	0x20000430
  ldr r4, =_ebss
 8005350:	20001114 	.word	0x20001114

08005354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005354:	e7fe      	b.n	8005354 <ADC_IRQHandler>
	...

08005358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800535c:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <HAL_Init+0x40>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a0d      	ldr	r2, [pc, #52]	; (8005398 <HAL_Init+0x40>)
 8005362:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005366:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <HAL_Init+0x40>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a0a      	ldr	r2, [pc, #40]	; (8005398 <HAL_Init+0x40>)
 800536e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005372:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005374:	4b08      	ldr	r3, [pc, #32]	; (8005398 <HAL_Init+0x40>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a07      	ldr	r2, [pc, #28]	; (8005398 <HAL_Init+0x40>)
 800537a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005380:	2003      	movs	r0, #3
 8005382:	f000 fd51 	bl	8005e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005386:	2000      	movs	r0, #0
 8005388:	f000 f808 	bl	800539c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800538c:	f7ff fb7c 	bl	8004a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40023c00 	.word	0x40023c00

0800539c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053a4:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <HAL_InitTick+0x54>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4b12      	ldr	r3, [pc, #72]	; (80053f4 <HAL_InitTick+0x58>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	4619      	mov	r1, r3
 80053ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80053b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fd69 	bl	8005e92 <HAL_SYSTICK_Config>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e00e      	b.n	80053e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b0f      	cmp	r3, #15
 80053ce:	d80a      	bhi.n	80053e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053d0:	2200      	movs	r2, #0
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	f04f 30ff 	mov.w	r0, #4294967295
 80053d8:	f000 fd31 	bl	8005e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053dc:	4a06      	ldr	r2, [pc, #24]	; (80053f8 <HAL_InitTick+0x5c>)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e000      	b.n	80053e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	20000250 	.word	0x20000250
 80053f4:	20000258 	.word	0x20000258
 80053f8:	20000254 	.word	0x20000254

080053fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005400:	4b06      	ldr	r3, [pc, #24]	; (800541c <HAL_IncTick+0x20>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	4b06      	ldr	r3, [pc, #24]	; (8005420 <HAL_IncTick+0x24>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4413      	add	r3, r2
 800540c:	4a04      	ldr	r2, [pc, #16]	; (8005420 <HAL_IncTick+0x24>)
 800540e:	6013      	str	r3, [r2, #0]
}
 8005410:	bf00      	nop
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	20000258 	.word	0x20000258
 8005420:	20001100 	.word	0x20001100

08005424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  return uwTick;
 8005428:	4b03      	ldr	r3, [pc, #12]	; (8005438 <HAL_GetTick+0x14>)
 800542a:	681b      	ldr	r3, [r3, #0]
}
 800542c:	4618      	mov	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20001100 	.word	0x20001100

0800543c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005444:	f7ff ffee 	bl	8005424 <HAL_GetTick>
 8005448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005454:	d005      	beq.n	8005462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <HAL_Delay+0x44>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005462:	bf00      	nop
 8005464:	f7ff ffde 	bl	8005424 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	429a      	cmp	r2, r3
 8005472:	d8f7      	bhi.n	8005464 <HAL_Delay+0x28>
  {
  }
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20000258 	.word	0x20000258

08005484 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e033      	b.n	8005502 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d109      	bne.n	80054b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff fb18 	bl	8004ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	f003 0310 	and.w	r3, r3, #16
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d118      	bne.n	80054f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80054ca:	f023 0302 	bic.w	r3, r3, #2
 80054ce:	f043 0202 	orr.w	r2, r3, #2
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fa58 	bl	800598c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	f023 0303 	bic.w	r3, r3, #3
 80054ea:	f043 0201 	orr.w	r2, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	641a      	str	r2, [r3, #64]	; 0x40
 80054f2:	e001      	b.n	80054f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_ADC_Start_DMA+0x1e>
 8005526:	2302      	movs	r3, #2
 8005528:	e0ce      	b.n	80056c8 <HAL_ADC_Start_DMA+0x1bc>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b01      	cmp	r3, #1
 800553e:	d018      	beq.n	8005572 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005550:	4b5f      	ldr	r3, [pc, #380]	; (80056d0 <HAL_ADC_Start_DMA+0x1c4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a5f      	ldr	r2, [pc, #380]	; (80056d4 <HAL_ADC_Start_DMA+0x1c8>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	0c9a      	lsrs	r2, r3, #18
 800555c:	4613      	mov	r3, r2
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	4413      	add	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005564:	e002      	b.n	800556c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	3b01      	subs	r3, #1
 800556a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f9      	bne.n	8005566 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005580:	d107      	bne.n	8005592 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005590:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b01      	cmp	r3, #1
 800559e:	f040 8086 	bne.w	80056ae <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80055aa:	f023 0301 	bic.w	r3, r3, #1
 80055ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d007      	beq.n	80055d4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80055cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e0:	d106      	bne.n	80055f0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	f023 0206 	bic.w	r2, r3, #6
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	645a      	str	r2, [r3, #68]	; 0x44
 80055ee:	e002      	b.n	80055f6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055fe:	4b36      	ldr	r3, [pc, #216]	; (80056d8 <HAL_ADC_Start_DMA+0x1cc>)
 8005600:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005606:	4a35      	ldr	r2, [pc, #212]	; (80056dc <HAL_ADC_Start_DMA+0x1d0>)
 8005608:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	4a34      	ldr	r2, [pc, #208]	; (80056e0 <HAL_ADC_Start_DMA+0x1d4>)
 8005610:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	4a33      	ldr	r2, [pc, #204]	; (80056e4 <HAL_ADC_Start_DMA+0x1d8>)
 8005618:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005622:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005632:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005642:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	334c      	adds	r3, #76	; 0x4c
 800564e:	4619      	mov	r1, r3
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f000 fcd8 	bl	8006008 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f003 031f 	and.w	r3, r3, #31
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10f      	bne.n	8005684 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d129      	bne.n	80056c6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005680:	609a      	str	r2, [r3, #8]
 8005682:	e020      	b.n	80056c6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <HAL_ADC_Start_DMA+0x1dc>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d11b      	bne.n	80056c6 <HAL_ADC_Start_DMA+0x1ba>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d114      	bne.n	80056c6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80056aa:	609a      	str	r2, [r3, #8]
 80056ac:	e00b      	b.n	80056c6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	f043 0210 	orr.w	r2, r3, #16
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056be:	f043 0201 	orr.w	r2, r3, #1
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	20000250 	.word	0x20000250
 80056d4:	431bde83 	.word	0x431bde83
 80056d8:	40012300 	.word	0x40012300
 80056dc:	08005b85 	.word	0x08005b85
 80056e0:	08005c3f 	.word	0x08005c3f
 80056e4:	08005c5b 	.word	0x08005c5b
 80056e8:	40012000 	.word	0x40012000

080056ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_ADC_ConfigChannel+0x1c>
 8005740:	2302      	movs	r3, #2
 8005742:	e113      	b.n	800596c <HAL_ADC_ConfigChannel+0x244>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b09      	cmp	r3, #9
 8005752:	d925      	bls.n	80057a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68d9      	ldr	r1, [r3, #12]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	b29b      	uxth	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	4613      	mov	r3, r2
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	4413      	add	r3, r2
 8005768:	3b1e      	subs	r3, #30
 800576a:	2207      	movs	r2, #7
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	43da      	mvns	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	400a      	ands	r2, r1
 8005778:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68d9      	ldr	r1, [r3, #12]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	b29b      	uxth	r3, r3
 800578a:	4618      	mov	r0, r3
 800578c:	4603      	mov	r3, r0
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	4403      	add	r3, r0
 8005792:	3b1e      	subs	r3, #30
 8005794:	409a      	lsls	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	60da      	str	r2, [r3, #12]
 800579e:	e022      	b.n	80057e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6919      	ldr	r1, [r3, #16]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	4613      	mov	r3, r2
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	4413      	add	r3, r2
 80057b4:	2207      	movs	r2, #7
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	43da      	mvns	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	400a      	ands	r2, r1
 80057c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6919      	ldr	r1, [r3, #16]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	4618      	mov	r0, r3
 80057d6:	4603      	mov	r3, r0
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	4403      	add	r3, r0
 80057dc:	409a      	lsls	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b06      	cmp	r3, #6
 80057ec:	d824      	bhi.n	8005838 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	3b05      	subs	r3, #5
 8005800:	221f      	movs	r2, #31
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	43da      	mvns	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	400a      	ands	r2, r1
 800580e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	4618      	mov	r0, r3
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	3b05      	subs	r3, #5
 800582a:	fa00 f203 	lsl.w	r2, r0, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	635a      	str	r2, [r3, #52]	; 0x34
 8005836:	e04c      	b.n	80058d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b0c      	cmp	r3, #12
 800583e:	d824      	bhi.n	800588a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	3b23      	subs	r3, #35	; 0x23
 8005852:	221f      	movs	r2, #31
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	43da      	mvns	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	400a      	ands	r2, r1
 8005860:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	4618      	mov	r0, r3
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	3b23      	subs	r3, #35	; 0x23
 800587c:	fa00 f203 	lsl.w	r2, r0, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	631a      	str	r2, [r3, #48]	; 0x30
 8005888:	e023      	b.n	80058d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	3b41      	subs	r3, #65	; 0x41
 800589c:	221f      	movs	r2, #31
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43da      	mvns	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	400a      	ands	r2, r1
 80058aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	4618      	mov	r0, r3
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	4613      	mov	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	3b41      	subs	r3, #65	; 0x41
 80058c6:	fa00 f203 	lsl.w	r2, r0, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058d2:	4b29      	ldr	r3, [pc, #164]	; (8005978 <HAL_ADC_ConfigChannel+0x250>)
 80058d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a28      	ldr	r2, [pc, #160]	; (800597c <HAL_ADC_ConfigChannel+0x254>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d10f      	bne.n	8005900 <HAL_ADC_ConfigChannel+0x1d8>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b12      	cmp	r3, #18
 80058e6:	d10b      	bne.n	8005900 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1d      	ldr	r2, [pc, #116]	; (800597c <HAL_ADC_ConfigChannel+0x254>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d12b      	bne.n	8005962 <HAL_ADC_ConfigChannel+0x23a>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a1c      	ldr	r2, [pc, #112]	; (8005980 <HAL_ADC_ConfigChannel+0x258>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d003      	beq.n	800591c <HAL_ADC_ConfigChannel+0x1f4>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b11      	cmp	r3, #17
 800591a:	d122      	bne.n	8005962 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a11      	ldr	r2, [pc, #68]	; (8005980 <HAL_ADC_ConfigChannel+0x258>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d111      	bne.n	8005962 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800593e:	4b11      	ldr	r3, [pc, #68]	; (8005984 <HAL_ADC_ConfigChannel+0x25c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a11      	ldr	r2, [pc, #68]	; (8005988 <HAL_ADC_ConfigChannel+0x260>)
 8005944:	fba2 2303 	umull	r2, r3, r2, r3
 8005948:	0c9a      	lsrs	r2, r3, #18
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005954:	e002      	b.n	800595c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	3b01      	subs	r3, #1
 800595a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f9      	bne.n	8005956 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	40012300 	.word	0x40012300
 800597c:	40012000 	.word	0x40012000
 8005980:	10000012 	.word	0x10000012
 8005984:	20000250 	.word	0x20000250
 8005988:	431bde83 	.word	0x431bde83

0800598c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005994:	4b79      	ldr	r3, [pc, #484]	; (8005b7c <ADC_Init+0x1f0>)
 8005996:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	431a      	orrs	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6859      	ldr	r1, [r3, #4]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	021a      	lsls	r2, r3, #8
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80059e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6859      	ldr	r1, [r3, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6899      	ldr	r1, [r3, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	4a58      	ldr	r2, [pc, #352]	; (8005b80 <ADC_Init+0x1f4>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d022      	beq.n	8005a6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6899      	ldr	r1, [r3, #8]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6899      	ldr	r1, [r3, #8]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	609a      	str	r2, [r3, #8]
 8005a68:	e00f      	b.n	8005a8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0202 	bic.w	r2, r2, #2
 8005a98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6899      	ldr	r1, [r3, #8]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	7e1b      	ldrb	r3, [r3, #24]
 8005aa4:	005a      	lsls	r2, r3, #1
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01b      	beq.n	8005af0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ac6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005ad6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6859      	ldr	r1, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	035a      	lsls	r2, r3, #13
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
 8005aee:	e007      	b.n	8005b00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005afe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	051a      	lsls	r2, r3, #20
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6899      	ldr	r1, [r3, #8]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b42:	025a      	lsls	r2, r3, #9
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6899      	ldr	r1, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	029a      	lsls	r2, r3, #10
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	609a      	str	r2, [r3, #8]
}
 8005b70:	bf00      	nop
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	40012300 	.word	0x40012300
 8005b80:	0f000001 	.word	0x0f000001

08005b84 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b90:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d13c      	bne.n	8005c18 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d12b      	bne.n	8005c10 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d127      	bne.n	8005c10 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d006      	beq.n	8005bdc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d119      	bne.n	8005c10 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0220 	bic.w	r2, r2, #32
 8005bea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d105      	bne.n	8005c10 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	f043 0201 	orr.w	r2, r3, #1
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7ff fd6b 	bl	80056ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005c16:	e00e      	b.n	8005c36 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	f003 0310 	and.w	r3, r3, #16
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff fd75 	bl	8005714 <HAL_ADC_ErrorCallback>
}
 8005c2a:	e004      	b.n	8005c36 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	4798      	blx	r3
}
 8005c36:	bf00      	nop
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f7ff fd57 	bl	8005700 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2240      	movs	r2, #64	; 0x40
 8005c6c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c72:	f043 0204 	orr.w	r2, r3, #4
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f7ff fd4a 	bl	8005714 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c80:	bf00      	nop
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c98:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <__NVIC_SetPriorityGrouping+0x44>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cba:	4a04      	ldr	r2, [pc, #16]	; (8005ccc <__NVIC_SetPriorityGrouping+0x44>)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	60d3      	str	r3, [r2, #12]
}
 8005cc0:	bf00      	nop
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	e000ed00 	.word	0xe000ed00

08005cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cd4:	4b04      	ldr	r3, [pc, #16]	; (8005ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	0a1b      	lsrs	r3, r3, #8
 8005cda:	f003 0307 	and.w	r3, r3, #7
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	e000ed00 	.word	0xe000ed00

08005cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	db0b      	blt.n	8005d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	f003 021f 	and.w	r2, r3, #31
 8005d04:	4907      	ldr	r1, [pc, #28]	; (8005d24 <__NVIC_EnableIRQ+0x38>)
 8005d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	2001      	movs	r0, #1
 8005d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	e000e100 	.word	0xe000e100

08005d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	6039      	str	r1, [r7, #0]
 8005d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	db0a      	blt.n	8005d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	490c      	ldr	r1, [pc, #48]	; (8005d74 <__NVIC_SetPriority+0x4c>)
 8005d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d46:	0112      	lsls	r2, r2, #4
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	440b      	add	r3, r1
 8005d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d50:	e00a      	b.n	8005d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	4908      	ldr	r1, [pc, #32]	; (8005d78 <__NVIC_SetPriority+0x50>)
 8005d58:	79fb      	ldrb	r3, [r7, #7]
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	3b04      	subs	r3, #4
 8005d60:	0112      	lsls	r2, r2, #4
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	440b      	add	r3, r1
 8005d66:	761a      	strb	r2, [r3, #24]
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	e000e100 	.word	0xe000e100
 8005d78:	e000ed00 	.word	0xe000ed00

08005d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b089      	sub	sp, #36	; 0x24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f1c3 0307 	rsb	r3, r3, #7
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	bf28      	it	cs
 8005d9a:	2304      	movcs	r3, #4
 8005d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	3304      	adds	r3, #4
 8005da2:	2b06      	cmp	r3, #6
 8005da4:	d902      	bls.n	8005dac <NVIC_EncodePriority+0x30>
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	3b03      	subs	r3, #3
 8005daa:	e000      	b.n	8005dae <NVIC_EncodePriority+0x32>
 8005dac:	2300      	movs	r3, #0
 8005dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005db0:	f04f 32ff 	mov.w	r2, #4294967295
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dba:	43da      	mvns	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	401a      	ands	r2, r3
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	fa01 f303 	lsl.w	r3, r1, r3
 8005dce:	43d9      	mvns	r1, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dd4:	4313      	orrs	r3, r2
         );
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3724      	adds	r7, #36	; 0x24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
	...

08005de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005df4:	d301      	bcc.n	8005dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005df6:	2301      	movs	r3, #1
 8005df8:	e00f      	b.n	8005e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dfa:	4a0a      	ldr	r2, [pc, #40]	; (8005e24 <SysTick_Config+0x40>)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e02:	210f      	movs	r1, #15
 8005e04:	f04f 30ff 	mov.w	r0, #4294967295
 8005e08:	f7ff ff8e 	bl	8005d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e0c:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <SysTick_Config+0x40>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e12:	4b04      	ldr	r3, [pc, #16]	; (8005e24 <SysTick_Config+0x40>)
 8005e14:	2207      	movs	r2, #7
 8005e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	e000e010 	.word	0xe000e010

08005e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff ff29 	bl	8005c88 <__NVIC_SetPriorityGrouping>
}
 8005e36:	bf00      	nop
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b086      	sub	sp, #24
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	4603      	mov	r3, r0
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	607a      	str	r2, [r7, #4]
 8005e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e50:	f7ff ff3e 	bl	8005cd0 <__NVIC_GetPriorityGrouping>
 8005e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	68b9      	ldr	r1, [r7, #8]
 8005e5a:	6978      	ldr	r0, [r7, #20]
 8005e5c:	f7ff ff8e 	bl	8005d7c <NVIC_EncodePriority>
 8005e60:	4602      	mov	r2, r0
 8005e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e66:	4611      	mov	r1, r2
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff ff5d 	bl	8005d28 <__NVIC_SetPriority>
}
 8005e6e:	bf00      	nop
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b082      	sub	sp, #8
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff ff31 	bl	8005cec <__NVIC_EnableIRQ>
}
 8005e8a:	bf00      	nop
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b082      	sub	sp, #8
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff ffa2 	bl	8005de4 <SysTick_Config>
 8005ea0:	4603      	mov	r3, r0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
	...

08005eac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005eb8:	f7ff fab4 	bl	8005424 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e099      	b.n	8005ffc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0201 	bic.w	r2, r2, #1
 8005ee6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ee8:	e00f      	b.n	8005f0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005eea:	f7ff fa9b 	bl	8005424 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b05      	cmp	r3, #5
 8005ef6:	d908      	bls.n	8005f0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2220      	movs	r2, #32
 8005efc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2203      	movs	r2, #3
 8005f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e078      	b.n	8005ffc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e8      	bne.n	8005eea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	4b38      	ldr	r3, [pc, #224]	; (8006004 <HAL_DMA_Init+0x158>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d107      	bne.n	8005f74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f023 0307 	bic.w	r3, r3, #7
 8005f8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d117      	bne.n	8005fce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00e      	beq.n	8005fce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fb1b 	bl	80065ec <DMA_CheckFifoParam>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d008      	beq.n	8005fce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2240      	movs	r2, #64	; 0x40
 8005fc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e016      	b.n	8005ffc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fad2 	bl	8006580 <DMA_CalcBaseAndBitshift>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe4:	223f      	movs	r2, #63	; 0x3f
 8005fe6:	409a      	lsls	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	f010803f 	.word	0xf010803f

08006008 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006026:	2b01      	cmp	r3, #1
 8006028:	d101      	bne.n	800602e <HAL_DMA_Start_IT+0x26>
 800602a:	2302      	movs	r3, #2
 800602c:	e040      	b.n	80060b0 <HAL_DMA_Start_IT+0xa8>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b01      	cmp	r3, #1
 8006040:	d12f      	bne.n	80060a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2202      	movs	r2, #2
 8006046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	68b9      	ldr	r1, [r7, #8]
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 fa64 	bl	8006524 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006060:	223f      	movs	r2, #63	; 0x3f
 8006062:	409a      	lsls	r2, r3
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0216 	orr.w	r2, r2, #22
 8006076:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607c:	2b00      	cmp	r3, #0
 800607e:	d007      	beq.n	8006090 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0208 	orr.w	r2, r2, #8
 800608e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	e005      	b.n	80060ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80060aa:	2302      	movs	r3, #2
 80060ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80060c6:	f7ff f9ad 	bl	8005424 <HAL_GetTick>
 80060ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d008      	beq.n	80060ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2280      	movs	r2, #128	; 0x80
 80060dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e052      	b.n	8006190 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0216 	bic.w	r2, r2, #22
 80060f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695a      	ldr	r2, [r3, #20]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006108:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	2b00      	cmp	r3, #0
 8006110:	d103      	bne.n	800611a <HAL_DMA_Abort+0x62>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006116:	2b00      	cmp	r3, #0
 8006118:	d007      	beq.n	800612a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0208 	bic.w	r2, r2, #8
 8006128:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0201 	bic.w	r2, r2, #1
 8006138:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800613a:	e013      	b.n	8006164 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800613c:	f7ff f972 	bl	8005424 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b05      	cmp	r3, #5
 8006148:	d90c      	bls.n	8006164 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2203      	movs	r2, #3
 8006154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e015      	b.n	8006190 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1e4      	bne.n	800613c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006176:	223f      	movs	r2, #63	; 0x3f
 8006178:	409a      	lsls	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d004      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2280      	movs	r2, #128	; 0x80
 80061b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e00c      	b.n	80061d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2205      	movs	r2, #5
 80061ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0201 	bic.w	r2, r2, #1
 80061cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80061e8:	4b8e      	ldr	r3, [pc, #568]	; (8006424 <HAL_DMA_IRQHandler+0x248>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a8e      	ldr	r2, [pc, #568]	; (8006428 <HAL_DMA_IRQHandler+0x24c>)
 80061ee:	fba2 2303 	umull	r2, r3, r2, r3
 80061f2:	0a9b      	lsrs	r3, r3, #10
 80061f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006206:	2208      	movs	r2, #8
 8006208:	409a      	lsls	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4013      	ands	r3, r2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d01a      	beq.n	8006248 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d013      	beq.n	8006248 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0204 	bic.w	r2, r2, #4
 800622e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006234:	2208      	movs	r2, #8
 8006236:	409a      	lsls	r2, r3
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006240:	f043 0201 	orr.w	r2, r3, #1
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624c:	2201      	movs	r2, #1
 800624e:	409a      	lsls	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4013      	ands	r3, r2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d012      	beq.n	800627e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00b      	beq.n	800627e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800626a:	2201      	movs	r2, #1
 800626c:	409a      	lsls	r2, r3
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006276:	f043 0202 	orr.w	r2, r3, #2
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006282:	2204      	movs	r2, #4
 8006284:	409a      	lsls	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4013      	ands	r3, r2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d012      	beq.n	80062b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00b      	beq.n	80062b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a0:	2204      	movs	r2, #4
 80062a2:	409a      	lsls	r2, r3
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ac:	f043 0204 	orr.w	r2, r3, #4
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b8:	2210      	movs	r2, #16
 80062ba:	409a      	lsls	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4013      	ands	r3, r2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d043      	beq.n	800634c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0308 	and.w	r3, r3, #8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d03c      	beq.n	800634c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d6:	2210      	movs	r2, #16
 80062d8:	409a      	lsls	r2, r3
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d018      	beq.n	800631e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d108      	bne.n	800630c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d024      	beq.n	800634c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	4798      	blx	r3
 800630a:	e01f      	b.n	800634c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01b      	beq.n	800634c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	4798      	blx	r3
 800631c:	e016      	b.n	800634c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006328:	2b00      	cmp	r3, #0
 800632a:	d107      	bne.n	800633c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0208 	bic.w	r2, r2, #8
 800633a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006350:	2220      	movs	r2, #32
 8006352:	409a      	lsls	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4013      	ands	r3, r2
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 808f 	beq.w	800647c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0310 	and.w	r3, r3, #16
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 8087 	beq.w	800647c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006372:	2220      	movs	r2, #32
 8006374:	409a      	lsls	r2, r3
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b05      	cmp	r3, #5
 8006384:	d136      	bne.n	80063f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0216 	bic.w	r2, r2, #22
 8006394:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	695a      	ldr	r2, [r3, #20]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d103      	bne.n	80063b6 <HAL_DMA_IRQHandler+0x1da>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d007      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0208 	bic.w	r2, r2, #8
 80063c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ca:	223f      	movs	r2, #63	; 0x3f
 80063cc:	409a      	lsls	r2, r3
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d07e      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	4798      	blx	r3
        }
        return;
 80063f2:	e079      	b.n	80064e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d01d      	beq.n	800643e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10d      	bne.n	800642c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006414:	2b00      	cmp	r3, #0
 8006416:	d031      	beq.n	800647c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	4798      	blx	r3
 8006420:	e02c      	b.n	800647c <HAL_DMA_IRQHandler+0x2a0>
 8006422:	bf00      	nop
 8006424:	20000250 	.word	0x20000250
 8006428:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006430:	2b00      	cmp	r3, #0
 8006432:	d023      	beq.n	800647c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	4798      	blx	r3
 800643c:	e01e      	b.n	800647c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10f      	bne.n	800646c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0210 	bic.w	r2, r2, #16
 800645a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006480:	2b00      	cmp	r3, #0
 8006482:	d032      	beq.n	80064ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d022      	beq.n	80064d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2205      	movs	r2, #5
 8006494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0201 	bic.w	r2, r2, #1
 80064a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	3301      	adds	r3, #1
 80064ac:	60bb      	str	r3, [r7, #8]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d307      	bcc.n	80064c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f2      	bne.n	80064a8 <HAL_DMA_IRQHandler+0x2cc>
 80064c2:	e000      	b.n	80064c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80064c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d005      	beq.n	80064ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	4798      	blx	r3
 80064e6:	e000      	b.n	80064ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80064e8:	bf00      	nop
    }
  }
}
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064fe:	b2db      	uxtb	r3, r3
}
 8006500:	4618      	mov	r0, r3
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006540:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	2b40      	cmp	r3, #64	; 0x40
 8006550:	d108      	bne.n	8006564 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006562:	e007      	b.n	8006574 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	60da      	str	r2, [r3, #12]
}
 8006574:	bf00      	nop
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	3b10      	subs	r3, #16
 8006590:	4a14      	ldr	r2, [pc, #80]	; (80065e4 <DMA_CalcBaseAndBitshift+0x64>)
 8006592:	fba2 2303 	umull	r2, r3, r2, r3
 8006596:	091b      	lsrs	r3, r3, #4
 8006598:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800659a:	4a13      	ldr	r2, [pc, #76]	; (80065e8 <DMA_CalcBaseAndBitshift+0x68>)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4413      	add	r3, r2
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d909      	bls.n	80065c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80065b6:	f023 0303 	bic.w	r3, r3, #3
 80065ba:	1d1a      	adds	r2, r3, #4
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	659a      	str	r2, [r3, #88]	; 0x58
 80065c0:	e007      	b.n	80065d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80065ca:	f023 0303 	bic.w	r3, r3, #3
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	aaaaaaab 	.word	0xaaaaaaab
 80065e8:	08011434 	.word	0x08011434

080065ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d11f      	bne.n	8006646 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b03      	cmp	r3, #3
 800660a:	d856      	bhi.n	80066ba <DMA_CheckFifoParam+0xce>
 800660c:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <DMA_CheckFifoParam+0x28>)
 800660e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006612:	bf00      	nop
 8006614:	08006625 	.word	0x08006625
 8006618:	08006637 	.word	0x08006637
 800661c:	08006625 	.word	0x08006625
 8006620:	080066bb 	.word	0x080066bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d046      	beq.n	80066be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006634:	e043      	b.n	80066be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800663e:	d140      	bne.n	80066c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006644:	e03d      	b.n	80066c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800664e:	d121      	bne.n	8006694 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2b03      	cmp	r3, #3
 8006654:	d837      	bhi.n	80066c6 <DMA_CheckFifoParam+0xda>
 8006656:	a201      	add	r2, pc, #4	; (adr r2, 800665c <DMA_CheckFifoParam+0x70>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	0800666d 	.word	0x0800666d
 8006660:	08006673 	.word	0x08006673
 8006664:	0800666d 	.word	0x0800666d
 8006668:	08006685 	.word	0x08006685
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	73fb      	strb	r3, [r7, #15]
      break;
 8006670:	e030      	b.n	80066d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006676:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d025      	beq.n	80066ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006682:	e022      	b.n	80066ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006688:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800668c:	d11f      	bne.n	80066ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006692:	e01c      	b.n	80066ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d903      	bls.n	80066a2 <DMA_CheckFifoParam+0xb6>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b03      	cmp	r3, #3
 800669e:	d003      	beq.n	80066a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80066a0:	e018      	b.n	80066d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	73fb      	strb	r3, [r7, #15]
      break;
 80066a6:	e015      	b.n	80066d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00e      	beq.n	80066d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	73fb      	strb	r3, [r7, #15]
      break;
 80066b8:	e00b      	b.n	80066d2 <DMA_CheckFifoParam+0xe6>
      break;
 80066ba:	bf00      	nop
 80066bc:	e00a      	b.n	80066d4 <DMA_CheckFifoParam+0xe8>
      break;
 80066be:	bf00      	nop
 80066c0:	e008      	b.n	80066d4 <DMA_CheckFifoParam+0xe8>
      break;
 80066c2:	bf00      	nop
 80066c4:	e006      	b.n	80066d4 <DMA_CheckFifoParam+0xe8>
      break;
 80066c6:	bf00      	nop
 80066c8:	e004      	b.n	80066d4 <DMA_CheckFifoParam+0xe8>
      break;
 80066ca:	bf00      	nop
 80066cc:	e002      	b.n	80066d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80066ce:	bf00      	nop
 80066d0:	e000      	b.n	80066d4 <DMA_CheckFifoParam+0xe8>
      break;
 80066d2:	bf00      	nop
    }
  } 
  
  return status; 
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop

080066e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b089      	sub	sp, #36	; 0x24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066fa:	2300      	movs	r3, #0
 80066fc:	61fb      	str	r3, [r7, #28]
 80066fe:	e159      	b.n	80069b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006700:	2201      	movs	r2, #1
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	fa02 f303 	lsl.w	r3, r2, r3
 8006708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4013      	ands	r3, r2
 8006712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	429a      	cmp	r2, r3
 800671a:	f040 8148 	bne.w	80069ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f003 0303 	and.w	r3, r3, #3
 8006726:	2b01      	cmp	r3, #1
 8006728:	d005      	beq.n	8006736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006732:	2b02      	cmp	r3, #2
 8006734:	d130      	bne.n	8006798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	2203      	movs	r2, #3
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	43db      	mvns	r3, r3
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	4013      	ands	r3, r2
 800674c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	fa02 f303 	lsl.w	r3, r2, r3
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	4313      	orrs	r3, r2
 800675e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800676c:	2201      	movs	r2, #1
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	fa02 f303 	lsl.w	r3, r2, r3
 8006774:	43db      	mvns	r3, r3
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	4013      	ands	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	091b      	lsrs	r3, r3, #4
 8006782:	f003 0201 	and.w	r2, r3, #1
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	4313      	orrs	r3, r2
 8006790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f003 0303 	and.w	r3, r3, #3
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d017      	beq.n	80067d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	2203      	movs	r2, #3
 80067b0:	fa02 f303 	lsl.w	r3, r2, r3
 80067b4:	43db      	mvns	r3, r3
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	4013      	ands	r3, r2
 80067ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	005b      	lsls	r3, r3, #1
 80067c4:	fa02 f303 	lsl.w	r3, r2, r3
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f003 0303 	and.w	r3, r3, #3
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d123      	bne.n	8006828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	08da      	lsrs	r2, r3, #3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3208      	adds	r2, #8
 80067e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	220f      	movs	r2, #15
 80067f8:	fa02 f303 	lsl.w	r3, r2, r3
 80067fc:	43db      	mvns	r3, r3
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	4013      	ands	r3, r2
 8006802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	f003 0307 	and.w	r3, r3, #7
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	fa02 f303 	lsl.w	r3, r2, r3
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	4313      	orrs	r3, r2
 8006818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	08da      	lsrs	r2, r3, #3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	3208      	adds	r2, #8
 8006822:	69b9      	ldr	r1, [r7, #24]
 8006824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	2203      	movs	r2, #3
 8006834:	fa02 f303 	lsl.w	r3, r2, r3
 8006838:	43db      	mvns	r3, r3
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	4013      	ands	r3, r2
 800683e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f003 0203 	and.w	r2, r3, #3
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	005b      	lsls	r3, r3, #1
 800684c:	fa02 f303 	lsl.w	r3, r2, r3
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	4313      	orrs	r3, r2
 8006854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 80a2 	beq.w	80069ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	4b57      	ldr	r3, [pc, #348]	; (80069cc <HAL_GPIO_Init+0x2e8>)
 8006870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006872:	4a56      	ldr	r2, [pc, #344]	; (80069cc <HAL_GPIO_Init+0x2e8>)
 8006874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006878:	6453      	str	r3, [r2, #68]	; 0x44
 800687a:	4b54      	ldr	r3, [pc, #336]	; (80069cc <HAL_GPIO_Init+0x2e8>)
 800687c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006886:	4a52      	ldr	r2, [pc, #328]	; (80069d0 <HAL_GPIO_Init+0x2ec>)
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	089b      	lsrs	r3, r3, #2
 800688c:	3302      	adds	r3, #2
 800688e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	220f      	movs	r2, #15
 800689e:	fa02 f303 	lsl.w	r3, r2, r3
 80068a2:	43db      	mvns	r3, r3
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	4013      	ands	r3, r2
 80068a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a49      	ldr	r2, [pc, #292]	; (80069d4 <HAL_GPIO_Init+0x2f0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d019      	beq.n	80068e6 <HAL_GPIO_Init+0x202>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a48      	ldr	r2, [pc, #288]	; (80069d8 <HAL_GPIO_Init+0x2f4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d013      	beq.n	80068e2 <HAL_GPIO_Init+0x1fe>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a47      	ldr	r2, [pc, #284]	; (80069dc <HAL_GPIO_Init+0x2f8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d00d      	beq.n	80068de <HAL_GPIO_Init+0x1fa>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a46      	ldr	r2, [pc, #280]	; (80069e0 <HAL_GPIO_Init+0x2fc>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d007      	beq.n	80068da <HAL_GPIO_Init+0x1f6>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a45      	ldr	r2, [pc, #276]	; (80069e4 <HAL_GPIO_Init+0x300>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d101      	bne.n	80068d6 <HAL_GPIO_Init+0x1f2>
 80068d2:	2304      	movs	r3, #4
 80068d4:	e008      	b.n	80068e8 <HAL_GPIO_Init+0x204>
 80068d6:	2307      	movs	r3, #7
 80068d8:	e006      	b.n	80068e8 <HAL_GPIO_Init+0x204>
 80068da:	2303      	movs	r3, #3
 80068dc:	e004      	b.n	80068e8 <HAL_GPIO_Init+0x204>
 80068de:	2302      	movs	r3, #2
 80068e0:	e002      	b.n	80068e8 <HAL_GPIO_Init+0x204>
 80068e2:	2301      	movs	r3, #1
 80068e4:	e000      	b.n	80068e8 <HAL_GPIO_Init+0x204>
 80068e6:	2300      	movs	r3, #0
 80068e8:	69fa      	ldr	r2, [r7, #28]
 80068ea:	f002 0203 	and.w	r2, r2, #3
 80068ee:	0092      	lsls	r2, r2, #2
 80068f0:	4093      	lsls	r3, r2
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068f8:	4935      	ldr	r1, [pc, #212]	; (80069d0 <HAL_GPIO_Init+0x2ec>)
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	089b      	lsrs	r3, r3, #2
 80068fe:	3302      	adds	r3, #2
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006906:	4b38      	ldr	r3, [pc, #224]	; (80069e8 <HAL_GPIO_Init+0x304>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	43db      	mvns	r3, r3
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	4013      	ands	r3, r2
 8006914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	4313      	orrs	r3, r2
 8006928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800692a:	4a2f      	ldr	r2, [pc, #188]	; (80069e8 <HAL_GPIO_Init+0x304>)
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006930:	4b2d      	ldr	r3, [pc, #180]	; (80069e8 <HAL_GPIO_Init+0x304>)
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	43db      	mvns	r3, r3
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	4013      	ands	r3, r2
 800693e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d003      	beq.n	8006954 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	4313      	orrs	r3, r2
 8006952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006954:	4a24      	ldr	r2, [pc, #144]	; (80069e8 <HAL_GPIO_Init+0x304>)
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800695a:	4b23      	ldr	r3, [pc, #140]	; (80069e8 <HAL_GPIO_Init+0x304>)
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	43db      	mvns	r3, r3
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	4013      	ands	r3, r2
 8006968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	4313      	orrs	r3, r2
 800697c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800697e:	4a1a      	ldr	r2, [pc, #104]	; (80069e8 <HAL_GPIO_Init+0x304>)
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006984:	4b18      	ldr	r3, [pc, #96]	; (80069e8 <HAL_GPIO_Init+0x304>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	43db      	mvns	r3, r3
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	4013      	ands	r3, r2
 8006992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80069a8:	4a0f      	ldr	r2, [pc, #60]	; (80069e8 <HAL_GPIO_Init+0x304>)
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	3301      	adds	r3, #1
 80069b2:	61fb      	str	r3, [r7, #28]
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	2b0f      	cmp	r3, #15
 80069b8:	f67f aea2 	bls.w	8006700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	3724      	adds	r7, #36	; 0x24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40023800 	.word	0x40023800
 80069d0:	40013800 	.word	0x40013800
 80069d4:	40020000 	.word	0x40020000
 80069d8:	40020400 	.word	0x40020400
 80069dc:	40020800 	.word	0x40020800
 80069e0:	40020c00 	.word	0x40020c00
 80069e4:	40021000 	.word	0x40021000
 80069e8:	40013c00 	.word	0x40013c00

080069ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691a      	ldr	r2, [r3, #16]
 80069fc:	887b      	ldrh	r3, [r7, #2]
 80069fe:	4013      	ands	r3, r2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a04:	2301      	movs	r3, #1
 8006a06:	73fb      	strb	r3, [r7, #15]
 8006a08:	e001      	b.n	8006a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	807b      	strh	r3, [r7, #2]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a2c:	787b      	ldrb	r3, [r7, #1]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a32:	887a      	ldrh	r2, [r7, #2]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006a38:	e003      	b.n	8006a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006a3a:	887b      	ldrh	r3, [r7, #2]
 8006a3c:	041a      	lsls	r2, r3, #16
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	619a      	str	r2, [r3, #24]
}
 8006a42:	bf00      	nop
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
	...

08006a50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006a5a:	4b08      	ldr	r3, [pc, #32]	; (8006a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a5c:	695a      	ldr	r2, [r3, #20]
 8006a5e:	88fb      	ldrh	r3, [r7, #6]
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d006      	beq.n	8006a74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a66:	4a05      	ldr	r2, [pc, #20]	; (8006a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a68:	88fb      	ldrh	r3, [r7, #6]
 8006a6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fb fde6 	bl	8002640 <HAL_GPIO_EXTI_Callback>
  }
}
 8006a74:	bf00      	nop
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	40013c00 	.word	0x40013c00

08006a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e12b      	b.n	8006cea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d106      	bne.n	8006aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7fe f88e 	bl	8004bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2224      	movs	r2, #36	; 0x24
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 0201 	bic.w	r2, r2, #1
 8006ac2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ad2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ae2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006ae4:	f002 fe10 	bl	8009708 <HAL_RCC_GetPCLK1Freq>
 8006ae8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	4a81      	ldr	r2, [pc, #516]	; (8006cf4 <HAL_I2C_Init+0x274>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d807      	bhi.n	8006b04 <HAL_I2C_Init+0x84>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4a80      	ldr	r2, [pc, #512]	; (8006cf8 <HAL_I2C_Init+0x278>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	bf94      	ite	ls
 8006afc:	2301      	movls	r3, #1
 8006afe:	2300      	movhi	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	e006      	b.n	8006b12 <HAL_I2C_Init+0x92>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4a7d      	ldr	r2, [pc, #500]	; (8006cfc <HAL_I2C_Init+0x27c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	bf94      	ite	ls
 8006b0c:	2301      	movls	r3, #1
 8006b0e:	2300      	movhi	r3, #0
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e0e7      	b.n	8006cea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4a78      	ldr	r2, [pc, #480]	; (8006d00 <HAL_I2C_Init+0x280>)
 8006b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b22:	0c9b      	lsrs	r3, r3, #18
 8006b24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	4a6a      	ldr	r2, [pc, #424]	; (8006cf4 <HAL_I2C_Init+0x274>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d802      	bhi.n	8006b54 <HAL_I2C_Init+0xd4>
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	3301      	adds	r3, #1
 8006b52:	e009      	b.n	8006b68 <HAL_I2C_Init+0xe8>
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006b5a:	fb02 f303 	mul.w	r3, r2, r3
 8006b5e:	4a69      	ldr	r2, [pc, #420]	; (8006d04 <HAL_I2C_Init+0x284>)
 8006b60:	fba2 2303 	umull	r2, r3, r2, r3
 8006b64:	099b      	lsrs	r3, r3, #6
 8006b66:	3301      	adds	r3, #1
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	6812      	ldr	r2, [r2, #0]
 8006b6c:	430b      	orrs	r3, r1
 8006b6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006b7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	495c      	ldr	r1, [pc, #368]	; (8006cf4 <HAL_I2C_Init+0x274>)
 8006b84:	428b      	cmp	r3, r1
 8006b86:	d819      	bhi.n	8006bbc <HAL_I2C_Init+0x13c>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	1e59      	subs	r1, r3, #1
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	005b      	lsls	r3, r3, #1
 8006b92:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b96:	1c59      	adds	r1, r3, #1
 8006b98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006b9c:	400b      	ands	r3, r1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00a      	beq.n	8006bb8 <HAL_I2C_Init+0x138>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	1e59      	subs	r1, r3, #1
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bb6:	e051      	b.n	8006c5c <HAL_I2C_Init+0x1dc>
 8006bb8:	2304      	movs	r3, #4
 8006bba:	e04f      	b.n	8006c5c <HAL_I2C_Init+0x1dc>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d111      	bne.n	8006be8 <HAL_I2C_Init+0x168>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	1e58      	subs	r0, r3, #1
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6859      	ldr	r1, [r3, #4]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	440b      	add	r3, r1
 8006bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	bf0c      	ite	eq
 8006be0:	2301      	moveq	r3, #1
 8006be2:	2300      	movne	r3, #0
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	e012      	b.n	8006c0e <HAL_I2C_Init+0x18e>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	1e58      	subs	r0, r3, #1
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6859      	ldr	r1, [r3, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	440b      	add	r3, r1
 8006bf6:	0099      	lsls	r1, r3, #2
 8006bf8:	440b      	add	r3, r1
 8006bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bfe:	3301      	adds	r3, #1
 8006c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	bf0c      	ite	eq
 8006c08:	2301      	moveq	r3, #1
 8006c0a:	2300      	movne	r3, #0
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <HAL_I2C_Init+0x196>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e022      	b.n	8006c5c <HAL_I2C_Init+0x1dc>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10e      	bne.n	8006c3c <HAL_I2C_Init+0x1bc>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	1e58      	subs	r0, r3, #1
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6859      	ldr	r1, [r3, #4]
 8006c26:	460b      	mov	r3, r1
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	440b      	add	r3, r1
 8006c2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c30:	3301      	adds	r3, #1
 8006c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c3a:	e00f      	b.n	8006c5c <HAL_I2C_Init+0x1dc>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	1e58      	subs	r0, r3, #1
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6859      	ldr	r1, [r3, #4]
 8006c44:	460b      	mov	r3, r1
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	440b      	add	r3, r1
 8006c4a:	0099      	lsls	r1, r3, #2
 8006c4c:	440b      	add	r3, r1
 8006c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c52:	3301      	adds	r3, #1
 8006c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c5c:	6879      	ldr	r1, [r7, #4]
 8006c5e:	6809      	ldr	r1, [r1, #0]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69da      	ldr	r2, [r3, #28]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	431a      	orrs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006c8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	6911      	ldr	r1, [r2, #16]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	68d2      	ldr	r2, [r2, #12]
 8006c96:	4311      	orrs	r1, r2
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6812      	ldr	r2, [r2, #0]
 8006c9c:	430b      	orrs	r3, r1
 8006c9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	695a      	ldr	r2, [r3, #20]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0201 	orr.w	r2, r2, #1
 8006cca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	000186a0 	.word	0x000186a0
 8006cf8:	001e847f 	.word	0x001e847f
 8006cfc:	003d08ff 	.word	0x003d08ff
 8006d00:	431bde83 	.word	0x431bde83
 8006d04:	10624dd3 	.word	0x10624dd3

08006d08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af02      	add	r7, sp, #8
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	607a      	str	r2, [r7, #4]
 8006d12:	461a      	mov	r2, r3
 8006d14:	460b      	mov	r3, r1
 8006d16:	817b      	strh	r3, [r7, #10]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d1c:	f7fe fb82 	bl	8005424 <HAL_GetTick>
 8006d20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b20      	cmp	r3, #32
 8006d2c:	f040 80e0 	bne.w	8006ef0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	2319      	movs	r3, #25
 8006d36:	2201      	movs	r2, #1
 8006d38:	4970      	ldr	r1, [pc, #448]	; (8006efc <HAL_I2C_Master_Transmit+0x1f4>)
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f001 fea0 	bl	8008a80 <I2C_WaitOnFlagUntilTimeout>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006d46:	2302      	movs	r3, #2
 8006d48:	e0d3      	b.n	8006ef2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d101      	bne.n	8006d58 <HAL_I2C_Master_Transmit+0x50>
 8006d54:	2302      	movs	r3, #2
 8006d56:	e0cc      	b.n	8006ef2 <HAL_I2C_Master_Transmit+0x1ea>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d007      	beq.n	8006d7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f042 0201 	orr.w	r2, r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2221      	movs	r2, #33	; 0x21
 8006d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2210      	movs	r2, #16
 8006d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	893a      	ldrh	r2, [r7, #8]
 8006dae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4a50      	ldr	r2, [pc, #320]	; (8006f00 <HAL_I2C_Master_Transmit+0x1f8>)
 8006dbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006dc0:	8979      	ldrh	r1, [r7, #10]
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	6a3a      	ldr	r2, [r7, #32]
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f001 fd30 	bl	800882c <I2C_MasterRequestWrite>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e08d      	b.n	8006ef2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	613b      	str	r3, [r7, #16]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	613b      	str	r3, [r7, #16]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	613b      	str	r3, [r7, #16]
 8006dea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006dec:	e066      	b.n	8006ebc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	6a39      	ldr	r1, [r7, #32]
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f001 ff1a 	bl	8008c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00d      	beq.n	8006e1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d107      	bne.n	8006e16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e06b      	b.n	8006ef2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	781a      	ldrb	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	3b01      	subs	r3, #1
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e42:	3b01      	subs	r3, #1
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	f003 0304 	and.w	r3, r3, #4
 8006e54:	2b04      	cmp	r3, #4
 8006e56:	d11b      	bne.n	8006e90 <HAL_I2C_Master_Transmit+0x188>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d017      	beq.n	8006e90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	781a      	ldrb	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	6a39      	ldr	r1, [r7, #32]
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f001 ff0a 	bl	8008cae <I2C_WaitOnBTFFlagUntilTimeout>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00d      	beq.n	8006ebc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea4:	2b04      	cmp	r3, #4
 8006ea6:	d107      	bne.n	8006eb8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eb6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e01a      	b.n	8006ef2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d194      	bne.n	8006dee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ed2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	e000      	b.n	8006ef2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006ef0:	2302      	movs	r3, #2
  }
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	00100002 	.word	0x00100002
 8006f00:	ffff0000 	.word	0xffff0000

08006f04 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	607a      	str	r2, [r7, #4]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	460b      	mov	r3, r1
 8006f12:	817b      	strh	r3, [r7, #10]
 8006f14:	4613      	mov	r3, r2
 8006f16:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	f040 808d 	bne.w	8007044 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006f2a:	4b4a      	ldr	r3, [pc, #296]	; (8007054 <HAL_I2C_Master_Receive_IT+0x150>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	08db      	lsrs	r3, r3, #3
 8006f30:	4a49      	ldr	r2, [pc, #292]	; (8007058 <HAL_I2C_Master_Receive_IT+0x154>)
 8006f32:	fba2 2303 	umull	r2, r3, r2, r3
 8006f36:	0a1a      	lsrs	r2, r3, #8
 8006f38:	4613      	mov	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009a      	lsls	r2, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d116      	bne.n	8006f7e <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	f043 0220 	orr.w	r2, r3, #32
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e063      	b.n	8007046 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d0db      	beq.n	8006f44 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d101      	bne.n	8006f9a <HAL_I2C_Master_Receive_IT+0x96>
 8006f96:	2302      	movs	r3, #2
 8006f98:	e055      	b.n	8007046 <HAL_I2C_Master_Receive_IT+0x142>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d007      	beq.n	8006fc0 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0201 	orr.w	r2, r2, #1
 8006fbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2222      	movs	r2, #34	; 0x22
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2210      	movs	r2, #16
 8006fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	893a      	ldrh	r2, [r7, #8]
 8006ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4a17      	ldr	r2, [pc, #92]	; (800705c <HAL_I2C_Master_Receive_IT+0x158>)
 8007000:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8007002:	897a      	ldrh	r2, [r7, #10]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800701e:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800702e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800703e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	e000      	b.n	8007046 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8007044:	2302      	movs	r3, #2
  }
}
 8007046:	4618      	mov	r0, r3
 8007048:	371c      	adds	r7, #28
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	20000250 	.word	0x20000250
 8007058:	14f8b589 	.word	0x14f8b589
 800705c:	ffff0000 	.word	0xffff0000

08007060 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007078:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007080:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007088:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	2b10      	cmp	r3, #16
 800708e:	d003      	beq.n	8007098 <HAL_I2C_EV_IRQHandler+0x38>
 8007090:	7bfb      	ldrb	r3, [r7, #15]
 8007092:	2b40      	cmp	r3, #64	; 0x40
 8007094:	f040 80c1 	bne.w	800721a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10d      	bne.n	80070ce <HAL_I2C_EV_IRQHandler+0x6e>
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80070b8:	d003      	beq.n	80070c2 <HAL_I2C_EV_IRQHandler+0x62>
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80070c0:	d101      	bne.n	80070c6 <HAL_I2C_EV_IRQHandler+0x66>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <HAL_I2C_EV_IRQHandler+0x68>
 80070c6:	2300      	movs	r3, #0
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	f000 8132 	beq.w	8007332 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00c      	beq.n	80070f2 <HAL_I2C_EV_IRQHandler+0x92>
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	0a5b      	lsrs	r3, r3, #9
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d006      	beq.n	80070f2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f001 fe84 	bl	8008df2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fd83 	bl	8007bf6 <I2C_Master_SB>
 80070f0:	e092      	b.n	8007218 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	08db      	lsrs	r3, r3, #3
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d009      	beq.n	8007112 <HAL_I2C_EV_IRQHandler+0xb2>
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	0a5b      	lsrs	r3, r3, #9
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fdf9 	bl	8007d02 <I2C_Master_ADD10>
 8007110:	e082      	b.n	8007218 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	085b      	lsrs	r3, r3, #1
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d009      	beq.n	8007132 <HAL_I2C_EV_IRQHandler+0xd2>
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	0a5b      	lsrs	r3, r3, #9
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fe13 	bl	8007d56 <I2C_Master_ADDR>
 8007130:	e072      	b.n	8007218 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	089b      	lsrs	r3, r3, #2
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d03b      	beq.n	80071b6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800714c:	f000 80f3 	beq.w	8007336 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	09db      	lsrs	r3, r3, #7
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00f      	beq.n	800717c <HAL_I2C_EV_IRQHandler+0x11c>
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	0a9b      	lsrs	r3, r3, #10
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b00      	cmp	r3, #0
 8007166:	d009      	beq.n	800717c <HAL_I2C_EV_IRQHandler+0x11c>
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	089b      	lsrs	r3, r3, #2
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b00      	cmp	r3, #0
 8007172:	d103      	bne.n	800717c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f9f3 	bl	8007560 <I2C_MasterTransmit_TXE>
 800717a:	e04d      	b.n	8007218 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	089b      	lsrs	r3, r3, #2
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 80d6 	beq.w	8007336 <HAL_I2C_EV_IRQHandler+0x2d6>
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	0a5b      	lsrs	r3, r3, #9
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 80cf 	beq.w	8007336 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	2b21      	cmp	r3, #33	; 0x21
 800719c:	d103      	bne.n	80071a6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fa7a 	bl	8007698 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071a4:	e0c7      	b.n	8007336 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
 80071a8:	2b40      	cmp	r3, #64	; 0x40
 80071aa:	f040 80c4 	bne.w	8007336 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fae8 	bl	8007784 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071b4:	e0bf      	b.n	8007336 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071c4:	f000 80b7 	beq.w	8007336 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	099b      	lsrs	r3, r3, #6
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00f      	beq.n	80071f4 <HAL_I2C_EV_IRQHandler+0x194>
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	0a9b      	lsrs	r3, r3, #10
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d009      	beq.n	80071f4 <HAL_I2C_EV_IRQHandler+0x194>
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	089b      	lsrs	r3, r3, #2
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d103      	bne.n	80071f4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fb5d 	bl	80078ac <I2C_MasterReceive_RXNE>
 80071f2:	e011      	b.n	8007218 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	089b      	lsrs	r3, r3, #2
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 809a 	beq.w	8007336 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	0a5b      	lsrs	r3, r3, #9
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 8093 	beq.w	8007336 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fc06 	bl	8007a22 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007216:	e08e      	b.n	8007336 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007218:	e08d      	b.n	8007336 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	2b00      	cmp	r3, #0
 8007220:	d004      	beq.n	800722c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	61fb      	str	r3, [r7, #28]
 800722a:	e007      	b.n	800723c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	085b      	lsrs	r3, r3, #1
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	d012      	beq.n	800726e <HAL_I2C_EV_IRQHandler+0x20e>
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	0a5b      	lsrs	r3, r3, #9
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00c      	beq.n	800726e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007264:	69b9      	ldr	r1, [r7, #24]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 ffc4 	bl	80081f4 <I2C_Slave_ADDR>
 800726c:	e066      	b.n	800733c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	091b      	lsrs	r3, r3, #4
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	d009      	beq.n	800728e <HAL_I2C_EV_IRQHandler+0x22e>
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	0a5b      	lsrs	r3, r3, #9
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fffe 	bl	8008288 <I2C_Slave_STOPF>
 800728c:	e056      	b.n	800733c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800728e:	7bbb      	ldrb	r3, [r7, #14]
 8007290:	2b21      	cmp	r3, #33	; 0x21
 8007292:	d002      	beq.n	800729a <HAL_I2C_EV_IRQHandler+0x23a>
 8007294:	7bbb      	ldrb	r3, [r7, #14]
 8007296:	2b29      	cmp	r3, #41	; 0x29
 8007298:	d125      	bne.n	80072e6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	09db      	lsrs	r3, r3, #7
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00f      	beq.n	80072c6 <HAL_I2C_EV_IRQHandler+0x266>
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	0a9b      	lsrs	r3, r3, #10
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d009      	beq.n	80072c6 <HAL_I2C_EV_IRQHandler+0x266>
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	089b      	lsrs	r3, r3, #2
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d103      	bne.n	80072c6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 feda 	bl	8008078 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80072c4:	e039      	b.n	800733a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	089b      	lsrs	r3, r3, #2
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d033      	beq.n	800733a <HAL_I2C_EV_IRQHandler+0x2da>
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	0a5b      	lsrs	r3, r3, #9
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d02d      	beq.n	800733a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 ff07 	bl	80080f2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80072e4:	e029      	b.n	800733a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	099b      	lsrs	r3, r3, #6
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00f      	beq.n	8007312 <HAL_I2C_EV_IRQHandler+0x2b2>
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	0a9b      	lsrs	r3, r3, #10
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d009      	beq.n	8007312 <HAL_I2C_EV_IRQHandler+0x2b2>
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	089b      	lsrs	r3, r3, #2
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d103      	bne.n	8007312 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 ff12 	bl	8008134 <I2C_SlaveReceive_RXNE>
 8007310:	e014      	b.n	800733c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	089b      	lsrs	r3, r3, #2
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00e      	beq.n	800733c <HAL_I2C_EV_IRQHandler+0x2dc>
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	0a5b      	lsrs	r3, r3, #9
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d008      	beq.n	800733c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 ff40 	bl	80081b0 <I2C_SlaveReceive_BTF>
 8007330:	e004      	b.n	800733c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007332:	bf00      	nop
 8007334:	e002      	b.n	800733c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007336:	bf00      	nop
 8007338:	e000      	b.n	800733c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800733a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800733c:	3720      	adds	r7, #32
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b08a      	sub	sp, #40	; 0x28
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800735a:	2300      	movs	r3, #0
 800735c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007364:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	0a1b      	lsrs	r3, r3, #8
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00e      	beq.n	8007390 <HAL_I2C_ER_IRQHandler+0x4e>
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	0a1b      	lsrs	r3, r3, #8
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d008      	beq.n	8007390 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	f043 0301 	orr.w	r3, r3, #1
 8007384:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800738e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	0a5b      	lsrs	r3, r3, #9
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00e      	beq.n	80073ba <HAL_I2C_ER_IRQHandler+0x78>
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	0a1b      	lsrs	r3, r3, #8
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d008      	beq.n	80073ba <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	f043 0302 	orr.w	r3, r3, #2
 80073ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80073b8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	0a9b      	lsrs	r3, r3, #10
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d03f      	beq.n	8007446 <HAL_I2C_ER_IRQHandler+0x104>
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	0a1b      	lsrs	r3, r3, #8
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d039      	beq.n	8007446 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80073d2:	7efb      	ldrb	r3, [r7, #27]
 80073d4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073da:	b29b      	uxth	r3, r3
 80073dc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073e4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80073ec:	7ebb      	ldrb	r3, [r7, #26]
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	d112      	bne.n	8007418 <HAL_I2C_ER_IRQHandler+0xd6>
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10f      	bne.n	8007418 <HAL_I2C_ER_IRQHandler+0xd6>
 80073f8:	7cfb      	ldrb	r3, [r7, #19]
 80073fa:	2b21      	cmp	r3, #33	; 0x21
 80073fc:	d008      	beq.n	8007410 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80073fe:	7cfb      	ldrb	r3, [r7, #19]
 8007400:	2b29      	cmp	r3, #41	; 0x29
 8007402:	d005      	beq.n	8007410 <HAL_I2C_ER_IRQHandler+0xce>
 8007404:	7cfb      	ldrb	r3, [r7, #19]
 8007406:	2b28      	cmp	r3, #40	; 0x28
 8007408:	d106      	bne.n	8007418 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2b21      	cmp	r3, #33	; 0x21
 800740e:	d103      	bne.n	8007418 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 f869 	bl	80084e8 <I2C_Slave_AF>
 8007416:	e016      	b.n	8007446 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007420:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	f043 0304 	orr.w	r3, r3, #4
 8007428:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800742a:	7efb      	ldrb	r3, [r7, #27]
 800742c:	2b10      	cmp	r3, #16
 800742e:	d002      	beq.n	8007436 <HAL_I2C_ER_IRQHandler+0xf4>
 8007430:	7efb      	ldrb	r3, [r7, #27]
 8007432:	2b40      	cmp	r3, #64	; 0x40
 8007434:	d107      	bne.n	8007446 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007444:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	0adb      	lsrs	r3, r3, #11
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00e      	beq.n	8007470 <HAL_I2C_ER_IRQHandler+0x12e>
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	0a1b      	lsrs	r3, r3, #8
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d008      	beq.n	8007470 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	f043 0308 	orr.w	r3, r3, #8
 8007464:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800746e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	2b00      	cmp	r3, #0
 8007474:	d008      	beq.n	8007488 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	431a      	orrs	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f001 f8a0 	bl	80085c8 <I2C_ITError>
  }
}
 8007488:	bf00      	nop
 800748a:	3728      	adds	r7, #40	; 0x28
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	460b      	mov	r3, r1
 80074ea:	70fb      	strb	r3, [r7, #3]
 80074ec:	4613      	mov	r3, r2
 80074ee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800756e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007576:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007582:	2b00      	cmp	r3, #0
 8007584:	d150      	bne.n	8007628 <I2C_MasterTransmit_TXE+0xc8>
 8007586:	7bfb      	ldrb	r3, [r7, #15]
 8007588:	2b21      	cmp	r3, #33	; 0x21
 800758a:	d14d      	bne.n	8007628 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2b08      	cmp	r3, #8
 8007590:	d01d      	beq.n	80075ce <I2C_MasterTransmit_TXE+0x6e>
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2b20      	cmp	r3, #32
 8007596:	d01a      	beq.n	80075ce <I2C_MasterTransmit_TXE+0x6e>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800759e:	d016      	beq.n	80075ce <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075ae:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2211      	movs	r2, #17
 80075b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7ff ff62 	bl	8007490 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80075cc:	e060      	b.n	8007690 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685a      	ldr	r2, [r3, #4]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075dc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075ec:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2220      	movs	r2, #32
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b40      	cmp	r3, #64	; 0x40
 8007606:	d107      	bne.n	8007618 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff ff7d 	bl	8007510 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007616:	e03b      	b.n	8007690 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff ff35 	bl	8007490 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007626:	e033      	b.n	8007690 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	2b21      	cmp	r3, #33	; 0x21
 800762c:	d005      	beq.n	800763a <I2C_MasterTransmit_TXE+0xda>
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	2b40      	cmp	r3, #64	; 0x40
 8007632:	d12d      	bne.n	8007690 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	2b22      	cmp	r3, #34	; 0x22
 8007638:	d12a      	bne.n	8007690 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763e:	b29b      	uxth	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	d108      	bne.n	8007656 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007652:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007654:	e01c      	b.n	8007690 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b40      	cmp	r3, #64	; 0x40
 8007660:	d103      	bne.n	800766a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f88e 	bl	8007784 <I2C_MemoryTransmit_TXE_BTF>
}
 8007668:	e012      	b.n	8007690 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	781a      	ldrb	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007684:	b29b      	uxth	r3, r3
 8007686:	3b01      	subs	r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800768e:	e7ff      	b.n	8007690 <I2C_MasterTransmit_TXE+0x130>
 8007690:	bf00      	nop
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b21      	cmp	r3, #33	; 0x21
 80076b0:	d164      	bne.n	800777c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d012      	beq.n	80076e2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c0:	781a      	ldrb	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	1c5a      	adds	r2, r3, #1
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	3b01      	subs	r3, #1
 80076da:	b29a      	uxth	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80076e0:	e04c      	b.n	800777c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d01d      	beq.n	8007724 <I2C_MasterTransmit_BTF+0x8c>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b20      	cmp	r3, #32
 80076ec:	d01a      	beq.n	8007724 <I2C_MasterTransmit_BTF+0x8c>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076f4:	d016      	beq.n	8007724 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007704:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2211      	movs	r2, #17
 800770a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2220      	movs	r2, #32
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff feb7 	bl	8007490 <HAL_I2C_MasterTxCpltCallback>
}
 8007722:	e02b      	b.n	800777c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007732:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007742:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2220      	movs	r2, #32
 800774e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b40      	cmp	r3, #64	; 0x40
 800775c:	d107      	bne.n	800776e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff fed2 	bl	8007510 <HAL_I2C_MemTxCpltCallback>
}
 800776c:	e006      	b.n	800777c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7ff fe8a 	bl	8007490 <HAL_I2C_MasterTxCpltCallback>
}
 800777c:	bf00      	nop
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007792:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007798:	2b00      	cmp	r3, #0
 800779a:	d11d      	bne.n	80077d8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d10b      	bne.n	80077bc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b4:	1c9a      	adds	r2, r3, #2
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80077ba:	e073      	b.n	80078a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	121b      	asrs	r3, r3, #8
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d0:	1c5a      	adds	r2, r3, #1
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80077d6:	e065      	b.n	80078a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d10b      	bne.n	80077f8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80077f6:	e055      	b.n	80078a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d151      	bne.n	80078a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	2b22      	cmp	r3, #34	; 0x22
 8007804:	d10d      	bne.n	8007822 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007814:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800781a:	1c5a      	adds	r2, r3, #1
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007820:	e040      	b.n	80078a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007826:	b29b      	uxth	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	d015      	beq.n	8007858 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	2b21      	cmp	r3, #33	; 0x21
 8007830:	d112      	bne.n	8007858 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	781a      	ldrb	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800784c:	b29b      	uxth	r3, r3
 800784e:	3b01      	subs	r3, #1
 8007850:	b29a      	uxth	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007856:	e025      	b.n	80078a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d120      	bne.n	80078a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	2b21      	cmp	r3, #33	; 0x21
 8007866:	d11d      	bne.n	80078a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007876:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007886:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2220      	movs	r2, #32
 8007892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7ff fe36 	bl	8007510 <HAL_I2C_MemTxCpltCallback>
}
 80078a4:	bf00      	nop
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b22      	cmp	r3, #34	; 0x22
 80078be:	f040 80ac 	bne.w	8007a1a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d921      	bls.n	8007914 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	691a      	ldr	r2, [r3, #16]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	b2d2      	uxtb	r2, r2
 80078dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	3b01      	subs	r3, #1
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	f040 808c 	bne.w	8007a1a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007910:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007912:	e082      	b.n	8007a1a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	2b02      	cmp	r3, #2
 800791a:	d075      	beq.n	8007a08 <I2C_MasterReceive_RXNE+0x15c>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d002      	beq.n	8007928 <I2C_MasterReceive_RXNE+0x7c>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d16f      	bne.n	8007a08 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 fa01 	bl	8008d30 <I2C_WaitOnSTOPRequestThroughIT>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d142      	bne.n	80079ba <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007942:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685a      	ldr	r2, [r3, #4]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007952:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	691a      	ldr	r2, [r3, #16]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	b2d2      	uxtb	r2, r2
 8007960:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007970:	b29b      	uxth	r3, r3
 8007972:	3b01      	subs	r3, #1
 8007974:	b29a      	uxth	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2220      	movs	r2, #32
 800797e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b40      	cmp	r3, #64	; 0x40
 800798c:	d10a      	bne.n	80079a4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff fdc1 	bl	8007524 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80079a2:	e03a      	b.n	8007a1a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2212      	movs	r2, #18
 80079b0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7ff fd76 	bl	80074a4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80079b8:	e02f      	b.n	8007a1a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079c8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	691a      	ldr	r2, [r3, #16]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d4:	b2d2      	uxtb	r2, r2
 80079d6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079dc:	1c5a      	adds	r2, r3, #1
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	3b01      	subs	r3, #1
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7ff fd99 	bl	8007538 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007a06:	e008      	b.n	8007a1a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a16:	605a      	str	r2, [r3, #4]
}
 8007a18:	e7ff      	b.n	8007a1a <I2C_MasterReceive_RXNE+0x16e>
 8007a1a:	bf00      	nop
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b084      	sub	sp, #16
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d11b      	bne.n	8007a72 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a48:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	691a      	ldr	r2, [r3, #16]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	b2d2      	uxtb	r2, r2
 8007a56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007a70:	e0bd      	b.n	8007bee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	d129      	bne.n	8007ad0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a8a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d00a      	beq.n	8007aa8 <I2C_MasterReceive_BTF+0x86>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d007      	beq.n	8007aa8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aa6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	691a      	ldr	r2, [r3, #16]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab2:	b2d2      	uxtb	r2, r2
 8007ab4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007ace:	e08e      	b.n	8007bee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d176      	bne.n	8007bc8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d002      	beq.n	8007ae6 <I2C_MasterReceive_BTF+0xc4>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2b10      	cmp	r3, #16
 8007ae4:	d108      	bne.n	8007af8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	e019      	b.n	8007b2c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	d002      	beq.n	8007b04 <I2C_MasterReceive_BTF+0xe2>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d108      	bne.n	8007b16 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	e00a      	b.n	8007b2c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2b10      	cmp	r3, #16
 8007b1a:	d007      	beq.n	8007b2c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	691a      	ldr	r2, [r3, #16]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	b2d2      	uxtb	r2, r2
 8007b38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	691a      	ldr	r2, [r3, #16]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	b2d2      	uxtb	r2, r2
 8007b5e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b64:	1c5a      	adds	r2, r3, #1
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	3b01      	subs	r3, #1
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007b86:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b40      	cmp	r3, #64	; 0x40
 8007b9a:	d10a      	bne.n	8007bb2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7ff fcba 	bl	8007524 <HAL_I2C_MemRxCpltCallback>
}
 8007bb0:	e01d      	b.n	8007bee <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2212      	movs	r2, #18
 8007bbe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7ff fc6f 	bl	80074a4 <HAL_I2C_MasterRxCpltCallback>
}
 8007bc6:	e012      	b.n	8007bee <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	691a      	ldr	r2, [r3, #16]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd2:	b2d2      	uxtb	r2, r2
 8007bd4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007bee:	bf00      	nop
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b40      	cmp	r3, #64	; 0x40
 8007c08:	d117      	bne.n	8007c3a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d109      	bne.n	8007c26 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	461a      	mov	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c22:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007c24:	e067      	b.n	8007cf6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	f043 0301 	orr.w	r3, r3, #1
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	611a      	str	r2, [r3, #16]
}
 8007c38:	e05d      	b.n	8007cf6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c42:	d133      	bne.n	8007cac <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b21      	cmp	r3, #33	; 0x21
 8007c4e:	d109      	bne.n	8007c64 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	461a      	mov	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c60:	611a      	str	r2, [r3, #16]
 8007c62:	e008      	b.n	8007c76 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	f043 0301 	orr.w	r3, r3, #1
 8007c6e:	b2da      	uxtb	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d004      	beq.n	8007c88 <I2C_Master_SB+0x92>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d108      	bne.n	8007c9a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d032      	beq.n	8007cf6 <I2C_Master_SB+0x100>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d02d      	beq.n	8007cf6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ca8:	605a      	str	r2, [r3, #4]
}
 8007caa:	e024      	b.n	8007cf6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10e      	bne.n	8007cd2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	11db      	asrs	r3, r3, #7
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	f003 0306 	and.w	r3, r3, #6
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	f063 030f 	orn	r3, r3, #15
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	611a      	str	r2, [r3, #16]
}
 8007cd0:	e011      	b.n	8007cf6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d10d      	bne.n	8007cf6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	11db      	asrs	r3, r3, #7
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	f003 0306 	and.w	r3, r3, #6
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	f063 030e 	orn	r3, r3, #14
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	611a      	str	r2, [r3, #16]
}
 8007cf6:	bf00      	nop
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d004      	beq.n	8007d28 <I2C_Master_ADD10+0x26>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d108      	bne.n	8007d3a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00c      	beq.n	8007d4a <I2C_Master_ADD10+0x48>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d007      	beq.n	8007d4a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d48:	605a      	str	r2, [r3, #4]
  }
}
 8007d4a:	bf00      	nop
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b091      	sub	sp, #68	; 0x44
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d72:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b22      	cmp	r3, #34	; 0x22
 8007d7e:	f040 8169 	bne.w	8008054 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10f      	bne.n	8007daa <I2C_Master_ADDR+0x54>
 8007d8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007d8e:	2b40      	cmp	r3, #64	; 0x40
 8007d90:	d10b      	bne.n	8007daa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d92:	2300      	movs	r3, #0
 8007d94:	633b      	str	r3, [r7, #48]	; 0x30
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	633b      	str	r3, [r7, #48]	; 0x30
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	e160      	b.n	800806c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d11d      	bne.n	8007dee <I2C_Master_ADDR+0x98>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007dba:	d118      	bne.n	8007dee <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007de0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	651a      	str	r2, [r3, #80]	; 0x50
 8007dec:	e13e      	b.n	800806c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d113      	bne.n	8007e20 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007df8:	2300      	movs	r3, #0
 8007dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	e115      	b.n	800804c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	f040 808a 	bne.w	8007f40 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e32:	d137      	bne.n	8007ea4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e42:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e52:	d113      	bne.n	8007e7c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e62:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e64:	2300      	movs	r3, #0
 8007e66:	627b      	str	r3, [r7, #36]	; 0x24
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	627b      	str	r3, [r7, #36]	; 0x24
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7a:	e0e7      	b.n	800804c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	623b      	str	r3, [r7, #32]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	623b      	str	r3, [r7, #32]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	623b      	str	r3, [r7, #32]
 8007e90:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	e0d3      	b.n	800804c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea6:	2b08      	cmp	r3, #8
 8007ea8:	d02e      	beq.n	8007f08 <I2C_Master_ADDR+0x1b2>
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eac:	2b20      	cmp	r3, #32
 8007eae:	d02b      	beq.n	8007f08 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb2:	2b12      	cmp	r3, #18
 8007eb4:	d102      	bne.n	8007ebc <I2C_Master_ADDR+0x166>
 8007eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d125      	bne.n	8007f08 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	d00e      	beq.n	8007ee0 <I2C_Master_ADDR+0x18a>
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d00b      	beq.n	8007ee0 <I2C_Master_ADDR+0x18a>
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eca:	2b10      	cmp	r3, #16
 8007ecc:	d008      	beq.n	8007ee0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e007      	b.n	8007ef0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007eee:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61fb      	str	r3, [r7, #28]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	61fb      	str	r3, [r7, #28]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	61fb      	str	r3, [r7, #28]
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	e0a1      	b.n	800804c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f16:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f18:	2300      	movs	r3, #0
 8007f1a:	61bb      	str	r3, [r7, #24]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	61bb      	str	r3, [r7, #24]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	61bb      	str	r3, [r7, #24]
 8007f2c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	e085      	b.n	800804c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d14d      	bne.n	8007fe6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4c:	2b04      	cmp	r3, #4
 8007f4e:	d016      	beq.n	8007f7e <I2C_Master_ADDR+0x228>
 8007f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d013      	beq.n	8007f7e <I2C_Master_ADDR+0x228>
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	2b10      	cmp	r3, #16
 8007f5a:	d010      	beq.n	8007f7e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f6a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	e007      	b.n	8007f8e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f8c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f9c:	d117      	bne.n	8007fce <I2C_Master_ADDR+0x278>
 8007f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007fa4:	d00b      	beq.n	8007fbe <I2C_Master_ADDR+0x268>
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d008      	beq.n	8007fbe <I2C_Master_ADDR+0x268>
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	2b08      	cmp	r3, #8
 8007fb0:	d005      	beq.n	8007fbe <I2C_Master_ADDR+0x268>
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb4:	2b10      	cmp	r3, #16
 8007fb6:	d002      	beq.n	8007fbe <I2C_Master_ADDR+0x268>
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fba:	2b20      	cmp	r3, #32
 8007fbc:	d107      	bne.n	8007fce <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685a      	ldr	r2, [r3, #4]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fcc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fce:	2300      	movs	r3, #0
 8007fd0:	617b      	str	r3, [r7, #20]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	617b      	str	r3, [r7, #20]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	617b      	str	r3, [r7, #20]
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	e032      	b.n	800804c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ff4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008004:	d117      	bne.n	8008036 <I2C_Master_ADDR+0x2e0>
 8008006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008008:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800800c:	d00b      	beq.n	8008026 <I2C_Master_ADDR+0x2d0>
 800800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008010:	2b01      	cmp	r3, #1
 8008012:	d008      	beq.n	8008026 <I2C_Master_ADDR+0x2d0>
 8008014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008016:	2b08      	cmp	r3, #8
 8008018:	d005      	beq.n	8008026 <I2C_Master_ADDR+0x2d0>
 800801a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801c:	2b10      	cmp	r3, #16
 800801e:	d002      	beq.n	8008026 <I2C_Master_ADDR+0x2d0>
 8008020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008022:	2b20      	cmp	r3, #32
 8008024:	d107      	bne.n	8008036 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008034:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008036:	2300      	movs	r3, #0
 8008038:	613b      	str	r3, [r7, #16]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	695b      	ldr	r3, [r3, #20]
 8008040:	613b      	str	r3, [r7, #16]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	613b      	str	r3, [r7, #16]
 800804a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008052:	e00b      	b.n	800806c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008054:	2300      	movs	r3, #0
 8008056:	60fb      	str	r3, [r7, #12]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	60fb      	str	r3, [r7, #12]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	68fb      	ldr	r3, [r7, #12]
}
 800806a:	e7ff      	b.n	800806c <I2C_Master_ADDR+0x316>
 800806c:	bf00      	nop
 800806e:	3744      	adds	r7, #68	; 0x44
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008086:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800808c:	b29b      	uxth	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d02b      	beq.n	80080ea <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	781a      	ldrb	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	1c5a      	adds	r2, r3, #1
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	3b01      	subs	r3, #1
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d114      	bne.n	80080ea <I2C_SlaveTransmit_TXE+0x72>
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	2b29      	cmp	r3, #41	; 0x29
 80080c4:	d111      	bne.n	80080ea <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080d4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2221      	movs	r2, #33	; 0x21
 80080da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2228      	movs	r2, #40	; 0x28
 80080e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7ff f9e7 	bl	80074b8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80080ea:	bf00      	nop
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b083      	sub	sp, #12
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080fe:	b29b      	uxth	r3, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	d011      	beq.n	8008128 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	781a      	ldrb	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008114:	1c5a      	adds	r2, r3, #1
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800811e:	b29b      	uxth	r3, r3
 8008120:	3b01      	subs	r3, #1
 8008122:	b29a      	uxth	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008142:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008148:	b29b      	uxth	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d02c      	beq.n	80081a8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	691a      	ldr	r2, [r3, #16]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008158:	b2d2      	uxtb	r2, r2
 800815a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	1c5a      	adds	r2, r3, #1
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800816a:	b29b      	uxth	r3, r3
 800816c:	3b01      	subs	r3, #1
 800816e:	b29a      	uxth	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008178:	b29b      	uxth	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d114      	bne.n	80081a8 <I2C_SlaveReceive_RXNE+0x74>
 800817e:	7bfb      	ldrb	r3, [r7, #15]
 8008180:	2b2a      	cmp	r3, #42	; 0x2a
 8008182:	d111      	bne.n	80081a8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008192:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2222      	movs	r2, #34	; 0x22
 8008198:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2228      	movs	r2, #40	; 0x28
 800819e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7ff f992 	bl	80074cc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80081a8:	bf00      	nop
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081bc:	b29b      	uxth	r3, r3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d012      	beq.n	80081e8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	691a      	ldr	r2, [r3, #16]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081cc:	b2d2      	uxtb	r2, r2
 80081ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081de:	b29b      	uxth	r3, r3
 80081e0:	3b01      	subs	r3, #1
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80081fe:	2300      	movs	r3, #0
 8008200:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008208:	b2db      	uxtb	r3, r3
 800820a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800820e:	2b28      	cmp	r3, #40	; 0x28
 8008210:	d127      	bne.n	8008262 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008220:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	089b      	lsrs	r3, r3, #2
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800822e:	2301      	movs	r3, #1
 8008230:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	09db      	lsrs	r3, r3, #7
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	d103      	bne.n	8008246 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	81bb      	strh	r3, [r7, #12]
 8008244:	e002      	b.n	800824c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008254:	89ba      	ldrh	r2, [r7, #12]
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	4619      	mov	r1, r3
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7ff f940 	bl	80074e0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008260:	e00e      	b.n	8008280 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008262:	2300      	movs	r3, #0
 8008264:	60bb      	str	r3, [r7, #8]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	695b      	ldr	r3, [r3, #20]
 800826c:	60bb      	str	r3, [r7, #8]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	60bb      	str	r3, [r7, #8]
 8008276:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008280:	bf00      	nop
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008296:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80082a6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80082a8:	2300      	movs	r3, #0
 80082aa:	60bb      	str	r3, [r7, #8]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	60bb      	str	r3, [r7, #8]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f042 0201 	orr.w	r2, r2, #1
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082d4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082e4:	d172      	bne.n	80083cc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
 80082e8:	2b22      	cmp	r3, #34	; 0x22
 80082ea:	d002      	beq.n	80082f2 <I2C_Slave_STOPF+0x6a>
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
 80082ee:	2b2a      	cmp	r3, #42	; 0x2a
 80082f0:	d135      	bne.n	800835e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008304:	b29b      	uxth	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d005      	beq.n	8008316 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	f043 0204 	orr.w	r2, r3, #4
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008324:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832a:	4618      	mov	r0, r3
 800832c:	f7fe f8e0 	bl	80064f0 <HAL_DMA_GetState>
 8008330:	4603      	mov	r3, r0
 8008332:	2b01      	cmp	r3, #1
 8008334:	d049      	beq.n	80083ca <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833a:	4a69      	ldr	r2, [pc, #420]	; (80084e0 <I2C_Slave_STOPF+0x258>)
 800833c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008342:	4618      	mov	r0, r3
 8008344:	f7fd ff28 	bl	8006198 <HAL_DMA_Abort_IT>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d03d      	beq.n	80083ca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008358:	4610      	mov	r0, r2
 800835a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800835c:	e035      	b.n	80083ca <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	b29a      	uxth	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008370:	b29b      	uxth	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d005      	beq.n	8008382 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837a:	f043 0204 	orr.w	r2, r3, #4
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	685a      	ldr	r2, [r3, #4]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008390:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008396:	4618      	mov	r0, r3
 8008398:	f7fe f8aa 	bl	80064f0 <HAL_DMA_GetState>
 800839c:	4603      	mov	r3, r0
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d014      	beq.n	80083cc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a6:	4a4e      	ldr	r2, [pc, #312]	; (80084e0 <I2C_Slave_STOPF+0x258>)
 80083a8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fd fef2 	bl	8006198 <HAL_DMA_Abort_IT>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d008      	beq.n	80083cc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80083c4:	4610      	mov	r0, r2
 80083c6:	4798      	blx	r3
 80083c8:	e000      	b.n	80083cc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80083ca:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d03e      	beq.n	8008454 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	2b04      	cmp	r3, #4
 80083e2:	d112      	bne.n	800840a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	691a      	ldr	r2, [r3, #16]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	b2d2      	uxtb	r2, r2
 80083f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008400:	b29b      	uxth	r3, r3
 8008402:	3b01      	subs	r3, #1
 8008404:	b29a      	uxth	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008414:	2b40      	cmp	r3, #64	; 0x40
 8008416:	d112      	bne.n	800843e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	691a      	ldr	r2, [r3, #16]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	b2d2      	uxtb	r2, r2
 8008424:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008434:	b29b      	uxth	r3, r3
 8008436:	3b01      	subs	r3, #1
 8008438:	b29a      	uxth	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008442:	b29b      	uxth	r3, r3
 8008444:	2b00      	cmp	r3, #0
 8008446:	d005      	beq.n	8008454 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844c:	f043 0204 	orr.w	r2, r3, #4
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008458:	2b00      	cmp	r3, #0
 800845a:	d003      	beq.n	8008464 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f8b3 	bl	80085c8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008462:	e039      	b.n	80084d8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008464:	7bfb      	ldrb	r3, [r7, #15]
 8008466:	2b2a      	cmp	r3, #42	; 0x2a
 8008468:	d109      	bne.n	800847e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2228      	movs	r2, #40	; 0x28
 8008474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f7ff f827 	bl	80074cc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b28      	cmp	r3, #40	; 0x28
 8008488:	d111      	bne.n	80084ae <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a15      	ldr	r2, [pc, #84]	; (80084e4 <I2C_Slave_STOPF+0x25c>)
 800848e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2220      	movs	r2, #32
 800849a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7ff f828 	bl	80074fc <HAL_I2C_ListenCpltCallback>
}
 80084ac:	e014      	b.n	80084d8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b2:	2b22      	cmp	r3, #34	; 0x22
 80084b4:	d002      	beq.n	80084bc <I2C_Slave_STOPF+0x234>
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	2b22      	cmp	r3, #34	; 0x22
 80084ba:	d10d      	bne.n	80084d8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2220      	movs	r2, #32
 80084c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7fe fffa 	bl	80074cc <HAL_I2C_SlaveRxCpltCallback>
}
 80084d8:	bf00      	nop
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	08008931 	.word	0x08008931
 80084e4:	ffff0000 	.word	0xffff0000

080084e8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084f6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2b08      	cmp	r3, #8
 8008502:	d002      	beq.n	800850a <I2C_Slave_AF+0x22>
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	2b20      	cmp	r3, #32
 8008508:	d129      	bne.n	800855e <I2C_Slave_AF+0x76>
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	2b28      	cmp	r3, #40	; 0x28
 800850e:	d126      	bne.n	800855e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a2c      	ldr	r2, [pc, #176]	; (80085c4 <I2C_Slave_AF+0xdc>)
 8008514:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008524:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800852e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800853e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2220      	movs	r2, #32
 800854a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7fe ffd0 	bl	80074fc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800855c:	e02e      	b.n	80085bc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800855e:	7bfb      	ldrb	r3, [r7, #15]
 8008560:	2b21      	cmp	r3, #33	; 0x21
 8008562:	d126      	bne.n	80085b2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a17      	ldr	r2, [pc, #92]	; (80085c4 <I2C_Slave_AF+0xdc>)
 8008568:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2221      	movs	r2, #33	; 0x21
 800856e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2220      	movs	r2, #32
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800858e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008598:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085a8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f7fe ff84 	bl	80074b8 <HAL_I2C_SlaveTxCpltCallback>
}
 80085b0:	e004      	b.n	80085bc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80085ba:	615a      	str	r2, [r3, #20]
}
 80085bc:	bf00      	nop
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	ffff0000 	.word	0xffff0000

080085c8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	2b10      	cmp	r3, #16
 80085e4:	d002      	beq.n	80085ec <I2C_ITError+0x24>
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	2b40      	cmp	r3, #64	; 0x40
 80085ea:	d10a      	bne.n	8008602 <I2C_ITError+0x3a>
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
 80085ee:	2b22      	cmp	r3, #34	; 0x22
 80085f0:	d107      	bne.n	8008602 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008600:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008602:	7bfb      	ldrb	r3, [r7, #15]
 8008604:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008608:	2b28      	cmp	r3, #40	; 0x28
 800860a:	d107      	bne.n	800861c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2228      	movs	r2, #40	; 0x28
 8008616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800861a:	e015      	b.n	8008648 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800862a:	d00a      	beq.n	8008642 <I2C_ITError+0x7a>
 800862c:	7bfb      	ldrb	r3, [r7, #15]
 800862e:	2b60      	cmp	r3, #96	; 0x60
 8008630:	d007      	beq.n	8008642 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2220      	movs	r2, #32
 8008636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008656:	d162      	bne.n	800871e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008666:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b01      	cmp	r3, #1
 8008674:	d020      	beq.n	80086b8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800867a:	4a6a      	ldr	r2, [pc, #424]	; (8008824 <I2C_ITError+0x25c>)
 800867c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008682:	4618      	mov	r0, r3
 8008684:	f7fd fd88 	bl	8006198 <HAL_DMA_Abort_IT>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 8089 	beq.w	80087a2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 0201 	bic.w	r2, r2, #1
 800869e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2220      	movs	r2, #32
 80086a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80086b2:	4610      	mov	r0, r2
 80086b4:	4798      	blx	r3
 80086b6:	e074      	b.n	80087a2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086bc:	4a59      	ldr	r2, [pc, #356]	; (8008824 <I2C_ITError+0x25c>)
 80086be:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fd fd67 	bl	8006198 <HAL_DMA_Abort_IT>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d068      	beq.n	80087a2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086da:	2b40      	cmp	r3, #64	; 0x40
 80086dc:	d10b      	bne.n	80086f6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	691a      	ldr	r2, [r3, #16]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e8:	b2d2      	uxtb	r2, r2
 80086ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f0:	1c5a      	adds	r2, r3, #1
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f022 0201 	bic.w	r2, r2, #1
 8008704:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2220      	movs	r2, #32
 800870a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008718:	4610      	mov	r0, r2
 800871a:	4798      	blx	r3
 800871c:	e041      	b.n	80087a2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b60      	cmp	r3, #96	; 0x60
 8008728:	d125      	bne.n	8008776 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2220      	movs	r2, #32
 800872e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008742:	2b40      	cmp	r3, #64	; 0x40
 8008744:	d10b      	bne.n	800875e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	691a      	ldr	r2, [r3, #16]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	b2d2      	uxtb	r2, r2
 8008752:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008758:	1c5a      	adds	r2, r3, #1
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f022 0201 	bic.w	r2, r2, #1
 800876c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7fe feec 	bl	800754c <HAL_I2C_AbortCpltCallback>
 8008774:	e015      	b.n	80087a2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008780:	2b40      	cmp	r3, #64	; 0x40
 8008782:	d10b      	bne.n	800879c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	691a      	ldr	r2, [r3, #16]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	b2d2      	uxtb	r2, r2
 8008790:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7fe fecb 	bl	8007538 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	f003 0301 	and.w	r3, r3, #1
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10e      	bne.n	80087d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d109      	bne.n	80087d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d104      	bne.n	80087d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d007      	beq.n	80087e0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80087de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ec:	f003 0304 	and.w	r3, r3, #4
 80087f0:	2b04      	cmp	r3, #4
 80087f2:	d113      	bne.n	800881c <I2C_ITError+0x254>
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	2b28      	cmp	r3, #40	; 0x28
 80087f8:	d110      	bne.n	800881c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a0a      	ldr	r2, [pc, #40]	; (8008828 <I2C_ITError+0x260>)
 80087fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2220      	movs	r2, #32
 800880a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7fe fe70 	bl	80074fc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800881c:	bf00      	nop
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	08008931 	.word	0x08008931
 8008828:	ffff0000 	.word	0xffff0000

0800882c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b088      	sub	sp, #32
 8008830:	af02      	add	r7, sp, #8
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	607a      	str	r2, [r7, #4]
 8008836:	603b      	str	r3, [r7, #0]
 8008838:	460b      	mov	r3, r1
 800883a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	2b08      	cmp	r3, #8
 8008846:	d006      	beq.n	8008856 <I2C_MasterRequestWrite+0x2a>
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d003      	beq.n	8008856 <I2C_MasterRequestWrite+0x2a>
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008854:	d108      	bne.n	8008868 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008864:	601a      	str	r2, [r3, #0]
 8008866:	e00b      	b.n	8008880 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886c:	2b12      	cmp	r3, #18
 800886e:	d107      	bne.n	8008880 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800887e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 f8f7 	bl	8008a80 <I2C_WaitOnFlagUntilTimeout>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00d      	beq.n	80088b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088a6:	d103      	bne.n	80088b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e035      	b.n	8008920 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088bc:	d108      	bne.n	80088d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80088be:	897b      	ldrh	r3, [r7, #10]
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	461a      	mov	r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80088cc:	611a      	str	r2, [r3, #16]
 80088ce:	e01b      	b.n	8008908 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80088d0:	897b      	ldrh	r3, [r7, #10]
 80088d2:	11db      	asrs	r3, r3, #7
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	f003 0306 	and.w	r3, r3, #6
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	f063 030f 	orn	r3, r3, #15
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	490e      	ldr	r1, [pc, #56]	; (8008928 <I2C_MasterRequestWrite+0xfc>)
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f000 f91d 	bl	8008b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e010      	b.n	8008920 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80088fe:	897b      	ldrh	r3, [r7, #10]
 8008900:	b2da      	uxtb	r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	4907      	ldr	r1, [pc, #28]	; (800892c <I2C_MasterRequestWrite+0x100>)
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 f90d 	bl	8008b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e000      	b.n	8008920 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3718      	adds	r7, #24
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	00010008 	.word	0x00010008
 800892c:	00010002 	.word	0x00010002

08008930 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008938:	2300      	movs	r3, #0
 800893a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008940:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008948:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800894a:	4b4b      	ldr	r3, [pc, #300]	; (8008a78 <I2C_DMAAbort+0x148>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	08db      	lsrs	r3, r3, #3
 8008950:	4a4a      	ldr	r2, [pc, #296]	; (8008a7c <I2C_DMAAbort+0x14c>)
 8008952:	fba2 2303 	umull	r2, r3, r2, r3
 8008956:	0a1a      	lsrs	r2, r3, #8
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	00da      	lsls	r2, r3, #3
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d106      	bne.n	8008978 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896e:	f043 0220 	orr.w	r2, r3, #32
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008976:	e00a      	b.n	800898e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3b01      	subs	r3, #1
 800897c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800898c:	d0ea      	beq.n	8008964 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008992:	2b00      	cmp	r3, #0
 8008994:	d003      	beq.n	800899e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899a:	2200      	movs	r2, #0
 800899c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d003      	beq.n	80089ae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089aa:	2200      	movs	r2, #0
 80089ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2200      	movs	r2, #0
 80089c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d0:	2200      	movs	r2, #0
 80089d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e0:	2200      	movs	r2, #0
 80089e2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f022 0201 	bic.w	r2, r2, #1
 80089f2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b60      	cmp	r3, #96	; 0x60
 80089fe:	d10e      	bne.n	8008a1e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	2220      	movs	r2, #32
 8008a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	2200      	movs	r2, #0
 8008a14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008a16:	6978      	ldr	r0, [r7, #20]
 8008a18:	f7fe fd98 	bl	800754c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008a1c:	e027      	b.n	8008a6e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008a1e:	7cfb      	ldrb	r3, [r7, #19]
 8008a20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008a24:	2b28      	cmp	r3, #40	; 0x28
 8008a26:	d117      	bne.n	8008a58 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f042 0201 	orr.w	r2, r2, #1
 8008a36:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2228      	movs	r2, #40	; 0x28
 8008a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008a56:	e007      	b.n	8008a68 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	2220      	movs	r2, #32
 8008a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008a68:	6978      	ldr	r0, [r7, #20]
 8008a6a:	f7fe fd65 	bl	8007538 <HAL_I2C_ErrorCallback>
}
 8008a6e:	bf00      	nop
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	20000250 	.word	0x20000250
 8008a7c:	14f8b589 	.word	0x14f8b589

08008a80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	603b      	str	r3, [r7, #0]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a90:	e025      	b.n	8008ade <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a98:	d021      	beq.n	8008ade <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a9a:	f7fc fcc3 	bl	8005424 <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	683a      	ldr	r2, [r7, #0]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d302      	bcc.n	8008ab0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d116      	bne.n	8008ade <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2220      	movs	r2, #32
 8008aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aca:	f043 0220 	orr.w	r2, r3, #32
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e023      	b.n	8008b26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	0c1b      	lsrs	r3, r3, #16
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d10d      	bne.n	8008b04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	43da      	mvns	r2, r3
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	4013      	ands	r3, r2
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	bf0c      	ite	eq
 8008afa:	2301      	moveq	r3, #1
 8008afc:	2300      	movne	r3, #0
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	461a      	mov	r2, r3
 8008b02:	e00c      	b.n	8008b1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	43da      	mvns	r2, r3
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	4013      	ands	r3, r2
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	bf0c      	ite	eq
 8008b16:	2301      	moveq	r3, #1
 8008b18:	2300      	movne	r3, #0
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	79fb      	ldrb	r3, [r7, #7]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d0b6      	beq.n	8008a92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b084      	sub	sp, #16
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	60f8      	str	r0, [r7, #12]
 8008b36:	60b9      	str	r1, [r7, #8]
 8008b38:	607a      	str	r2, [r7, #4]
 8008b3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008b3c:	e051      	b.n	8008be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b4c:	d123      	bne.n	8008b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2220      	movs	r2, #32
 8008b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b82:	f043 0204 	orr.w	r2, r3, #4
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e046      	b.n	8008c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9c:	d021      	beq.n	8008be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b9e:	f7fc fc41 	bl	8005424 <HAL_GetTick>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d302      	bcc.n	8008bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d116      	bne.n	8008be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bce:	f043 0220 	orr.w	r2, r3, #32
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e020      	b.n	8008c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	0c1b      	lsrs	r3, r3, #16
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d10c      	bne.n	8008c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	43da      	mvns	r2, r3
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	bf14      	ite	ne
 8008bfe:	2301      	movne	r3, #1
 8008c00:	2300      	moveq	r3, #0
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	e00b      	b.n	8008c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	43da      	mvns	r2, r3
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	4013      	ands	r3, r2
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	bf14      	ite	ne
 8008c18:	2301      	movne	r3, #1
 8008c1a:	2300      	moveq	r3, #0
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d18d      	bne.n	8008b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c38:	e02d      	b.n	8008c96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f000 f8aa 	bl	8008d94 <I2C_IsAcknowledgeFailed>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d001      	beq.n	8008c4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e02d      	b.n	8008ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c50:	d021      	beq.n	8008c96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c52:	f7fc fbe7 	bl	8005424 <HAL_GetTick>
 8008c56:	4602      	mov	r2, r0
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d302      	bcc.n	8008c68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d116      	bne.n	8008c96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2220      	movs	r2, #32
 8008c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c82:	f043 0220 	orr.w	r2, r3, #32
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e007      	b.n	8008ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	695b      	ldr	r3, [r3, #20]
 8008c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca0:	2b80      	cmp	r3, #128	; 0x80
 8008ca2:	d1ca      	bne.n	8008c3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	60f8      	str	r0, [r7, #12]
 8008cb6:	60b9      	str	r1, [r7, #8]
 8008cb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008cba:	e02d      	b.n	8008d18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 f869 	bl	8008d94 <I2C_IsAcknowledgeFailed>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e02d      	b.n	8008d28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd2:	d021      	beq.n	8008d18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cd4:	f7fc fba6 	bl	8005424 <HAL_GetTick>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d302      	bcc.n	8008cea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d116      	bne.n	8008d18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d04:	f043 0220 	orr.w	r2, r3, #32
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e007      	b.n	8008d28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	f003 0304 	and.w	r3, r3, #4
 8008d22:	2b04      	cmp	r3, #4
 8008d24:	d1ca      	bne.n	8008cbc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008d3c:	4b13      	ldr	r3, [pc, #76]	; (8008d8c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	08db      	lsrs	r3, r3, #3
 8008d42:	4a13      	ldr	r2, [pc, #76]	; (8008d90 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008d44:	fba2 2303 	umull	r2, r3, r2, r3
 8008d48:	0a1a      	lsrs	r2, r3, #8
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	3b01      	subs	r3, #1
 8008d56:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d107      	bne.n	8008d6e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d62:	f043 0220 	orr.w	r2, r3, #32
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e008      	b.n	8008d80 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d7c:	d0e9      	beq.n	8008d52 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	20000250 	.word	0x20000250
 8008d90:	14f8b589 	.word	0x14f8b589

08008d94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008daa:	d11b      	bne.n	8008de4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008db4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2220      	movs	r2, #32
 8008dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd0:	f043 0204 	orr.w	r2, r3, #4
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e000      	b.n	8008de6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008e02:	d103      	bne.n	8008e0c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008e0a:	e007      	b.n	8008e1c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e10:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008e14:	d102      	bne.n	8008e1c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2208      	movs	r2, #8
 8008e1a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008e1c:	bf00      	nop
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e267      	b.n	800930a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d075      	beq.n	8008f32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e46:	4b88      	ldr	r3, [pc, #544]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	f003 030c 	and.w	r3, r3, #12
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d00c      	beq.n	8008e6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e52:	4b85      	ldr	r3, [pc, #532]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e5a:	2b08      	cmp	r3, #8
 8008e5c:	d112      	bne.n	8008e84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e5e:	4b82      	ldr	r3, [pc, #520]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e6a:	d10b      	bne.n	8008e84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e6c:	4b7e      	ldr	r3, [pc, #504]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d05b      	beq.n	8008f30 <HAL_RCC_OscConfig+0x108>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d157      	bne.n	8008f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e242      	b.n	800930a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e8c:	d106      	bne.n	8008e9c <HAL_RCC_OscConfig+0x74>
 8008e8e:	4b76      	ldr	r3, [pc, #472]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a75      	ldr	r2, [pc, #468]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e98:	6013      	str	r3, [r2, #0]
 8008e9a:	e01d      	b.n	8008ed8 <HAL_RCC_OscConfig+0xb0>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ea4:	d10c      	bne.n	8008ec0 <HAL_RCC_OscConfig+0x98>
 8008ea6:	4b70      	ldr	r3, [pc, #448]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a6f      	ldr	r2, [pc, #444]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	4b6d      	ldr	r3, [pc, #436]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a6c      	ldr	r2, [pc, #432]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ebc:	6013      	str	r3, [r2, #0]
 8008ebe:	e00b      	b.n	8008ed8 <HAL_RCC_OscConfig+0xb0>
 8008ec0:	4b69      	ldr	r3, [pc, #420]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a68      	ldr	r2, [pc, #416]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eca:	6013      	str	r3, [r2, #0]
 8008ecc:	4b66      	ldr	r3, [pc, #408]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a65      	ldr	r2, [pc, #404]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d013      	beq.n	8008f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ee0:	f7fc faa0 	bl	8005424 <HAL_GetTick>
 8008ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ee6:	e008      	b.n	8008efa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ee8:	f7fc fa9c 	bl	8005424 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	2b64      	cmp	r3, #100	; 0x64
 8008ef4:	d901      	bls.n	8008efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e207      	b.n	800930a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008efa:	4b5b      	ldr	r3, [pc, #364]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d0f0      	beq.n	8008ee8 <HAL_RCC_OscConfig+0xc0>
 8008f06:	e014      	b.n	8008f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f08:	f7fc fa8c 	bl	8005424 <HAL_GetTick>
 8008f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f0e:	e008      	b.n	8008f22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f10:	f7fc fa88 	bl	8005424 <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	2b64      	cmp	r3, #100	; 0x64
 8008f1c:	d901      	bls.n	8008f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e1f3      	b.n	800930a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f22:	4b51      	ldr	r3, [pc, #324]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1f0      	bne.n	8008f10 <HAL_RCC_OscConfig+0xe8>
 8008f2e:	e000      	b.n	8008f32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d063      	beq.n	8009006 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f3e:	4b4a      	ldr	r3, [pc, #296]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f003 030c 	and.w	r3, r3, #12
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00b      	beq.n	8008f62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f4a:	4b47      	ldr	r3, [pc, #284]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f52:	2b08      	cmp	r3, #8
 8008f54:	d11c      	bne.n	8008f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f56:	4b44      	ldr	r3, [pc, #272]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d116      	bne.n	8008f90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f62:	4b41      	ldr	r3, [pc, #260]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 0302 	and.w	r3, r3, #2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d005      	beq.n	8008f7a <HAL_RCC_OscConfig+0x152>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d001      	beq.n	8008f7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e1c7      	b.n	800930a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f7a:	4b3b      	ldr	r3, [pc, #236]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	00db      	lsls	r3, r3, #3
 8008f88:	4937      	ldr	r1, [pc, #220]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f8e:	e03a      	b.n	8009006 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d020      	beq.n	8008fda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f98:	4b34      	ldr	r3, [pc, #208]	; (800906c <HAL_RCC_OscConfig+0x244>)
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f9e:	f7fc fa41 	bl	8005424 <HAL_GetTick>
 8008fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fa4:	e008      	b.n	8008fb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fa6:	f7fc fa3d 	bl	8005424 <HAL_GetTick>
 8008faa:	4602      	mov	r2, r0
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d901      	bls.n	8008fb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e1a8      	b.n	800930a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fb8:	4b2b      	ldr	r3, [pc, #172]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0302 	and.w	r3, r3, #2
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d0f0      	beq.n	8008fa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fc4:	4b28      	ldr	r3, [pc, #160]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	00db      	lsls	r3, r3, #3
 8008fd2:	4925      	ldr	r1, [pc, #148]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	600b      	str	r3, [r1, #0]
 8008fd8:	e015      	b.n	8009006 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008fda:	4b24      	ldr	r3, [pc, #144]	; (800906c <HAL_RCC_OscConfig+0x244>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe0:	f7fc fa20 	bl	8005424 <HAL_GetTick>
 8008fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fe6:	e008      	b.n	8008ffa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fe8:	f7fc fa1c 	bl	8005424 <HAL_GetTick>
 8008fec:	4602      	mov	r2, r0
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d901      	bls.n	8008ffa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e187      	b.n	800930a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ffa:	4b1b      	ldr	r3, [pc, #108]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 0302 	and.w	r3, r3, #2
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1f0      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 0308 	and.w	r3, r3, #8
 800900e:	2b00      	cmp	r3, #0
 8009010:	d036      	beq.n	8009080 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d016      	beq.n	8009048 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800901a:	4b15      	ldr	r3, [pc, #84]	; (8009070 <HAL_RCC_OscConfig+0x248>)
 800901c:	2201      	movs	r2, #1
 800901e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009020:	f7fc fa00 	bl	8005424 <HAL_GetTick>
 8009024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009026:	e008      	b.n	800903a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009028:	f7fc f9fc 	bl	8005424 <HAL_GetTick>
 800902c:	4602      	mov	r2, r0
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	2b02      	cmp	r3, #2
 8009034:	d901      	bls.n	800903a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	e167      	b.n	800930a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800903a:	4b0b      	ldr	r3, [pc, #44]	; (8009068 <HAL_RCC_OscConfig+0x240>)
 800903c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800903e:	f003 0302 	and.w	r3, r3, #2
 8009042:	2b00      	cmp	r3, #0
 8009044:	d0f0      	beq.n	8009028 <HAL_RCC_OscConfig+0x200>
 8009046:	e01b      	b.n	8009080 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009048:	4b09      	ldr	r3, [pc, #36]	; (8009070 <HAL_RCC_OscConfig+0x248>)
 800904a:	2200      	movs	r2, #0
 800904c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800904e:	f7fc f9e9 	bl	8005424 <HAL_GetTick>
 8009052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009054:	e00e      	b.n	8009074 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009056:	f7fc f9e5 	bl	8005424 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	2b02      	cmp	r3, #2
 8009062:	d907      	bls.n	8009074 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e150      	b.n	800930a <HAL_RCC_OscConfig+0x4e2>
 8009068:	40023800 	.word	0x40023800
 800906c:	42470000 	.word	0x42470000
 8009070:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009074:	4b88      	ldr	r3, [pc, #544]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 8009076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009078:	f003 0302 	and.w	r3, r3, #2
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1ea      	bne.n	8009056 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 0304 	and.w	r3, r3, #4
 8009088:	2b00      	cmp	r3, #0
 800908a:	f000 8097 	beq.w	80091bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800908e:	2300      	movs	r3, #0
 8009090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009092:	4b81      	ldr	r3, [pc, #516]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 8009094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10f      	bne.n	80090be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800909e:	2300      	movs	r3, #0
 80090a0:	60bb      	str	r3, [r7, #8]
 80090a2:	4b7d      	ldr	r3, [pc, #500]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	4a7c      	ldr	r2, [pc, #496]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 80090a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090ac:	6413      	str	r3, [r2, #64]	; 0x40
 80090ae:	4b7a      	ldr	r3, [pc, #488]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 80090b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090b6:	60bb      	str	r3, [r7, #8]
 80090b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80090ba:	2301      	movs	r3, #1
 80090bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090be:	4b77      	ldr	r3, [pc, #476]	; (800929c <HAL_RCC_OscConfig+0x474>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d118      	bne.n	80090fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80090ca:	4b74      	ldr	r3, [pc, #464]	; (800929c <HAL_RCC_OscConfig+0x474>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a73      	ldr	r2, [pc, #460]	; (800929c <HAL_RCC_OscConfig+0x474>)
 80090d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80090d6:	f7fc f9a5 	bl	8005424 <HAL_GetTick>
 80090da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090dc:	e008      	b.n	80090f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090de:	f7fc f9a1 	bl	8005424 <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d901      	bls.n	80090f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e10c      	b.n	800930a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090f0:	4b6a      	ldr	r3, [pc, #424]	; (800929c <HAL_RCC_OscConfig+0x474>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d0f0      	beq.n	80090de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d106      	bne.n	8009112 <HAL_RCC_OscConfig+0x2ea>
 8009104:	4b64      	ldr	r3, [pc, #400]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 8009106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009108:	4a63      	ldr	r2, [pc, #396]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 800910a:	f043 0301 	orr.w	r3, r3, #1
 800910e:	6713      	str	r3, [r2, #112]	; 0x70
 8009110:	e01c      	b.n	800914c <HAL_RCC_OscConfig+0x324>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	2b05      	cmp	r3, #5
 8009118:	d10c      	bne.n	8009134 <HAL_RCC_OscConfig+0x30c>
 800911a:	4b5f      	ldr	r3, [pc, #380]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 800911c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911e:	4a5e      	ldr	r2, [pc, #376]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 8009120:	f043 0304 	orr.w	r3, r3, #4
 8009124:	6713      	str	r3, [r2, #112]	; 0x70
 8009126:	4b5c      	ldr	r3, [pc, #368]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 8009128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912a:	4a5b      	ldr	r2, [pc, #364]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 800912c:	f043 0301 	orr.w	r3, r3, #1
 8009130:	6713      	str	r3, [r2, #112]	; 0x70
 8009132:	e00b      	b.n	800914c <HAL_RCC_OscConfig+0x324>
 8009134:	4b58      	ldr	r3, [pc, #352]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 8009136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009138:	4a57      	ldr	r2, [pc, #348]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 800913a:	f023 0301 	bic.w	r3, r3, #1
 800913e:	6713      	str	r3, [r2, #112]	; 0x70
 8009140:	4b55      	ldr	r3, [pc, #340]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 8009142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009144:	4a54      	ldr	r2, [pc, #336]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 8009146:	f023 0304 	bic.w	r3, r3, #4
 800914a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d015      	beq.n	8009180 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009154:	f7fc f966 	bl	8005424 <HAL_GetTick>
 8009158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800915a:	e00a      	b.n	8009172 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800915c:	f7fc f962 	bl	8005424 <HAL_GetTick>
 8009160:	4602      	mov	r2, r0
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	f241 3288 	movw	r2, #5000	; 0x1388
 800916a:	4293      	cmp	r3, r2
 800916c:	d901      	bls.n	8009172 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800916e:	2303      	movs	r3, #3
 8009170:	e0cb      	b.n	800930a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009172:	4b49      	ldr	r3, [pc, #292]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 8009174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009176:	f003 0302 	and.w	r3, r3, #2
 800917a:	2b00      	cmp	r3, #0
 800917c:	d0ee      	beq.n	800915c <HAL_RCC_OscConfig+0x334>
 800917e:	e014      	b.n	80091aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009180:	f7fc f950 	bl	8005424 <HAL_GetTick>
 8009184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009186:	e00a      	b.n	800919e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009188:	f7fc f94c 	bl	8005424 <HAL_GetTick>
 800918c:	4602      	mov	r2, r0
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	f241 3288 	movw	r2, #5000	; 0x1388
 8009196:	4293      	cmp	r3, r2
 8009198:	d901      	bls.n	800919e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e0b5      	b.n	800930a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800919e:	4b3e      	ldr	r3, [pc, #248]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 80091a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a2:	f003 0302 	and.w	r3, r3, #2
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1ee      	bne.n	8009188 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80091aa:	7dfb      	ldrb	r3, [r7, #23]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d105      	bne.n	80091bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091b0:	4b39      	ldr	r3, [pc, #228]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 80091b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b4:	4a38      	ldr	r2, [pc, #224]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 80091b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 80a1 	beq.w	8009308 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80091c6:	4b34      	ldr	r3, [pc, #208]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	f003 030c 	and.w	r3, r3, #12
 80091ce:	2b08      	cmp	r3, #8
 80091d0:	d05c      	beq.n	800928c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d141      	bne.n	800925e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091da:	4b31      	ldr	r3, [pc, #196]	; (80092a0 <HAL_RCC_OscConfig+0x478>)
 80091dc:	2200      	movs	r2, #0
 80091de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091e0:	f7fc f920 	bl	8005424 <HAL_GetTick>
 80091e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091e6:	e008      	b.n	80091fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091e8:	f7fc f91c 	bl	8005424 <HAL_GetTick>
 80091ec:	4602      	mov	r2, r0
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d901      	bls.n	80091fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e087      	b.n	800930a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091fa:	4b27      	ldr	r3, [pc, #156]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1f0      	bne.n	80091e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	69da      	ldr	r2, [r3, #28]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a1b      	ldr	r3, [r3, #32]
 800920e:	431a      	orrs	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009214:	019b      	lsls	r3, r3, #6
 8009216:	431a      	orrs	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921c:	085b      	lsrs	r3, r3, #1
 800921e:	3b01      	subs	r3, #1
 8009220:	041b      	lsls	r3, r3, #16
 8009222:	431a      	orrs	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009228:	061b      	lsls	r3, r3, #24
 800922a:	491b      	ldr	r1, [pc, #108]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 800922c:	4313      	orrs	r3, r2
 800922e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009230:	4b1b      	ldr	r3, [pc, #108]	; (80092a0 <HAL_RCC_OscConfig+0x478>)
 8009232:	2201      	movs	r2, #1
 8009234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009236:	f7fc f8f5 	bl	8005424 <HAL_GetTick>
 800923a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800923c:	e008      	b.n	8009250 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800923e:	f7fc f8f1 	bl	8005424 <HAL_GetTick>
 8009242:	4602      	mov	r2, r0
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	2b02      	cmp	r3, #2
 800924a:	d901      	bls.n	8009250 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800924c:	2303      	movs	r3, #3
 800924e:	e05c      	b.n	800930a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009250:	4b11      	ldr	r3, [pc, #68]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009258:	2b00      	cmp	r3, #0
 800925a:	d0f0      	beq.n	800923e <HAL_RCC_OscConfig+0x416>
 800925c:	e054      	b.n	8009308 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800925e:	4b10      	ldr	r3, [pc, #64]	; (80092a0 <HAL_RCC_OscConfig+0x478>)
 8009260:	2200      	movs	r2, #0
 8009262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009264:	f7fc f8de 	bl	8005424 <HAL_GetTick>
 8009268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800926a:	e008      	b.n	800927e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800926c:	f7fc f8da 	bl	8005424 <HAL_GetTick>
 8009270:	4602      	mov	r2, r0
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	2b02      	cmp	r3, #2
 8009278:	d901      	bls.n	800927e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800927a:	2303      	movs	r3, #3
 800927c:	e045      	b.n	800930a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800927e:	4b06      	ldr	r3, [pc, #24]	; (8009298 <HAL_RCC_OscConfig+0x470>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1f0      	bne.n	800926c <HAL_RCC_OscConfig+0x444>
 800928a:	e03d      	b.n	8009308 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d107      	bne.n	80092a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	e038      	b.n	800930a <HAL_RCC_OscConfig+0x4e2>
 8009298:	40023800 	.word	0x40023800
 800929c:	40007000 	.word	0x40007000
 80092a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80092a4:	4b1b      	ldr	r3, [pc, #108]	; (8009314 <HAL_RCC_OscConfig+0x4ec>)
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d028      	beq.n	8009304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092bc:	429a      	cmp	r2, r3
 80092be:	d121      	bne.n	8009304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d11a      	bne.n	8009304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80092d4:	4013      	ands	r3, r2
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80092da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80092dc:	4293      	cmp	r3, r2
 80092de:	d111      	bne.n	8009304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ea:	085b      	lsrs	r3, r3, #1
 80092ec:	3b01      	subs	r3, #1
 80092ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d107      	bne.n	8009304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009300:	429a      	cmp	r2, r3
 8009302:	d001      	beq.n	8009308 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	e000      	b.n	800930a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3718      	adds	r7, #24
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	40023800 	.word	0x40023800

08009318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e0cc      	b.n	80094c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800932c:	4b68      	ldr	r3, [pc, #416]	; (80094d0 <HAL_RCC_ClockConfig+0x1b8>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 0307 	and.w	r3, r3, #7
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	429a      	cmp	r2, r3
 8009338:	d90c      	bls.n	8009354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800933a:	4b65      	ldr	r3, [pc, #404]	; (80094d0 <HAL_RCC_ClockConfig+0x1b8>)
 800933c:	683a      	ldr	r2, [r7, #0]
 800933e:	b2d2      	uxtb	r2, r2
 8009340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009342:	4b63      	ldr	r3, [pc, #396]	; (80094d0 <HAL_RCC_ClockConfig+0x1b8>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 0307 	and.w	r3, r3, #7
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	429a      	cmp	r2, r3
 800934e:	d001      	beq.n	8009354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	e0b8      	b.n	80094c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 0302 	and.w	r3, r3, #2
 800935c:	2b00      	cmp	r3, #0
 800935e:	d020      	beq.n	80093a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 0304 	and.w	r3, r3, #4
 8009368:	2b00      	cmp	r3, #0
 800936a:	d005      	beq.n	8009378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800936c:	4b59      	ldr	r3, [pc, #356]	; (80094d4 <HAL_RCC_ClockConfig+0x1bc>)
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	4a58      	ldr	r2, [pc, #352]	; (80094d4 <HAL_RCC_ClockConfig+0x1bc>)
 8009372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0308 	and.w	r3, r3, #8
 8009380:	2b00      	cmp	r3, #0
 8009382:	d005      	beq.n	8009390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009384:	4b53      	ldr	r3, [pc, #332]	; (80094d4 <HAL_RCC_ClockConfig+0x1bc>)
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	4a52      	ldr	r2, [pc, #328]	; (80094d4 <HAL_RCC_ClockConfig+0x1bc>)
 800938a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800938e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009390:	4b50      	ldr	r3, [pc, #320]	; (80094d4 <HAL_RCC_ClockConfig+0x1bc>)
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	494d      	ldr	r1, [pc, #308]	; (80094d4 <HAL_RCC_ClockConfig+0x1bc>)
 800939e:	4313      	orrs	r3, r2
 80093a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d044      	beq.n	8009438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d107      	bne.n	80093c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093b6:	4b47      	ldr	r3, [pc, #284]	; (80094d4 <HAL_RCC_ClockConfig+0x1bc>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d119      	bne.n	80093f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e07f      	b.n	80094c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d003      	beq.n	80093d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d107      	bne.n	80093e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093d6:	4b3f      	ldr	r3, [pc, #252]	; (80094d4 <HAL_RCC_ClockConfig+0x1bc>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d109      	bne.n	80093f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e06f      	b.n	80094c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093e6:	4b3b      	ldr	r3, [pc, #236]	; (80094d4 <HAL_RCC_ClockConfig+0x1bc>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 0302 	and.w	r3, r3, #2
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d101      	bne.n	80093f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e067      	b.n	80094c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80093f6:	4b37      	ldr	r3, [pc, #220]	; (80094d4 <HAL_RCC_ClockConfig+0x1bc>)
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f023 0203 	bic.w	r2, r3, #3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	4934      	ldr	r1, [pc, #208]	; (80094d4 <HAL_RCC_ClockConfig+0x1bc>)
 8009404:	4313      	orrs	r3, r2
 8009406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009408:	f7fc f80c 	bl	8005424 <HAL_GetTick>
 800940c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800940e:	e00a      	b.n	8009426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009410:	f7fc f808 	bl	8005424 <HAL_GetTick>
 8009414:	4602      	mov	r2, r0
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	f241 3288 	movw	r2, #5000	; 0x1388
 800941e:	4293      	cmp	r3, r2
 8009420:	d901      	bls.n	8009426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009422:	2303      	movs	r3, #3
 8009424:	e04f      	b.n	80094c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009426:	4b2b      	ldr	r3, [pc, #172]	; (80094d4 <HAL_RCC_ClockConfig+0x1bc>)
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	f003 020c 	and.w	r2, r3, #12
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	429a      	cmp	r2, r3
 8009436:	d1eb      	bne.n	8009410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009438:	4b25      	ldr	r3, [pc, #148]	; (80094d0 <HAL_RCC_ClockConfig+0x1b8>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 0307 	and.w	r3, r3, #7
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	429a      	cmp	r2, r3
 8009444:	d20c      	bcs.n	8009460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009446:	4b22      	ldr	r3, [pc, #136]	; (80094d0 <HAL_RCC_ClockConfig+0x1b8>)
 8009448:	683a      	ldr	r2, [r7, #0]
 800944a:	b2d2      	uxtb	r2, r2
 800944c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800944e:	4b20      	ldr	r3, [pc, #128]	; (80094d0 <HAL_RCC_ClockConfig+0x1b8>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f003 0307 	and.w	r3, r3, #7
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	429a      	cmp	r2, r3
 800945a:	d001      	beq.n	8009460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	e032      	b.n	80094c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 0304 	and.w	r3, r3, #4
 8009468:	2b00      	cmp	r3, #0
 800946a:	d008      	beq.n	800947e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800946c:	4b19      	ldr	r3, [pc, #100]	; (80094d4 <HAL_RCC_ClockConfig+0x1bc>)
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	4916      	ldr	r1, [pc, #88]	; (80094d4 <HAL_RCC_ClockConfig+0x1bc>)
 800947a:	4313      	orrs	r3, r2
 800947c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 0308 	and.w	r3, r3, #8
 8009486:	2b00      	cmp	r3, #0
 8009488:	d009      	beq.n	800949e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800948a:	4b12      	ldr	r3, [pc, #72]	; (80094d4 <HAL_RCC_ClockConfig+0x1bc>)
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	00db      	lsls	r3, r3, #3
 8009498:	490e      	ldr	r1, [pc, #56]	; (80094d4 <HAL_RCC_ClockConfig+0x1bc>)
 800949a:	4313      	orrs	r3, r2
 800949c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800949e:	f000 f821 	bl	80094e4 <HAL_RCC_GetSysClockFreq>
 80094a2:	4602      	mov	r2, r0
 80094a4:	4b0b      	ldr	r3, [pc, #44]	; (80094d4 <HAL_RCC_ClockConfig+0x1bc>)
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	091b      	lsrs	r3, r3, #4
 80094aa:	f003 030f 	and.w	r3, r3, #15
 80094ae:	490a      	ldr	r1, [pc, #40]	; (80094d8 <HAL_RCC_ClockConfig+0x1c0>)
 80094b0:	5ccb      	ldrb	r3, [r1, r3]
 80094b2:	fa22 f303 	lsr.w	r3, r2, r3
 80094b6:	4a09      	ldr	r2, [pc, #36]	; (80094dc <HAL_RCC_ClockConfig+0x1c4>)
 80094b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80094ba:	4b09      	ldr	r3, [pc, #36]	; (80094e0 <HAL_RCC_ClockConfig+0x1c8>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fb ff6c 	bl	800539c <HAL_InitTick>

  return HAL_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	40023c00 	.word	0x40023c00
 80094d4:	40023800 	.word	0x40023800
 80094d8:	0801141c 	.word	0x0801141c
 80094dc:	20000250 	.word	0x20000250
 80094e0:	20000254 	.word	0x20000254

080094e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094e8:	b094      	sub	sp, #80	; 0x50
 80094ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80094ec:	2300      	movs	r3, #0
 80094ee:	647b      	str	r3, [r7, #68]	; 0x44
 80094f0:	2300      	movs	r3, #0
 80094f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094f4:	2300      	movs	r3, #0
 80094f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80094f8:	2300      	movs	r3, #0
 80094fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094fc:	4b79      	ldr	r3, [pc, #484]	; (80096e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f003 030c 	and.w	r3, r3, #12
 8009504:	2b08      	cmp	r3, #8
 8009506:	d00d      	beq.n	8009524 <HAL_RCC_GetSysClockFreq+0x40>
 8009508:	2b08      	cmp	r3, #8
 800950a:	f200 80e1 	bhi.w	80096d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800950e:	2b00      	cmp	r3, #0
 8009510:	d002      	beq.n	8009518 <HAL_RCC_GetSysClockFreq+0x34>
 8009512:	2b04      	cmp	r3, #4
 8009514:	d003      	beq.n	800951e <HAL_RCC_GetSysClockFreq+0x3a>
 8009516:	e0db      	b.n	80096d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009518:	4b73      	ldr	r3, [pc, #460]	; (80096e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800951a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800951c:	e0db      	b.n	80096d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800951e:	4b73      	ldr	r3, [pc, #460]	; (80096ec <HAL_RCC_GetSysClockFreq+0x208>)
 8009520:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009522:	e0d8      	b.n	80096d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009524:	4b6f      	ldr	r3, [pc, #444]	; (80096e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800952c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800952e:	4b6d      	ldr	r3, [pc, #436]	; (80096e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009536:	2b00      	cmp	r3, #0
 8009538:	d063      	beq.n	8009602 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800953a:	4b6a      	ldr	r3, [pc, #424]	; (80096e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	099b      	lsrs	r3, r3, #6
 8009540:	2200      	movs	r2, #0
 8009542:	63bb      	str	r3, [r7, #56]	; 0x38
 8009544:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800954c:	633b      	str	r3, [r7, #48]	; 0x30
 800954e:	2300      	movs	r3, #0
 8009550:	637b      	str	r3, [r7, #52]	; 0x34
 8009552:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009556:	4622      	mov	r2, r4
 8009558:	462b      	mov	r3, r5
 800955a:	f04f 0000 	mov.w	r0, #0
 800955e:	f04f 0100 	mov.w	r1, #0
 8009562:	0159      	lsls	r1, r3, #5
 8009564:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009568:	0150      	lsls	r0, r2, #5
 800956a:	4602      	mov	r2, r0
 800956c:	460b      	mov	r3, r1
 800956e:	4621      	mov	r1, r4
 8009570:	1a51      	subs	r1, r2, r1
 8009572:	6139      	str	r1, [r7, #16]
 8009574:	4629      	mov	r1, r5
 8009576:	eb63 0301 	sbc.w	r3, r3, r1
 800957a:	617b      	str	r3, [r7, #20]
 800957c:	f04f 0200 	mov.w	r2, #0
 8009580:	f04f 0300 	mov.w	r3, #0
 8009584:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009588:	4659      	mov	r1, fp
 800958a:	018b      	lsls	r3, r1, #6
 800958c:	4651      	mov	r1, sl
 800958e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009592:	4651      	mov	r1, sl
 8009594:	018a      	lsls	r2, r1, #6
 8009596:	4651      	mov	r1, sl
 8009598:	ebb2 0801 	subs.w	r8, r2, r1
 800959c:	4659      	mov	r1, fp
 800959e:	eb63 0901 	sbc.w	r9, r3, r1
 80095a2:	f04f 0200 	mov.w	r2, #0
 80095a6:	f04f 0300 	mov.w	r3, #0
 80095aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80095b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80095b6:	4690      	mov	r8, r2
 80095b8:	4699      	mov	r9, r3
 80095ba:	4623      	mov	r3, r4
 80095bc:	eb18 0303 	adds.w	r3, r8, r3
 80095c0:	60bb      	str	r3, [r7, #8]
 80095c2:	462b      	mov	r3, r5
 80095c4:	eb49 0303 	adc.w	r3, r9, r3
 80095c8:	60fb      	str	r3, [r7, #12]
 80095ca:	f04f 0200 	mov.w	r2, #0
 80095ce:	f04f 0300 	mov.w	r3, #0
 80095d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80095d6:	4629      	mov	r1, r5
 80095d8:	024b      	lsls	r3, r1, #9
 80095da:	4621      	mov	r1, r4
 80095dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80095e0:	4621      	mov	r1, r4
 80095e2:	024a      	lsls	r2, r1, #9
 80095e4:	4610      	mov	r0, r2
 80095e6:	4619      	mov	r1, r3
 80095e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ea:	2200      	movs	r2, #0
 80095ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80095ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095f4:	f7f7 fb50 	bl	8000c98 <__aeabi_uldivmod>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4613      	mov	r3, r2
 80095fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009600:	e058      	b.n	80096b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009602:	4b38      	ldr	r3, [pc, #224]	; (80096e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	099b      	lsrs	r3, r3, #6
 8009608:	2200      	movs	r2, #0
 800960a:	4618      	mov	r0, r3
 800960c:	4611      	mov	r1, r2
 800960e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009612:	623b      	str	r3, [r7, #32]
 8009614:	2300      	movs	r3, #0
 8009616:	627b      	str	r3, [r7, #36]	; 0x24
 8009618:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800961c:	4642      	mov	r2, r8
 800961e:	464b      	mov	r3, r9
 8009620:	f04f 0000 	mov.w	r0, #0
 8009624:	f04f 0100 	mov.w	r1, #0
 8009628:	0159      	lsls	r1, r3, #5
 800962a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800962e:	0150      	lsls	r0, r2, #5
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	4641      	mov	r1, r8
 8009636:	ebb2 0a01 	subs.w	sl, r2, r1
 800963a:	4649      	mov	r1, r9
 800963c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009640:	f04f 0200 	mov.w	r2, #0
 8009644:	f04f 0300 	mov.w	r3, #0
 8009648:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800964c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009650:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009654:	ebb2 040a 	subs.w	r4, r2, sl
 8009658:	eb63 050b 	sbc.w	r5, r3, fp
 800965c:	f04f 0200 	mov.w	r2, #0
 8009660:	f04f 0300 	mov.w	r3, #0
 8009664:	00eb      	lsls	r3, r5, #3
 8009666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800966a:	00e2      	lsls	r2, r4, #3
 800966c:	4614      	mov	r4, r2
 800966e:	461d      	mov	r5, r3
 8009670:	4643      	mov	r3, r8
 8009672:	18e3      	adds	r3, r4, r3
 8009674:	603b      	str	r3, [r7, #0]
 8009676:	464b      	mov	r3, r9
 8009678:	eb45 0303 	adc.w	r3, r5, r3
 800967c:	607b      	str	r3, [r7, #4]
 800967e:	f04f 0200 	mov.w	r2, #0
 8009682:	f04f 0300 	mov.w	r3, #0
 8009686:	e9d7 4500 	ldrd	r4, r5, [r7]
 800968a:	4629      	mov	r1, r5
 800968c:	028b      	lsls	r3, r1, #10
 800968e:	4621      	mov	r1, r4
 8009690:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009694:	4621      	mov	r1, r4
 8009696:	028a      	lsls	r2, r1, #10
 8009698:	4610      	mov	r0, r2
 800969a:	4619      	mov	r1, r3
 800969c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800969e:	2200      	movs	r2, #0
 80096a0:	61bb      	str	r3, [r7, #24]
 80096a2:	61fa      	str	r2, [r7, #28]
 80096a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80096a8:	f7f7 faf6 	bl	8000c98 <__aeabi_uldivmod>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4613      	mov	r3, r2
 80096b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80096b4:	4b0b      	ldr	r3, [pc, #44]	; (80096e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	0c1b      	lsrs	r3, r3, #16
 80096ba:	f003 0303 	and.w	r3, r3, #3
 80096be:	3301      	adds	r3, #1
 80096c0:	005b      	lsls	r3, r3, #1
 80096c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80096c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80096cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80096ce:	e002      	b.n	80096d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80096d0:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80096d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80096d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80096d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3750      	adds	r7, #80	; 0x50
 80096dc:	46bd      	mov	sp, r7
 80096de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096e2:	bf00      	nop
 80096e4:	40023800 	.word	0x40023800
 80096e8:	00f42400 	.word	0x00f42400
 80096ec:	007a1200 	.word	0x007a1200

080096f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096f0:	b480      	push	{r7}
 80096f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80096f4:	4b03      	ldr	r3, [pc, #12]	; (8009704 <HAL_RCC_GetHCLKFreq+0x14>)
 80096f6:	681b      	ldr	r3, [r3, #0]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	20000250 	.word	0x20000250

08009708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800970c:	f7ff fff0 	bl	80096f0 <HAL_RCC_GetHCLKFreq>
 8009710:	4602      	mov	r2, r0
 8009712:	4b05      	ldr	r3, [pc, #20]	; (8009728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	0a9b      	lsrs	r3, r3, #10
 8009718:	f003 0307 	and.w	r3, r3, #7
 800971c:	4903      	ldr	r1, [pc, #12]	; (800972c <HAL_RCC_GetPCLK1Freq+0x24>)
 800971e:	5ccb      	ldrb	r3, [r1, r3]
 8009720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009724:	4618      	mov	r0, r3
 8009726:	bd80      	pop	{r7, pc}
 8009728:	40023800 	.word	0x40023800
 800972c:	0801142c 	.word	0x0801142c

08009730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009734:	f7ff ffdc 	bl	80096f0 <HAL_RCC_GetHCLKFreq>
 8009738:	4602      	mov	r2, r0
 800973a:	4b05      	ldr	r3, [pc, #20]	; (8009750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	0b5b      	lsrs	r3, r3, #13
 8009740:	f003 0307 	and.w	r3, r3, #7
 8009744:	4903      	ldr	r1, [pc, #12]	; (8009754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009746:	5ccb      	ldrb	r3, [r1, r3]
 8009748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800974c:	4618      	mov	r0, r3
 800974e:	bd80      	pop	{r7, pc}
 8009750:	40023800 	.word	0x40023800
 8009754:	0801142c 	.word	0x0801142c

08009758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d101      	bne.n	800976a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e04c      	b.n	8009804 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009770:	b2db      	uxtb	r3, r3
 8009772:	2b00      	cmp	r3, #0
 8009774:	d111      	bne.n	800979a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f001 fc32 	bl	800afe8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009788:	2b00      	cmp	r3, #0
 800978a:	d102      	bne.n	8009792 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a1f      	ldr	r2, [pc, #124]	; (800980c <HAL_TIM_Base_Init+0xb4>)
 8009790:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2202      	movs	r2, #2
 800979e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	3304      	adds	r3, #4
 80097aa:	4619      	mov	r1, r3
 80097ac:	4610      	mov	r0, r2
 80097ae:	f001 f94f 	bl	800aa50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	08004d69 	.word	0x08004d69

08009810 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800981e:	b2db      	uxtb	r3, r3
 8009820:	2b01      	cmp	r3, #1
 8009822:	d001      	beq.n	8009828 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	e03c      	b.n	80098a2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2202      	movs	r2, #2
 800982c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a1e      	ldr	r2, [pc, #120]	; (80098b0 <HAL_TIM_Base_Start+0xa0>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d018      	beq.n	800986c <HAL_TIM_Base_Start+0x5c>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009842:	d013      	beq.n	800986c <HAL_TIM_Base_Start+0x5c>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a1a      	ldr	r2, [pc, #104]	; (80098b4 <HAL_TIM_Base_Start+0xa4>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d00e      	beq.n	800986c <HAL_TIM_Base_Start+0x5c>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a19      	ldr	r2, [pc, #100]	; (80098b8 <HAL_TIM_Base_Start+0xa8>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d009      	beq.n	800986c <HAL_TIM_Base_Start+0x5c>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a17      	ldr	r2, [pc, #92]	; (80098bc <HAL_TIM_Base_Start+0xac>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d004      	beq.n	800986c <HAL_TIM_Base_Start+0x5c>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a16      	ldr	r2, [pc, #88]	; (80098c0 <HAL_TIM_Base_Start+0xb0>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d111      	bne.n	8009890 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	f003 0307 	and.w	r3, r3, #7
 8009876:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2b06      	cmp	r3, #6
 800987c:	d010      	beq.n	80098a0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f042 0201 	orr.w	r2, r2, #1
 800988c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800988e:	e007      	b.n	80098a0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f042 0201 	orr.w	r2, r2, #1
 800989e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	40010000 	.word	0x40010000
 80098b4:	40000400 	.word	0x40000400
 80098b8:	40000800 	.word	0x40000800
 80098bc:	40000c00 	.word	0x40000c00
 80098c0:	40014000 	.word	0x40014000

080098c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d001      	beq.n	80098dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	e044      	b.n	8009966 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2202      	movs	r2, #2
 80098e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68da      	ldr	r2, [r3, #12]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f042 0201 	orr.w	r2, r2, #1
 80098f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a1e      	ldr	r2, [pc, #120]	; (8009974 <HAL_TIM_Base_Start_IT+0xb0>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d018      	beq.n	8009930 <HAL_TIM_Base_Start_IT+0x6c>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009906:	d013      	beq.n	8009930 <HAL_TIM_Base_Start_IT+0x6c>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a1a      	ldr	r2, [pc, #104]	; (8009978 <HAL_TIM_Base_Start_IT+0xb4>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d00e      	beq.n	8009930 <HAL_TIM_Base_Start_IT+0x6c>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a19      	ldr	r2, [pc, #100]	; (800997c <HAL_TIM_Base_Start_IT+0xb8>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d009      	beq.n	8009930 <HAL_TIM_Base_Start_IT+0x6c>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a17      	ldr	r2, [pc, #92]	; (8009980 <HAL_TIM_Base_Start_IT+0xbc>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d004      	beq.n	8009930 <HAL_TIM_Base_Start_IT+0x6c>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a16      	ldr	r2, [pc, #88]	; (8009984 <HAL_TIM_Base_Start_IT+0xc0>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d111      	bne.n	8009954 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f003 0307 	and.w	r3, r3, #7
 800993a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2b06      	cmp	r3, #6
 8009940:	d010      	beq.n	8009964 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f042 0201 	orr.w	r2, r2, #1
 8009950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009952:	e007      	b.n	8009964 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f042 0201 	orr.w	r2, r2, #1
 8009962:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	40010000 	.word	0x40010000
 8009978:	40000400 	.word	0x40000400
 800997c:	40000800 	.word	0x40000800
 8009980:	40000c00 	.word	0x40000c00
 8009984:	40014000 	.word	0x40014000

08009988 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68da      	ldr	r2, [r3, #12]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f022 0201 	bic.w	r2, r2, #1
 800999e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6a1a      	ldr	r2, [r3, #32]
 80099a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80099aa:	4013      	ands	r3, r2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d10f      	bne.n	80099d0 <HAL_TIM_Base_Stop_IT+0x48>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6a1a      	ldr	r2, [r3, #32]
 80099b6:	f240 4344 	movw	r3, #1092	; 0x444
 80099ba:	4013      	ands	r3, r2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d107      	bne.n	80099d0 <HAL_TIM_Base_Stop_IT+0x48>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f022 0201 	bic.w	r2, r2, #1
 80099ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
	...

080099e8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e04c      	b.n	8009a94 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d111      	bne.n	8009a2a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f001 faea 	bl	800afe8 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d102      	bne.n	8009a22 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a1f      	ldr	r2, [pc, #124]	; (8009a9c <HAL_TIM_OC_Init+0xb4>)
 8009a20:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2202      	movs	r2, #2
 8009a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	3304      	adds	r3, #4
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	f001 f807 	bl	800aa50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2201      	movs	r2, #1
 8009a56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2201      	movs	r2, #1
 8009a76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	08009aa1 	.word	0x08009aa1

08009aa0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d101      	bne.n	8009ac6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e04c      	b.n	8009b60 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d111      	bne.n	8009af6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f001 fa84 	bl	800afe8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d102      	bne.n	8009aee <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a1f      	ldr	r2, [pc, #124]	; (8009b68 <HAL_TIM_PWM_Init+0xb4>)
 8009aec:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2202      	movs	r2, #2
 8009afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3304      	adds	r3, #4
 8009b06:	4619      	mov	r1, r3
 8009b08:	4610      	mov	r0, r2
 8009b0a:	f000 ffa1 	bl	800aa50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2201      	movs	r2, #1
 8009b22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	08004c79 	.word	0x08004c79

08009b6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d109      	bne.n	8009b90 <HAL_TIM_PWM_Start+0x24>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	bf14      	ite	ne
 8009b88:	2301      	movne	r3, #1
 8009b8a:	2300      	moveq	r3, #0
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	e022      	b.n	8009bd6 <HAL_TIM_PWM_Start+0x6a>
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	2b04      	cmp	r3, #4
 8009b94:	d109      	bne.n	8009baa <HAL_TIM_PWM_Start+0x3e>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	bf14      	ite	ne
 8009ba2:	2301      	movne	r3, #1
 8009ba4:	2300      	moveq	r3, #0
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	e015      	b.n	8009bd6 <HAL_TIM_PWM_Start+0x6a>
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	2b08      	cmp	r3, #8
 8009bae:	d109      	bne.n	8009bc4 <HAL_TIM_PWM_Start+0x58>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	bf14      	ite	ne
 8009bbc:	2301      	movne	r3, #1
 8009bbe:	2300      	moveq	r3, #0
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	e008      	b.n	8009bd6 <HAL_TIM_PWM_Start+0x6a>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	bf14      	ite	ne
 8009bd0:	2301      	movne	r3, #1
 8009bd2:	2300      	moveq	r3, #0
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d001      	beq.n	8009bde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e068      	b.n	8009cb0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d104      	bne.n	8009bee <HAL_TIM_PWM_Start+0x82>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2202      	movs	r2, #2
 8009be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bec:	e013      	b.n	8009c16 <HAL_TIM_PWM_Start+0xaa>
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	2b04      	cmp	r3, #4
 8009bf2:	d104      	bne.n	8009bfe <HAL_TIM_PWM_Start+0x92>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2202      	movs	r2, #2
 8009bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bfc:	e00b      	b.n	8009c16 <HAL_TIM_PWM_Start+0xaa>
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	2b08      	cmp	r3, #8
 8009c02:	d104      	bne.n	8009c0e <HAL_TIM_PWM_Start+0xa2>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2202      	movs	r2, #2
 8009c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c0c:	e003      	b.n	8009c16 <HAL_TIM_PWM_Start+0xaa>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2202      	movs	r2, #2
 8009c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f001 f9bc 	bl	800af9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a23      	ldr	r2, [pc, #140]	; (8009cb8 <HAL_TIM_PWM_Start+0x14c>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d107      	bne.n	8009c3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a1d      	ldr	r2, [pc, #116]	; (8009cb8 <HAL_TIM_PWM_Start+0x14c>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d018      	beq.n	8009c7a <HAL_TIM_PWM_Start+0x10e>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c50:	d013      	beq.n	8009c7a <HAL_TIM_PWM_Start+0x10e>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a19      	ldr	r2, [pc, #100]	; (8009cbc <HAL_TIM_PWM_Start+0x150>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d00e      	beq.n	8009c7a <HAL_TIM_PWM_Start+0x10e>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a17      	ldr	r2, [pc, #92]	; (8009cc0 <HAL_TIM_PWM_Start+0x154>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d009      	beq.n	8009c7a <HAL_TIM_PWM_Start+0x10e>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a16      	ldr	r2, [pc, #88]	; (8009cc4 <HAL_TIM_PWM_Start+0x158>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d004      	beq.n	8009c7a <HAL_TIM_PWM_Start+0x10e>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a14      	ldr	r2, [pc, #80]	; (8009cc8 <HAL_TIM_PWM_Start+0x15c>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d111      	bne.n	8009c9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	f003 0307 	and.w	r3, r3, #7
 8009c84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2b06      	cmp	r3, #6
 8009c8a:	d010      	beq.n	8009cae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f042 0201 	orr.w	r2, r2, #1
 8009c9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c9c:	e007      	b.n	8009cae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f042 0201 	orr.w	r2, r2, #1
 8009cac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	40010000 	.word	0x40010000
 8009cbc:	40000400 	.word	0x40000400
 8009cc0:	40000800 	.word	0x40000800
 8009cc4:	40000c00 	.word	0x40000c00
 8009cc8:	40014000 	.word	0x40014000

08009ccc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d101      	bne.n	8009ce0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e04c      	b.n	8009d7a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d111      	bne.n	8009d10 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f001 f977 	bl	800afe8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d102      	bne.n	8009d08 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a1f      	ldr	r2, [pc, #124]	; (8009d84 <HAL_TIM_OnePulse_Init+0xb8>)
 8009d06:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2202      	movs	r2, #2
 8009d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	3304      	adds	r3, #4
 8009d20:	4619      	mov	r1, r3
 8009d22:	4610      	mov	r0, r2
 8009d24:	f000 fe94 	bl	800aa50 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f022 0208 	bic.w	r2, r2, #8
 8009d36:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	6819      	ldr	r1, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	430a      	orrs	r2, r1
 8009d46:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	08009d89 	.word	0x08009d89

08009d88 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009dac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009db4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009dbc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009dc4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d108      	bne.n	8009dde <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009dcc:	7bbb      	ldrb	r3, [r7, #14]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d105      	bne.n	8009dde <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009dd2:	7b7b      	ldrb	r3, [r7, #13]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d102      	bne.n	8009dde <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009dd8:	7b3b      	ldrb	r3, [r7, #12]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d001      	beq.n	8009de2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e03b      	b.n	8009e5a <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2202      	movs	r2, #2
 8009de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2202      	movs	r2, #2
 8009dee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2202      	movs	r2, #2
 8009df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	68da      	ldr	r2, [r3, #12]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f042 0202 	orr.w	r2, r2, #2
 8009e10:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68da      	ldr	r2, [r3, #12]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f042 0204 	orr.w	r2, r2, #4
 8009e20:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2201      	movs	r2, #1
 8009e28:	2100      	movs	r1, #0
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f001 f8b6 	bl	800af9c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2201      	movs	r2, #1
 8009e36:	2104      	movs	r1, #4
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f001 f8af 	bl	800af9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a08      	ldr	r2, [pc, #32]	; (8009e64 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d107      	bne.n	8009e58 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	40010000 	.word	0x40010000

08009e68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d101      	bne.n	8009e7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e0a2      	b.n	8009fc2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d111      	bne.n	8009eac <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f001 f8a9 	bl	800afe8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d102      	bne.n	8009ea4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a4a      	ldr	r2, [pc, #296]	; (8009fcc <HAL_TIM_Encoder_Init+0x164>)
 8009ea2:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	6812      	ldr	r2, [r2, #0]
 8009ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ec2:	f023 0307 	bic.w	r3, r3, #7
 8009ec6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	3304      	adds	r3, #4
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4610      	mov	r0, r2
 8009ed4:	f000 fdbc 	bl	800aa50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6a1b      	ldr	r3, [r3, #32]
 8009eee:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	697a      	ldr	r2, [r7, #20]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f00:	f023 0303 	bic.w	r3, r3, #3
 8009f04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	689a      	ldr	r2, [r3, #8]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	699b      	ldr	r3, [r3, #24]
 8009f0e:	021b      	lsls	r3, r3, #8
 8009f10:	4313      	orrs	r3, r2
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009f1e:	f023 030c 	bic.w	r3, r3, #12
 8009f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	68da      	ldr	r2, [r3, #12]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	69db      	ldr	r3, [r3, #28]
 8009f38:	021b      	lsls	r3, r3, #8
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	693a      	ldr	r2, [r7, #16]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	011a      	lsls	r2, r3, #4
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	6a1b      	ldr	r3, [r3, #32]
 8009f4c:	031b      	lsls	r3, r3, #12
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009f5c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009f64:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	685a      	ldr	r2, [r3, #4]
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	011b      	lsls	r3, r3, #4
 8009f70:	4313      	orrs	r3, r2
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	697a      	ldr	r2, [r7, #20]
 8009f7e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3718      	adds	r7, #24
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	08004cd9 	.word	0x08004cd9

08009fd0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fe0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009fe8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009ff0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009ff8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d110      	bne.n	800a022 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a000:	7bfb      	ldrb	r3, [r7, #15]
 800a002:	2b01      	cmp	r3, #1
 800a004:	d102      	bne.n	800a00c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a006:	7b7b      	ldrb	r3, [r7, #13]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d001      	beq.n	800a010 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a00c:	2301      	movs	r3, #1
 800a00e:	e069      	b.n	800a0e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2202      	movs	r2, #2
 800a014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2202      	movs	r2, #2
 800a01c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a020:	e031      	b.n	800a086 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	2b04      	cmp	r3, #4
 800a026:	d110      	bne.n	800a04a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a028:	7bbb      	ldrb	r3, [r7, #14]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d102      	bne.n	800a034 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a02e:	7b3b      	ldrb	r3, [r7, #12]
 800a030:	2b01      	cmp	r3, #1
 800a032:	d001      	beq.n	800a038 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	e055      	b.n	800a0e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2202      	movs	r2, #2
 800a03c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2202      	movs	r2, #2
 800a044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a048:	e01d      	b.n	800a086 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a04a:	7bfb      	ldrb	r3, [r7, #15]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d108      	bne.n	800a062 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a050:	7bbb      	ldrb	r3, [r7, #14]
 800a052:	2b01      	cmp	r3, #1
 800a054:	d105      	bne.n	800a062 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a056:	7b7b      	ldrb	r3, [r7, #13]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d102      	bne.n	800a062 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a05c:	7b3b      	ldrb	r3, [r7, #12]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d001      	beq.n	800a066 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e03e      	b.n	800a0e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2202      	movs	r2, #2
 800a06a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2202      	movs	r2, #2
 800a072:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2202      	movs	r2, #2
 800a07a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2202      	movs	r2, #2
 800a082:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d003      	beq.n	800a094 <HAL_TIM_Encoder_Start+0xc4>
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	2b04      	cmp	r3, #4
 800a090:	d008      	beq.n	800a0a4 <HAL_TIM_Encoder_Start+0xd4>
 800a092:	e00f      	b.n	800a0b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2201      	movs	r2, #1
 800a09a:	2100      	movs	r1, #0
 800a09c:	4618      	mov	r0, r3
 800a09e:	f000 ff7d 	bl	800af9c <TIM_CCxChannelCmd>
      break;
 800a0a2:	e016      	b.n	800a0d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	2104      	movs	r1, #4
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f000 ff75 	bl	800af9c <TIM_CCxChannelCmd>
      break;
 800a0b2:	e00e      	b.n	800a0d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 ff6d 	bl	800af9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	2104      	movs	r1, #4
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f000 ff66 	bl	800af9c <TIM_CCxChannelCmd>
      break;
 800a0d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f042 0201 	orr.w	r2, r2, #1
 800a0e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	f003 0302 	and.w	r3, r3, #2
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d128      	bne.n	800a154 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	f003 0302 	and.w	r3, r3, #2
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	d121      	bne.n	800a154 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f06f 0202 	mvn.w	r2, #2
 800a118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2201      	movs	r2, #1
 800a11e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	f003 0303 	and.w	r3, r3, #3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d005      	beq.n	800a13a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	4798      	blx	r3
 800a138:	e009      	b.n	800a14e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	f003 0304 	and.w	r3, r3, #4
 800a15e:	2b04      	cmp	r3, #4
 800a160:	d128      	bne.n	800a1b4 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f003 0304 	and.w	r3, r3, #4
 800a16c:	2b04      	cmp	r3, #4
 800a16e:	d121      	bne.n	800a1b4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f06f 0204 	mvn.w	r2, #4
 800a178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2202      	movs	r2, #2
 800a17e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d005      	beq.n	800a19a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	4798      	blx	r3
 800a198:	e009      	b.n	800a1ae <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	f003 0308 	and.w	r3, r3, #8
 800a1be:	2b08      	cmp	r3, #8
 800a1c0:	d128      	bne.n	800a214 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	f003 0308 	and.w	r3, r3, #8
 800a1cc:	2b08      	cmp	r3, #8
 800a1ce:	d121      	bne.n	800a214 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f06f 0208 	mvn.w	r2, #8
 800a1d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2204      	movs	r2, #4
 800a1de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	69db      	ldr	r3, [r3, #28]
 800a1e6:	f003 0303 	and.w	r3, r3, #3
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d005      	beq.n	800a1fa <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	4798      	blx	r3
 800a1f8:	e009      	b.n	800a20e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	f003 0310 	and.w	r3, r3, #16
 800a21e:	2b10      	cmp	r3, #16
 800a220:	d128      	bne.n	800a274 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	f003 0310 	and.w	r3, r3, #16
 800a22c:	2b10      	cmp	r3, #16
 800a22e:	d121      	bne.n	800a274 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f06f 0210 	mvn.w	r2, #16
 800a238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2208      	movs	r2, #8
 800a23e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	69db      	ldr	r3, [r3, #28]
 800a246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d005      	beq.n	800a25a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	4798      	blx	r3
 800a258:	e009      	b.n	800a26e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	f003 0301 	and.w	r3, r3, #1
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d110      	bne.n	800a2a4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	f003 0301 	and.w	r3, r3, #1
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d109      	bne.n	800a2a4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f06f 0201 	mvn.w	r2, #1
 800a298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2ae:	2b80      	cmp	r3, #128	; 0x80
 800a2b0:	d110      	bne.n	800a2d4 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2bc:	2b80      	cmp	r3, #128	; 0x80
 800a2be:	d109      	bne.n	800a2d4 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a2c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2de:	2b40      	cmp	r3, #64	; 0x40
 800a2e0:	d110      	bne.n	800a304 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ec:	2b40      	cmp	r3, #64	; 0x40
 800a2ee:	d109      	bne.n	800a304 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	f003 0320 	and.w	r3, r3, #32
 800a30e:	2b20      	cmp	r3, #32
 800a310:	d110      	bne.n	800a334 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	f003 0320 	and.w	r3, r3, #32
 800a31c:	2b20      	cmp	r3, #32
 800a31e:	d109      	bne.n	800a334 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f06f 0220 	mvn.w	r2, #32
 800a328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a334:	bf00      	nop
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a348:	2300      	movs	r3, #0
 800a34a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a352:	2b01      	cmp	r3, #1
 800a354:	d101      	bne.n	800a35a <HAL_TIM_OC_ConfigChannel+0x1e>
 800a356:	2302      	movs	r3, #2
 800a358:	e048      	b.n	800a3ec <HAL_TIM_OC_ConfigChannel+0xb0>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b0c      	cmp	r3, #12
 800a366:	d839      	bhi.n	800a3dc <HAL_TIM_OC_ConfigChannel+0xa0>
 800a368:	a201      	add	r2, pc, #4	; (adr r2, 800a370 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36e:	bf00      	nop
 800a370:	0800a3a5 	.word	0x0800a3a5
 800a374:	0800a3dd 	.word	0x0800a3dd
 800a378:	0800a3dd 	.word	0x0800a3dd
 800a37c:	0800a3dd 	.word	0x0800a3dd
 800a380:	0800a3b3 	.word	0x0800a3b3
 800a384:	0800a3dd 	.word	0x0800a3dd
 800a388:	0800a3dd 	.word	0x0800a3dd
 800a38c:	0800a3dd 	.word	0x0800a3dd
 800a390:	0800a3c1 	.word	0x0800a3c1
 800a394:	0800a3dd 	.word	0x0800a3dd
 800a398:	0800a3dd 	.word	0x0800a3dd
 800a39c:	0800a3dd 	.word	0x0800a3dd
 800a3a0:	0800a3cf 	.word	0x0800a3cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68b9      	ldr	r1, [r7, #8]
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f000 fbd0 	bl	800ab50 <TIM_OC1_SetConfig>
      break;
 800a3b0:	e017      	b.n	800a3e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68b9      	ldr	r1, [r7, #8]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f000 fc2f 	bl	800ac1c <TIM_OC2_SetConfig>
      break;
 800a3be:	e010      	b.n	800a3e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68b9      	ldr	r1, [r7, #8]
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f000 fc94 	bl	800acf4 <TIM_OC3_SetConfig>
      break;
 800a3cc:	e009      	b.n	800a3e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68b9      	ldr	r1, [r7, #8]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 fcf7 	bl	800adc8 <TIM_OC4_SetConfig>
      break;
 800a3da:	e002      	b.n	800a3e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	75fb      	strb	r3, [r7, #23]
      break;
 800a3e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3718      	adds	r7, #24
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b086      	sub	sp, #24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d101      	bne.n	800a412 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a40e:	2302      	movs	r3, #2
 800a410:	e0ae      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2201      	movs	r2, #1
 800a416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2b0c      	cmp	r3, #12
 800a41e:	f200 809f 	bhi.w	800a560 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a422:	a201      	add	r2, pc, #4	; (adr r2, 800a428 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a428:	0800a45d 	.word	0x0800a45d
 800a42c:	0800a561 	.word	0x0800a561
 800a430:	0800a561 	.word	0x0800a561
 800a434:	0800a561 	.word	0x0800a561
 800a438:	0800a49d 	.word	0x0800a49d
 800a43c:	0800a561 	.word	0x0800a561
 800a440:	0800a561 	.word	0x0800a561
 800a444:	0800a561 	.word	0x0800a561
 800a448:	0800a4df 	.word	0x0800a4df
 800a44c:	0800a561 	.word	0x0800a561
 800a450:	0800a561 	.word	0x0800a561
 800a454:	0800a561 	.word	0x0800a561
 800a458:	0800a51f 	.word	0x0800a51f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68b9      	ldr	r1, [r7, #8]
 800a462:	4618      	mov	r0, r3
 800a464:	f000 fb74 	bl	800ab50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	699a      	ldr	r2, [r3, #24]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f042 0208 	orr.w	r2, r2, #8
 800a476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	699a      	ldr	r2, [r3, #24]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f022 0204 	bic.w	r2, r2, #4
 800a486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	6999      	ldr	r1, [r3, #24]
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	691a      	ldr	r2, [r3, #16]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	430a      	orrs	r2, r1
 800a498:	619a      	str	r2, [r3, #24]
      break;
 800a49a:	e064      	b.n	800a566 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68b9      	ldr	r1, [r7, #8]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f000 fbba 	bl	800ac1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	699a      	ldr	r2, [r3, #24]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	699a      	ldr	r2, [r3, #24]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	6999      	ldr	r1, [r3, #24]
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	021a      	lsls	r2, r3, #8
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	430a      	orrs	r2, r1
 800a4da:	619a      	str	r2, [r3, #24]
      break;
 800a4dc:	e043      	b.n	800a566 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68b9      	ldr	r1, [r7, #8]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f000 fc05 	bl	800acf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	69da      	ldr	r2, [r3, #28]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f042 0208 	orr.w	r2, r2, #8
 800a4f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	69da      	ldr	r2, [r3, #28]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f022 0204 	bic.w	r2, r2, #4
 800a508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	69d9      	ldr	r1, [r3, #28]
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	691a      	ldr	r2, [r3, #16]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	430a      	orrs	r2, r1
 800a51a:	61da      	str	r2, [r3, #28]
      break;
 800a51c:	e023      	b.n	800a566 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	68b9      	ldr	r1, [r7, #8]
 800a524:	4618      	mov	r0, r3
 800a526:	f000 fc4f 	bl	800adc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	69da      	ldr	r2, [r3, #28]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	69da      	ldr	r2, [r3, #28]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	69d9      	ldr	r1, [r3, #28]
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	021a      	lsls	r2, r3, #8
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	430a      	orrs	r2, r1
 800a55c:	61da      	str	r2, [r3, #28]
      break;
 800a55e:	e002      	b.n	800a566 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	75fb      	strb	r3, [r7, #23]
      break;
 800a564:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a56e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3718      	adds	r7, #24
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d101      	bne.n	800a594 <HAL_TIM_ConfigClockSource+0x1c>
 800a590:	2302      	movs	r3, #2
 800a592:	e0b4      	b.n	800a6fe <HAL_TIM_ConfigClockSource+0x186>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2202      	movs	r2, #2
 800a5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5cc:	d03e      	beq.n	800a64c <HAL_TIM_ConfigClockSource+0xd4>
 800a5ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5d2:	f200 8087 	bhi.w	800a6e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5da:	f000 8086 	beq.w	800a6ea <HAL_TIM_ConfigClockSource+0x172>
 800a5de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5e2:	d87f      	bhi.n	800a6e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5e4:	2b70      	cmp	r3, #112	; 0x70
 800a5e6:	d01a      	beq.n	800a61e <HAL_TIM_ConfigClockSource+0xa6>
 800a5e8:	2b70      	cmp	r3, #112	; 0x70
 800a5ea:	d87b      	bhi.n	800a6e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5ec:	2b60      	cmp	r3, #96	; 0x60
 800a5ee:	d050      	beq.n	800a692 <HAL_TIM_ConfigClockSource+0x11a>
 800a5f0:	2b60      	cmp	r3, #96	; 0x60
 800a5f2:	d877      	bhi.n	800a6e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5f4:	2b50      	cmp	r3, #80	; 0x50
 800a5f6:	d03c      	beq.n	800a672 <HAL_TIM_ConfigClockSource+0xfa>
 800a5f8:	2b50      	cmp	r3, #80	; 0x50
 800a5fa:	d873      	bhi.n	800a6e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5fc:	2b40      	cmp	r3, #64	; 0x40
 800a5fe:	d058      	beq.n	800a6b2 <HAL_TIM_ConfigClockSource+0x13a>
 800a600:	2b40      	cmp	r3, #64	; 0x40
 800a602:	d86f      	bhi.n	800a6e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a604:	2b30      	cmp	r3, #48	; 0x30
 800a606:	d064      	beq.n	800a6d2 <HAL_TIM_ConfigClockSource+0x15a>
 800a608:	2b30      	cmp	r3, #48	; 0x30
 800a60a:	d86b      	bhi.n	800a6e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a60c:	2b20      	cmp	r3, #32
 800a60e:	d060      	beq.n	800a6d2 <HAL_TIM_ConfigClockSource+0x15a>
 800a610:	2b20      	cmp	r3, #32
 800a612:	d867      	bhi.n	800a6e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a614:	2b00      	cmp	r3, #0
 800a616:	d05c      	beq.n	800a6d2 <HAL_TIM_ConfigClockSource+0x15a>
 800a618:	2b10      	cmp	r3, #16
 800a61a:	d05a      	beq.n	800a6d2 <HAL_TIM_ConfigClockSource+0x15a>
 800a61c:	e062      	b.n	800a6e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6818      	ldr	r0, [r3, #0]
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	6899      	ldr	r1, [r3, #8]
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	685a      	ldr	r2, [r3, #4]
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	f000 fc95 	bl	800af5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a640:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	68ba      	ldr	r2, [r7, #8]
 800a648:	609a      	str	r2, [r3, #8]
      break;
 800a64a:	e04f      	b.n	800a6ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6818      	ldr	r0, [r3, #0]
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	6899      	ldr	r1, [r3, #8]
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	685a      	ldr	r2, [r3, #4]
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	f000 fc7e 	bl	800af5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	689a      	ldr	r2, [r3, #8]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a66e:	609a      	str	r2, [r3, #8]
      break;
 800a670:	e03c      	b.n	800a6ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6818      	ldr	r0, [r3, #0]
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	6859      	ldr	r1, [r3, #4]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	461a      	mov	r2, r3
 800a680:	f000 fbf2 	bl	800ae68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2150      	movs	r1, #80	; 0x50
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 fc4b 	bl	800af26 <TIM_ITRx_SetConfig>
      break;
 800a690:	e02c      	b.n	800a6ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6818      	ldr	r0, [r3, #0]
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	6859      	ldr	r1, [r3, #4]
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	f000 fc11 	bl	800aec6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2160      	movs	r1, #96	; 0x60
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f000 fc3b 	bl	800af26 <TIM_ITRx_SetConfig>
      break;
 800a6b0:	e01c      	b.n	800a6ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6818      	ldr	r0, [r3, #0]
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	6859      	ldr	r1, [r3, #4]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	461a      	mov	r2, r3
 800a6c0:	f000 fbd2 	bl	800ae68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2140      	movs	r1, #64	; 0x40
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 fc2b 	bl	800af26 <TIM_ITRx_SetConfig>
      break;
 800a6d0:	e00c      	b.n	800a6ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4619      	mov	r1, r3
 800a6dc:	4610      	mov	r0, r2
 800a6de:	f000 fc22 	bl	800af26 <TIM_ITRx_SetConfig>
      break;
 800a6e2:	e003      	b.n	800a6ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6e8:	e000      	b.n	800a6ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a6ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a706:	b480      	push	{r7}
 800a708:	b083      	sub	sp, #12
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a70e:	bf00      	nop
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b083      	sub	sp, #12
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a722:	bf00      	nop
 800a724:	370c      	adds	r7, #12
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a72e:	b480      	push	{r7}
 800a730:	b083      	sub	sp, #12
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a736:	bf00      	nop
 800a738:	370c      	adds	r7, #12
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr

0800a742 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a742:	b480      	push	{r7}
 800a744:	b083      	sub	sp, #12
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a74a:	bf00      	nop
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr

0800a756 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a756:	b480      	push	{r7}
 800a758:	b083      	sub	sp, #12
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a75e:	bf00      	nop
 800a760:	370c      	adds	r7, #12
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr

0800a76a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a76a:	b480      	push	{r7}
 800a76c:	b083      	sub	sp, #12
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a772:	bf00      	nop
 800a774:	370c      	adds	r7, #12
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a77e:	b480      	push	{r7}
 800a780:	b083      	sub	sp, #12
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a786:	bf00      	nop
 800a788:	370c      	adds	r7, #12
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr

0800a792 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a792:	b480      	push	{r7}
 800a794:	b083      	sub	sp, #12
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a79a:	bf00      	nop
 800a79c:	370c      	adds	r7, #12
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a7a6:	b480      	push	{r7}
 800a7a8:	b083      	sub	sp, #12
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a7ae:	bf00      	nop
 800a7b0:	370c      	adds	r7, #12
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
	...

0800a7bc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b087      	sub	sp, #28
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	607a      	str	r2, [r7, #4]
 800a7c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d101      	bne.n	800a7d8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e135      	b.n	800aa44 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d101      	bne.n	800a7e6 <HAL_TIM_RegisterCallback+0x2a>
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	e12e      	b.n	800aa44 <HAL_TIM_RegisterCallback+0x288>
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	f040 80ba 	bne.w	800a970 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 800a7fc:	7afb      	ldrb	r3, [r7, #11]
 800a7fe:	2b1a      	cmp	r3, #26
 800a800:	f200 80b3 	bhi.w	800a96a <HAL_TIM_RegisterCallback+0x1ae>
 800a804:	a201      	add	r2, pc, #4	; (adr r2, 800a80c <HAL_TIM_RegisterCallback+0x50>)
 800a806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80a:	bf00      	nop
 800a80c:	0800a879 	.word	0x0800a879
 800a810:	0800a881 	.word	0x0800a881
 800a814:	0800a889 	.word	0x0800a889
 800a818:	0800a891 	.word	0x0800a891
 800a81c:	0800a899 	.word	0x0800a899
 800a820:	0800a8a1 	.word	0x0800a8a1
 800a824:	0800a8a9 	.word	0x0800a8a9
 800a828:	0800a8b1 	.word	0x0800a8b1
 800a82c:	0800a8b9 	.word	0x0800a8b9
 800a830:	0800a8c1 	.word	0x0800a8c1
 800a834:	0800a8c9 	.word	0x0800a8c9
 800a838:	0800a8d1 	.word	0x0800a8d1
 800a83c:	0800a8d9 	.word	0x0800a8d9
 800a840:	0800a8e1 	.word	0x0800a8e1
 800a844:	0800a8e9 	.word	0x0800a8e9
 800a848:	0800a8f3 	.word	0x0800a8f3
 800a84c:	0800a8fd 	.word	0x0800a8fd
 800a850:	0800a907 	.word	0x0800a907
 800a854:	0800a911 	.word	0x0800a911
 800a858:	0800a91b 	.word	0x0800a91b
 800a85c:	0800a925 	.word	0x0800a925
 800a860:	0800a92f 	.word	0x0800a92f
 800a864:	0800a939 	.word	0x0800a939
 800a868:	0800a943 	.word	0x0800a943
 800a86c:	0800a94d 	.word	0x0800a94d
 800a870:	0800a957 	.word	0x0800a957
 800a874:	0800a961 	.word	0x0800a961
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a87e:	e0dc      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a886:	e0d8      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a88e:	e0d4      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a896:	e0d0      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a89e:	e0cc      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a8a6:	e0c8      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a8ae:	e0c4      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a8b6:	e0c0      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a8be:	e0bc      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a8c6:	e0b8      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a8ce:	e0b4      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a8d6:	e0b0      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a8de:	e0ac      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a8e6:	e0a8      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800a8f0:	e0a3      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800a8fa:	e09e      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800a904:	e099      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800a90e:	e094      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800a918:	e08f      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800a922:	e08a      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800a92c:	e085      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800a936:	e080      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800a940:	e07b      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800a94a:	e076      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800a954:	e071      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800a95e:	e06c      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800a968:	e067      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	75fb      	strb	r3, [r7, #23]
        break;
 800a96e:	e064      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a976:	b2db      	uxtb	r3, r3
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d15c      	bne.n	800aa36 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800a97c:	7afb      	ldrb	r3, [r7, #11]
 800a97e:	2b0d      	cmp	r3, #13
 800a980:	d856      	bhi.n	800aa30 <HAL_TIM_RegisterCallback+0x274>
 800a982:	a201      	add	r2, pc, #4	; (adr r2, 800a988 <HAL_TIM_RegisterCallback+0x1cc>)
 800a984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a988:	0800a9c1 	.word	0x0800a9c1
 800a98c:	0800a9c9 	.word	0x0800a9c9
 800a990:	0800a9d1 	.word	0x0800a9d1
 800a994:	0800a9d9 	.word	0x0800a9d9
 800a998:	0800a9e1 	.word	0x0800a9e1
 800a99c:	0800a9e9 	.word	0x0800a9e9
 800a9a0:	0800a9f1 	.word	0x0800a9f1
 800a9a4:	0800a9f9 	.word	0x0800a9f9
 800a9a8:	0800aa01 	.word	0x0800aa01
 800a9ac:	0800aa09 	.word	0x0800aa09
 800a9b0:	0800aa11 	.word	0x0800aa11
 800a9b4:	0800aa19 	.word	0x0800aa19
 800a9b8:	0800aa21 	.word	0x0800aa21
 800a9bc:	0800aa29 	.word	0x0800aa29
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a9c6:	e038      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a9ce:	e034      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a9d6:	e030      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a9de:	e02c      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a9e6:	e028      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a9ee:	e024      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a9f6:	e020      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a9fe:	e01c      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800aa06:	e018      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800aa0e:	e014      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800aa16:	e010      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800aa1e:	e00c      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800aa26:	e008      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800aa2e:	e004      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	75fb      	strb	r3, [r7, #23]
        break;
 800aa34:	e001      	b.n	800aa3a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa42:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	371c      	adds	r7, #28
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a34      	ldr	r2, [pc, #208]	; (800ab34 <TIM_Base_SetConfig+0xe4>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d00f      	beq.n	800aa88 <TIM_Base_SetConfig+0x38>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa6e:	d00b      	beq.n	800aa88 <TIM_Base_SetConfig+0x38>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4a31      	ldr	r2, [pc, #196]	; (800ab38 <TIM_Base_SetConfig+0xe8>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d007      	beq.n	800aa88 <TIM_Base_SetConfig+0x38>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a30      	ldr	r2, [pc, #192]	; (800ab3c <TIM_Base_SetConfig+0xec>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d003      	beq.n	800aa88 <TIM_Base_SetConfig+0x38>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4a2f      	ldr	r2, [pc, #188]	; (800ab40 <TIM_Base_SetConfig+0xf0>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d108      	bne.n	800aa9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a25      	ldr	r2, [pc, #148]	; (800ab34 <TIM_Base_SetConfig+0xe4>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d01b      	beq.n	800aada <TIM_Base_SetConfig+0x8a>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaa8:	d017      	beq.n	800aada <TIM_Base_SetConfig+0x8a>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a22      	ldr	r2, [pc, #136]	; (800ab38 <TIM_Base_SetConfig+0xe8>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d013      	beq.n	800aada <TIM_Base_SetConfig+0x8a>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a21      	ldr	r2, [pc, #132]	; (800ab3c <TIM_Base_SetConfig+0xec>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d00f      	beq.n	800aada <TIM_Base_SetConfig+0x8a>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a20      	ldr	r2, [pc, #128]	; (800ab40 <TIM_Base_SetConfig+0xf0>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d00b      	beq.n	800aada <TIM_Base_SetConfig+0x8a>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4a1f      	ldr	r2, [pc, #124]	; (800ab44 <TIM_Base_SetConfig+0xf4>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d007      	beq.n	800aada <TIM_Base_SetConfig+0x8a>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a1e      	ldr	r2, [pc, #120]	; (800ab48 <TIM_Base_SetConfig+0xf8>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d003      	beq.n	800aada <TIM_Base_SetConfig+0x8a>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a1d      	ldr	r2, [pc, #116]	; (800ab4c <TIM_Base_SetConfig+0xfc>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d108      	bne.n	800aaec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	4313      	orrs	r3, r2
 800aaea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	695b      	ldr	r3, [r3, #20]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	689a      	ldr	r2, [r3, #8]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a08      	ldr	r2, [pc, #32]	; (800ab34 <TIM_Base_SetConfig+0xe4>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d103      	bne.n	800ab20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	691a      	ldr	r2, [r3, #16]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	615a      	str	r2, [r3, #20]
}
 800ab26:	bf00      	nop
 800ab28:	3714      	adds	r7, #20
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	40010000 	.word	0x40010000
 800ab38:	40000400 	.word	0x40000400
 800ab3c:	40000800 	.word	0x40000800
 800ab40:	40000c00 	.word	0x40000c00
 800ab44:	40014000 	.word	0x40014000
 800ab48:	40014400 	.word	0x40014400
 800ab4c:	40014800 	.word	0x40014800

0800ab50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b087      	sub	sp, #28
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a1b      	ldr	r3, [r3, #32]
 800ab5e:	f023 0201 	bic.w	r2, r3, #1
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6a1b      	ldr	r3, [r3, #32]
 800ab6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	699b      	ldr	r3, [r3, #24]
 800ab76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f023 0303 	bic.w	r3, r3, #3
 800ab86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	f023 0302 	bic.w	r3, r3, #2
 800ab98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	697a      	ldr	r2, [r7, #20]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a1c      	ldr	r2, [pc, #112]	; (800ac18 <TIM_OC1_SetConfig+0xc8>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d10c      	bne.n	800abc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	f023 0308 	bic.w	r3, r3, #8
 800abb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	697a      	ldr	r2, [r7, #20]
 800abba:	4313      	orrs	r3, r2
 800abbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	f023 0304 	bic.w	r3, r3, #4
 800abc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a13      	ldr	r2, [pc, #76]	; (800ac18 <TIM_OC1_SetConfig+0xc8>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d111      	bne.n	800abf2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	695b      	ldr	r3, [r3, #20]
 800abe2:	693a      	ldr	r2, [r7, #16]
 800abe4:	4313      	orrs	r3, r2
 800abe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	699b      	ldr	r3, [r3, #24]
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	4313      	orrs	r3, r2
 800abf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	693a      	ldr	r2, [r7, #16]
 800abf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	621a      	str	r2, [r3, #32]
}
 800ac0c:	bf00      	nop
 800ac0e:	371c      	adds	r7, #28
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr
 800ac18:	40010000 	.word	0x40010000

0800ac1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b087      	sub	sp, #28
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a1b      	ldr	r3, [r3, #32]
 800ac2a:	f023 0210 	bic.w	r2, r3, #16
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a1b      	ldr	r3, [r3, #32]
 800ac36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	699b      	ldr	r3, [r3, #24]
 800ac42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	021b      	lsls	r3, r3, #8
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	f023 0320 	bic.w	r3, r3, #32
 800ac66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	011b      	lsls	r3, r3, #4
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a1e      	ldr	r2, [pc, #120]	; (800acf0 <TIM_OC2_SetConfig+0xd4>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d10d      	bne.n	800ac98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	011b      	lsls	r3, r3, #4
 800ac8a:	697a      	ldr	r2, [r7, #20]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a15      	ldr	r2, [pc, #84]	; (800acf0 <TIM_OC2_SetConfig+0xd4>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d113      	bne.n	800acc8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aca6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	695b      	ldr	r3, [r3, #20]
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	693a      	ldr	r2, [r7, #16]
 800acb8:	4313      	orrs	r3, r2
 800acba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	693a      	ldr	r2, [r7, #16]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	693a      	ldr	r2, [r7, #16]
 800accc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	685a      	ldr	r2, [r3, #4]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	697a      	ldr	r2, [r7, #20]
 800ace0:	621a      	str	r2, [r3, #32]
}
 800ace2:	bf00      	nop
 800ace4:	371c      	adds	r7, #28
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	40010000 	.word	0x40010000

0800acf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b087      	sub	sp, #28
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a1b      	ldr	r3, [r3, #32]
 800ad02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a1b      	ldr	r3, [r3, #32]
 800ad0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	69db      	ldr	r3, [r3, #28]
 800ad1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f023 0303 	bic.w	r3, r3, #3
 800ad2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	021b      	lsls	r3, r3, #8
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4a1d      	ldr	r2, [pc, #116]	; (800adc4 <TIM_OC3_SetConfig+0xd0>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d10d      	bne.n	800ad6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	021b      	lsls	r3, r3, #8
 800ad60:	697a      	ldr	r2, [r7, #20]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a14      	ldr	r2, [pc, #80]	; (800adc4 <TIM_OC3_SetConfig+0xd0>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d113      	bne.n	800ad9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	011b      	lsls	r3, r3, #4
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	011b      	lsls	r3, r3, #4
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	697a      	ldr	r2, [r7, #20]
 800adb6:	621a      	str	r2, [r3, #32]
}
 800adb8:	bf00      	nop
 800adba:	371c      	adds	r7, #28
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr
 800adc4:	40010000 	.word	0x40010000

0800adc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adc8:	b480      	push	{r7}
 800adca:	b087      	sub	sp, #28
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a1b      	ldr	r3, [r3, #32]
 800add6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a1b      	ldr	r3, [r3, #32]
 800ade2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	69db      	ldr	r3, [r3, #28]
 800adee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	021b      	lsls	r3, r3, #8
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	031b      	lsls	r3, r3, #12
 800ae1a:	693a      	ldr	r2, [r7, #16]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4a10      	ldr	r2, [pc, #64]	; (800ae64 <TIM_OC4_SetConfig+0x9c>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d109      	bne.n	800ae3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	695b      	ldr	r3, [r3, #20]
 800ae34:	019b      	lsls	r3, r3, #6
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	697a      	ldr	r2, [r7, #20]
 800ae40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	685a      	ldr	r2, [r3, #4]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	621a      	str	r2, [r3, #32]
}
 800ae56:	bf00      	nop
 800ae58:	371c      	adds	r7, #28
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	40010000 	.word	0x40010000

0800ae68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b087      	sub	sp, #28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6a1b      	ldr	r3, [r3, #32]
 800ae78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	6a1b      	ldr	r3, [r3, #32]
 800ae7e:	f023 0201 	bic.w	r2, r3, #1
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	699b      	ldr	r3, [r3, #24]
 800ae8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	011b      	lsls	r3, r3, #4
 800ae98:	693a      	ldr	r2, [r7, #16]
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	f023 030a 	bic.w	r3, r3, #10
 800aea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	693a      	ldr	r2, [r7, #16]
 800aeb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	621a      	str	r2, [r3, #32]
}
 800aeba:	bf00      	nop
 800aebc:	371c      	adds	r7, #28
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aec6:	b480      	push	{r7}
 800aec8:	b087      	sub	sp, #28
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	60f8      	str	r0, [r7, #12]
 800aece:	60b9      	str	r1, [r7, #8]
 800aed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	f023 0210 	bic.w	r2, r3, #16
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	699b      	ldr	r3, [r3, #24]
 800aee2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6a1b      	ldr	r3, [r3, #32]
 800aee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aef0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	031b      	lsls	r3, r3, #12
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	011b      	lsls	r3, r3, #4
 800af08:	693a      	ldr	r2, [r7, #16]
 800af0a:	4313      	orrs	r3, r2
 800af0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	697a      	ldr	r2, [r7, #20]
 800af12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	693a      	ldr	r2, [r7, #16]
 800af18:	621a      	str	r2, [r3, #32]
}
 800af1a:	bf00      	nop
 800af1c:	371c      	adds	r7, #28
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr

0800af26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af26:	b480      	push	{r7}
 800af28:	b085      	sub	sp, #20
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
 800af2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af3e:	683a      	ldr	r2, [r7, #0]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	4313      	orrs	r3, r2
 800af44:	f043 0307 	orr.w	r3, r3, #7
 800af48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	609a      	str	r2, [r3, #8]
}
 800af50:	bf00      	nop
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b087      	sub	sp, #28
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
 800af68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	021a      	lsls	r2, r3, #8
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	431a      	orrs	r2, r3
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	4313      	orrs	r3, r2
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	4313      	orrs	r3, r2
 800af88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	609a      	str	r2, [r3, #8]
}
 800af90:	bf00      	nop
 800af92:	371c      	adds	r7, #28
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b087      	sub	sp, #28
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	f003 031f 	and.w	r3, r3, #31
 800afae:	2201      	movs	r2, #1
 800afb0:	fa02 f303 	lsl.w	r3, r2, r3
 800afb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6a1a      	ldr	r2, [r3, #32]
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	43db      	mvns	r3, r3
 800afbe:	401a      	ands	r2, r3
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6a1a      	ldr	r2, [r3, #32]
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	f003 031f 	and.w	r3, r3, #31
 800afce:	6879      	ldr	r1, [r7, #4]
 800afd0:	fa01 f303 	lsl.w	r3, r1, r3
 800afd4:	431a      	orrs	r2, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	621a      	str	r2, [r3, #32]
}
 800afda:	bf00      	nop
 800afdc:	371c      	adds	r7, #28
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr
	...

0800afe8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4a1c      	ldr	r2, [pc, #112]	; (800b064 <TIM_ResetCallback+0x7c>)
 800aff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a1b      	ldr	r2, [pc, #108]	; (800b068 <TIM_ResetCallback+0x80>)
 800affc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a1a      	ldr	r2, [pc, #104]	; (800b06c <TIM_ResetCallback+0x84>)
 800b004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a19      	ldr	r2, [pc, #100]	; (800b070 <TIM_ResetCallback+0x88>)
 800b00c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a18      	ldr	r2, [pc, #96]	; (800b074 <TIM_ResetCallback+0x8c>)
 800b014:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a17      	ldr	r2, [pc, #92]	; (800b078 <TIM_ResetCallback+0x90>)
 800b01c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a16      	ldr	r2, [pc, #88]	; (800b07c <TIM_ResetCallback+0x94>)
 800b024:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a15      	ldr	r2, [pc, #84]	; (800b080 <TIM_ResetCallback+0x98>)
 800b02c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a14      	ldr	r2, [pc, #80]	; (800b084 <TIM_ResetCallback+0x9c>)
 800b034:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a13      	ldr	r2, [pc, #76]	; (800b088 <TIM_ResetCallback+0xa0>)
 800b03c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a12      	ldr	r2, [pc, #72]	; (800b08c <TIM_ResetCallback+0xa4>)
 800b044:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a11      	ldr	r2, [pc, #68]	; (800b090 <TIM_ResetCallback+0xa8>)
 800b04c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a10      	ldr	r2, [pc, #64]	; (800b094 <TIM_ResetCallback+0xac>)
 800b054:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800b058:	bf00      	nop
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr
 800b064:	08003fc9 	.word	0x08003fc9
 800b068:	0800a707 	.word	0x0800a707
 800b06c:	0800a77f 	.word	0x0800a77f
 800b070:	0800a793 	.word	0x0800a793
 800b074:	0800a72f 	.word	0x0800a72f
 800b078:	0800a743 	.word	0x0800a743
 800b07c:	0800a71b 	.word	0x0800a71b
 800b080:	0800a757 	.word	0x0800a757
 800b084:	0800a76b 	.word	0x0800a76b
 800b088:	0800a7a7 	.word	0x0800a7a7
 800b08c:	0800b219 	.word	0x0800b219
 800b090:	0800b22d 	.word	0x0800b22d
 800b094:	0800b241 	.word	0x0800b241

0800b098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d101      	bne.n	800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	e050      	b.n	800b152 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2202      	movs	r2, #2
 800b0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a1c      	ldr	r2, [pc, #112]	; (800b160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d018      	beq.n	800b126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0fc:	d013      	beq.n	800b126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a18      	ldr	r2, [pc, #96]	; (800b164 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d00e      	beq.n	800b126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a16      	ldr	r2, [pc, #88]	; (800b168 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d009      	beq.n	800b126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a15      	ldr	r2, [pc, #84]	; (800b16c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d004      	beq.n	800b126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a13      	ldr	r2, [pc, #76]	; (800b170 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d10c      	bne.n	800b140 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b12c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	68ba      	ldr	r2, [r7, #8]
 800b134:	4313      	orrs	r3, r2
 800b136:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b150:	2300      	movs	r3, #0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3714      	adds	r7, #20
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	40010000 	.word	0x40010000
 800b164:	40000400 	.word	0x40000400
 800b168:	40000800 	.word	0x40000800
 800b16c:	40000c00 	.word	0x40000c00
 800b170:	40014000 	.word	0x40014000

0800b174 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b17e:	2300      	movs	r3, #0
 800b180:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d101      	bne.n	800b190 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b18c:	2302      	movs	r3, #2
 800b18e:	e03d      	b.n	800b20c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2201      	movs	r2, #1
 800b194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	695b      	ldr	r3, [r3, #20]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	69db      	ldr	r3, [r3, #28]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3714      	adds	r7, #20
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b234:	bf00      	nop
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d101      	bne.n	800b266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	e04a      	b.n	800b2fc <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d111      	bne.n	800b296 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fd72 	bl	800bd64 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b284:	2b00      	cmp	r3, #0
 800b286:	d102      	bne.n	800b28e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a1e      	ldr	r2, [pc, #120]	; (800b304 <HAL_UART_Init+0xb0>)
 800b28c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2224      	movs	r2, #36	; 0x24
 800b29a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68da      	ldr	r2, [r3, #12]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b2ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f001 f83c 	bl	800c32c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	691a      	ldr	r2, [r3, #16]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b2c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	695a      	ldr	r2, [r3, #20]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b2d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68da      	ldr	r2, [r3, #12]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b2e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2220      	movs	r2, #32
 800b2ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2220      	movs	r2, #32
 800b2f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b2fa:	2300      	movs	r3, #0
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3708      	adds	r7, #8
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	08004e69 	.word	0x08004e69

0800b308 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b308:	b480      	push	{r7}
 800b30a:	b087      	sub	sp, #28
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	460b      	mov	r3, r1
 800b312:	607a      	str	r2, [r7, #4]
 800b314:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b316:	2300      	movs	r3, #0
 800b318:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d107      	bne.n	800b330 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b324:	f043 0220 	orr.w	r2, r3, #32
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b32c:	2301      	movs	r3, #1
 800b32e:	e08c      	b.n	800b44a <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b336:	2b01      	cmp	r3, #1
 800b338:	d101      	bne.n	800b33e <HAL_UART_RegisterCallback+0x36>
 800b33a:	2302      	movs	r3, #2
 800b33c:	e085      	b.n	800b44a <HAL_UART_RegisterCallback+0x142>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2201      	movs	r2, #1
 800b342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	2b20      	cmp	r3, #32
 800b350:	d151      	bne.n	800b3f6 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800b352:	7afb      	ldrb	r3, [r7, #11]
 800b354:	2b0c      	cmp	r3, #12
 800b356:	d845      	bhi.n	800b3e4 <HAL_UART_RegisterCallback+0xdc>
 800b358:	a201      	add	r2, pc, #4	; (adr r2, 800b360 <HAL_UART_RegisterCallback+0x58>)
 800b35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b35e:	bf00      	nop
 800b360:	0800b395 	.word	0x0800b395
 800b364:	0800b39d 	.word	0x0800b39d
 800b368:	0800b3a5 	.word	0x0800b3a5
 800b36c:	0800b3ad 	.word	0x0800b3ad
 800b370:	0800b3b5 	.word	0x0800b3b5
 800b374:	0800b3bd 	.word	0x0800b3bd
 800b378:	0800b3c5 	.word	0x0800b3c5
 800b37c:	0800b3cd 	.word	0x0800b3cd
 800b380:	0800b3e5 	.word	0x0800b3e5
 800b384:	0800b3e5 	.word	0x0800b3e5
 800b388:	0800b3e5 	.word	0x0800b3e5
 800b38c:	0800b3d5 	.word	0x0800b3d5
 800b390:	0800b3dd 	.word	0x0800b3dd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800b39a:	e051      	b.n	800b440 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800b3a2:	e04d      	b.n	800b440 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800b3aa:	e049      	b.n	800b440 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800b3b2:	e045      	b.n	800b440 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800b3ba:	e041      	b.n	800b440 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800b3c2:	e03d      	b.n	800b440 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800b3ca:	e039      	b.n	800b440 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800b3d2:	e035      	b.n	800b440 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b3da:	e031      	b.n	800b440 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b3e2:	e02d      	b.n	800b440 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e8:	f043 0220 	orr.w	r2, r3, #32
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	75fb      	strb	r3, [r7, #23]
        break;
 800b3f4:	e024      	b.n	800b440 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d116      	bne.n	800b430 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800b402:	7afb      	ldrb	r3, [r7, #11]
 800b404:	2b0b      	cmp	r3, #11
 800b406:	d002      	beq.n	800b40e <HAL_UART_RegisterCallback+0x106>
 800b408:	2b0c      	cmp	r3, #12
 800b40a:	d004      	beq.n	800b416 <HAL_UART_RegisterCallback+0x10e>
 800b40c:	e007      	b.n	800b41e <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b414:	e014      	b.n	800b440 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b41c:	e010      	b.n	800b440 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b422:	f043 0220 	orr.w	r2, r3, #32
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b42a:	2301      	movs	r3, #1
 800b42c:	75fb      	strb	r3, [r7, #23]
        break;
 800b42e:	e007      	b.n	800b440 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b434:	f043 0220 	orr.w	r2, r3, #32
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2200      	movs	r2, #0
 800b444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b448:	7dfb      	ldrb	r3, [r7, #23]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	371c      	adds	r7, #28
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop

0800b458 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	4613      	mov	r3, r2
 800b464:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	2b20      	cmp	r3, #32
 800b470:	d130      	bne.n	800b4d4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d002      	beq.n	800b47e <HAL_UART_Transmit_IT+0x26>
 800b478:	88fb      	ldrh	r3, [r7, #6]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d101      	bne.n	800b482 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	e029      	b.n	800b4d6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d101      	bne.n	800b490 <HAL_UART_Transmit_IT+0x38>
 800b48c:	2302      	movs	r3, #2
 800b48e:	e022      	b.n	800b4d6 <HAL_UART_Transmit_IT+0x7e>
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2201      	movs	r2, #1
 800b494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	88fa      	ldrh	r2, [r7, #6]
 800b4a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	88fa      	ldrh	r2, [r7, #6]
 800b4a8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2221      	movs	r2, #33	; 0x21
 800b4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	68da      	ldr	r2, [r3, #12]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b4ce:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	e000      	b.n	800b4d6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b4d4:	2302      	movs	r3, #2
  }
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr

0800b4e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b084      	sub	sp, #16
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	60f8      	str	r0, [r7, #12]
 800b4ea:	60b9      	str	r1, [r7, #8]
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	2b20      	cmp	r3, #32
 800b4fa:	d11d      	bne.n	800b538 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d002      	beq.n	800b508 <HAL_UART_Receive_IT+0x26>
 800b502:	88fb      	ldrh	r3, [r7, #6]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d101      	bne.n	800b50c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b508:	2301      	movs	r3, #1
 800b50a:	e016      	b.n	800b53a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b512:	2b01      	cmp	r3, #1
 800b514:	d101      	bne.n	800b51a <HAL_UART_Receive_IT+0x38>
 800b516:	2302      	movs	r3, #2
 800b518:	e00f      	b.n	800b53a <HAL_UART_Receive_IT+0x58>
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2201      	movs	r2, #1
 800b51e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b528:	88fb      	ldrh	r3, [r7, #6]
 800b52a:	461a      	mov	r2, r3
 800b52c:	68b9      	ldr	r1, [r7, #8]
 800b52e:	68f8      	ldr	r0, [r7, #12]
 800b530:	f000 fcf8 	bl	800bf24 <UART_Start_Receive_IT>
 800b534:	4603      	mov	r3, r0
 800b536:	e000      	b.n	800b53a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b538:	2302      	movs	r3, #2
  }
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
	...

0800b544 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b08c      	sub	sp, #48	; 0x30
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	4613      	mov	r3, r2
 800b550:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b20      	cmp	r3, #32
 800b55c:	d165      	bne.n	800b62a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d002      	beq.n	800b56a <HAL_UART_Transmit_DMA+0x26>
 800b564:	88fb      	ldrh	r3, [r7, #6]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d101      	bne.n	800b56e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	e05e      	b.n	800b62c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b574:	2b01      	cmp	r3, #1
 800b576:	d101      	bne.n	800b57c <HAL_UART_Transmit_DMA+0x38>
 800b578:	2302      	movs	r3, #2
 800b57a:	e057      	b.n	800b62c <HAL_UART_Transmit_DMA+0xe8>
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2201      	movs	r2, #1
 800b580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b584:	68ba      	ldr	r2, [r7, #8]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	88fa      	ldrh	r2, [r7, #6]
 800b58e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	88fa      	ldrh	r2, [r7, #6]
 800b594:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2221      	movs	r2, #33	; 0x21
 800b5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5a8:	4a22      	ldr	r2, [pc, #136]	; (800b634 <HAL_UART_Transmit_DMA+0xf0>)
 800b5aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5b0:	4a21      	ldr	r2, [pc, #132]	; (800b638 <HAL_UART_Transmit_DMA+0xf4>)
 800b5b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5b8:	4a20      	ldr	r2, [pc, #128]	; (800b63c <HAL_UART_Transmit_DMA+0xf8>)
 800b5ba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b5c4:	f107 0308 	add.w	r3, r7, #8
 800b5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d0:	6819      	ldr	r1, [r3, #0]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	3304      	adds	r3, #4
 800b5d8:	461a      	mov	r2, r3
 800b5da:	88fb      	ldrh	r3, [r7, #6]
 800b5dc:	f7fa fd14 	bl	8006008 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b5e8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	3314      	adds	r3, #20
 800b5f8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	e853 3f00 	ldrex	r3, [r3]
 800b600:	617b      	str	r3, [r7, #20]
   return(result);
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b608:	62bb      	str	r3, [r7, #40]	; 0x28
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	3314      	adds	r3, #20
 800b610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b612:	627a      	str	r2, [r7, #36]	; 0x24
 800b614:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b616:	6a39      	ldr	r1, [r7, #32]
 800b618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b61a:	e841 2300 	strex	r3, r2, [r1]
 800b61e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1e5      	bne.n	800b5f2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	e000      	b.n	800b62c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800b62a:	2302      	movs	r3, #2
  }
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3730      	adds	r7, #48	; 0x30
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}
 800b634:	0800bdd5 	.word	0x0800bdd5
 800b638:	0800be71 	.word	0x0800be71
 800b63c:	0800be8f 	.word	0x0800be8f

0800b640 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b09a      	sub	sp, #104	; 0x68
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	330c      	adds	r3, #12
 800b64e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b652:	e853 3f00 	ldrex	r3, [r3]
 800b656:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b65a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b65e:	667b      	str	r3, [r7, #100]	; 0x64
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	330c      	adds	r3, #12
 800b666:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b668:	657a      	str	r2, [r7, #84]	; 0x54
 800b66a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b66e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b670:	e841 2300 	strex	r3, r2, [r1]
 800b674:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d1e5      	bne.n	800b648 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3314      	adds	r3, #20
 800b682:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b686:	e853 3f00 	ldrex	r3, [r3]
 800b68a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68e:	f023 0301 	bic.w	r3, r3, #1
 800b692:	663b      	str	r3, [r7, #96]	; 0x60
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	3314      	adds	r3, #20
 800b69a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b69c:	643a      	str	r2, [r7, #64]	; 0x40
 800b69e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b6a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6a4:	e841 2300 	strex	r3, r2, [r1]
 800b6a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1e5      	bne.n	800b67c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d119      	bne.n	800b6ec <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	330c      	adds	r3, #12
 800b6be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c0:	6a3b      	ldr	r3, [r7, #32]
 800b6c2:	e853 3f00 	ldrex	r3, [r3]
 800b6c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6c8:	69fb      	ldr	r3, [r7, #28]
 800b6ca:	f023 0310 	bic.w	r3, r3, #16
 800b6ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	330c      	adds	r3, #12
 800b6d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b6d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6e0:	e841 2300 	strex	r3, r2, [r1]
 800b6e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d1e5      	bne.n	800b6b8 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	695b      	ldr	r3, [r3, #20]
 800b6f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f6:	2b40      	cmp	r3, #64	; 0x40
 800b6f8:	d136      	bne.n	800b768 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	3314      	adds	r3, #20
 800b700:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	e853 3f00 	ldrex	r3, [r3]
 800b708:	60bb      	str	r3, [r7, #8]
   return(result);
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b710:	65bb      	str	r3, [r7, #88]	; 0x58
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	3314      	adds	r3, #20
 800b718:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b71a:	61ba      	str	r2, [r7, #24]
 800b71c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b71e:	6979      	ldr	r1, [r7, #20]
 800b720:	69ba      	ldr	r2, [r7, #24]
 800b722:	e841 2300 	strex	r3, r2, [r1]
 800b726:	613b      	str	r3, [r7, #16]
   return(result);
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d1e5      	bne.n	800b6fa <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b732:	2b00      	cmp	r3, #0
 800b734:	d018      	beq.n	800b768 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b73a:	2200      	movs	r2, #0
 800b73c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b742:	4618      	mov	r0, r3
 800b744:	f7fa fcb8 	bl	80060b8 <HAL_DMA_Abort>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00c      	beq.n	800b768 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b752:	4618      	mov	r0, r3
 800b754:	f7fa feda 	bl	800650c <HAL_DMA_GetError>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b20      	cmp	r3, #32
 800b75c:	d104      	bne.n	800b768 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2210      	movs	r2, #16
 800b762:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800b764:	2303      	movs	r3, #3
 800b766:	e00a      	b.n	800b77e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2220      	movs	r2, #32
 800b772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800b77c:	2300      	movs	r3, #0
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3768      	adds	r7, #104	; 0x68
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
	...

0800b788 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b0ba      	sub	sp, #232	; 0xe8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68db      	ldr	r3, [r3, #12]
 800b7a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	695b      	ldr	r3, [r3, #20]
 800b7aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b7ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7be:	f003 030f 	and.w	r3, r3, #15
 800b7c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b7c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d10f      	bne.n	800b7ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b7ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7d2:	f003 0320 	and.w	r3, r3, #32
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d009      	beq.n	800b7ee <HAL_UART_IRQHandler+0x66>
 800b7da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7de:	f003 0320 	and.w	r3, r3, #32
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 fce3 	bl	800c1b2 <UART_Receive_IT>
      return;
 800b7ec:	e25b      	b.n	800bca6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b7ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f000 80e1 	beq.w	800b9ba <HAL_UART_IRQHandler+0x232>
 800b7f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7fc:	f003 0301 	and.w	r3, r3, #1
 800b800:	2b00      	cmp	r3, #0
 800b802:	d106      	bne.n	800b812 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b808:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f000 80d4 	beq.w	800b9ba <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b816:	f003 0301 	and.w	r3, r3, #1
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00b      	beq.n	800b836 <HAL_UART_IRQHandler+0xae>
 800b81e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b826:	2b00      	cmp	r3, #0
 800b828:	d005      	beq.n	800b836 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b82e:	f043 0201 	orr.w	r2, r3, #1
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b83a:	f003 0304 	and.w	r3, r3, #4
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00b      	beq.n	800b85a <HAL_UART_IRQHandler+0xd2>
 800b842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b846:	f003 0301 	and.w	r3, r3, #1
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d005      	beq.n	800b85a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b852:	f043 0202 	orr.w	r2, r3, #2
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b85a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b85e:	f003 0302 	and.w	r3, r3, #2
 800b862:	2b00      	cmp	r3, #0
 800b864:	d00b      	beq.n	800b87e <HAL_UART_IRQHandler+0xf6>
 800b866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b86a:	f003 0301 	and.w	r3, r3, #1
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d005      	beq.n	800b87e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b876:	f043 0204 	orr.w	r2, r3, #4
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b87e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b882:	f003 0308 	and.w	r3, r3, #8
 800b886:	2b00      	cmp	r3, #0
 800b888:	d011      	beq.n	800b8ae <HAL_UART_IRQHandler+0x126>
 800b88a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b88e:	f003 0320 	and.w	r3, r3, #32
 800b892:	2b00      	cmp	r3, #0
 800b894:	d105      	bne.n	800b8a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b89a:	f003 0301 	and.w	r3, r3, #1
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d005      	beq.n	800b8ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a6:	f043 0208 	orr.w	r2, r3, #8
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f000 81f2 	beq.w	800bc9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b8b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8bc:	f003 0320 	and.w	r3, r3, #32
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d008      	beq.n	800b8d6 <HAL_UART_IRQHandler+0x14e>
 800b8c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8c8:	f003 0320 	and.w	r3, r3, #32
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 fc6e 	bl	800c1b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	695b      	ldr	r3, [r3, #20]
 800b8dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8e0:	2b40      	cmp	r3, #64	; 0x40
 800b8e2:	bf0c      	ite	eq
 800b8e4:	2301      	moveq	r3, #1
 800b8e6:	2300      	movne	r3, #0
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8f2:	f003 0308 	and.w	r3, r3, #8
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d103      	bne.n	800b902 <HAL_UART_IRQHandler+0x17a>
 800b8fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d051      	beq.n	800b9a6 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 fb74 	bl	800bff0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	695b      	ldr	r3, [r3, #20]
 800b90e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b912:	2b40      	cmp	r3, #64	; 0x40
 800b914:	d142      	bne.n	800b99c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3314      	adds	r3, #20
 800b91c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b920:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b924:	e853 3f00 	ldrex	r3, [r3]
 800b928:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b92c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b934:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	3314      	adds	r3, #20
 800b93e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b942:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b94a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b94e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b952:	e841 2300 	strex	r3, r2, [r1]
 800b956:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b95a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1d9      	bne.n	800b916 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b966:	2b00      	cmp	r3, #0
 800b968:	d013      	beq.n	800b992 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96e:	4a7f      	ldr	r2, [pc, #508]	; (800bb6c <HAL_UART_IRQHandler+0x3e4>)
 800b970:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b976:	4618      	mov	r0, r3
 800b978:	f7fa fc0e 	bl	8006198 <HAL_DMA_Abort_IT>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d019      	beq.n	800b9b6 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b98c:	4610      	mov	r0, r2
 800b98e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b990:	e011      	b.n	800b9b6 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b99a:	e00c      	b.n	800b9b6 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9a4:	e007      	b.n	800b9b6 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b9b4:	e172      	b.n	800bc9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9b6:	bf00      	nop
    return;
 800b9b8:	e170      	b.n	800bc9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	f040 814c 	bne.w	800bc5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b9c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9c8:	f003 0310 	and.w	r3, r3, #16
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 8145 	beq.w	800bc5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b9d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9d6:	f003 0310 	and.w	r3, r3, #16
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f000 813e 	beq.w	800bc5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	60bb      	str	r3, [r7, #8]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	60bb      	str	r3, [r7, #8]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	60bb      	str	r3, [r7, #8]
 800b9f4:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	695b      	ldr	r3, [r3, #20]
 800b9fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba00:	2b40      	cmp	r3, #64	; 0x40
 800ba02:	f040 80b5 	bne.w	800bb70 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba12:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f000 8142 	beq.w	800bca0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ba20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba24:	429a      	cmp	r2, r3
 800ba26:	f080 813b 	bcs.w	800bca0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba30:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba36:	69db      	ldr	r3, [r3, #28]
 800ba38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba3c:	f000 8088 	beq.w	800bb50 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	330c      	adds	r3, #12
 800ba46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba4e:	e853 3f00 	ldrex	r3, [r3]
 800ba52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ba56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	330c      	adds	r3, #12
 800ba68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ba6c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ba70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba74:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ba78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ba7c:	e841 2300 	strex	r3, r2, [r1]
 800ba80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ba84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d1d9      	bne.n	800ba40 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	3314      	adds	r3, #20
 800ba92:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba96:	e853 3f00 	ldrex	r3, [r3]
 800ba9a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ba9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba9e:	f023 0301 	bic.w	r3, r3, #1
 800baa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	3314      	adds	r3, #20
 800baac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bab0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bab4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bab8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800babc:	e841 2300 	strex	r3, r2, [r1]
 800bac0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1e1      	bne.n	800ba8c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	3314      	adds	r3, #20
 800bace:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bad2:	e853 3f00 	ldrex	r3, [r3]
 800bad6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bade:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	3314      	adds	r3, #20
 800bae8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800baec:	66fa      	str	r2, [r7, #108]	; 0x6c
 800baee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800baf2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800baf4:	e841 2300 	strex	r3, r2, [r1]
 800baf8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bafa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1e3      	bne.n	800bac8 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2220      	movs	r2, #32
 800bb04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	330c      	adds	r3, #12
 800bb14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb18:	e853 3f00 	ldrex	r3, [r3]
 800bb1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bb1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb20:	f023 0310 	bic.w	r3, r3, #16
 800bb24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	330c      	adds	r3, #12
 800bb2e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bb32:	65ba      	str	r2, [r7, #88]	; 0x58
 800bb34:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb3a:	e841 2300 	strex	r3, r2, [r1]
 800bb3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d1e3      	bne.n	800bb0e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fa fab4 	bl	80060b8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800bb5c:	b292      	uxth	r2, r2
 800bb5e:	1a8a      	subs	r2, r1, r2
 800bb60:	b292      	uxth	r2, r2
 800bb62:	4611      	mov	r1, r2
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bb68:	e09a      	b.n	800bca0 <HAL_UART_IRQHandler+0x518>
 800bb6a:	bf00      	nop
 800bb6c:	0800c0b7 	.word	0x0800c0b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f000 808c 	beq.w	800bca4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bb8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f000 8087 	beq.w	800bca4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	330c      	adds	r3, #12
 800bb9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba0:	e853 3f00 	ldrex	r3, [r3]
 800bba4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	330c      	adds	r3, #12
 800bbb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bbba:	647a      	str	r2, [r7, #68]	; 0x44
 800bbbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bbc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbc2:	e841 2300 	strex	r3, r2, [r1]
 800bbc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bbc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d1e3      	bne.n	800bb96 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	3314      	adds	r3, #20
 800bbd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd8:	e853 3f00 	ldrex	r3, [r3]
 800bbdc:	623b      	str	r3, [r7, #32]
   return(result);
 800bbde:	6a3b      	ldr	r3, [r7, #32]
 800bbe0:	f023 0301 	bic.w	r3, r3, #1
 800bbe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	3314      	adds	r3, #20
 800bbee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bbf2:	633a      	str	r2, [r7, #48]	; 0x30
 800bbf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbfa:	e841 2300 	strex	r3, r2, [r1]
 800bbfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d1e3      	bne.n	800bbce <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2220      	movs	r2, #32
 800bc0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	330c      	adds	r3, #12
 800bc1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	e853 3f00 	ldrex	r3, [r3]
 800bc22:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f023 0310 	bic.w	r3, r3, #16
 800bc2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	330c      	adds	r3, #12
 800bc34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bc38:	61fa      	str	r2, [r7, #28]
 800bc3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3c:	69b9      	ldr	r1, [r7, #24]
 800bc3e:	69fa      	ldr	r2, [r7, #28]
 800bc40:	e841 2300 	strex	r3, r2, [r1]
 800bc44:	617b      	str	r3, [r7, #20]
   return(result);
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d1e3      	bne.n	800bc14 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc50:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800bc54:	4611      	mov	r1, r2
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bc5a:	e023      	b.n	800bca4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bc5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d009      	beq.n	800bc7c <HAL_UART_IRQHandler+0x4f4>
 800bc68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d003      	beq.n	800bc7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 fa33 	bl	800c0e0 <UART_Transmit_IT>
    return;
 800bc7a:	e014      	b.n	800bca6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bc7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00e      	beq.n	800bca6 <HAL_UART_IRQHandler+0x51e>
 800bc88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d008      	beq.n	800bca6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 fa73 	bl	800c180 <UART_EndTransmit_IT>
    return;
 800bc9a:	e004      	b.n	800bca6 <HAL_UART_IRQHandler+0x51e>
    return;
 800bc9c:	bf00      	nop
 800bc9e:	e002      	b.n	800bca6 <HAL_UART_IRQHandler+0x51e>
      return;
 800bca0:	bf00      	nop
 800bca2:	e000      	b.n	800bca6 <HAL_UART_IRQHandler+0x51e>
      return;
 800bca4:	bf00      	nop
  }
}
 800bca6:	37e8      	adds	r7, #232	; 0xe8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bcb4:	bf00      	nop
 800bcb6:	370c      	adds	r7, #12
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800bcc8:	bf00      	nop
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bcdc:	bf00      	nop
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bcf0:	bf00      	nop
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bd04:	bf00      	nop
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800bd18:	bf00      	nop
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800bd2c:	bf00      	nop
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bd40:	bf00      	nop
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd58:	bf00      	nop
 800bd5a:	370c      	adds	r7, #12
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4a10      	ldr	r2, [pc, #64]	; (800bdb0 <UART_InitCallbacksToDefault+0x4c>)
 800bd70:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	4a0f      	ldr	r2, [pc, #60]	; (800bdb4 <UART_InitCallbacksToDefault+0x50>)
 800bd76:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4a0f      	ldr	r2, [pc, #60]	; (800bdb8 <UART_InitCallbacksToDefault+0x54>)
 800bd7c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4a0e      	ldr	r2, [pc, #56]	; (800bdbc <UART_InitCallbacksToDefault+0x58>)
 800bd82:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	4a0e      	ldr	r2, [pc, #56]	; (800bdc0 <UART_InitCallbacksToDefault+0x5c>)
 800bd88:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4a0d      	ldr	r2, [pc, #52]	; (800bdc4 <UART_InitCallbacksToDefault+0x60>)
 800bd8e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4a0d      	ldr	r2, [pc, #52]	; (800bdc8 <UART_InitCallbacksToDefault+0x64>)
 800bd94:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4a0c      	ldr	r2, [pc, #48]	; (800bdcc <UART_InitCallbacksToDefault+0x68>)
 800bd9a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	4a0c      	ldr	r2, [pc, #48]	; (800bdd0 <UART_InitCallbacksToDefault+0x6c>)
 800bda0:	669a      	str	r2, [r3, #104]	; 0x68

}
 800bda2:	bf00      	nop
 800bda4:	370c      	adds	r7, #12
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	0800bcc1 	.word	0x0800bcc1
 800bdb4:	0800bcad 	.word	0x0800bcad
 800bdb8:	0800bce9 	.word	0x0800bce9
 800bdbc:	0800bcd5 	.word	0x0800bcd5
 800bdc0:	0800bcfd 	.word	0x0800bcfd
 800bdc4:	0800bd11 	.word	0x0800bd11
 800bdc8:	0800bd25 	.word	0x0800bd25
 800bdcc:	0800bd39 	.word	0x0800bd39
 800bdd0:	0800bd4d 	.word	0x0800bd4d

0800bdd4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b090      	sub	sp, #64	; 0x40
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d137      	bne.n	800be60 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800bdf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bdf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	3314      	adds	r3, #20
 800bdfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be00:	e853 3f00 	ldrex	r3, [r3]
 800be04:	623b      	str	r3, [r7, #32]
   return(result);
 800be06:	6a3b      	ldr	r3, [r7, #32]
 800be08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800be0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	3314      	adds	r3, #20
 800be14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be16:	633a      	str	r2, [r7, #48]	; 0x30
 800be18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be1e:	e841 2300 	strex	r3, r2, [r1]
 800be22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1e5      	bne.n	800bdf6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	330c      	adds	r3, #12
 800be30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	e853 3f00 	ldrex	r3, [r3]
 800be38:	60fb      	str	r3, [r7, #12]
   return(result);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be40:	637b      	str	r3, [r7, #52]	; 0x34
 800be42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	330c      	adds	r3, #12
 800be48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be4a:	61fa      	str	r2, [r7, #28]
 800be4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be4e:	69b9      	ldr	r1, [r7, #24]
 800be50:	69fa      	ldr	r2, [r7, #28]
 800be52:	e841 2300 	strex	r3, r2, [r1]
 800be56:	617b      	str	r3, [r7, #20]
   return(result);
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1e5      	bne.n	800be2a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800be5e:	e003      	b.n	800be68 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800be60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800be66:	4798      	blx	r3
}
 800be68:	bf00      	nop
 800be6a:	3740      	adds	r7, #64	; 0x40
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be7c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be82:	68f8      	ldr	r0, [r7, #12]
 800be84:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be86:	bf00      	nop
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b084      	sub	sp, #16
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800be96:	2300      	movs	r3, #0
 800be98:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be9e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	695b      	ldr	r3, [r3, #20]
 800bea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beaa:	2b80      	cmp	r3, #128	; 0x80
 800beac:	bf0c      	ite	eq
 800beae:	2301      	moveq	r3, #1
 800beb0:	2300      	movne	r3, #0
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	2b21      	cmp	r3, #33	; 0x21
 800bec0:	d108      	bne.n	800bed4 <UART_DMAError+0x46>
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d005      	beq.n	800bed4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	2200      	movs	r2, #0
 800becc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bece:	68b8      	ldr	r0, [r7, #8]
 800bed0:	f000 f866 	bl	800bfa0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	695b      	ldr	r3, [r3, #20]
 800beda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bede:	2b40      	cmp	r3, #64	; 0x40
 800bee0:	bf0c      	ite	eq
 800bee2:	2301      	moveq	r3, #1
 800bee4:	2300      	movne	r3, #0
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	2b22      	cmp	r3, #34	; 0x22
 800bef4:	d108      	bne.n	800bf08 <UART_DMAError+0x7a>
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d005      	beq.n	800bf08 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	2200      	movs	r2, #0
 800bf00:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bf02:	68b8      	ldr	r0, [r7, #8]
 800bf04:	f000 f874 	bl	800bff0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0c:	f043 0210 	orr.w	r2, r3, #16
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf18:	68b8      	ldr	r0, [r7, #8]
 800bf1a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf1c:	bf00      	nop
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b085      	sub	sp, #20
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	4613      	mov	r3, r2
 800bf30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	68ba      	ldr	r2, [r7, #8]
 800bf36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	88fa      	ldrh	r2, [r7, #6]
 800bf3c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	88fa      	ldrh	r2, [r7, #6]
 800bf42:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2200      	movs	r2, #0
 800bf48:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2222      	movs	r2, #34	; 0x22
 800bf4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	691b      	ldr	r3, [r3, #16]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d007      	beq.n	800bf72 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	68da      	ldr	r2, [r3, #12]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf70:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	695a      	ldr	r2, [r3, #20]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f042 0201 	orr.w	r2, r2, #1
 800bf80:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	68da      	ldr	r2, [r3, #12]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f042 0220 	orr.w	r2, r2, #32
 800bf90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bf92:	2300      	movs	r3, #0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3714      	adds	r7, #20
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b089      	sub	sp, #36	; 0x24
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	330c      	adds	r3, #12
 800bfae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	e853 3f00 	ldrex	r3, [r3]
 800bfb6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bfbe:	61fb      	str	r3, [r7, #28]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	330c      	adds	r3, #12
 800bfc6:	69fa      	ldr	r2, [r7, #28]
 800bfc8:	61ba      	str	r2, [r7, #24]
 800bfca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfcc:	6979      	ldr	r1, [r7, #20]
 800bfce:	69ba      	ldr	r2, [r7, #24]
 800bfd0:	e841 2300 	strex	r3, r2, [r1]
 800bfd4:	613b      	str	r3, [r7, #16]
   return(result);
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d1e5      	bne.n	800bfa8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2220      	movs	r2, #32
 800bfe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800bfe4:	bf00      	nop
 800bfe6:	3724      	adds	r7, #36	; 0x24
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b095      	sub	sp, #84	; 0x54
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	330c      	adds	r3, #12
 800bffe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c002:	e853 3f00 	ldrex	r3, [r3]
 800c006:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c00e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	330c      	adds	r3, #12
 800c016:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c018:	643a      	str	r2, [r7, #64]	; 0x40
 800c01a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c01e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c020:	e841 2300 	strex	r3, r2, [r1]
 800c024:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1e5      	bne.n	800bff8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	3314      	adds	r3, #20
 800c032:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c034:	6a3b      	ldr	r3, [r7, #32]
 800c036:	e853 3f00 	ldrex	r3, [r3]
 800c03a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	f023 0301 	bic.w	r3, r3, #1
 800c042:	64bb      	str	r3, [r7, #72]	; 0x48
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	3314      	adds	r3, #20
 800c04a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c04c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c04e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c054:	e841 2300 	strex	r3, r2, [r1]
 800c058:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1e5      	bne.n	800c02c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c064:	2b01      	cmp	r3, #1
 800c066:	d119      	bne.n	800c09c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	330c      	adds	r3, #12
 800c06e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	e853 3f00 	ldrex	r3, [r3]
 800c076:	60bb      	str	r3, [r7, #8]
   return(result);
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	f023 0310 	bic.w	r3, r3, #16
 800c07e:	647b      	str	r3, [r7, #68]	; 0x44
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	330c      	adds	r3, #12
 800c086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c088:	61ba      	str	r2, [r7, #24]
 800c08a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c08c:	6979      	ldr	r1, [r7, #20]
 800c08e:	69ba      	ldr	r2, [r7, #24]
 800c090:	e841 2300 	strex	r3, r2, [r1]
 800c094:	613b      	str	r3, [r7, #16]
   return(result);
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d1e5      	bne.n	800c068 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2220      	movs	r2, #32
 800c0a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c0aa:	bf00      	nop
 800c0ac:	3754      	adds	r7, #84	; 0x54
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr

0800c0b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b084      	sub	sp, #16
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0d4:	68f8      	ldr	r0, [r7, #12]
 800c0d6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0d8:	bf00      	nop
 800c0da:	3710      	adds	r7, #16
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b085      	sub	sp, #20
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	2b21      	cmp	r3, #33	; 0x21
 800c0f2:	d13e      	bne.n	800c172 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0fc:	d114      	bne.n	800c128 <UART_Transmit_IT+0x48>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	691b      	ldr	r3, [r3, #16]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d110      	bne.n	800c128 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6a1b      	ldr	r3, [r3, #32]
 800c10a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	881b      	ldrh	r3, [r3, #0]
 800c110:	461a      	mov	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c11a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6a1b      	ldr	r3, [r3, #32]
 800c120:	1c9a      	adds	r2, r3, #2
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	621a      	str	r2, [r3, #32]
 800c126:	e008      	b.n	800c13a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6a1b      	ldr	r3, [r3, #32]
 800c12c:	1c59      	adds	r1, r3, #1
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	6211      	str	r1, [r2, #32]
 800c132:	781a      	ldrb	r2, [r3, #0]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c13e:	b29b      	uxth	r3, r3
 800c140:	3b01      	subs	r3, #1
 800c142:	b29b      	uxth	r3, r3
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	4619      	mov	r1, r3
 800c148:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10f      	bne.n	800c16e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	68da      	ldr	r2, [r3, #12]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c15c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	68da      	ldr	r2, [r3, #12]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c16c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c16e:	2300      	movs	r3, #0
 800c170:	e000      	b.n	800c174 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c172:	2302      	movs	r3, #2
  }
}
 800c174:	4618      	mov	r0, r3
 800c176:	3714      	adds	r7, #20
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	68da      	ldr	r2, [r3, #12]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c196:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2220      	movs	r2, #32
 800c19c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b08c      	sub	sp, #48	; 0x30
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	2b22      	cmp	r3, #34	; 0x22
 800c1c4:	f040 80ad 	bne.w	800c322 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1d0:	d117      	bne.n	800c202 <UART_Receive_IT+0x50>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	691b      	ldr	r3, [r3, #16]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d113      	bne.n	800c202 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1fa:	1c9a      	adds	r2, r3, #2
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	629a      	str	r2, [r3, #40]	; 0x28
 800c200:	e026      	b.n	800c250 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c206:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c208:	2300      	movs	r3, #0
 800c20a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c214:	d007      	beq.n	800c226 <UART_Receive_IT+0x74>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d10a      	bne.n	800c234 <UART_Receive_IT+0x82>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	691b      	ldr	r3, [r3, #16]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d106      	bne.n	800c234 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c230:	701a      	strb	r2, [r3, #0]
 800c232:	e008      	b.n	800c246 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c240:	b2da      	uxtb	r2, r3
 800c242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c244:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c24a:	1c5a      	adds	r2, r3, #1
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c254:	b29b      	uxth	r3, r3
 800c256:	3b01      	subs	r3, #1
 800c258:	b29b      	uxth	r3, r3
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	4619      	mov	r1, r3
 800c25e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c260:	2b00      	cmp	r3, #0
 800c262:	d15c      	bne.n	800c31e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	68da      	ldr	r2, [r3, #12]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f022 0220 	bic.w	r2, r2, #32
 800c272:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	68da      	ldr	r2, [r3, #12]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c282:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	695a      	ldr	r2, [r3, #20]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f022 0201 	bic.w	r2, r2, #1
 800c292:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2220      	movs	r2, #32
 800c298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d136      	bne.n	800c312 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	330c      	adds	r3, #12
 800c2b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	e853 3f00 	ldrex	r3, [r3]
 800c2b8:	613b      	str	r3, [r7, #16]
   return(result);
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	f023 0310 	bic.w	r3, r3, #16
 800c2c0:	627b      	str	r3, [r7, #36]	; 0x24
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	330c      	adds	r3, #12
 800c2c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2ca:	623a      	str	r2, [r7, #32]
 800c2cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ce:	69f9      	ldr	r1, [r7, #28]
 800c2d0:	6a3a      	ldr	r2, [r7, #32]
 800c2d2:	e841 2300 	strex	r3, r2, [r1]
 800c2d6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d1e5      	bne.n	800c2aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f003 0310 	and.w	r3, r3, #16
 800c2e8:	2b10      	cmp	r3, #16
 800c2ea:	d10a      	bne.n	800c302 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	60fb      	str	r3, [r7, #12]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	60fb      	str	r3, [r7, #12]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	60fb      	str	r3, [r7, #12]
 800c300:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c30a:	4611      	mov	r1, r2
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	4798      	blx	r3
 800c310:	e003      	b.n	800c31a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c31a:	2300      	movs	r3, #0
 800c31c:	e002      	b.n	800c324 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800c31e:	2300      	movs	r3, #0
 800c320:	e000      	b.n	800c324 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800c322:	2302      	movs	r3, #2
  }
}
 800c324:	4618      	mov	r0, r3
 800c326:	3730      	adds	r7, #48	; 0x30
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c32c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c330:	b0c0      	sub	sp, #256	; 0x100
 800c332:	af00      	add	r7, sp, #0
 800c334:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	691b      	ldr	r3, [r3, #16]
 800c340:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c348:	68d9      	ldr	r1, [r3, #12]
 800c34a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	ea40 0301 	orr.w	r3, r0, r1
 800c354:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c35a:	689a      	ldr	r2, [r3, #8]
 800c35c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c360:	691b      	ldr	r3, [r3, #16]
 800c362:	431a      	orrs	r2, r3
 800c364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c368:	695b      	ldr	r3, [r3, #20]
 800c36a:	431a      	orrs	r2, r3
 800c36c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c370:	69db      	ldr	r3, [r3, #28]
 800c372:	4313      	orrs	r3, r2
 800c374:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c384:	f021 010c 	bic.w	r1, r1, #12
 800c388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c392:	430b      	orrs	r3, r1
 800c394:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	695b      	ldr	r3, [r3, #20]
 800c39e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c3a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3a6:	6999      	ldr	r1, [r3, #24]
 800c3a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	ea40 0301 	orr.w	r3, r0, r1
 800c3b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c3b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3b8:	681a      	ldr	r2, [r3, #0]
 800c3ba:	4b8f      	ldr	r3, [pc, #572]	; (800c5f8 <UART_SetConfig+0x2cc>)
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d005      	beq.n	800c3cc <UART_SetConfig+0xa0>
 800c3c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3c4:	681a      	ldr	r2, [r3, #0]
 800c3c6:	4b8d      	ldr	r3, [pc, #564]	; (800c5fc <UART_SetConfig+0x2d0>)
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d104      	bne.n	800c3d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c3cc:	f7fd f9b0 	bl	8009730 <HAL_RCC_GetPCLK2Freq>
 800c3d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c3d4:	e003      	b.n	800c3de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c3d6:	f7fd f997 	bl	8009708 <HAL_RCC_GetPCLK1Freq>
 800c3da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c3de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3e2:	69db      	ldr	r3, [r3, #28]
 800c3e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3e8:	f040 810c 	bne.w	800c604 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c3ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c3f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c3fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c3fe:	4622      	mov	r2, r4
 800c400:	462b      	mov	r3, r5
 800c402:	1891      	adds	r1, r2, r2
 800c404:	65b9      	str	r1, [r7, #88]	; 0x58
 800c406:	415b      	adcs	r3, r3
 800c408:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c40a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c40e:	4621      	mov	r1, r4
 800c410:	eb12 0801 	adds.w	r8, r2, r1
 800c414:	4629      	mov	r1, r5
 800c416:	eb43 0901 	adc.w	r9, r3, r1
 800c41a:	f04f 0200 	mov.w	r2, #0
 800c41e:	f04f 0300 	mov.w	r3, #0
 800c422:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c426:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c42a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c42e:	4690      	mov	r8, r2
 800c430:	4699      	mov	r9, r3
 800c432:	4623      	mov	r3, r4
 800c434:	eb18 0303 	adds.w	r3, r8, r3
 800c438:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c43c:	462b      	mov	r3, r5
 800c43e:	eb49 0303 	adc.w	r3, r9, r3
 800c442:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	2200      	movs	r2, #0
 800c44e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c452:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c456:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c45a:	460b      	mov	r3, r1
 800c45c:	18db      	adds	r3, r3, r3
 800c45e:	653b      	str	r3, [r7, #80]	; 0x50
 800c460:	4613      	mov	r3, r2
 800c462:	eb42 0303 	adc.w	r3, r2, r3
 800c466:	657b      	str	r3, [r7, #84]	; 0x54
 800c468:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c46c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c470:	f7f4 fc12 	bl	8000c98 <__aeabi_uldivmod>
 800c474:	4602      	mov	r2, r0
 800c476:	460b      	mov	r3, r1
 800c478:	4b61      	ldr	r3, [pc, #388]	; (800c600 <UART_SetConfig+0x2d4>)
 800c47a:	fba3 2302 	umull	r2, r3, r3, r2
 800c47e:	095b      	lsrs	r3, r3, #5
 800c480:	011c      	lsls	r4, r3, #4
 800c482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c486:	2200      	movs	r2, #0
 800c488:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c48c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c490:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c494:	4642      	mov	r2, r8
 800c496:	464b      	mov	r3, r9
 800c498:	1891      	adds	r1, r2, r2
 800c49a:	64b9      	str	r1, [r7, #72]	; 0x48
 800c49c:	415b      	adcs	r3, r3
 800c49e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c4a4:	4641      	mov	r1, r8
 800c4a6:	eb12 0a01 	adds.w	sl, r2, r1
 800c4aa:	4649      	mov	r1, r9
 800c4ac:	eb43 0b01 	adc.w	fp, r3, r1
 800c4b0:	f04f 0200 	mov.w	r2, #0
 800c4b4:	f04f 0300 	mov.w	r3, #0
 800c4b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c4bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c4c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c4c4:	4692      	mov	sl, r2
 800c4c6:	469b      	mov	fp, r3
 800c4c8:	4643      	mov	r3, r8
 800c4ca:	eb1a 0303 	adds.w	r3, sl, r3
 800c4ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c4d2:	464b      	mov	r3, r9
 800c4d4:	eb4b 0303 	adc.w	r3, fp, r3
 800c4d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c4dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c4e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c4ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	18db      	adds	r3, r3, r3
 800c4f4:	643b      	str	r3, [r7, #64]	; 0x40
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	eb42 0303 	adc.w	r3, r2, r3
 800c4fc:	647b      	str	r3, [r7, #68]	; 0x44
 800c4fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c502:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c506:	f7f4 fbc7 	bl	8000c98 <__aeabi_uldivmod>
 800c50a:	4602      	mov	r2, r0
 800c50c:	460b      	mov	r3, r1
 800c50e:	4611      	mov	r1, r2
 800c510:	4b3b      	ldr	r3, [pc, #236]	; (800c600 <UART_SetConfig+0x2d4>)
 800c512:	fba3 2301 	umull	r2, r3, r3, r1
 800c516:	095b      	lsrs	r3, r3, #5
 800c518:	2264      	movs	r2, #100	; 0x64
 800c51a:	fb02 f303 	mul.w	r3, r2, r3
 800c51e:	1acb      	subs	r3, r1, r3
 800c520:	00db      	lsls	r3, r3, #3
 800c522:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c526:	4b36      	ldr	r3, [pc, #216]	; (800c600 <UART_SetConfig+0x2d4>)
 800c528:	fba3 2302 	umull	r2, r3, r3, r2
 800c52c:	095b      	lsrs	r3, r3, #5
 800c52e:	005b      	lsls	r3, r3, #1
 800c530:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c534:	441c      	add	r4, r3
 800c536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c53a:	2200      	movs	r2, #0
 800c53c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c540:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c544:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c548:	4642      	mov	r2, r8
 800c54a:	464b      	mov	r3, r9
 800c54c:	1891      	adds	r1, r2, r2
 800c54e:	63b9      	str	r1, [r7, #56]	; 0x38
 800c550:	415b      	adcs	r3, r3
 800c552:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c554:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c558:	4641      	mov	r1, r8
 800c55a:	1851      	adds	r1, r2, r1
 800c55c:	6339      	str	r1, [r7, #48]	; 0x30
 800c55e:	4649      	mov	r1, r9
 800c560:	414b      	adcs	r3, r1
 800c562:	637b      	str	r3, [r7, #52]	; 0x34
 800c564:	f04f 0200 	mov.w	r2, #0
 800c568:	f04f 0300 	mov.w	r3, #0
 800c56c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c570:	4659      	mov	r1, fp
 800c572:	00cb      	lsls	r3, r1, #3
 800c574:	4651      	mov	r1, sl
 800c576:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c57a:	4651      	mov	r1, sl
 800c57c:	00ca      	lsls	r2, r1, #3
 800c57e:	4610      	mov	r0, r2
 800c580:	4619      	mov	r1, r3
 800c582:	4603      	mov	r3, r0
 800c584:	4642      	mov	r2, r8
 800c586:	189b      	adds	r3, r3, r2
 800c588:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c58c:	464b      	mov	r3, r9
 800c58e:	460a      	mov	r2, r1
 800c590:	eb42 0303 	adc.w	r3, r2, r3
 800c594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c5a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c5a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	18db      	adds	r3, r3, r3
 800c5b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	eb42 0303 	adc.w	r3, r2, r3
 800c5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c5be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c5c2:	f7f4 fb69 	bl	8000c98 <__aeabi_uldivmod>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	4b0d      	ldr	r3, [pc, #52]	; (800c600 <UART_SetConfig+0x2d4>)
 800c5cc:	fba3 1302 	umull	r1, r3, r3, r2
 800c5d0:	095b      	lsrs	r3, r3, #5
 800c5d2:	2164      	movs	r1, #100	; 0x64
 800c5d4:	fb01 f303 	mul.w	r3, r1, r3
 800c5d8:	1ad3      	subs	r3, r2, r3
 800c5da:	00db      	lsls	r3, r3, #3
 800c5dc:	3332      	adds	r3, #50	; 0x32
 800c5de:	4a08      	ldr	r2, [pc, #32]	; (800c600 <UART_SetConfig+0x2d4>)
 800c5e0:	fba2 2303 	umull	r2, r3, r2, r3
 800c5e4:	095b      	lsrs	r3, r3, #5
 800c5e6:	f003 0207 	and.w	r2, r3, #7
 800c5ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4422      	add	r2, r4
 800c5f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c5f4:	e105      	b.n	800c802 <UART_SetConfig+0x4d6>
 800c5f6:	bf00      	nop
 800c5f8:	40011000 	.word	0x40011000
 800c5fc:	40011400 	.word	0x40011400
 800c600:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c608:	2200      	movs	r2, #0
 800c60a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c60e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c612:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c616:	4642      	mov	r2, r8
 800c618:	464b      	mov	r3, r9
 800c61a:	1891      	adds	r1, r2, r2
 800c61c:	6239      	str	r1, [r7, #32]
 800c61e:	415b      	adcs	r3, r3
 800c620:	627b      	str	r3, [r7, #36]	; 0x24
 800c622:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c626:	4641      	mov	r1, r8
 800c628:	1854      	adds	r4, r2, r1
 800c62a:	4649      	mov	r1, r9
 800c62c:	eb43 0501 	adc.w	r5, r3, r1
 800c630:	f04f 0200 	mov.w	r2, #0
 800c634:	f04f 0300 	mov.w	r3, #0
 800c638:	00eb      	lsls	r3, r5, #3
 800c63a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c63e:	00e2      	lsls	r2, r4, #3
 800c640:	4614      	mov	r4, r2
 800c642:	461d      	mov	r5, r3
 800c644:	4643      	mov	r3, r8
 800c646:	18e3      	adds	r3, r4, r3
 800c648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c64c:	464b      	mov	r3, r9
 800c64e:	eb45 0303 	adc.w	r3, r5, r3
 800c652:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	2200      	movs	r2, #0
 800c65e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c662:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c666:	f04f 0200 	mov.w	r2, #0
 800c66a:	f04f 0300 	mov.w	r3, #0
 800c66e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c672:	4629      	mov	r1, r5
 800c674:	008b      	lsls	r3, r1, #2
 800c676:	4621      	mov	r1, r4
 800c678:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c67c:	4621      	mov	r1, r4
 800c67e:	008a      	lsls	r2, r1, #2
 800c680:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c684:	f7f4 fb08 	bl	8000c98 <__aeabi_uldivmod>
 800c688:	4602      	mov	r2, r0
 800c68a:	460b      	mov	r3, r1
 800c68c:	4b60      	ldr	r3, [pc, #384]	; (800c810 <UART_SetConfig+0x4e4>)
 800c68e:	fba3 2302 	umull	r2, r3, r3, r2
 800c692:	095b      	lsrs	r3, r3, #5
 800c694:	011c      	lsls	r4, r3, #4
 800c696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c69a:	2200      	movs	r2, #0
 800c69c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c6a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c6a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c6a8:	4642      	mov	r2, r8
 800c6aa:	464b      	mov	r3, r9
 800c6ac:	1891      	adds	r1, r2, r2
 800c6ae:	61b9      	str	r1, [r7, #24]
 800c6b0:	415b      	adcs	r3, r3
 800c6b2:	61fb      	str	r3, [r7, #28]
 800c6b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c6b8:	4641      	mov	r1, r8
 800c6ba:	1851      	adds	r1, r2, r1
 800c6bc:	6139      	str	r1, [r7, #16]
 800c6be:	4649      	mov	r1, r9
 800c6c0:	414b      	adcs	r3, r1
 800c6c2:	617b      	str	r3, [r7, #20]
 800c6c4:	f04f 0200 	mov.w	r2, #0
 800c6c8:	f04f 0300 	mov.w	r3, #0
 800c6cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c6d0:	4659      	mov	r1, fp
 800c6d2:	00cb      	lsls	r3, r1, #3
 800c6d4:	4651      	mov	r1, sl
 800c6d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c6da:	4651      	mov	r1, sl
 800c6dc:	00ca      	lsls	r2, r1, #3
 800c6de:	4610      	mov	r0, r2
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	4642      	mov	r2, r8
 800c6e6:	189b      	adds	r3, r3, r2
 800c6e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c6ec:	464b      	mov	r3, r9
 800c6ee:	460a      	mov	r2, r1
 800c6f0:	eb42 0303 	adc.w	r3, r2, r3
 800c6f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c6f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	67bb      	str	r3, [r7, #120]	; 0x78
 800c702:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c704:	f04f 0200 	mov.w	r2, #0
 800c708:	f04f 0300 	mov.w	r3, #0
 800c70c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c710:	4649      	mov	r1, r9
 800c712:	008b      	lsls	r3, r1, #2
 800c714:	4641      	mov	r1, r8
 800c716:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c71a:	4641      	mov	r1, r8
 800c71c:	008a      	lsls	r2, r1, #2
 800c71e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c722:	f7f4 fab9 	bl	8000c98 <__aeabi_uldivmod>
 800c726:	4602      	mov	r2, r0
 800c728:	460b      	mov	r3, r1
 800c72a:	4b39      	ldr	r3, [pc, #228]	; (800c810 <UART_SetConfig+0x4e4>)
 800c72c:	fba3 1302 	umull	r1, r3, r3, r2
 800c730:	095b      	lsrs	r3, r3, #5
 800c732:	2164      	movs	r1, #100	; 0x64
 800c734:	fb01 f303 	mul.w	r3, r1, r3
 800c738:	1ad3      	subs	r3, r2, r3
 800c73a:	011b      	lsls	r3, r3, #4
 800c73c:	3332      	adds	r3, #50	; 0x32
 800c73e:	4a34      	ldr	r2, [pc, #208]	; (800c810 <UART_SetConfig+0x4e4>)
 800c740:	fba2 2303 	umull	r2, r3, r2, r3
 800c744:	095b      	lsrs	r3, r3, #5
 800c746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c74a:	441c      	add	r4, r3
 800c74c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c750:	2200      	movs	r2, #0
 800c752:	673b      	str	r3, [r7, #112]	; 0x70
 800c754:	677a      	str	r2, [r7, #116]	; 0x74
 800c756:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c75a:	4642      	mov	r2, r8
 800c75c:	464b      	mov	r3, r9
 800c75e:	1891      	adds	r1, r2, r2
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	415b      	adcs	r3, r3
 800c764:	60fb      	str	r3, [r7, #12]
 800c766:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c76a:	4641      	mov	r1, r8
 800c76c:	1851      	adds	r1, r2, r1
 800c76e:	6039      	str	r1, [r7, #0]
 800c770:	4649      	mov	r1, r9
 800c772:	414b      	adcs	r3, r1
 800c774:	607b      	str	r3, [r7, #4]
 800c776:	f04f 0200 	mov.w	r2, #0
 800c77a:	f04f 0300 	mov.w	r3, #0
 800c77e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c782:	4659      	mov	r1, fp
 800c784:	00cb      	lsls	r3, r1, #3
 800c786:	4651      	mov	r1, sl
 800c788:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c78c:	4651      	mov	r1, sl
 800c78e:	00ca      	lsls	r2, r1, #3
 800c790:	4610      	mov	r0, r2
 800c792:	4619      	mov	r1, r3
 800c794:	4603      	mov	r3, r0
 800c796:	4642      	mov	r2, r8
 800c798:	189b      	adds	r3, r3, r2
 800c79a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c79c:	464b      	mov	r3, r9
 800c79e:	460a      	mov	r2, r1
 800c7a0:	eb42 0303 	adc.w	r3, r2, r3
 800c7a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c7a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	663b      	str	r3, [r7, #96]	; 0x60
 800c7b0:	667a      	str	r2, [r7, #100]	; 0x64
 800c7b2:	f04f 0200 	mov.w	r2, #0
 800c7b6:	f04f 0300 	mov.w	r3, #0
 800c7ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c7be:	4649      	mov	r1, r9
 800c7c0:	008b      	lsls	r3, r1, #2
 800c7c2:	4641      	mov	r1, r8
 800c7c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c7c8:	4641      	mov	r1, r8
 800c7ca:	008a      	lsls	r2, r1, #2
 800c7cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c7d0:	f7f4 fa62 	bl	8000c98 <__aeabi_uldivmod>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	4b0d      	ldr	r3, [pc, #52]	; (800c810 <UART_SetConfig+0x4e4>)
 800c7da:	fba3 1302 	umull	r1, r3, r3, r2
 800c7de:	095b      	lsrs	r3, r3, #5
 800c7e0:	2164      	movs	r1, #100	; 0x64
 800c7e2:	fb01 f303 	mul.w	r3, r1, r3
 800c7e6:	1ad3      	subs	r3, r2, r3
 800c7e8:	011b      	lsls	r3, r3, #4
 800c7ea:	3332      	adds	r3, #50	; 0x32
 800c7ec:	4a08      	ldr	r2, [pc, #32]	; (800c810 <UART_SetConfig+0x4e4>)
 800c7ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c7f2:	095b      	lsrs	r3, r3, #5
 800c7f4:	f003 020f 	and.w	r2, r3, #15
 800c7f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4422      	add	r2, r4
 800c800:	609a      	str	r2, [r3, #8]
}
 800c802:	bf00      	nop
 800c804:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c808:	46bd      	mov	sp, r7
 800c80a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c80e:	bf00      	nop
 800c810:	51eb851f 	.word	0x51eb851f

0800c814 <__errno>:
 800c814:	4b01      	ldr	r3, [pc, #4]	; (800c81c <__errno+0x8>)
 800c816:	6818      	ldr	r0, [r3, #0]
 800c818:	4770      	bx	lr
 800c81a:	bf00      	nop
 800c81c:	2000025c 	.word	0x2000025c

0800c820 <__libc_init_array>:
 800c820:	b570      	push	{r4, r5, r6, lr}
 800c822:	4d0d      	ldr	r5, [pc, #52]	; (800c858 <__libc_init_array+0x38>)
 800c824:	4c0d      	ldr	r4, [pc, #52]	; (800c85c <__libc_init_array+0x3c>)
 800c826:	1b64      	subs	r4, r4, r5
 800c828:	10a4      	asrs	r4, r4, #2
 800c82a:	2600      	movs	r6, #0
 800c82c:	42a6      	cmp	r6, r4
 800c82e:	d109      	bne.n	800c844 <__libc_init_array+0x24>
 800c830:	4d0b      	ldr	r5, [pc, #44]	; (800c860 <__libc_init_array+0x40>)
 800c832:	4c0c      	ldr	r4, [pc, #48]	; (800c864 <__libc_init_array+0x44>)
 800c834:	f004 fddc 	bl	80113f0 <_init>
 800c838:	1b64      	subs	r4, r4, r5
 800c83a:	10a4      	asrs	r4, r4, #2
 800c83c:	2600      	movs	r6, #0
 800c83e:	42a6      	cmp	r6, r4
 800c840:	d105      	bne.n	800c84e <__libc_init_array+0x2e>
 800c842:	bd70      	pop	{r4, r5, r6, pc}
 800c844:	f855 3b04 	ldr.w	r3, [r5], #4
 800c848:	4798      	blx	r3
 800c84a:	3601      	adds	r6, #1
 800c84c:	e7ee      	b.n	800c82c <__libc_init_array+0xc>
 800c84e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c852:	4798      	blx	r3
 800c854:	3601      	adds	r6, #1
 800c856:	e7f2      	b.n	800c83e <__libc_init_array+0x1e>
 800c858:	080118ec 	.word	0x080118ec
 800c85c:	080118ec 	.word	0x080118ec
 800c860:	080118ec 	.word	0x080118ec
 800c864:	080118f0 	.word	0x080118f0

0800c868 <memcpy>:
 800c868:	440a      	add	r2, r1
 800c86a:	4291      	cmp	r1, r2
 800c86c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c870:	d100      	bne.n	800c874 <memcpy+0xc>
 800c872:	4770      	bx	lr
 800c874:	b510      	push	{r4, lr}
 800c876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c87a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c87e:	4291      	cmp	r1, r2
 800c880:	d1f9      	bne.n	800c876 <memcpy+0xe>
 800c882:	bd10      	pop	{r4, pc}

0800c884 <memset>:
 800c884:	4402      	add	r2, r0
 800c886:	4603      	mov	r3, r0
 800c888:	4293      	cmp	r3, r2
 800c88a:	d100      	bne.n	800c88e <memset+0xa>
 800c88c:	4770      	bx	lr
 800c88e:	f803 1b01 	strb.w	r1, [r3], #1
 800c892:	e7f9      	b.n	800c888 <memset+0x4>

0800c894 <__cvt>:
 800c894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c898:	ec55 4b10 	vmov	r4, r5, d0
 800c89c:	2d00      	cmp	r5, #0
 800c89e:	460e      	mov	r6, r1
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	462b      	mov	r3, r5
 800c8a4:	bfbb      	ittet	lt
 800c8a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c8aa:	461d      	movlt	r5, r3
 800c8ac:	2300      	movge	r3, #0
 800c8ae:	232d      	movlt	r3, #45	; 0x2d
 800c8b0:	700b      	strb	r3, [r1, #0]
 800c8b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c8b8:	4691      	mov	r9, r2
 800c8ba:	f023 0820 	bic.w	r8, r3, #32
 800c8be:	bfbc      	itt	lt
 800c8c0:	4622      	movlt	r2, r4
 800c8c2:	4614      	movlt	r4, r2
 800c8c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c8c8:	d005      	beq.n	800c8d6 <__cvt+0x42>
 800c8ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c8ce:	d100      	bne.n	800c8d2 <__cvt+0x3e>
 800c8d0:	3601      	adds	r6, #1
 800c8d2:	2102      	movs	r1, #2
 800c8d4:	e000      	b.n	800c8d8 <__cvt+0x44>
 800c8d6:	2103      	movs	r1, #3
 800c8d8:	ab03      	add	r3, sp, #12
 800c8da:	9301      	str	r3, [sp, #4]
 800c8dc:	ab02      	add	r3, sp, #8
 800c8de:	9300      	str	r3, [sp, #0]
 800c8e0:	ec45 4b10 	vmov	d0, r4, r5
 800c8e4:	4653      	mov	r3, sl
 800c8e6:	4632      	mov	r2, r6
 800c8e8:	f001 fdae 	bl	800e448 <_dtoa_r>
 800c8ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c8f0:	4607      	mov	r7, r0
 800c8f2:	d102      	bne.n	800c8fa <__cvt+0x66>
 800c8f4:	f019 0f01 	tst.w	r9, #1
 800c8f8:	d022      	beq.n	800c940 <__cvt+0xac>
 800c8fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c8fe:	eb07 0906 	add.w	r9, r7, r6
 800c902:	d110      	bne.n	800c926 <__cvt+0x92>
 800c904:	783b      	ldrb	r3, [r7, #0]
 800c906:	2b30      	cmp	r3, #48	; 0x30
 800c908:	d10a      	bne.n	800c920 <__cvt+0x8c>
 800c90a:	2200      	movs	r2, #0
 800c90c:	2300      	movs	r3, #0
 800c90e:	4620      	mov	r0, r4
 800c910:	4629      	mov	r1, r5
 800c912:	f7f4 f8e1 	bl	8000ad8 <__aeabi_dcmpeq>
 800c916:	b918      	cbnz	r0, 800c920 <__cvt+0x8c>
 800c918:	f1c6 0601 	rsb	r6, r6, #1
 800c91c:	f8ca 6000 	str.w	r6, [sl]
 800c920:	f8da 3000 	ldr.w	r3, [sl]
 800c924:	4499      	add	r9, r3
 800c926:	2200      	movs	r2, #0
 800c928:	2300      	movs	r3, #0
 800c92a:	4620      	mov	r0, r4
 800c92c:	4629      	mov	r1, r5
 800c92e:	f7f4 f8d3 	bl	8000ad8 <__aeabi_dcmpeq>
 800c932:	b108      	cbz	r0, 800c938 <__cvt+0xa4>
 800c934:	f8cd 900c 	str.w	r9, [sp, #12]
 800c938:	2230      	movs	r2, #48	; 0x30
 800c93a:	9b03      	ldr	r3, [sp, #12]
 800c93c:	454b      	cmp	r3, r9
 800c93e:	d307      	bcc.n	800c950 <__cvt+0xbc>
 800c940:	9b03      	ldr	r3, [sp, #12]
 800c942:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c944:	1bdb      	subs	r3, r3, r7
 800c946:	4638      	mov	r0, r7
 800c948:	6013      	str	r3, [r2, #0]
 800c94a:	b004      	add	sp, #16
 800c94c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c950:	1c59      	adds	r1, r3, #1
 800c952:	9103      	str	r1, [sp, #12]
 800c954:	701a      	strb	r2, [r3, #0]
 800c956:	e7f0      	b.n	800c93a <__cvt+0xa6>

0800c958 <__exponent>:
 800c958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c95a:	4603      	mov	r3, r0
 800c95c:	2900      	cmp	r1, #0
 800c95e:	bfb8      	it	lt
 800c960:	4249      	neglt	r1, r1
 800c962:	f803 2b02 	strb.w	r2, [r3], #2
 800c966:	bfb4      	ite	lt
 800c968:	222d      	movlt	r2, #45	; 0x2d
 800c96a:	222b      	movge	r2, #43	; 0x2b
 800c96c:	2909      	cmp	r1, #9
 800c96e:	7042      	strb	r2, [r0, #1]
 800c970:	dd2a      	ble.n	800c9c8 <__exponent+0x70>
 800c972:	f10d 0407 	add.w	r4, sp, #7
 800c976:	46a4      	mov	ip, r4
 800c978:	270a      	movs	r7, #10
 800c97a:	46a6      	mov	lr, r4
 800c97c:	460a      	mov	r2, r1
 800c97e:	fb91 f6f7 	sdiv	r6, r1, r7
 800c982:	fb07 1516 	mls	r5, r7, r6, r1
 800c986:	3530      	adds	r5, #48	; 0x30
 800c988:	2a63      	cmp	r2, #99	; 0x63
 800c98a:	f104 34ff 	add.w	r4, r4, #4294967295
 800c98e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c992:	4631      	mov	r1, r6
 800c994:	dcf1      	bgt.n	800c97a <__exponent+0x22>
 800c996:	3130      	adds	r1, #48	; 0x30
 800c998:	f1ae 0502 	sub.w	r5, lr, #2
 800c99c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c9a0:	1c44      	adds	r4, r0, #1
 800c9a2:	4629      	mov	r1, r5
 800c9a4:	4561      	cmp	r1, ip
 800c9a6:	d30a      	bcc.n	800c9be <__exponent+0x66>
 800c9a8:	f10d 0209 	add.w	r2, sp, #9
 800c9ac:	eba2 020e 	sub.w	r2, r2, lr
 800c9b0:	4565      	cmp	r5, ip
 800c9b2:	bf88      	it	hi
 800c9b4:	2200      	movhi	r2, #0
 800c9b6:	4413      	add	r3, r2
 800c9b8:	1a18      	subs	r0, r3, r0
 800c9ba:	b003      	add	sp, #12
 800c9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c9c6:	e7ed      	b.n	800c9a4 <__exponent+0x4c>
 800c9c8:	2330      	movs	r3, #48	; 0x30
 800c9ca:	3130      	adds	r1, #48	; 0x30
 800c9cc:	7083      	strb	r3, [r0, #2]
 800c9ce:	70c1      	strb	r1, [r0, #3]
 800c9d0:	1d03      	adds	r3, r0, #4
 800c9d2:	e7f1      	b.n	800c9b8 <__exponent+0x60>

0800c9d4 <_printf_float>:
 800c9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d8:	ed2d 8b02 	vpush	{d8}
 800c9dc:	b08d      	sub	sp, #52	; 0x34
 800c9de:	460c      	mov	r4, r1
 800c9e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c9e4:	4616      	mov	r6, r2
 800c9e6:	461f      	mov	r7, r3
 800c9e8:	4605      	mov	r5, r0
 800c9ea:	f002 fe8b 	bl	800f704 <_localeconv_r>
 800c9ee:	f8d0 a000 	ldr.w	sl, [r0]
 800c9f2:	4650      	mov	r0, sl
 800c9f4:	f7f3 fbf4 	bl	80001e0 <strlen>
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	930a      	str	r3, [sp, #40]	; 0x28
 800c9fc:	6823      	ldr	r3, [r4, #0]
 800c9fe:	9305      	str	r3, [sp, #20]
 800ca00:	f8d8 3000 	ldr.w	r3, [r8]
 800ca04:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ca08:	3307      	adds	r3, #7
 800ca0a:	f023 0307 	bic.w	r3, r3, #7
 800ca0e:	f103 0208 	add.w	r2, r3, #8
 800ca12:	f8c8 2000 	str.w	r2, [r8]
 800ca16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ca1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ca22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca26:	9307      	str	r3, [sp, #28]
 800ca28:	f8cd 8018 	str.w	r8, [sp, #24]
 800ca2c:	ee08 0a10 	vmov	s16, r0
 800ca30:	4b9f      	ldr	r3, [pc, #636]	; (800ccb0 <_printf_float+0x2dc>)
 800ca32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca36:	f04f 32ff 	mov.w	r2, #4294967295
 800ca3a:	f7f4 f87f 	bl	8000b3c <__aeabi_dcmpun>
 800ca3e:	bb88      	cbnz	r0, 800caa4 <_printf_float+0xd0>
 800ca40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca44:	4b9a      	ldr	r3, [pc, #616]	; (800ccb0 <_printf_float+0x2dc>)
 800ca46:	f04f 32ff 	mov.w	r2, #4294967295
 800ca4a:	f7f4 f859 	bl	8000b00 <__aeabi_dcmple>
 800ca4e:	bb48      	cbnz	r0, 800caa4 <_printf_float+0xd0>
 800ca50:	2200      	movs	r2, #0
 800ca52:	2300      	movs	r3, #0
 800ca54:	4640      	mov	r0, r8
 800ca56:	4649      	mov	r1, r9
 800ca58:	f7f4 f848 	bl	8000aec <__aeabi_dcmplt>
 800ca5c:	b110      	cbz	r0, 800ca64 <_printf_float+0x90>
 800ca5e:	232d      	movs	r3, #45	; 0x2d
 800ca60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca64:	4b93      	ldr	r3, [pc, #588]	; (800ccb4 <_printf_float+0x2e0>)
 800ca66:	4894      	ldr	r0, [pc, #592]	; (800ccb8 <_printf_float+0x2e4>)
 800ca68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ca6c:	bf94      	ite	ls
 800ca6e:	4698      	movls	r8, r3
 800ca70:	4680      	movhi	r8, r0
 800ca72:	2303      	movs	r3, #3
 800ca74:	6123      	str	r3, [r4, #16]
 800ca76:	9b05      	ldr	r3, [sp, #20]
 800ca78:	f023 0204 	bic.w	r2, r3, #4
 800ca7c:	6022      	str	r2, [r4, #0]
 800ca7e:	f04f 0900 	mov.w	r9, #0
 800ca82:	9700      	str	r7, [sp, #0]
 800ca84:	4633      	mov	r3, r6
 800ca86:	aa0b      	add	r2, sp, #44	; 0x2c
 800ca88:	4621      	mov	r1, r4
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	f000 f9d8 	bl	800ce40 <_printf_common>
 800ca90:	3001      	adds	r0, #1
 800ca92:	f040 8090 	bne.w	800cbb6 <_printf_float+0x1e2>
 800ca96:	f04f 30ff 	mov.w	r0, #4294967295
 800ca9a:	b00d      	add	sp, #52	; 0x34
 800ca9c:	ecbd 8b02 	vpop	{d8}
 800caa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa4:	4642      	mov	r2, r8
 800caa6:	464b      	mov	r3, r9
 800caa8:	4640      	mov	r0, r8
 800caaa:	4649      	mov	r1, r9
 800caac:	f7f4 f846 	bl	8000b3c <__aeabi_dcmpun>
 800cab0:	b140      	cbz	r0, 800cac4 <_printf_float+0xf0>
 800cab2:	464b      	mov	r3, r9
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	bfbc      	itt	lt
 800cab8:	232d      	movlt	r3, #45	; 0x2d
 800caba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cabe:	487f      	ldr	r0, [pc, #508]	; (800ccbc <_printf_float+0x2e8>)
 800cac0:	4b7f      	ldr	r3, [pc, #508]	; (800ccc0 <_printf_float+0x2ec>)
 800cac2:	e7d1      	b.n	800ca68 <_printf_float+0x94>
 800cac4:	6863      	ldr	r3, [r4, #4]
 800cac6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800caca:	9206      	str	r2, [sp, #24]
 800cacc:	1c5a      	adds	r2, r3, #1
 800cace:	d13f      	bne.n	800cb50 <_printf_float+0x17c>
 800cad0:	2306      	movs	r3, #6
 800cad2:	6063      	str	r3, [r4, #4]
 800cad4:	9b05      	ldr	r3, [sp, #20]
 800cad6:	6861      	ldr	r1, [r4, #4]
 800cad8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cadc:	2300      	movs	r3, #0
 800cade:	9303      	str	r3, [sp, #12]
 800cae0:	ab0a      	add	r3, sp, #40	; 0x28
 800cae2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cae6:	ab09      	add	r3, sp, #36	; 0x24
 800cae8:	ec49 8b10 	vmov	d0, r8, r9
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	6022      	str	r2, [r4, #0]
 800caf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800caf4:	4628      	mov	r0, r5
 800caf6:	f7ff fecd 	bl	800c894 <__cvt>
 800cafa:	9b06      	ldr	r3, [sp, #24]
 800cafc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cafe:	2b47      	cmp	r3, #71	; 0x47
 800cb00:	4680      	mov	r8, r0
 800cb02:	d108      	bne.n	800cb16 <_printf_float+0x142>
 800cb04:	1cc8      	adds	r0, r1, #3
 800cb06:	db02      	blt.n	800cb0e <_printf_float+0x13a>
 800cb08:	6863      	ldr	r3, [r4, #4]
 800cb0a:	4299      	cmp	r1, r3
 800cb0c:	dd41      	ble.n	800cb92 <_printf_float+0x1be>
 800cb0e:	f1ab 0b02 	sub.w	fp, fp, #2
 800cb12:	fa5f fb8b 	uxtb.w	fp, fp
 800cb16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb1a:	d820      	bhi.n	800cb5e <_printf_float+0x18a>
 800cb1c:	3901      	subs	r1, #1
 800cb1e:	465a      	mov	r2, fp
 800cb20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cb24:	9109      	str	r1, [sp, #36]	; 0x24
 800cb26:	f7ff ff17 	bl	800c958 <__exponent>
 800cb2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb2c:	1813      	adds	r3, r2, r0
 800cb2e:	2a01      	cmp	r2, #1
 800cb30:	4681      	mov	r9, r0
 800cb32:	6123      	str	r3, [r4, #16]
 800cb34:	dc02      	bgt.n	800cb3c <_printf_float+0x168>
 800cb36:	6822      	ldr	r2, [r4, #0]
 800cb38:	07d2      	lsls	r2, r2, #31
 800cb3a:	d501      	bpl.n	800cb40 <_printf_float+0x16c>
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	6123      	str	r3, [r4, #16]
 800cb40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d09c      	beq.n	800ca82 <_printf_float+0xae>
 800cb48:	232d      	movs	r3, #45	; 0x2d
 800cb4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb4e:	e798      	b.n	800ca82 <_printf_float+0xae>
 800cb50:	9a06      	ldr	r2, [sp, #24]
 800cb52:	2a47      	cmp	r2, #71	; 0x47
 800cb54:	d1be      	bne.n	800cad4 <_printf_float+0x100>
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1bc      	bne.n	800cad4 <_printf_float+0x100>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e7b9      	b.n	800cad2 <_printf_float+0xfe>
 800cb5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cb62:	d118      	bne.n	800cb96 <_printf_float+0x1c2>
 800cb64:	2900      	cmp	r1, #0
 800cb66:	6863      	ldr	r3, [r4, #4]
 800cb68:	dd0b      	ble.n	800cb82 <_printf_float+0x1ae>
 800cb6a:	6121      	str	r1, [r4, #16]
 800cb6c:	b913      	cbnz	r3, 800cb74 <_printf_float+0x1a0>
 800cb6e:	6822      	ldr	r2, [r4, #0]
 800cb70:	07d0      	lsls	r0, r2, #31
 800cb72:	d502      	bpl.n	800cb7a <_printf_float+0x1a6>
 800cb74:	3301      	adds	r3, #1
 800cb76:	440b      	add	r3, r1
 800cb78:	6123      	str	r3, [r4, #16]
 800cb7a:	65a1      	str	r1, [r4, #88]	; 0x58
 800cb7c:	f04f 0900 	mov.w	r9, #0
 800cb80:	e7de      	b.n	800cb40 <_printf_float+0x16c>
 800cb82:	b913      	cbnz	r3, 800cb8a <_printf_float+0x1b6>
 800cb84:	6822      	ldr	r2, [r4, #0]
 800cb86:	07d2      	lsls	r2, r2, #31
 800cb88:	d501      	bpl.n	800cb8e <_printf_float+0x1ba>
 800cb8a:	3302      	adds	r3, #2
 800cb8c:	e7f4      	b.n	800cb78 <_printf_float+0x1a4>
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e7f2      	b.n	800cb78 <_printf_float+0x1a4>
 800cb92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cb96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb98:	4299      	cmp	r1, r3
 800cb9a:	db05      	blt.n	800cba8 <_printf_float+0x1d4>
 800cb9c:	6823      	ldr	r3, [r4, #0]
 800cb9e:	6121      	str	r1, [r4, #16]
 800cba0:	07d8      	lsls	r0, r3, #31
 800cba2:	d5ea      	bpl.n	800cb7a <_printf_float+0x1a6>
 800cba4:	1c4b      	adds	r3, r1, #1
 800cba6:	e7e7      	b.n	800cb78 <_printf_float+0x1a4>
 800cba8:	2900      	cmp	r1, #0
 800cbaa:	bfd4      	ite	le
 800cbac:	f1c1 0202 	rsble	r2, r1, #2
 800cbb0:	2201      	movgt	r2, #1
 800cbb2:	4413      	add	r3, r2
 800cbb4:	e7e0      	b.n	800cb78 <_printf_float+0x1a4>
 800cbb6:	6823      	ldr	r3, [r4, #0]
 800cbb8:	055a      	lsls	r2, r3, #21
 800cbba:	d407      	bmi.n	800cbcc <_printf_float+0x1f8>
 800cbbc:	6923      	ldr	r3, [r4, #16]
 800cbbe:	4642      	mov	r2, r8
 800cbc0:	4631      	mov	r1, r6
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	47b8      	blx	r7
 800cbc6:	3001      	adds	r0, #1
 800cbc8:	d12c      	bne.n	800cc24 <_printf_float+0x250>
 800cbca:	e764      	b.n	800ca96 <_printf_float+0xc2>
 800cbcc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cbd0:	f240 80e0 	bls.w	800cd94 <_printf_float+0x3c0>
 800cbd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cbd8:	2200      	movs	r2, #0
 800cbda:	2300      	movs	r3, #0
 800cbdc:	f7f3 ff7c 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	d034      	beq.n	800cc4e <_printf_float+0x27a>
 800cbe4:	4a37      	ldr	r2, [pc, #220]	; (800ccc4 <_printf_float+0x2f0>)
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	4631      	mov	r1, r6
 800cbea:	4628      	mov	r0, r5
 800cbec:	47b8      	blx	r7
 800cbee:	3001      	adds	r0, #1
 800cbf0:	f43f af51 	beq.w	800ca96 <_printf_float+0xc2>
 800cbf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	db02      	blt.n	800cc02 <_printf_float+0x22e>
 800cbfc:	6823      	ldr	r3, [r4, #0]
 800cbfe:	07d8      	lsls	r0, r3, #31
 800cc00:	d510      	bpl.n	800cc24 <_printf_float+0x250>
 800cc02:	ee18 3a10 	vmov	r3, s16
 800cc06:	4652      	mov	r2, sl
 800cc08:	4631      	mov	r1, r6
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	47b8      	blx	r7
 800cc0e:	3001      	adds	r0, #1
 800cc10:	f43f af41 	beq.w	800ca96 <_printf_float+0xc2>
 800cc14:	f04f 0800 	mov.w	r8, #0
 800cc18:	f104 091a 	add.w	r9, r4, #26
 800cc1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc1e:	3b01      	subs	r3, #1
 800cc20:	4543      	cmp	r3, r8
 800cc22:	dc09      	bgt.n	800cc38 <_printf_float+0x264>
 800cc24:	6823      	ldr	r3, [r4, #0]
 800cc26:	079b      	lsls	r3, r3, #30
 800cc28:	f100 8105 	bmi.w	800ce36 <_printf_float+0x462>
 800cc2c:	68e0      	ldr	r0, [r4, #12]
 800cc2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc30:	4298      	cmp	r0, r3
 800cc32:	bfb8      	it	lt
 800cc34:	4618      	movlt	r0, r3
 800cc36:	e730      	b.n	800ca9a <_printf_float+0xc6>
 800cc38:	2301      	movs	r3, #1
 800cc3a:	464a      	mov	r2, r9
 800cc3c:	4631      	mov	r1, r6
 800cc3e:	4628      	mov	r0, r5
 800cc40:	47b8      	blx	r7
 800cc42:	3001      	adds	r0, #1
 800cc44:	f43f af27 	beq.w	800ca96 <_printf_float+0xc2>
 800cc48:	f108 0801 	add.w	r8, r8, #1
 800cc4c:	e7e6      	b.n	800cc1c <_printf_float+0x248>
 800cc4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	dc39      	bgt.n	800ccc8 <_printf_float+0x2f4>
 800cc54:	4a1b      	ldr	r2, [pc, #108]	; (800ccc4 <_printf_float+0x2f0>)
 800cc56:	2301      	movs	r3, #1
 800cc58:	4631      	mov	r1, r6
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	47b8      	blx	r7
 800cc5e:	3001      	adds	r0, #1
 800cc60:	f43f af19 	beq.w	800ca96 <_printf_float+0xc2>
 800cc64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	d102      	bne.n	800cc72 <_printf_float+0x29e>
 800cc6c:	6823      	ldr	r3, [r4, #0]
 800cc6e:	07d9      	lsls	r1, r3, #31
 800cc70:	d5d8      	bpl.n	800cc24 <_printf_float+0x250>
 800cc72:	ee18 3a10 	vmov	r3, s16
 800cc76:	4652      	mov	r2, sl
 800cc78:	4631      	mov	r1, r6
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	47b8      	blx	r7
 800cc7e:	3001      	adds	r0, #1
 800cc80:	f43f af09 	beq.w	800ca96 <_printf_float+0xc2>
 800cc84:	f04f 0900 	mov.w	r9, #0
 800cc88:	f104 0a1a 	add.w	sl, r4, #26
 800cc8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc8e:	425b      	negs	r3, r3
 800cc90:	454b      	cmp	r3, r9
 800cc92:	dc01      	bgt.n	800cc98 <_printf_float+0x2c4>
 800cc94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc96:	e792      	b.n	800cbbe <_printf_float+0x1ea>
 800cc98:	2301      	movs	r3, #1
 800cc9a:	4652      	mov	r2, sl
 800cc9c:	4631      	mov	r1, r6
 800cc9e:	4628      	mov	r0, r5
 800cca0:	47b8      	blx	r7
 800cca2:	3001      	adds	r0, #1
 800cca4:	f43f aef7 	beq.w	800ca96 <_printf_float+0xc2>
 800cca8:	f109 0901 	add.w	r9, r9, #1
 800ccac:	e7ee      	b.n	800cc8c <_printf_float+0x2b8>
 800ccae:	bf00      	nop
 800ccb0:	7fefffff 	.word	0x7fefffff
 800ccb4:	08011440 	.word	0x08011440
 800ccb8:	08011444 	.word	0x08011444
 800ccbc:	0801144c 	.word	0x0801144c
 800ccc0:	08011448 	.word	0x08011448
 800ccc4:	08011450 	.word	0x08011450
 800ccc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cccc:	429a      	cmp	r2, r3
 800ccce:	bfa8      	it	ge
 800ccd0:	461a      	movge	r2, r3
 800ccd2:	2a00      	cmp	r2, #0
 800ccd4:	4691      	mov	r9, r2
 800ccd6:	dc37      	bgt.n	800cd48 <_printf_float+0x374>
 800ccd8:	f04f 0b00 	mov.w	fp, #0
 800ccdc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cce0:	f104 021a 	add.w	r2, r4, #26
 800cce4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cce6:	9305      	str	r3, [sp, #20]
 800cce8:	eba3 0309 	sub.w	r3, r3, r9
 800ccec:	455b      	cmp	r3, fp
 800ccee:	dc33      	bgt.n	800cd58 <_printf_float+0x384>
 800ccf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	db3b      	blt.n	800cd70 <_printf_float+0x39c>
 800ccf8:	6823      	ldr	r3, [r4, #0]
 800ccfa:	07da      	lsls	r2, r3, #31
 800ccfc:	d438      	bmi.n	800cd70 <_printf_float+0x39c>
 800ccfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd00:	9a05      	ldr	r2, [sp, #20]
 800cd02:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd04:	1a9a      	subs	r2, r3, r2
 800cd06:	eba3 0901 	sub.w	r9, r3, r1
 800cd0a:	4591      	cmp	r9, r2
 800cd0c:	bfa8      	it	ge
 800cd0e:	4691      	movge	r9, r2
 800cd10:	f1b9 0f00 	cmp.w	r9, #0
 800cd14:	dc35      	bgt.n	800cd82 <_printf_float+0x3ae>
 800cd16:	f04f 0800 	mov.w	r8, #0
 800cd1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd1e:	f104 0a1a 	add.w	sl, r4, #26
 800cd22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd26:	1a9b      	subs	r3, r3, r2
 800cd28:	eba3 0309 	sub.w	r3, r3, r9
 800cd2c:	4543      	cmp	r3, r8
 800cd2e:	f77f af79 	ble.w	800cc24 <_printf_float+0x250>
 800cd32:	2301      	movs	r3, #1
 800cd34:	4652      	mov	r2, sl
 800cd36:	4631      	mov	r1, r6
 800cd38:	4628      	mov	r0, r5
 800cd3a:	47b8      	blx	r7
 800cd3c:	3001      	adds	r0, #1
 800cd3e:	f43f aeaa 	beq.w	800ca96 <_printf_float+0xc2>
 800cd42:	f108 0801 	add.w	r8, r8, #1
 800cd46:	e7ec      	b.n	800cd22 <_printf_float+0x34e>
 800cd48:	4613      	mov	r3, r2
 800cd4a:	4631      	mov	r1, r6
 800cd4c:	4642      	mov	r2, r8
 800cd4e:	4628      	mov	r0, r5
 800cd50:	47b8      	blx	r7
 800cd52:	3001      	adds	r0, #1
 800cd54:	d1c0      	bne.n	800ccd8 <_printf_float+0x304>
 800cd56:	e69e      	b.n	800ca96 <_printf_float+0xc2>
 800cd58:	2301      	movs	r3, #1
 800cd5a:	4631      	mov	r1, r6
 800cd5c:	4628      	mov	r0, r5
 800cd5e:	9205      	str	r2, [sp, #20]
 800cd60:	47b8      	blx	r7
 800cd62:	3001      	adds	r0, #1
 800cd64:	f43f ae97 	beq.w	800ca96 <_printf_float+0xc2>
 800cd68:	9a05      	ldr	r2, [sp, #20]
 800cd6a:	f10b 0b01 	add.w	fp, fp, #1
 800cd6e:	e7b9      	b.n	800cce4 <_printf_float+0x310>
 800cd70:	ee18 3a10 	vmov	r3, s16
 800cd74:	4652      	mov	r2, sl
 800cd76:	4631      	mov	r1, r6
 800cd78:	4628      	mov	r0, r5
 800cd7a:	47b8      	blx	r7
 800cd7c:	3001      	adds	r0, #1
 800cd7e:	d1be      	bne.n	800ccfe <_printf_float+0x32a>
 800cd80:	e689      	b.n	800ca96 <_printf_float+0xc2>
 800cd82:	9a05      	ldr	r2, [sp, #20]
 800cd84:	464b      	mov	r3, r9
 800cd86:	4442      	add	r2, r8
 800cd88:	4631      	mov	r1, r6
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	47b8      	blx	r7
 800cd8e:	3001      	adds	r0, #1
 800cd90:	d1c1      	bne.n	800cd16 <_printf_float+0x342>
 800cd92:	e680      	b.n	800ca96 <_printf_float+0xc2>
 800cd94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd96:	2a01      	cmp	r2, #1
 800cd98:	dc01      	bgt.n	800cd9e <_printf_float+0x3ca>
 800cd9a:	07db      	lsls	r3, r3, #31
 800cd9c:	d538      	bpl.n	800ce10 <_printf_float+0x43c>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	4642      	mov	r2, r8
 800cda2:	4631      	mov	r1, r6
 800cda4:	4628      	mov	r0, r5
 800cda6:	47b8      	blx	r7
 800cda8:	3001      	adds	r0, #1
 800cdaa:	f43f ae74 	beq.w	800ca96 <_printf_float+0xc2>
 800cdae:	ee18 3a10 	vmov	r3, s16
 800cdb2:	4652      	mov	r2, sl
 800cdb4:	4631      	mov	r1, r6
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	47b8      	blx	r7
 800cdba:	3001      	adds	r0, #1
 800cdbc:	f43f ae6b 	beq.w	800ca96 <_printf_float+0xc2>
 800cdc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	f7f3 fe86 	bl	8000ad8 <__aeabi_dcmpeq>
 800cdcc:	b9d8      	cbnz	r0, 800ce06 <_printf_float+0x432>
 800cdce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdd0:	f108 0201 	add.w	r2, r8, #1
 800cdd4:	3b01      	subs	r3, #1
 800cdd6:	4631      	mov	r1, r6
 800cdd8:	4628      	mov	r0, r5
 800cdda:	47b8      	blx	r7
 800cddc:	3001      	adds	r0, #1
 800cdde:	d10e      	bne.n	800cdfe <_printf_float+0x42a>
 800cde0:	e659      	b.n	800ca96 <_printf_float+0xc2>
 800cde2:	2301      	movs	r3, #1
 800cde4:	4652      	mov	r2, sl
 800cde6:	4631      	mov	r1, r6
 800cde8:	4628      	mov	r0, r5
 800cdea:	47b8      	blx	r7
 800cdec:	3001      	adds	r0, #1
 800cdee:	f43f ae52 	beq.w	800ca96 <_printf_float+0xc2>
 800cdf2:	f108 0801 	add.w	r8, r8, #1
 800cdf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdf8:	3b01      	subs	r3, #1
 800cdfa:	4543      	cmp	r3, r8
 800cdfc:	dcf1      	bgt.n	800cde2 <_printf_float+0x40e>
 800cdfe:	464b      	mov	r3, r9
 800ce00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ce04:	e6dc      	b.n	800cbc0 <_printf_float+0x1ec>
 800ce06:	f04f 0800 	mov.w	r8, #0
 800ce0a:	f104 0a1a 	add.w	sl, r4, #26
 800ce0e:	e7f2      	b.n	800cdf6 <_printf_float+0x422>
 800ce10:	2301      	movs	r3, #1
 800ce12:	4642      	mov	r2, r8
 800ce14:	e7df      	b.n	800cdd6 <_printf_float+0x402>
 800ce16:	2301      	movs	r3, #1
 800ce18:	464a      	mov	r2, r9
 800ce1a:	4631      	mov	r1, r6
 800ce1c:	4628      	mov	r0, r5
 800ce1e:	47b8      	blx	r7
 800ce20:	3001      	adds	r0, #1
 800ce22:	f43f ae38 	beq.w	800ca96 <_printf_float+0xc2>
 800ce26:	f108 0801 	add.w	r8, r8, #1
 800ce2a:	68e3      	ldr	r3, [r4, #12]
 800ce2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce2e:	1a5b      	subs	r3, r3, r1
 800ce30:	4543      	cmp	r3, r8
 800ce32:	dcf0      	bgt.n	800ce16 <_printf_float+0x442>
 800ce34:	e6fa      	b.n	800cc2c <_printf_float+0x258>
 800ce36:	f04f 0800 	mov.w	r8, #0
 800ce3a:	f104 0919 	add.w	r9, r4, #25
 800ce3e:	e7f4      	b.n	800ce2a <_printf_float+0x456>

0800ce40 <_printf_common>:
 800ce40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce44:	4616      	mov	r6, r2
 800ce46:	4699      	mov	r9, r3
 800ce48:	688a      	ldr	r2, [r1, #8]
 800ce4a:	690b      	ldr	r3, [r1, #16]
 800ce4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ce50:	4293      	cmp	r3, r2
 800ce52:	bfb8      	it	lt
 800ce54:	4613      	movlt	r3, r2
 800ce56:	6033      	str	r3, [r6, #0]
 800ce58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ce5c:	4607      	mov	r7, r0
 800ce5e:	460c      	mov	r4, r1
 800ce60:	b10a      	cbz	r2, 800ce66 <_printf_common+0x26>
 800ce62:	3301      	adds	r3, #1
 800ce64:	6033      	str	r3, [r6, #0]
 800ce66:	6823      	ldr	r3, [r4, #0]
 800ce68:	0699      	lsls	r1, r3, #26
 800ce6a:	bf42      	ittt	mi
 800ce6c:	6833      	ldrmi	r3, [r6, #0]
 800ce6e:	3302      	addmi	r3, #2
 800ce70:	6033      	strmi	r3, [r6, #0]
 800ce72:	6825      	ldr	r5, [r4, #0]
 800ce74:	f015 0506 	ands.w	r5, r5, #6
 800ce78:	d106      	bne.n	800ce88 <_printf_common+0x48>
 800ce7a:	f104 0a19 	add.w	sl, r4, #25
 800ce7e:	68e3      	ldr	r3, [r4, #12]
 800ce80:	6832      	ldr	r2, [r6, #0]
 800ce82:	1a9b      	subs	r3, r3, r2
 800ce84:	42ab      	cmp	r3, r5
 800ce86:	dc26      	bgt.n	800ced6 <_printf_common+0x96>
 800ce88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ce8c:	1e13      	subs	r3, r2, #0
 800ce8e:	6822      	ldr	r2, [r4, #0]
 800ce90:	bf18      	it	ne
 800ce92:	2301      	movne	r3, #1
 800ce94:	0692      	lsls	r2, r2, #26
 800ce96:	d42b      	bmi.n	800cef0 <_printf_common+0xb0>
 800ce98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce9c:	4649      	mov	r1, r9
 800ce9e:	4638      	mov	r0, r7
 800cea0:	47c0      	blx	r8
 800cea2:	3001      	adds	r0, #1
 800cea4:	d01e      	beq.n	800cee4 <_printf_common+0xa4>
 800cea6:	6823      	ldr	r3, [r4, #0]
 800cea8:	68e5      	ldr	r5, [r4, #12]
 800ceaa:	6832      	ldr	r2, [r6, #0]
 800ceac:	f003 0306 	and.w	r3, r3, #6
 800ceb0:	2b04      	cmp	r3, #4
 800ceb2:	bf08      	it	eq
 800ceb4:	1aad      	subeq	r5, r5, r2
 800ceb6:	68a3      	ldr	r3, [r4, #8]
 800ceb8:	6922      	ldr	r2, [r4, #16]
 800ceba:	bf0c      	ite	eq
 800cebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cec0:	2500      	movne	r5, #0
 800cec2:	4293      	cmp	r3, r2
 800cec4:	bfc4      	itt	gt
 800cec6:	1a9b      	subgt	r3, r3, r2
 800cec8:	18ed      	addgt	r5, r5, r3
 800ceca:	2600      	movs	r6, #0
 800cecc:	341a      	adds	r4, #26
 800cece:	42b5      	cmp	r5, r6
 800ced0:	d11a      	bne.n	800cf08 <_printf_common+0xc8>
 800ced2:	2000      	movs	r0, #0
 800ced4:	e008      	b.n	800cee8 <_printf_common+0xa8>
 800ced6:	2301      	movs	r3, #1
 800ced8:	4652      	mov	r2, sl
 800ceda:	4649      	mov	r1, r9
 800cedc:	4638      	mov	r0, r7
 800cede:	47c0      	blx	r8
 800cee0:	3001      	adds	r0, #1
 800cee2:	d103      	bne.n	800ceec <_printf_common+0xac>
 800cee4:	f04f 30ff 	mov.w	r0, #4294967295
 800cee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceec:	3501      	adds	r5, #1
 800ceee:	e7c6      	b.n	800ce7e <_printf_common+0x3e>
 800cef0:	18e1      	adds	r1, r4, r3
 800cef2:	1c5a      	adds	r2, r3, #1
 800cef4:	2030      	movs	r0, #48	; 0x30
 800cef6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cefa:	4422      	add	r2, r4
 800cefc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf04:	3302      	adds	r3, #2
 800cf06:	e7c7      	b.n	800ce98 <_printf_common+0x58>
 800cf08:	2301      	movs	r3, #1
 800cf0a:	4622      	mov	r2, r4
 800cf0c:	4649      	mov	r1, r9
 800cf0e:	4638      	mov	r0, r7
 800cf10:	47c0      	blx	r8
 800cf12:	3001      	adds	r0, #1
 800cf14:	d0e6      	beq.n	800cee4 <_printf_common+0xa4>
 800cf16:	3601      	adds	r6, #1
 800cf18:	e7d9      	b.n	800cece <_printf_common+0x8e>
	...

0800cf1c <_printf_i>:
 800cf1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf20:	7e0f      	ldrb	r7, [r1, #24]
 800cf22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cf24:	2f78      	cmp	r7, #120	; 0x78
 800cf26:	4691      	mov	r9, r2
 800cf28:	4680      	mov	r8, r0
 800cf2a:	460c      	mov	r4, r1
 800cf2c:	469a      	mov	sl, r3
 800cf2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cf32:	d807      	bhi.n	800cf44 <_printf_i+0x28>
 800cf34:	2f62      	cmp	r7, #98	; 0x62
 800cf36:	d80a      	bhi.n	800cf4e <_printf_i+0x32>
 800cf38:	2f00      	cmp	r7, #0
 800cf3a:	f000 80d8 	beq.w	800d0ee <_printf_i+0x1d2>
 800cf3e:	2f58      	cmp	r7, #88	; 0x58
 800cf40:	f000 80a3 	beq.w	800d08a <_printf_i+0x16e>
 800cf44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cf4c:	e03a      	b.n	800cfc4 <_printf_i+0xa8>
 800cf4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cf52:	2b15      	cmp	r3, #21
 800cf54:	d8f6      	bhi.n	800cf44 <_printf_i+0x28>
 800cf56:	a101      	add	r1, pc, #4	; (adr r1, 800cf5c <_printf_i+0x40>)
 800cf58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf5c:	0800cfb5 	.word	0x0800cfb5
 800cf60:	0800cfc9 	.word	0x0800cfc9
 800cf64:	0800cf45 	.word	0x0800cf45
 800cf68:	0800cf45 	.word	0x0800cf45
 800cf6c:	0800cf45 	.word	0x0800cf45
 800cf70:	0800cf45 	.word	0x0800cf45
 800cf74:	0800cfc9 	.word	0x0800cfc9
 800cf78:	0800cf45 	.word	0x0800cf45
 800cf7c:	0800cf45 	.word	0x0800cf45
 800cf80:	0800cf45 	.word	0x0800cf45
 800cf84:	0800cf45 	.word	0x0800cf45
 800cf88:	0800d0d5 	.word	0x0800d0d5
 800cf8c:	0800cff9 	.word	0x0800cff9
 800cf90:	0800d0b7 	.word	0x0800d0b7
 800cf94:	0800cf45 	.word	0x0800cf45
 800cf98:	0800cf45 	.word	0x0800cf45
 800cf9c:	0800d0f7 	.word	0x0800d0f7
 800cfa0:	0800cf45 	.word	0x0800cf45
 800cfa4:	0800cff9 	.word	0x0800cff9
 800cfa8:	0800cf45 	.word	0x0800cf45
 800cfac:	0800cf45 	.word	0x0800cf45
 800cfb0:	0800d0bf 	.word	0x0800d0bf
 800cfb4:	682b      	ldr	r3, [r5, #0]
 800cfb6:	1d1a      	adds	r2, r3, #4
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	602a      	str	r2, [r5, #0]
 800cfbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	e0a3      	b.n	800d110 <_printf_i+0x1f4>
 800cfc8:	6820      	ldr	r0, [r4, #0]
 800cfca:	6829      	ldr	r1, [r5, #0]
 800cfcc:	0606      	lsls	r6, r0, #24
 800cfce:	f101 0304 	add.w	r3, r1, #4
 800cfd2:	d50a      	bpl.n	800cfea <_printf_i+0xce>
 800cfd4:	680e      	ldr	r6, [r1, #0]
 800cfd6:	602b      	str	r3, [r5, #0]
 800cfd8:	2e00      	cmp	r6, #0
 800cfda:	da03      	bge.n	800cfe4 <_printf_i+0xc8>
 800cfdc:	232d      	movs	r3, #45	; 0x2d
 800cfde:	4276      	negs	r6, r6
 800cfe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfe4:	485e      	ldr	r0, [pc, #376]	; (800d160 <_printf_i+0x244>)
 800cfe6:	230a      	movs	r3, #10
 800cfe8:	e019      	b.n	800d01e <_printf_i+0x102>
 800cfea:	680e      	ldr	r6, [r1, #0]
 800cfec:	602b      	str	r3, [r5, #0]
 800cfee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cff2:	bf18      	it	ne
 800cff4:	b236      	sxthne	r6, r6
 800cff6:	e7ef      	b.n	800cfd8 <_printf_i+0xbc>
 800cff8:	682b      	ldr	r3, [r5, #0]
 800cffa:	6820      	ldr	r0, [r4, #0]
 800cffc:	1d19      	adds	r1, r3, #4
 800cffe:	6029      	str	r1, [r5, #0]
 800d000:	0601      	lsls	r1, r0, #24
 800d002:	d501      	bpl.n	800d008 <_printf_i+0xec>
 800d004:	681e      	ldr	r6, [r3, #0]
 800d006:	e002      	b.n	800d00e <_printf_i+0xf2>
 800d008:	0646      	lsls	r6, r0, #25
 800d00a:	d5fb      	bpl.n	800d004 <_printf_i+0xe8>
 800d00c:	881e      	ldrh	r6, [r3, #0]
 800d00e:	4854      	ldr	r0, [pc, #336]	; (800d160 <_printf_i+0x244>)
 800d010:	2f6f      	cmp	r7, #111	; 0x6f
 800d012:	bf0c      	ite	eq
 800d014:	2308      	moveq	r3, #8
 800d016:	230a      	movne	r3, #10
 800d018:	2100      	movs	r1, #0
 800d01a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d01e:	6865      	ldr	r5, [r4, #4]
 800d020:	60a5      	str	r5, [r4, #8]
 800d022:	2d00      	cmp	r5, #0
 800d024:	bfa2      	ittt	ge
 800d026:	6821      	ldrge	r1, [r4, #0]
 800d028:	f021 0104 	bicge.w	r1, r1, #4
 800d02c:	6021      	strge	r1, [r4, #0]
 800d02e:	b90e      	cbnz	r6, 800d034 <_printf_i+0x118>
 800d030:	2d00      	cmp	r5, #0
 800d032:	d04d      	beq.n	800d0d0 <_printf_i+0x1b4>
 800d034:	4615      	mov	r5, r2
 800d036:	fbb6 f1f3 	udiv	r1, r6, r3
 800d03a:	fb03 6711 	mls	r7, r3, r1, r6
 800d03e:	5dc7      	ldrb	r7, [r0, r7]
 800d040:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d044:	4637      	mov	r7, r6
 800d046:	42bb      	cmp	r3, r7
 800d048:	460e      	mov	r6, r1
 800d04a:	d9f4      	bls.n	800d036 <_printf_i+0x11a>
 800d04c:	2b08      	cmp	r3, #8
 800d04e:	d10b      	bne.n	800d068 <_printf_i+0x14c>
 800d050:	6823      	ldr	r3, [r4, #0]
 800d052:	07de      	lsls	r6, r3, #31
 800d054:	d508      	bpl.n	800d068 <_printf_i+0x14c>
 800d056:	6923      	ldr	r3, [r4, #16]
 800d058:	6861      	ldr	r1, [r4, #4]
 800d05a:	4299      	cmp	r1, r3
 800d05c:	bfde      	ittt	le
 800d05e:	2330      	movle	r3, #48	; 0x30
 800d060:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d064:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d068:	1b52      	subs	r2, r2, r5
 800d06a:	6122      	str	r2, [r4, #16]
 800d06c:	f8cd a000 	str.w	sl, [sp]
 800d070:	464b      	mov	r3, r9
 800d072:	aa03      	add	r2, sp, #12
 800d074:	4621      	mov	r1, r4
 800d076:	4640      	mov	r0, r8
 800d078:	f7ff fee2 	bl	800ce40 <_printf_common>
 800d07c:	3001      	adds	r0, #1
 800d07e:	d14c      	bne.n	800d11a <_printf_i+0x1fe>
 800d080:	f04f 30ff 	mov.w	r0, #4294967295
 800d084:	b004      	add	sp, #16
 800d086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d08a:	4835      	ldr	r0, [pc, #212]	; (800d160 <_printf_i+0x244>)
 800d08c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d090:	6829      	ldr	r1, [r5, #0]
 800d092:	6823      	ldr	r3, [r4, #0]
 800d094:	f851 6b04 	ldr.w	r6, [r1], #4
 800d098:	6029      	str	r1, [r5, #0]
 800d09a:	061d      	lsls	r5, r3, #24
 800d09c:	d514      	bpl.n	800d0c8 <_printf_i+0x1ac>
 800d09e:	07df      	lsls	r7, r3, #31
 800d0a0:	bf44      	itt	mi
 800d0a2:	f043 0320 	orrmi.w	r3, r3, #32
 800d0a6:	6023      	strmi	r3, [r4, #0]
 800d0a8:	b91e      	cbnz	r6, 800d0b2 <_printf_i+0x196>
 800d0aa:	6823      	ldr	r3, [r4, #0]
 800d0ac:	f023 0320 	bic.w	r3, r3, #32
 800d0b0:	6023      	str	r3, [r4, #0]
 800d0b2:	2310      	movs	r3, #16
 800d0b4:	e7b0      	b.n	800d018 <_printf_i+0xfc>
 800d0b6:	6823      	ldr	r3, [r4, #0]
 800d0b8:	f043 0320 	orr.w	r3, r3, #32
 800d0bc:	6023      	str	r3, [r4, #0]
 800d0be:	2378      	movs	r3, #120	; 0x78
 800d0c0:	4828      	ldr	r0, [pc, #160]	; (800d164 <_printf_i+0x248>)
 800d0c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d0c6:	e7e3      	b.n	800d090 <_printf_i+0x174>
 800d0c8:	0659      	lsls	r1, r3, #25
 800d0ca:	bf48      	it	mi
 800d0cc:	b2b6      	uxthmi	r6, r6
 800d0ce:	e7e6      	b.n	800d09e <_printf_i+0x182>
 800d0d0:	4615      	mov	r5, r2
 800d0d2:	e7bb      	b.n	800d04c <_printf_i+0x130>
 800d0d4:	682b      	ldr	r3, [r5, #0]
 800d0d6:	6826      	ldr	r6, [r4, #0]
 800d0d8:	6961      	ldr	r1, [r4, #20]
 800d0da:	1d18      	adds	r0, r3, #4
 800d0dc:	6028      	str	r0, [r5, #0]
 800d0de:	0635      	lsls	r5, r6, #24
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	d501      	bpl.n	800d0e8 <_printf_i+0x1cc>
 800d0e4:	6019      	str	r1, [r3, #0]
 800d0e6:	e002      	b.n	800d0ee <_printf_i+0x1d2>
 800d0e8:	0670      	lsls	r0, r6, #25
 800d0ea:	d5fb      	bpl.n	800d0e4 <_printf_i+0x1c8>
 800d0ec:	8019      	strh	r1, [r3, #0]
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	6123      	str	r3, [r4, #16]
 800d0f2:	4615      	mov	r5, r2
 800d0f4:	e7ba      	b.n	800d06c <_printf_i+0x150>
 800d0f6:	682b      	ldr	r3, [r5, #0]
 800d0f8:	1d1a      	adds	r2, r3, #4
 800d0fa:	602a      	str	r2, [r5, #0]
 800d0fc:	681d      	ldr	r5, [r3, #0]
 800d0fe:	6862      	ldr	r2, [r4, #4]
 800d100:	2100      	movs	r1, #0
 800d102:	4628      	mov	r0, r5
 800d104:	f7f3 f874 	bl	80001f0 <memchr>
 800d108:	b108      	cbz	r0, 800d10e <_printf_i+0x1f2>
 800d10a:	1b40      	subs	r0, r0, r5
 800d10c:	6060      	str	r0, [r4, #4]
 800d10e:	6863      	ldr	r3, [r4, #4]
 800d110:	6123      	str	r3, [r4, #16]
 800d112:	2300      	movs	r3, #0
 800d114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d118:	e7a8      	b.n	800d06c <_printf_i+0x150>
 800d11a:	6923      	ldr	r3, [r4, #16]
 800d11c:	462a      	mov	r2, r5
 800d11e:	4649      	mov	r1, r9
 800d120:	4640      	mov	r0, r8
 800d122:	47d0      	blx	sl
 800d124:	3001      	adds	r0, #1
 800d126:	d0ab      	beq.n	800d080 <_printf_i+0x164>
 800d128:	6823      	ldr	r3, [r4, #0]
 800d12a:	079b      	lsls	r3, r3, #30
 800d12c:	d413      	bmi.n	800d156 <_printf_i+0x23a>
 800d12e:	68e0      	ldr	r0, [r4, #12]
 800d130:	9b03      	ldr	r3, [sp, #12]
 800d132:	4298      	cmp	r0, r3
 800d134:	bfb8      	it	lt
 800d136:	4618      	movlt	r0, r3
 800d138:	e7a4      	b.n	800d084 <_printf_i+0x168>
 800d13a:	2301      	movs	r3, #1
 800d13c:	4632      	mov	r2, r6
 800d13e:	4649      	mov	r1, r9
 800d140:	4640      	mov	r0, r8
 800d142:	47d0      	blx	sl
 800d144:	3001      	adds	r0, #1
 800d146:	d09b      	beq.n	800d080 <_printf_i+0x164>
 800d148:	3501      	adds	r5, #1
 800d14a:	68e3      	ldr	r3, [r4, #12]
 800d14c:	9903      	ldr	r1, [sp, #12]
 800d14e:	1a5b      	subs	r3, r3, r1
 800d150:	42ab      	cmp	r3, r5
 800d152:	dcf2      	bgt.n	800d13a <_printf_i+0x21e>
 800d154:	e7eb      	b.n	800d12e <_printf_i+0x212>
 800d156:	2500      	movs	r5, #0
 800d158:	f104 0619 	add.w	r6, r4, #25
 800d15c:	e7f5      	b.n	800d14a <_printf_i+0x22e>
 800d15e:	bf00      	nop
 800d160:	08011452 	.word	0x08011452
 800d164:	08011463 	.word	0x08011463

0800d168 <_scanf_float>:
 800d168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d16c:	b087      	sub	sp, #28
 800d16e:	4617      	mov	r7, r2
 800d170:	9303      	str	r3, [sp, #12]
 800d172:	688b      	ldr	r3, [r1, #8]
 800d174:	1e5a      	subs	r2, r3, #1
 800d176:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d17a:	bf83      	ittte	hi
 800d17c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d180:	195b      	addhi	r3, r3, r5
 800d182:	9302      	strhi	r3, [sp, #8]
 800d184:	2300      	movls	r3, #0
 800d186:	bf86      	itte	hi
 800d188:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d18c:	608b      	strhi	r3, [r1, #8]
 800d18e:	9302      	strls	r3, [sp, #8]
 800d190:	680b      	ldr	r3, [r1, #0]
 800d192:	468b      	mov	fp, r1
 800d194:	2500      	movs	r5, #0
 800d196:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d19a:	f84b 3b1c 	str.w	r3, [fp], #28
 800d19e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d1a2:	4680      	mov	r8, r0
 800d1a4:	460c      	mov	r4, r1
 800d1a6:	465e      	mov	r6, fp
 800d1a8:	46aa      	mov	sl, r5
 800d1aa:	46a9      	mov	r9, r5
 800d1ac:	9501      	str	r5, [sp, #4]
 800d1ae:	68a2      	ldr	r2, [r4, #8]
 800d1b0:	b152      	cbz	r2, 800d1c8 <_scanf_float+0x60>
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	2b4e      	cmp	r3, #78	; 0x4e
 800d1b8:	d864      	bhi.n	800d284 <_scanf_float+0x11c>
 800d1ba:	2b40      	cmp	r3, #64	; 0x40
 800d1bc:	d83c      	bhi.n	800d238 <_scanf_float+0xd0>
 800d1be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d1c2:	b2c8      	uxtb	r0, r1
 800d1c4:	280e      	cmp	r0, #14
 800d1c6:	d93a      	bls.n	800d23e <_scanf_float+0xd6>
 800d1c8:	f1b9 0f00 	cmp.w	r9, #0
 800d1cc:	d003      	beq.n	800d1d6 <_scanf_float+0x6e>
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1d4:	6023      	str	r3, [r4, #0]
 800d1d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1da:	f1ba 0f01 	cmp.w	sl, #1
 800d1de:	f200 8113 	bhi.w	800d408 <_scanf_float+0x2a0>
 800d1e2:	455e      	cmp	r6, fp
 800d1e4:	f200 8105 	bhi.w	800d3f2 <_scanf_float+0x28a>
 800d1e8:	2501      	movs	r5, #1
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	b007      	add	sp, #28
 800d1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d1f6:	2a0d      	cmp	r2, #13
 800d1f8:	d8e6      	bhi.n	800d1c8 <_scanf_float+0x60>
 800d1fa:	a101      	add	r1, pc, #4	; (adr r1, 800d200 <_scanf_float+0x98>)
 800d1fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d200:	0800d33f 	.word	0x0800d33f
 800d204:	0800d1c9 	.word	0x0800d1c9
 800d208:	0800d1c9 	.word	0x0800d1c9
 800d20c:	0800d1c9 	.word	0x0800d1c9
 800d210:	0800d39f 	.word	0x0800d39f
 800d214:	0800d377 	.word	0x0800d377
 800d218:	0800d1c9 	.word	0x0800d1c9
 800d21c:	0800d1c9 	.word	0x0800d1c9
 800d220:	0800d34d 	.word	0x0800d34d
 800d224:	0800d1c9 	.word	0x0800d1c9
 800d228:	0800d1c9 	.word	0x0800d1c9
 800d22c:	0800d1c9 	.word	0x0800d1c9
 800d230:	0800d1c9 	.word	0x0800d1c9
 800d234:	0800d305 	.word	0x0800d305
 800d238:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d23c:	e7db      	b.n	800d1f6 <_scanf_float+0x8e>
 800d23e:	290e      	cmp	r1, #14
 800d240:	d8c2      	bhi.n	800d1c8 <_scanf_float+0x60>
 800d242:	a001      	add	r0, pc, #4	; (adr r0, 800d248 <_scanf_float+0xe0>)
 800d244:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d248:	0800d2f7 	.word	0x0800d2f7
 800d24c:	0800d1c9 	.word	0x0800d1c9
 800d250:	0800d2f7 	.word	0x0800d2f7
 800d254:	0800d38b 	.word	0x0800d38b
 800d258:	0800d1c9 	.word	0x0800d1c9
 800d25c:	0800d2a5 	.word	0x0800d2a5
 800d260:	0800d2e1 	.word	0x0800d2e1
 800d264:	0800d2e1 	.word	0x0800d2e1
 800d268:	0800d2e1 	.word	0x0800d2e1
 800d26c:	0800d2e1 	.word	0x0800d2e1
 800d270:	0800d2e1 	.word	0x0800d2e1
 800d274:	0800d2e1 	.word	0x0800d2e1
 800d278:	0800d2e1 	.word	0x0800d2e1
 800d27c:	0800d2e1 	.word	0x0800d2e1
 800d280:	0800d2e1 	.word	0x0800d2e1
 800d284:	2b6e      	cmp	r3, #110	; 0x6e
 800d286:	d809      	bhi.n	800d29c <_scanf_float+0x134>
 800d288:	2b60      	cmp	r3, #96	; 0x60
 800d28a:	d8b2      	bhi.n	800d1f2 <_scanf_float+0x8a>
 800d28c:	2b54      	cmp	r3, #84	; 0x54
 800d28e:	d077      	beq.n	800d380 <_scanf_float+0x218>
 800d290:	2b59      	cmp	r3, #89	; 0x59
 800d292:	d199      	bne.n	800d1c8 <_scanf_float+0x60>
 800d294:	2d07      	cmp	r5, #7
 800d296:	d197      	bne.n	800d1c8 <_scanf_float+0x60>
 800d298:	2508      	movs	r5, #8
 800d29a:	e029      	b.n	800d2f0 <_scanf_float+0x188>
 800d29c:	2b74      	cmp	r3, #116	; 0x74
 800d29e:	d06f      	beq.n	800d380 <_scanf_float+0x218>
 800d2a0:	2b79      	cmp	r3, #121	; 0x79
 800d2a2:	e7f6      	b.n	800d292 <_scanf_float+0x12a>
 800d2a4:	6821      	ldr	r1, [r4, #0]
 800d2a6:	05c8      	lsls	r0, r1, #23
 800d2a8:	d51a      	bpl.n	800d2e0 <_scanf_float+0x178>
 800d2aa:	9b02      	ldr	r3, [sp, #8]
 800d2ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d2b0:	6021      	str	r1, [r4, #0]
 800d2b2:	f109 0901 	add.w	r9, r9, #1
 800d2b6:	b11b      	cbz	r3, 800d2c0 <_scanf_float+0x158>
 800d2b8:	3b01      	subs	r3, #1
 800d2ba:	3201      	adds	r2, #1
 800d2bc:	9302      	str	r3, [sp, #8]
 800d2be:	60a2      	str	r2, [r4, #8]
 800d2c0:	68a3      	ldr	r3, [r4, #8]
 800d2c2:	3b01      	subs	r3, #1
 800d2c4:	60a3      	str	r3, [r4, #8]
 800d2c6:	6923      	ldr	r3, [r4, #16]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	6123      	str	r3, [r4, #16]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	3b01      	subs	r3, #1
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	607b      	str	r3, [r7, #4]
 800d2d4:	f340 8084 	ble.w	800d3e0 <_scanf_float+0x278>
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	603b      	str	r3, [r7, #0]
 800d2de:	e766      	b.n	800d1ae <_scanf_float+0x46>
 800d2e0:	eb1a 0f05 	cmn.w	sl, r5
 800d2e4:	f47f af70 	bne.w	800d1c8 <_scanf_float+0x60>
 800d2e8:	6822      	ldr	r2, [r4, #0]
 800d2ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d2ee:	6022      	str	r2, [r4, #0]
 800d2f0:	f806 3b01 	strb.w	r3, [r6], #1
 800d2f4:	e7e4      	b.n	800d2c0 <_scanf_float+0x158>
 800d2f6:	6822      	ldr	r2, [r4, #0]
 800d2f8:	0610      	lsls	r0, r2, #24
 800d2fa:	f57f af65 	bpl.w	800d1c8 <_scanf_float+0x60>
 800d2fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d302:	e7f4      	b.n	800d2ee <_scanf_float+0x186>
 800d304:	f1ba 0f00 	cmp.w	sl, #0
 800d308:	d10e      	bne.n	800d328 <_scanf_float+0x1c0>
 800d30a:	f1b9 0f00 	cmp.w	r9, #0
 800d30e:	d10e      	bne.n	800d32e <_scanf_float+0x1c6>
 800d310:	6822      	ldr	r2, [r4, #0]
 800d312:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d316:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d31a:	d108      	bne.n	800d32e <_scanf_float+0x1c6>
 800d31c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d320:	6022      	str	r2, [r4, #0]
 800d322:	f04f 0a01 	mov.w	sl, #1
 800d326:	e7e3      	b.n	800d2f0 <_scanf_float+0x188>
 800d328:	f1ba 0f02 	cmp.w	sl, #2
 800d32c:	d055      	beq.n	800d3da <_scanf_float+0x272>
 800d32e:	2d01      	cmp	r5, #1
 800d330:	d002      	beq.n	800d338 <_scanf_float+0x1d0>
 800d332:	2d04      	cmp	r5, #4
 800d334:	f47f af48 	bne.w	800d1c8 <_scanf_float+0x60>
 800d338:	3501      	adds	r5, #1
 800d33a:	b2ed      	uxtb	r5, r5
 800d33c:	e7d8      	b.n	800d2f0 <_scanf_float+0x188>
 800d33e:	f1ba 0f01 	cmp.w	sl, #1
 800d342:	f47f af41 	bne.w	800d1c8 <_scanf_float+0x60>
 800d346:	f04f 0a02 	mov.w	sl, #2
 800d34a:	e7d1      	b.n	800d2f0 <_scanf_float+0x188>
 800d34c:	b97d      	cbnz	r5, 800d36e <_scanf_float+0x206>
 800d34e:	f1b9 0f00 	cmp.w	r9, #0
 800d352:	f47f af3c 	bne.w	800d1ce <_scanf_float+0x66>
 800d356:	6822      	ldr	r2, [r4, #0]
 800d358:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d35c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d360:	f47f af39 	bne.w	800d1d6 <_scanf_float+0x6e>
 800d364:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d368:	6022      	str	r2, [r4, #0]
 800d36a:	2501      	movs	r5, #1
 800d36c:	e7c0      	b.n	800d2f0 <_scanf_float+0x188>
 800d36e:	2d03      	cmp	r5, #3
 800d370:	d0e2      	beq.n	800d338 <_scanf_float+0x1d0>
 800d372:	2d05      	cmp	r5, #5
 800d374:	e7de      	b.n	800d334 <_scanf_float+0x1cc>
 800d376:	2d02      	cmp	r5, #2
 800d378:	f47f af26 	bne.w	800d1c8 <_scanf_float+0x60>
 800d37c:	2503      	movs	r5, #3
 800d37e:	e7b7      	b.n	800d2f0 <_scanf_float+0x188>
 800d380:	2d06      	cmp	r5, #6
 800d382:	f47f af21 	bne.w	800d1c8 <_scanf_float+0x60>
 800d386:	2507      	movs	r5, #7
 800d388:	e7b2      	b.n	800d2f0 <_scanf_float+0x188>
 800d38a:	6822      	ldr	r2, [r4, #0]
 800d38c:	0591      	lsls	r1, r2, #22
 800d38e:	f57f af1b 	bpl.w	800d1c8 <_scanf_float+0x60>
 800d392:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d396:	6022      	str	r2, [r4, #0]
 800d398:	f8cd 9004 	str.w	r9, [sp, #4]
 800d39c:	e7a8      	b.n	800d2f0 <_scanf_float+0x188>
 800d39e:	6822      	ldr	r2, [r4, #0]
 800d3a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d3a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d3a8:	d006      	beq.n	800d3b8 <_scanf_float+0x250>
 800d3aa:	0550      	lsls	r0, r2, #21
 800d3ac:	f57f af0c 	bpl.w	800d1c8 <_scanf_float+0x60>
 800d3b0:	f1b9 0f00 	cmp.w	r9, #0
 800d3b4:	f43f af0f 	beq.w	800d1d6 <_scanf_float+0x6e>
 800d3b8:	0591      	lsls	r1, r2, #22
 800d3ba:	bf58      	it	pl
 800d3bc:	9901      	ldrpl	r1, [sp, #4]
 800d3be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d3c2:	bf58      	it	pl
 800d3c4:	eba9 0101 	subpl.w	r1, r9, r1
 800d3c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d3cc:	bf58      	it	pl
 800d3ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d3d2:	6022      	str	r2, [r4, #0]
 800d3d4:	f04f 0900 	mov.w	r9, #0
 800d3d8:	e78a      	b.n	800d2f0 <_scanf_float+0x188>
 800d3da:	f04f 0a03 	mov.w	sl, #3
 800d3de:	e787      	b.n	800d2f0 <_scanf_float+0x188>
 800d3e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d3e4:	4639      	mov	r1, r7
 800d3e6:	4640      	mov	r0, r8
 800d3e8:	4798      	blx	r3
 800d3ea:	2800      	cmp	r0, #0
 800d3ec:	f43f aedf 	beq.w	800d1ae <_scanf_float+0x46>
 800d3f0:	e6ea      	b.n	800d1c8 <_scanf_float+0x60>
 800d3f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d3f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d3fa:	463a      	mov	r2, r7
 800d3fc:	4640      	mov	r0, r8
 800d3fe:	4798      	blx	r3
 800d400:	6923      	ldr	r3, [r4, #16]
 800d402:	3b01      	subs	r3, #1
 800d404:	6123      	str	r3, [r4, #16]
 800d406:	e6ec      	b.n	800d1e2 <_scanf_float+0x7a>
 800d408:	1e6b      	subs	r3, r5, #1
 800d40a:	2b06      	cmp	r3, #6
 800d40c:	d825      	bhi.n	800d45a <_scanf_float+0x2f2>
 800d40e:	2d02      	cmp	r5, #2
 800d410:	d836      	bhi.n	800d480 <_scanf_float+0x318>
 800d412:	455e      	cmp	r6, fp
 800d414:	f67f aee8 	bls.w	800d1e8 <_scanf_float+0x80>
 800d418:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d41c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d420:	463a      	mov	r2, r7
 800d422:	4640      	mov	r0, r8
 800d424:	4798      	blx	r3
 800d426:	6923      	ldr	r3, [r4, #16]
 800d428:	3b01      	subs	r3, #1
 800d42a:	6123      	str	r3, [r4, #16]
 800d42c:	e7f1      	b.n	800d412 <_scanf_float+0x2aa>
 800d42e:	9802      	ldr	r0, [sp, #8]
 800d430:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d434:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d438:	9002      	str	r0, [sp, #8]
 800d43a:	463a      	mov	r2, r7
 800d43c:	4640      	mov	r0, r8
 800d43e:	4798      	blx	r3
 800d440:	6923      	ldr	r3, [r4, #16]
 800d442:	3b01      	subs	r3, #1
 800d444:	6123      	str	r3, [r4, #16]
 800d446:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d44a:	fa5f fa8a 	uxtb.w	sl, sl
 800d44e:	f1ba 0f02 	cmp.w	sl, #2
 800d452:	d1ec      	bne.n	800d42e <_scanf_float+0x2c6>
 800d454:	3d03      	subs	r5, #3
 800d456:	b2ed      	uxtb	r5, r5
 800d458:	1b76      	subs	r6, r6, r5
 800d45a:	6823      	ldr	r3, [r4, #0]
 800d45c:	05da      	lsls	r2, r3, #23
 800d45e:	d52f      	bpl.n	800d4c0 <_scanf_float+0x358>
 800d460:	055b      	lsls	r3, r3, #21
 800d462:	d510      	bpl.n	800d486 <_scanf_float+0x31e>
 800d464:	455e      	cmp	r6, fp
 800d466:	f67f aebf 	bls.w	800d1e8 <_scanf_float+0x80>
 800d46a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d46e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d472:	463a      	mov	r2, r7
 800d474:	4640      	mov	r0, r8
 800d476:	4798      	blx	r3
 800d478:	6923      	ldr	r3, [r4, #16]
 800d47a:	3b01      	subs	r3, #1
 800d47c:	6123      	str	r3, [r4, #16]
 800d47e:	e7f1      	b.n	800d464 <_scanf_float+0x2fc>
 800d480:	46aa      	mov	sl, r5
 800d482:	9602      	str	r6, [sp, #8]
 800d484:	e7df      	b.n	800d446 <_scanf_float+0x2de>
 800d486:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d48a:	6923      	ldr	r3, [r4, #16]
 800d48c:	2965      	cmp	r1, #101	; 0x65
 800d48e:	f103 33ff 	add.w	r3, r3, #4294967295
 800d492:	f106 35ff 	add.w	r5, r6, #4294967295
 800d496:	6123      	str	r3, [r4, #16]
 800d498:	d00c      	beq.n	800d4b4 <_scanf_float+0x34c>
 800d49a:	2945      	cmp	r1, #69	; 0x45
 800d49c:	d00a      	beq.n	800d4b4 <_scanf_float+0x34c>
 800d49e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d4a2:	463a      	mov	r2, r7
 800d4a4:	4640      	mov	r0, r8
 800d4a6:	4798      	blx	r3
 800d4a8:	6923      	ldr	r3, [r4, #16]
 800d4aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d4ae:	3b01      	subs	r3, #1
 800d4b0:	1eb5      	subs	r5, r6, #2
 800d4b2:	6123      	str	r3, [r4, #16]
 800d4b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d4b8:	463a      	mov	r2, r7
 800d4ba:	4640      	mov	r0, r8
 800d4bc:	4798      	blx	r3
 800d4be:	462e      	mov	r6, r5
 800d4c0:	6825      	ldr	r5, [r4, #0]
 800d4c2:	f015 0510 	ands.w	r5, r5, #16
 800d4c6:	d159      	bne.n	800d57c <_scanf_float+0x414>
 800d4c8:	7035      	strb	r5, [r6, #0]
 800d4ca:	6823      	ldr	r3, [r4, #0]
 800d4cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d4d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4d4:	d11b      	bne.n	800d50e <_scanf_float+0x3a6>
 800d4d6:	9b01      	ldr	r3, [sp, #4]
 800d4d8:	454b      	cmp	r3, r9
 800d4da:	eba3 0209 	sub.w	r2, r3, r9
 800d4de:	d123      	bne.n	800d528 <_scanf_float+0x3c0>
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	4659      	mov	r1, fp
 800d4e4:	4640      	mov	r0, r8
 800d4e6:	f000 fe99 	bl	800e21c <_strtod_r>
 800d4ea:	6822      	ldr	r2, [r4, #0]
 800d4ec:	9b03      	ldr	r3, [sp, #12]
 800d4ee:	f012 0f02 	tst.w	r2, #2
 800d4f2:	ec57 6b10 	vmov	r6, r7, d0
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	d021      	beq.n	800d53e <_scanf_float+0x3d6>
 800d4fa:	9903      	ldr	r1, [sp, #12]
 800d4fc:	1d1a      	adds	r2, r3, #4
 800d4fe:	600a      	str	r2, [r1, #0]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	e9c3 6700 	strd	r6, r7, [r3]
 800d506:	68e3      	ldr	r3, [r4, #12]
 800d508:	3301      	adds	r3, #1
 800d50a:	60e3      	str	r3, [r4, #12]
 800d50c:	e66d      	b.n	800d1ea <_scanf_float+0x82>
 800d50e:	9b04      	ldr	r3, [sp, #16]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d0e5      	beq.n	800d4e0 <_scanf_float+0x378>
 800d514:	9905      	ldr	r1, [sp, #20]
 800d516:	230a      	movs	r3, #10
 800d518:	462a      	mov	r2, r5
 800d51a:	3101      	adds	r1, #1
 800d51c:	4640      	mov	r0, r8
 800d51e:	f000 ff05 	bl	800e32c <_strtol_r>
 800d522:	9b04      	ldr	r3, [sp, #16]
 800d524:	9e05      	ldr	r6, [sp, #20]
 800d526:	1ac2      	subs	r2, r0, r3
 800d528:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d52c:	429e      	cmp	r6, r3
 800d52e:	bf28      	it	cs
 800d530:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d534:	4912      	ldr	r1, [pc, #72]	; (800d580 <_scanf_float+0x418>)
 800d536:	4630      	mov	r0, r6
 800d538:	f000 f82c 	bl	800d594 <siprintf>
 800d53c:	e7d0      	b.n	800d4e0 <_scanf_float+0x378>
 800d53e:	9903      	ldr	r1, [sp, #12]
 800d540:	f012 0f04 	tst.w	r2, #4
 800d544:	f103 0204 	add.w	r2, r3, #4
 800d548:	600a      	str	r2, [r1, #0]
 800d54a:	d1d9      	bne.n	800d500 <_scanf_float+0x398>
 800d54c:	f8d3 8000 	ldr.w	r8, [r3]
 800d550:	ee10 2a10 	vmov	r2, s0
 800d554:	ee10 0a10 	vmov	r0, s0
 800d558:	463b      	mov	r3, r7
 800d55a:	4639      	mov	r1, r7
 800d55c:	f7f3 faee 	bl	8000b3c <__aeabi_dcmpun>
 800d560:	b128      	cbz	r0, 800d56e <_scanf_float+0x406>
 800d562:	4808      	ldr	r0, [pc, #32]	; (800d584 <_scanf_float+0x41c>)
 800d564:	f000 f810 	bl	800d588 <nanf>
 800d568:	ed88 0a00 	vstr	s0, [r8]
 800d56c:	e7cb      	b.n	800d506 <_scanf_float+0x39e>
 800d56e:	4630      	mov	r0, r6
 800d570:	4639      	mov	r1, r7
 800d572:	f7f3 fb41 	bl	8000bf8 <__aeabi_d2f>
 800d576:	f8c8 0000 	str.w	r0, [r8]
 800d57a:	e7c4      	b.n	800d506 <_scanf_float+0x39e>
 800d57c:	2500      	movs	r5, #0
 800d57e:	e634      	b.n	800d1ea <_scanf_float+0x82>
 800d580:	08011474 	.word	0x08011474
 800d584:	08011880 	.word	0x08011880

0800d588 <nanf>:
 800d588:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d590 <nanf+0x8>
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	7fc00000 	.word	0x7fc00000

0800d594 <siprintf>:
 800d594:	b40e      	push	{r1, r2, r3}
 800d596:	b500      	push	{lr}
 800d598:	b09c      	sub	sp, #112	; 0x70
 800d59a:	ab1d      	add	r3, sp, #116	; 0x74
 800d59c:	9002      	str	r0, [sp, #8]
 800d59e:	9006      	str	r0, [sp, #24]
 800d5a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d5a4:	4809      	ldr	r0, [pc, #36]	; (800d5cc <siprintf+0x38>)
 800d5a6:	9107      	str	r1, [sp, #28]
 800d5a8:	9104      	str	r1, [sp, #16]
 800d5aa:	4909      	ldr	r1, [pc, #36]	; (800d5d0 <siprintf+0x3c>)
 800d5ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5b0:	9105      	str	r1, [sp, #20]
 800d5b2:	6800      	ldr	r0, [r0, #0]
 800d5b4:	9301      	str	r3, [sp, #4]
 800d5b6:	a902      	add	r1, sp, #8
 800d5b8:	f002 fed6 	bl	8010368 <_svfiprintf_r>
 800d5bc:	9b02      	ldr	r3, [sp, #8]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	701a      	strb	r2, [r3, #0]
 800d5c2:	b01c      	add	sp, #112	; 0x70
 800d5c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5c8:	b003      	add	sp, #12
 800d5ca:	4770      	bx	lr
 800d5cc:	2000025c 	.word	0x2000025c
 800d5d0:	ffff0208 	.word	0xffff0208

0800d5d4 <sulp>:
 800d5d4:	b570      	push	{r4, r5, r6, lr}
 800d5d6:	4604      	mov	r4, r0
 800d5d8:	460d      	mov	r5, r1
 800d5da:	ec45 4b10 	vmov	d0, r4, r5
 800d5de:	4616      	mov	r6, r2
 800d5e0:	f002 fc20 	bl	800fe24 <__ulp>
 800d5e4:	ec51 0b10 	vmov	r0, r1, d0
 800d5e8:	b17e      	cbz	r6, 800d60a <sulp+0x36>
 800d5ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d5ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	dd09      	ble.n	800d60a <sulp+0x36>
 800d5f6:	051b      	lsls	r3, r3, #20
 800d5f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d5fc:	2400      	movs	r4, #0
 800d5fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d602:	4622      	mov	r2, r4
 800d604:	462b      	mov	r3, r5
 800d606:	f7f2 ffff 	bl	8000608 <__aeabi_dmul>
 800d60a:	bd70      	pop	{r4, r5, r6, pc}
 800d60c:	0000      	movs	r0, r0
	...

0800d610 <_strtod_l>:
 800d610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d614:	ed2d 8b02 	vpush	{d8}
 800d618:	b09d      	sub	sp, #116	; 0x74
 800d61a:	461f      	mov	r7, r3
 800d61c:	2300      	movs	r3, #0
 800d61e:	9318      	str	r3, [sp, #96]	; 0x60
 800d620:	4ba2      	ldr	r3, [pc, #648]	; (800d8ac <_strtod_l+0x29c>)
 800d622:	9213      	str	r2, [sp, #76]	; 0x4c
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	9305      	str	r3, [sp, #20]
 800d628:	4604      	mov	r4, r0
 800d62a:	4618      	mov	r0, r3
 800d62c:	4688      	mov	r8, r1
 800d62e:	f7f2 fdd7 	bl	80001e0 <strlen>
 800d632:	f04f 0a00 	mov.w	sl, #0
 800d636:	4605      	mov	r5, r0
 800d638:	f04f 0b00 	mov.w	fp, #0
 800d63c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d640:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d642:	781a      	ldrb	r2, [r3, #0]
 800d644:	2a2b      	cmp	r2, #43	; 0x2b
 800d646:	d04e      	beq.n	800d6e6 <_strtod_l+0xd6>
 800d648:	d83b      	bhi.n	800d6c2 <_strtod_l+0xb2>
 800d64a:	2a0d      	cmp	r2, #13
 800d64c:	d834      	bhi.n	800d6b8 <_strtod_l+0xa8>
 800d64e:	2a08      	cmp	r2, #8
 800d650:	d834      	bhi.n	800d6bc <_strtod_l+0xac>
 800d652:	2a00      	cmp	r2, #0
 800d654:	d03e      	beq.n	800d6d4 <_strtod_l+0xc4>
 800d656:	2300      	movs	r3, #0
 800d658:	930a      	str	r3, [sp, #40]	; 0x28
 800d65a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d65c:	7833      	ldrb	r3, [r6, #0]
 800d65e:	2b30      	cmp	r3, #48	; 0x30
 800d660:	f040 80b0 	bne.w	800d7c4 <_strtod_l+0x1b4>
 800d664:	7873      	ldrb	r3, [r6, #1]
 800d666:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d66a:	2b58      	cmp	r3, #88	; 0x58
 800d66c:	d168      	bne.n	800d740 <_strtod_l+0x130>
 800d66e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d670:	9301      	str	r3, [sp, #4]
 800d672:	ab18      	add	r3, sp, #96	; 0x60
 800d674:	9702      	str	r7, [sp, #8]
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	4a8d      	ldr	r2, [pc, #564]	; (800d8b0 <_strtod_l+0x2a0>)
 800d67a:	ab19      	add	r3, sp, #100	; 0x64
 800d67c:	a917      	add	r1, sp, #92	; 0x5c
 800d67e:	4620      	mov	r0, r4
 800d680:	f001 fd38 	bl	800f0f4 <__gethex>
 800d684:	f010 0707 	ands.w	r7, r0, #7
 800d688:	4605      	mov	r5, r0
 800d68a:	d005      	beq.n	800d698 <_strtod_l+0x88>
 800d68c:	2f06      	cmp	r7, #6
 800d68e:	d12c      	bne.n	800d6ea <_strtod_l+0xda>
 800d690:	3601      	adds	r6, #1
 800d692:	2300      	movs	r3, #0
 800d694:	9617      	str	r6, [sp, #92]	; 0x5c
 800d696:	930a      	str	r3, [sp, #40]	; 0x28
 800d698:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	f040 8590 	bne.w	800e1c0 <_strtod_l+0xbb0>
 800d6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6a2:	b1eb      	cbz	r3, 800d6e0 <_strtod_l+0xd0>
 800d6a4:	4652      	mov	r2, sl
 800d6a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d6aa:	ec43 2b10 	vmov	d0, r2, r3
 800d6ae:	b01d      	add	sp, #116	; 0x74
 800d6b0:	ecbd 8b02 	vpop	{d8}
 800d6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b8:	2a20      	cmp	r2, #32
 800d6ba:	d1cc      	bne.n	800d656 <_strtod_l+0x46>
 800d6bc:	3301      	adds	r3, #1
 800d6be:	9317      	str	r3, [sp, #92]	; 0x5c
 800d6c0:	e7be      	b.n	800d640 <_strtod_l+0x30>
 800d6c2:	2a2d      	cmp	r2, #45	; 0x2d
 800d6c4:	d1c7      	bne.n	800d656 <_strtod_l+0x46>
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	920a      	str	r2, [sp, #40]	; 0x28
 800d6ca:	1c5a      	adds	r2, r3, #1
 800d6cc:	9217      	str	r2, [sp, #92]	; 0x5c
 800d6ce:	785b      	ldrb	r3, [r3, #1]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d1c2      	bne.n	800d65a <_strtod_l+0x4a>
 800d6d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d6d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f040 856e 	bne.w	800e1bc <_strtod_l+0xbac>
 800d6e0:	4652      	mov	r2, sl
 800d6e2:	465b      	mov	r3, fp
 800d6e4:	e7e1      	b.n	800d6aa <_strtod_l+0x9a>
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	e7ee      	b.n	800d6c8 <_strtod_l+0xb8>
 800d6ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d6ec:	b13a      	cbz	r2, 800d6fe <_strtod_l+0xee>
 800d6ee:	2135      	movs	r1, #53	; 0x35
 800d6f0:	a81a      	add	r0, sp, #104	; 0x68
 800d6f2:	f002 fca2 	bl	801003a <__copybits>
 800d6f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f002 f861 	bl	800f7c0 <_Bfree>
 800d6fe:	3f01      	subs	r7, #1
 800d700:	2f04      	cmp	r7, #4
 800d702:	d806      	bhi.n	800d712 <_strtod_l+0x102>
 800d704:	e8df f007 	tbb	[pc, r7]
 800d708:	1714030a 	.word	0x1714030a
 800d70c:	0a          	.byte	0x0a
 800d70d:	00          	.byte	0x00
 800d70e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d712:	0728      	lsls	r0, r5, #28
 800d714:	d5c0      	bpl.n	800d698 <_strtod_l+0x88>
 800d716:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d71a:	e7bd      	b.n	800d698 <_strtod_l+0x88>
 800d71c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d720:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d722:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d726:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d72a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d72e:	e7f0      	b.n	800d712 <_strtod_l+0x102>
 800d730:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d8b4 <_strtod_l+0x2a4>
 800d734:	e7ed      	b.n	800d712 <_strtod_l+0x102>
 800d736:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d73a:	f04f 3aff 	mov.w	sl, #4294967295
 800d73e:	e7e8      	b.n	800d712 <_strtod_l+0x102>
 800d740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d742:	1c5a      	adds	r2, r3, #1
 800d744:	9217      	str	r2, [sp, #92]	; 0x5c
 800d746:	785b      	ldrb	r3, [r3, #1]
 800d748:	2b30      	cmp	r3, #48	; 0x30
 800d74a:	d0f9      	beq.n	800d740 <_strtod_l+0x130>
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d0a3      	beq.n	800d698 <_strtod_l+0x88>
 800d750:	2301      	movs	r3, #1
 800d752:	f04f 0900 	mov.w	r9, #0
 800d756:	9304      	str	r3, [sp, #16]
 800d758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d75a:	9308      	str	r3, [sp, #32]
 800d75c:	f8cd 901c 	str.w	r9, [sp, #28]
 800d760:	464f      	mov	r7, r9
 800d762:	220a      	movs	r2, #10
 800d764:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d766:	7806      	ldrb	r6, [r0, #0]
 800d768:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d76c:	b2d9      	uxtb	r1, r3
 800d76e:	2909      	cmp	r1, #9
 800d770:	d92a      	bls.n	800d7c8 <_strtod_l+0x1b8>
 800d772:	9905      	ldr	r1, [sp, #20]
 800d774:	462a      	mov	r2, r5
 800d776:	f002 ff0f 	bl	8010598 <strncmp>
 800d77a:	b398      	cbz	r0, 800d7e4 <_strtod_l+0x1d4>
 800d77c:	2000      	movs	r0, #0
 800d77e:	4632      	mov	r2, r6
 800d780:	463d      	mov	r5, r7
 800d782:	9005      	str	r0, [sp, #20]
 800d784:	4603      	mov	r3, r0
 800d786:	2a65      	cmp	r2, #101	; 0x65
 800d788:	d001      	beq.n	800d78e <_strtod_l+0x17e>
 800d78a:	2a45      	cmp	r2, #69	; 0x45
 800d78c:	d118      	bne.n	800d7c0 <_strtod_l+0x1b0>
 800d78e:	b91d      	cbnz	r5, 800d798 <_strtod_l+0x188>
 800d790:	9a04      	ldr	r2, [sp, #16]
 800d792:	4302      	orrs	r2, r0
 800d794:	d09e      	beq.n	800d6d4 <_strtod_l+0xc4>
 800d796:	2500      	movs	r5, #0
 800d798:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d79c:	f108 0201 	add.w	r2, r8, #1
 800d7a0:	9217      	str	r2, [sp, #92]	; 0x5c
 800d7a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d7a6:	2a2b      	cmp	r2, #43	; 0x2b
 800d7a8:	d075      	beq.n	800d896 <_strtod_l+0x286>
 800d7aa:	2a2d      	cmp	r2, #45	; 0x2d
 800d7ac:	d07b      	beq.n	800d8a6 <_strtod_l+0x296>
 800d7ae:	f04f 0c00 	mov.w	ip, #0
 800d7b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d7b6:	2909      	cmp	r1, #9
 800d7b8:	f240 8082 	bls.w	800d8c0 <_strtod_l+0x2b0>
 800d7bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d7c0:	2600      	movs	r6, #0
 800d7c2:	e09d      	b.n	800d900 <_strtod_l+0x2f0>
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	e7c4      	b.n	800d752 <_strtod_l+0x142>
 800d7c8:	2f08      	cmp	r7, #8
 800d7ca:	bfd8      	it	le
 800d7cc:	9907      	ldrle	r1, [sp, #28]
 800d7ce:	f100 0001 	add.w	r0, r0, #1
 800d7d2:	bfda      	itte	le
 800d7d4:	fb02 3301 	mlale	r3, r2, r1, r3
 800d7d8:	9307      	strle	r3, [sp, #28]
 800d7da:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d7de:	3701      	adds	r7, #1
 800d7e0:	9017      	str	r0, [sp, #92]	; 0x5c
 800d7e2:	e7bf      	b.n	800d764 <_strtod_l+0x154>
 800d7e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7e6:	195a      	adds	r2, r3, r5
 800d7e8:	9217      	str	r2, [sp, #92]	; 0x5c
 800d7ea:	5d5a      	ldrb	r2, [r3, r5]
 800d7ec:	2f00      	cmp	r7, #0
 800d7ee:	d037      	beq.n	800d860 <_strtod_l+0x250>
 800d7f0:	9005      	str	r0, [sp, #20]
 800d7f2:	463d      	mov	r5, r7
 800d7f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d7f8:	2b09      	cmp	r3, #9
 800d7fa:	d912      	bls.n	800d822 <_strtod_l+0x212>
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	e7c2      	b.n	800d786 <_strtod_l+0x176>
 800d800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d802:	1c5a      	adds	r2, r3, #1
 800d804:	9217      	str	r2, [sp, #92]	; 0x5c
 800d806:	785a      	ldrb	r2, [r3, #1]
 800d808:	3001      	adds	r0, #1
 800d80a:	2a30      	cmp	r2, #48	; 0x30
 800d80c:	d0f8      	beq.n	800d800 <_strtod_l+0x1f0>
 800d80e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d812:	2b08      	cmp	r3, #8
 800d814:	f200 84d9 	bhi.w	800e1ca <_strtod_l+0xbba>
 800d818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d81a:	9005      	str	r0, [sp, #20]
 800d81c:	2000      	movs	r0, #0
 800d81e:	9308      	str	r3, [sp, #32]
 800d820:	4605      	mov	r5, r0
 800d822:	3a30      	subs	r2, #48	; 0x30
 800d824:	f100 0301 	add.w	r3, r0, #1
 800d828:	d014      	beq.n	800d854 <_strtod_l+0x244>
 800d82a:	9905      	ldr	r1, [sp, #20]
 800d82c:	4419      	add	r1, r3
 800d82e:	9105      	str	r1, [sp, #20]
 800d830:	462b      	mov	r3, r5
 800d832:	eb00 0e05 	add.w	lr, r0, r5
 800d836:	210a      	movs	r1, #10
 800d838:	4573      	cmp	r3, lr
 800d83a:	d113      	bne.n	800d864 <_strtod_l+0x254>
 800d83c:	182b      	adds	r3, r5, r0
 800d83e:	2b08      	cmp	r3, #8
 800d840:	f105 0501 	add.w	r5, r5, #1
 800d844:	4405      	add	r5, r0
 800d846:	dc1c      	bgt.n	800d882 <_strtod_l+0x272>
 800d848:	9907      	ldr	r1, [sp, #28]
 800d84a:	230a      	movs	r3, #10
 800d84c:	fb03 2301 	mla	r3, r3, r1, r2
 800d850:	9307      	str	r3, [sp, #28]
 800d852:	2300      	movs	r3, #0
 800d854:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d856:	1c51      	adds	r1, r2, #1
 800d858:	9117      	str	r1, [sp, #92]	; 0x5c
 800d85a:	7852      	ldrb	r2, [r2, #1]
 800d85c:	4618      	mov	r0, r3
 800d85e:	e7c9      	b.n	800d7f4 <_strtod_l+0x1e4>
 800d860:	4638      	mov	r0, r7
 800d862:	e7d2      	b.n	800d80a <_strtod_l+0x1fa>
 800d864:	2b08      	cmp	r3, #8
 800d866:	dc04      	bgt.n	800d872 <_strtod_l+0x262>
 800d868:	9e07      	ldr	r6, [sp, #28]
 800d86a:	434e      	muls	r6, r1
 800d86c:	9607      	str	r6, [sp, #28]
 800d86e:	3301      	adds	r3, #1
 800d870:	e7e2      	b.n	800d838 <_strtod_l+0x228>
 800d872:	f103 0c01 	add.w	ip, r3, #1
 800d876:	f1bc 0f10 	cmp.w	ip, #16
 800d87a:	bfd8      	it	le
 800d87c:	fb01 f909 	mulle.w	r9, r1, r9
 800d880:	e7f5      	b.n	800d86e <_strtod_l+0x25e>
 800d882:	2d10      	cmp	r5, #16
 800d884:	bfdc      	itt	le
 800d886:	230a      	movle	r3, #10
 800d888:	fb03 2909 	mlale	r9, r3, r9, r2
 800d88c:	e7e1      	b.n	800d852 <_strtod_l+0x242>
 800d88e:	2300      	movs	r3, #0
 800d890:	9305      	str	r3, [sp, #20]
 800d892:	2301      	movs	r3, #1
 800d894:	e77c      	b.n	800d790 <_strtod_l+0x180>
 800d896:	f04f 0c00 	mov.w	ip, #0
 800d89a:	f108 0202 	add.w	r2, r8, #2
 800d89e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d8a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d8a4:	e785      	b.n	800d7b2 <_strtod_l+0x1a2>
 800d8a6:	f04f 0c01 	mov.w	ip, #1
 800d8aa:	e7f6      	b.n	800d89a <_strtod_l+0x28a>
 800d8ac:	080116c8 	.word	0x080116c8
 800d8b0:	0801147c 	.word	0x0801147c
 800d8b4:	7ff00000 	.word	0x7ff00000
 800d8b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d8ba:	1c51      	adds	r1, r2, #1
 800d8bc:	9117      	str	r1, [sp, #92]	; 0x5c
 800d8be:	7852      	ldrb	r2, [r2, #1]
 800d8c0:	2a30      	cmp	r2, #48	; 0x30
 800d8c2:	d0f9      	beq.n	800d8b8 <_strtod_l+0x2a8>
 800d8c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d8c8:	2908      	cmp	r1, #8
 800d8ca:	f63f af79 	bhi.w	800d7c0 <_strtod_l+0x1b0>
 800d8ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d8d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d8d4:	9206      	str	r2, [sp, #24]
 800d8d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d8d8:	1c51      	adds	r1, r2, #1
 800d8da:	9117      	str	r1, [sp, #92]	; 0x5c
 800d8dc:	7852      	ldrb	r2, [r2, #1]
 800d8de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d8e2:	2e09      	cmp	r6, #9
 800d8e4:	d937      	bls.n	800d956 <_strtod_l+0x346>
 800d8e6:	9e06      	ldr	r6, [sp, #24]
 800d8e8:	1b89      	subs	r1, r1, r6
 800d8ea:	2908      	cmp	r1, #8
 800d8ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d8f0:	dc02      	bgt.n	800d8f8 <_strtod_l+0x2e8>
 800d8f2:	4576      	cmp	r6, lr
 800d8f4:	bfa8      	it	ge
 800d8f6:	4676      	movge	r6, lr
 800d8f8:	f1bc 0f00 	cmp.w	ip, #0
 800d8fc:	d000      	beq.n	800d900 <_strtod_l+0x2f0>
 800d8fe:	4276      	negs	r6, r6
 800d900:	2d00      	cmp	r5, #0
 800d902:	d14d      	bne.n	800d9a0 <_strtod_l+0x390>
 800d904:	9904      	ldr	r1, [sp, #16]
 800d906:	4301      	orrs	r1, r0
 800d908:	f47f aec6 	bne.w	800d698 <_strtod_l+0x88>
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	f47f aee1 	bne.w	800d6d4 <_strtod_l+0xc4>
 800d912:	2a69      	cmp	r2, #105	; 0x69
 800d914:	d027      	beq.n	800d966 <_strtod_l+0x356>
 800d916:	dc24      	bgt.n	800d962 <_strtod_l+0x352>
 800d918:	2a49      	cmp	r2, #73	; 0x49
 800d91a:	d024      	beq.n	800d966 <_strtod_l+0x356>
 800d91c:	2a4e      	cmp	r2, #78	; 0x4e
 800d91e:	f47f aed9 	bne.w	800d6d4 <_strtod_l+0xc4>
 800d922:	499f      	ldr	r1, [pc, #636]	; (800dba0 <_strtod_l+0x590>)
 800d924:	a817      	add	r0, sp, #92	; 0x5c
 800d926:	f001 fe3d 	bl	800f5a4 <__match>
 800d92a:	2800      	cmp	r0, #0
 800d92c:	f43f aed2 	beq.w	800d6d4 <_strtod_l+0xc4>
 800d930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	2b28      	cmp	r3, #40	; 0x28
 800d936:	d12d      	bne.n	800d994 <_strtod_l+0x384>
 800d938:	499a      	ldr	r1, [pc, #616]	; (800dba4 <_strtod_l+0x594>)
 800d93a:	aa1a      	add	r2, sp, #104	; 0x68
 800d93c:	a817      	add	r0, sp, #92	; 0x5c
 800d93e:	f001 fe45 	bl	800f5cc <__hexnan>
 800d942:	2805      	cmp	r0, #5
 800d944:	d126      	bne.n	800d994 <_strtod_l+0x384>
 800d946:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d948:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d94c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d950:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d954:	e6a0      	b.n	800d698 <_strtod_l+0x88>
 800d956:	210a      	movs	r1, #10
 800d958:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d95c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d960:	e7b9      	b.n	800d8d6 <_strtod_l+0x2c6>
 800d962:	2a6e      	cmp	r2, #110	; 0x6e
 800d964:	e7db      	b.n	800d91e <_strtod_l+0x30e>
 800d966:	4990      	ldr	r1, [pc, #576]	; (800dba8 <_strtod_l+0x598>)
 800d968:	a817      	add	r0, sp, #92	; 0x5c
 800d96a:	f001 fe1b 	bl	800f5a4 <__match>
 800d96e:	2800      	cmp	r0, #0
 800d970:	f43f aeb0 	beq.w	800d6d4 <_strtod_l+0xc4>
 800d974:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d976:	498d      	ldr	r1, [pc, #564]	; (800dbac <_strtod_l+0x59c>)
 800d978:	3b01      	subs	r3, #1
 800d97a:	a817      	add	r0, sp, #92	; 0x5c
 800d97c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d97e:	f001 fe11 	bl	800f5a4 <__match>
 800d982:	b910      	cbnz	r0, 800d98a <_strtod_l+0x37a>
 800d984:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d986:	3301      	adds	r3, #1
 800d988:	9317      	str	r3, [sp, #92]	; 0x5c
 800d98a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800dbbc <_strtod_l+0x5ac>
 800d98e:	f04f 0a00 	mov.w	sl, #0
 800d992:	e681      	b.n	800d698 <_strtod_l+0x88>
 800d994:	4886      	ldr	r0, [pc, #536]	; (800dbb0 <_strtod_l+0x5a0>)
 800d996:	f002 fde7 	bl	8010568 <nan>
 800d99a:	ec5b ab10 	vmov	sl, fp, d0
 800d99e:	e67b      	b.n	800d698 <_strtod_l+0x88>
 800d9a0:	9b05      	ldr	r3, [sp, #20]
 800d9a2:	9807      	ldr	r0, [sp, #28]
 800d9a4:	1af3      	subs	r3, r6, r3
 800d9a6:	2f00      	cmp	r7, #0
 800d9a8:	bf08      	it	eq
 800d9aa:	462f      	moveq	r7, r5
 800d9ac:	2d10      	cmp	r5, #16
 800d9ae:	9306      	str	r3, [sp, #24]
 800d9b0:	46a8      	mov	r8, r5
 800d9b2:	bfa8      	it	ge
 800d9b4:	f04f 0810 	movge.w	r8, #16
 800d9b8:	f7f2 fdac 	bl	8000514 <__aeabi_ui2d>
 800d9bc:	2d09      	cmp	r5, #9
 800d9be:	4682      	mov	sl, r0
 800d9c0:	468b      	mov	fp, r1
 800d9c2:	dd13      	ble.n	800d9ec <_strtod_l+0x3dc>
 800d9c4:	4b7b      	ldr	r3, [pc, #492]	; (800dbb4 <_strtod_l+0x5a4>)
 800d9c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d9ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d9ce:	f7f2 fe1b 	bl	8000608 <__aeabi_dmul>
 800d9d2:	4682      	mov	sl, r0
 800d9d4:	4648      	mov	r0, r9
 800d9d6:	468b      	mov	fp, r1
 800d9d8:	f7f2 fd9c 	bl	8000514 <__aeabi_ui2d>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	460b      	mov	r3, r1
 800d9e0:	4650      	mov	r0, sl
 800d9e2:	4659      	mov	r1, fp
 800d9e4:	f7f2 fc5a 	bl	800029c <__adddf3>
 800d9e8:	4682      	mov	sl, r0
 800d9ea:	468b      	mov	fp, r1
 800d9ec:	2d0f      	cmp	r5, #15
 800d9ee:	dc38      	bgt.n	800da62 <_strtod_l+0x452>
 800d9f0:	9b06      	ldr	r3, [sp, #24]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	f43f ae50 	beq.w	800d698 <_strtod_l+0x88>
 800d9f8:	dd24      	ble.n	800da44 <_strtod_l+0x434>
 800d9fa:	2b16      	cmp	r3, #22
 800d9fc:	dc0b      	bgt.n	800da16 <_strtod_l+0x406>
 800d9fe:	496d      	ldr	r1, [pc, #436]	; (800dbb4 <_strtod_l+0x5a4>)
 800da00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800da04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da08:	4652      	mov	r2, sl
 800da0a:	465b      	mov	r3, fp
 800da0c:	f7f2 fdfc 	bl	8000608 <__aeabi_dmul>
 800da10:	4682      	mov	sl, r0
 800da12:	468b      	mov	fp, r1
 800da14:	e640      	b.n	800d698 <_strtod_l+0x88>
 800da16:	9a06      	ldr	r2, [sp, #24]
 800da18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800da1c:	4293      	cmp	r3, r2
 800da1e:	db20      	blt.n	800da62 <_strtod_l+0x452>
 800da20:	4c64      	ldr	r4, [pc, #400]	; (800dbb4 <_strtod_l+0x5a4>)
 800da22:	f1c5 050f 	rsb	r5, r5, #15
 800da26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800da2a:	4652      	mov	r2, sl
 800da2c:	465b      	mov	r3, fp
 800da2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da32:	f7f2 fde9 	bl	8000608 <__aeabi_dmul>
 800da36:	9b06      	ldr	r3, [sp, #24]
 800da38:	1b5d      	subs	r5, r3, r5
 800da3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800da3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800da42:	e7e3      	b.n	800da0c <_strtod_l+0x3fc>
 800da44:	9b06      	ldr	r3, [sp, #24]
 800da46:	3316      	adds	r3, #22
 800da48:	db0b      	blt.n	800da62 <_strtod_l+0x452>
 800da4a:	9b05      	ldr	r3, [sp, #20]
 800da4c:	1b9e      	subs	r6, r3, r6
 800da4e:	4b59      	ldr	r3, [pc, #356]	; (800dbb4 <_strtod_l+0x5a4>)
 800da50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800da54:	e9d6 2300 	ldrd	r2, r3, [r6]
 800da58:	4650      	mov	r0, sl
 800da5a:	4659      	mov	r1, fp
 800da5c:	f7f2 fefe 	bl	800085c <__aeabi_ddiv>
 800da60:	e7d6      	b.n	800da10 <_strtod_l+0x400>
 800da62:	9b06      	ldr	r3, [sp, #24]
 800da64:	eba5 0808 	sub.w	r8, r5, r8
 800da68:	4498      	add	r8, r3
 800da6a:	f1b8 0f00 	cmp.w	r8, #0
 800da6e:	dd74      	ble.n	800db5a <_strtod_l+0x54a>
 800da70:	f018 030f 	ands.w	r3, r8, #15
 800da74:	d00a      	beq.n	800da8c <_strtod_l+0x47c>
 800da76:	494f      	ldr	r1, [pc, #316]	; (800dbb4 <_strtod_l+0x5a4>)
 800da78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800da7c:	4652      	mov	r2, sl
 800da7e:	465b      	mov	r3, fp
 800da80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da84:	f7f2 fdc0 	bl	8000608 <__aeabi_dmul>
 800da88:	4682      	mov	sl, r0
 800da8a:	468b      	mov	fp, r1
 800da8c:	f038 080f 	bics.w	r8, r8, #15
 800da90:	d04f      	beq.n	800db32 <_strtod_l+0x522>
 800da92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800da96:	dd22      	ble.n	800dade <_strtod_l+0x4ce>
 800da98:	2500      	movs	r5, #0
 800da9a:	462e      	mov	r6, r5
 800da9c:	9507      	str	r5, [sp, #28]
 800da9e:	9505      	str	r5, [sp, #20]
 800daa0:	2322      	movs	r3, #34	; 0x22
 800daa2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800dbbc <_strtod_l+0x5ac>
 800daa6:	6023      	str	r3, [r4, #0]
 800daa8:	f04f 0a00 	mov.w	sl, #0
 800daac:	9b07      	ldr	r3, [sp, #28]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	f43f adf2 	beq.w	800d698 <_strtod_l+0x88>
 800dab4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dab6:	4620      	mov	r0, r4
 800dab8:	f001 fe82 	bl	800f7c0 <_Bfree>
 800dabc:	9905      	ldr	r1, [sp, #20]
 800dabe:	4620      	mov	r0, r4
 800dac0:	f001 fe7e 	bl	800f7c0 <_Bfree>
 800dac4:	4631      	mov	r1, r6
 800dac6:	4620      	mov	r0, r4
 800dac8:	f001 fe7a 	bl	800f7c0 <_Bfree>
 800dacc:	9907      	ldr	r1, [sp, #28]
 800dace:	4620      	mov	r0, r4
 800dad0:	f001 fe76 	bl	800f7c0 <_Bfree>
 800dad4:	4629      	mov	r1, r5
 800dad6:	4620      	mov	r0, r4
 800dad8:	f001 fe72 	bl	800f7c0 <_Bfree>
 800dadc:	e5dc      	b.n	800d698 <_strtod_l+0x88>
 800dade:	4b36      	ldr	r3, [pc, #216]	; (800dbb8 <_strtod_l+0x5a8>)
 800dae0:	9304      	str	r3, [sp, #16]
 800dae2:	2300      	movs	r3, #0
 800dae4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800dae8:	4650      	mov	r0, sl
 800daea:	4659      	mov	r1, fp
 800daec:	4699      	mov	r9, r3
 800daee:	f1b8 0f01 	cmp.w	r8, #1
 800daf2:	dc21      	bgt.n	800db38 <_strtod_l+0x528>
 800daf4:	b10b      	cbz	r3, 800dafa <_strtod_l+0x4ea>
 800daf6:	4682      	mov	sl, r0
 800daf8:	468b      	mov	fp, r1
 800dafa:	4b2f      	ldr	r3, [pc, #188]	; (800dbb8 <_strtod_l+0x5a8>)
 800dafc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800db00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800db04:	4652      	mov	r2, sl
 800db06:	465b      	mov	r3, fp
 800db08:	e9d9 0100 	ldrd	r0, r1, [r9]
 800db0c:	f7f2 fd7c 	bl	8000608 <__aeabi_dmul>
 800db10:	4b2a      	ldr	r3, [pc, #168]	; (800dbbc <_strtod_l+0x5ac>)
 800db12:	460a      	mov	r2, r1
 800db14:	400b      	ands	r3, r1
 800db16:	492a      	ldr	r1, [pc, #168]	; (800dbc0 <_strtod_l+0x5b0>)
 800db18:	428b      	cmp	r3, r1
 800db1a:	4682      	mov	sl, r0
 800db1c:	d8bc      	bhi.n	800da98 <_strtod_l+0x488>
 800db1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800db22:	428b      	cmp	r3, r1
 800db24:	bf86      	itte	hi
 800db26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800dbc4 <_strtod_l+0x5b4>
 800db2a:	f04f 3aff 	movhi.w	sl, #4294967295
 800db2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800db32:	2300      	movs	r3, #0
 800db34:	9304      	str	r3, [sp, #16]
 800db36:	e084      	b.n	800dc42 <_strtod_l+0x632>
 800db38:	f018 0f01 	tst.w	r8, #1
 800db3c:	d005      	beq.n	800db4a <_strtod_l+0x53a>
 800db3e:	9b04      	ldr	r3, [sp, #16]
 800db40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db44:	f7f2 fd60 	bl	8000608 <__aeabi_dmul>
 800db48:	2301      	movs	r3, #1
 800db4a:	9a04      	ldr	r2, [sp, #16]
 800db4c:	3208      	adds	r2, #8
 800db4e:	f109 0901 	add.w	r9, r9, #1
 800db52:	ea4f 0868 	mov.w	r8, r8, asr #1
 800db56:	9204      	str	r2, [sp, #16]
 800db58:	e7c9      	b.n	800daee <_strtod_l+0x4de>
 800db5a:	d0ea      	beq.n	800db32 <_strtod_l+0x522>
 800db5c:	f1c8 0800 	rsb	r8, r8, #0
 800db60:	f018 020f 	ands.w	r2, r8, #15
 800db64:	d00a      	beq.n	800db7c <_strtod_l+0x56c>
 800db66:	4b13      	ldr	r3, [pc, #76]	; (800dbb4 <_strtod_l+0x5a4>)
 800db68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db6c:	4650      	mov	r0, sl
 800db6e:	4659      	mov	r1, fp
 800db70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db74:	f7f2 fe72 	bl	800085c <__aeabi_ddiv>
 800db78:	4682      	mov	sl, r0
 800db7a:	468b      	mov	fp, r1
 800db7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800db80:	d0d7      	beq.n	800db32 <_strtod_l+0x522>
 800db82:	f1b8 0f1f 	cmp.w	r8, #31
 800db86:	dd1f      	ble.n	800dbc8 <_strtod_l+0x5b8>
 800db88:	2500      	movs	r5, #0
 800db8a:	462e      	mov	r6, r5
 800db8c:	9507      	str	r5, [sp, #28]
 800db8e:	9505      	str	r5, [sp, #20]
 800db90:	2322      	movs	r3, #34	; 0x22
 800db92:	f04f 0a00 	mov.w	sl, #0
 800db96:	f04f 0b00 	mov.w	fp, #0
 800db9a:	6023      	str	r3, [r4, #0]
 800db9c:	e786      	b.n	800daac <_strtod_l+0x49c>
 800db9e:	bf00      	nop
 800dba0:	0801144d 	.word	0x0801144d
 800dba4:	08011490 	.word	0x08011490
 800dba8:	08011445 	.word	0x08011445
 800dbac:	080115d4 	.word	0x080115d4
 800dbb0:	08011880 	.word	0x08011880
 800dbb4:	08011760 	.word	0x08011760
 800dbb8:	08011738 	.word	0x08011738
 800dbbc:	7ff00000 	.word	0x7ff00000
 800dbc0:	7ca00000 	.word	0x7ca00000
 800dbc4:	7fefffff 	.word	0x7fefffff
 800dbc8:	f018 0310 	ands.w	r3, r8, #16
 800dbcc:	bf18      	it	ne
 800dbce:	236a      	movne	r3, #106	; 0x6a
 800dbd0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800df80 <_strtod_l+0x970>
 800dbd4:	9304      	str	r3, [sp, #16]
 800dbd6:	4650      	mov	r0, sl
 800dbd8:	4659      	mov	r1, fp
 800dbda:	2300      	movs	r3, #0
 800dbdc:	f018 0f01 	tst.w	r8, #1
 800dbe0:	d004      	beq.n	800dbec <_strtod_l+0x5dc>
 800dbe2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dbe6:	f7f2 fd0f 	bl	8000608 <__aeabi_dmul>
 800dbea:	2301      	movs	r3, #1
 800dbec:	ea5f 0868 	movs.w	r8, r8, asr #1
 800dbf0:	f109 0908 	add.w	r9, r9, #8
 800dbf4:	d1f2      	bne.n	800dbdc <_strtod_l+0x5cc>
 800dbf6:	b10b      	cbz	r3, 800dbfc <_strtod_l+0x5ec>
 800dbf8:	4682      	mov	sl, r0
 800dbfa:	468b      	mov	fp, r1
 800dbfc:	9b04      	ldr	r3, [sp, #16]
 800dbfe:	b1c3      	cbz	r3, 800dc32 <_strtod_l+0x622>
 800dc00:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800dc04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	4659      	mov	r1, fp
 800dc0c:	dd11      	ble.n	800dc32 <_strtod_l+0x622>
 800dc0e:	2b1f      	cmp	r3, #31
 800dc10:	f340 8124 	ble.w	800de5c <_strtod_l+0x84c>
 800dc14:	2b34      	cmp	r3, #52	; 0x34
 800dc16:	bfde      	ittt	le
 800dc18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800dc1c:	f04f 33ff 	movle.w	r3, #4294967295
 800dc20:	fa03 f202 	lslle.w	r2, r3, r2
 800dc24:	f04f 0a00 	mov.w	sl, #0
 800dc28:	bfcc      	ite	gt
 800dc2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800dc2e:	ea02 0b01 	andle.w	fp, r2, r1
 800dc32:	2200      	movs	r2, #0
 800dc34:	2300      	movs	r3, #0
 800dc36:	4650      	mov	r0, sl
 800dc38:	4659      	mov	r1, fp
 800dc3a:	f7f2 ff4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	d1a2      	bne.n	800db88 <_strtod_l+0x578>
 800dc42:	9b07      	ldr	r3, [sp, #28]
 800dc44:	9300      	str	r3, [sp, #0]
 800dc46:	9908      	ldr	r1, [sp, #32]
 800dc48:	462b      	mov	r3, r5
 800dc4a:	463a      	mov	r2, r7
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	f001 fe1f 	bl	800f890 <__s2b>
 800dc52:	9007      	str	r0, [sp, #28]
 800dc54:	2800      	cmp	r0, #0
 800dc56:	f43f af1f 	beq.w	800da98 <_strtod_l+0x488>
 800dc5a:	9b05      	ldr	r3, [sp, #20]
 800dc5c:	1b9e      	subs	r6, r3, r6
 800dc5e:	9b06      	ldr	r3, [sp, #24]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	bfb4      	ite	lt
 800dc64:	4633      	movlt	r3, r6
 800dc66:	2300      	movge	r3, #0
 800dc68:	930c      	str	r3, [sp, #48]	; 0x30
 800dc6a:	9b06      	ldr	r3, [sp, #24]
 800dc6c:	2500      	movs	r5, #0
 800dc6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dc72:	9312      	str	r3, [sp, #72]	; 0x48
 800dc74:	462e      	mov	r6, r5
 800dc76:	9b07      	ldr	r3, [sp, #28]
 800dc78:	4620      	mov	r0, r4
 800dc7a:	6859      	ldr	r1, [r3, #4]
 800dc7c:	f001 fd60 	bl	800f740 <_Balloc>
 800dc80:	9005      	str	r0, [sp, #20]
 800dc82:	2800      	cmp	r0, #0
 800dc84:	f43f af0c 	beq.w	800daa0 <_strtod_l+0x490>
 800dc88:	9b07      	ldr	r3, [sp, #28]
 800dc8a:	691a      	ldr	r2, [r3, #16]
 800dc8c:	3202      	adds	r2, #2
 800dc8e:	f103 010c 	add.w	r1, r3, #12
 800dc92:	0092      	lsls	r2, r2, #2
 800dc94:	300c      	adds	r0, #12
 800dc96:	f7fe fde7 	bl	800c868 <memcpy>
 800dc9a:	ec4b ab10 	vmov	d0, sl, fp
 800dc9e:	aa1a      	add	r2, sp, #104	; 0x68
 800dca0:	a919      	add	r1, sp, #100	; 0x64
 800dca2:	4620      	mov	r0, r4
 800dca4:	f002 f93a 	bl	800ff1c <__d2b>
 800dca8:	ec4b ab18 	vmov	d8, sl, fp
 800dcac:	9018      	str	r0, [sp, #96]	; 0x60
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	f43f aef6 	beq.w	800daa0 <_strtod_l+0x490>
 800dcb4:	2101      	movs	r1, #1
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	f001 fe84 	bl	800f9c4 <__i2b>
 800dcbc:	4606      	mov	r6, r0
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	f43f aeee 	beq.w	800daa0 <_strtod_l+0x490>
 800dcc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dcc6:	9904      	ldr	r1, [sp, #16]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	bfab      	itete	ge
 800dccc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800dcce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800dcd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800dcd2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800dcd6:	bfac      	ite	ge
 800dcd8:	eb03 0902 	addge.w	r9, r3, r2
 800dcdc:	1ad7      	sublt	r7, r2, r3
 800dcde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dce0:	eba3 0801 	sub.w	r8, r3, r1
 800dce4:	4490      	add	r8, r2
 800dce6:	4ba1      	ldr	r3, [pc, #644]	; (800df6c <_strtod_l+0x95c>)
 800dce8:	f108 38ff 	add.w	r8, r8, #4294967295
 800dcec:	4598      	cmp	r8, r3
 800dcee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dcf2:	f280 80c7 	bge.w	800de84 <_strtod_l+0x874>
 800dcf6:	eba3 0308 	sub.w	r3, r3, r8
 800dcfa:	2b1f      	cmp	r3, #31
 800dcfc:	eba2 0203 	sub.w	r2, r2, r3
 800dd00:	f04f 0101 	mov.w	r1, #1
 800dd04:	f300 80b1 	bgt.w	800de6a <_strtod_l+0x85a>
 800dd08:	fa01 f303 	lsl.w	r3, r1, r3
 800dd0c:	930d      	str	r3, [sp, #52]	; 0x34
 800dd0e:	2300      	movs	r3, #0
 800dd10:	9308      	str	r3, [sp, #32]
 800dd12:	eb09 0802 	add.w	r8, r9, r2
 800dd16:	9b04      	ldr	r3, [sp, #16]
 800dd18:	45c1      	cmp	r9, r8
 800dd1a:	4417      	add	r7, r2
 800dd1c:	441f      	add	r7, r3
 800dd1e:	464b      	mov	r3, r9
 800dd20:	bfa8      	it	ge
 800dd22:	4643      	movge	r3, r8
 800dd24:	42bb      	cmp	r3, r7
 800dd26:	bfa8      	it	ge
 800dd28:	463b      	movge	r3, r7
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	bfc2      	ittt	gt
 800dd2e:	eba8 0803 	subgt.w	r8, r8, r3
 800dd32:	1aff      	subgt	r7, r7, r3
 800dd34:	eba9 0903 	subgt.w	r9, r9, r3
 800dd38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	dd17      	ble.n	800dd6e <_strtod_l+0x75e>
 800dd3e:	4631      	mov	r1, r6
 800dd40:	461a      	mov	r2, r3
 800dd42:	4620      	mov	r0, r4
 800dd44:	f001 fefe 	bl	800fb44 <__pow5mult>
 800dd48:	4606      	mov	r6, r0
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	f43f aea8 	beq.w	800daa0 <_strtod_l+0x490>
 800dd50:	4601      	mov	r1, r0
 800dd52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dd54:	4620      	mov	r0, r4
 800dd56:	f001 fe4b 	bl	800f9f0 <__multiply>
 800dd5a:	900b      	str	r0, [sp, #44]	; 0x2c
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	f43f ae9f 	beq.w	800daa0 <_strtod_l+0x490>
 800dd62:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dd64:	4620      	mov	r0, r4
 800dd66:	f001 fd2b 	bl	800f7c0 <_Bfree>
 800dd6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd6c:	9318      	str	r3, [sp, #96]	; 0x60
 800dd6e:	f1b8 0f00 	cmp.w	r8, #0
 800dd72:	f300 808c 	bgt.w	800de8e <_strtod_l+0x87e>
 800dd76:	9b06      	ldr	r3, [sp, #24]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	dd08      	ble.n	800dd8e <_strtod_l+0x77e>
 800dd7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dd7e:	9905      	ldr	r1, [sp, #20]
 800dd80:	4620      	mov	r0, r4
 800dd82:	f001 fedf 	bl	800fb44 <__pow5mult>
 800dd86:	9005      	str	r0, [sp, #20]
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	f43f ae89 	beq.w	800daa0 <_strtod_l+0x490>
 800dd8e:	2f00      	cmp	r7, #0
 800dd90:	dd08      	ble.n	800dda4 <_strtod_l+0x794>
 800dd92:	9905      	ldr	r1, [sp, #20]
 800dd94:	463a      	mov	r2, r7
 800dd96:	4620      	mov	r0, r4
 800dd98:	f001 ff2e 	bl	800fbf8 <__lshift>
 800dd9c:	9005      	str	r0, [sp, #20]
 800dd9e:	2800      	cmp	r0, #0
 800dda0:	f43f ae7e 	beq.w	800daa0 <_strtod_l+0x490>
 800dda4:	f1b9 0f00 	cmp.w	r9, #0
 800dda8:	dd08      	ble.n	800ddbc <_strtod_l+0x7ac>
 800ddaa:	4631      	mov	r1, r6
 800ddac:	464a      	mov	r2, r9
 800ddae:	4620      	mov	r0, r4
 800ddb0:	f001 ff22 	bl	800fbf8 <__lshift>
 800ddb4:	4606      	mov	r6, r0
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	f43f ae72 	beq.w	800daa0 <_strtod_l+0x490>
 800ddbc:	9a05      	ldr	r2, [sp, #20]
 800ddbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ddc0:	4620      	mov	r0, r4
 800ddc2:	f001 ffa5 	bl	800fd10 <__mdiff>
 800ddc6:	4605      	mov	r5, r0
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	f43f ae69 	beq.w	800daa0 <_strtod_l+0x490>
 800ddce:	68c3      	ldr	r3, [r0, #12]
 800ddd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	60c3      	str	r3, [r0, #12]
 800ddd6:	4631      	mov	r1, r6
 800ddd8:	f001 ff7e 	bl	800fcd8 <__mcmp>
 800dddc:	2800      	cmp	r0, #0
 800ddde:	da60      	bge.n	800dea2 <_strtod_l+0x892>
 800dde0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dde2:	ea53 030a 	orrs.w	r3, r3, sl
 800dde6:	f040 8082 	bne.w	800deee <_strtod_l+0x8de>
 800ddea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d17d      	bne.n	800deee <_strtod_l+0x8de>
 800ddf2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ddf6:	0d1b      	lsrs	r3, r3, #20
 800ddf8:	051b      	lsls	r3, r3, #20
 800ddfa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ddfe:	d976      	bls.n	800deee <_strtod_l+0x8de>
 800de00:	696b      	ldr	r3, [r5, #20]
 800de02:	b913      	cbnz	r3, 800de0a <_strtod_l+0x7fa>
 800de04:	692b      	ldr	r3, [r5, #16]
 800de06:	2b01      	cmp	r3, #1
 800de08:	dd71      	ble.n	800deee <_strtod_l+0x8de>
 800de0a:	4629      	mov	r1, r5
 800de0c:	2201      	movs	r2, #1
 800de0e:	4620      	mov	r0, r4
 800de10:	f001 fef2 	bl	800fbf8 <__lshift>
 800de14:	4631      	mov	r1, r6
 800de16:	4605      	mov	r5, r0
 800de18:	f001 ff5e 	bl	800fcd8 <__mcmp>
 800de1c:	2800      	cmp	r0, #0
 800de1e:	dd66      	ble.n	800deee <_strtod_l+0x8de>
 800de20:	9904      	ldr	r1, [sp, #16]
 800de22:	4a53      	ldr	r2, [pc, #332]	; (800df70 <_strtod_l+0x960>)
 800de24:	465b      	mov	r3, fp
 800de26:	2900      	cmp	r1, #0
 800de28:	f000 8081 	beq.w	800df2e <_strtod_l+0x91e>
 800de2c:	ea02 010b 	and.w	r1, r2, fp
 800de30:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800de34:	dc7b      	bgt.n	800df2e <_strtod_l+0x91e>
 800de36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800de3a:	f77f aea9 	ble.w	800db90 <_strtod_l+0x580>
 800de3e:	4b4d      	ldr	r3, [pc, #308]	; (800df74 <_strtod_l+0x964>)
 800de40:	4650      	mov	r0, sl
 800de42:	4659      	mov	r1, fp
 800de44:	2200      	movs	r2, #0
 800de46:	f7f2 fbdf 	bl	8000608 <__aeabi_dmul>
 800de4a:	460b      	mov	r3, r1
 800de4c:	4303      	orrs	r3, r0
 800de4e:	bf08      	it	eq
 800de50:	2322      	moveq	r3, #34	; 0x22
 800de52:	4682      	mov	sl, r0
 800de54:	468b      	mov	fp, r1
 800de56:	bf08      	it	eq
 800de58:	6023      	streq	r3, [r4, #0]
 800de5a:	e62b      	b.n	800dab4 <_strtod_l+0x4a4>
 800de5c:	f04f 32ff 	mov.w	r2, #4294967295
 800de60:	fa02 f303 	lsl.w	r3, r2, r3
 800de64:	ea03 0a0a 	and.w	sl, r3, sl
 800de68:	e6e3      	b.n	800dc32 <_strtod_l+0x622>
 800de6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800de6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800de72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800de76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800de7a:	fa01 f308 	lsl.w	r3, r1, r8
 800de7e:	9308      	str	r3, [sp, #32]
 800de80:	910d      	str	r1, [sp, #52]	; 0x34
 800de82:	e746      	b.n	800dd12 <_strtod_l+0x702>
 800de84:	2300      	movs	r3, #0
 800de86:	9308      	str	r3, [sp, #32]
 800de88:	2301      	movs	r3, #1
 800de8a:	930d      	str	r3, [sp, #52]	; 0x34
 800de8c:	e741      	b.n	800dd12 <_strtod_l+0x702>
 800de8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800de90:	4642      	mov	r2, r8
 800de92:	4620      	mov	r0, r4
 800de94:	f001 feb0 	bl	800fbf8 <__lshift>
 800de98:	9018      	str	r0, [sp, #96]	; 0x60
 800de9a:	2800      	cmp	r0, #0
 800de9c:	f47f af6b 	bne.w	800dd76 <_strtod_l+0x766>
 800dea0:	e5fe      	b.n	800daa0 <_strtod_l+0x490>
 800dea2:	465f      	mov	r7, fp
 800dea4:	d16e      	bne.n	800df84 <_strtod_l+0x974>
 800dea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dea8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800deac:	b342      	cbz	r2, 800df00 <_strtod_l+0x8f0>
 800deae:	4a32      	ldr	r2, [pc, #200]	; (800df78 <_strtod_l+0x968>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d128      	bne.n	800df06 <_strtod_l+0x8f6>
 800deb4:	9b04      	ldr	r3, [sp, #16]
 800deb6:	4651      	mov	r1, sl
 800deb8:	b1eb      	cbz	r3, 800def6 <_strtod_l+0x8e6>
 800deba:	4b2d      	ldr	r3, [pc, #180]	; (800df70 <_strtod_l+0x960>)
 800debc:	403b      	ands	r3, r7
 800debe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dec2:	f04f 32ff 	mov.w	r2, #4294967295
 800dec6:	d819      	bhi.n	800defc <_strtod_l+0x8ec>
 800dec8:	0d1b      	lsrs	r3, r3, #20
 800deca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dece:	fa02 f303 	lsl.w	r3, r2, r3
 800ded2:	4299      	cmp	r1, r3
 800ded4:	d117      	bne.n	800df06 <_strtod_l+0x8f6>
 800ded6:	4b29      	ldr	r3, [pc, #164]	; (800df7c <_strtod_l+0x96c>)
 800ded8:	429f      	cmp	r7, r3
 800deda:	d102      	bne.n	800dee2 <_strtod_l+0x8d2>
 800dedc:	3101      	adds	r1, #1
 800dede:	f43f addf 	beq.w	800daa0 <_strtod_l+0x490>
 800dee2:	4b23      	ldr	r3, [pc, #140]	; (800df70 <_strtod_l+0x960>)
 800dee4:	403b      	ands	r3, r7
 800dee6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800deea:	f04f 0a00 	mov.w	sl, #0
 800deee:	9b04      	ldr	r3, [sp, #16]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d1a4      	bne.n	800de3e <_strtod_l+0x82e>
 800def4:	e5de      	b.n	800dab4 <_strtod_l+0x4a4>
 800def6:	f04f 33ff 	mov.w	r3, #4294967295
 800defa:	e7ea      	b.n	800ded2 <_strtod_l+0x8c2>
 800defc:	4613      	mov	r3, r2
 800defe:	e7e8      	b.n	800ded2 <_strtod_l+0x8c2>
 800df00:	ea53 030a 	orrs.w	r3, r3, sl
 800df04:	d08c      	beq.n	800de20 <_strtod_l+0x810>
 800df06:	9b08      	ldr	r3, [sp, #32]
 800df08:	b1db      	cbz	r3, 800df42 <_strtod_l+0x932>
 800df0a:	423b      	tst	r3, r7
 800df0c:	d0ef      	beq.n	800deee <_strtod_l+0x8de>
 800df0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df10:	9a04      	ldr	r2, [sp, #16]
 800df12:	4650      	mov	r0, sl
 800df14:	4659      	mov	r1, fp
 800df16:	b1c3      	cbz	r3, 800df4a <_strtod_l+0x93a>
 800df18:	f7ff fb5c 	bl	800d5d4 <sulp>
 800df1c:	4602      	mov	r2, r0
 800df1e:	460b      	mov	r3, r1
 800df20:	ec51 0b18 	vmov	r0, r1, d8
 800df24:	f7f2 f9ba 	bl	800029c <__adddf3>
 800df28:	4682      	mov	sl, r0
 800df2a:	468b      	mov	fp, r1
 800df2c:	e7df      	b.n	800deee <_strtod_l+0x8de>
 800df2e:	4013      	ands	r3, r2
 800df30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800df34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800df38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800df3c:	f04f 3aff 	mov.w	sl, #4294967295
 800df40:	e7d5      	b.n	800deee <_strtod_l+0x8de>
 800df42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df44:	ea13 0f0a 	tst.w	r3, sl
 800df48:	e7e0      	b.n	800df0c <_strtod_l+0x8fc>
 800df4a:	f7ff fb43 	bl	800d5d4 <sulp>
 800df4e:	4602      	mov	r2, r0
 800df50:	460b      	mov	r3, r1
 800df52:	ec51 0b18 	vmov	r0, r1, d8
 800df56:	f7f2 f99f 	bl	8000298 <__aeabi_dsub>
 800df5a:	2200      	movs	r2, #0
 800df5c:	2300      	movs	r3, #0
 800df5e:	4682      	mov	sl, r0
 800df60:	468b      	mov	fp, r1
 800df62:	f7f2 fdb9 	bl	8000ad8 <__aeabi_dcmpeq>
 800df66:	2800      	cmp	r0, #0
 800df68:	d0c1      	beq.n	800deee <_strtod_l+0x8de>
 800df6a:	e611      	b.n	800db90 <_strtod_l+0x580>
 800df6c:	fffffc02 	.word	0xfffffc02
 800df70:	7ff00000 	.word	0x7ff00000
 800df74:	39500000 	.word	0x39500000
 800df78:	000fffff 	.word	0x000fffff
 800df7c:	7fefffff 	.word	0x7fefffff
 800df80:	080114a8 	.word	0x080114a8
 800df84:	4631      	mov	r1, r6
 800df86:	4628      	mov	r0, r5
 800df88:	f002 f824 	bl	800ffd4 <__ratio>
 800df8c:	ec59 8b10 	vmov	r8, r9, d0
 800df90:	ee10 0a10 	vmov	r0, s0
 800df94:	2200      	movs	r2, #0
 800df96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df9a:	4649      	mov	r1, r9
 800df9c:	f7f2 fdb0 	bl	8000b00 <__aeabi_dcmple>
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	d07a      	beq.n	800e09a <_strtod_l+0xa8a>
 800dfa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d04a      	beq.n	800e040 <_strtod_l+0xa30>
 800dfaa:	4b95      	ldr	r3, [pc, #596]	; (800e200 <_strtod_l+0xbf0>)
 800dfac:	2200      	movs	r2, #0
 800dfae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dfb2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e200 <_strtod_l+0xbf0>
 800dfb6:	f04f 0800 	mov.w	r8, #0
 800dfba:	4b92      	ldr	r3, [pc, #584]	; (800e204 <_strtod_l+0xbf4>)
 800dfbc:	403b      	ands	r3, r7
 800dfbe:	930d      	str	r3, [sp, #52]	; 0x34
 800dfc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dfc2:	4b91      	ldr	r3, [pc, #580]	; (800e208 <_strtod_l+0xbf8>)
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	f040 80b0 	bne.w	800e12a <_strtod_l+0xb1a>
 800dfca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dfce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800dfd2:	ec4b ab10 	vmov	d0, sl, fp
 800dfd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dfda:	f001 ff23 	bl	800fe24 <__ulp>
 800dfde:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dfe2:	ec53 2b10 	vmov	r2, r3, d0
 800dfe6:	f7f2 fb0f 	bl	8000608 <__aeabi_dmul>
 800dfea:	4652      	mov	r2, sl
 800dfec:	465b      	mov	r3, fp
 800dfee:	f7f2 f955 	bl	800029c <__adddf3>
 800dff2:	460b      	mov	r3, r1
 800dff4:	4983      	ldr	r1, [pc, #524]	; (800e204 <_strtod_l+0xbf4>)
 800dff6:	4a85      	ldr	r2, [pc, #532]	; (800e20c <_strtod_l+0xbfc>)
 800dff8:	4019      	ands	r1, r3
 800dffa:	4291      	cmp	r1, r2
 800dffc:	4682      	mov	sl, r0
 800dffe:	d960      	bls.n	800e0c2 <_strtod_l+0xab2>
 800e000:	ee18 3a90 	vmov	r3, s17
 800e004:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e008:	4293      	cmp	r3, r2
 800e00a:	d104      	bne.n	800e016 <_strtod_l+0xa06>
 800e00c:	ee18 3a10 	vmov	r3, s16
 800e010:	3301      	adds	r3, #1
 800e012:	f43f ad45 	beq.w	800daa0 <_strtod_l+0x490>
 800e016:	f8df b200 	ldr.w	fp, [pc, #512]	; 800e218 <_strtod_l+0xc08>
 800e01a:	f04f 3aff 	mov.w	sl, #4294967295
 800e01e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e020:	4620      	mov	r0, r4
 800e022:	f001 fbcd 	bl	800f7c0 <_Bfree>
 800e026:	9905      	ldr	r1, [sp, #20]
 800e028:	4620      	mov	r0, r4
 800e02a:	f001 fbc9 	bl	800f7c0 <_Bfree>
 800e02e:	4631      	mov	r1, r6
 800e030:	4620      	mov	r0, r4
 800e032:	f001 fbc5 	bl	800f7c0 <_Bfree>
 800e036:	4629      	mov	r1, r5
 800e038:	4620      	mov	r0, r4
 800e03a:	f001 fbc1 	bl	800f7c0 <_Bfree>
 800e03e:	e61a      	b.n	800dc76 <_strtod_l+0x666>
 800e040:	f1ba 0f00 	cmp.w	sl, #0
 800e044:	d11b      	bne.n	800e07e <_strtod_l+0xa6e>
 800e046:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e04a:	b9f3      	cbnz	r3, 800e08a <_strtod_l+0xa7a>
 800e04c:	4b6c      	ldr	r3, [pc, #432]	; (800e200 <_strtod_l+0xbf0>)
 800e04e:	2200      	movs	r2, #0
 800e050:	4640      	mov	r0, r8
 800e052:	4649      	mov	r1, r9
 800e054:	f7f2 fd4a 	bl	8000aec <__aeabi_dcmplt>
 800e058:	b9d0      	cbnz	r0, 800e090 <_strtod_l+0xa80>
 800e05a:	4640      	mov	r0, r8
 800e05c:	4649      	mov	r1, r9
 800e05e:	4b6c      	ldr	r3, [pc, #432]	; (800e210 <_strtod_l+0xc00>)
 800e060:	2200      	movs	r2, #0
 800e062:	f7f2 fad1 	bl	8000608 <__aeabi_dmul>
 800e066:	4680      	mov	r8, r0
 800e068:	4689      	mov	r9, r1
 800e06a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e06e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e072:	9315      	str	r3, [sp, #84]	; 0x54
 800e074:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e078:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e07c:	e79d      	b.n	800dfba <_strtod_l+0x9aa>
 800e07e:	f1ba 0f01 	cmp.w	sl, #1
 800e082:	d102      	bne.n	800e08a <_strtod_l+0xa7a>
 800e084:	2f00      	cmp	r7, #0
 800e086:	f43f ad83 	beq.w	800db90 <_strtod_l+0x580>
 800e08a:	4b62      	ldr	r3, [pc, #392]	; (800e214 <_strtod_l+0xc04>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	e78e      	b.n	800dfae <_strtod_l+0x99e>
 800e090:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800e210 <_strtod_l+0xc00>
 800e094:	f04f 0800 	mov.w	r8, #0
 800e098:	e7e7      	b.n	800e06a <_strtod_l+0xa5a>
 800e09a:	4b5d      	ldr	r3, [pc, #372]	; (800e210 <_strtod_l+0xc00>)
 800e09c:	4640      	mov	r0, r8
 800e09e:	4649      	mov	r1, r9
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	f7f2 fab1 	bl	8000608 <__aeabi_dmul>
 800e0a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0a8:	4680      	mov	r8, r0
 800e0aa:	4689      	mov	r9, r1
 800e0ac:	b933      	cbnz	r3, 800e0bc <_strtod_l+0xaac>
 800e0ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0b2:	900e      	str	r0, [sp, #56]	; 0x38
 800e0b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e0ba:	e7dd      	b.n	800e078 <_strtod_l+0xa68>
 800e0bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e0c0:	e7f9      	b.n	800e0b6 <_strtod_l+0xaa6>
 800e0c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e0c6:	9b04      	ldr	r3, [sp, #16]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d1a8      	bne.n	800e01e <_strtod_l+0xa0e>
 800e0cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e0d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e0d2:	0d1b      	lsrs	r3, r3, #20
 800e0d4:	051b      	lsls	r3, r3, #20
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d1a1      	bne.n	800e01e <_strtod_l+0xa0e>
 800e0da:	4640      	mov	r0, r8
 800e0dc:	4649      	mov	r1, r9
 800e0de:	f7f2 fdf3 	bl	8000cc8 <__aeabi_d2lz>
 800e0e2:	f7f2 fa63 	bl	80005ac <__aeabi_l2d>
 800e0e6:	4602      	mov	r2, r0
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	4640      	mov	r0, r8
 800e0ec:	4649      	mov	r1, r9
 800e0ee:	f7f2 f8d3 	bl	8000298 <__aeabi_dsub>
 800e0f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e0f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e0f8:	ea43 030a 	orr.w	r3, r3, sl
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	4680      	mov	r8, r0
 800e100:	4689      	mov	r9, r1
 800e102:	d055      	beq.n	800e1b0 <_strtod_l+0xba0>
 800e104:	a336      	add	r3, pc, #216	; (adr r3, 800e1e0 <_strtod_l+0xbd0>)
 800e106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10a:	f7f2 fcef 	bl	8000aec <__aeabi_dcmplt>
 800e10e:	2800      	cmp	r0, #0
 800e110:	f47f acd0 	bne.w	800dab4 <_strtod_l+0x4a4>
 800e114:	a334      	add	r3, pc, #208	; (adr r3, 800e1e8 <_strtod_l+0xbd8>)
 800e116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11a:	4640      	mov	r0, r8
 800e11c:	4649      	mov	r1, r9
 800e11e:	f7f2 fd03 	bl	8000b28 <__aeabi_dcmpgt>
 800e122:	2800      	cmp	r0, #0
 800e124:	f43f af7b 	beq.w	800e01e <_strtod_l+0xa0e>
 800e128:	e4c4      	b.n	800dab4 <_strtod_l+0x4a4>
 800e12a:	9b04      	ldr	r3, [sp, #16]
 800e12c:	b333      	cbz	r3, 800e17c <_strtod_l+0xb6c>
 800e12e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e130:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e134:	d822      	bhi.n	800e17c <_strtod_l+0xb6c>
 800e136:	a32e      	add	r3, pc, #184	; (adr r3, 800e1f0 <_strtod_l+0xbe0>)
 800e138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13c:	4640      	mov	r0, r8
 800e13e:	4649      	mov	r1, r9
 800e140:	f7f2 fcde 	bl	8000b00 <__aeabi_dcmple>
 800e144:	b1a0      	cbz	r0, 800e170 <_strtod_l+0xb60>
 800e146:	4649      	mov	r1, r9
 800e148:	4640      	mov	r0, r8
 800e14a:	f7f2 fd35 	bl	8000bb8 <__aeabi_d2uiz>
 800e14e:	2801      	cmp	r0, #1
 800e150:	bf38      	it	cc
 800e152:	2001      	movcc	r0, #1
 800e154:	f7f2 f9de 	bl	8000514 <__aeabi_ui2d>
 800e158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e15a:	4680      	mov	r8, r0
 800e15c:	4689      	mov	r9, r1
 800e15e:	bb23      	cbnz	r3, 800e1aa <_strtod_l+0xb9a>
 800e160:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e164:	9010      	str	r0, [sp, #64]	; 0x40
 800e166:	9311      	str	r3, [sp, #68]	; 0x44
 800e168:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e16c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e172:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e174:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e178:	1a9b      	subs	r3, r3, r2
 800e17a:	9309      	str	r3, [sp, #36]	; 0x24
 800e17c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e180:	eeb0 0a48 	vmov.f32	s0, s16
 800e184:	eef0 0a68 	vmov.f32	s1, s17
 800e188:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e18c:	f001 fe4a 	bl	800fe24 <__ulp>
 800e190:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e194:	ec53 2b10 	vmov	r2, r3, d0
 800e198:	f7f2 fa36 	bl	8000608 <__aeabi_dmul>
 800e19c:	ec53 2b18 	vmov	r2, r3, d8
 800e1a0:	f7f2 f87c 	bl	800029c <__adddf3>
 800e1a4:	4682      	mov	sl, r0
 800e1a6:	468b      	mov	fp, r1
 800e1a8:	e78d      	b.n	800e0c6 <_strtod_l+0xab6>
 800e1aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800e1ae:	e7db      	b.n	800e168 <_strtod_l+0xb58>
 800e1b0:	a311      	add	r3, pc, #68	; (adr r3, 800e1f8 <_strtod_l+0xbe8>)
 800e1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b6:	f7f2 fc99 	bl	8000aec <__aeabi_dcmplt>
 800e1ba:	e7b2      	b.n	800e122 <_strtod_l+0xb12>
 800e1bc:	2300      	movs	r3, #0
 800e1be:	930a      	str	r3, [sp, #40]	; 0x28
 800e1c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e1c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e1c4:	6013      	str	r3, [r2, #0]
 800e1c6:	f7ff ba6b 	b.w	800d6a0 <_strtod_l+0x90>
 800e1ca:	2a65      	cmp	r2, #101	; 0x65
 800e1cc:	f43f ab5f 	beq.w	800d88e <_strtod_l+0x27e>
 800e1d0:	2a45      	cmp	r2, #69	; 0x45
 800e1d2:	f43f ab5c 	beq.w	800d88e <_strtod_l+0x27e>
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	f7ff bb94 	b.w	800d904 <_strtod_l+0x2f4>
 800e1dc:	f3af 8000 	nop.w
 800e1e0:	94a03595 	.word	0x94a03595
 800e1e4:	3fdfffff 	.word	0x3fdfffff
 800e1e8:	35afe535 	.word	0x35afe535
 800e1ec:	3fe00000 	.word	0x3fe00000
 800e1f0:	ffc00000 	.word	0xffc00000
 800e1f4:	41dfffff 	.word	0x41dfffff
 800e1f8:	94a03595 	.word	0x94a03595
 800e1fc:	3fcfffff 	.word	0x3fcfffff
 800e200:	3ff00000 	.word	0x3ff00000
 800e204:	7ff00000 	.word	0x7ff00000
 800e208:	7fe00000 	.word	0x7fe00000
 800e20c:	7c9fffff 	.word	0x7c9fffff
 800e210:	3fe00000 	.word	0x3fe00000
 800e214:	bff00000 	.word	0xbff00000
 800e218:	7fefffff 	.word	0x7fefffff

0800e21c <_strtod_r>:
 800e21c:	4b01      	ldr	r3, [pc, #4]	; (800e224 <_strtod_r+0x8>)
 800e21e:	f7ff b9f7 	b.w	800d610 <_strtod_l>
 800e222:	bf00      	nop
 800e224:	200002c4 	.word	0x200002c4

0800e228 <_strtol_l.constprop.0>:
 800e228:	2b01      	cmp	r3, #1
 800e22a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e22e:	d001      	beq.n	800e234 <_strtol_l.constprop.0+0xc>
 800e230:	2b24      	cmp	r3, #36	; 0x24
 800e232:	d906      	bls.n	800e242 <_strtol_l.constprop.0+0x1a>
 800e234:	f7fe faee 	bl	800c814 <__errno>
 800e238:	2316      	movs	r3, #22
 800e23a:	6003      	str	r3, [r0, #0]
 800e23c:	2000      	movs	r0, #0
 800e23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e242:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e328 <_strtol_l.constprop.0+0x100>
 800e246:	460d      	mov	r5, r1
 800e248:	462e      	mov	r6, r5
 800e24a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e24e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e252:	f017 0708 	ands.w	r7, r7, #8
 800e256:	d1f7      	bne.n	800e248 <_strtol_l.constprop.0+0x20>
 800e258:	2c2d      	cmp	r4, #45	; 0x2d
 800e25a:	d132      	bne.n	800e2c2 <_strtol_l.constprop.0+0x9a>
 800e25c:	782c      	ldrb	r4, [r5, #0]
 800e25e:	2701      	movs	r7, #1
 800e260:	1cb5      	adds	r5, r6, #2
 800e262:	2b00      	cmp	r3, #0
 800e264:	d05b      	beq.n	800e31e <_strtol_l.constprop.0+0xf6>
 800e266:	2b10      	cmp	r3, #16
 800e268:	d109      	bne.n	800e27e <_strtol_l.constprop.0+0x56>
 800e26a:	2c30      	cmp	r4, #48	; 0x30
 800e26c:	d107      	bne.n	800e27e <_strtol_l.constprop.0+0x56>
 800e26e:	782c      	ldrb	r4, [r5, #0]
 800e270:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e274:	2c58      	cmp	r4, #88	; 0x58
 800e276:	d14d      	bne.n	800e314 <_strtol_l.constprop.0+0xec>
 800e278:	786c      	ldrb	r4, [r5, #1]
 800e27a:	2310      	movs	r3, #16
 800e27c:	3502      	adds	r5, #2
 800e27e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e282:	f108 38ff 	add.w	r8, r8, #4294967295
 800e286:	f04f 0c00 	mov.w	ip, #0
 800e28a:	fbb8 f9f3 	udiv	r9, r8, r3
 800e28e:	4666      	mov	r6, ip
 800e290:	fb03 8a19 	mls	sl, r3, r9, r8
 800e294:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e298:	f1be 0f09 	cmp.w	lr, #9
 800e29c:	d816      	bhi.n	800e2cc <_strtol_l.constprop.0+0xa4>
 800e29e:	4674      	mov	r4, lr
 800e2a0:	42a3      	cmp	r3, r4
 800e2a2:	dd24      	ble.n	800e2ee <_strtol_l.constprop.0+0xc6>
 800e2a4:	f1bc 0f00 	cmp.w	ip, #0
 800e2a8:	db1e      	blt.n	800e2e8 <_strtol_l.constprop.0+0xc0>
 800e2aa:	45b1      	cmp	r9, r6
 800e2ac:	d31c      	bcc.n	800e2e8 <_strtol_l.constprop.0+0xc0>
 800e2ae:	d101      	bne.n	800e2b4 <_strtol_l.constprop.0+0x8c>
 800e2b0:	45a2      	cmp	sl, r4
 800e2b2:	db19      	blt.n	800e2e8 <_strtol_l.constprop.0+0xc0>
 800e2b4:	fb06 4603 	mla	r6, r6, r3, r4
 800e2b8:	f04f 0c01 	mov.w	ip, #1
 800e2bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2c0:	e7e8      	b.n	800e294 <_strtol_l.constprop.0+0x6c>
 800e2c2:	2c2b      	cmp	r4, #43	; 0x2b
 800e2c4:	bf04      	itt	eq
 800e2c6:	782c      	ldrbeq	r4, [r5, #0]
 800e2c8:	1cb5      	addeq	r5, r6, #2
 800e2ca:	e7ca      	b.n	800e262 <_strtol_l.constprop.0+0x3a>
 800e2cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e2d0:	f1be 0f19 	cmp.w	lr, #25
 800e2d4:	d801      	bhi.n	800e2da <_strtol_l.constprop.0+0xb2>
 800e2d6:	3c37      	subs	r4, #55	; 0x37
 800e2d8:	e7e2      	b.n	800e2a0 <_strtol_l.constprop.0+0x78>
 800e2da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e2de:	f1be 0f19 	cmp.w	lr, #25
 800e2e2:	d804      	bhi.n	800e2ee <_strtol_l.constprop.0+0xc6>
 800e2e4:	3c57      	subs	r4, #87	; 0x57
 800e2e6:	e7db      	b.n	800e2a0 <_strtol_l.constprop.0+0x78>
 800e2e8:	f04f 3cff 	mov.w	ip, #4294967295
 800e2ec:	e7e6      	b.n	800e2bc <_strtol_l.constprop.0+0x94>
 800e2ee:	f1bc 0f00 	cmp.w	ip, #0
 800e2f2:	da05      	bge.n	800e300 <_strtol_l.constprop.0+0xd8>
 800e2f4:	2322      	movs	r3, #34	; 0x22
 800e2f6:	6003      	str	r3, [r0, #0]
 800e2f8:	4646      	mov	r6, r8
 800e2fa:	b942      	cbnz	r2, 800e30e <_strtol_l.constprop.0+0xe6>
 800e2fc:	4630      	mov	r0, r6
 800e2fe:	e79e      	b.n	800e23e <_strtol_l.constprop.0+0x16>
 800e300:	b107      	cbz	r7, 800e304 <_strtol_l.constprop.0+0xdc>
 800e302:	4276      	negs	r6, r6
 800e304:	2a00      	cmp	r2, #0
 800e306:	d0f9      	beq.n	800e2fc <_strtol_l.constprop.0+0xd4>
 800e308:	f1bc 0f00 	cmp.w	ip, #0
 800e30c:	d000      	beq.n	800e310 <_strtol_l.constprop.0+0xe8>
 800e30e:	1e69      	subs	r1, r5, #1
 800e310:	6011      	str	r1, [r2, #0]
 800e312:	e7f3      	b.n	800e2fc <_strtol_l.constprop.0+0xd4>
 800e314:	2430      	movs	r4, #48	; 0x30
 800e316:	2b00      	cmp	r3, #0
 800e318:	d1b1      	bne.n	800e27e <_strtol_l.constprop.0+0x56>
 800e31a:	2308      	movs	r3, #8
 800e31c:	e7af      	b.n	800e27e <_strtol_l.constprop.0+0x56>
 800e31e:	2c30      	cmp	r4, #48	; 0x30
 800e320:	d0a5      	beq.n	800e26e <_strtol_l.constprop.0+0x46>
 800e322:	230a      	movs	r3, #10
 800e324:	e7ab      	b.n	800e27e <_strtol_l.constprop.0+0x56>
 800e326:	bf00      	nop
 800e328:	080114d1 	.word	0x080114d1

0800e32c <_strtol_r>:
 800e32c:	f7ff bf7c 	b.w	800e228 <_strtol_l.constprop.0>

0800e330 <quorem>:
 800e330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e334:	6903      	ldr	r3, [r0, #16]
 800e336:	690c      	ldr	r4, [r1, #16]
 800e338:	42a3      	cmp	r3, r4
 800e33a:	4607      	mov	r7, r0
 800e33c:	f2c0 8081 	blt.w	800e442 <quorem+0x112>
 800e340:	3c01      	subs	r4, #1
 800e342:	f101 0814 	add.w	r8, r1, #20
 800e346:	f100 0514 	add.w	r5, r0, #20
 800e34a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e34e:	9301      	str	r3, [sp, #4]
 800e350:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e354:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e358:	3301      	adds	r3, #1
 800e35a:	429a      	cmp	r2, r3
 800e35c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e360:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e364:	fbb2 f6f3 	udiv	r6, r2, r3
 800e368:	d331      	bcc.n	800e3ce <quorem+0x9e>
 800e36a:	f04f 0e00 	mov.w	lr, #0
 800e36e:	4640      	mov	r0, r8
 800e370:	46ac      	mov	ip, r5
 800e372:	46f2      	mov	sl, lr
 800e374:	f850 2b04 	ldr.w	r2, [r0], #4
 800e378:	b293      	uxth	r3, r2
 800e37a:	fb06 e303 	mla	r3, r6, r3, lr
 800e37e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e382:	b29b      	uxth	r3, r3
 800e384:	ebaa 0303 	sub.w	r3, sl, r3
 800e388:	f8dc a000 	ldr.w	sl, [ip]
 800e38c:	0c12      	lsrs	r2, r2, #16
 800e38e:	fa13 f38a 	uxtah	r3, r3, sl
 800e392:	fb06 e202 	mla	r2, r6, r2, lr
 800e396:	9300      	str	r3, [sp, #0]
 800e398:	9b00      	ldr	r3, [sp, #0]
 800e39a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e39e:	b292      	uxth	r2, r2
 800e3a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e3a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e3a8:	f8bd 3000 	ldrh.w	r3, [sp]
 800e3ac:	4581      	cmp	r9, r0
 800e3ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3b2:	f84c 3b04 	str.w	r3, [ip], #4
 800e3b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e3ba:	d2db      	bcs.n	800e374 <quorem+0x44>
 800e3bc:	f855 300b 	ldr.w	r3, [r5, fp]
 800e3c0:	b92b      	cbnz	r3, 800e3ce <quorem+0x9e>
 800e3c2:	9b01      	ldr	r3, [sp, #4]
 800e3c4:	3b04      	subs	r3, #4
 800e3c6:	429d      	cmp	r5, r3
 800e3c8:	461a      	mov	r2, r3
 800e3ca:	d32e      	bcc.n	800e42a <quorem+0xfa>
 800e3cc:	613c      	str	r4, [r7, #16]
 800e3ce:	4638      	mov	r0, r7
 800e3d0:	f001 fc82 	bl	800fcd8 <__mcmp>
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	db24      	blt.n	800e422 <quorem+0xf2>
 800e3d8:	3601      	adds	r6, #1
 800e3da:	4628      	mov	r0, r5
 800e3dc:	f04f 0c00 	mov.w	ip, #0
 800e3e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e3e4:	f8d0 e000 	ldr.w	lr, [r0]
 800e3e8:	b293      	uxth	r3, r2
 800e3ea:	ebac 0303 	sub.w	r3, ip, r3
 800e3ee:	0c12      	lsrs	r2, r2, #16
 800e3f0:	fa13 f38e 	uxtah	r3, r3, lr
 800e3f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e3f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e402:	45c1      	cmp	r9, r8
 800e404:	f840 3b04 	str.w	r3, [r0], #4
 800e408:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e40c:	d2e8      	bcs.n	800e3e0 <quorem+0xb0>
 800e40e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e412:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e416:	b922      	cbnz	r2, 800e422 <quorem+0xf2>
 800e418:	3b04      	subs	r3, #4
 800e41a:	429d      	cmp	r5, r3
 800e41c:	461a      	mov	r2, r3
 800e41e:	d30a      	bcc.n	800e436 <quorem+0x106>
 800e420:	613c      	str	r4, [r7, #16]
 800e422:	4630      	mov	r0, r6
 800e424:	b003      	add	sp, #12
 800e426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e42a:	6812      	ldr	r2, [r2, #0]
 800e42c:	3b04      	subs	r3, #4
 800e42e:	2a00      	cmp	r2, #0
 800e430:	d1cc      	bne.n	800e3cc <quorem+0x9c>
 800e432:	3c01      	subs	r4, #1
 800e434:	e7c7      	b.n	800e3c6 <quorem+0x96>
 800e436:	6812      	ldr	r2, [r2, #0]
 800e438:	3b04      	subs	r3, #4
 800e43a:	2a00      	cmp	r2, #0
 800e43c:	d1f0      	bne.n	800e420 <quorem+0xf0>
 800e43e:	3c01      	subs	r4, #1
 800e440:	e7eb      	b.n	800e41a <quorem+0xea>
 800e442:	2000      	movs	r0, #0
 800e444:	e7ee      	b.n	800e424 <quorem+0xf4>
	...

0800e448 <_dtoa_r>:
 800e448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e44c:	ed2d 8b04 	vpush	{d8-d9}
 800e450:	ec57 6b10 	vmov	r6, r7, d0
 800e454:	b093      	sub	sp, #76	; 0x4c
 800e456:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e458:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e45c:	9106      	str	r1, [sp, #24]
 800e45e:	ee10 aa10 	vmov	sl, s0
 800e462:	4604      	mov	r4, r0
 800e464:	9209      	str	r2, [sp, #36]	; 0x24
 800e466:	930c      	str	r3, [sp, #48]	; 0x30
 800e468:	46bb      	mov	fp, r7
 800e46a:	b975      	cbnz	r5, 800e48a <_dtoa_r+0x42>
 800e46c:	2010      	movs	r0, #16
 800e46e:	f001 f94d 	bl	800f70c <malloc>
 800e472:	4602      	mov	r2, r0
 800e474:	6260      	str	r0, [r4, #36]	; 0x24
 800e476:	b920      	cbnz	r0, 800e482 <_dtoa_r+0x3a>
 800e478:	4ba7      	ldr	r3, [pc, #668]	; (800e718 <_dtoa_r+0x2d0>)
 800e47a:	21ea      	movs	r1, #234	; 0xea
 800e47c:	48a7      	ldr	r0, [pc, #668]	; (800e71c <_dtoa_r+0x2d4>)
 800e47e:	f002 f8ad 	bl	80105dc <__assert_func>
 800e482:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e486:	6005      	str	r5, [r0, #0]
 800e488:	60c5      	str	r5, [r0, #12]
 800e48a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e48c:	6819      	ldr	r1, [r3, #0]
 800e48e:	b151      	cbz	r1, 800e4a6 <_dtoa_r+0x5e>
 800e490:	685a      	ldr	r2, [r3, #4]
 800e492:	604a      	str	r2, [r1, #4]
 800e494:	2301      	movs	r3, #1
 800e496:	4093      	lsls	r3, r2
 800e498:	608b      	str	r3, [r1, #8]
 800e49a:	4620      	mov	r0, r4
 800e49c:	f001 f990 	bl	800f7c0 <_Bfree>
 800e4a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	601a      	str	r2, [r3, #0]
 800e4a6:	1e3b      	subs	r3, r7, #0
 800e4a8:	bfaa      	itet	ge
 800e4aa:	2300      	movge	r3, #0
 800e4ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e4b0:	f8c8 3000 	strge.w	r3, [r8]
 800e4b4:	4b9a      	ldr	r3, [pc, #616]	; (800e720 <_dtoa_r+0x2d8>)
 800e4b6:	bfbc      	itt	lt
 800e4b8:	2201      	movlt	r2, #1
 800e4ba:	f8c8 2000 	strlt.w	r2, [r8]
 800e4be:	ea33 030b 	bics.w	r3, r3, fp
 800e4c2:	d11b      	bne.n	800e4fc <_dtoa_r+0xb4>
 800e4c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e4c6:	f242 730f 	movw	r3, #9999	; 0x270f
 800e4ca:	6013      	str	r3, [r2, #0]
 800e4cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e4d0:	4333      	orrs	r3, r6
 800e4d2:	f000 8592 	beq.w	800effa <_dtoa_r+0xbb2>
 800e4d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4d8:	b963      	cbnz	r3, 800e4f4 <_dtoa_r+0xac>
 800e4da:	4b92      	ldr	r3, [pc, #584]	; (800e724 <_dtoa_r+0x2dc>)
 800e4dc:	e022      	b.n	800e524 <_dtoa_r+0xdc>
 800e4de:	4b92      	ldr	r3, [pc, #584]	; (800e728 <_dtoa_r+0x2e0>)
 800e4e0:	9301      	str	r3, [sp, #4]
 800e4e2:	3308      	adds	r3, #8
 800e4e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e4e6:	6013      	str	r3, [r2, #0]
 800e4e8:	9801      	ldr	r0, [sp, #4]
 800e4ea:	b013      	add	sp, #76	; 0x4c
 800e4ec:	ecbd 8b04 	vpop	{d8-d9}
 800e4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4f4:	4b8b      	ldr	r3, [pc, #556]	; (800e724 <_dtoa_r+0x2dc>)
 800e4f6:	9301      	str	r3, [sp, #4]
 800e4f8:	3303      	adds	r3, #3
 800e4fa:	e7f3      	b.n	800e4e4 <_dtoa_r+0x9c>
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	2300      	movs	r3, #0
 800e500:	4650      	mov	r0, sl
 800e502:	4659      	mov	r1, fp
 800e504:	f7f2 fae8 	bl	8000ad8 <__aeabi_dcmpeq>
 800e508:	ec4b ab19 	vmov	d9, sl, fp
 800e50c:	4680      	mov	r8, r0
 800e50e:	b158      	cbz	r0, 800e528 <_dtoa_r+0xe0>
 800e510:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e512:	2301      	movs	r3, #1
 800e514:	6013      	str	r3, [r2, #0]
 800e516:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e518:	2b00      	cmp	r3, #0
 800e51a:	f000 856b 	beq.w	800eff4 <_dtoa_r+0xbac>
 800e51e:	4883      	ldr	r0, [pc, #524]	; (800e72c <_dtoa_r+0x2e4>)
 800e520:	6018      	str	r0, [r3, #0]
 800e522:	1e43      	subs	r3, r0, #1
 800e524:	9301      	str	r3, [sp, #4]
 800e526:	e7df      	b.n	800e4e8 <_dtoa_r+0xa0>
 800e528:	ec4b ab10 	vmov	d0, sl, fp
 800e52c:	aa10      	add	r2, sp, #64	; 0x40
 800e52e:	a911      	add	r1, sp, #68	; 0x44
 800e530:	4620      	mov	r0, r4
 800e532:	f001 fcf3 	bl	800ff1c <__d2b>
 800e536:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e53a:	ee08 0a10 	vmov	s16, r0
 800e53e:	2d00      	cmp	r5, #0
 800e540:	f000 8084 	beq.w	800e64c <_dtoa_r+0x204>
 800e544:	ee19 3a90 	vmov	r3, s19
 800e548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e54c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e550:	4656      	mov	r6, sl
 800e552:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e556:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e55a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e55e:	4b74      	ldr	r3, [pc, #464]	; (800e730 <_dtoa_r+0x2e8>)
 800e560:	2200      	movs	r2, #0
 800e562:	4630      	mov	r0, r6
 800e564:	4639      	mov	r1, r7
 800e566:	f7f1 fe97 	bl	8000298 <__aeabi_dsub>
 800e56a:	a365      	add	r3, pc, #404	; (adr r3, 800e700 <_dtoa_r+0x2b8>)
 800e56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e570:	f7f2 f84a 	bl	8000608 <__aeabi_dmul>
 800e574:	a364      	add	r3, pc, #400	; (adr r3, 800e708 <_dtoa_r+0x2c0>)
 800e576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57a:	f7f1 fe8f 	bl	800029c <__adddf3>
 800e57e:	4606      	mov	r6, r0
 800e580:	4628      	mov	r0, r5
 800e582:	460f      	mov	r7, r1
 800e584:	f7f1 ffd6 	bl	8000534 <__aeabi_i2d>
 800e588:	a361      	add	r3, pc, #388	; (adr r3, 800e710 <_dtoa_r+0x2c8>)
 800e58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58e:	f7f2 f83b 	bl	8000608 <__aeabi_dmul>
 800e592:	4602      	mov	r2, r0
 800e594:	460b      	mov	r3, r1
 800e596:	4630      	mov	r0, r6
 800e598:	4639      	mov	r1, r7
 800e59a:	f7f1 fe7f 	bl	800029c <__adddf3>
 800e59e:	4606      	mov	r6, r0
 800e5a0:	460f      	mov	r7, r1
 800e5a2:	f7f2 fae1 	bl	8000b68 <__aeabi_d2iz>
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	9000      	str	r0, [sp, #0]
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	4630      	mov	r0, r6
 800e5ae:	4639      	mov	r1, r7
 800e5b0:	f7f2 fa9c 	bl	8000aec <__aeabi_dcmplt>
 800e5b4:	b150      	cbz	r0, 800e5cc <_dtoa_r+0x184>
 800e5b6:	9800      	ldr	r0, [sp, #0]
 800e5b8:	f7f1 ffbc 	bl	8000534 <__aeabi_i2d>
 800e5bc:	4632      	mov	r2, r6
 800e5be:	463b      	mov	r3, r7
 800e5c0:	f7f2 fa8a 	bl	8000ad8 <__aeabi_dcmpeq>
 800e5c4:	b910      	cbnz	r0, 800e5cc <_dtoa_r+0x184>
 800e5c6:	9b00      	ldr	r3, [sp, #0]
 800e5c8:	3b01      	subs	r3, #1
 800e5ca:	9300      	str	r3, [sp, #0]
 800e5cc:	9b00      	ldr	r3, [sp, #0]
 800e5ce:	2b16      	cmp	r3, #22
 800e5d0:	d85a      	bhi.n	800e688 <_dtoa_r+0x240>
 800e5d2:	9a00      	ldr	r2, [sp, #0]
 800e5d4:	4b57      	ldr	r3, [pc, #348]	; (800e734 <_dtoa_r+0x2ec>)
 800e5d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5de:	ec51 0b19 	vmov	r0, r1, d9
 800e5e2:	f7f2 fa83 	bl	8000aec <__aeabi_dcmplt>
 800e5e6:	2800      	cmp	r0, #0
 800e5e8:	d050      	beq.n	800e68c <_dtoa_r+0x244>
 800e5ea:	9b00      	ldr	r3, [sp, #0]
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	9300      	str	r3, [sp, #0]
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e5f6:	1b5d      	subs	r5, r3, r5
 800e5f8:	1e6b      	subs	r3, r5, #1
 800e5fa:	9305      	str	r3, [sp, #20]
 800e5fc:	bf45      	ittet	mi
 800e5fe:	f1c5 0301 	rsbmi	r3, r5, #1
 800e602:	9304      	strmi	r3, [sp, #16]
 800e604:	2300      	movpl	r3, #0
 800e606:	2300      	movmi	r3, #0
 800e608:	bf4c      	ite	mi
 800e60a:	9305      	strmi	r3, [sp, #20]
 800e60c:	9304      	strpl	r3, [sp, #16]
 800e60e:	9b00      	ldr	r3, [sp, #0]
 800e610:	2b00      	cmp	r3, #0
 800e612:	db3d      	blt.n	800e690 <_dtoa_r+0x248>
 800e614:	9b05      	ldr	r3, [sp, #20]
 800e616:	9a00      	ldr	r2, [sp, #0]
 800e618:	920a      	str	r2, [sp, #40]	; 0x28
 800e61a:	4413      	add	r3, r2
 800e61c:	9305      	str	r3, [sp, #20]
 800e61e:	2300      	movs	r3, #0
 800e620:	9307      	str	r3, [sp, #28]
 800e622:	9b06      	ldr	r3, [sp, #24]
 800e624:	2b09      	cmp	r3, #9
 800e626:	f200 8089 	bhi.w	800e73c <_dtoa_r+0x2f4>
 800e62a:	2b05      	cmp	r3, #5
 800e62c:	bfc4      	itt	gt
 800e62e:	3b04      	subgt	r3, #4
 800e630:	9306      	strgt	r3, [sp, #24]
 800e632:	9b06      	ldr	r3, [sp, #24]
 800e634:	f1a3 0302 	sub.w	r3, r3, #2
 800e638:	bfcc      	ite	gt
 800e63a:	2500      	movgt	r5, #0
 800e63c:	2501      	movle	r5, #1
 800e63e:	2b03      	cmp	r3, #3
 800e640:	f200 8087 	bhi.w	800e752 <_dtoa_r+0x30a>
 800e644:	e8df f003 	tbb	[pc, r3]
 800e648:	59383a2d 	.word	0x59383a2d
 800e64c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e650:	441d      	add	r5, r3
 800e652:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e656:	2b20      	cmp	r3, #32
 800e658:	bfc1      	itttt	gt
 800e65a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e65e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e662:	fa0b f303 	lslgt.w	r3, fp, r3
 800e666:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e66a:	bfda      	itte	le
 800e66c:	f1c3 0320 	rsble	r3, r3, #32
 800e670:	fa06 f003 	lslle.w	r0, r6, r3
 800e674:	4318      	orrgt	r0, r3
 800e676:	f7f1 ff4d 	bl	8000514 <__aeabi_ui2d>
 800e67a:	2301      	movs	r3, #1
 800e67c:	4606      	mov	r6, r0
 800e67e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e682:	3d01      	subs	r5, #1
 800e684:	930e      	str	r3, [sp, #56]	; 0x38
 800e686:	e76a      	b.n	800e55e <_dtoa_r+0x116>
 800e688:	2301      	movs	r3, #1
 800e68a:	e7b2      	b.n	800e5f2 <_dtoa_r+0x1aa>
 800e68c:	900b      	str	r0, [sp, #44]	; 0x2c
 800e68e:	e7b1      	b.n	800e5f4 <_dtoa_r+0x1ac>
 800e690:	9b04      	ldr	r3, [sp, #16]
 800e692:	9a00      	ldr	r2, [sp, #0]
 800e694:	1a9b      	subs	r3, r3, r2
 800e696:	9304      	str	r3, [sp, #16]
 800e698:	4253      	negs	r3, r2
 800e69a:	9307      	str	r3, [sp, #28]
 800e69c:	2300      	movs	r3, #0
 800e69e:	930a      	str	r3, [sp, #40]	; 0x28
 800e6a0:	e7bf      	b.n	800e622 <_dtoa_r+0x1da>
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	9308      	str	r3, [sp, #32]
 800e6a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	dc55      	bgt.n	800e758 <_dtoa_r+0x310>
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	9209      	str	r2, [sp, #36]	; 0x24
 800e6b6:	e00c      	b.n	800e6d2 <_dtoa_r+0x28a>
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	e7f3      	b.n	800e6a4 <_dtoa_r+0x25c>
 800e6bc:	2300      	movs	r3, #0
 800e6be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6c0:	9308      	str	r3, [sp, #32]
 800e6c2:	9b00      	ldr	r3, [sp, #0]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	9302      	str	r3, [sp, #8]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	2b01      	cmp	r3, #1
 800e6cc:	9303      	str	r3, [sp, #12]
 800e6ce:	bfb8      	it	lt
 800e6d0:	2301      	movlt	r3, #1
 800e6d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	6042      	str	r2, [r0, #4]
 800e6d8:	2204      	movs	r2, #4
 800e6da:	f102 0614 	add.w	r6, r2, #20
 800e6de:	429e      	cmp	r6, r3
 800e6e0:	6841      	ldr	r1, [r0, #4]
 800e6e2:	d93d      	bls.n	800e760 <_dtoa_r+0x318>
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	f001 f82b 	bl	800f740 <_Balloc>
 800e6ea:	9001      	str	r0, [sp, #4]
 800e6ec:	2800      	cmp	r0, #0
 800e6ee:	d13b      	bne.n	800e768 <_dtoa_r+0x320>
 800e6f0:	4b11      	ldr	r3, [pc, #68]	; (800e738 <_dtoa_r+0x2f0>)
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e6f8:	e6c0      	b.n	800e47c <_dtoa_r+0x34>
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	e7df      	b.n	800e6be <_dtoa_r+0x276>
 800e6fe:	bf00      	nop
 800e700:	636f4361 	.word	0x636f4361
 800e704:	3fd287a7 	.word	0x3fd287a7
 800e708:	8b60c8b3 	.word	0x8b60c8b3
 800e70c:	3fc68a28 	.word	0x3fc68a28
 800e710:	509f79fb 	.word	0x509f79fb
 800e714:	3fd34413 	.word	0x3fd34413
 800e718:	080115de 	.word	0x080115de
 800e71c:	080115f5 	.word	0x080115f5
 800e720:	7ff00000 	.word	0x7ff00000
 800e724:	080115da 	.word	0x080115da
 800e728:	080115d1 	.word	0x080115d1
 800e72c:	08011451 	.word	0x08011451
 800e730:	3ff80000 	.word	0x3ff80000
 800e734:	08011760 	.word	0x08011760
 800e738:	08011650 	.word	0x08011650
 800e73c:	2501      	movs	r5, #1
 800e73e:	2300      	movs	r3, #0
 800e740:	9306      	str	r3, [sp, #24]
 800e742:	9508      	str	r5, [sp, #32]
 800e744:	f04f 33ff 	mov.w	r3, #4294967295
 800e748:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e74c:	2200      	movs	r2, #0
 800e74e:	2312      	movs	r3, #18
 800e750:	e7b0      	b.n	800e6b4 <_dtoa_r+0x26c>
 800e752:	2301      	movs	r3, #1
 800e754:	9308      	str	r3, [sp, #32]
 800e756:	e7f5      	b.n	800e744 <_dtoa_r+0x2fc>
 800e758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e75a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e75e:	e7b8      	b.n	800e6d2 <_dtoa_r+0x28a>
 800e760:	3101      	adds	r1, #1
 800e762:	6041      	str	r1, [r0, #4]
 800e764:	0052      	lsls	r2, r2, #1
 800e766:	e7b8      	b.n	800e6da <_dtoa_r+0x292>
 800e768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e76a:	9a01      	ldr	r2, [sp, #4]
 800e76c:	601a      	str	r2, [r3, #0]
 800e76e:	9b03      	ldr	r3, [sp, #12]
 800e770:	2b0e      	cmp	r3, #14
 800e772:	f200 809d 	bhi.w	800e8b0 <_dtoa_r+0x468>
 800e776:	2d00      	cmp	r5, #0
 800e778:	f000 809a 	beq.w	800e8b0 <_dtoa_r+0x468>
 800e77c:	9b00      	ldr	r3, [sp, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	dd32      	ble.n	800e7e8 <_dtoa_r+0x3a0>
 800e782:	4ab7      	ldr	r2, [pc, #732]	; (800ea60 <_dtoa_r+0x618>)
 800e784:	f003 030f 	and.w	r3, r3, #15
 800e788:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e78c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e790:	9b00      	ldr	r3, [sp, #0]
 800e792:	05d8      	lsls	r0, r3, #23
 800e794:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e798:	d516      	bpl.n	800e7c8 <_dtoa_r+0x380>
 800e79a:	4bb2      	ldr	r3, [pc, #712]	; (800ea64 <_dtoa_r+0x61c>)
 800e79c:	ec51 0b19 	vmov	r0, r1, d9
 800e7a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e7a4:	f7f2 f85a 	bl	800085c <__aeabi_ddiv>
 800e7a8:	f007 070f 	and.w	r7, r7, #15
 800e7ac:	4682      	mov	sl, r0
 800e7ae:	468b      	mov	fp, r1
 800e7b0:	2503      	movs	r5, #3
 800e7b2:	4eac      	ldr	r6, [pc, #688]	; (800ea64 <_dtoa_r+0x61c>)
 800e7b4:	b957      	cbnz	r7, 800e7cc <_dtoa_r+0x384>
 800e7b6:	4642      	mov	r2, r8
 800e7b8:	464b      	mov	r3, r9
 800e7ba:	4650      	mov	r0, sl
 800e7bc:	4659      	mov	r1, fp
 800e7be:	f7f2 f84d 	bl	800085c <__aeabi_ddiv>
 800e7c2:	4682      	mov	sl, r0
 800e7c4:	468b      	mov	fp, r1
 800e7c6:	e028      	b.n	800e81a <_dtoa_r+0x3d2>
 800e7c8:	2502      	movs	r5, #2
 800e7ca:	e7f2      	b.n	800e7b2 <_dtoa_r+0x36a>
 800e7cc:	07f9      	lsls	r1, r7, #31
 800e7ce:	d508      	bpl.n	800e7e2 <_dtoa_r+0x39a>
 800e7d0:	4640      	mov	r0, r8
 800e7d2:	4649      	mov	r1, r9
 800e7d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e7d8:	f7f1 ff16 	bl	8000608 <__aeabi_dmul>
 800e7dc:	3501      	adds	r5, #1
 800e7de:	4680      	mov	r8, r0
 800e7e0:	4689      	mov	r9, r1
 800e7e2:	107f      	asrs	r7, r7, #1
 800e7e4:	3608      	adds	r6, #8
 800e7e6:	e7e5      	b.n	800e7b4 <_dtoa_r+0x36c>
 800e7e8:	f000 809b 	beq.w	800e922 <_dtoa_r+0x4da>
 800e7ec:	9b00      	ldr	r3, [sp, #0]
 800e7ee:	4f9d      	ldr	r7, [pc, #628]	; (800ea64 <_dtoa_r+0x61c>)
 800e7f0:	425e      	negs	r6, r3
 800e7f2:	4b9b      	ldr	r3, [pc, #620]	; (800ea60 <_dtoa_r+0x618>)
 800e7f4:	f006 020f 	and.w	r2, r6, #15
 800e7f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e800:	ec51 0b19 	vmov	r0, r1, d9
 800e804:	f7f1 ff00 	bl	8000608 <__aeabi_dmul>
 800e808:	1136      	asrs	r6, r6, #4
 800e80a:	4682      	mov	sl, r0
 800e80c:	468b      	mov	fp, r1
 800e80e:	2300      	movs	r3, #0
 800e810:	2502      	movs	r5, #2
 800e812:	2e00      	cmp	r6, #0
 800e814:	d17a      	bne.n	800e90c <_dtoa_r+0x4c4>
 800e816:	2b00      	cmp	r3, #0
 800e818:	d1d3      	bne.n	800e7c2 <_dtoa_r+0x37a>
 800e81a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	f000 8082 	beq.w	800e926 <_dtoa_r+0x4de>
 800e822:	4b91      	ldr	r3, [pc, #580]	; (800ea68 <_dtoa_r+0x620>)
 800e824:	2200      	movs	r2, #0
 800e826:	4650      	mov	r0, sl
 800e828:	4659      	mov	r1, fp
 800e82a:	f7f2 f95f 	bl	8000aec <__aeabi_dcmplt>
 800e82e:	2800      	cmp	r0, #0
 800e830:	d079      	beq.n	800e926 <_dtoa_r+0x4de>
 800e832:	9b03      	ldr	r3, [sp, #12]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d076      	beq.n	800e926 <_dtoa_r+0x4de>
 800e838:	9b02      	ldr	r3, [sp, #8]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	dd36      	ble.n	800e8ac <_dtoa_r+0x464>
 800e83e:	9b00      	ldr	r3, [sp, #0]
 800e840:	4650      	mov	r0, sl
 800e842:	4659      	mov	r1, fp
 800e844:	1e5f      	subs	r7, r3, #1
 800e846:	2200      	movs	r2, #0
 800e848:	4b88      	ldr	r3, [pc, #544]	; (800ea6c <_dtoa_r+0x624>)
 800e84a:	f7f1 fedd 	bl	8000608 <__aeabi_dmul>
 800e84e:	9e02      	ldr	r6, [sp, #8]
 800e850:	4682      	mov	sl, r0
 800e852:	468b      	mov	fp, r1
 800e854:	3501      	adds	r5, #1
 800e856:	4628      	mov	r0, r5
 800e858:	f7f1 fe6c 	bl	8000534 <__aeabi_i2d>
 800e85c:	4652      	mov	r2, sl
 800e85e:	465b      	mov	r3, fp
 800e860:	f7f1 fed2 	bl	8000608 <__aeabi_dmul>
 800e864:	4b82      	ldr	r3, [pc, #520]	; (800ea70 <_dtoa_r+0x628>)
 800e866:	2200      	movs	r2, #0
 800e868:	f7f1 fd18 	bl	800029c <__adddf3>
 800e86c:	46d0      	mov	r8, sl
 800e86e:	46d9      	mov	r9, fp
 800e870:	4682      	mov	sl, r0
 800e872:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e876:	2e00      	cmp	r6, #0
 800e878:	d158      	bne.n	800e92c <_dtoa_r+0x4e4>
 800e87a:	4b7e      	ldr	r3, [pc, #504]	; (800ea74 <_dtoa_r+0x62c>)
 800e87c:	2200      	movs	r2, #0
 800e87e:	4640      	mov	r0, r8
 800e880:	4649      	mov	r1, r9
 800e882:	f7f1 fd09 	bl	8000298 <__aeabi_dsub>
 800e886:	4652      	mov	r2, sl
 800e888:	465b      	mov	r3, fp
 800e88a:	4680      	mov	r8, r0
 800e88c:	4689      	mov	r9, r1
 800e88e:	f7f2 f94b 	bl	8000b28 <__aeabi_dcmpgt>
 800e892:	2800      	cmp	r0, #0
 800e894:	f040 8295 	bne.w	800edc2 <_dtoa_r+0x97a>
 800e898:	4652      	mov	r2, sl
 800e89a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e89e:	4640      	mov	r0, r8
 800e8a0:	4649      	mov	r1, r9
 800e8a2:	f7f2 f923 	bl	8000aec <__aeabi_dcmplt>
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	f040 8289 	bne.w	800edbe <_dtoa_r+0x976>
 800e8ac:	ec5b ab19 	vmov	sl, fp, d9
 800e8b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	f2c0 8148 	blt.w	800eb48 <_dtoa_r+0x700>
 800e8b8:	9a00      	ldr	r2, [sp, #0]
 800e8ba:	2a0e      	cmp	r2, #14
 800e8bc:	f300 8144 	bgt.w	800eb48 <_dtoa_r+0x700>
 800e8c0:	4b67      	ldr	r3, [pc, #412]	; (800ea60 <_dtoa_r+0x618>)
 800e8c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	f280 80d5 	bge.w	800ea7c <_dtoa_r+0x634>
 800e8d2:	9b03      	ldr	r3, [sp, #12]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	f300 80d1 	bgt.w	800ea7c <_dtoa_r+0x634>
 800e8da:	f040 826f 	bne.w	800edbc <_dtoa_r+0x974>
 800e8de:	4b65      	ldr	r3, [pc, #404]	; (800ea74 <_dtoa_r+0x62c>)
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	4640      	mov	r0, r8
 800e8e4:	4649      	mov	r1, r9
 800e8e6:	f7f1 fe8f 	bl	8000608 <__aeabi_dmul>
 800e8ea:	4652      	mov	r2, sl
 800e8ec:	465b      	mov	r3, fp
 800e8ee:	f7f2 f911 	bl	8000b14 <__aeabi_dcmpge>
 800e8f2:	9e03      	ldr	r6, [sp, #12]
 800e8f4:	4637      	mov	r7, r6
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	f040 8245 	bne.w	800ed86 <_dtoa_r+0x93e>
 800e8fc:	9d01      	ldr	r5, [sp, #4]
 800e8fe:	2331      	movs	r3, #49	; 0x31
 800e900:	f805 3b01 	strb.w	r3, [r5], #1
 800e904:	9b00      	ldr	r3, [sp, #0]
 800e906:	3301      	adds	r3, #1
 800e908:	9300      	str	r3, [sp, #0]
 800e90a:	e240      	b.n	800ed8e <_dtoa_r+0x946>
 800e90c:	07f2      	lsls	r2, r6, #31
 800e90e:	d505      	bpl.n	800e91c <_dtoa_r+0x4d4>
 800e910:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e914:	f7f1 fe78 	bl	8000608 <__aeabi_dmul>
 800e918:	3501      	adds	r5, #1
 800e91a:	2301      	movs	r3, #1
 800e91c:	1076      	asrs	r6, r6, #1
 800e91e:	3708      	adds	r7, #8
 800e920:	e777      	b.n	800e812 <_dtoa_r+0x3ca>
 800e922:	2502      	movs	r5, #2
 800e924:	e779      	b.n	800e81a <_dtoa_r+0x3d2>
 800e926:	9f00      	ldr	r7, [sp, #0]
 800e928:	9e03      	ldr	r6, [sp, #12]
 800e92a:	e794      	b.n	800e856 <_dtoa_r+0x40e>
 800e92c:	9901      	ldr	r1, [sp, #4]
 800e92e:	4b4c      	ldr	r3, [pc, #304]	; (800ea60 <_dtoa_r+0x618>)
 800e930:	4431      	add	r1, r6
 800e932:	910d      	str	r1, [sp, #52]	; 0x34
 800e934:	9908      	ldr	r1, [sp, #32]
 800e936:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e93a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e93e:	2900      	cmp	r1, #0
 800e940:	d043      	beq.n	800e9ca <_dtoa_r+0x582>
 800e942:	494d      	ldr	r1, [pc, #308]	; (800ea78 <_dtoa_r+0x630>)
 800e944:	2000      	movs	r0, #0
 800e946:	f7f1 ff89 	bl	800085c <__aeabi_ddiv>
 800e94a:	4652      	mov	r2, sl
 800e94c:	465b      	mov	r3, fp
 800e94e:	f7f1 fca3 	bl	8000298 <__aeabi_dsub>
 800e952:	9d01      	ldr	r5, [sp, #4]
 800e954:	4682      	mov	sl, r0
 800e956:	468b      	mov	fp, r1
 800e958:	4649      	mov	r1, r9
 800e95a:	4640      	mov	r0, r8
 800e95c:	f7f2 f904 	bl	8000b68 <__aeabi_d2iz>
 800e960:	4606      	mov	r6, r0
 800e962:	f7f1 fde7 	bl	8000534 <__aeabi_i2d>
 800e966:	4602      	mov	r2, r0
 800e968:	460b      	mov	r3, r1
 800e96a:	4640      	mov	r0, r8
 800e96c:	4649      	mov	r1, r9
 800e96e:	f7f1 fc93 	bl	8000298 <__aeabi_dsub>
 800e972:	3630      	adds	r6, #48	; 0x30
 800e974:	f805 6b01 	strb.w	r6, [r5], #1
 800e978:	4652      	mov	r2, sl
 800e97a:	465b      	mov	r3, fp
 800e97c:	4680      	mov	r8, r0
 800e97e:	4689      	mov	r9, r1
 800e980:	f7f2 f8b4 	bl	8000aec <__aeabi_dcmplt>
 800e984:	2800      	cmp	r0, #0
 800e986:	d163      	bne.n	800ea50 <_dtoa_r+0x608>
 800e988:	4642      	mov	r2, r8
 800e98a:	464b      	mov	r3, r9
 800e98c:	4936      	ldr	r1, [pc, #216]	; (800ea68 <_dtoa_r+0x620>)
 800e98e:	2000      	movs	r0, #0
 800e990:	f7f1 fc82 	bl	8000298 <__aeabi_dsub>
 800e994:	4652      	mov	r2, sl
 800e996:	465b      	mov	r3, fp
 800e998:	f7f2 f8a8 	bl	8000aec <__aeabi_dcmplt>
 800e99c:	2800      	cmp	r0, #0
 800e99e:	f040 80b5 	bne.w	800eb0c <_dtoa_r+0x6c4>
 800e9a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9a4:	429d      	cmp	r5, r3
 800e9a6:	d081      	beq.n	800e8ac <_dtoa_r+0x464>
 800e9a8:	4b30      	ldr	r3, [pc, #192]	; (800ea6c <_dtoa_r+0x624>)
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	4650      	mov	r0, sl
 800e9ae:	4659      	mov	r1, fp
 800e9b0:	f7f1 fe2a 	bl	8000608 <__aeabi_dmul>
 800e9b4:	4b2d      	ldr	r3, [pc, #180]	; (800ea6c <_dtoa_r+0x624>)
 800e9b6:	4682      	mov	sl, r0
 800e9b8:	468b      	mov	fp, r1
 800e9ba:	4640      	mov	r0, r8
 800e9bc:	4649      	mov	r1, r9
 800e9be:	2200      	movs	r2, #0
 800e9c0:	f7f1 fe22 	bl	8000608 <__aeabi_dmul>
 800e9c4:	4680      	mov	r8, r0
 800e9c6:	4689      	mov	r9, r1
 800e9c8:	e7c6      	b.n	800e958 <_dtoa_r+0x510>
 800e9ca:	4650      	mov	r0, sl
 800e9cc:	4659      	mov	r1, fp
 800e9ce:	f7f1 fe1b 	bl	8000608 <__aeabi_dmul>
 800e9d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9d4:	9d01      	ldr	r5, [sp, #4]
 800e9d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e9d8:	4682      	mov	sl, r0
 800e9da:	468b      	mov	fp, r1
 800e9dc:	4649      	mov	r1, r9
 800e9de:	4640      	mov	r0, r8
 800e9e0:	f7f2 f8c2 	bl	8000b68 <__aeabi_d2iz>
 800e9e4:	4606      	mov	r6, r0
 800e9e6:	f7f1 fda5 	bl	8000534 <__aeabi_i2d>
 800e9ea:	3630      	adds	r6, #48	; 0x30
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	460b      	mov	r3, r1
 800e9f0:	4640      	mov	r0, r8
 800e9f2:	4649      	mov	r1, r9
 800e9f4:	f7f1 fc50 	bl	8000298 <__aeabi_dsub>
 800e9f8:	f805 6b01 	strb.w	r6, [r5], #1
 800e9fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9fe:	429d      	cmp	r5, r3
 800ea00:	4680      	mov	r8, r0
 800ea02:	4689      	mov	r9, r1
 800ea04:	f04f 0200 	mov.w	r2, #0
 800ea08:	d124      	bne.n	800ea54 <_dtoa_r+0x60c>
 800ea0a:	4b1b      	ldr	r3, [pc, #108]	; (800ea78 <_dtoa_r+0x630>)
 800ea0c:	4650      	mov	r0, sl
 800ea0e:	4659      	mov	r1, fp
 800ea10:	f7f1 fc44 	bl	800029c <__adddf3>
 800ea14:	4602      	mov	r2, r0
 800ea16:	460b      	mov	r3, r1
 800ea18:	4640      	mov	r0, r8
 800ea1a:	4649      	mov	r1, r9
 800ea1c:	f7f2 f884 	bl	8000b28 <__aeabi_dcmpgt>
 800ea20:	2800      	cmp	r0, #0
 800ea22:	d173      	bne.n	800eb0c <_dtoa_r+0x6c4>
 800ea24:	4652      	mov	r2, sl
 800ea26:	465b      	mov	r3, fp
 800ea28:	4913      	ldr	r1, [pc, #76]	; (800ea78 <_dtoa_r+0x630>)
 800ea2a:	2000      	movs	r0, #0
 800ea2c:	f7f1 fc34 	bl	8000298 <__aeabi_dsub>
 800ea30:	4602      	mov	r2, r0
 800ea32:	460b      	mov	r3, r1
 800ea34:	4640      	mov	r0, r8
 800ea36:	4649      	mov	r1, r9
 800ea38:	f7f2 f858 	bl	8000aec <__aeabi_dcmplt>
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	f43f af35 	beq.w	800e8ac <_dtoa_r+0x464>
 800ea42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ea44:	1e6b      	subs	r3, r5, #1
 800ea46:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ea4c:	2b30      	cmp	r3, #48	; 0x30
 800ea4e:	d0f8      	beq.n	800ea42 <_dtoa_r+0x5fa>
 800ea50:	9700      	str	r7, [sp, #0]
 800ea52:	e049      	b.n	800eae8 <_dtoa_r+0x6a0>
 800ea54:	4b05      	ldr	r3, [pc, #20]	; (800ea6c <_dtoa_r+0x624>)
 800ea56:	f7f1 fdd7 	bl	8000608 <__aeabi_dmul>
 800ea5a:	4680      	mov	r8, r0
 800ea5c:	4689      	mov	r9, r1
 800ea5e:	e7bd      	b.n	800e9dc <_dtoa_r+0x594>
 800ea60:	08011760 	.word	0x08011760
 800ea64:	08011738 	.word	0x08011738
 800ea68:	3ff00000 	.word	0x3ff00000
 800ea6c:	40240000 	.word	0x40240000
 800ea70:	401c0000 	.word	0x401c0000
 800ea74:	40140000 	.word	0x40140000
 800ea78:	3fe00000 	.word	0x3fe00000
 800ea7c:	9d01      	ldr	r5, [sp, #4]
 800ea7e:	4656      	mov	r6, sl
 800ea80:	465f      	mov	r7, fp
 800ea82:	4642      	mov	r2, r8
 800ea84:	464b      	mov	r3, r9
 800ea86:	4630      	mov	r0, r6
 800ea88:	4639      	mov	r1, r7
 800ea8a:	f7f1 fee7 	bl	800085c <__aeabi_ddiv>
 800ea8e:	f7f2 f86b 	bl	8000b68 <__aeabi_d2iz>
 800ea92:	4682      	mov	sl, r0
 800ea94:	f7f1 fd4e 	bl	8000534 <__aeabi_i2d>
 800ea98:	4642      	mov	r2, r8
 800ea9a:	464b      	mov	r3, r9
 800ea9c:	f7f1 fdb4 	bl	8000608 <__aeabi_dmul>
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	460b      	mov	r3, r1
 800eaa4:	4630      	mov	r0, r6
 800eaa6:	4639      	mov	r1, r7
 800eaa8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800eaac:	f7f1 fbf4 	bl	8000298 <__aeabi_dsub>
 800eab0:	f805 6b01 	strb.w	r6, [r5], #1
 800eab4:	9e01      	ldr	r6, [sp, #4]
 800eab6:	9f03      	ldr	r7, [sp, #12]
 800eab8:	1bae      	subs	r6, r5, r6
 800eaba:	42b7      	cmp	r7, r6
 800eabc:	4602      	mov	r2, r0
 800eabe:	460b      	mov	r3, r1
 800eac0:	d135      	bne.n	800eb2e <_dtoa_r+0x6e6>
 800eac2:	f7f1 fbeb 	bl	800029c <__adddf3>
 800eac6:	4642      	mov	r2, r8
 800eac8:	464b      	mov	r3, r9
 800eaca:	4606      	mov	r6, r0
 800eacc:	460f      	mov	r7, r1
 800eace:	f7f2 f82b 	bl	8000b28 <__aeabi_dcmpgt>
 800ead2:	b9d0      	cbnz	r0, 800eb0a <_dtoa_r+0x6c2>
 800ead4:	4642      	mov	r2, r8
 800ead6:	464b      	mov	r3, r9
 800ead8:	4630      	mov	r0, r6
 800eada:	4639      	mov	r1, r7
 800eadc:	f7f1 fffc 	bl	8000ad8 <__aeabi_dcmpeq>
 800eae0:	b110      	cbz	r0, 800eae8 <_dtoa_r+0x6a0>
 800eae2:	f01a 0f01 	tst.w	sl, #1
 800eae6:	d110      	bne.n	800eb0a <_dtoa_r+0x6c2>
 800eae8:	4620      	mov	r0, r4
 800eaea:	ee18 1a10 	vmov	r1, s16
 800eaee:	f000 fe67 	bl	800f7c0 <_Bfree>
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	9800      	ldr	r0, [sp, #0]
 800eaf6:	702b      	strb	r3, [r5, #0]
 800eaf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eafa:	3001      	adds	r0, #1
 800eafc:	6018      	str	r0, [r3, #0]
 800eafe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	f43f acf1 	beq.w	800e4e8 <_dtoa_r+0xa0>
 800eb06:	601d      	str	r5, [r3, #0]
 800eb08:	e4ee      	b.n	800e4e8 <_dtoa_r+0xa0>
 800eb0a:	9f00      	ldr	r7, [sp, #0]
 800eb0c:	462b      	mov	r3, r5
 800eb0e:	461d      	mov	r5, r3
 800eb10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb14:	2a39      	cmp	r2, #57	; 0x39
 800eb16:	d106      	bne.n	800eb26 <_dtoa_r+0x6de>
 800eb18:	9a01      	ldr	r2, [sp, #4]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d1f7      	bne.n	800eb0e <_dtoa_r+0x6c6>
 800eb1e:	9901      	ldr	r1, [sp, #4]
 800eb20:	2230      	movs	r2, #48	; 0x30
 800eb22:	3701      	adds	r7, #1
 800eb24:	700a      	strb	r2, [r1, #0]
 800eb26:	781a      	ldrb	r2, [r3, #0]
 800eb28:	3201      	adds	r2, #1
 800eb2a:	701a      	strb	r2, [r3, #0]
 800eb2c:	e790      	b.n	800ea50 <_dtoa_r+0x608>
 800eb2e:	4ba6      	ldr	r3, [pc, #664]	; (800edc8 <_dtoa_r+0x980>)
 800eb30:	2200      	movs	r2, #0
 800eb32:	f7f1 fd69 	bl	8000608 <__aeabi_dmul>
 800eb36:	2200      	movs	r2, #0
 800eb38:	2300      	movs	r3, #0
 800eb3a:	4606      	mov	r6, r0
 800eb3c:	460f      	mov	r7, r1
 800eb3e:	f7f1 ffcb 	bl	8000ad8 <__aeabi_dcmpeq>
 800eb42:	2800      	cmp	r0, #0
 800eb44:	d09d      	beq.n	800ea82 <_dtoa_r+0x63a>
 800eb46:	e7cf      	b.n	800eae8 <_dtoa_r+0x6a0>
 800eb48:	9a08      	ldr	r2, [sp, #32]
 800eb4a:	2a00      	cmp	r2, #0
 800eb4c:	f000 80d7 	beq.w	800ecfe <_dtoa_r+0x8b6>
 800eb50:	9a06      	ldr	r2, [sp, #24]
 800eb52:	2a01      	cmp	r2, #1
 800eb54:	f300 80ba 	bgt.w	800eccc <_dtoa_r+0x884>
 800eb58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb5a:	2a00      	cmp	r2, #0
 800eb5c:	f000 80b2 	beq.w	800ecc4 <_dtoa_r+0x87c>
 800eb60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800eb64:	9e07      	ldr	r6, [sp, #28]
 800eb66:	9d04      	ldr	r5, [sp, #16]
 800eb68:	9a04      	ldr	r2, [sp, #16]
 800eb6a:	441a      	add	r2, r3
 800eb6c:	9204      	str	r2, [sp, #16]
 800eb6e:	9a05      	ldr	r2, [sp, #20]
 800eb70:	2101      	movs	r1, #1
 800eb72:	441a      	add	r2, r3
 800eb74:	4620      	mov	r0, r4
 800eb76:	9205      	str	r2, [sp, #20]
 800eb78:	f000 ff24 	bl	800f9c4 <__i2b>
 800eb7c:	4607      	mov	r7, r0
 800eb7e:	2d00      	cmp	r5, #0
 800eb80:	dd0c      	ble.n	800eb9c <_dtoa_r+0x754>
 800eb82:	9b05      	ldr	r3, [sp, #20]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	dd09      	ble.n	800eb9c <_dtoa_r+0x754>
 800eb88:	42ab      	cmp	r3, r5
 800eb8a:	9a04      	ldr	r2, [sp, #16]
 800eb8c:	bfa8      	it	ge
 800eb8e:	462b      	movge	r3, r5
 800eb90:	1ad2      	subs	r2, r2, r3
 800eb92:	9204      	str	r2, [sp, #16]
 800eb94:	9a05      	ldr	r2, [sp, #20]
 800eb96:	1aed      	subs	r5, r5, r3
 800eb98:	1ad3      	subs	r3, r2, r3
 800eb9a:	9305      	str	r3, [sp, #20]
 800eb9c:	9b07      	ldr	r3, [sp, #28]
 800eb9e:	b31b      	cbz	r3, 800ebe8 <_dtoa_r+0x7a0>
 800eba0:	9b08      	ldr	r3, [sp, #32]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	f000 80af 	beq.w	800ed06 <_dtoa_r+0x8be>
 800eba8:	2e00      	cmp	r6, #0
 800ebaa:	dd13      	ble.n	800ebd4 <_dtoa_r+0x78c>
 800ebac:	4639      	mov	r1, r7
 800ebae:	4632      	mov	r2, r6
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	f000 ffc7 	bl	800fb44 <__pow5mult>
 800ebb6:	ee18 2a10 	vmov	r2, s16
 800ebba:	4601      	mov	r1, r0
 800ebbc:	4607      	mov	r7, r0
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	f000 ff16 	bl	800f9f0 <__multiply>
 800ebc4:	ee18 1a10 	vmov	r1, s16
 800ebc8:	4680      	mov	r8, r0
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f000 fdf8 	bl	800f7c0 <_Bfree>
 800ebd0:	ee08 8a10 	vmov	s16, r8
 800ebd4:	9b07      	ldr	r3, [sp, #28]
 800ebd6:	1b9a      	subs	r2, r3, r6
 800ebd8:	d006      	beq.n	800ebe8 <_dtoa_r+0x7a0>
 800ebda:	ee18 1a10 	vmov	r1, s16
 800ebde:	4620      	mov	r0, r4
 800ebe0:	f000 ffb0 	bl	800fb44 <__pow5mult>
 800ebe4:	ee08 0a10 	vmov	s16, r0
 800ebe8:	2101      	movs	r1, #1
 800ebea:	4620      	mov	r0, r4
 800ebec:	f000 feea 	bl	800f9c4 <__i2b>
 800ebf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	4606      	mov	r6, r0
 800ebf6:	f340 8088 	ble.w	800ed0a <_dtoa_r+0x8c2>
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	4601      	mov	r1, r0
 800ebfe:	4620      	mov	r0, r4
 800ec00:	f000 ffa0 	bl	800fb44 <__pow5mult>
 800ec04:	9b06      	ldr	r3, [sp, #24]
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	4606      	mov	r6, r0
 800ec0a:	f340 8081 	ble.w	800ed10 <_dtoa_r+0x8c8>
 800ec0e:	f04f 0800 	mov.w	r8, #0
 800ec12:	6933      	ldr	r3, [r6, #16]
 800ec14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ec18:	6918      	ldr	r0, [r3, #16]
 800ec1a:	f000 fe83 	bl	800f924 <__hi0bits>
 800ec1e:	f1c0 0020 	rsb	r0, r0, #32
 800ec22:	9b05      	ldr	r3, [sp, #20]
 800ec24:	4418      	add	r0, r3
 800ec26:	f010 001f 	ands.w	r0, r0, #31
 800ec2a:	f000 8092 	beq.w	800ed52 <_dtoa_r+0x90a>
 800ec2e:	f1c0 0320 	rsb	r3, r0, #32
 800ec32:	2b04      	cmp	r3, #4
 800ec34:	f340 808a 	ble.w	800ed4c <_dtoa_r+0x904>
 800ec38:	f1c0 001c 	rsb	r0, r0, #28
 800ec3c:	9b04      	ldr	r3, [sp, #16]
 800ec3e:	4403      	add	r3, r0
 800ec40:	9304      	str	r3, [sp, #16]
 800ec42:	9b05      	ldr	r3, [sp, #20]
 800ec44:	4403      	add	r3, r0
 800ec46:	4405      	add	r5, r0
 800ec48:	9305      	str	r3, [sp, #20]
 800ec4a:	9b04      	ldr	r3, [sp, #16]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	dd07      	ble.n	800ec60 <_dtoa_r+0x818>
 800ec50:	ee18 1a10 	vmov	r1, s16
 800ec54:	461a      	mov	r2, r3
 800ec56:	4620      	mov	r0, r4
 800ec58:	f000 ffce 	bl	800fbf8 <__lshift>
 800ec5c:	ee08 0a10 	vmov	s16, r0
 800ec60:	9b05      	ldr	r3, [sp, #20]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	dd05      	ble.n	800ec72 <_dtoa_r+0x82a>
 800ec66:	4631      	mov	r1, r6
 800ec68:	461a      	mov	r2, r3
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f000 ffc4 	bl	800fbf8 <__lshift>
 800ec70:	4606      	mov	r6, r0
 800ec72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d06e      	beq.n	800ed56 <_dtoa_r+0x90e>
 800ec78:	ee18 0a10 	vmov	r0, s16
 800ec7c:	4631      	mov	r1, r6
 800ec7e:	f001 f82b 	bl	800fcd8 <__mcmp>
 800ec82:	2800      	cmp	r0, #0
 800ec84:	da67      	bge.n	800ed56 <_dtoa_r+0x90e>
 800ec86:	9b00      	ldr	r3, [sp, #0]
 800ec88:	3b01      	subs	r3, #1
 800ec8a:	ee18 1a10 	vmov	r1, s16
 800ec8e:	9300      	str	r3, [sp, #0]
 800ec90:	220a      	movs	r2, #10
 800ec92:	2300      	movs	r3, #0
 800ec94:	4620      	mov	r0, r4
 800ec96:	f000 fdb5 	bl	800f804 <__multadd>
 800ec9a:	9b08      	ldr	r3, [sp, #32]
 800ec9c:	ee08 0a10 	vmov	s16, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	f000 81b1 	beq.w	800f008 <_dtoa_r+0xbc0>
 800eca6:	2300      	movs	r3, #0
 800eca8:	4639      	mov	r1, r7
 800ecaa:	220a      	movs	r2, #10
 800ecac:	4620      	mov	r0, r4
 800ecae:	f000 fda9 	bl	800f804 <__multadd>
 800ecb2:	9b02      	ldr	r3, [sp, #8]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	4607      	mov	r7, r0
 800ecb8:	f300 808e 	bgt.w	800edd8 <_dtoa_r+0x990>
 800ecbc:	9b06      	ldr	r3, [sp, #24]
 800ecbe:	2b02      	cmp	r3, #2
 800ecc0:	dc51      	bgt.n	800ed66 <_dtoa_r+0x91e>
 800ecc2:	e089      	b.n	800edd8 <_dtoa_r+0x990>
 800ecc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ecc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ecca:	e74b      	b.n	800eb64 <_dtoa_r+0x71c>
 800eccc:	9b03      	ldr	r3, [sp, #12]
 800ecce:	1e5e      	subs	r6, r3, #1
 800ecd0:	9b07      	ldr	r3, [sp, #28]
 800ecd2:	42b3      	cmp	r3, r6
 800ecd4:	bfbf      	itttt	lt
 800ecd6:	9b07      	ldrlt	r3, [sp, #28]
 800ecd8:	9607      	strlt	r6, [sp, #28]
 800ecda:	1af2      	sublt	r2, r6, r3
 800ecdc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ecde:	bfb6      	itet	lt
 800ece0:	189b      	addlt	r3, r3, r2
 800ece2:	1b9e      	subge	r6, r3, r6
 800ece4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ece6:	9b03      	ldr	r3, [sp, #12]
 800ece8:	bfb8      	it	lt
 800ecea:	2600      	movlt	r6, #0
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	bfb7      	itett	lt
 800ecf0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ecf4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ecf8:	1a9d      	sublt	r5, r3, r2
 800ecfa:	2300      	movlt	r3, #0
 800ecfc:	e734      	b.n	800eb68 <_dtoa_r+0x720>
 800ecfe:	9e07      	ldr	r6, [sp, #28]
 800ed00:	9d04      	ldr	r5, [sp, #16]
 800ed02:	9f08      	ldr	r7, [sp, #32]
 800ed04:	e73b      	b.n	800eb7e <_dtoa_r+0x736>
 800ed06:	9a07      	ldr	r2, [sp, #28]
 800ed08:	e767      	b.n	800ebda <_dtoa_r+0x792>
 800ed0a:	9b06      	ldr	r3, [sp, #24]
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	dc18      	bgt.n	800ed42 <_dtoa_r+0x8fa>
 800ed10:	f1ba 0f00 	cmp.w	sl, #0
 800ed14:	d115      	bne.n	800ed42 <_dtoa_r+0x8fa>
 800ed16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed1a:	b993      	cbnz	r3, 800ed42 <_dtoa_r+0x8fa>
 800ed1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ed20:	0d1b      	lsrs	r3, r3, #20
 800ed22:	051b      	lsls	r3, r3, #20
 800ed24:	b183      	cbz	r3, 800ed48 <_dtoa_r+0x900>
 800ed26:	9b04      	ldr	r3, [sp, #16]
 800ed28:	3301      	adds	r3, #1
 800ed2a:	9304      	str	r3, [sp, #16]
 800ed2c:	9b05      	ldr	r3, [sp, #20]
 800ed2e:	3301      	adds	r3, #1
 800ed30:	9305      	str	r3, [sp, #20]
 800ed32:	f04f 0801 	mov.w	r8, #1
 800ed36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	f47f af6a 	bne.w	800ec12 <_dtoa_r+0x7ca>
 800ed3e:	2001      	movs	r0, #1
 800ed40:	e76f      	b.n	800ec22 <_dtoa_r+0x7da>
 800ed42:	f04f 0800 	mov.w	r8, #0
 800ed46:	e7f6      	b.n	800ed36 <_dtoa_r+0x8ee>
 800ed48:	4698      	mov	r8, r3
 800ed4a:	e7f4      	b.n	800ed36 <_dtoa_r+0x8ee>
 800ed4c:	f43f af7d 	beq.w	800ec4a <_dtoa_r+0x802>
 800ed50:	4618      	mov	r0, r3
 800ed52:	301c      	adds	r0, #28
 800ed54:	e772      	b.n	800ec3c <_dtoa_r+0x7f4>
 800ed56:	9b03      	ldr	r3, [sp, #12]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	dc37      	bgt.n	800edcc <_dtoa_r+0x984>
 800ed5c:	9b06      	ldr	r3, [sp, #24]
 800ed5e:	2b02      	cmp	r3, #2
 800ed60:	dd34      	ble.n	800edcc <_dtoa_r+0x984>
 800ed62:	9b03      	ldr	r3, [sp, #12]
 800ed64:	9302      	str	r3, [sp, #8]
 800ed66:	9b02      	ldr	r3, [sp, #8]
 800ed68:	b96b      	cbnz	r3, 800ed86 <_dtoa_r+0x93e>
 800ed6a:	4631      	mov	r1, r6
 800ed6c:	2205      	movs	r2, #5
 800ed6e:	4620      	mov	r0, r4
 800ed70:	f000 fd48 	bl	800f804 <__multadd>
 800ed74:	4601      	mov	r1, r0
 800ed76:	4606      	mov	r6, r0
 800ed78:	ee18 0a10 	vmov	r0, s16
 800ed7c:	f000 ffac 	bl	800fcd8 <__mcmp>
 800ed80:	2800      	cmp	r0, #0
 800ed82:	f73f adbb 	bgt.w	800e8fc <_dtoa_r+0x4b4>
 800ed86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed88:	9d01      	ldr	r5, [sp, #4]
 800ed8a:	43db      	mvns	r3, r3
 800ed8c:	9300      	str	r3, [sp, #0]
 800ed8e:	f04f 0800 	mov.w	r8, #0
 800ed92:	4631      	mov	r1, r6
 800ed94:	4620      	mov	r0, r4
 800ed96:	f000 fd13 	bl	800f7c0 <_Bfree>
 800ed9a:	2f00      	cmp	r7, #0
 800ed9c:	f43f aea4 	beq.w	800eae8 <_dtoa_r+0x6a0>
 800eda0:	f1b8 0f00 	cmp.w	r8, #0
 800eda4:	d005      	beq.n	800edb2 <_dtoa_r+0x96a>
 800eda6:	45b8      	cmp	r8, r7
 800eda8:	d003      	beq.n	800edb2 <_dtoa_r+0x96a>
 800edaa:	4641      	mov	r1, r8
 800edac:	4620      	mov	r0, r4
 800edae:	f000 fd07 	bl	800f7c0 <_Bfree>
 800edb2:	4639      	mov	r1, r7
 800edb4:	4620      	mov	r0, r4
 800edb6:	f000 fd03 	bl	800f7c0 <_Bfree>
 800edba:	e695      	b.n	800eae8 <_dtoa_r+0x6a0>
 800edbc:	2600      	movs	r6, #0
 800edbe:	4637      	mov	r7, r6
 800edc0:	e7e1      	b.n	800ed86 <_dtoa_r+0x93e>
 800edc2:	9700      	str	r7, [sp, #0]
 800edc4:	4637      	mov	r7, r6
 800edc6:	e599      	b.n	800e8fc <_dtoa_r+0x4b4>
 800edc8:	40240000 	.word	0x40240000
 800edcc:	9b08      	ldr	r3, [sp, #32]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f000 80ca 	beq.w	800ef68 <_dtoa_r+0xb20>
 800edd4:	9b03      	ldr	r3, [sp, #12]
 800edd6:	9302      	str	r3, [sp, #8]
 800edd8:	2d00      	cmp	r5, #0
 800edda:	dd05      	ble.n	800ede8 <_dtoa_r+0x9a0>
 800eddc:	4639      	mov	r1, r7
 800edde:	462a      	mov	r2, r5
 800ede0:	4620      	mov	r0, r4
 800ede2:	f000 ff09 	bl	800fbf8 <__lshift>
 800ede6:	4607      	mov	r7, r0
 800ede8:	f1b8 0f00 	cmp.w	r8, #0
 800edec:	d05b      	beq.n	800eea6 <_dtoa_r+0xa5e>
 800edee:	6879      	ldr	r1, [r7, #4]
 800edf0:	4620      	mov	r0, r4
 800edf2:	f000 fca5 	bl	800f740 <_Balloc>
 800edf6:	4605      	mov	r5, r0
 800edf8:	b928      	cbnz	r0, 800ee06 <_dtoa_r+0x9be>
 800edfa:	4b87      	ldr	r3, [pc, #540]	; (800f018 <_dtoa_r+0xbd0>)
 800edfc:	4602      	mov	r2, r0
 800edfe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ee02:	f7ff bb3b 	b.w	800e47c <_dtoa_r+0x34>
 800ee06:	693a      	ldr	r2, [r7, #16]
 800ee08:	3202      	adds	r2, #2
 800ee0a:	0092      	lsls	r2, r2, #2
 800ee0c:	f107 010c 	add.w	r1, r7, #12
 800ee10:	300c      	adds	r0, #12
 800ee12:	f7fd fd29 	bl	800c868 <memcpy>
 800ee16:	2201      	movs	r2, #1
 800ee18:	4629      	mov	r1, r5
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	f000 feec 	bl	800fbf8 <__lshift>
 800ee20:	9b01      	ldr	r3, [sp, #4]
 800ee22:	f103 0901 	add.w	r9, r3, #1
 800ee26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ee2a:	4413      	add	r3, r2
 800ee2c:	9305      	str	r3, [sp, #20]
 800ee2e:	f00a 0301 	and.w	r3, sl, #1
 800ee32:	46b8      	mov	r8, r7
 800ee34:	9304      	str	r3, [sp, #16]
 800ee36:	4607      	mov	r7, r0
 800ee38:	4631      	mov	r1, r6
 800ee3a:	ee18 0a10 	vmov	r0, s16
 800ee3e:	f7ff fa77 	bl	800e330 <quorem>
 800ee42:	4641      	mov	r1, r8
 800ee44:	9002      	str	r0, [sp, #8]
 800ee46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ee4a:	ee18 0a10 	vmov	r0, s16
 800ee4e:	f000 ff43 	bl	800fcd8 <__mcmp>
 800ee52:	463a      	mov	r2, r7
 800ee54:	9003      	str	r0, [sp, #12]
 800ee56:	4631      	mov	r1, r6
 800ee58:	4620      	mov	r0, r4
 800ee5a:	f000 ff59 	bl	800fd10 <__mdiff>
 800ee5e:	68c2      	ldr	r2, [r0, #12]
 800ee60:	f109 3bff 	add.w	fp, r9, #4294967295
 800ee64:	4605      	mov	r5, r0
 800ee66:	bb02      	cbnz	r2, 800eeaa <_dtoa_r+0xa62>
 800ee68:	4601      	mov	r1, r0
 800ee6a:	ee18 0a10 	vmov	r0, s16
 800ee6e:	f000 ff33 	bl	800fcd8 <__mcmp>
 800ee72:	4602      	mov	r2, r0
 800ee74:	4629      	mov	r1, r5
 800ee76:	4620      	mov	r0, r4
 800ee78:	9207      	str	r2, [sp, #28]
 800ee7a:	f000 fca1 	bl	800f7c0 <_Bfree>
 800ee7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ee82:	ea43 0102 	orr.w	r1, r3, r2
 800ee86:	9b04      	ldr	r3, [sp, #16]
 800ee88:	430b      	orrs	r3, r1
 800ee8a:	464d      	mov	r5, r9
 800ee8c:	d10f      	bne.n	800eeae <_dtoa_r+0xa66>
 800ee8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ee92:	d02a      	beq.n	800eeea <_dtoa_r+0xaa2>
 800ee94:	9b03      	ldr	r3, [sp, #12]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	dd02      	ble.n	800eea0 <_dtoa_r+0xa58>
 800ee9a:	9b02      	ldr	r3, [sp, #8]
 800ee9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800eea0:	f88b a000 	strb.w	sl, [fp]
 800eea4:	e775      	b.n	800ed92 <_dtoa_r+0x94a>
 800eea6:	4638      	mov	r0, r7
 800eea8:	e7ba      	b.n	800ee20 <_dtoa_r+0x9d8>
 800eeaa:	2201      	movs	r2, #1
 800eeac:	e7e2      	b.n	800ee74 <_dtoa_r+0xa2c>
 800eeae:	9b03      	ldr	r3, [sp, #12]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	db04      	blt.n	800eebe <_dtoa_r+0xa76>
 800eeb4:	9906      	ldr	r1, [sp, #24]
 800eeb6:	430b      	orrs	r3, r1
 800eeb8:	9904      	ldr	r1, [sp, #16]
 800eeba:	430b      	orrs	r3, r1
 800eebc:	d122      	bne.n	800ef04 <_dtoa_r+0xabc>
 800eebe:	2a00      	cmp	r2, #0
 800eec0:	ddee      	ble.n	800eea0 <_dtoa_r+0xa58>
 800eec2:	ee18 1a10 	vmov	r1, s16
 800eec6:	2201      	movs	r2, #1
 800eec8:	4620      	mov	r0, r4
 800eeca:	f000 fe95 	bl	800fbf8 <__lshift>
 800eece:	4631      	mov	r1, r6
 800eed0:	ee08 0a10 	vmov	s16, r0
 800eed4:	f000 ff00 	bl	800fcd8 <__mcmp>
 800eed8:	2800      	cmp	r0, #0
 800eeda:	dc03      	bgt.n	800eee4 <_dtoa_r+0xa9c>
 800eedc:	d1e0      	bne.n	800eea0 <_dtoa_r+0xa58>
 800eede:	f01a 0f01 	tst.w	sl, #1
 800eee2:	d0dd      	beq.n	800eea0 <_dtoa_r+0xa58>
 800eee4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800eee8:	d1d7      	bne.n	800ee9a <_dtoa_r+0xa52>
 800eeea:	2339      	movs	r3, #57	; 0x39
 800eeec:	f88b 3000 	strb.w	r3, [fp]
 800eef0:	462b      	mov	r3, r5
 800eef2:	461d      	mov	r5, r3
 800eef4:	3b01      	subs	r3, #1
 800eef6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800eefa:	2a39      	cmp	r2, #57	; 0x39
 800eefc:	d071      	beq.n	800efe2 <_dtoa_r+0xb9a>
 800eefe:	3201      	adds	r2, #1
 800ef00:	701a      	strb	r2, [r3, #0]
 800ef02:	e746      	b.n	800ed92 <_dtoa_r+0x94a>
 800ef04:	2a00      	cmp	r2, #0
 800ef06:	dd07      	ble.n	800ef18 <_dtoa_r+0xad0>
 800ef08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ef0c:	d0ed      	beq.n	800eeea <_dtoa_r+0xaa2>
 800ef0e:	f10a 0301 	add.w	r3, sl, #1
 800ef12:	f88b 3000 	strb.w	r3, [fp]
 800ef16:	e73c      	b.n	800ed92 <_dtoa_r+0x94a>
 800ef18:	9b05      	ldr	r3, [sp, #20]
 800ef1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ef1e:	4599      	cmp	r9, r3
 800ef20:	d047      	beq.n	800efb2 <_dtoa_r+0xb6a>
 800ef22:	ee18 1a10 	vmov	r1, s16
 800ef26:	2300      	movs	r3, #0
 800ef28:	220a      	movs	r2, #10
 800ef2a:	4620      	mov	r0, r4
 800ef2c:	f000 fc6a 	bl	800f804 <__multadd>
 800ef30:	45b8      	cmp	r8, r7
 800ef32:	ee08 0a10 	vmov	s16, r0
 800ef36:	f04f 0300 	mov.w	r3, #0
 800ef3a:	f04f 020a 	mov.w	r2, #10
 800ef3e:	4641      	mov	r1, r8
 800ef40:	4620      	mov	r0, r4
 800ef42:	d106      	bne.n	800ef52 <_dtoa_r+0xb0a>
 800ef44:	f000 fc5e 	bl	800f804 <__multadd>
 800ef48:	4680      	mov	r8, r0
 800ef4a:	4607      	mov	r7, r0
 800ef4c:	f109 0901 	add.w	r9, r9, #1
 800ef50:	e772      	b.n	800ee38 <_dtoa_r+0x9f0>
 800ef52:	f000 fc57 	bl	800f804 <__multadd>
 800ef56:	4639      	mov	r1, r7
 800ef58:	4680      	mov	r8, r0
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	220a      	movs	r2, #10
 800ef5e:	4620      	mov	r0, r4
 800ef60:	f000 fc50 	bl	800f804 <__multadd>
 800ef64:	4607      	mov	r7, r0
 800ef66:	e7f1      	b.n	800ef4c <_dtoa_r+0xb04>
 800ef68:	9b03      	ldr	r3, [sp, #12]
 800ef6a:	9302      	str	r3, [sp, #8]
 800ef6c:	9d01      	ldr	r5, [sp, #4]
 800ef6e:	ee18 0a10 	vmov	r0, s16
 800ef72:	4631      	mov	r1, r6
 800ef74:	f7ff f9dc 	bl	800e330 <quorem>
 800ef78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ef7c:	9b01      	ldr	r3, [sp, #4]
 800ef7e:	f805 ab01 	strb.w	sl, [r5], #1
 800ef82:	1aea      	subs	r2, r5, r3
 800ef84:	9b02      	ldr	r3, [sp, #8]
 800ef86:	4293      	cmp	r3, r2
 800ef88:	dd09      	ble.n	800ef9e <_dtoa_r+0xb56>
 800ef8a:	ee18 1a10 	vmov	r1, s16
 800ef8e:	2300      	movs	r3, #0
 800ef90:	220a      	movs	r2, #10
 800ef92:	4620      	mov	r0, r4
 800ef94:	f000 fc36 	bl	800f804 <__multadd>
 800ef98:	ee08 0a10 	vmov	s16, r0
 800ef9c:	e7e7      	b.n	800ef6e <_dtoa_r+0xb26>
 800ef9e:	9b02      	ldr	r3, [sp, #8]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	bfc8      	it	gt
 800efa4:	461d      	movgt	r5, r3
 800efa6:	9b01      	ldr	r3, [sp, #4]
 800efa8:	bfd8      	it	le
 800efaa:	2501      	movle	r5, #1
 800efac:	441d      	add	r5, r3
 800efae:	f04f 0800 	mov.w	r8, #0
 800efb2:	ee18 1a10 	vmov	r1, s16
 800efb6:	2201      	movs	r2, #1
 800efb8:	4620      	mov	r0, r4
 800efba:	f000 fe1d 	bl	800fbf8 <__lshift>
 800efbe:	4631      	mov	r1, r6
 800efc0:	ee08 0a10 	vmov	s16, r0
 800efc4:	f000 fe88 	bl	800fcd8 <__mcmp>
 800efc8:	2800      	cmp	r0, #0
 800efca:	dc91      	bgt.n	800eef0 <_dtoa_r+0xaa8>
 800efcc:	d102      	bne.n	800efd4 <_dtoa_r+0xb8c>
 800efce:	f01a 0f01 	tst.w	sl, #1
 800efd2:	d18d      	bne.n	800eef0 <_dtoa_r+0xaa8>
 800efd4:	462b      	mov	r3, r5
 800efd6:	461d      	mov	r5, r3
 800efd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800efdc:	2a30      	cmp	r2, #48	; 0x30
 800efde:	d0fa      	beq.n	800efd6 <_dtoa_r+0xb8e>
 800efe0:	e6d7      	b.n	800ed92 <_dtoa_r+0x94a>
 800efe2:	9a01      	ldr	r2, [sp, #4]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d184      	bne.n	800eef2 <_dtoa_r+0xaaa>
 800efe8:	9b00      	ldr	r3, [sp, #0]
 800efea:	3301      	adds	r3, #1
 800efec:	9300      	str	r3, [sp, #0]
 800efee:	2331      	movs	r3, #49	; 0x31
 800eff0:	7013      	strb	r3, [r2, #0]
 800eff2:	e6ce      	b.n	800ed92 <_dtoa_r+0x94a>
 800eff4:	4b09      	ldr	r3, [pc, #36]	; (800f01c <_dtoa_r+0xbd4>)
 800eff6:	f7ff ba95 	b.w	800e524 <_dtoa_r+0xdc>
 800effa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800effc:	2b00      	cmp	r3, #0
 800effe:	f47f aa6e 	bne.w	800e4de <_dtoa_r+0x96>
 800f002:	4b07      	ldr	r3, [pc, #28]	; (800f020 <_dtoa_r+0xbd8>)
 800f004:	f7ff ba8e 	b.w	800e524 <_dtoa_r+0xdc>
 800f008:	9b02      	ldr	r3, [sp, #8]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	dcae      	bgt.n	800ef6c <_dtoa_r+0xb24>
 800f00e:	9b06      	ldr	r3, [sp, #24]
 800f010:	2b02      	cmp	r3, #2
 800f012:	f73f aea8 	bgt.w	800ed66 <_dtoa_r+0x91e>
 800f016:	e7a9      	b.n	800ef6c <_dtoa_r+0xb24>
 800f018:	08011650 	.word	0x08011650
 800f01c:	08011450 	.word	0x08011450
 800f020:	080115d1 	.word	0x080115d1

0800f024 <rshift>:
 800f024:	6903      	ldr	r3, [r0, #16]
 800f026:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f02a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f02e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f032:	f100 0414 	add.w	r4, r0, #20
 800f036:	dd45      	ble.n	800f0c4 <rshift+0xa0>
 800f038:	f011 011f 	ands.w	r1, r1, #31
 800f03c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f040:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f044:	d10c      	bne.n	800f060 <rshift+0x3c>
 800f046:	f100 0710 	add.w	r7, r0, #16
 800f04a:	4629      	mov	r1, r5
 800f04c:	42b1      	cmp	r1, r6
 800f04e:	d334      	bcc.n	800f0ba <rshift+0x96>
 800f050:	1a9b      	subs	r3, r3, r2
 800f052:	009b      	lsls	r3, r3, #2
 800f054:	1eea      	subs	r2, r5, #3
 800f056:	4296      	cmp	r6, r2
 800f058:	bf38      	it	cc
 800f05a:	2300      	movcc	r3, #0
 800f05c:	4423      	add	r3, r4
 800f05e:	e015      	b.n	800f08c <rshift+0x68>
 800f060:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f064:	f1c1 0820 	rsb	r8, r1, #32
 800f068:	40cf      	lsrs	r7, r1
 800f06a:	f105 0e04 	add.w	lr, r5, #4
 800f06e:	46a1      	mov	r9, r4
 800f070:	4576      	cmp	r6, lr
 800f072:	46f4      	mov	ip, lr
 800f074:	d815      	bhi.n	800f0a2 <rshift+0x7e>
 800f076:	1a9a      	subs	r2, r3, r2
 800f078:	0092      	lsls	r2, r2, #2
 800f07a:	3a04      	subs	r2, #4
 800f07c:	3501      	adds	r5, #1
 800f07e:	42ae      	cmp	r6, r5
 800f080:	bf38      	it	cc
 800f082:	2200      	movcc	r2, #0
 800f084:	18a3      	adds	r3, r4, r2
 800f086:	50a7      	str	r7, [r4, r2]
 800f088:	b107      	cbz	r7, 800f08c <rshift+0x68>
 800f08a:	3304      	adds	r3, #4
 800f08c:	1b1a      	subs	r2, r3, r4
 800f08e:	42a3      	cmp	r3, r4
 800f090:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f094:	bf08      	it	eq
 800f096:	2300      	moveq	r3, #0
 800f098:	6102      	str	r2, [r0, #16]
 800f09a:	bf08      	it	eq
 800f09c:	6143      	streq	r3, [r0, #20]
 800f09e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0a2:	f8dc c000 	ldr.w	ip, [ip]
 800f0a6:	fa0c fc08 	lsl.w	ip, ip, r8
 800f0aa:	ea4c 0707 	orr.w	r7, ip, r7
 800f0ae:	f849 7b04 	str.w	r7, [r9], #4
 800f0b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f0b6:	40cf      	lsrs	r7, r1
 800f0b8:	e7da      	b.n	800f070 <rshift+0x4c>
 800f0ba:	f851 cb04 	ldr.w	ip, [r1], #4
 800f0be:	f847 cf04 	str.w	ip, [r7, #4]!
 800f0c2:	e7c3      	b.n	800f04c <rshift+0x28>
 800f0c4:	4623      	mov	r3, r4
 800f0c6:	e7e1      	b.n	800f08c <rshift+0x68>

0800f0c8 <__hexdig_fun>:
 800f0c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f0cc:	2b09      	cmp	r3, #9
 800f0ce:	d802      	bhi.n	800f0d6 <__hexdig_fun+0xe>
 800f0d0:	3820      	subs	r0, #32
 800f0d2:	b2c0      	uxtb	r0, r0
 800f0d4:	4770      	bx	lr
 800f0d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f0da:	2b05      	cmp	r3, #5
 800f0dc:	d801      	bhi.n	800f0e2 <__hexdig_fun+0x1a>
 800f0de:	3847      	subs	r0, #71	; 0x47
 800f0e0:	e7f7      	b.n	800f0d2 <__hexdig_fun+0xa>
 800f0e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f0e6:	2b05      	cmp	r3, #5
 800f0e8:	d801      	bhi.n	800f0ee <__hexdig_fun+0x26>
 800f0ea:	3827      	subs	r0, #39	; 0x27
 800f0ec:	e7f1      	b.n	800f0d2 <__hexdig_fun+0xa>
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	4770      	bx	lr
	...

0800f0f4 <__gethex>:
 800f0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f8:	ed2d 8b02 	vpush	{d8}
 800f0fc:	b089      	sub	sp, #36	; 0x24
 800f0fe:	ee08 0a10 	vmov	s16, r0
 800f102:	9304      	str	r3, [sp, #16]
 800f104:	4bb4      	ldr	r3, [pc, #720]	; (800f3d8 <__gethex+0x2e4>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	9301      	str	r3, [sp, #4]
 800f10a:	4618      	mov	r0, r3
 800f10c:	468b      	mov	fp, r1
 800f10e:	4690      	mov	r8, r2
 800f110:	f7f1 f866 	bl	80001e0 <strlen>
 800f114:	9b01      	ldr	r3, [sp, #4]
 800f116:	f8db 2000 	ldr.w	r2, [fp]
 800f11a:	4403      	add	r3, r0
 800f11c:	4682      	mov	sl, r0
 800f11e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f122:	9305      	str	r3, [sp, #20]
 800f124:	1c93      	adds	r3, r2, #2
 800f126:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f12a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f12e:	32fe      	adds	r2, #254	; 0xfe
 800f130:	18d1      	adds	r1, r2, r3
 800f132:	461f      	mov	r7, r3
 800f134:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f138:	9100      	str	r1, [sp, #0]
 800f13a:	2830      	cmp	r0, #48	; 0x30
 800f13c:	d0f8      	beq.n	800f130 <__gethex+0x3c>
 800f13e:	f7ff ffc3 	bl	800f0c8 <__hexdig_fun>
 800f142:	4604      	mov	r4, r0
 800f144:	2800      	cmp	r0, #0
 800f146:	d13a      	bne.n	800f1be <__gethex+0xca>
 800f148:	9901      	ldr	r1, [sp, #4]
 800f14a:	4652      	mov	r2, sl
 800f14c:	4638      	mov	r0, r7
 800f14e:	f001 fa23 	bl	8010598 <strncmp>
 800f152:	4605      	mov	r5, r0
 800f154:	2800      	cmp	r0, #0
 800f156:	d168      	bne.n	800f22a <__gethex+0x136>
 800f158:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f15c:	eb07 060a 	add.w	r6, r7, sl
 800f160:	f7ff ffb2 	bl	800f0c8 <__hexdig_fun>
 800f164:	2800      	cmp	r0, #0
 800f166:	d062      	beq.n	800f22e <__gethex+0x13a>
 800f168:	4633      	mov	r3, r6
 800f16a:	7818      	ldrb	r0, [r3, #0]
 800f16c:	2830      	cmp	r0, #48	; 0x30
 800f16e:	461f      	mov	r7, r3
 800f170:	f103 0301 	add.w	r3, r3, #1
 800f174:	d0f9      	beq.n	800f16a <__gethex+0x76>
 800f176:	f7ff ffa7 	bl	800f0c8 <__hexdig_fun>
 800f17a:	2301      	movs	r3, #1
 800f17c:	fab0 f480 	clz	r4, r0
 800f180:	0964      	lsrs	r4, r4, #5
 800f182:	4635      	mov	r5, r6
 800f184:	9300      	str	r3, [sp, #0]
 800f186:	463a      	mov	r2, r7
 800f188:	4616      	mov	r6, r2
 800f18a:	3201      	adds	r2, #1
 800f18c:	7830      	ldrb	r0, [r6, #0]
 800f18e:	f7ff ff9b 	bl	800f0c8 <__hexdig_fun>
 800f192:	2800      	cmp	r0, #0
 800f194:	d1f8      	bne.n	800f188 <__gethex+0x94>
 800f196:	9901      	ldr	r1, [sp, #4]
 800f198:	4652      	mov	r2, sl
 800f19a:	4630      	mov	r0, r6
 800f19c:	f001 f9fc 	bl	8010598 <strncmp>
 800f1a0:	b980      	cbnz	r0, 800f1c4 <__gethex+0xd0>
 800f1a2:	b94d      	cbnz	r5, 800f1b8 <__gethex+0xc4>
 800f1a4:	eb06 050a 	add.w	r5, r6, sl
 800f1a8:	462a      	mov	r2, r5
 800f1aa:	4616      	mov	r6, r2
 800f1ac:	3201      	adds	r2, #1
 800f1ae:	7830      	ldrb	r0, [r6, #0]
 800f1b0:	f7ff ff8a 	bl	800f0c8 <__hexdig_fun>
 800f1b4:	2800      	cmp	r0, #0
 800f1b6:	d1f8      	bne.n	800f1aa <__gethex+0xb6>
 800f1b8:	1bad      	subs	r5, r5, r6
 800f1ba:	00ad      	lsls	r5, r5, #2
 800f1bc:	e004      	b.n	800f1c8 <__gethex+0xd4>
 800f1be:	2400      	movs	r4, #0
 800f1c0:	4625      	mov	r5, r4
 800f1c2:	e7e0      	b.n	800f186 <__gethex+0x92>
 800f1c4:	2d00      	cmp	r5, #0
 800f1c6:	d1f7      	bne.n	800f1b8 <__gethex+0xc4>
 800f1c8:	7833      	ldrb	r3, [r6, #0]
 800f1ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f1ce:	2b50      	cmp	r3, #80	; 0x50
 800f1d0:	d13b      	bne.n	800f24a <__gethex+0x156>
 800f1d2:	7873      	ldrb	r3, [r6, #1]
 800f1d4:	2b2b      	cmp	r3, #43	; 0x2b
 800f1d6:	d02c      	beq.n	800f232 <__gethex+0x13e>
 800f1d8:	2b2d      	cmp	r3, #45	; 0x2d
 800f1da:	d02e      	beq.n	800f23a <__gethex+0x146>
 800f1dc:	1c71      	adds	r1, r6, #1
 800f1de:	f04f 0900 	mov.w	r9, #0
 800f1e2:	7808      	ldrb	r0, [r1, #0]
 800f1e4:	f7ff ff70 	bl	800f0c8 <__hexdig_fun>
 800f1e8:	1e43      	subs	r3, r0, #1
 800f1ea:	b2db      	uxtb	r3, r3
 800f1ec:	2b18      	cmp	r3, #24
 800f1ee:	d82c      	bhi.n	800f24a <__gethex+0x156>
 800f1f0:	f1a0 0210 	sub.w	r2, r0, #16
 800f1f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f1f8:	f7ff ff66 	bl	800f0c8 <__hexdig_fun>
 800f1fc:	1e43      	subs	r3, r0, #1
 800f1fe:	b2db      	uxtb	r3, r3
 800f200:	2b18      	cmp	r3, #24
 800f202:	d91d      	bls.n	800f240 <__gethex+0x14c>
 800f204:	f1b9 0f00 	cmp.w	r9, #0
 800f208:	d000      	beq.n	800f20c <__gethex+0x118>
 800f20a:	4252      	negs	r2, r2
 800f20c:	4415      	add	r5, r2
 800f20e:	f8cb 1000 	str.w	r1, [fp]
 800f212:	b1e4      	cbz	r4, 800f24e <__gethex+0x15a>
 800f214:	9b00      	ldr	r3, [sp, #0]
 800f216:	2b00      	cmp	r3, #0
 800f218:	bf14      	ite	ne
 800f21a:	2700      	movne	r7, #0
 800f21c:	2706      	moveq	r7, #6
 800f21e:	4638      	mov	r0, r7
 800f220:	b009      	add	sp, #36	; 0x24
 800f222:	ecbd 8b02 	vpop	{d8}
 800f226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f22a:	463e      	mov	r6, r7
 800f22c:	4625      	mov	r5, r4
 800f22e:	2401      	movs	r4, #1
 800f230:	e7ca      	b.n	800f1c8 <__gethex+0xd4>
 800f232:	f04f 0900 	mov.w	r9, #0
 800f236:	1cb1      	adds	r1, r6, #2
 800f238:	e7d3      	b.n	800f1e2 <__gethex+0xee>
 800f23a:	f04f 0901 	mov.w	r9, #1
 800f23e:	e7fa      	b.n	800f236 <__gethex+0x142>
 800f240:	230a      	movs	r3, #10
 800f242:	fb03 0202 	mla	r2, r3, r2, r0
 800f246:	3a10      	subs	r2, #16
 800f248:	e7d4      	b.n	800f1f4 <__gethex+0x100>
 800f24a:	4631      	mov	r1, r6
 800f24c:	e7df      	b.n	800f20e <__gethex+0x11a>
 800f24e:	1bf3      	subs	r3, r6, r7
 800f250:	3b01      	subs	r3, #1
 800f252:	4621      	mov	r1, r4
 800f254:	2b07      	cmp	r3, #7
 800f256:	dc0b      	bgt.n	800f270 <__gethex+0x17c>
 800f258:	ee18 0a10 	vmov	r0, s16
 800f25c:	f000 fa70 	bl	800f740 <_Balloc>
 800f260:	4604      	mov	r4, r0
 800f262:	b940      	cbnz	r0, 800f276 <__gethex+0x182>
 800f264:	4b5d      	ldr	r3, [pc, #372]	; (800f3dc <__gethex+0x2e8>)
 800f266:	4602      	mov	r2, r0
 800f268:	21de      	movs	r1, #222	; 0xde
 800f26a:	485d      	ldr	r0, [pc, #372]	; (800f3e0 <__gethex+0x2ec>)
 800f26c:	f001 f9b6 	bl	80105dc <__assert_func>
 800f270:	3101      	adds	r1, #1
 800f272:	105b      	asrs	r3, r3, #1
 800f274:	e7ee      	b.n	800f254 <__gethex+0x160>
 800f276:	f100 0914 	add.w	r9, r0, #20
 800f27a:	f04f 0b00 	mov.w	fp, #0
 800f27e:	f1ca 0301 	rsb	r3, sl, #1
 800f282:	f8cd 9008 	str.w	r9, [sp, #8]
 800f286:	f8cd b000 	str.w	fp, [sp]
 800f28a:	9306      	str	r3, [sp, #24]
 800f28c:	42b7      	cmp	r7, r6
 800f28e:	d340      	bcc.n	800f312 <__gethex+0x21e>
 800f290:	9802      	ldr	r0, [sp, #8]
 800f292:	9b00      	ldr	r3, [sp, #0]
 800f294:	f840 3b04 	str.w	r3, [r0], #4
 800f298:	eba0 0009 	sub.w	r0, r0, r9
 800f29c:	1080      	asrs	r0, r0, #2
 800f29e:	0146      	lsls	r6, r0, #5
 800f2a0:	6120      	str	r0, [r4, #16]
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f000 fb3e 	bl	800f924 <__hi0bits>
 800f2a8:	1a30      	subs	r0, r6, r0
 800f2aa:	f8d8 6000 	ldr.w	r6, [r8]
 800f2ae:	42b0      	cmp	r0, r6
 800f2b0:	dd63      	ble.n	800f37a <__gethex+0x286>
 800f2b2:	1b87      	subs	r7, r0, r6
 800f2b4:	4639      	mov	r1, r7
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	f000 fee2 	bl	8010080 <__any_on>
 800f2bc:	4682      	mov	sl, r0
 800f2be:	b1a8      	cbz	r0, 800f2ec <__gethex+0x1f8>
 800f2c0:	1e7b      	subs	r3, r7, #1
 800f2c2:	1159      	asrs	r1, r3, #5
 800f2c4:	f003 021f 	and.w	r2, r3, #31
 800f2c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f2cc:	f04f 0a01 	mov.w	sl, #1
 800f2d0:	fa0a f202 	lsl.w	r2, sl, r2
 800f2d4:	420a      	tst	r2, r1
 800f2d6:	d009      	beq.n	800f2ec <__gethex+0x1f8>
 800f2d8:	4553      	cmp	r3, sl
 800f2da:	dd05      	ble.n	800f2e8 <__gethex+0x1f4>
 800f2dc:	1eb9      	subs	r1, r7, #2
 800f2de:	4620      	mov	r0, r4
 800f2e0:	f000 fece 	bl	8010080 <__any_on>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	d145      	bne.n	800f374 <__gethex+0x280>
 800f2e8:	f04f 0a02 	mov.w	sl, #2
 800f2ec:	4639      	mov	r1, r7
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	f7ff fe98 	bl	800f024 <rshift>
 800f2f4:	443d      	add	r5, r7
 800f2f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f2fa:	42ab      	cmp	r3, r5
 800f2fc:	da4c      	bge.n	800f398 <__gethex+0x2a4>
 800f2fe:	ee18 0a10 	vmov	r0, s16
 800f302:	4621      	mov	r1, r4
 800f304:	f000 fa5c 	bl	800f7c0 <_Bfree>
 800f308:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f30a:	2300      	movs	r3, #0
 800f30c:	6013      	str	r3, [r2, #0]
 800f30e:	27a3      	movs	r7, #163	; 0xa3
 800f310:	e785      	b.n	800f21e <__gethex+0x12a>
 800f312:	1e73      	subs	r3, r6, #1
 800f314:	9a05      	ldr	r2, [sp, #20]
 800f316:	9303      	str	r3, [sp, #12]
 800f318:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d019      	beq.n	800f354 <__gethex+0x260>
 800f320:	f1bb 0f20 	cmp.w	fp, #32
 800f324:	d107      	bne.n	800f336 <__gethex+0x242>
 800f326:	9b02      	ldr	r3, [sp, #8]
 800f328:	9a00      	ldr	r2, [sp, #0]
 800f32a:	f843 2b04 	str.w	r2, [r3], #4
 800f32e:	9302      	str	r3, [sp, #8]
 800f330:	2300      	movs	r3, #0
 800f332:	9300      	str	r3, [sp, #0]
 800f334:	469b      	mov	fp, r3
 800f336:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f33a:	f7ff fec5 	bl	800f0c8 <__hexdig_fun>
 800f33e:	9b00      	ldr	r3, [sp, #0]
 800f340:	f000 000f 	and.w	r0, r0, #15
 800f344:	fa00 f00b 	lsl.w	r0, r0, fp
 800f348:	4303      	orrs	r3, r0
 800f34a:	9300      	str	r3, [sp, #0]
 800f34c:	f10b 0b04 	add.w	fp, fp, #4
 800f350:	9b03      	ldr	r3, [sp, #12]
 800f352:	e00d      	b.n	800f370 <__gethex+0x27c>
 800f354:	9b03      	ldr	r3, [sp, #12]
 800f356:	9a06      	ldr	r2, [sp, #24]
 800f358:	4413      	add	r3, r2
 800f35a:	42bb      	cmp	r3, r7
 800f35c:	d3e0      	bcc.n	800f320 <__gethex+0x22c>
 800f35e:	4618      	mov	r0, r3
 800f360:	9901      	ldr	r1, [sp, #4]
 800f362:	9307      	str	r3, [sp, #28]
 800f364:	4652      	mov	r2, sl
 800f366:	f001 f917 	bl	8010598 <strncmp>
 800f36a:	9b07      	ldr	r3, [sp, #28]
 800f36c:	2800      	cmp	r0, #0
 800f36e:	d1d7      	bne.n	800f320 <__gethex+0x22c>
 800f370:	461e      	mov	r6, r3
 800f372:	e78b      	b.n	800f28c <__gethex+0x198>
 800f374:	f04f 0a03 	mov.w	sl, #3
 800f378:	e7b8      	b.n	800f2ec <__gethex+0x1f8>
 800f37a:	da0a      	bge.n	800f392 <__gethex+0x29e>
 800f37c:	1a37      	subs	r7, r6, r0
 800f37e:	4621      	mov	r1, r4
 800f380:	ee18 0a10 	vmov	r0, s16
 800f384:	463a      	mov	r2, r7
 800f386:	f000 fc37 	bl	800fbf8 <__lshift>
 800f38a:	1bed      	subs	r5, r5, r7
 800f38c:	4604      	mov	r4, r0
 800f38e:	f100 0914 	add.w	r9, r0, #20
 800f392:	f04f 0a00 	mov.w	sl, #0
 800f396:	e7ae      	b.n	800f2f6 <__gethex+0x202>
 800f398:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f39c:	42a8      	cmp	r0, r5
 800f39e:	dd72      	ble.n	800f486 <__gethex+0x392>
 800f3a0:	1b45      	subs	r5, r0, r5
 800f3a2:	42ae      	cmp	r6, r5
 800f3a4:	dc36      	bgt.n	800f414 <__gethex+0x320>
 800f3a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f3aa:	2b02      	cmp	r3, #2
 800f3ac:	d02a      	beq.n	800f404 <__gethex+0x310>
 800f3ae:	2b03      	cmp	r3, #3
 800f3b0:	d02c      	beq.n	800f40c <__gethex+0x318>
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d11c      	bne.n	800f3f0 <__gethex+0x2fc>
 800f3b6:	42ae      	cmp	r6, r5
 800f3b8:	d11a      	bne.n	800f3f0 <__gethex+0x2fc>
 800f3ba:	2e01      	cmp	r6, #1
 800f3bc:	d112      	bne.n	800f3e4 <__gethex+0x2f0>
 800f3be:	9a04      	ldr	r2, [sp, #16]
 800f3c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f3c4:	6013      	str	r3, [r2, #0]
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	6123      	str	r3, [r4, #16]
 800f3ca:	f8c9 3000 	str.w	r3, [r9]
 800f3ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f3d0:	2762      	movs	r7, #98	; 0x62
 800f3d2:	601c      	str	r4, [r3, #0]
 800f3d4:	e723      	b.n	800f21e <__gethex+0x12a>
 800f3d6:	bf00      	nop
 800f3d8:	080116c8 	.word	0x080116c8
 800f3dc:	08011650 	.word	0x08011650
 800f3e0:	08011661 	.word	0x08011661
 800f3e4:	1e71      	subs	r1, r6, #1
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	f000 fe4a 	bl	8010080 <__any_on>
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	d1e6      	bne.n	800f3be <__gethex+0x2ca>
 800f3f0:	ee18 0a10 	vmov	r0, s16
 800f3f4:	4621      	mov	r1, r4
 800f3f6:	f000 f9e3 	bl	800f7c0 <_Bfree>
 800f3fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	6013      	str	r3, [r2, #0]
 800f400:	2750      	movs	r7, #80	; 0x50
 800f402:	e70c      	b.n	800f21e <__gethex+0x12a>
 800f404:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f406:	2b00      	cmp	r3, #0
 800f408:	d1f2      	bne.n	800f3f0 <__gethex+0x2fc>
 800f40a:	e7d8      	b.n	800f3be <__gethex+0x2ca>
 800f40c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d1d5      	bne.n	800f3be <__gethex+0x2ca>
 800f412:	e7ed      	b.n	800f3f0 <__gethex+0x2fc>
 800f414:	1e6f      	subs	r7, r5, #1
 800f416:	f1ba 0f00 	cmp.w	sl, #0
 800f41a:	d131      	bne.n	800f480 <__gethex+0x38c>
 800f41c:	b127      	cbz	r7, 800f428 <__gethex+0x334>
 800f41e:	4639      	mov	r1, r7
 800f420:	4620      	mov	r0, r4
 800f422:	f000 fe2d 	bl	8010080 <__any_on>
 800f426:	4682      	mov	sl, r0
 800f428:	117b      	asrs	r3, r7, #5
 800f42a:	2101      	movs	r1, #1
 800f42c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f430:	f007 071f 	and.w	r7, r7, #31
 800f434:	fa01 f707 	lsl.w	r7, r1, r7
 800f438:	421f      	tst	r7, r3
 800f43a:	4629      	mov	r1, r5
 800f43c:	4620      	mov	r0, r4
 800f43e:	bf18      	it	ne
 800f440:	f04a 0a02 	orrne.w	sl, sl, #2
 800f444:	1b76      	subs	r6, r6, r5
 800f446:	f7ff fded 	bl	800f024 <rshift>
 800f44a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f44e:	2702      	movs	r7, #2
 800f450:	f1ba 0f00 	cmp.w	sl, #0
 800f454:	d048      	beq.n	800f4e8 <__gethex+0x3f4>
 800f456:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f45a:	2b02      	cmp	r3, #2
 800f45c:	d015      	beq.n	800f48a <__gethex+0x396>
 800f45e:	2b03      	cmp	r3, #3
 800f460:	d017      	beq.n	800f492 <__gethex+0x39e>
 800f462:	2b01      	cmp	r3, #1
 800f464:	d109      	bne.n	800f47a <__gethex+0x386>
 800f466:	f01a 0f02 	tst.w	sl, #2
 800f46a:	d006      	beq.n	800f47a <__gethex+0x386>
 800f46c:	f8d9 0000 	ldr.w	r0, [r9]
 800f470:	ea4a 0a00 	orr.w	sl, sl, r0
 800f474:	f01a 0f01 	tst.w	sl, #1
 800f478:	d10e      	bne.n	800f498 <__gethex+0x3a4>
 800f47a:	f047 0710 	orr.w	r7, r7, #16
 800f47e:	e033      	b.n	800f4e8 <__gethex+0x3f4>
 800f480:	f04f 0a01 	mov.w	sl, #1
 800f484:	e7d0      	b.n	800f428 <__gethex+0x334>
 800f486:	2701      	movs	r7, #1
 800f488:	e7e2      	b.n	800f450 <__gethex+0x35c>
 800f48a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f48c:	f1c3 0301 	rsb	r3, r3, #1
 800f490:	9315      	str	r3, [sp, #84]	; 0x54
 800f492:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f494:	2b00      	cmp	r3, #0
 800f496:	d0f0      	beq.n	800f47a <__gethex+0x386>
 800f498:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f49c:	f104 0314 	add.w	r3, r4, #20
 800f4a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f4a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f4a8:	f04f 0c00 	mov.w	ip, #0
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4b2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f4b6:	d01c      	beq.n	800f4f2 <__gethex+0x3fe>
 800f4b8:	3201      	adds	r2, #1
 800f4ba:	6002      	str	r2, [r0, #0]
 800f4bc:	2f02      	cmp	r7, #2
 800f4be:	f104 0314 	add.w	r3, r4, #20
 800f4c2:	d13f      	bne.n	800f544 <__gethex+0x450>
 800f4c4:	f8d8 2000 	ldr.w	r2, [r8]
 800f4c8:	3a01      	subs	r2, #1
 800f4ca:	42b2      	cmp	r2, r6
 800f4cc:	d10a      	bne.n	800f4e4 <__gethex+0x3f0>
 800f4ce:	1171      	asrs	r1, r6, #5
 800f4d0:	2201      	movs	r2, #1
 800f4d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f4d6:	f006 061f 	and.w	r6, r6, #31
 800f4da:	fa02 f606 	lsl.w	r6, r2, r6
 800f4de:	421e      	tst	r6, r3
 800f4e0:	bf18      	it	ne
 800f4e2:	4617      	movne	r7, r2
 800f4e4:	f047 0720 	orr.w	r7, r7, #32
 800f4e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f4ea:	601c      	str	r4, [r3, #0]
 800f4ec:	9b04      	ldr	r3, [sp, #16]
 800f4ee:	601d      	str	r5, [r3, #0]
 800f4f0:	e695      	b.n	800f21e <__gethex+0x12a>
 800f4f2:	4299      	cmp	r1, r3
 800f4f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f4f8:	d8d8      	bhi.n	800f4ac <__gethex+0x3b8>
 800f4fa:	68a3      	ldr	r3, [r4, #8]
 800f4fc:	459b      	cmp	fp, r3
 800f4fe:	db19      	blt.n	800f534 <__gethex+0x440>
 800f500:	6861      	ldr	r1, [r4, #4]
 800f502:	ee18 0a10 	vmov	r0, s16
 800f506:	3101      	adds	r1, #1
 800f508:	f000 f91a 	bl	800f740 <_Balloc>
 800f50c:	4681      	mov	r9, r0
 800f50e:	b918      	cbnz	r0, 800f518 <__gethex+0x424>
 800f510:	4b1a      	ldr	r3, [pc, #104]	; (800f57c <__gethex+0x488>)
 800f512:	4602      	mov	r2, r0
 800f514:	2184      	movs	r1, #132	; 0x84
 800f516:	e6a8      	b.n	800f26a <__gethex+0x176>
 800f518:	6922      	ldr	r2, [r4, #16]
 800f51a:	3202      	adds	r2, #2
 800f51c:	f104 010c 	add.w	r1, r4, #12
 800f520:	0092      	lsls	r2, r2, #2
 800f522:	300c      	adds	r0, #12
 800f524:	f7fd f9a0 	bl	800c868 <memcpy>
 800f528:	4621      	mov	r1, r4
 800f52a:	ee18 0a10 	vmov	r0, s16
 800f52e:	f000 f947 	bl	800f7c0 <_Bfree>
 800f532:	464c      	mov	r4, r9
 800f534:	6923      	ldr	r3, [r4, #16]
 800f536:	1c5a      	adds	r2, r3, #1
 800f538:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f53c:	6122      	str	r2, [r4, #16]
 800f53e:	2201      	movs	r2, #1
 800f540:	615a      	str	r2, [r3, #20]
 800f542:	e7bb      	b.n	800f4bc <__gethex+0x3c8>
 800f544:	6922      	ldr	r2, [r4, #16]
 800f546:	455a      	cmp	r2, fp
 800f548:	dd0b      	ble.n	800f562 <__gethex+0x46e>
 800f54a:	2101      	movs	r1, #1
 800f54c:	4620      	mov	r0, r4
 800f54e:	f7ff fd69 	bl	800f024 <rshift>
 800f552:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f556:	3501      	adds	r5, #1
 800f558:	42ab      	cmp	r3, r5
 800f55a:	f6ff aed0 	blt.w	800f2fe <__gethex+0x20a>
 800f55e:	2701      	movs	r7, #1
 800f560:	e7c0      	b.n	800f4e4 <__gethex+0x3f0>
 800f562:	f016 061f 	ands.w	r6, r6, #31
 800f566:	d0fa      	beq.n	800f55e <__gethex+0x46a>
 800f568:	4453      	add	r3, sl
 800f56a:	f1c6 0620 	rsb	r6, r6, #32
 800f56e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f572:	f000 f9d7 	bl	800f924 <__hi0bits>
 800f576:	42b0      	cmp	r0, r6
 800f578:	dbe7      	blt.n	800f54a <__gethex+0x456>
 800f57a:	e7f0      	b.n	800f55e <__gethex+0x46a>
 800f57c:	08011650 	.word	0x08011650

0800f580 <L_shift>:
 800f580:	f1c2 0208 	rsb	r2, r2, #8
 800f584:	0092      	lsls	r2, r2, #2
 800f586:	b570      	push	{r4, r5, r6, lr}
 800f588:	f1c2 0620 	rsb	r6, r2, #32
 800f58c:	6843      	ldr	r3, [r0, #4]
 800f58e:	6804      	ldr	r4, [r0, #0]
 800f590:	fa03 f506 	lsl.w	r5, r3, r6
 800f594:	432c      	orrs	r4, r5
 800f596:	40d3      	lsrs	r3, r2
 800f598:	6004      	str	r4, [r0, #0]
 800f59a:	f840 3f04 	str.w	r3, [r0, #4]!
 800f59e:	4288      	cmp	r0, r1
 800f5a0:	d3f4      	bcc.n	800f58c <L_shift+0xc>
 800f5a2:	bd70      	pop	{r4, r5, r6, pc}

0800f5a4 <__match>:
 800f5a4:	b530      	push	{r4, r5, lr}
 800f5a6:	6803      	ldr	r3, [r0, #0]
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5ae:	b914      	cbnz	r4, 800f5b6 <__match+0x12>
 800f5b0:	6003      	str	r3, [r0, #0]
 800f5b2:	2001      	movs	r0, #1
 800f5b4:	bd30      	pop	{r4, r5, pc}
 800f5b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f5be:	2d19      	cmp	r5, #25
 800f5c0:	bf98      	it	ls
 800f5c2:	3220      	addls	r2, #32
 800f5c4:	42a2      	cmp	r2, r4
 800f5c6:	d0f0      	beq.n	800f5aa <__match+0x6>
 800f5c8:	2000      	movs	r0, #0
 800f5ca:	e7f3      	b.n	800f5b4 <__match+0x10>

0800f5cc <__hexnan>:
 800f5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d0:	680b      	ldr	r3, [r1, #0]
 800f5d2:	115e      	asrs	r6, r3, #5
 800f5d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f5d8:	f013 031f 	ands.w	r3, r3, #31
 800f5dc:	b087      	sub	sp, #28
 800f5de:	bf18      	it	ne
 800f5e0:	3604      	addne	r6, #4
 800f5e2:	2500      	movs	r5, #0
 800f5e4:	1f37      	subs	r7, r6, #4
 800f5e6:	4690      	mov	r8, r2
 800f5e8:	6802      	ldr	r2, [r0, #0]
 800f5ea:	9301      	str	r3, [sp, #4]
 800f5ec:	4682      	mov	sl, r0
 800f5ee:	f846 5c04 	str.w	r5, [r6, #-4]
 800f5f2:	46b9      	mov	r9, r7
 800f5f4:	463c      	mov	r4, r7
 800f5f6:	9502      	str	r5, [sp, #8]
 800f5f8:	46ab      	mov	fp, r5
 800f5fa:	7851      	ldrb	r1, [r2, #1]
 800f5fc:	1c53      	adds	r3, r2, #1
 800f5fe:	9303      	str	r3, [sp, #12]
 800f600:	b341      	cbz	r1, 800f654 <__hexnan+0x88>
 800f602:	4608      	mov	r0, r1
 800f604:	9205      	str	r2, [sp, #20]
 800f606:	9104      	str	r1, [sp, #16]
 800f608:	f7ff fd5e 	bl	800f0c8 <__hexdig_fun>
 800f60c:	2800      	cmp	r0, #0
 800f60e:	d14f      	bne.n	800f6b0 <__hexnan+0xe4>
 800f610:	9904      	ldr	r1, [sp, #16]
 800f612:	9a05      	ldr	r2, [sp, #20]
 800f614:	2920      	cmp	r1, #32
 800f616:	d818      	bhi.n	800f64a <__hexnan+0x7e>
 800f618:	9b02      	ldr	r3, [sp, #8]
 800f61a:	459b      	cmp	fp, r3
 800f61c:	dd13      	ble.n	800f646 <__hexnan+0x7a>
 800f61e:	454c      	cmp	r4, r9
 800f620:	d206      	bcs.n	800f630 <__hexnan+0x64>
 800f622:	2d07      	cmp	r5, #7
 800f624:	dc04      	bgt.n	800f630 <__hexnan+0x64>
 800f626:	462a      	mov	r2, r5
 800f628:	4649      	mov	r1, r9
 800f62a:	4620      	mov	r0, r4
 800f62c:	f7ff ffa8 	bl	800f580 <L_shift>
 800f630:	4544      	cmp	r4, r8
 800f632:	d950      	bls.n	800f6d6 <__hexnan+0x10a>
 800f634:	2300      	movs	r3, #0
 800f636:	f1a4 0904 	sub.w	r9, r4, #4
 800f63a:	f844 3c04 	str.w	r3, [r4, #-4]
 800f63e:	f8cd b008 	str.w	fp, [sp, #8]
 800f642:	464c      	mov	r4, r9
 800f644:	461d      	mov	r5, r3
 800f646:	9a03      	ldr	r2, [sp, #12]
 800f648:	e7d7      	b.n	800f5fa <__hexnan+0x2e>
 800f64a:	2929      	cmp	r1, #41	; 0x29
 800f64c:	d156      	bne.n	800f6fc <__hexnan+0x130>
 800f64e:	3202      	adds	r2, #2
 800f650:	f8ca 2000 	str.w	r2, [sl]
 800f654:	f1bb 0f00 	cmp.w	fp, #0
 800f658:	d050      	beq.n	800f6fc <__hexnan+0x130>
 800f65a:	454c      	cmp	r4, r9
 800f65c:	d206      	bcs.n	800f66c <__hexnan+0xa0>
 800f65e:	2d07      	cmp	r5, #7
 800f660:	dc04      	bgt.n	800f66c <__hexnan+0xa0>
 800f662:	462a      	mov	r2, r5
 800f664:	4649      	mov	r1, r9
 800f666:	4620      	mov	r0, r4
 800f668:	f7ff ff8a 	bl	800f580 <L_shift>
 800f66c:	4544      	cmp	r4, r8
 800f66e:	d934      	bls.n	800f6da <__hexnan+0x10e>
 800f670:	f1a8 0204 	sub.w	r2, r8, #4
 800f674:	4623      	mov	r3, r4
 800f676:	f853 1b04 	ldr.w	r1, [r3], #4
 800f67a:	f842 1f04 	str.w	r1, [r2, #4]!
 800f67e:	429f      	cmp	r7, r3
 800f680:	d2f9      	bcs.n	800f676 <__hexnan+0xaa>
 800f682:	1b3b      	subs	r3, r7, r4
 800f684:	f023 0303 	bic.w	r3, r3, #3
 800f688:	3304      	adds	r3, #4
 800f68a:	3401      	adds	r4, #1
 800f68c:	3e03      	subs	r6, #3
 800f68e:	42b4      	cmp	r4, r6
 800f690:	bf88      	it	hi
 800f692:	2304      	movhi	r3, #4
 800f694:	4443      	add	r3, r8
 800f696:	2200      	movs	r2, #0
 800f698:	f843 2b04 	str.w	r2, [r3], #4
 800f69c:	429f      	cmp	r7, r3
 800f69e:	d2fb      	bcs.n	800f698 <__hexnan+0xcc>
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	b91b      	cbnz	r3, 800f6ac <__hexnan+0xe0>
 800f6a4:	4547      	cmp	r7, r8
 800f6a6:	d127      	bne.n	800f6f8 <__hexnan+0x12c>
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	603b      	str	r3, [r7, #0]
 800f6ac:	2005      	movs	r0, #5
 800f6ae:	e026      	b.n	800f6fe <__hexnan+0x132>
 800f6b0:	3501      	adds	r5, #1
 800f6b2:	2d08      	cmp	r5, #8
 800f6b4:	f10b 0b01 	add.w	fp, fp, #1
 800f6b8:	dd06      	ble.n	800f6c8 <__hexnan+0xfc>
 800f6ba:	4544      	cmp	r4, r8
 800f6bc:	d9c3      	bls.n	800f646 <__hexnan+0x7a>
 800f6be:	2300      	movs	r3, #0
 800f6c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f6c4:	2501      	movs	r5, #1
 800f6c6:	3c04      	subs	r4, #4
 800f6c8:	6822      	ldr	r2, [r4, #0]
 800f6ca:	f000 000f 	and.w	r0, r0, #15
 800f6ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f6d2:	6022      	str	r2, [r4, #0]
 800f6d4:	e7b7      	b.n	800f646 <__hexnan+0x7a>
 800f6d6:	2508      	movs	r5, #8
 800f6d8:	e7b5      	b.n	800f646 <__hexnan+0x7a>
 800f6da:	9b01      	ldr	r3, [sp, #4]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d0df      	beq.n	800f6a0 <__hexnan+0xd4>
 800f6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e4:	f1c3 0320 	rsb	r3, r3, #32
 800f6e8:	fa22 f303 	lsr.w	r3, r2, r3
 800f6ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f6f0:	401a      	ands	r2, r3
 800f6f2:	f846 2c04 	str.w	r2, [r6, #-4]
 800f6f6:	e7d3      	b.n	800f6a0 <__hexnan+0xd4>
 800f6f8:	3f04      	subs	r7, #4
 800f6fa:	e7d1      	b.n	800f6a0 <__hexnan+0xd4>
 800f6fc:	2004      	movs	r0, #4
 800f6fe:	b007      	add	sp, #28
 800f700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f704 <_localeconv_r>:
 800f704:	4800      	ldr	r0, [pc, #0]	; (800f708 <_localeconv_r+0x4>)
 800f706:	4770      	bx	lr
 800f708:	200003b4 	.word	0x200003b4

0800f70c <malloc>:
 800f70c:	4b02      	ldr	r3, [pc, #8]	; (800f718 <malloc+0xc>)
 800f70e:	4601      	mov	r1, r0
 800f710:	6818      	ldr	r0, [r3, #0]
 800f712:	f000 bd59 	b.w	80101c8 <_malloc_r>
 800f716:	bf00      	nop
 800f718:	2000025c 	.word	0x2000025c

0800f71c <__ascii_mbtowc>:
 800f71c:	b082      	sub	sp, #8
 800f71e:	b901      	cbnz	r1, 800f722 <__ascii_mbtowc+0x6>
 800f720:	a901      	add	r1, sp, #4
 800f722:	b142      	cbz	r2, 800f736 <__ascii_mbtowc+0x1a>
 800f724:	b14b      	cbz	r3, 800f73a <__ascii_mbtowc+0x1e>
 800f726:	7813      	ldrb	r3, [r2, #0]
 800f728:	600b      	str	r3, [r1, #0]
 800f72a:	7812      	ldrb	r2, [r2, #0]
 800f72c:	1e10      	subs	r0, r2, #0
 800f72e:	bf18      	it	ne
 800f730:	2001      	movne	r0, #1
 800f732:	b002      	add	sp, #8
 800f734:	4770      	bx	lr
 800f736:	4610      	mov	r0, r2
 800f738:	e7fb      	b.n	800f732 <__ascii_mbtowc+0x16>
 800f73a:	f06f 0001 	mvn.w	r0, #1
 800f73e:	e7f8      	b.n	800f732 <__ascii_mbtowc+0x16>

0800f740 <_Balloc>:
 800f740:	b570      	push	{r4, r5, r6, lr}
 800f742:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f744:	4604      	mov	r4, r0
 800f746:	460d      	mov	r5, r1
 800f748:	b976      	cbnz	r6, 800f768 <_Balloc+0x28>
 800f74a:	2010      	movs	r0, #16
 800f74c:	f7ff ffde 	bl	800f70c <malloc>
 800f750:	4602      	mov	r2, r0
 800f752:	6260      	str	r0, [r4, #36]	; 0x24
 800f754:	b920      	cbnz	r0, 800f760 <_Balloc+0x20>
 800f756:	4b18      	ldr	r3, [pc, #96]	; (800f7b8 <_Balloc+0x78>)
 800f758:	4818      	ldr	r0, [pc, #96]	; (800f7bc <_Balloc+0x7c>)
 800f75a:	2166      	movs	r1, #102	; 0x66
 800f75c:	f000 ff3e 	bl	80105dc <__assert_func>
 800f760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f764:	6006      	str	r6, [r0, #0]
 800f766:	60c6      	str	r6, [r0, #12]
 800f768:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f76a:	68f3      	ldr	r3, [r6, #12]
 800f76c:	b183      	cbz	r3, 800f790 <_Balloc+0x50>
 800f76e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f770:	68db      	ldr	r3, [r3, #12]
 800f772:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f776:	b9b8      	cbnz	r0, 800f7a8 <_Balloc+0x68>
 800f778:	2101      	movs	r1, #1
 800f77a:	fa01 f605 	lsl.w	r6, r1, r5
 800f77e:	1d72      	adds	r2, r6, #5
 800f780:	0092      	lsls	r2, r2, #2
 800f782:	4620      	mov	r0, r4
 800f784:	f000 fc9d 	bl	80100c2 <_calloc_r>
 800f788:	b160      	cbz	r0, 800f7a4 <_Balloc+0x64>
 800f78a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f78e:	e00e      	b.n	800f7ae <_Balloc+0x6e>
 800f790:	2221      	movs	r2, #33	; 0x21
 800f792:	2104      	movs	r1, #4
 800f794:	4620      	mov	r0, r4
 800f796:	f000 fc94 	bl	80100c2 <_calloc_r>
 800f79a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f79c:	60f0      	str	r0, [r6, #12]
 800f79e:	68db      	ldr	r3, [r3, #12]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d1e4      	bne.n	800f76e <_Balloc+0x2e>
 800f7a4:	2000      	movs	r0, #0
 800f7a6:	bd70      	pop	{r4, r5, r6, pc}
 800f7a8:	6802      	ldr	r2, [r0, #0]
 800f7aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f7b4:	e7f7      	b.n	800f7a6 <_Balloc+0x66>
 800f7b6:	bf00      	nop
 800f7b8:	080115de 	.word	0x080115de
 800f7bc:	080116dc 	.word	0x080116dc

0800f7c0 <_Bfree>:
 800f7c0:	b570      	push	{r4, r5, r6, lr}
 800f7c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f7c4:	4605      	mov	r5, r0
 800f7c6:	460c      	mov	r4, r1
 800f7c8:	b976      	cbnz	r6, 800f7e8 <_Bfree+0x28>
 800f7ca:	2010      	movs	r0, #16
 800f7cc:	f7ff ff9e 	bl	800f70c <malloc>
 800f7d0:	4602      	mov	r2, r0
 800f7d2:	6268      	str	r0, [r5, #36]	; 0x24
 800f7d4:	b920      	cbnz	r0, 800f7e0 <_Bfree+0x20>
 800f7d6:	4b09      	ldr	r3, [pc, #36]	; (800f7fc <_Bfree+0x3c>)
 800f7d8:	4809      	ldr	r0, [pc, #36]	; (800f800 <_Bfree+0x40>)
 800f7da:	218a      	movs	r1, #138	; 0x8a
 800f7dc:	f000 fefe 	bl	80105dc <__assert_func>
 800f7e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7e4:	6006      	str	r6, [r0, #0]
 800f7e6:	60c6      	str	r6, [r0, #12]
 800f7e8:	b13c      	cbz	r4, 800f7fa <_Bfree+0x3a>
 800f7ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f7ec:	6862      	ldr	r2, [r4, #4]
 800f7ee:	68db      	ldr	r3, [r3, #12]
 800f7f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f7f4:	6021      	str	r1, [r4, #0]
 800f7f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f7fa:	bd70      	pop	{r4, r5, r6, pc}
 800f7fc:	080115de 	.word	0x080115de
 800f800:	080116dc 	.word	0x080116dc

0800f804 <__multadd>:
 800f804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f808:	690d      	ldr	r5, [r1, #16]
 800f80a:	4607      	mov	r7, r0
 800f80c:	460c      	mov	r4, r1
 800f80e:	461e      	mov	r6, r3
 800f810:	f101 0c14 	add.w	ip, r1, #20
 800f814:	2000      	movs	r0, #0
 800f816:	f8dc 3000 	ldr.w	r3, [ip]
 800f81a:	b299      	uxth	r1, r3
 800f81c:	fb02 6101 	mla	r1, r2, r1, r6
 800f820:	0c1e      	lsrs	r6, r3, #16
 800f822:	0c0b      	lsrs	r3, r1, #16
 800f824:	fb02 3306 	mla	r3, r2, r6, r3
 800f828:	b289      	uxth	r1, r1
 800f82a:	3001      	adds	r0, #1
 800f82c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f830:	4285      	cmp	r5, r0
 800f832:	f84c 1b04 	str.w	r1, [ip], #4
 800f836:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f83a:	dcec      	bgt.n	800f816 <__multadd+0x12>
 800f83c:	b30e      	cbz	r6, 800f882 <__multadd+0x7e>
 800f83e:	68a3      	ldr	r3, [r4, #8]
 800f840:	42ab      	cmp	r3, r5
 800f842:	dc19      	bgt.n	800f878 <__multadd+0x74>
 800f844:	6861      	ldr	r1, [r4, #4]
 800f846:	4638      	mov	r0, r7
 800f848:	3101      	adds	r1, #1
 800f84a:	f7ff ff79 	bl	800f740 <_Balloc>
 800f84e:	4680      	mov	r8, r0
 800f850:	b928      	cbnz	r0, 800f85e <__multadd+0x5a>
 800f852:	4602      	mov	r2, r0
 800f854:	4b0c      	ldr	r3, [pc, #48]	; (800f888 <__multadd+0x84>)
 800f856:	480d      	ldr	r0, [pc, #52]	; (800f88c <__multadd+0x88>)
 800f858:	21b5      	movs	r1, #181	; 0xb5
 800f85a:	f000 febf 	bl	80105dc <__assert_func>
 800f85e:	6922      	ldr	r2, [r4, #16]
 800f860:	3202      	adds	r2, #2
 800f862:	f104 010c 	add.w	r1, r4, #12
 800f866:	0092      	lsls	r2, r2, #2
 800f868:	300c      	adds	r0, #12
 800f86a:	f7fc fffd 	bl	800c868 <memcpy>
 800f86e:	4621      	mov	r1, r4
 800f870:	4638      	mov	r0, r7
 800f872:	f7ff ffa5 	bl	800f7c0 <_Bfree>
 800f876:	4644      	mov	r4, r8
 800f878:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f87c:	3501      	adds	r5, #1
 800f87e:	615e      	str	r6, [r3, #20]
 800f880:	6125      	str	r5, [r4, #16]
 800f882:	4620      	mov	r0, r4
 800f884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f888:	08011650 	.word	0x08011650
 800f88c:	080116dc 	.word	0x080116dc

0800f890 <__s2b>:
 800f890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f894:	460c      	mov	r4, r1
 800f896:	4615      	mov	r5, r2
 800f898:	461f      	mov	r7, r3
 800f89a:	2209      	movs	r2, #9
 800f89c:	3308      	adds	r3, #8
 800f89e:	4606      	mov	r6, r0
 800f8a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8a4:	2100      	movs	r1, #0
 800f8a6:	2201      	movs	r2, #1
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	db09      	blt.n	800f8c0 <__s2b+0x30>
 800f8ac:	4630      	mov	r0, r6
 800f8ae:	f7ff ff47 	bl	800f740 <_Balloc>
 800f8b2:	b940      	cbnz	r0, 800f8c6 <__s2b+0x36>
 800f8b4:	4602      	mov	r2, r0
 800f8b6:	4b19      	ldr	r3, [pc, #100]	; (800f91c <__s2b+0x8c>)
 800f8b8:	4819      	ldr	r0, [pc, #100]	; (800f920 <__s2b+0x90>)
 800f8ba:	21ce      	movs	r1, #206	; 0xce
 800f8bc:	f000 fe8e 	bl	80105dc <__assert_func>
 800f8c0:	0052      	lsls	r2, r2, #1
 800f8c2:	3101      	adds	r1, #1
 800f8c4:	e7f0      	b.n	800f8a8 <__s2b+0x18>
 800f8c6:	9b08      	ldr	r3, [sp, #32]
 800f8c8:	6143      	str	r3, [r0, #20]
 800f8ca:	2d09      	cmp	r5, #9
 800f8cc:	f04f 0301 	mov.w	r3, #1
 800f8d0:	6103      	str	r3, [r0, #16]
 800f8d2:	dd16      	ble.n	800f902 <__s2b+0x72>
 800f8d4:	f104 0909 	add.w	r9, r4, #9
 800f8d8:	46c8      	mov	r8, r9
 800f8da:	442c      	add	r4, r5
 800f8dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f8e0:	4601      	mov	r1, r0
 800f8e2:	3b30      	subs	r3, #48	; 0x30
 800f8e4:	220a      	movs	r2, #10
 800f8e6:	4630      	mov	r0, r6
 800f8e8:	f7ff ff8c 	bl	800f804 <__multadd>
 800f8ec:	45a0      	cmp	r8, r4
 800f8ee:	d1f5      	bne.n	800f8dc <__s2b+0x4c>
 800f8f0:	f1a5 0408 	sub.w	r4, r5, #8
 800f8f4:	444c      	add	r4, r9
 800f8f6:	1b2d      	subs	r5, r5, r4
 800f8f8:	1963      	adds	r3, r4, r5
 800f8fa:	42bb      	cmp	r3, r7
 800f8fc:	db04      	blt.n	800f908 <__s2b+0x78>
 800f8fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f902:	340a      	adds	r4, #10
 800f904:	2509      	movs	r5, #9
 800f906:	e7f6      	b.n	800f8f6 <__s2b+0x66>
 800f908:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f90c:	4601      	mov	r1, r0
 800f90e:	3b30      	subs	r3, #48	; 0x30
 800f910:	220a      	movs	r2, #10
 800f912:	4630      	mov	r0, r6
 800f914:	f7ff ff76 	bl	800f804 <__multadd>
 800f918:	e7ee      	b.n	800f8f8 <__s2b+0x68>
 800f91a:	bf00      	nop
 800f91c:	08011650 	.word	0x08011650
 800f920:	080116dc 	.word	0x080116dc

0800f924 <__hi0bits>:
 800f924:	0c03      	lsrs	r3, r0, #16
 800f926:	041b      	lsls	r3, r3, #16
 800f928:	b9d3      	cbnz	r3, 800f960 <__hi0bits+0x3c>
 800f92a:	0400      	lsls	r0, r0, #16
 800f92c:	2310      	movs	r3, #16
 800f92e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f932:	bf04      	itt	eq
 800f934:	0200      	lsleq	r0, r0, #8
 800f936:	3308      	addeq	r3, #8
 800f938:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f93c:	bf04      	itt	eq
 800f93e:	0100      	lsleq	r0, r0, #4
 800f940:	3304      	addeq	r3, #4
 800f942:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f946:	bf04      	itt	eq
 800f948:	0080      	lsleq	r0, r0, #2
 800f94a:	3302      	addeq	r3, #2
 800f94c:	2800      	cmp	r0, #0
 800f94e:	db05      	blt.n	800f95c <__hi0bits+0x38>
 800f950:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f954:	f103 0301 	add.w	r3, r3, #1
 800f958:	bf08      	it	eq
 800f95a:	2320      	moveq	r3, #32
 800f95c:	4618      	mov	r0, r3
 800f95e:	4770      	bx	lr
 800f960:	2300      	movs	r3, #0
 800f962:	e7e4      	b.n	800f92e <__hi0bits+0xa>

0800f964 <__lo0bits>:
 800f964:	6803      	ldr	r3, [r0, #0]
 800f966:	f013 0207 	ands.w	r2, r3, #7
 800f96a:	4601      	mov	r1, r0
 800f96c:	d00b      	beq.n	800f986 <__lo0bits+0x22>
 800f96e:	07da      	lsls	r2, r3, #31
 800f970:	d423      	bmi.n	800f9ba <__lo0bits+0x56>
 800f972:	0798      	lsls	r0, r3, #30
 800f974:	bf49      	itett	mi
 800f976:	085b      	lsrmi	r3, r3, #1
 800f978:	089b      	lsrpl	r3, r3, #2
 800f97a:	2001      	movmi	r0, #1
 800f97c:	600b      	strmi	r3, [r1, #0]
 800f97e:	bf5c      	itt	pl
 800f980:	600b      	strpl	r3, [r1, #0]
 800f982:	2002      	movpl	r0, #2
 800f984:	4770      	bx	lr
 800f986:	b298      	uxth	r0, r3
 800f988:	b9a8      	cbnz	r0, 800f9b6 <__lo0bits+0x52>
 800f98a:	0c1b      	lsrs	r3, r3, #16
 800f98c:	2010      	movs	r0, #16
 800f98e:	b2da      	uxtb	r2, r3
 800f990:	b90a      	cbnz	r2, 800f996 <__lo0bits+0x32>
 800f992:	3008      	adds	r0, #8
 800f994:	0a1b      	lsrs	r3, r3, #8
 800f996:	071a      	lsls	r2, r3, #28
 800f998:	bf04      	itt	eq
 800f99a:	091b      	lsreq	r3, r3, #4
 800f99c:	3004      	addeq	r0, #4
 800f99e:	079a      	lsls	r2, r3, #30
 800f9a0:	bf04      	itt	eq
 800f9a2:	089b      	lsreq	r3, r3, #2
 800f9a4:	3002      	addeq	r0, #2
 800f9a6:	07da      	lsls	r2, r3, #31
 800f9a8:	d403      	bmi.n	800f9b2 <__lo0bits+0x4e>
 800f9aa:	085b      	lsrs	r3, r3, #1
 800f9ac:	f100 0001 	add.w	r0, r0, #1
 800f9b0:	d005      	beq.n	800f9be <__lo0bits+0x5a>
 800f9b2:	600b      	str	r3, [r1, #0]
 800f9b4:	4770      	bx	lr
 800f9b6:	4610      	mov	r0, r2
 800f9b8:	e7e9      	b.n	800f98e <__lo0bits+0x2a>
 800f9ba:	2000      	movs	r0, #0
 800f9bc:	4770      	bx	lr
 800f9be:	2020      	movs	r0, #32
 800f9c0:	4770      	bx	lr
	...

0800f9c4 <__i2b>:
 800f9c4:	b510      	push	{r4, lr}
 800f9c6:	460c      	mov	r4, r1
 800f9c8:	2101      	movs	r1, #1
 800f9ca:	f7ff feb9 	bl	800f740 <_Balloc>
 800f9ce:	4602      	mov	r2, r0
 800f9d0:	b928      	cbnz	r0, 800f9de <__i2b+0x1a>
 800f9d2:	4b05      	ldr	r3, [pc, #20]	; (800f9e8 <__i2b+0x24>)
 800f9d4:	4805      	ldr	r0, [pc, #20]	; (800f9ec <__i2b+0x28>)
 800f9d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f9da:	f000 fdff 	bl	80105dc <__assert_func>
 800f9de:	2301      	movs	r3, #1
 800f9e0:	6144      	str	r4, [r0, #20]
 800f9e2:	6103      	str	r3, [r0, #16]
 800f9e4:	bd10      	pop	{r4, pc}
 800f9e6:	bf00      	nop
 800f9e8:	08011650 	.word	0x08011650
 800f9ec:	080116dc 	.word	0x080116dc

0800f9f0 <__multiply>:
 800f9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f4:	4691      	mov	r9, r2
 800f9f6:	690a      	ldr	r2, [r1, #16]
 800f9f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	bfb8      	it	lt
 800fa00:	460b      	movlt	r3, r1
 800fa02:	460c      	mov	r4, r1
 800fa04:	bfbc      	itt	lt
 800fa06:	464c      	movlt	r4, r9
 800fa08:	4699      	movlt	r9, r3
 800fa0a:	6927      	ldr	r7, [r4, #16]
 800fa0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fa10:	68a3      	ldr	r3, [r4, #8]
 800fa12:	6861      	ldr	r1, [r4, #4]
 800fa14:	eb07 060a 	add.w	r6, r7, sl
 800fa18:	42b3      	cmp	r3, r6
 800fa1a:	b085      	sub	sp, #20
 800fa1c:	bfb8      	it	lt
 800fa1e:	3101      	addlt	r1, #1
 800fa20:	f7ff fe8e 	bl	800f740 <_Balloc>
 800fa24:	b930      	cbnz	r0, 800fa34 <__multiply+0x44>
 800fa26:	4602      	mov	r2, r0
 800fa28:	4b44      	ldr	r3, [pc, #272]	; (800fb3c <__multiply+0x14c>)
 800fa2a:	4845      	ldr	r0, [pc, #276]	; (800fb40 <__multiply+0x150>)
 800fa2c:	f240 115d 	movw	r1, #349	; 0x15d
 800fa30:	f000 fdd4 	bl	80105dc <__assert_func>
 800fa34:	f100 0514 	add.w	r5, r0, #20
 800fa38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fa3c:	462b      	mov	r3, r5
 800fa3e:	2200      	movs	r2, #0
 800fa40:	4543      	cmp	r3, r8
 800fa42:	d321      	bcc.n	800fa88 <__multiply+0x98>
 800fa44:	f104 0314 	add.w	r3, r4, #20
 800fa48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fa4c:	f109 0314 	add.w	r3, r9, #20
 800fa50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fa54:	9202      	str	r2, [sp, #8]
 800fa56:	1b3a      	subs	r2, r7, r4
 800fa58:	3a15      	subs	r2, #21
 800fa5a:	f022 0203 	bic.w	r2, r2, #3
 800fa5e:	3204      	adds	r2, #4
 800fa60:	f104 0115 	add.w	r1, r4, #21
 800fa64:	428f      	cmp	r7, r1
 800fa66:	bf38      	it	cc
 800fa68:	2204      	movcc	r2, #4
 800fa6a:	9201      	str	r2, [sp, #4]
 800fa6c:	9a02      	ldr	r2, [sp, #8]
 800fa6e:	9303      	str	r3, [sp, #12]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d80c      	bhi.n	800fa8e <__multiply+0x9e>
 800fa74:	2e00      	cmp	r6, #0
 800fa76:	dd03      	ble.n	800fa80 <__multiply+0x90>
 800fa78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d05a      	beq.n	800fb36 <__multiply+0x146>
 800fa80:	6106      	str	r6, [r0, #16]
 800fa82:	b005      	add	sp, #20
 800fa84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa88:	f843 2b04 	str.w	r2, [r3], #4
 800fa8c:	e7d8      	b.n	800fa40 <__multiply+0x50>
 800fa8e:	f8b3 a000 	ldrh.w	sl, [r3]
 800fa92:	f1ba 0f00 	cmp.w	sl, #0
 800fa96:	d024      	beq.n	800fae2 <__multiply+0xf2>
 800fa98:	f104 0e14 	add.w	lr, r4, #20
 800fa9c:	46a9      	mov	r9, r5
 800fa9e:	f04f 0c00 	mov.w	ip, #0
 800faa2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800faa6:	f8d9 1000 	ldr.w	r1, [r9]
 800faaa:	fa1f fb82 	uxth.w	fp, r2
 800faae:	b289      	uxth	r1, r1
 800fab0:	fb0a 110b 	mla	r1, sl, fp, r1
 800fab4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fab8:	f8d9 2000 	ldr.w	r2, [r9]
 800fabc:	4461      	add	r1, ip
 800fabe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fac2:	fb0a c20b 	mla	r2, sl, fp, ip
 800fac6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800faca:	b289      	uxth	r1, r1
 800facc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fad0:	4577      	cmp	r7, lr
 800fad2:	f849 1b04 	str.w	r1, [r9], #4
 800fad6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fada:	d8e2      	bhi.n	800faa2 <__multiply+0xb2>
 800fadc:	9a01      	ldr	r2, [sp, #4]
 800fade:	f845 c002 	str.w	ip, [r5, r2]
 800fae2:	9a03      	ldr	r2, [sp, #12]
 800fae4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fae8:	3304      	adds	r3, #4
 800faea:	f1b9 0f00 	cmp.w	r9, #0
 800faee:	d020      	beq.n	800fb32 <__multiply+0x142>
 800faf0:	6829      	ldr	r1, [r5, #0]
 800faf2:	f104 0c14 	add.w	ip, r4, #20
 800faf6:	46ae      	mov	lr, r5
 800faf8:	f04f 0a00 	mov.w	sl, #0
 800fafc:	f8bc b000 	ldrh.w	fp, [ip]
 800fb00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fb04:	fb09 220b 	mla	r2, r9, fp, r2
 800fb08:	4492      	add	sl, r2
 800fb0a:	b289      	uxth	r1, r1
 800fb0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fb10:	f84e 1b04 	str.w	r1, [lr], #4
 800fb14:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fb18:	f8be 1000 	ldrh.w	r1, [lr]
 800fb1c:	0c12      	lsrs	r2, r2, #16
 800fb1e:	fb09 1102 	mla	r1, r9, r2, r1
 800fb22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fb26:	4567      	cmp	r7, ip
 800fb28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fb2c:	d8e6      	bhi.n	800fafc <__multiply+0x10c>
 800fb2e:	9a01      	ldr	r2, [sp, #4]
 800fb30:	50a9      	str	r1, [r5, r2]
 800fb32:	3504      	adds	r5, #4
 800fb34:	e79a      	b.n	800fa6c <__multiply+0x7c>
 800fb36:	3e01      	subs	r6, #1
 800fb38:	e79c      	b.n	800fa74 <__multiply+0x84>
 800fb3a:	bf00      	nop
 800fb3c:	08011650 	.word	0x08011650
 800fb40:	080116dc 	.word	0x080116dc

0800fb44 <__pow5mult>:
 800fb44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb48:	4615      	mov	r5, r2
 800fb4a:	f012 0203 	ands.w	r2, r2, #3
 800fb4e:	4606      	mov	r6, r0
 800fb50:	460f      	mov	r7, r1
 800fb52:	d007      	beq.n	800fb64 <__pow5mult+0x20>
 800fb54:	4c25      	ldr	r4, [pc, #148]	; (800fbec <__pow5mult+0xa8>)
 800fb56:	3a01      	subs	r2, #1
 800fb58:	2300      	movs	r3, #0
 800fb5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb5e:	f7ff fe51 	bl	800f804 <__multadd>
 800fb62:	4607      	mov	r7, r0
 800fb64:	10ad      	asrs	r5, r5, #2
 800fb66:	d03d      	beq.n	800fbe4 <__pow5mult+0xa0>
 800fb68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fb6a:	b97c      	cbnz	r4, 800fb8c <__pow5mult+0x48>
 800fb6c:	2010      	movs	r0, #16
 800fb6e:	f7ff fdcd 	bl	800f70c <malloc>
 800fb72:	4602      	mov	r2, r0
 800fb74:	6270      	str	r0, [r6, #36]	; 0x24
 800fb76:	b928      	cbnz	r0, 800fb84 <__pow5mult+0x40>
 800fb78:	4b1d      	ldr	r3, [pc, #116]	; (800fbf0 <__pow5mult+0xac>)
 800fb7a:	481e      	ldr	r0, [pc, #120]	; (800fbf4 <__pow5mult+0xb0>)
 800fb7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fb80:	f000 fd2c 	bl	80105dc <__assert_func>
 800fb84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb88:	6004      	str	r4, [r0, #0]
 800fb8a:	60c4      	str	r4, [r0, #12]
 800fb8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fb90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb94:	b94c      	cbnz	r4, 800fbaa <__pow5mult+0x66>
 800fb96:	f240 2171 	movw	r1, #625	; 0x271
 800fb9a:	4630      	mov	r0, r6
 800fb9c:	f7ff ff12 	bl	800f9c4 <__i2b>
 800fba0:	2300      	movs	r3, #0
 800fba2:	f8c8 0008 	str.w	r0, [r8, #8]
 800fba6:	4604      	mov	r4, r0
 800fba8:	6003      	str	r3, [r0, #0]
 800fbaa:	f04f 0900 	mov.w	r9, #0
 800fbae:	07eb      	lsls	r3, r5, #31
 800fbb0:	d50a      	bpl.n	800fbc8 <__pow5mult+0x84>
 800fbb2:	4639      	mov	r1, r7
 800fbb4:	4622      	mov	r2, r4
 800fbb6:	4630      	mov	r0, r6
 800fbb8:	f7ff ff1a 	bl	800f9f0 <__multiply>
 800fbbc:	4639      	mov	r1, r7
 800fbbe:	4680      	mov	r8, r0
 800fbc0:	4630      	mov	r0, r6
 800fbc2:	f7ff fdfd 	bl	800f7c0 <_Bfree>
 800fbc6:	4647      	mov	r7, r8
 800fbc8:	106d      	asrs	r5, r5, #1
 800fbca:	d00b      	beq.n	800fbe4 <__pow5mult+0xa0>
 800fbcc:	6820      	ldr	r0, [r4, #0]
 800fbce:	b938      	cbnz	r0, 800fbe0 <__pow5mult+0x9c>
 800fbd0:	4622      	mov	r2, r4
 800fbd2:	4621      	mov	r1, r4
 800fbd4:	4630      	mov	r0, r6
 800fbd6:	f7ff ff0b 	bl	800f9f0 <__multiply>
 800fbda:	6020      	str	r0, [r4, #0]
 800fbdc:	f8c0 9000 	str.w	r9, [r0]
 800fbe0:	4604      	mov	r4, r0
 800fbe2:	e7e4      	b.n	800fbae <__pow5mult+0x6a>
 800fbe4:	4638      	mov	r0, r7
 800fbe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbea:	bf00      	nop
 800fbec:	08011828 	.word	0x08011828
 800fbf0:	080115de 	.word	0x080115de
 800fbf4:	080116dc 	.word	0x080116dc

0800fbf8 <__lshift>:
 800fbf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbfc:	460c      	mov	r4, r1
 800fbfe:	6849      	ldr	r1, [r1, #4]
 800fc00:	6923      	ldr	r3, [r4, #16]
 800fc02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc06:	68a3      	ldr	r3, [r4, #8]
 800fc08:	4607      	mov	r7, r0
 800fc0a:	4691      	mov	r9, r2
 800fc0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fc10:	f108 0601 	add.w	r6, r8, #1
 800fc14:	42b3      	cmp	r3, r6
 800fc16:	db0b      	blt.n	800fc30 <__lshift+0x38>
 800fc18:	4638      	mov	r0, r7
 800fc1a:	f7ff fd91 	bl	800f740 <_Balloc>
 800fc1e:	4605      	mov	r5, r0
 800fc20:	b948      	cbnz	r0, 800fc36 <__lshift+0x3e>
 800fc22:	4602      	mov	r2, r0
 800fc24:	4b2a      	ldr	r3, [pc, #168]	; (800fcd0 <__lshift+0xd8>)
 800fc26:	482b      	ldr	r0, [pc, #172]	; (800fcd4 <__lshift+0xdc>)
 800fc28:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fc2c:	f000 fcd6 	bl	80105dc <__assert_func>
 800fc30:	3101      	adds	r1, #1
 800fc32:	005b      	lsls	r3, r3, #1
 800fc34:	e7ee      	b.n	800fc14 <__lshift+0x1c>
 800fc36:	2300      	movs	r3, #0
 800fc38:	f100 0114 	add.w	r1, r0, #20
 800fc3c:	f100 0210 	add.w	r2, r0, #16
 800fc40:	4618      	mov	r0, r3
 800fc42:	4553      	cmp	r3, sl
 800fc44:	db37      	blt.n	800fcb6 <__lshift+0xbe>
 800fc46:	6920      	ldr	r0, [r4, #16]
 800fc48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc4c:	f104 0314 	add.w	r3, r4, #20
 800fc50:	f019 091f 	ands.w	r9, r9, #31
 800fc54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fc5c:	d02f      	beq.n	800fcbe <__lshift+0xc6>
 800fc5e:	f1c9 0e20 	rsb	lr, r9, #32
 800fc62:	468a      	mov	sl, r1
 800fc64:	f04f 0c00 	mov.w	ip, #0
 800fc68:	681a      	ldr	r2, [r3, #0]
 800fc6a:	fa02 f209 	lsl.w	r2, r2, r9
 800fc6e:	ea42 020c 	orr.w	r2, r2, ip
 800fc72:	f84a 2b04 	str.w	r2, [sl], #4
 800fc76:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc7a:	4298      	cmp	r0, r3
 800fc7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fc80:	d8f2      	bhi.n	800fc68 <__lshift+0x70>
 800fc82:	1b03      	subs	r3, r0, r4
 800fc84:	3b15      	subs	r3, #21
 800fc86:	f023 0303 	bic.w	r3, r3, #3
 800fc8a:	3304      	adds	r3, #4
 800fc8c:	f104 0215 	add.w	r2, r4, #21
 800fc90:	4290      	cmp	r0, r2
 800fc92:	bf38      	it	cc
 800fc94:	2304      	movcc	r3, #4
 800fc96:	f841 c003 	str.w	ip, [r1, r3]
 800fc9a:	f1bc 0f00 	cmp.w	ip, #0
 800fc9e:	d001      	beq.n	800fca4 <__lshift+0xac>
 800fca0:	f108 0602 	add.w	r6, r8, #2
 800fca4:	3e01      	subs	r6, #1
 800fca6:	4638      	mov	r0, r7
 800fca8:	612e      	str	r6, [r5, #16]
 800fcaa:	4621      	mov	r1, r4
 800fcac:	f7ff fd88 	bl	800f7c0 <_Bfree>
 800fcb0:	4628      	mov	r0, r5
 800fcb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcb6:	f842 0f04 	str.w	r0, [r2, #4]!
 800fcba:	3301      	adds	r3, #1
 800fcbc:	e7c1      	b.n	800fc42 <__lshift+0x4a>
 800fcbe:	3904      	subs	r1, #4
 800fcc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcc4:	f841 2f04 	str.w	r2, [r1, #4]!
 800fcc8:	4298      	cmp	r0, r3
 800fcca:	d8f9      	bhi.n	800fcc0 <__lshift+0xc8>
 800fccc:	e7ea      	b.n	800fca4 <__lshift+0xac>
 800fcce:	bf00      	nop
 800fcd0:	08011650 	.word	0x08011650
 800fcd4:	080116dc 	.word	0x080116dc

0800fcd8 <__mcmp>:
 800fcd8:	b530      	push	{r4, r5, lr}
 800fcda:	6902      	ldr	r2, [r0, #16]
 800fcdc:	690c      	ldr	r4, [r1, #16]
 800fcde:	1b12      	subs	r2, r2, r4
 800fce0:	d10e      	bne.n	800fd00 <__mcmp+0x28>
 800fce2:	f100 0314 	add.w	r3, r0, #20
 800fce6:	3114      	adds	r1, #20
 800fce8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fcec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fcf0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fcf4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fcf8:	42a5      	cmp	r5, r4
 800fcfa:	d003      	beq.n	800fd04 <__mcmp+0x2c>
 800fcfc:	d305      	bcc.n	800fd0a <__mcmp+0x32>
 800fcfe:	2201      	movs	r2, #1
 800fd00:	4610      	mov	r0, r2
 800fd02:	bd30      	pop	{r4, r5, pc}
 800fd04:	4283      	cmp	r3, r0
 800fd06:	d3f3      	bcc.n	800fcf0 <__mcmp+0x18>
 800fd08:	e7fa      	b.n	800fd00 <__mcmp+0x28>
 800fd0a:	f04f 32ff 	mov.w	r2, #4294967295
 800fd0e:	e7f7      	b.n	800fd00 <__mcmp+0x28>

0800fd10 <__mdiff>:
 800fd10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd14:	460c      	mov	r4, r1
 800fd16:	4606      	mov	r6, r0
 800fd18:	4611      	mov	r1, r2
 800fd1a:	4620      	mov	r0, r4
 800fd1c:	4690      	mov	r8, r2
 800fd1e:	f7ff ffdb 	bl	800fcd8 <__mcmp>
 800fd22:	1e05      	subs	r5, r0, #0
 800fd24:	d110      	bne.n	800fd48 <__mdiff+0x38>
 800fd26:	4629      	mov	r1, r5
 800fd28:	4630      	mov	r0, r6
 800fd2a:	f7ff fd09 	bl	800f740 <_Balloc>
 800fd2e:	b930      	cbnz	r0, 800fd3e <__mdiff+0x2e>
 800fd30:	4b3a      	ldr	r3, [pc, #232]	; (800fe1c <__mdiff+0x10c>)
 800fd32:	4602      	mov	r2, r0
 800fd34:	f240 2132 	movw	r1, #562	; 0x232
 800fd38:	4839      	ldr	r0, [pc, #228]	; (800fe20 <__mdiff+0x110>)
 800fd3a:	f000 fc4f 	bl	80105dc <__assert_func>
 800fd3e:	2301      	movs	r3, #1
 800fd40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd48:	bfa4      	itt	ge
 800fd4a:	4643      	movge	r3, r8
 800fd4c:	46a0      	movge	r8, r4
 800fd4e:	4630      	mov	r0, r6
 800fd50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fd54:	bfa6      	itte	ge
 800fd56:	461c      	movge	r4, r3
 800fd58:	2500      	movge	r5, #0
 800fd5a:	2501      	movlt	r5, #1
 800fd5c:	f7ff fcf0 	bl	800f740 <_Balloc>
 800fd60:	b920      	cbnz	r0, 800fd6c <__mdiff+0x5c>
 800fd62:	4b2e      	ldr	r3, [pc, #184]	; (800fe1c <__mdiff+0x10c>)
 800fd64:	4602      	mov	r2, r0
 800fd66:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fd6a:	e7e5      	b.n	800fd38 <__mdiff+0x28>
 800fd6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fd70:	6926      	ldr	r6, [r4, #16]
 800fd72:	60c5      	str	r5, [r0, #12]
 800fd74:	f104 0914 	add.w	r9, r4, #20
 800fd78:	f108 0514 	add.w	r5, r8, #20
 800fd7c:	f100 0e14 	add.w	lr, r0, #20
 800fd80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fd84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fd88:	f108 0210 	add.w	r2, r8, #16
 800fd8c:	46f2      	mov	sl, lr
 800fd8e:	2100      	movs	r1, #0
 800fd90:	f859 3b04 	ldr.w	r3, [r9], #4
 800fd94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fd98:	fa1f f883 	uxth.w	r8, r3
 800fd9c:	fa11 f18b 	uxtah	r1, r1, fp
 800fda0:	0c1b      	lsrs	r3, r3, #16
 800fda2:	eba1 0808 	sub.w	r8, r1, r8
 800fda6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fdaa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fdae:	fa1f f888 	uxth.w	r8, r8
 800fdb2:	1419      	asrs	r1, r3, #16
 800fdb4:	454e      	cmp	r6, r9
 800fdb6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fdba:	f84a 3b04 	str.w	r3, [sl], #4
 800fdbe:	d8e7      	bhi.n	800fd90 <__mdiff+0x80>
 800fdc0:	1b33      	subs	r3, r6, r4
 800fdc2:	3b15      	subs	r3, #21
 800fdc4:	f023 0303 	bic.w	r3, r3, #3
 800fdc8:	3304      	adds	r3, #4
 800fdca:	3415      	adds	r4, #21
 800fdcc:	42a6      	cmp	r6, r4
 800fdce:	bf38      	it	cc
 800fdd0:	2304      	movcc	r3, #4
 800fdd2:	441d      	add	r5, r3
 800fdd4:	4473      	add	r3, lr
 800fdd6:	469e      	mov	lr, r3
 800fdd8:	462e      	mov	r6, r5
 800fdda:	4566      	cmp	r6, ip
 800fddc:	d30e      	bcc.n	800fdfc <__mdiff+0xec>
 800fdde:	f10c 0203 	add.w	r2, ip, #3
 800fde2:	1b52      	subs	r2, r2, r5
 800fde4:	f022 0203 	bic.w	r2, r2, #3
 800fde8:	3d03      	subs	r5, #3
 800fdea:	45ac      	cmp	ip, r5
 800fdec:	bf38      	it	cc
 800fdee:	2200      	movcc	r2, #0
 800fdf0:	441a      	add	r2, r3
 800fdf2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fdf6:	b17b      	cbz	r3, 800fe18 <__mdiff+0x108>
 800fdf8:	6107      	str	r7, [r0, #16]
 800fdfa:	e7a3      	b.n	800fd44 <__mdiff+0x34>
 800fdfc:	f856 8b04 	ldr.w	r8, [r6], #4
 800fe00:	fa11 f288 	uxtah	r2, r1, r8
 800fe04:	1414      	asrs	r4, r2, #16
 800fe06:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fe0a:	b292      	uxth	r2, r2
 800fe0c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fe10:	f84e 2b04 	str.w	r2, [lr], #4
 800fe14:	1421      	asrs	r1, r4, #16
 800fe16:	e7e0      	b.n	800fdda <__mdiff+0xca>
 800fe18:	3f01      	subs	r7, #1
 800fe1a:	e7ea      	b.n	800fdf2 <__mdiff+0xe2>
 800fe1c:	08011650 	.word	0x08011650
 800fe20:	080116dc 	.word	0x080116dc

0800fe24 <__ulp>:
 800fe24:	b082      	sub	sp, #8
 800fe26:	ed8d 0b00 	vstr	d0, [sp]
 800fe2a:	9b01      	ldr	r3, [sp, #4]
 800fe2c:	4912      	ldr	r1, [pc, #72]	; (800fe78 <__ulp+0x54>)
 800fe2e:	4019      	ands	r1, r3
 800fe30:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fe34:	2900      	cmp	r1, #0
 800fe36:	dd05      	ble.n	800fe44 <__ulp+0x20>
 800fe38:	2200      	movs	r2, #0
 800fe3a:	460b      	mov	r3, r1
 800fe3c:	ec43 2b10 	vmov	d0, r2, r3
 800fe40:	b002      	add	sp, #8
 800fe42:	4770      	bx	lr
 800fe44:	4249      	negs	r1, r1
 800fe46:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fe4a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fe4e:	f04f 0200 	mov.w	r2, #0
 800fe52:	f04f 0300 	mov.w	r3, #0
 800fe56:	da04      	bge.n	800fe62 <__ulp+0x3e>
 800fe58:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fe5c:	fa41 f300 	asr.w	r3, r1, r0
 800fe60:	e7ec      	b.n	800fe3c <__ulp+0x18>
 800fe62:	f1a0 0114 	sub.w	r1, r0, #20
 800fe66:	291e      	cmp	r1, #30
 800fe68:	bfda      	itte	le
 800fe6a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fe6e:	fa20 f101 	lsrle.w	r1, r0, r1
 800fe72:	2101      	movgt	r1, #1
 800fe74:	460a      	mov	r2, r1
 800fe76:	e7e1      	b.n	800fe3c <__ulp+0x18>
 800fe78:	7ff00000 	.word	0x7ff00000

0800fe7c <__b2d>:
 800fe7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe7e:	6905      	ldr	r5, [r0, #16]
 800fe80:	f100 0714 	add.w	r7, r0, #20
 800fe84:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fe88:	1f2e      	subs	r6, r5, #4
 800fe8a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fe8e:	4620      	mov	r0, r4
 800fe90:	f7ff fd48 	bl	800f924 <__hi0bits>
 800fe94:	f1c0 0320 	rsb	r3, r0, #32
 800fe98:	280a      	cmp	r0, #10
 800fe9a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ff18 <__b2d+0x9c>
 800fe9e:	600b      	str	r3, [r1, #0]
 800fea0:	dc14      	bgt.n	800fecc <__b2d+0x50>
 800fea2:	f1c0 0e0b 	rsb	lr, r0, #11
 800fea6:	fa24 f10e 	lsr.w	r1, r4, lr
 800feaa:	42b7      	cmp	r7, r6
 800feac:	ea41 030c 	orr.w	r3, r1, ip
 800feb0:	bf34      	ite	cc
 800feb2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800feb6:	2100      	movcs	r1, #0
 800feb8:	3015      	adds	r0, #21
 800feba:	fa04 f000 	lsl.w	r0, r4, r0
 800febe:	fa21 f10e 	lsr.w	r1, r1, lr
 800fec2:	ea40 0201 	orr.w	r2, r0, r1
 800fec6:	ec43 2b10 	vmov	d0, r2, r3
 800feca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fecc:	42b7      	cmp	r7, r6
 800fece:	bf3a      	itte	cc
 800fed0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fed4:	f1a5 0608 	subcc.w	r6, r5, #8
 800fed8:	2100      	movcs	r1, #0
 800feda:	380b      	subs	r0, #11
 800fedc:	d017      	beq.n	800ff0e <__b2d+0x92>
 800fede:	f1c0 0c20 	rsb	ip, r0, #32
 800fee2:	fa04 f500 	lsl.w	r5, r4, r0
 800fee6:	42be      	cmp	r6, r7
 800fee8:	fa21 f40c 	lsr.w	r4, r1, ip
 800feec:	ea45 0504 	orr.w	r5, r5, r4
 800fef0:	bf8c      	ite	hi
 800fef2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fef6:	2400      	movls	r4, #0
 800fef8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fefc:	fa01 f000 	lsl.w	r0, r1, r0
 800ff00:	fa24 f40c 	lsr.w	r4, r4, ip
 800ff04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ff08:	ea40 0204 	orr.w	r2, r0, r4
 800ff0c:	e7db      	b.n	800fec6 <__b2d+0x4a>
 800ff0e:	ea44 030c 	orr.w	r3, r4, ip
 800ff12:	460a      	mov	r2, r1
 800ff14:	e7d7      	b.n	800fec6 <__b2d+0x4a>
 800ff16:	bf00      	nop
 800ff18:	3ff00000 	.word	0x3ff00000

0800ff1c <__d2b>:
 800ff1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ff20:	4689      	mov	r9, r1
 800ff22:	2101      	movs	r1, #1
 800ff24:	ec57 6b10 	vmov	r6, r7, d0
 800ff28:	4690      	mov	r8, r2
 800ff2a:	f7ff fc09 	bl	800f740 <_Balloc>
 800ff2e:	4604      	mov	r4, r0
 800ff30:	b930      	cbnz	r0, 800ff40 <__d2b+0x24>
 800ff32:	4602      	mov	r2, r0
 800ff34:	4b25      	ldr	r3, [pc, #148]	; (800ffcc <__d2b+0xb0>)
 800ff36:	4826      	ldr	r0, [pc, #152]	; (800ffd0 <__d2b+0xb4>)
 800ff38:	f240 310a 	movw	r1, #778	; 0x30a
 800ff3c:	f000 fb4e 	bl	80105dc <__assert_func>
 800ff40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ff44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ff48:	bb35      	cbnz	r5, 800ff98 <__d2b+0x7c>
 800ff4a:	2e00      	cmp	r6, #0
 800ff4c:	9301      	str	r3, [sp, #4]
 800ff4e:	d028      	beq.n	800ffa2 <__d2b+0x86>
 800ff50:	4668      	mov	r0, sp
 800ff52:	9600      	str	r6, [sp, #0]
 800ff54:	f7ff fd06 	bl	800f964 <__lo0bits>
 800ff58:	9900      	ldr	r1, [sp, #0]
 800ff5a:	b300      	cbz	r0, 800ff9e <__d2b+0x82>
 800ff5c:	9a01      	ldr	r2, [sp, #4]
 800ff5e:	f1c0 0320 	rsb	r3, r0, #32
 800ff62:	fa02 f303 	lsl.w	r3, r2, r3
 800ff66:	430b      	orrs	r3, r1
 800ff68:	40c2      	lsrs	r2, r0
 800ff6a:	6163      	str	r3, [r4, #20]
 800ff6c:	9201      	str	r2, [sp, #4]
 800ff6e:	9b01      	ldr	r3, [sp, #4]
 800ff70:	61a3      	str	r3, [r4, #24]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	bf14      	ite	ne
 800ff76:	2202      	movne	r2, #2
 800ff78:	2201      	moveq	r2, #1
 800ff7a:	6122      	str	r2, [r4, #16]
 800ff7c:	b1d5      	cbz	r5, 800ffb4 <__d2b+0x98>
 800ff7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ff82:	4405      	add	r5, r0
 800ff84:	f8c9 5000 	str.w	r5, [r9]
 800ff88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ff8c:	f8c8 0000 	str.w	r0, [r8]
 800ff90:	4620      	mov	r0, r4
 800ff92:	b003      	add	sp, #12
 800ff94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ff9c:	e7d5      	b.n	800ff4a <__d2b+0x2e>
 800ff9e:	6161      	str	r1, [r4, #20]
 800ffa0:	e7e5      	b.n	800ff6e <__d2b+0x52>
 800ffa2:	a801      	add	r0, sp, #4
 800ffa4:	f7ff fcde 	bl	800f964 <__lo0bits>
 800ffa8:	9b01      	ldr	r3, [sp, #4]
 800ffaa:	6163      	str	r3, [r4, #20]
 800ffac:	2201      	movs	r2, #1
 800ffae:	6122      	str	r2, [r4, #16]
 800ffb0:	3020      	adds	r0, #32
 800ffb2:	e7e3      	b.n	800ff7c <__d2b+0x60>
 800ffb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ffb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ffbc:	f8c9 0000 	str.w	r0, [r9]
 800ffc0:	6918      	ldr	r0, [r3, #16]
 800ffc2:	f7ff fcaf 	bl	800f924 <__hi0bits>
 800ffc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ffca:	e7df      	b.n	800ff8c <__d2b+0x70>
 800ffcc:	08011650 	.word	0x08011650
 800ffd0:	080116dc 	.word	0x080116dc

0800ffd4 <__ratio>:
 800ffd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffd8:	4688      	mov	r8, r1
 800ffda:	4669      	mov	r1, sp
 800ffdc:	4681      	mov	r9, r0
 800ffde:	f7ff ff4d 	bl	800fe7c <__b2d>
 800ffe2:	a901      	add	r1, sp, #4
 800ffe4:	4640      	mov	r0, r8
 800ffe6:	ec55 4b10 	vmov	r4, r5, d0
 800ffea:	f7ff ff47 	bl	800fe7c <__b2d>
 800ffee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fff2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fff6:	eba3 0c02 	sub.w	ip, r3, r2
 800fffa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fffe:	1a9b      	subs	r3, r3, r2
 8010000:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010004:	ec51 0b10 	vmov	r0, r1, d0
 8010008:	2b00      	cmp	r3, #0
 801000a:	bfd6      	itet	le
 801000c:	460a      	movle	r2, r1
 801000e:	462a      	movgt	r2, r5
 8010010:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010014:	468b      	mov	fp, r1
 8010016:	462f      	mov	r7, r5
 8010018:	bfd4      	ite	le
 801001a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801001e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010022:	4620      	mov	r0, r4
 8010024:	ee10 2a10 	vmov	r2, s0
 8010028:	465b      	mov	r3, fp
 801002a:	4639      	mov	r1, r7
 801002c:	f7f0 fc16 	bl	800085c <__aeabi_ddiv>
 8010030:	ec41 0b10 	vmov	d0, r0, r1
 8010034:	b003      	add	sp, #12
 8010036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801003a <__copybits>:
 801003a:	3901      	subs	r1, #1
 801003c:	b570      	push	{r4, r5, r6, lr}
 801003e:	1149      	asrs	r1, r1, #5
 8010040:	6914      	ldr	r4, [r2, #16]
 8010042:	3101      	adds	r1, #1
 8010044:	f102 0314 	add.w	r3, r2, #20
 8010048:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801004c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010050:	1f05      	subs	r5, r0, #4
 8010052:	42a3      	cmp	r3, r4
 8010054:	d30c      	bcc.n	8010070 <__copybits+0x36>
 8010056:	1aa3      	subs	r3, r4, r2
 8010058:	3b11      	subs	r3, #17
 801005a:	f023 0303 	bic.w	r3, r3, #3
 801005e:	3211      	adds	r2, #17
 8010060:	42a2      	cmp	r2, r4
 8010062:	bf88      	it	hi
 8010064:	2300      	movhi	r3, #0
 8010066:	4418      	add	r0, r3
 8010068:	2300      	movs	r3, #0
 801006a:	4288      	cmp	r0, r1
 801006c:	d305      	bcc.n	801007a <__copybits+0x40>
 801006e:	bd70      	pop	{r4, r5, r6, pc}
 8010070:	f853 6b04 	ldr.w	r6, [r3], #4
 8010074:	f845 6f04 	str.w	r6, [r5, #4]!
 8010078:	e7eb      	b.n	8010052 <__copybits+0x18>
 801007a:	f840 3b04 	str.w	r3, [r0], #4
 801007e:	e7f4      	b.n	801006a <__copybits+0x30>

08010080 <__any_on>:
 8010080:	f100 0214 	add.w	r2, r0, #20
 8010084:	6900      	ldr	r0, [r0, #16]
 8010086:	114b      	asrs	r3, r1, #5
 8010088:	4298      	cmp	r0, r3
 801008a:	b510      	push	{r4, lr}
 801008c:	db11      	blt.n	80100b2 <__any_on+0x32>
 801008e:	dd0a      	ble.n	80100a6 <__any_on+0x26>
 8010090:	f011 011f 	ands.w	r1, r1, #31
 8010094:	d007      	beq.n	80100a6 <__any_on+0x26>
 8010096:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801009a:	fa24 f001 	lsr.w	r0, r4, r1
 801009e:	fa00 f101 	lsl.w	r1, r0, r1
 80100a2:	428c      	cmp	r4, r1
 80100a4:	d10b      	bne.n	80100be <__any_on+0x3e>
 80100a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80100aa:	4293      	cmp	r3, r2
 80100ac:	d803      	bhi.n	80100b6 <__any_on+0x36>
 80100ae:	2000      	movs	r0, #0
 80100b0:	bd10      	pop	{r4, pc}
 80100b2:	4603      	mov	r3, r0
 80100b4:	e7f7      	b.n	80100a6 <__any_on+0x26>
 80100b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80100ba:	2900      	cmp	r1, #0
 80100bc:	d0f5      	beq.n	80100aa <__any_on+0x2a>
 80100be:	2001      	movs	r0, #1
 80100c0:	e7f6      	b.n	80100b0 <__any_on+0x30>

080100c2 <_calloc_r>:
 80100c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100c4:	fba1 2402 	umull	r2, r4, r1, r2
 80100c8:	b94c      	cbnz	r4, 80100de <_calloc_r+0x1c>
 80100ca:	4611      	mov	r1, r2
 80100cc:	9201      	str	r2, [sp, #4]
 80100ce:	f000 f87b 	bl	80101c8 <_malloc_r>
 80100d2:	9a01      	ldr	r2, [sp, #4]
 80100d4:	4605      	mov	r5, r0
 80100d6:	b930      	cbnz	r0, 80100e6 <_calloc_r+0x24>
 80100d8:	4628      	mov	r0, r5
 80100da:	b003      	add	sp, #12
 80100dc:	bd30      	pop	{r4, r5, pc}
 80100de:	220c      	movs	r2, #12
 80100e0:	6002      	str	r2, [r0, #0]
 80100e2:	2500      	movs	r5, #0
 80100e4:	e7f8      	b.n	80100d8 <_calloc_r+0x16>
 80100e6:	4621      	mov	r1, r4
 80100e8:	f7fc fbcc 	bl	800c884 <memset>
 80100ec:	e7f4      	b.n	80100d8 <_calloc_r+0x16>
	...

080100f0 <_free_r>:
 80100f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100f2:	2900      	cmp	r1, #0
 80100f4:	d044      	beq.n	8010180 <_free_r+0x90>
 80100f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100fa:	9001      	str	r0, [sp, #4]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	f1a1 0404 	sub.w	r4, r1, #4
 8010102:	bfb8      	it	lt
 8010104:	18e4      	addlt	r4, r4, r3
 8010106:	f000 fab3 	bl	8010670 <__malloc_lock>
 801010a:	4a1e      	ldr	r2, [pc, #120]	; (8010184 <_free_r+0x94>)
 801010c:	9801      	ldr	r0, [sp, #4]
 801010e:	6813      	ldr	r3, [r2, #0]
 8010110:	b933      	cbnz	r3, 8010120 <_free_r+0x30>
 8010112:	6063      	str	r3, [r4, #4]
 8010114:	6014      	str	r4, [r2, #0]
 8010116:	b003      	add	sp, #12
 8010118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801011c:	f000 baae 	b.w	801067c <__malloc_unlock>
 8010120:	42a3      	cmp	r3, r4
 8010122:	d908      	bls.n	8010136 <_free_r+0x46>
 8010124:	6825      	ldr	r5, [r4, #0]
 8010126:	1961      	adds	r1, r4, r5
 8010128:	428b      	cmp	r3, r1
 801012a:	bf01      	itttt	eq
 801012c:	6819      	ldreq	r1, [r3, #0]
 801012e:	685b      	ldreq	r3, [r3, #4]
 8010130:	1949      	addeq	r1, r1, r5
 8010132:	6021      	streq	r1, [r4, #0]
 8010134:	e7ed      	b.n	8010112 <_free_r+0x22>
 8010136:	461a      	mov	r2, r3
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	b10b      	cbz	r3, 8010140 <_free_r+0x50>
 801013c:	42a3      	cmp	r3, r4
 801013e:	d9fa      	bls.n	8010136 <_free_r+0x46>
 8010140:	6811      	ldr	r1, [r2, #0]
 8010142:	1855      	adds	r5, r2, r1
 8010144:	42a5      	cmp	r5, r4
 8010146:	d10b      	bne.n	8010160 <_free_r+0x70>
 8010148:	6824      	ldr	r4, [r4, #0]
 801014a:	4421      	add	r1, r4
 801014c:	1854      	adds	r4, r2, r1
 801014e:	42a3      	cmp	r3, r4
 8010150:	6011      	str	r1, [r2, #0]
 8010152:	d1e0      	bne.n	8010116 <_free_r+0x26>
 8010154:	681c      	ldr	r4, [r3, #0]
 8010156:	685b      	ldr	r3, [r3, #4]
 8010158:	6053      	str	r3, [r2, #4]
 801015a:	4421      	add	r1, r4
 801015c:	6011      	str	r1, [r2, #0]
 801015e:	e7da      	b.n	8010116 <_free_r+0x26>
 8010160:	d902      	bls.n	8010168 <_free_r+0x78>
 8010162:	230c      	movs	r3, #12
 8010164:	6003      	str	r3, [r0, #0]
 8010166:	e7d6      	b.n	8010116 <_free_r+0x26>
 8010168:	6825      	ldr	r5, [r4, #0]
 801016a:	1961      	adds	r1, r4, r5
 801016c:	428b      	cmp	r3, r1
 801016e:	bf04      	itt	eq
 8010170:	6819      	ldreq	r1, [r3, #0]
 8010172:	685b      	ldreq	r3, [r3, #4]
 8010174:	6063      	str	r3, [r4, #4]
 8010176:	bf04      	itt	eq
 8010178:	1949      	addeq	r1, r1, r5
 801017a:	6021      	streq	r1, [r4, #0]
 801017c:	6054      	str	r4, [r2, #4]
 801017e:	e7ca      	b.n	8010116 <_free_r+0x26>
 8010180:	b003      	add	sp, #12
 8010182:	bd30      	pop	{r4, r5, pc}
 8010184:	20001104 	.word	0x20001104

08010188 <sbrk_aligned>:
 8010188:	b570      	push	{r4, r5, r6, lr}
 801018a:	4e0e      	ldr	r6, [pc, #56]	; (80101c4 <sbrk_aligned+0x3c>)
 801018c:	460c      	mov	r4, r1
 801018e:	6831      	ldr	r1, [r6, #0]
 8010190:	4605      	mov	r5, r0
 8010192:	b911      	cbnz	r1, 801019a <sbrk_aligned+0x12>
 8010194:	f000 f9f0 	bl	8010578 <_sbrk_r>
 8010198:	6030      	str	r0, [r6, #0]
 801019a:	4621      	mov	r1, r4
 801019c:	4628      	mov	r0, r5
 801019e:	f000 f9eb 	bl	8010578 <_sbrk_r>
 80101a2:	1c43      	adds	r3, r0, #1
 80101a4:	d00a      	beq.n	80101bc <sbrk_aligned+0x34>
 80101a6:	1cc4      	adds	r4, r0, #3
 80101a8:	f024 0403 	bic.w	r4, r4, #3
 80101ac:	42a0      	cmp	r0, r4
 80101ae:	d007      	beq.n	80101c0 <sbrk_aligned+0x38>
 80101b0:	1a21      	subs	r1, r4, r0
 80101b2:	4628      	mov	r0, r5
 80101b4:	f000 f9e0 	bl	8010578 <_sbrk_r>
 80101b8:	3001      	adds	r0, #1
 80101ba:	d101      	bne.n	80101c0 <sbrk_aligned+0x38>
 80101bc:	f04f 34ff 	mov.w	r4, #4294967295
 80101c0:	4620      	mov	r0, r4
 80101c2:	bd70      	pop	{r4, r5, r6, pc}
 80101c4:	20001108 	.word	0x20001108

080101c8 <_malloc_r>:
 80101c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101cc:	1ccd      	adds	r5, r1, #3
 80101ce:	f025 0503 	bic.w	r5, r5, #3
 80101d2:	3508      	adds	r5, #8
 80101d4:	2d0c      	cmp	r5, #12
 80101d6:	bf38      	it	cc
 80101d8:	250c      	movcc	r5, #12
 80101da:	2d00      	cmp	r5, #0
 80101dc:	4607      	mov	r7, r0
 80101de:	db01      	blt.n	80101e4 <_malloc_r+0x1c>
 80101e0:	42a9      	cmp	r1, r5
 80101e2:	d905      	bls.n	80101f0 <_malloc_r+0x28>
 80101e4:	230c      	movs	r3, #12
 80101e6:	603b      	str	r3, [r7, #0]
 80101e8:	2600      	movs	r6, #0
 80101ea:	4630      	mov	r0, r6
 80101ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101f0:	4e2e      	ldr	r6, [pc, #184]	; (80102ac <_malloc_r+0xe4>)
 80101f2:	f000 fa3d 	bl	8010670 <__malloc_lock>
 80101f6:	6833      	ldr	r3, [r6, #0]
 80101f8:	461c      	mov	r4, r3
 80101fa:	bb34      	cbnz	r4, 801024a <_malloc_r+0x82>
 80101fc:	4629      	mov	r1, r5
 80101fe:	4638      	mov	r0, r7
 8010200:	f7ff ffc2 	bl	8010188 <sbrk_aligned>
 8010204:	1c43      	adds	r3, r0, #1
 8010206:	4604      	mov	r4, r0
 8010208:	d14d      	bne.n	80102a6 <_malloc_r+0xde>
 801020a:	6834      	ldr	r4, [r6, #0]
 801020c:	4626      	mov	r6, r4
 801020e:	2e00      	cmp	r6, #0
 8010210:	d140      	bne.n	8010294 <_malloc_r+0xcc>
 8010212:	6823      	ldr	r3, [r4, #0]
 8010214:	4631      	mov	r1, r6
 8010216:	4638      	mov	r0, r7
 8010218:	eb04 0803 	add.w	r8, r4, r3
 801021c:	f000 f9ac 	bl	8010578 <_sbrk_r>
 8010220:	4580      	cmp	r8, r0
 8010222:	d13a      	bne.n	801029a <_malloc_r+0xd2>
 8010224:	6821      	ldr	r1, [r4, #0]
 8010226:	3503      	adds	r5, #3
 8010228:	1a6d      	subs	r5, r5, r1
 801022a:	f025 0503 	bic.w	r5, r5, #3
 801022e:	3508      	adds	r5, #8
 8010230:	2d0c      	cmp	r5, #12
 8010232:	bf38      	it	cc
 8010234:	250c      	movcc	r5, #12
 8010236:	4629      	mov	r1, r5
 8010238:	4638      	mov	r0, r7
 801023a:	f7ff ffa5 	bl	8010188 <sbrk_aligned>
 801023e:	3001      	adds	r0, #1
 8010240:	d02b      	beq.n	801029a <_malloc_r+0xd2>
 8010242:	6823      	ldr	r3, [r4, #0]
 8010244:	442b      	add	r3, r5
 8010246:	6023      	str	r3, [r4, #0]
 8010248:	e00e      	b.n	8010268 <_malloc_r+0xa0>
 801024a:	6822      	ldr	r2, [r4, #0]
 801024c:	1b52      	subs	r2, r2, r5
 801024e:	d41e      	bmi.n	801028e <_malloc_r+0xc6>
 8010250:	2a0b      	cmp	r2, #11
 8010252:	d916      	bls.n	8010282 <_malloc_r+0xba>
 8010254:	1961      	adds	r1, r4, r5
 8010256:	42a3      	cmp	r3, r4
 8010258:	6025      	str	r5, [r4, #0]
 801025a:	bf18      	it	ne
 801025c:	6059      	strne	r1, [r3, #4]
 801025e:	6863      	ldr	r3, [r4, #4]
 8010260:	bf08      	it	eq
 8010262:	6031      	streq	r1, [r6, #0]
 8010264:	5162      	str	r2, [r4, r5]
 8010266:	604b      	str	r3, [r1, #4]
 8010268:	4638      	mov	r0, r7
 801026a:	f104 060b 	add.w	r6, r4, #11
 801026e:	f000 fa05 	bl	801067c <__malloc_unlock>
 8010272:	f026 0607 	bic.w	r6, r6, #7
 8010276:	1d23      	adds	r3, r4, #4
 8010278:	1af2      	subs	r2, r6, r3
 801027a:	d0b6      	beq.n	80101ea <_malloc_r+0x22>
 801027c:	1b9b      	subs	r3, r3, r6
 801027e:	50a3      	str	r3, [r4, r2]
 8010280:	e7b3      	b.n	80101ea <_malloc_r+0x22>
 8010282:	6862      	ldr	r2, [r4, #4]
 8010284:	42a3      	cmp	r3, r4
 8010286:	bf0c      	ite	eq
 8010288:	6032      	streq	r2, [r6, #0]
 801028a:	605a      	strne	r2, [r3, #4]
 801028c:	e7ec      	b.n	8010268 <_malloc_r+0xa0>
 801028e:	4623      	mov	r3, r4
 8010290:	6864      	ldr	r4, [r4, #4]
 8010292:	e7b2      	b.n	80101fa <_malloc_r+0x32>
 8010294:	4634      	mov	r4, r6
 8010296:	6876      	ldr	r6, [r6, #4]
 8010298:	e7b9      	b.n	801020e <_malloc_r+0x46>
 801029a:	230c      	movs	r3, #12
 801029c:	603b      	str	r3, [r7, #0]
 801029e:	4638      	mov	r0, r7
 80102a0:	f000 f9ec 	bl	801067c <__malloc_unlock>
 80102a4:	e7a1      	b.n	80101ea <_malloc_r+0x22>
 80102a6:	6025      	str	r5, [r4, #0]
 80102a8:	e7de      	b.n	8010268 <_malloc_r+0xa0>
 80102aa:	bf00      	nop
 80102ac:	20001104 	.word	0x20001104

080102b0 <__ssputs_r>:
 80102b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102b4:	688e      	ldr	r6, [r1, #8]
 80102b6:	429e      	cmp	r6, r3
 80102b8:	4682      	mov	sl, r0
 80102ba:	460c      	mov	r4, r1
 80102bc:	4690      	mov	r8, r2
 80102be:	461f      	mov	r7, r3
 80102c0:	d838      	bhi.n	8010334 <__ssputs_r+0x84>
 80102c2:	898a      	ldrh	r2, [r1, #12]
 80102c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80102c8:	d032      	beq.n	8010330 <__ssputs_r+0x80>
 80102ca:	6825      	ldr	r5, [r4, #0]
 80102cc:	6909      	ldr	r1, [r1, #16]
 80102ce:	eba5 0901 	sub.w	r9, r5, r1
 80102d2:	6965      	ldr	r5, [r4, #20]
 80102d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80102d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80102dc:	3301      	adds	r3, #1
 80102de:	444b      	add	r3, r9
 80102e0:	106d      	asrs	r5, r5, #1
 80102e2:	429d      	cmp	r5, r3
 80102e4:	bf38      	it	cc
 80102e6:	461d      	movcc	r5, r3
 80102e8:	0553      	lsls	r3, r2, #21
 80102ea:	d531      	bpl.n	8010350 <__ssputs_r+0xa0>
 80102ec:	4629      	mov	r1, r5
 80102ee:	f7ff ff6b 	bl	80101c8 <_malloc_r>
 80102f2:	4606      	mov	r6, r0
 80102f4:	b950      	cbnz	r0, 801030c <__ssputs_r+0x5c>
 80102f6:	230c      	movs	r3, #12
 80102f8:	f8ca 3000 	str.w	r3, [sl]
 80102fc:	89a3      	ldrh	r3, [r4, #12]
 80102fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010302:	81a3      	strh	r3, [r4, #12]
 8010304:	f04f 30ff 	mov.w	r0, #4294967295
 8010308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801030c:	6921      	ldr	r1, [r4, #16]
 801030e:	464a      	mov	r2, r9
 8010310:	f7fc faaa 	bl	800c868 <memcpy>
 8010314:	89a3      	ldrh	r3, [r4, #12]
 8010316:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801031a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801031e:	81a3      	strh	r3, [r4, #12]
 8010320:	6126      	str	r6, [r4, #16]
 8010322:	6165      	str	r5, [r4, #20]
 8010324:	444e      	add	r6, r9
 8010326:	eba5 0509 	sub.w	r5, r5, r9
 801032a:	6026      	str	r6, [r4, #0]
 801032c:	60a5      	str	r5, [r4, #8]
 801032e:	463e      	mov	r6, r7
 8010330:	42be      	cmp	r6, r7
 8010332:	d900      	bls.n	8010336 <__ssputs_r+0x86>
 8010334:	463e      	mov	r6, r7
 8010336:	6820      	ldr	r0, [r4, #0]
 8010338:	4632      	mov	r2, r6
 801033a:	4641      	mov	r1, r8
 801033c:	f000 f97e 	bl	801063c <memmove>
 8010340:	68a3      	ldr	r3, [r4, #8]
 8010342:	1b9b      	subs	r3, r3, r6
 8010344:	60a3      	str	r3, [r4, #8]
 8010346:	6823      	ldr	r3, [r4, #0]
 8010348:	4433      	add	r3, r6
 801034a:	6023      	str	r3, [r4, #0]
 801034c:	2000      	movs	r0, #0
 801034e:	e7db      	b.n	8010308 <__ssputs_r+0x58>
 8010350:	462a      	mov	r2, r5
 8010352:	f000 f999 	bl	8010688 <_realloc_r>
 8010356:	4606      	mov	r6, r0
 8010358:	2800      	cmp	r0, #0
 801035a:	d1e1      	bne.n	8010320 <__ssputs_r+0x70>
 801035c:	6921      	ldr	r1, [r4, #16]
 801035e:	4650      	mov	r0, sl
 8010360:	f7ff fec6 	bl	80100f0 <_free_r>
 8010364:	e7c7      	b.n	80102f6 <__ssputs_r+0x46>
	...

08010368 <_svfiprintf_r>:
 8010368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801036c:	4698      	mov	r8, r3
 801036e:	898b      	ldrh	r3, [r1, #12]
 8010370:	061b      	lsls	r3, r3, #24
 8010372:	b09d      	sub	sp, #116	; 0x74
 8010374:	4607      	mov	r7, r0
 8010376:	460d      	mov	r5, r1
 8010378:	4614      	mov	r4, r2
 801037a:	d50e      	bpl.n	801039a <_svfiprintf_r+0x32>
 801037c:	690b      	ldr	r3, [r1, #16]
 801037e:	b963      	cbnz	r3, 801039a <_svfiprintf_r+0x32>
 8010380:	2140      	movs	r1, #64	; 0x40
 8010382:	f7ff ff21 	bl	80101c8 <_malloc_r>
 8010386:	6028      	str	r0, [r5, #0]
 8010388:	6128      	str	r0, [r5, #16]
 801038a:	b920      	cbnz	r0, 8010396 <_svfiprintf_r+0x2e>
 801038c:	230c      	movs	r3, #12
 801038e:	603b      	str	r3, [r7, #0]
 8010390:	f04f 30ff 	mov.w	r0, #4294967295
 8010394:	e0d1      	b.n	801053a <_svfiprintf_r+0x1d2>
 8010396:	2340      	movs	r3, #64	; 0x40
 8010398:	616b      	str	r3, [r5, #20]
 801039a:	2300      	movs	r3, #0
 801039c:	9309      	str	r3, [sp, #36]	; 0x24
 801039e:	2320      	movs	r3, #32
 80103a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80103a8:	2330      	movs	r3, #48	; 0x30
 80103aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010554 <_svfiprintf_r+0x1ec>
 80103ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80103b2:	f04f 0901 	mov.w	r9, #1
 80103b6:	4623      	mov	r3, r4
 80103b8:	469a      	mov	sl, r3
 80103ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103be:	b10a      	cbz	r2, 80103c4 <_svfiprintf_r+0x5c>
 80103c0:	2a25      	cmp	r2, #37	; 0x25
 80103c2:	d1f9      	bne.n	80103b8 <_svfiprintf_r+0x50>
 80103c4:	ebba 0b04 	subs.w	fp, sl, r4
 80103c8:	d00b      	beq.n	80103e2 <_svfiprintf_r+0x7a>
 80103ca:	465b      	mov	r3, fp
 80103cc:	4622      	mov	r2, r4
 80103ce:	4629      	mov	r1, r5
 80103d0:	4638      	mov	r0, r7
 80103d2:	f7ff ff6d 	bl	80102b0 <__ssputs_r>
 80103d6:	3001      	adds	r0, #1
 80103d8:	f000 80aa 	beq.w	8010530 <_svfiprintf_r+0x1c8>
 80103dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103de:	445a      	add	r2, fp
 80103e0:	9209      	str	r2, [sp, #36]	; 0x24
 80103e2:	f89a 3000 	ldrb.w	r3, [sl]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	f000 80a2 	beq.w	8010530 <_svfiprintf_r+0x1c8>
 80103ec:	2300      	movs	r3, #0
 80103ee:	f04f 32ff 	mov.w	r2, #4294967295
 80103f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103f6:	f10a 0a01 	add.w	sl, sl, #1
 80103fa:	9304      	str	r3, [sp, #16]
 80103fc:	9307      	str	r3, [sp, #28]
 80103fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010402:	931a      	str	r3, [sp, #104]	; 0x68
 8010404:	4654      	mov	r4, sl
 8010406:	2205      	movs	r2, #5
 8010408:	f814 1b01 	ldrb.w	r1, [r4], #1
 801040c:	4851      	ldr	r0, [pc, #324]	; (8010554 <_svfiprintf_r+0x1ec>)
 801040e:	f7ef feef 	bl	80001f0 <memchr>
 8010412:	9a04      	ldr	r2, [sp, #16]
 8010414:	b9d8      	cbnz	r0, 801044e <_svfiprintf_r+0xe6>
 8010416:	06d0      	lsls	r0, r2, #27
 8010418:	bf44      	itt	mi
 801041a:	2320      	movmi	r3, #32
 801041c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010420:	0711      	lsls	r1, r2, #28
 8010422:	bf44      	itt	mi
 8010424:	232b      	movmi	r3, #43	; 0x2b
 8010426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801042a:	f89a 3000 	ldrb.w	r3, [sl]
 801042e:	2b2a      	cmp	r3, #42	; 0x2a
 8010430:	d015      	beq.n	801045e <_svfiprintf_r+0xf6>
 8010432:	9a07      	ldr	r2, [sp, #28]
 8010434:	4654      	mov	r4, sl
 8010436:	2000      	movs	r0, #0
 8010438:	f04f 0c0a 	mov.w	ip, #10
 801043c:	4621      	mov	r1, r4
 801043e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010442:	3b30      	subs	r3, #48	; 0x30
 8010444:	2b09      	cmp	r3, #9
 8010446:	d94e      	bls.n	80104e6 <_svfiprintf_r+0x17e>
 8010448:	b1b0      	cbz	r0, 8010478 <_svfiprintf_r+0x110>
 801044a:	9207      	str	r2, [sp, #28]
 801044c:	e014      	b.n	8010478 <_svfiprintf_r+0x110>
 801044e:	eba0 0308 	sub.w	r3, r0, r8
 8010452:	fa09 f303 	lsl.w	r3, r9, r3
 8010456:	4313      	orrs	r3, r2
 8010458:	9304      	str	r3, [sp, #16]
 801045a:	46a2      	mov	sl, r4
 801045c:	e7d2      	b.n	8010404 <_svfiprintf_r+0x9c>
 801045e:	9b03      	ldr	r3, [sp, #12]
 8010460:	1d19      	adds	r1, r3, #4
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	9103      	str	r1, [sp, #12]
 8010466:	2b00      	cmp	r3, #0
 8010468:	bfbb      	ittet	lt
 801046a:	425b      	neglt	r3, r3
 801046c:	f042 0202 	orrlt.w	r2, r2, #2
 8010470:	9307      	strge	r3, [sp, #28]
 8010472:	9307      	strlt	r3, [sp, #28]
 8010474:	bfb8      	it	lt
 8010476:	9204      	strlt	r2, [sp, #16]
 8010478:	7823      	ldrb	r3, [r4, #0]
 801047a:	2b2e      	cmp	r3, #46	; 0x2e
 801047c:	d10c      	bne.n	8010498 <_svfiprintf_r+0x130>
 801047e:	7863      	ldrb	r3, [r4, #1]
 8010480:	2b2a      	cmp	r3, #42	; 0x2a
 8010482:	d135      	bne.n	80104f0 <_svfiprintf_r+0x188>
 8010484:	9b03      	ldr	r3, [sp, #12]
 8010486:	1d1a      	adds	r2, r3, #4
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	9203      	str	r2, [sp, #12]
 801048c:	2b00      	cmp	r3, #0
 801048e:	bfb8      	it	lt
 8010490:	f04f 33ff 	movlt.w	r3, #4294967295
 8010494:	3402      	adds	r4, #2
 8010496:	9305      	str	r3, [sp, #20]
 8010498:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010564 <_svfiprintf_r+0x1fc>
 801049c:	7821      	ldrb	r1, [r4, #0]
 801049e:	2203      	movs	r2, #3
 80104a0:	4650      	mov	r0, sl
 80104a2:	f7ef fea5 	bl	80001f0 <memchr>
 80104a6:	b140      	cbz	r0, 80104ba <_svfiprintf_r+0x152>
 80104a8:	2340      	movs	r3, #64	; 0x40
 80104aa:	eba0 000a 	sub.w	r0, r0, sl
 80104ae:	fa03 f000 	lsl.w	r0, r3, r0
 80104b2:	9b04      	ldr	r3, [sp, #16]
 80104b4:	4303      	orrs	r3, r0
 80104b6:	3401      	adds	r4, #1
 80104b8:	9304      	str	r3, [sp, #16]
 80104ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104be:	4826      	ldr	r0, [pc, #152]	; (8010558 <_svfiprintf_r+0x1f0>)
 80104c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80104c4:	2206      	movs	r2, #6
 80104c6:	f7ef fe93 	bl	80001f0 <memchr>
 80104ca:	2800      	cmp	r0, #0
 80104cc:	d038      	beq.n	8010540 <_svfiprintf_r+0x1d8>
 80104ce:	4b23      	ldr	r3, [pc, #140]	; (801055c <_svfiprintf_r+0x1f4>)
 80104d0:	bb1b      	cbnz	r3, 801051a <_svfiprintf_r+0x1b2>
 80104d2:	9b03      	ldr	r3, [sp, #12]
 80104d4:	3307      	adds	r3, #7
 80104d6:	f023 0307 	bic.w	r3, r3, #7
 80104da:	3308      	adds	r3, #8
 80104dc:	9303      	str	r3, [sp, #12]
 80104de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104e0:	4433      	add	r3, r6
 80104e2:	9309      	str	r3, [sp, #36]	; 0x24
 80104e4:	e767      	b.n	80103b6 <_svfiprintf_r+0x4e>
 80104e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80104ea:	460c      	mov	r4, r1
 80104ec:	2001      	movs	r0, #1
 80104ee:	e7a5      	b.n	801043c <_svfiprintf_r+0xd4>
 80104f0:	2300      	movs	r3, #0
 80104f2:	3401      	adds	r4, #1
 80104f4:	9305      	str	r3, [sp, #20]
 80104f6:	4619      	mov	r1, r3
 80104f8:	f04f 0c0a 	mov.w	ip, #10
 80104fc:	4620      	mov	r0, r4
 80104fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010502:	3a30      	subs	r2, #48	; 0x30
 8010504:	2a09      	cmp	r2, #9
 8010506:	d903      	bls.n	8010510 <_svfiprintf_r+0x1a8>
 8010508:	2b00      	cmp	r3, #0
 801050a:	d0c5      	beq.n	8010498 <_svfiprintf_r+0x130>
 801050c:	9105      	str	r1, [sp, #20]
 801050e:	e7c3      	b.n	8010498 <_svfiprintf_r+0x130>
 8010510:	fb0c 2101 	mla	r1, ip, r1, r2
 8010514:	4604      	mov	r4, r0
 8010516:	2301      	movs	r3, #1
 8010518:	e7f0      	b.n	80104fc <_svfiprintf_r+0x194>
 801051a:	ab03      	add	r3, sp, #12
 801051c:	9300      	str	r3, [sp, #0]
 801051e:	462a      	mov	r2, r5
 8010520:	4b0f      	ldr	r3, [pc, #60]	; (8010560 <_svfiprintf_r+0x1f8>)
 8010522:	a904      	add	r1, sp, #16
 8010524:	4638      	mov	r0, r7
 8010526:	f7fc fa55 	bl	800c9d4 <_printf_float>
 801052a:	1c42      	adds	r2, r0, #1
 801052c:	4606      	mov	r6, r0
 801052e:	d1d6      	bne.n	80104de <_svfiprintf_r+0x176>
 8010530:	89ab      	ldrh	r3, [r5, #12]
 8010532:	065b      	lsls	r3, r3, #25
 8010534:	f53f af2c 	bmi.w	8010390 <_svfiprintf_r+0x28>
 8010538:	9809      	ldr	r0, [sp, #36]	; 0x24
 801053a:	b01d      	add	sp, #116	; 0x74
 801053c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010540:	ab03      	add	r3, sp, #12
 8010542:	9300      	str	r3, [sp, #0]
 8010544:	462a      	mov	r2, r5
 8010546:	4b06      	ldr	r3, [pc, #24]	; (8010560 <_svfiprintf_r+0x1f8>)
 8010548:	a904      	add	r1, sp, #16
 801054a:	4638      	mov	r0, r7
 801054c:	f7fc fce6 	bl	800cf1c <_printf_i>
 8010550:	e7eb      	b.n	801052a <_svfiprintf_r+0x1c2>
 8010552:	bf00      	nop
 8010554:	08011834 	.word	0x08011834
 8010558:	0801183e 	.word	0x0801183e
 801055c:	0800c9d5 	.word	0x0800c9d5
 8010560:	080102b1 	.word	0x080102b1
 8010564:	0801183a 	.word	0x0801183a

08010568 <nan>:
 8010568:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010570 <nan+0x8>
 801056c:	4770      	bx	lr
 801056e:	bf00      	nop
 8010570:	00000000 	.word	0x00000000
 8010574:	7ff80000 	.word	0x7ff80000

08010578 <_sbrk_r>:
 8010578:	b538      	push	{r3, r4, r5, lr}
 801057a:	4d06      	ldr	r5, [pc, #24]	; (8010594 <_sbrk_r+0x1c>)
 801057c:	2300      	movs	r3, #0
 801057e:	4604      	mov	r4, r0
 8010580:	4608      	mov	r0, r1
 8010582:	602b      	str	r3, [r5, #0]
 8010584:	f7f4 fe76 	bl	8005274 <_sbrk>
 8010588:	1c43      	adds	r3, r0, #1
 801058a:	d102      	bne.n	8010592 <_sbrk_r+0x1a>
 801058c:	682b      	ldr	r3, [r5, #0]
 801058e:	b103      	cbz	r3, 8010592 <_sbrk_r+0x1a>
 8010590:	6023      	str	r3, [r4, #0]
 8010592:	bd38      	pop	{r3, r4, r5, pc}
 8010594:	2000110c 	.word	0x2000110c

08010598 <strncmp>:
 8010598:	b510      	push	{r4, lr}
 801059a:	b17a      	cbz	r2, 80105bc <strncmp+0x24>
 801059c:	4603      	mov	r3, r0
 801059e:	3901      	subs	r1, #1
 80105a0:	1884      	adds	r4, r0, r2
 80105a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80105a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80105aa:	4290      	cmp	r0, r2
 80105ac:	d101      	bne.n	80105b2 <strncmp+0x1a>
 80105ae:	42a3      	cmp	r3, r4
 80105b0:	d101      	bne.n	80105b6 <strncmp+0x1e>
 80105b2:	1a80      	subs	r0, r0, r2
 80105b4:	bd10      	pop	{r4, pc}
 80105b6:	2800      	cmp	r0, #0
 80105b8:	d1f3      	bne.n	80105a2 <strncmp+0xa>
 80105ba:	e7fa      	b.n	80105b2 <strncmp+0x1a>
 80105bc:	4610      	mov	r0, r2
 80105be:	e7f9      	b.n	80105b4 <strncmp+0x1c>

080105c0 <__ascii_wctomb>:
 80105c0:	b149      	cbz	r1, 80105d6 <__ascii_wctomb+0x16>
 80105c2:	2aff      	cmp	r2, #255	; 0xff
 80105c4:	bf85      	ittet	hi
 80105c6:	238a      	movhi	r3, #138	; 0x8a
 80105c8:	6003      	strhi	r3, [r0, #0]
 80105ca:	700a      	strbls	r2, [r1, #0]
 80105cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80105d0:	bf98      	it	ls
 80105d2:	2001      	movls	r0, #1
 80105d4:	4770      	bx	lr
 80105d6:	4608      	mov	r0, r1
 80105d8:	4770      	bx	lr
	...

080105dc <__assert_func>:
 80105dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105de:	4614      	mov	r4, r2
 80105e0:	461a      	mov	r2, r3
 80105e2:	4b09      	ldr	r3, [pc, #36]	; (8010608 <__assert_func+0x2c>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	4605      	mov	r5, r0
 80105e8:	68d8      	ldr	r0, [r3, #12]
 80105ea:	b14c      	cbz	r4, 8010600 <__assert_func+0x24>
 80105ec:	4b07      	ldr	r3, [pc, #28]	; (801060c <__assert_func+0x30>)
 80105ee:	9100      	str	r1, [sp, #0]
 80105f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80105f4:	4906      	ldr	r1, [pc, #24]	; (8010610 <__assert_func+0x34>)
 80105f6:	462b      	mov	r3, r5
 80105f8:	f000 f80e 	bl	8010618 <fiprintf>
 80105fc:	f000 fa8c 	bl	8010b18 <abort>
 8010600:	4b04      	ldr	r3, [pc, #16]	; (8010614 <__assert_func+0x38>)
 8010602:	461c      	mov	r4, r3
 8010604:	e7f3      	b.n	80105ee <__assert_func+0x12>
 8010606:	bf00      	nop
 8010608:	2000025c 	.word	0x2000025c
 801060c:	08011845 	.word	0x08011845
 8010610:	08011852 	.word	0x08011852
 8010614:	08011880 	.word	0x08011880

08010618 <fiprintf>:
 8010618:	b40e      	push	{r1, r2, r3}
 801061a:	b503      	push	{r0, r1, lr}
 801061c:	4601      	mov	r1, r0
 801061e:	ab03      	add	r3, sp, #12
 8010620:	4805      	ldr	r0, [pc, #20]	; (8010638 <fiprintf+0x20>)
 8010622:	f853 2b04 	ldr.w	r2, [r3], #4
 8010626:	6800      	ldr	r0, [r0, #0]
 8010628:	9301      	str	r3, [sp, #4]
 801062a:	f000 f885 	bl	8010738 <_vfiprintf_r>
 801062e:	b002      	add	sp, #8
 8010630:	f85d eb04 	ldr.w	lr, [sp], #4
 8010634:	b003      	add	sp, #12
 8010636:	4770      	bx	lr
 8010638:	2000025c 	.word	0x2000025c

0801063c <memmove>:
 801063c:	4288      	cmp	r0, r1
 801063e:	b510      	push	{r4, lr}
 8010640:	eb01 0402 	add.w	r4, r1, r2
 8010644:	d902      	bls.n	801064c <memmove+0x10>
 8010646:	4284      	cmp	r4, r0
 8010648:	4623      	mov	r3, r4
 801064a:	d807      	bhi.n	801065c <memmove+0x20>
 801064c:	1e43      	subs	r3, r0, #1
 801064e:	42a1      	cmp	r1, r4
 8010650:	d008      	beq.n	8010664 <memmove+0x28>
 8010652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010656:	f803 2f01 	strb.w	r2, [r3, #1]!
 801065a:	e7f8      	b.n	801064e <memmove+0x12>
 801065c:	4402      	add	r2, r0
 801065e:	4601      	mov	r1, r0
 8010660:	428a      	cmp	r2, r1
 8010662:	d100      	bne.n	8010666 <memmove+0x2a>
 8010664:	bd10      	pop	{r4, pc}
 8010666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801066a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801066e:	e7f7      	b.n	8010660 <memmove+0x24>

08010670 <__malloc_lock>:
 8010670:	4801      	ldr	r0, [pc, #4]	; (8010678 <__malloc_lock+0x8>)
 8010672:	f000 bc11 	b.w	8010e98 <__retarget_lock_acquire_recursive>
 8010676:	bf00      	nop
 8010678:	20001110 	.word	0x20001110

0801067c <__malloc_unlock>:
 801067c:	4801      	ldr	r0, [pc, #4]	; (8010684 <__malloc_unlock+0x8>)
 801067e:	f000 bc0c 	b.w	8010e9a <__retarget_lock_release_recursive>
 8010682:	bf00      	nop
 8010684:	20001110 	.word	0x20001110

08010688 <_realloc_r>:
 8010688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801068c:	4680      	mov	r8, r0
 801068e:	4614      	mov	r4, r2
 8010690:	460e      	mov	r6, r1
 8010692:	b921      	cbnz	r1, 801069e <_realloc_r+0x16>
 8010694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010698:	4611      	mov	r1, r2
 801069a:	f7ff bd95 	b.w	80101c8 <_malloc_r>
 801069e:	b92a      	cbnz	r2, 80106ac <_realloc_r+0x24>
 80106a0:	f7ff fd26 	bl	80100f0 <_free_r>
 80106a4:	4625      	mov	r5, r4
 80106a6:	4628      	mov	r0, r5
 80106a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106ac:	f000 fc5c 	bl	8010f68 <_malloc_usable_size_r>
 80106b0:	4284      	cmp	r4, r0
 80106b2:	4607      	mov	r7, r0
 80106b4:	d802      	bhi.n	80106bc <_realloc_r+0x34>
 80106b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80106ba:	d812      	bhi.n	80106e2 <_realloc_r+0x5a>
 80106bc:	4621      	mov	r1, r4
 80106be:	4640      	mov	r0, r8
 80106c0:	f7ff fd82 	bl	80101c8 <_malloc_r>
 80106c4:	4605      	mov	r5, r0
 80106c6:	2800      	cmp	r0, #0
 80106c8:	d0ed      	beq.n	80106a6 <_realloc_r+0x1e>
 80106ca:	42bc      	cmp	r4, r7
 80106cc:	4622      	mov	r2, r4
 80106ce:	4631      	mov	r1, r6
 80106d0:	bf28      	it	cs
 80106d2:	463a      	movcs	r2, r7
 80106d4:	f7fc f8c8 	bl	800c868 <memcpy>
 80106d8:	4631      	mov	r1, r6
 80106da:	4640      	mov	r0, r8
 80106dc:	f7ff fd08 	bl	80100f0 <_free_r>
 80106e0:	e7e1      	b.n	80106a6 <_realloc_r+0x1e>
 80106e2:	4635      	mov	r5, r6
 80106e4:	e7df      	b.n	80106a6 <_realloc_r+0x1e>

080106e6 <__sfputc_r>:
 80106e6:	6893      	ldr	r3, [r2, #8]
 80106e8:	3b01      	subs	r3, #1
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	b410      	push	{r4}
 80106ee:	6093      	str	r3, [r2, #8]
 80106f0:	da08      	bge.n	8010704 <__sfputc_r+0x1e>
 80106f2:	6994      	ldr	r4, [r2, #24]
 80106f4:	42a3      	cmp	r3, r4
 80106f6:	db01      	blt.n	80106fc <__sfputc_r+0x16>
 80106f8:	290a      	cmp	r1, #10
 80106fa:	d103      	bne.n	8010704 <__sfputc_r+0x1e>
 80106fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010700:	f000 b94a 	b.w	8010998 <__swbuf_r>
 8010704:	6813      	ldr	r3, [r2, #0]
 8010706:	1c58      	adds	r0, r3, #1
 8010708:	6010      	str	r0, [r2, #0]
 801070a:	7019      	strb	r1, [r3, #0]
 801070c:	4608      	mov	r0, r1
 801070e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010712:	4770      	bx	lr

08010714 <__sfputs_r>:
 8010714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010716:	4606      	mov	r6, r0
 8010718:	460f      	mov	r7, r1
 801071a:	4614      	mov	r4, r2
 801071c:	18d5      	adds	r5, r2, r3
 801071e:	42ac      	cmp	r4, r5
 8010720:	d101      	bne.n	8010726 <__sfputs_r+0x12>
 8010722:	2000      	movs	r0, #0
 8010724:	e007      	b.n	8010736 <__sfputs_r+0x22>
 8010726:	f814 1b01 	ldrb.w	r1, [r4], #1
 801072a:	463a      	mov	r2, r7
 801072c:	4630      	mov	r0, r6
 801072e:	f7ff ffda 	bl	80106e6 <__sfputc_r>
 8010732:	1c43      	adds	r3, r0, #1
 8010734:	d1f3      	bne.n	801071e <__sfputs_r+0xa>
 8010736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010738 <_vfiprintf_r>:
 8010738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801073c:	460d      	mov	r5, r1
 801073e:	b09d      	sub	sp, #116	; 0x74
 8010740:	4614      	mov	r4, r2
 8010742:	4698      	mov	r8, r3
 8010744:	4606      	mov	r6, r0
 8010746:	b118      	cbz	r0, 8010750 <_vfiprintf_r+0x18>
 8010748:	6983      	ldr	r3, [r0, #24]
 801074a:	b90b      	cbnz	r3, 8010750 <_vfiprintf_r+0x18>
 801074c:	f000 fb06 	bl	8010d5c <__sinit>
 8010750:	4b89      	ldr	r3, [pc, #548]	; (8010978 <_vfiprintf_r+0x240>)
 8010752:	429d      	cmp	r5, r3
 8010754:	d11b      	bne.n	801078e <_vfiprintf_r+0x56>
 8010756:	6875      	ldr	r5, [r6, #4]
 8010758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801075a:	07d9      	lsls	r1, r3, #31
 801075c:	d405      	bmi.n	801076a <_vfiprintf_r+0x32>
 801075e:	89ab      	ldrh	r3, [r5, #12]
 8010760:	059a      	lsls	r2, r3, #22
 8010762:	d402      	bmi.n	801076a <_vfiprintf_r+0x32>
 8010764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010766:	f000 fb97 	bl	8010e98 <__retarget_lock_acquire_recursive>
 801076a:	89ab      	ldrh	r3, [r5, #12]
 801076c:	071b      	lsls	r3, r3, #28
 801076e:	d501      	bpl.n	8010774 <_vfiprintf_r+0x3c>
 8010770:	692b      	ldr	r3, [r5, #16]
 8010772:	b9eb      	cbnz	r3, 80107b0 <_vfiprintf_r+0x78>
 8010774:	4629      	mov	r1, r5
 8010776:	4630      	mov	r0, r6
 8010778:	f000 f960 	bl	8010a3c <__swsetup_r>
 801077c:	b1c0      	cbz	r0, 80107b0 <_vfiprintf_r+0x78>
 801077e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010780:	07dc      	lsls	r4, r3, #31
 8010782:	d50e      	bpl.n	80107a2 <_vfiprintf_r+0x6a>
 8010784:	f04f 30ff 	mov.w	r0, #4294967295
 8010788:	b01d      	add	sp, #116	; 0x74
 801078a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801078e:	4b7b      	ldr	r3, [pc, #492]	; (801097c <_vfiprintf_r+0x244>)
 8010790:	429d      	cmp	r5, r3
 8010792:	d101      	bne.n	8010798 <_vfiprintf_r+0x60>
 8010794:	68b5      	ldr	r5, [r6, #8]
 8010796:	e7df      	b.n	8010758 <_vfiprintf_r+0x20>
 8010798:	4b79      	ldr	r3, [pc, #484]	; (8010980 <_vfiprintf_r+0x248>)
 801079a:	429d      	cmp	r5, r3
 801079c:	bf08      	it	eq
 801079e:	68f5      	ldreq	r5, [r6, #12]
 80107a0:	e7da      	b.n	8010758 <_vfiprintf_r+0x20>
 80107a2:	89ab      	ldrh	r3, [r5, #12]
 80107a4:	0598      	lsls	r0, r3, #22
 80107a6:	d4ed      	bmi.n	8010784 <_vfiprintf_r+0x4c>
 80107a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80107aa:	f000 fb76 	bl	8010e9a <__retarget_lock_release_recursive>
 80107ae:	e7e9      	b.n	8010784 <_vfiprintf_r+0x4c>
 80107b0:	2300      	movs	r3, #0
 80107b2:	9309      	str	r3, [sp, #36]	; 0x24
 80107b4:	2320      	movs	r3, #32
 80107b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80107ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80107be:	2330      	movs	r3, #48	; 0x30
 80107c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010984 <_vfiprintf_r+0x24c>
 80107c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80107c8:	f04f 0901 	mov.w	r9, #1
 80107cc:	4623      	mov	r3, r4
 80107ce:	469a      	mov	sl, r3
 80107d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107d4:	b10a      	cbz	r2, 80107da <_vfiprintf_r+0xa2>
 80107d6:	2a25      	cmp	r2, #37	; 0x25
 80107d8:	d1f9      	bne.n	80107ce <_vfiprintf_r+0x96>
 80107da:	ebba 0b04 	subs.w	fp, sl, r4
 80107de:	d00b      	beq.n	80107f8 <_vfiprintf_r+0xc0>
 80107e0:	465b      	mov	r3, fp
 80107e2:	4622      	mov	r2, r4
 80107e4:	4629      	mov	r1, r5
 80107e6:	4630      	mov	r0, r6
 80107e8:	f7ff ff94 	bl	8010714 <__sfputs_r>
 80107ec:	3001      	adds	r0, #1
 80107ee:	f000 80aa 	beq.w	8010946 <_vfiprintf_r+0x20e>
 80107f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107f4:	445a      	add	r2, fp
 80107f6:	9209      	str	r2, [sp, #36]	; 0x24
 80107f8:	f89a 3000 	ldrb.w	r3, [sl]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	f000 80a2 	beq.w	8010946 <_vfiprintf_r+0x20e>
 8010802:	2300      	movs	r3, #0
 8010804:	f04f 32ff 	mov.w	r2, #4294967295
 8010808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801080c:	f10a 0a01 	add.w	sl, sl, #1
 8010810:	9304      	str	r3, [sp, #16]
 8010812:	9307      	str	r3, [sp, #28]
 8010814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010818:	931a      	str	r3, [sp, #104]	; 0x68
 801081a:	4654      	mov	r4, sl
 801081c:	2205      	movs	r2, #5
 801081e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010822:	4858      	ldr	r0, [pc, #352]	; (8010984 <_vfiprintf_r+0x24c>)
 8010824:	f7ef fce4 	bl	80001f0 <memchr>
 8010828:	9a04      	ldr	r2, [sp, #16]
 801082a:	b9d8      	cbnz	r0, 8010864 <_vfiprintf_r+0x12c>
 801082c:	06d1      	lsls	r1, r2, #27
 801082e:	bf44      	itt	mi
 8010830:	2320      	movmi	r3, #32
 8010832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010836:	0713      	lsls	r3, r2, #28
 8010838:	bf44      	itt	mi
 801083a:	232b      	movmi	r3, #43	; 0x2b
 801083c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010840:	f89a 3000 	ldrb.w	r3, [sl]
 8010844:	2b2a      	cmp	r3, #42	; 0x2a
 8010846:	d015      	beq.n	8010874 <_vfiprintf_r+0x13c>
 8010848:	9a07      	ldr	r2, [sp, #28]
 801084a:	4654      	mov	r4, sl
 801084c:	2000      	movs	r0, #0
 801084e:	f04f 0c0a 	mov.w	ip, #10
 8010852:	4621      	mov	r1, r4
 8010854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010858:	3b30      	subs	r3, #48	; 0x30
 801085a:	2b09      	cmp	r3, #9
 801085c:	d94e      	bls.n	80108fc <_vfiprintf_r+0x1c4>
 801085e:	b1b0      	cbz	r0, 801088e <_vfiprintf_r+0x156>
 8010860:	9207      	str	r2, [sp, #28]
 8010862:	e014      	b.n	801088e <_vfiprintf_r+0x156>
 8010864:	eba0 0308 	sub.w	r3, r0, r8
 8010868:	fa09 f303 	lsl.w	r3, r9, r3
 801086c:	4313      	orrs	r3, r2
 801086e:	9304      	str	r3, [sp, #16]
 8010870:	46a2      	mov	sl, r4
 8010872:	e7d2      	b.n	801081a <_vfiprintf_r+0xe2>
 8010874:	9b03      	ldr	r3, [sp, #12]
 8010876:	1d19      	adds	r1, r3, #4
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	9103      	str	r1, [sp, #12]
 801087c:	2b00      	cmp	r3, #0
 801087e:	bfbb      	ittet	lt
 8010880:	425b      	neglt	r3, r3
 8010882:	f042 0202 	orrlt.w	r2, r2, #2
 8010886:	9307      	strge	r3, [sp, #28]
 8010888:	9307      	strlt	r3, [sp, #28]
 801088a:	bfb8      	it	lt
 801088c:	9204      	strlt	r2, [sp, #16]
 801088e:	7823      	ldrb	r3, [r4, #0]
 8010890:	2b2e      	cmp	r3, #46	; 0x2e
 8010892:	d10c      	bne.n	80108ae <_vfiprintf_r+0x176>
 8010894:	7863      	ldrb	r3, [r4, #1]
 8010896:	2b2a      	cmp	r3, #42	; 0x2a
 8010898:	d135      	bne.n	8010906 <_vfiprintf_r+0x1ce>
 801089a:	9b03      	ldr	r3, [sp, #12]
 801089c:	1d1a      	adds	r2, r3, #4
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	9203      	str	r2, [sp, #12]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	bfb8      	it	lt
 80108a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80108aa:	3402      	adds	r4, #2
 80108ac:	9305      	str	r3, [sp, #20]
 80108ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010994 <_vfiprintf_r+0x25c>
 80108b2:	7821      	ldrb	r1, [r4, #0]
 80108b4:	2203      	movs	r2, #3
 80108b6:	4650      	mov	r0, sl
 80108b8:	f7ef fc9a 	bl	80001f0 <memchr>
 80108bc:	b140      	cbz	r0, 80108d0 <_vfiprintf_r+0x198>
 80108be:	2340      	movs	r3, #64	; 0x40
 80108c0:	eba0 000a 	sub.w	r0, r0, sl
 80108c4:	fa03 f000 	lsl.w	r0, r3, r0
 80108c8:	9b04      	ldr	r3, [sp, #16]
 80108ca:	4303      	orrs	r3, r0
 80108cc:	3401      	adds	r4, #1
 80108ce:	9304      	str	r3, [sp, #16]
 80108d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108d4:	482c      	ldr	r0, [pc, #176]	; (8010988 <_vfiprintf_r+0x250>)
 80108d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80108da:	2206      	movs	r2, #6
 80108dc:	f7ef fc88 	bl	80001f0 <memchr>
 80108e0:	2800      	cmp	r0, #0
 80108e2:	d03f      	beq.n	8010964 <_vfiprintf_r+0x22c>
 80108e4:	4b29      	ldr	r3, [pc, #164]	; (801098c <_vfiprintf_r+0x254>)
 80108e6:	bb1b      	cbnz	r3, 8010930 <_vfiprintf_r+0x1f8>
 80108e8:	9b03      	ldr	r3, [sp, #12]
 80108ea:	3307      	adds	r3, #7
 80108ec:	f023 0307 	bic.w	r3, r3, #7
 80108f0:	3308      	adds	r3, #8
 80108f2:	9303      	str	r3, [sp, #12]
 80108f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108f6:	443b      	add	r3, r7
 80108f8:	9309      	str	r3, [sp, #36]	; 0x24
 80108fa:	e767      	b.n	80107cc <_vfiprintf_r+0x94>
 80108fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8010900:	460c      	mov	r4, r1
 8010902:	2001      	movs	r0, #1
 8010904:	e7a5      	b.n	8010852 <_vfiprintf_r+0x11a>
 8010906:	2300      	movs	r3, #0
 8010908:	3401      	adds	r4, #1
 801090a:	9305      	str	r3, [sp, #20]
 801090c:	4619      	mov	r1, r3
 801090e:	f04f 0c0a 	mov.w	ip, #10
 8010912:	4620      	mov	r0, r4
 8010914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010918:	3a30      	subs	r2, #48	; 0x30
 801091a:	2a09      	cmp	r2, #9
 801091c:	d903      	bls.n	8010926 <_vfiprintf_r+0x1ee>
 801091e:	2b00      	cmp	r3, #0
 8010920:	d0c5      	beq.n	80108ae <_vfiprintf_r+0x176>
 8010922:	9105      	str	r1, [sp, #20]
 8010924:	e7c3      	b.n	80108ae <_vfiprintf_r+0x176>
 8010926:	fb0c 2101 	mla	r1, ip, r1, r2
 801092a:	4604      	mov	r4, r0
 801092c:	2301      	movs	r3, #1
 801092e:	e7f0      	b.n	8010912 <_vfiprintf_r+0x1da>
 8010930:	ab03      	add	r3, sp, #12
 8010932:	9300      	str	r3, [sp, #0]
 8010934:	462a      	mov	r2, r5
 8010936:	4b16      	ldr	r3, [pc, #88]	; (8010990 <_vfiprintf_r+0x258>)
 8010938:	a904      	add	r1, sp, #16
 801093a:	4630      	mov	r0, r6
 801093c:	f7fc f84a 	bl	800c9d4 <_printf_float>
 8010940:	4607      	mov	r7, r0
 8010942:	1c78      	adds	r0, r7, #1
 8010944:	d1d6      	bne.n	80108f4 <_vfiprintf_r+0x1bc>
 8010946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010948:	07d9      	lsls	r1, r3, #31
 801094a:	d405      	bmi.n	8010958 <_vfiprintf_r+0x220>
 801094c:	89ab      	ldrh	r3, [r5, #12]
 801094e:	059a      	lsls	r2, r3, #22
 8010950:	d402      	bmi.n	8010958 <_vfiprintf_r+0x220>
 8010952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010954:	f000 faa1 	bl	8010e9a <__retarget_lock_release_recursive>
 8010958:	89ab      	ldrh	r3, [r5, #12]
 801095a:	065b      	lsls	r3, r3, #25
 801095c:	f53f af12 	bmi.w	8010784 <_vfiprintf_r+0x4c>
 8010960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010962:	e711      	b.n	8010788 <_vfiprintf_r+0x50>
 8010964:	ab03      	add	r3, sp, #12
 8010966:	9300      	str	r3, [sp, #0]
 8010968:	462a      	mov	r2, r5
 801096a:	4b09      	ldr	r3, [pc, #36]	; (8010990 <_vfiprintf_r+0x258>)
 801096c:	a904      	add	r1, sp, #16
 801096e:	4630      	mov	r0, r6
 8010970:	f7fc fad4 	bl	800cf1c <_printf_i>
 8010974:	e7e4      	b.n	8010940 <_vfiprintf_r+0x208>
 8010976:	bf00      	nop
 8010978:	080118a4 	.word	0x080118a4
 801097c:	080118c4 	.word	0x080118c4
 8010980:	08011884 	.word	0x08011884
 8010984:	08011834 	.word	0x08011834
 8010988:	0801183e 	.word	0x0801183e
 801098c:	0800c9d5 	.word	0x0800c9d5
 8010990:	08010715 	.word	0x08010715
 8010994:	0801183a 	.word	0x0801183a

08010998 <__swbuf_r>:
 8010998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801099a:	460e      	mov	r6, r1
 801099c:	4614      	mov	r4, r2
 801099e:	4605      	mov	r5, r0
 80109a0:	b118      	cbz	r0, 80109aa <__swbuf_r+0x12>
 80109a2:	6983      	ldr	r3, [r0, #24]
 80109a4:	b90b      	cbnz	r3, 80109aa <__swbuf_r+0x12>
 80109a6:	f000 f9d9 	bl	8010d5c <__sinit>
 80109aa:	4b21      	ldr	r3, [pc, #132]	; (8010a30 <__swbuf_r+0x98>)
 80109ac:	429c      	cmp	r4, r3
 80109ae:	d12b      	bne.n	8010a08 <__swbuf_r+0x70>
 80109b0:	686c      	ldr	r4, [r5, #4]
 80109b2:	69a3      	ldr	r3, [r4, #24]
 80109b4:	60a3      	str	r3, [r4, #8]
 80109b6:	89a3      	ldrh	r3, [r4, #12]
 80109b8:	071a      	lsls	r2, r3, #28
 80109ba:	d52f      	bpl.n	8010a1c <__swbuf_r+0x84>
 80109bc:	6923      	ldr	r3, [r4, #16]
 80109be:	b36b      	cbz	r3, 8010a1c <__swbuf_r+0x84>
 80109c0:	6923      	ldr	r3, [r4, #16]
 80109c2:	6820      	ldr	r0, [r4, #0]
 80109c4:	1ac0      	subs	r0, r0, r3
 80109c6:	6963      	ldr	r3, [r4, #20]
 80109c8:	b2f6      	uxtb	r6, r6
 80109ca:	4283      	cmp	r3, r0
 80109cc:	4637      	mov	r7, r6
 80109ce:	dc04      	bgt.n	80109da <__swbuf_r+0x42>
 80109d0:	4621      	mov	r1, r4
 80109d2:	4628      	mov	r0, r5
 80109d4:	f000 f92e 	bl	8010c34 <_fflush_r>
 80109d8:	bb30      	cbnz	r0, 8010a28 <__swbuf_r+0x90>
 80109da:	68a3      	ldr	r3, [r4, #8]
 80109dc:	3b01      	subs	r3, #1
 80109de:	60a3      	str	r3, [r4, #8]
 80109e0:	6823      	ldr	r3, [r4, #0]
 80109e2:	1c5a      	adds	r2, r3, #1
 80109e4:	6022      	str	r2, [r4, #0]
 80109e6:	701e      	strb	r6, [r3, #0]
 80109e8:	6963      	ldr	r3, [r4, #20]
 80109ea:	3001      	adds	r0, #1
 80109ec:	4283      	cmp	r3, r0
 80109ee:	d004      	beq.n	80109fa <__swbuf_r+0x62>
 80109f0:	89a3      	ldrh	r3, [r4, #12]
 80109f2:	07db      	lsls	r3, r3, #31
 80109f4:	d506      	bpl.n	8010a04 <__swbuf_r+0x6c>
 80109f6:	2e0a      	cmp	r6, #10
 80109f8:	d104      	bne.n	8010a04 <__swbuf_r+0x6c>
 80109fa:	4621      	mov	r1, r4
 80109fc:	4628      	mov	r0, r5
 80109fe:	f000 f919 	bl	8010c34 <_fflush_r>
 8010a02:	b988      	cbnz	r0, 8010a28 <__swbuf_r+0x90>
 8010a04:	4638      	mov	r0, r7
 8010a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a08:	4b0a      	ldr	r3, [pc, #40]	; (8010a34 <__swbuf_r+0x9c>)
 8010a0a:	429c      	cmp	r4, r3
 8010a0c:	d101      	bne.n	8010a12 <__swbuf_r+0x7a>
 8010a0e:	68ac      	ldr	r4, [r5, #8]
 8010a10:	e7cf      	b.n	80109b2 <__swbuf_r+0x1a>
 8010a12:	4b09      	ldr	r3, [pc, #36]	; (8010a38 <__swbuf_r+0xa0>)
 8010a14:	429c      	cmp	r4, r3
 8010a16:	bf08      	it	eq
 8010a18:	68ec      	ldreq	r4, [r5, #12]
 8010a1a:	e7ca      	b.n	80109b2 <__swbuf_r+0x1a>
 8010a1c:	4621      	mov	r1, r4
 8010a1e:	4628      	mov	r0, r5
 8010a20:	f000 f80c 	bl	8010a3c <__swsetup_r>
 8010a24:	2800      	cmp	r0, #0
 8010a26:	d0cb      	beq.n	80109c0 <__swbuf_r+0x28>
 8010a28:	f04f 37ff 	mov.w	r7, #4294967295
 8010a2c:	e7ea      	b.n	8010a04 <__swbuf_r+0x6c>
 8010a2e:	bf00      	nop
 8010a30:	080118a4 	.word	0x080118a4
 8010a34:	080118c4 	.word	0x080118c4
 8010a38:	08011884 	.word	0x08011884

08010a3c <__swsetup_r>:
 8010a3c:	4b32      	ldr	r3, [pc, #200]	; (8010b08 <__swsetup_r+0xcc>)
 8010a3e:	b570      	push	{r4, r5, r6, lr}
 8010a40:	681d      	ldr	r5, [r3, #0]
 8010a42:	4606      	mov	r6, r0
 8010a44:	460c      	mov	r4, r1
 8010a46:	b125      	cbz	r5, 8010a52 <__swsetup_r+0x16>
 8010a48:	69ab      	ldr	r3, [r5, #24]
 8010a4a:	b913      	cbnz	r3, 8010a52 <__swsetup_r+0x16>
 8010a4c:	4628      	mov	r0, r5
 8010a4e:	f000 f985 	bl	8010d5c <__sinit>
 8010a52:	4b2e      	ldr	r3, [pc, #184]	; (8010b0c <__swsetup_r+0xd0>)
 8010a54:	429c      	cmp	r4, r3
 8010a56:	d10f      	bne.n	8010a78 <__swsetup_r+0x3c>
 8010a58:	686c      	ldr	r4, [r5, #4]
 8010a5a:	89a3      	ldrh	r3, [r4, #12]
 8010a5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a60:	0719      	lsls	r1, r3, #28
 8010a62:	d42c      	bmi.n	8010abe <__swsetup_r+0x82>
 8010a64:	06dd      	lsls	r5, r3, #27
 8010a66:	d411      	bmi.n	8010a8c <__swsetup_r+0x50>
 8010a68:	2309      	movs	r3, #9
 8010a6a:	6033      	str	r3, [r6, #0]
 8010a6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010a70:	81a3      	strh	r3, [r4, #12]
 8010a72:	f04f 30ff 	mov.w	r0, #4294967295
 8010a76:	e03e      	b.n	8010af6 <__swsetup_r+0xba>
 8010a78:	4b25      	ldr	r3, [pc, #148]	; (8010b10 <__swsetup_r+0xd4>)
 8010a7a:	429c      	cmp	r4, r3
 8010a7c:	d101      	bne.n	8010a82 <__swsetup_r+0x46>
 8010a7e:	68ac      	ldr	r4, [r5, #8]
 8010a80:	e7eb      	b.n	8010a5a <__swsetup_r+0x1e>
 8010a82:	4b24      	ldr	r3, [pc, #144]	; (8010b14 <__swsetup_r+0xd8>)
 8010a84:	429c      	cmp	r4, r3
 8010a86:	bf08      	it	eq
 8010a88:	68ec      	ldreq	r4, [r5, #12]
 8010a8a:	e7e6      	b.n	8010a5a <__swsetup_r+0x1e>
 8010a8c:	0758      	lsls	r0, r3, #29
 8010a8e:	d512      	bpl.n	8010ab6 <__swsetup_r+0x7a>
 8010a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a92:	b141      	cbz	r1, 8010aa6 <__swsetup_r+0x6a>
 8010a94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a98:	4299      	cmp	r1, r3
 8010a9a:	d002      	beq.n	8010aa2 <__swsetup_r+0x66>
 8010a9c:	4630      	mov	r0, r6
 8010a9e:	f7ff fb27 	bl	80100f0 <_free_r>
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	6363      	str	r3, [r4, #52]	; 0x34
 8010aa6:	89a3      	ldrh	r3, [r4, #12]
 8010aa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010aac:	81a3      	strh	r3, [r4, #12]
 8010aae:	2300      	movs	r3, #0
 8010ab0:	6063      	str	r3, [r4, #4]
 8010ab2:	6923      	ldr	r3, [r4, #16]
 8010ab4:	6023      	str	r3, [r4, #0]
 8010ab6:	89a3      	ldrh	r3, [r4, #12]
 8010ab8:	f043 0308 	orr.w	r3, r3, #8
 8010abc:	81a3      	strh	r3, [r4, #12]
 8010abe:	6923      	ldr	r3, [r4, #16]
 8010ac0:	b94b      	cbnz	r3, 8010ad6 <__swsetup_r+0x9a>
 8010ac2:	89a3      	ldrh	r3, [r4, #12]
 8010ac4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010acc:	d003      	beq.n	8010ad6 <__swsetup_r+0x9a>
 8010ace:	4621      	mov	r1, r4
 8010ad0:	4630      	mov	r0, r6
 8010ad2:	f000 fa09 	bl	8010ee8 <__smakebuf_r>
 8010ad6:	89a0      	ldrh	r0, [r4, #12]
 8010ad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010adc:	f010 0301 	ands.w	r3, r0, #1
 8010ae0:	d00a      	beq.n	8010af8 <__swsetup_r+0xbc>
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	60a3      	str	r3, [r4, #8]
 8010ae6:	6963      	ldr	r3, [r4, #20]
 8010ae8:	425b      	negs	r3, r3
 8010aea:	61a3      	str	r3, [r4, #24]
 8010aec:	6923      	ldr	r3, [r4, #16]
 8010aee:	b943      	cbnz	r3, 8010b02 <__swsetup_r+0xc6>
 8010af0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010af4:	d1ba      	bne.n	8010a6c <__swsetup_r+0x30>
 8010af6:	bd70      	pop	{r4, r5, r6, pc}
 8010af8:	0781      	lsls	r1, r0, #30
 8010afa:	bf58      	it	pl
 8010afc:	6963      	ldrpl	r3, [r4, #20]
 8010afe:	60a3      	str	r3, [r4, #8]
 8010b00:	e7f4      	b.n	8010aec <__swsetup_r+0xb0>
 8010b02:	2000      	movs	r0, #0
 8010b04:	e7f7      	b.n	8010af6 <__swsetup_r+0xba>
 8010b06:	bf00      	nop
 8010b08:	2000025c 	.word	0x2000025c
 8010b0c:	080118a4 	.word	0x080118a4
 8010b10:	080118c4 	.word	0x080118c4
 8010b14:	08011884 	.word	0x08011884

08010b18 <abort>:
 8010b18:	b508      	push	{r3, lr}
 8010b1a:	2006      	movs	r0, #6
 8010b1c:	f000 fa54 	bl	8010fc8 <raise>
 8010b20:	2001      	movs	r0, #1
 8010b22:	f7f4 fb2f 	bl	8005184 <_exit>
	...

08010b28 <__sflush_r>:
 8010b28:	898a      	ldrh	r2, [r1, #12]
 8010b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b2e:	4605      	mov	r5, r0
 8010b30:	0710      	lsls	r0, r2, #28
 8010b32:	460c      	mov	r4, r1
 8010b34:	d458      	bmi.n	8010be8 <__sflush_r+0xc0>
 8010b36:	684b      	ldr	r3, [r1, #4]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	dc05      	bgt.n	8010b48 <__sflush_r+0x20>
 8010b3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	dc02      	bgt.n	8010b48 <__sflush_r+0x20>
 8010b42:	2000      	movs	r0, #0
 8010b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b4a:	2e00      	cmp	r6, #0
 8010b4c:	d0f9      	beq.n	8010b42 <__sflush_r+0x1a>
 8010b4e:	2300      	movs	r3, #0
 8010b50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010b54:	682f      	ldr	r7, [r5, #0]
 8010b56:	602b      	str	r3, [r5, #0]
 8010b58:	d032      	beq.n	8010bc0 <__sflush_r+0x98>
 8010b5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010b5c:	89a3      	ldrh	r3, [r4, #12]
 8010b5e:	075a      	lsls	r2, r3, #29
 8010b60:	d505      	bpl.n	8010b6e <__sflush_r+0x46>
 8010b62:	6863      	ldr	r3, [r4, #4]
 8010b64:	1ac0      	subs	r0, r0, r3
 8010b66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010b68:	b10b      	cbz	r3, 8010b6e <__sflush_r+0x46>
 8010b6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010b6c:	1ac0      	subs	r0, r0, r3
 8010b6e:	2300      	movs	r3, #0
 8010b70:	4602      	mov	r2, r0
 8010b72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b74:	6a21      	ldr	r1, [r4, #32]
 8010b76:	4628      	mov	r0, r5
 8010b78:	47b0      	blx	r6
 8010b7a:	1c43      	adds	r3, r0, #1
 8010b7c:	89a3      	ldrh	r3, [r4, #12]
 8010b7e:	d106      	bne.n	8010b8e <__sflush_r+0x66>
 8010b80:	6829      	ldr	r1, [r5, #0]
 8010b82:	291d      	cmp	r1, #29
 8010b84:	d82c      	bhi.n	8010be0 <__sflush_r+0xb8>
 8010b86:	4a2a      	ldr	r2, [pc, #168]	; (8010c30 <__sflush_r+0x108>)
 8010b88:	40ca      	lsrs	r2, r1
 8010b8a:	07d6      	lsls	r6, r2, #31
 8010b8c:	d528      	bpl.n	8010be0 <__sflush_r+0xb8>
 8010b8e:	2200      	movs	r2, #0
 8010b90:	6062      	str	r2, [r4, #4]
 8010b92:	04d9      	lsls	r1, r3, #19
 8010b94:	6922      	ldr	r2, [r4, #16]
 8010b96:	6022      	str	r2, [r4, #0]
 8010b98:	d504      	bpl.n	8010ba4 <__sflush_r+0x7c>
 8010b9a:	1c42      	adds	r2, r0, #1
 8010b9c:	d101      	bne.n	8010ba2 <__sflush_r+0x7a>
 8010b9e:	682b      	ldr	r3, [r5, #0]
 8010ba0:	b903      	cbnz	r3, 8010ba4 <__sflush_r+0x7c>
 8010ba2:	6560      	str	r0, [r4, #84]	; 0x54
 8010ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ba6:	602f      	str	r7, [r5, #0]
 8010ba8:	2900      	cmp	r1, #0
 8010baa:	d0ca      	beq.n	8010b42 <__sflush_r+0x1a>
 8010bac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010bb0:	4299      	cmp	r1, r3
 8010bb2:	d002      	beq.n	8010bba <__sflush_r+0x92>
 8010bb4:	4628      	mov	r0, r5
 8010bb6:	f7ff fa9b 	bl	80100f0 <_free_r>
 8010bba:	2000      	movs	r0, #0
 8010bbc:	6360      	str	r0, [r4, #52]	; 0x34
 8010bbe:	e7c1      	b.n	8010b44 <__sflush_r+0x1c>
 8010bc0:	6a21      	ldr	r1, [r4, #32]
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	4628      	mov	r0, r5
 8010bc6:	47b0      	blx	r6
 8010bc8:	1c41      	adds	r1, r0, #1
 8010bca:	d1c7      	bne.n	8010b5c <__sflush_r+0x34>
 8010bcc:	682b      	ldr	r3, [r5, #0]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d0c4      	beq.n	8010b5c <__sflush_r+0x34>
 8010bd2:	2b1d      	cmp	r3, #29
 8010bd4:	d001      	beq.n	8010bda <__sflush_r+0xb2>
 8010bd6:	2b16      	cmp	r3, #22
 8010bd8:	d101      	bne.n	8010bde <__sflush_r+0xb6>
 8010bda:	602f      	str	r7, [r5, #0]
 8010bdc:	e7b1      	b.n	8010b42 <__sflush_r+0x1a>
 8010bde:	89a3      	ldrh	r3, [r4, #12]
 8010be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010be4:	81a3      	strh	r3, [r4, #12]
 8010be6:	e7ad      	b.n	8010b44 <__sflush_r+0x1c>
 8010be8:	690f      	ldr	r7, [r1, #16]
 8010bea:	2f00      	cmp	r7, #0
 8010bec:	d0a9      	beq.n	8010b42 <__sflush_r+0x1a>
 8010bee:	0793      	lsls	r3, r2, #30
 8010bf0:	680e      	ldr	r6, [r1, #0]
 8010bf2:	bf08      	it	eq
 8010bf4:	694b      	ldreq	r3, [r1, #20]
 8010bf6:	600f      	str	r7, [r1, #0]
 8010bf8:	bf18      	it	ne
 8010bfa:	2300      	movne	r3, #0
 8010bfc:	eba6 0807 	sub.w	r8, r6, r7
 8010c00:	608b      	str	r3, [r1, #8]
 8010c02:	f1b8 0f00 	cmp.w	r8, #0
 8010c06:	dd9c      	ble.n	8010b42 <__sflush_r+0x1a>
 8010c08:	6a21      	ldr	r1, [r4, #32]
 8010c0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010c0c:	4643      	mov	r3, r8
 8010c0e:	463a      	mov	r2, r7
 8010c10:	4628      	mov	r0, r5
 8010c12:	47b0      	blx	r6
 8010c14:	2800      	cmp	r0, #0
 8010c16:	dc06      	bgt.n	8010c26 <__sflush_r+0xfe>
 8010c18:	89a3      	ldrh	r3, [r4, #12]
 8010c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c1e:	81a3      	strh	r3, [r4, #12]
 8010c20:	f04f 30ff 	mov.w	r0, #4294967295
 8010c24:	e78e      	b.n	8010b44 <__sflush_r+0x1c>
 8010c26:	4407      	add	r7, r0
 8010c28:	eba8 0800 	sub.w	r8, r8, r0
 8010c2c:	e7e9      	b.n	8010c02 <__sflush_r+0xda>
 8010c2e:	bf00      	nop
 8010c30:	20400001 	.word	0x20400001

08010c34 <_fflush_r>:
 8010c34:	b538      	push	{r3, r4, r5, lr}
 8010c36:	690b      	ldr	r3, [r1, #16]
 8010c38:	4605      	mov	r5, r0
 8010c3a:	460c      	mov	r4, r1
 8010c3c:	b913      	cbnz	r3, 8010c44 <_fflush_r+0x10>
 8010c3e:	2500      	movs	r5, #0
 8010c40:	4628      	mov	r0, r5
 8010c42:	bd38      	pop	{r3, r4, r5, pc}
 8010c44:	b118      	cbz	r0, 8010c4e <_fflush_r+0x1a>
 8010c46:	6983      	ldr	r3, [r0, #24]
 8010c48:	b90b      	cbnz	r3, 8010c4e <_fflush_r+0x1a>
 8010c4a:	f000 f887 	bl	8010d5c <__sinit>
 8010c4e:	4b14      	ldr	r3, [pc, #80]	; (8010ca0 <_fflush_r+0x6c>)
 8010c50:	429c      	cmp	r4, r3
 8010c52:	d11b      	bne.n	8010c8c <_fflush_r+0x58>
 8010c54:	686c      	ldr	r4, [r5, #4]
 8010c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d0ef      	beq.n	8010c3e <_fflush_r+0xa>
 8010c5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010c60:	07d0      	lsls	r0, r2, #31
 8010c62:	d404      	bmi.n	8010c6e <_fflush_r+0x3a>
 8010c64:	0599      	lsls	r1, r3, #22
 8010c66:	d402      	bmi.n	8010c6e <_fflush_r+0x3a>
 8010c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c6a:	f000 f915 	bl	8010e98 <__retarget_lock_acquire_recursive>
 8010c6e:	4628      	mov	r0, r5
 8010c70:	4621      	mov	r1, r4
 8010c72:	f7ff ff59 	bl	8010b28 <__sflush_r>
 8010c76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c78:	07da      	lsls	r2, r3, #31
 8010c7a:	4605      	mov	r5, r0
 8010c7c:	d4e0      	bmi.n	8010c40 <_fflush_r+0xc>
 8010c7e:	89a3      	ldrh	r3, [r4, #12]
 8010c80:	059b      	lsls	r3, r3, #22
 8010c82:	d4dd      	bmi.n	8010c40 <_fflush_r+0xc>
 8010c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c86:	f000 f908 	bl	8010e9a <__retarget_lock_release_recursive>
 8010c8a:	e7d9      	b.n	8010c40 <_fflush_r+0xc>
 8010c8c:	4b05      	ldr	r3, [pc, #20]	; (8010ca4 <_fflush_r+0x70>)
 8010c8e:	429c      	cmp	r4, r3
 8010c90:	d101      	bne.n	8010c96 <_fflush_r+0x62>
 8010c92:	68ac      	ldr	r4, [r5, #8]
 8010c94:	e7df      	b.n	8010c56 <_fflush_r+0x22>
 8010c96:	4b04      	ldr	r3, [pc, #16]	; (8010ca8 <_fflush_r+0x74>)
 8010c98:	429c      	cmp	r4, r3
 8010c9a:	bf08      	it	eq
 8010c9c:	68ec      	ldreq	r4, [r5, #12]
 8010c9e:	e7da      	b.n	8010c56 <_fflush_r+0x22>
 8010ca0:	080118a4 	.word	0x080118a4
 8010ca4:	080118c4 	.word	0x080118c4
 8010ca8:	08011884 	.word	0x08011884

08010cac <std>:
 8010cac:	2300      	movs	r3, #0
 8010cae:	b510      	push	{r4, lr}
 8010cb0:	4604      	mov	r4, r0
 8010cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8010cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010cba:	6083      	str	r3, [r0, #8]
 8010cbc:	8181      	strh	r1, [r0, #12]
 8010cbe:	6643      	str	r3, [r0, #100]	; 0x64
 8010cc0:	81c2      	strh	r2, [r0, #14]
 8010cc2:	6183      	str	r3, [r0, #24]
 8010cc4:	4619      	mov	r1, r3
 8010cc6:	2208      	movs	r2, #8
 8010cc8:	305c      	adds	r0, #92	; 0x5c
 8010cca:	f7fb fddb 	bl	800c884 <memset>
 8010cce:	4b05      	ldr	r3, [pc, #20]	; (8010ce4 <std+0x38>)
 8010cd0:	6263      	str	r3, [r4, #36]	; 0x24
 8010cd2:	4b05      	ldr	r3, [pc, #20]	; (8010ce8 <std+0x3c>)
 8010cd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8010cd6:	4b05      	ldr	r3, [pc, #20]	; (8010cec <std+0x40>)
 8010cd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010cda:	4b05      	ldr	r3, [pc, #20]	; (8010cf0 <std+0x44>)
 8010cdc:	6224      	str	r4, [r4, #32]
 8010cde:	6323      	str	r3, [r4, #48]	; 0x30
 8010ce0:	bd10      	pop	{r4, pc}
 8010ce2:	bf00      	nop
 8010ce4:	08011001 	.word	0x08011001
 8010ce8:	08011023 	.word	0x08011023
 8010cec:	0801105b 	.word	0x0801105b
 8010cf0:	0801107f 	.word	0x0801107f

08010cf4 <_cleanup_r>:
 8010cf4:	4901      	ldr	r1, [pc, #4]	; (8010cfc <_cleanup_r+0x8>)
 8010cf6:	f000 b8af 	b.w	8010e58 <_fwalk_reent>
 8010cfa:	bf00      	nop
 8010cfc:	08010c35 	.word	0x08010c35

08010d00 <__sfmoreglue>:
 8010d00:	b570      	push	{r4, r5, r6, lr}
 8010d02:	2268      	movs	r2, #104	; 0x68
 8010d04:	1e4d      	subs	r5, r1, #1
 8010d06:	4355      	muls	r5, r2
 8010d08:	460e      	mov	r6, r1
 8010d0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010d0e:	f7ff fa5b 	bl	80101c8 <_malloc_r>
 8010d12:	4604      	mov	r4, r0
 8010d14:	b140      	cbz	r0, 8010d28 <__sfmoreglue+0x28>
 8010d16:	2100      	movs	r1, #0
 8010d18:	e9c0 1600 	strd	r1, r6, [r0]
 8010d1c:	300c      	adds	r0, #12
 8010d1e:	60a0      	str	r0, [r4, #8]
 8010d20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010d24:	f7fb fdae 	bl	800c884 <memset>
 8010d28:	4620      	mov	r0, r4
 8010d2a:	bd70      	pop	{r4, r5, r6, pc}

08010d2c <__sfp_lock_acquire>:
 8010d2c:	4801      	ldr	r0, [pc, #4]	; (8010d34 <__sfp_lock_acquire+0x8>)
 8010d2e:	f000 b8b3 	b.w	8010e98 <__retarget_lock_acquire_recursive>
 8010d32:	bf00      	nop
 8010d34:	20001111 	.word	0x20001111

08010d38 <__sfp_lock_release>:
 8010d38:	4801      	ldr	r0, [pc, #4]	; (8010d40 <__sfp_lock_release+0x8>)
 8010d3a:	f000 b8ae 	b.w	8010e9a <__retarget_lock_release_recursive>
 8010d3e:	bf00      	nop
 8010d40:	20001111 	.word	0x20001111

08010d44 <__sinit_lock_acquire>:
 8010d44:	4801      	ldr	r0, [pc, #4]	; (8010d4c <__sinit_lock_acquire+0x8>)
 8010d46:	f000 b8a7 	b.w	8010e98 <__retarget_lock_acquire_recursive>
 8010d4a:	bf00      	nop
 8010d4c:	20001112 	.word	0x20001112

08010d50 <__sinit_lock_release>:
 8010d50:	4801      	ldr	r0, [pc, #4]	; (8010d58 <__sinit_lock_release+0x8>)
 8010d52:	f000 b8a2 	b.w	8010e9a <__retarget_lock_release_recursive>
 8010d56:	bf00      	nop
 8010d58:	20001112 	.word	0x20001112

08010d5c <__sinit>:
 8010d5c:	b510      	push	{r4, lr}
 8010d5e:	4604      	mov	r4, r0
 8010d60:	f7ff fff0 	bl	8010d44 <__sinit_lock_acquire>
 8010d64:	69a3      	ldr	r3, [r4, #24]
 8010d66:	b11b      	cbz	r3, 8010d70 <__sinit+0x14>
 8010d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d6c:	f7ff bff0 	b.w	8010d50 <__sinit_lock_release>
 8010d70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010d74:	6523      	str	r3, [r4, #80]	; 0x50
 8010d76:	4b13      	ldr	r3, [pc, #76]	; (8010dc4 <__sinit+0x68>)
 8010d78:	4a13      	ldr	r2, [pc, #76]	; (8010dc8 <__sinit+0x6c>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8010d7e:	42a3      	cmp	r3, r4
 8010d80:	bf04      	itt	eq
 8010d82:	2301      	moveq	r3, #1
 8010d84:	61a3      	streq	r3, [r4, #24]
 8010d86:	4620      	mov	r0, r4
 8010d88:	f000 f820 	bl	8010dcc <__sfp>
 8010d8c:	6060      	str	r0, [r4, #4]
 8010d8e:	4620      	mov	r0, r4
 8010d90:	f000 f81c 	bl	8010dcc <__sfp>
 8010d94:	60a0      	str	r0, [r4, #8]
 8010d96:	4620      	mov	r0, r4
 8010d98:	f000 f818 	bl	8010dcc <__sfp>
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	60e0      	str	r0, [r4, #12]
 8010da0:	2104      	movs	r1, #4
 8010da2:	6860      	ldr	r0, [r4, #4]
 8010da4:	f7ff ff82 	bl	8010cac <std>
 8010da8:	68a0      	ldr	r0, [r4, #8]
 8010daa:	2201      	movs	r2, #1
 8010dac:	2109      	movs	r1, #9
 8010dae:	f7ff ff7d 	bl	8010cac <std>
 8010db2:	68e0      	ldr	r0, [r4, #12]
 8010db4:	2202      	movs	r2, #2
 8010db6:	2112      	movs	r1, #18
 8010db8:	f7ff ff78 	bl	8010cac <std>
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	61a3      	str	r3, [r4, #24]
 8010dc0:	e7d2      	b.n	8010d68 <__sinit+0xc>
 8010dc2:	bf00      	nop
 8010dc4:	0801143c 	.word	0x0801143c
 8010dc8:	08010cf5 	.word	0x08010cf5

08010dcc <__sfp>:
 8010dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dce:	4607      	mov	r7, r0
 8010dd0:	f7ff ffac 	bl	8010d2c <__sfp_lock_acquire>
 8010dd4:	4b1e      	ldr	r3, [pc, #120]	; (8010e50 <__sfp+0x84>)
 8010dd6:	681e      	ldr	r6, [r3, #0]
 8010dd8:	69b3      	ldr	r3, [r6, #24]
 8010dda:	b913      	cbnz	r3, 8010de2 <__sfp+0x16>
 8010ddc:	4630      	mov	r0, r6
 8010dde:	f7ff ffbd 	bl	8010d5c <__sinit>
 8010de2:	3648      	adds	r6, #72	; 0x48
 8010de4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010de8:	3b01      	subs	r3, #1
 8010dea:	d503      	bpl.n	8010df4 <__sfp+0x28>
 8010dec:	6833      	ldr	r3, [r6, #0]
 8010dee:	b30b      	cbz	r3, 8010e34 <__sfp+0x68>
 8010df0:	6836      	ldr	r6, [r6, #0]
 8010df2:	e7f7      	b.n	8010de4 <__sfp+0x18>
 8010df4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010df8:	b9d5      	cbnz	r5, 8010e30 <__sfp+0x64>
 8010dfa:	4b16      	ldr	r3, [pc, #88]	; (8010e54 <__sfp+0x88>)
 8010dfc:	60e3      	str	r3, [r4, #12]
 8010dfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010e02:	6665      	str	r5, [r4, #100]	; 0x64
 8010e04:	f000 f847 	bl	8010e96 <__retarget_lock_init_recursive>
 8010e08:	f7ff ff96 	bl	8010d38 <__sfp_lock_release>
 8010e0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010e10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010e14:	6025      	str	r5, [r4, #0]
 8010e16:	61a5      	str	r5, [r4, #24]
 8010e18:	2208      	movs	r2, #8
 8010e1a:	4629      	mov	r1, r5
 8010e1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010e20:	f7fb fd30 	bl	800c884 <memset>
 8010e24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010e28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e30:	3468      	adds	r4, #104	; 0x68
 8010e32:	e7d9      	b.n	8010de8 <__sfp+0x1c>
 8010e34:	2104      	movs	r1, #4
 8010e36:	4638      	mov	r0, r7
 8010e38:	f7ff ff62 	bl	8010d00 <__sfmoreglue>
 8010e3c:	4604      	mov	r4, r0
 8010e3e:	6030      	str	r0, [r6, #0]
 8010e40:	2800      	cmp	r0, #0
 8010e42:	d1d5      	bne.n	8010df0 <__sfp+0x24>
 8010e44:	f7ff ff78 	bl	8010d38 <__sfp_lock_release>
 8010e48:	230c      	movs	r3, #12
 8010e4a:	603b      	str	r3, [r7, #0]
 8010e4c:	e7ee      	b.n	8010e2c <__sfp+0x60>
 8010e4e:	bf00      	nop
 8010e50:	0801143c 	.word	0x0801143c
 8010e54:	ffff0001 	.word	0xffff0001

08010e58 <_fwalk_reent>:
 8010e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e5c:	4606      	mov	r6, r0
 8010e5e:	4688      	mov	r8, r1
 8010e60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010e64:	2700      	movs	r7, #0
 8010e66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010e6a:	f1b9 0901 	subs.w	r9, r9, #1
 8010e6e:	d505      	bpl.n	8010e7c <_fwalk_reent+0x24>
 8010e70:	6824      	ldr	r4, [r4, #0]
 8010e72:	2c00      	cmp	r4, #0
 8010e74:	d1f7      	bne.n	8010e66 <_fwalk_reent+0xe>
 8010e76:	4638      	mov	r0, r7
 8010e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e7c:	89ab      	ldrh	r3, [r5, #12]
 8010e7e:	2b01      	cmp	r3, #1
 8010e80:	d907      	bls.n	8010e92 <_fwalk_reent+0x3a>
 8010e82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010e86:	3301      	adds	r3, #1
 8010e88:	d003      	beq.n	8010e92 <_fwalk_reent+0x3a>
 8010e8a:	4629      	mov	r1, r5
 8010e8c:	4630      	mov	r0, r6
 8010e8e:	47c0      	blx	r8
 8010e90:	4307      	orrs	r7, r0
 8010e92:	3568      	adds	r5, #104	; 0x68
 8010e94:	e7e9      	b.n	8010e6a <_fwalk_reent+0x12>

08010e96 <__retarget_lock_init_recursive>:
 8010e96:	4770      	bx	lr

08010e98 <__retarget_lock_acquire_recursive>:
 8010e98:	4770      	bx	lr

08010e9a <__retarget_lock_release_recursive>:
 8010e9a:	4770      	bx	lr

08010e9c <__swhatbuf_r>:
 8010e9c:	b570      	push	{r4, r5, r6, lr}
 8010e9e:	460e      	mov	r6, r1
 8010ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ea4:	2900      	cmp	r1, #0
 8010ea6:	b096      	sub	sp, #88	; 0x58
 8010ea8:	4614      	mov	r4, r2
 8010eaa:	461d      	mov	r5, r3
 8010eac:	da08      	bge.n	8010ec0 <__swhatbuf_r+0x24>
 8010eae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	602a      	str	r2, [r5, #0]
 8010eb6:	061a      	lsls	r2, r3, #24
 8010eb8:	d410      	bmi.n	8010edc <__swhatbuf_r+0x40>
 8010eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ebe:	e00e      	b.n	8010ede <__swhatbuf_r+0x42>
 8010ec0:	466a      	mov	r2, sp
 8010ec2:	f000 f903 	bl	80110cc <_fstat_r>
 8010ec6:	2800      	cmp	r0, #0
 8010ec8:	dbf1      	blt.n	8010eae <__swhatbuf_r+0x12>
 8010eca:	9a01      	ldr	r2, [sp, #4]
 8010ecc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010ed0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010ed4:	425a      	negs	r2, r3
 8010ed6:	415a      	adcs	r2, r3
 8010ed8:	602a      	str	r2, [r5, #0]
 8010eda:	e7ee      	b.n	8010eba <__swhatbuf_r+0x1e>
 8010edc:	2340      	movs	r3, #64	; 0x40
 8010ede:	2000      	movs	r0, #0
 8010ee0:	6023      	str	r3, [r4, #0]
 8010ee2:	b016      	add	sp, #88	; 0x58
 8010ee4:	bd70      	pop	{r4, r5, r6, pc}
	...

08010ee8 <__smakebuf_r>:
 8010ee8:	898b      	ldrh	r3, [r1, #12]
 8010eea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010eec:	079d      	lsls	r5, r3, #30
 8010eee:	4606      	mov	r6, r0
 8010ef0:	460c      	mov	r4, r1
 8010ef2:	d507      	bpl.n	8010f04 <__smakebuf_r+0x1c>
 8010ef4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ef8:	6023      	str	r3, [r4, #0]
 8010efa:	6123      	str	r3, [r4, #16]
 8010efc:	2301      	movs	r3, #1
 8010efe:	6163      	str	r3, [r4, #20]
 8010f00:	b002      	add	sp, #8
 8010f02:	bd70      	pop	{r4, r5, r6, pc}
 8010f04:	ab01      	add	r3, sp, #4
 8010f06:	466a      	mov	r2, sp
 8010f08:	f7ff ffc8 	bl	8010e9c <__swhatbuf_r>
 8010f0c:	9900      	ldr	r1, [sp, #0]
 8010f0e:	4605      	mov	r5, r0
 8010f10:	4630      	mov	r0, r6
 8010f12:	f7ff f959 	bl	80101c8 <_malloc_r>
 8010f16:	b948      	cbnz	r0, 8010f2c <__smakebuf_r+0x44>
 8010f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f1c:	059a      	lsls	r2, r3, #22
 8010f1e:	d4ef      	bmi.n	8010f00 <__smakebuf_r+0x18>
 8010f20:	f023 0303 	bic.w	r3, r3, #3
 8010f24:	f043 0302 	orr.w	r3, r3, #2
 8010f28:	81a3      	strh	r3, [r4, #12]
 8010f2a:	e7e3      	b.n	8010ef4 <__smakebuf_r+0xc>
 8010f2c:	4b0d      	ldr	r3, [pc, #52]	; (8010f64 <__smakebuf_r+0x7c>)
 8010f2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010f30:	89a3      	ldrh	r3, [r4, #12]
 8010f32:	6020      	str	r0, [r4, #0]
 8010f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f38:	81a3      	strh	r3, [r4, #12]
 8010f3a:	9b00      	ldr	r3, [sp, #0]
 8010f3c:	6163      	str	r3, [r4, #20]
 8010f3e:	9b01      	ldr	r3, [sp, #4]
 8010f40:	6120      	str	r0, [r4, #16]
 8010f42:	b15b      	cbz	r3, 8010f5c <__smakebuf_r+0x74>
 8010f44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f48:	4630      	mov	r0, r6
 8010f4a:	f000 f8d1 	bl	80110f0 <_isatty_r>
 8010f4e:	b128      	cbz	r0, 8010f5c <__smakebuf_r+0x74>
 8010f50:	89a3      	ldrh	r3, [r4, #12]
 8010f52:	f023 0303 	bic.w	r3, r3, #3
 8010f56:	f043 0301 	orr.w	r3, r3, #1
 8010f5a:	81a3      	strh	r3, [r4, #12]
 8010f5c:	89a0      	ldrh	r0, [r4, #12]
 8010f5e:	4305      	orrs	r5, r0
 8010f60:	81a5      	strh	r5, [r4, #12]
 8010f62:	e7cd      	b.n	8010f00 <__smakebuf_r+0x18>
 8010f64:	08010cf5 	.word	0x08010cf5

08010f68 <_malloc_usable_size_r>:
 8010f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f6c:	1f18      	subs	r0, r3, #4
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	bfbc      	itt	lt
 8010f72:	580b      	ldrlt	r3, [r1, r0]
 8010f74:	18c0      	addlt	r0, r0, r3
 8010f76:	4770      	bx	lr

08010f78 <_raise_r>:
 8010f78:	291f      	cmp	r1, #31
 8010f7a:	b538      	push	{r3, r4, r5, lr}
 8010f7c:	4604      	mov	r4, r0
 8010f7e:	460d      	mov	r5, r1
 8010f80:	d904      	bls.n	8010f8c <_raise_r+0x14>
 8010f82:	2316      	movs	r3, #22
 8010f84:	6003      	str	r3, [r0, #0]
 8010f86:	f04f 30ff 	mov.w	r0, #4294967295
 8010f8a:	bd38      	pop	{r3, r4, r5, pc}
 8010f8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010f8e:	b112      	cbz	r2, 8010f96 <_raise_r+0x1e>
 8010f90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010f94:	b94b      	cbnz	r3, 8010faa <_raise_r+0x32>
 8010f96:	4620      	mov	r0, r4
 8010f98:	f000 f830 	bl	8010ffc <_getpid_r>
 8010f9c:	462a      	mov	r2, r5
 8010f9e:	4601      	mov	r1, r0
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fa6:	f000 b817 	b.w	8010fd8 <_kill_r>
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	d00a      	beq.n	8010fc4 <_raise_r+0x4c>
 8010fae:	1c59      	adds	r1, r3, #1
 8010fb0:	d103      	bne.n	8010fba <_raise_r+0x42>
 8010fb2:	2316      	movs	r3, #22
 8010fb4:	6003      	str	r3, [r0, #0]
 8010fb6:	2001      	movs	r0, #1
 8010fb8:	e7e7      	b.n	8010f8a <_raise_r+0x12>
 8010fba:	2400      	movs	r4, #0
 8010fbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010fc0:	4628      	mov	r0, r5
 8010fc2:	4798      	blx	r3
 8010fc4:	2000      	movs	r0, #0
 8010fc6:	e7e0      	b.n	8010f8a <_raise_r+0x12>

08010fc8 <raise>:
 8010fc8:	4b02      	ldr	r3, [pc, #8]	; (8010fd4 <raise+0xc>)
 8010fca:	4601      	mov	r1, r0
 8010fcc:	6818      	ldr	r0, [r3, #0]
 8010fce:	f7ff bfd3 	b.w	8010f78 <_raise_r>
 8010fd2:	bf00      	nop
 8010fd4:	2000025c 	.word	0x2000025c

08010fd8 <_kill_r>:
 8010fd8:	b538      	push	{r3, r4, r5, lr}
 8010fda:	4d07      	ldr	r5, [pc, #28]	; (8010ff8 <_kill_r+0x20>)
 8010fdc:	2300      	movs	r3, #0
 8010fde:	4604      	mov	r4, r0
 8010fe0:	4608      	mov	r0, r1
 8010fe2:	4611      	mov	r1, r2
 8010fe4:	602b      	str	r3, [r5, #0]
 8010fe6:	f7f4 f8bd 	bl	8005164 <_kill>
 8010fea:	1c43      	adds	r3, r0, #1
 8010fec:	d102      	bne.n	8010ff4 <_kill_r+0x1c>
 8010fee:	682b      	ldr	r3, [r5, #0]
 8010ff0:	b103      	cbz	r3, 8010ff4 <_kill_r+0x1c>
 8010ff2:	6023      	str	r3, [r4, #0]
 8010ff4:	bd38      	pop	{r3, r4, r5, pc}
 8010ff6:	bf00      	nop
 8010ff8:	2000110c 	.word	0x2000110c

08010ffc <_getpid_r>:
 8010ffc:	f7f4 b8aa 	b.w	8005154 <_getpid>

08011000 <__sread>:
 8011000:	b510      	push	{r4, lr}
 8011002:	460c      	mov	r4, r1
 8011004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011008:	f000 f894 	bl	8011134 <_read_r>
 801100c:	2800      	cmp	r0, #0
 801100e:	bfab      	itete	ge
 8011010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011012:	89a3      	ldrhlt	r3, [r4, #12]
 8011014:	181b      	addge	r3, r3, r0
 8011016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801101a:	bfac      	ite	ge
 801101c:	6563      	strge	r3, [r4, #84]	; 0x54
 801101e:	81a3      	strhlt	r3, [r4, #12]
 8011020:	bd10      	pop	{r4, pc}

08011022 <__swrite>:
 8011022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011026:	461f      	mov	r7, r3
 8011028:	898b      	ldrh	r3, [r1, #12]
 801102a:	05db      	lsls	r3, r3, #23
 801102c:	4605      	mov	r5, r0
 801102e:	460c      	mov	r4, r1
 8011030:	4616      	mov	r6, r2
 8011032:	d505      	bpl.n	8011040 <__swrite+0x1e>
 8011034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011038:	2302      	movs	r3, #2
 801103a:	2200      	movs	r2, #0
 801103c:	f000 f868 	bl	8011110 <_lseek_r>
 8011040:	89a3      	ldrh	r3, [r4, #12]
 8011042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801104a:	81a3      	strh	r3, [r4, #12]
 801104c:	4632      	mov	r2, r6
 801104e:	463b      	mov	r3, r7
 8011050:	4628      	mov	r0, r5
 8011052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011056:	f000 b817 	b.w	8011088 <_write_r>

0801105a <__sseek>:
 801105a:	b510      	push	{r4, lr}
 801105c:	460c      	mov	r4, r1
 801105e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011062:	f000 f855 	bl	8011110 <_lseek_r>
 8011066:	1c43      	adds	r3, r0, #1
 8011068:	89a3      	ldrh	r3, [r4, #12]
 801106a:	bf15      	itete	ne
 801106c:	6560      	strne	r0, [r4, #84]	; 0x54
 801106e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011076:	81a3      	strheq	r3, [r4, #12]
 8011078:	bf18      	it	ne
 801107a:	81a3      	strhne	r3, [r4, #12]
 801107c:	bd10      	pop	{r4, pc}

0801107e <__sclose>:
 801107e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011082:	f000 b813 	b.w	80110ac <_close_r>
	...

08011088 <_write_r>:
 8011088:	b538      	push	{r3, r4, r5, lr}
 801108a:	4d07      	ldr	r5, [pc, #28]	; (80110a8 <_write_r+0x20>)
 801108c:	4604      	mov	r4, r0
 801108e:	4608      	mov	r0, r1
 8011090:	4611      	mov	r1, r2
 8011092:	2200      	movs	r2, #0
 8011094:	602a      	str	r2, [r5, #0]
 8011096:	461a      	mov	r2, r3
 8011098:	f7f4 f89b 	bl	80051d2 <_write>
 801109c:	1c43      	adds	r3, r0, #1
 801109e:	d102      	bne.n	80110a6 <_write_r+0x1e>
 80110a0:	682b      	ldr	r3, [r5, #0]
 80110a2:	b103      	cbz	r3, 80110a6 <_write_r+0x1e>
 80110a4:	6023      	str	r3, [r4, #0]
 80110a6:	bd38      	pop	{r3, r4, r5, pc}
 80110a8:	2000110c 	.word	0x2000110c

080110ac <_close_r>:
 80110ac:	b538      	push	{r3, r4, r5, lr}
 80110ae:	4d06      	ldr	r5, [pc, #24]	; (80110c8 <_close_r+0x1c>)
 80110b0:	2300      	movs	r3, #0
 80110b2:	4604      	mov	r4, r0
 80110b4:	4608      	mov	r0, r1
 80110b6:	602b      	str	r3, [r5, #0]
 80110b8:	f7f4 f8a7 	bl	800520a <_close>
 80110bc:	1c43      	adds	r3, r0, #1
 80110be:	d102      	bne.n	80110c6 <_close_r+0x1a>
 80110c0:	682b      	ldr	r3, [r5, #0]
 80110c2:	b103      	cbz	r3, 80110c6 <_close_r+0x1a>
 80110c4:	6023      	str	r3, [r4, #0]
 80110c6:	bd38      	pop	{r3, r4, r5, pc}
 80110c8:	2000110c 	.word	0x2000110c

080110cc <_fstat_r>:
 80110cc:	b538      	push	{r3, r4, r5, lr}
 80110ce:	4d07      	ldr	r5, [pc, #28]	; (80110ec <_fstat_r+0x20>)
 80110d0:	2300      	movs	r3, #0
 80110d2:	4604      	mov	r4, r0
 80110d4:	4608      	mov	r0, r1
 80110d6:	4611      	mov	r1, r2
 80110d8:	602b      	str	r3, [r5, #0]
 80110da:	f7f4 f8a2 	bl	8005222 <_fstat>
 80110de:	1c43      	adds	r3, r0, #1
 80110e0:	d102      	bne.n	80110e8 <_fstat_r+0x1c>
 80110e2:	682b      	ldr	r3, [r5, #0]
 80110e4:	b103      	cbz	r3, 80110e8 <_fstat_r+0x1c>
 80110e6:	6023      	str	r3, [r4, #0]
 80110e8:	bd38      	pop	{r3, r4, r5, pc}
 80110ea:	bf00      	nop
 80110ec:	2000110c 	.word	0x2000110c

080110f0 <_isatty_r>:
 80110f0:	b538      	push	{r3, r4, r5, lr}
 80110f2:	4d06      	ldr	r5, [pc, #24]	; (801110c <_isatty_r+0x1c>)
 80110f4:	2300      	movs	r3, #0
 80110f6:	4604      	mov	r4, r0
 80110f8:	4608      	mov	r0, r1
 80110fa:	602b      	str	r3, [r5, #0]
 80110fc:	f7f4 f8a1 	bl	8005242 <_isatty>
 8011100:	1c43      	adds	r3, r0, #1
 8011102:	d102      	bne.n	801110a <_isatty_r+0x1a>
 8011104:	682b      	ldr	r3, [r5, #0]
 8011106:	b103      	cbz	r3, 801110a <_isatty_r+0x1a>
 8011108:	6023      	str	r3, [r4, #0]
 801110a:	bd38      	pop	{r3, r4, r5, pc}
 801110c:	2000110c 	.word	0x2000110c

08011110 <_lseek_r>:
 8011110:	b538      	push	{r3, r4, r5, lr}
 8011112:	4d07      	ldr	r5, [pc, #28]	; (8011130 <_lseek_r+0x20>)
 8011114:	4604      	mov	r4, r0
 8011116:	4608      	mov	r0, r1
 8011118:	4611      	mov	r1, r2
 801111a:	2200      	movs	r2, #0
 801111c:	602a      	str	r2, [r5, #0]
 801111e:	461a      	mov	r2, r3
 8011120:	f7f4 f89a 	bl	8005258 <_lseek>
 8011124:	1c43      	adds	r3, r0, #1
 8011126:	d102      	bne.n	801112e <_lseek_r+0x1e>
 8011128:	682b      	ldr	r3, [r5, #0]
 801112a:	b103      	cbz	r3, 801112e <_lseek_r+0x1e>
 801112c:	6023      	str	r3, [r4, #0]
 801112e:	bd38      	pop	{r3, r4, r5, pc}
 8011130:	2000110c 	.word	0x2000110c

08011134 <_read_r>:
 8011134:	b538      	push	{r3, r4, r5, lr}
 8011136:	4d07      	ldr	r5, [pc, #28]	; (8011154 <_read_r+0x20>)
 8011138:	4604      	mov	r4, r0
 801113a:	4608      	mov	r0, r1
 801113c:	4611      	mov	r1, r2
 801113e:	2200      	movs	r2, #0
 8011140:	602a      	str	r2, [r5, #0]
 8011142:	461a      	mov	r2, r3
 8011144:	f7f4 f828 	bl	8005198 <_read>
 8011148:	1c43      	adds	r3, r0, #1
 801114a:	d102      	bne.n	8011152 <_read_r+0x1e>
 801114c:	682b      	ldr	r3, [r5, #0]
 801114e:	b103      	cbz	r3, 8011152 <_read_r+0x1e>
 8011150:	6023      	str	r3, [r4, #0]
 8011152:	bd38      	pop	{r3, r4, r5, pc}
 8011154:	2000110c 	.word	0x2000110c

08011158 <acosf>:
 8011158:	b508      	push	{r3, lr}
 801115a:	ed2d 8b02 	vpush	{d8}
 801115e:	eeb0 8a40 	vmov.f32	s16, s0
 8011162:	f000 f843 	bl	80111ec <__ieee754_acosf>
 8011166:	eeb4 8a48 	vcmp.f32	s16, s16
 801116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801116e:	eef0 8a40 	vmov.f32	s17, s0
 8011172:	d615      	bvs.n	80111a0 <acosf+0x48>
 8011174:	eeb0 0a48 	vmov.f32	s0, s16
 8011178:	f000 f933 	bl	80113e2 <fabsf>
 801117c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011180:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011188:	dd0a      	ble.n	80111a0 <acosf+0x48>
 801118a:	f7fb fb43 	bl	800c814 <__errno>
 801118e:	ecbd 8b02 	vpop	{d8}
 8011192:	2321      	movs	r3, #33	; 0x21
 8011194:	6003      	str	r3, [r0, #0]
 8011196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801119a:	4804      	ldr	r0, [pc, #16]	; (80111ac <acosf+0x54>)
 801119c:	f7fc b9f4 	b.w	800d588 <nanf>
 80111a0:	eeb0 0a68 	vmov.f32	s0, s17
 80111a4:	ecbd 8b02 	vpop	{d8}
 80111a8:	bd08      	pop	{r3, pc}
 80111aa:	bf00      	nop
 80111ac:	08011880 	.word	0x08011880

080111b0 <sqrtf>:
 80111b0:	b508      	push	{r3, lr}
 80111b2:	ed2d 8b02 	vpush	{d8}
 80111b6:	eeb0 8a40 	vmov.f32	s16, s0
 80111ba:	f000 f90f 	bl	80113dc <__ieee754_sqrtf>
 80111be:	eeb4 8a48 	vcmp.f32	s16, s16
 80111c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111c6:	d60c      	bvs.n	80111e2 <sqrtf+0x32>
 80111c8:	eddf 8a07 	vldr	s17, [pc, #28]	; 80111e8 <sqrtf+0x38>
 80111cc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80111d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d4:	d505      	bpl.n	80111e2 <sqrtf+0x32>
 80111d6:	f7fb fb1d 	bl	800c814 <__errno>
 80111da:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80111de:	2321      	movs	r3, #33	; 0x21
 80111e0:	6003      	str	r3, [r0, #0]
 80111e2:	ecbd 8b02 	vpop	{d8}
 80111e6:	bd08      	pop	{r3, pc}
 80111e8:	00000000 	.word	0x00000000

080111ec <__ieee754_acosf>:
 80111ec:	b508      	push	{r3, lr}
 80111ee:	ee10 3a10 	vmov	r3, s0
 80111f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80111f6:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80111fa:	ed2d 8b0c 	vpush	{d8-d13}
 80111fe:	d10a      	bne.n	8011216 <__ieee754_acosf+0x2a>
 8011200:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8011398 <__ieee754_acosf+0x1ac>
 8011204:	ed9f 8a65 	vldr	s16, [pc, #404]	; 801139c <__ieee754_acosf+0x1b0>
 8011208:	2b00      	cmp	r3, #0
 801120a:	bfd8      	it	le
 801120c:	eeb0 0a48 	vmovle.f32	s0, s16
 8011210:	ecbd 8b0c 	vpop	{d8-d13}
 8011214:	bd08      	pop	{r3, pc}
 8011216:	dd04      	ble.n	8011222 <__ieee754_acosf+0x36>
 8011218:	ee30 8a40 	vsub.f32	s16, s0, s0
 801121c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8011220:	e7f6      	b.n	8011210 <__ieee754_acosf+0x24>
 8011222:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8011226:	da3c      	bge.n	80112a2 <__ieee754_acosf+0xb6>
 8011228:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 801122c:	f340 80b1 	ble.w	8011392 <__ieee754_acosf+0x1a6>
 8011230:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011234:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80113a0 <__ieee754_acosf+0x1b4>
 8011238:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80113a4 <__ieee754_acosf+0x1b8>
 801123c:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 80113a8 <__ieee754_acosf+0x1bc>
 8011240:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 80113ac <__ieee754_acosf+0x1c0>
 8011244:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011248:	eddf 6a59 	vldr	s13, [pc, #356]	; 80113b0 <__ieee754_acosf+0x1c4>
 801124c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011250:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80113b4 <__ieee754_acosf+0x1c8>
 8011254:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011258:	eddf 6a57 	vldr	s13, [pc, #348]	; 80113b8 <__ieee754_acosf+0x1cc>
 801125c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011260:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80113bc <__ieee754_acosf+0x1d0>
 8011264:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011268:	eddf 6a55 	vldr	s13, [pc, #340]	; 80113c0 <__ieee754_acosf+0x1d4>
 801126c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8011270:	eddf 6a54 	vldr	s13, [pc, #336]	; 80113c4 <__ieee754_acosf+0x1d8>
 8011274:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011278:	ed9f 6a53 	vldr	s12, [pc, #332]	; 80113c8 <__ieee754_acosf+0x1dc>
 801127c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011280:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011284:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011288:	ee27 7a27 	vmul.f32	s14, s14, s15
 801128c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011290:	eea0 8a67 	vfms.f32	s16, s0, s15
 8011294:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80113cc <__ieee754_acosf+0x1e0>
 8011298:	ee30 0a48 	vsub.f32	s0, s0, s16
 801129c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80112a0:	e7b6      	b.n	8011210 <__ieee754_acosf+0x24>
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	eddf da3e 	vldr	s27, [pc, #248]	; 80113a0 <__ieee754_acosf+0x1b4>
 80112a8:	eddf ca3e 	vldr	s25, [pc, #248]	; 80113a4 <__ieee754_acosf+0x1b8>
 80112ac:	ed9f ca40 	vldr	s24, [pc, #256]	; 80113b0 <__ieee754_acosf+0x1c4>
 80112b0:	eddf ba40 	vldr	s23, [pc, #256]	; 80113b4 <__ieee754_acosf+0x1c8>
 80112b4:	ed9f ba40 	vldr	s22, [pc, #256]	; 80113b8 <__ieee754_acosf+0x1cc>
 80112b8:	eddf 8a40 	vldr	s17, [pc, #256]	; 80113bc <__ieee754_acosf+0x1d0>
 80112bc:	ed9f da40 	vldr	s26, [pc, #256]	; 80113c0 <__ieee754_acosf+0x1d4>
 80112c0:	eddf aa39 	vldr	s21, [pc, #228]	; 80113a8 <__ieee754_acosf+0x1bc>
 80112c4:	ed9f aa3f 	vldr	s20, [pc, #252]	; 80113c4 <__ieee754_acosf+0x1d8>
 80112c8:	eddf 9a3f 	vldr	s19, [pc, #252]	; 80113c8 <__ieee754_acosf+0x1dc>
 80112cc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80112d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80112d4:	da28      	bge.n	8011328 <__ieee754_acosf+0x13c>
 80112d6:	ee30 0a09 	vadd.f32	s0, s0, s18
 80112da:	ee20 0a27 	vmul.f32	s0, s0, s15
 80112de:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80112e2:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80112e6:	eeac ca80 	vfma.f32	s24, s25, s0
 80112ea:	eeaa aa80 	vfma.f32	s20, s21, s0
 80112ee:	eeec ba00 	vfma.f32	s23, s24, s0
 80112f2:	eeea 9a00 	vfma.f32	s19, s20, s0
 80112f6:	eeab ba80 	vfma.f32	s22, s23, s0
 80112fa:	eea9 9a80 	vfma.f32	s18, s19, s0
 80112fe:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8011302:	ee68 8a80 	vmul.f32	s17, s17, s0
 8011306:	f000 f869 	bl	80113dc <__ieee754_sqrtf>
 801130a:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801130e:	eddf 7a30 	vldr	s15, [pc, #192]	; 80113d0 <__ieee754_acosf+0x1e4>
 8011312:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011316:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801131a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801131e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80113d4 <__ieee754_acosf+0x1e8>
 8011322:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011326:	e773      	b.n	8011210 <__ieee754_acosf+0x24>
 8011328:	ee39 8a40 	vsub.f32	s16, s18, s0
 801132c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011330:	eeb0 0a48 	vmov.f32	s0, s16
 8011334:	f000 f852 	bl	80113dc <__ieee754_sqrtf>
 8011338:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801133c:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8011340:	eeac ca88 	vfma.f32	s24, s25, s16
 8011344:	eeaa aa88 	vfma.f32	s20, s21, s16
 8011348:	eeec ba08 	vfma.f32	s23, s24, s16
 801134c:	ee10 3a10 	vmov	r3, s0
 8011350:	eeab ba88 	vfma.f32	s22, s23, s16
 8011354:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011358:	f023 030f 	bic.w	r3, r3, #15
 801135c:	eeea 9a08 	vfma.f32	s19, s20, s16
 8011360:	ee07 3a90 	vmov	s15, r3
 8011364:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8011368:	eeb0 6a48 	vmov.f32	s12, s16
 801136c:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8011370:	eea9 9a88 	vfma.f32	s18, s19, s16
 8011374:	ee70 6a27 	vadd.f32	s13, s0, s15
 8011378:	ee68 8a88 	vmul.f32	s17, s17, s16
 801137c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8011380:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8011384:	eea0 7a26 	vfma.f32	s14, s0, s13
 8011388:	ee37 0a87 	vadd.f32	s0, s15, s14
 801138c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011390:	e73e      	b.n	8011210 <__ieee754_acosf+0x24>
 8011392:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80113d8 <__ieee754_acosf+0x1ec>
 8011396:	e73b      	b.n	8011210 <__ieee754_acosf+0x24>
 8011398:	00000000 	.word	0x00000000
 801139c:	40490fdb 	.word	0x40490fdb
 80113a0:	3811ef08 	.word	0x3811ef08
 80113a4:	3a4f7f04 	.word	0x3a4f7f04
 80113a8:	bf303361 	.word	0xbf303361
 80113ac:	33a22168 	.word	0x33a22168
 80113b0:	bd241146 	.word	0xbd241146
 80113b4:	3e4e0aa8 	.word	0x3e4e0aa8
 80113b8:	bea6b090 	.word	0xbea6b090
 80113bc:	3e2aaaab 	.word	0x3e2aaaab
 80113c0:	3d9dc62e 	.word	0x3d9dc62e
 80113c4:	4001572d 	.word	0x4001572d
 80113c8:	c019d139 	.word	0xc019d139
 80113cc:	3fc90fda 	.word	0x3fc90fda
 80113d0:	b3a22168 	.word	0xb3a22168
 80113d4:	40490fda 	.word	0x40490fda
 80113d8:	3fc90fdb 	.word	0x3fc90fdb

080113dc <__ieee754_sqrtf>:
 80113dc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80113e0:	4770      	bx	lr

080113e2 <fabsf>:
 80113e2:	ee10 3a10 	vmov	r3, s0
 80113e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80113ea:	ee00 3a10 	vmov	s0, r3
 80113ee:	4770      	bx	lr

080113f0 <_init>:
 80113f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113f2:	bf00      	nop
 80113f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113f6:	bc08      	pop	{r3}
 80113f8:	469e      	mov	lr, r3
 80113fa:	4770      	bx	lr

080113fc <_fini>:
 80113fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113fe:	bf00      	nop
 8011400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011402:	bc08      	pop	{r3}
 8011404:	469e      	mov	lr, r3
 8011406:	4770      	bx	lr
